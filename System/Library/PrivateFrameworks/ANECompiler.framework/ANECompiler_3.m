void sub_23CC35004(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v4 = (uint64_t **)(a1 + 24);
  operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)a1, a1 + 24, *(void *)(a1 + 48), v9);
  uint64_t v6 = a2;
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, uint64_t *))(*v10 + 48))(v10, &v6);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void *))(*v10 + 40))(v10);
  }
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)a1, v4, *(void *)(a1 + 48), v7);
  uint64_t v6 = a2;
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, uint64_t *))(*v8 + 48))(v8, &v6);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void *))(*v8 + 40))(v8);
  }
  return result;
}

void sub_23CC35200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC35214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::LinMinPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C03E8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinMinPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C03E8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0430;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0430;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_26F0C0430;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(unsigned char **)(a1 + 8);
  v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_23CC35498(_Unwind_Exception *a1)
{
  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(void *result, uint64_t a2)
{
  v3 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = &unk_26F0C0430;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = (unsigned char *)result[1];
  v4 = (unsigned char *)result[2];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a2 + 24) = v8;
    uint64_t result = memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
  return result;
}

void sub_23CC35564(_Unwind_Exception *exception_object)
{
  v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14IsEqualToMaxOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16v"
                     "ectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14IsEqualToMaxOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEE"
                                "RKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14IsEqualToMaxOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14IsEqualToMaxOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  __p = 0;
  v29 = 0;
  v30 = 0;
  v4 = *(_DWORD **)a1;
  int64_t v5 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 == v5) {
LABEL_30:
  }
    operator new();
  while (1)
  {
    int v6 = *v4 ^ 1;
    v7 = v29;
    if (v29 >= v30) {
      break;
    }
    *(_DWORD *)v29 = v6;
    uint64_t v8 = (uint64_t)(v29 + 4);
LABEL_27:
    v29 = (char *)v8;
    unint64_t v26 = *v4 | ((unint64_t)*(unsigned int *)(a1 + 24) << 32);
    v31 = (void (**)(void **))&unk_26F0C04A0;
    unint64_t v32 = v26;
    v33 = (void **)&v31;
    uint64_t v27 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a2);
    operations_research::sat::PrecedencesPropagator::AddArc(v27, v32, SHIDWORD(v32), 0, -1, 0, 0);
    if (v33 == (void **)&v31)
    {
      v31[4]((void **)&v31);
    }
    else if (v33)
    {
      (*((void (**)(void))*v33 + 5))();
    }
    if (++v4 == v5) {
      goto LABEL_30;
    }
  }
  v9 = __p;
  uint64_t v10 = (v29 - (char *)__p) >> 2;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v30 - (char *)__p;
  if ((v30 - (char *)__p) >> 1 > v11) {
    unint64_t v11 = v12 >> 1;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v14 = v13;
    v15 = operator new(4 * v13);
    unint64_t v13 = v14;
    v16 = (int *)&v15[4 * v10];
    int *v16 = v6;
    uint64_t v8 = (uint64_t)(v16 + 1);
    if (v29 == (char *)__p) {
      goto LABEL_25;
    }
  }
  else
  {
    v15 = 0;
    v16 = (int *)(4 * v10);
    *(_DWORD *)(4 * v10) = v6;
    uint64_t v8 = 4 * v10 + 4;
    if (v29 == (char *)__p)
    {
LABEL_25:
      __p = v16;
      v30 = &v15[4 * v13];
      if (v9) {
        operator delete(v9);
      }
      goto LABEL_27;
    }
  }
  unint64_t v17 = v29 - 4 - (char *)__p;
  if (v17 < 0x2C) {
    goto LABEL_35;
  }
  if ((unint64_t)((char *)__p - v15) < 0x20) {
    goto LABEL_35;
  }
  uint64_t v18 = (v17 >> 2) + 1;
  uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
  v20 = &v29[-v19];
  v16 = (int *)((char *)v16 - v19);
  v21 = &v15[4 * v10 - 16];
  v22 = v29 - 16;
  uint64_t v23 = v18 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v24 = *(_OWORD *)v22;
    *(v21 - 1) = *((_OWORD *)v22 - 1);
    _OWORD *v21 = v24;
    v21 -= 2;
    v22 -= 32;
    v23 -= 8;
  }
  while (v23);
  v7 = v20;
  if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_35:
    do
    {
      int v25 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *--v16 = v25;
    }
    while (v7 != (char *)__p);
  }
  goto LABEL_25;
}

void sub_23CC35A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  MEMORY[0x23ECF2BC0](v14, 0x10A1C40C7DE62E2);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F0C04A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_26F0C04A0;
  a2[1] = *(void *)(result + 8);
  return result;
}

void std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);

  operations_research::sat::PrecedencesPropagator::AddArc(v3, v4, v5, 0, -1, 0, 0);
}

uint64_t std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEE"
                                "S4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0530;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0530;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_26F0C0530;
  operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CC35CEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C0530;
  return operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()()
{
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24NonOverlappingRectanglesERKNSt3__16vectorIN3gtl7IntTypeINS0_21Interval"
                     "Variable_tag_EiEENS1_9allocatorIS6_EEEESB_bEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24NonOverlappingRectanglesERKNSt3__16vectorIN3gtl7IntTypeINS0"
                                "_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEESB_bEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24NonOverlappingRectanglesERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEESB_bEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24NonOverlappingRectanglesERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEESB_bEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::Model(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    unint64_t v13 = &v12[4 * (v11 >> 2)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 32) = v13;
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  unsigned char *v9;
  unsigned char *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    unint64_t v13 = &v12[4 * (v11 >> 2)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 32) = v13;
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

void sub_23CC35F3C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC3604C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::operator()()
{
}

void sub_23CC3638C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B1C4052247CDBLL);
  _Unwind_Resume(a1);
}

void sub_23CC363B0(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1030C40D93D9250);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::SchedulingConstraintHelper>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SchedulingConstraintHelper *)a1[1];
  *a1 = &unk_26F0C05A0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SchedulingConstraintHelper>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SchedulingConstraintHelper *)a1[1];
  *a1 = &unk_26F0C05A0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(operations_research::sat::SchedulingConstraintHelper *this)
{
  uint64_t v2 = (void *)*((void *)this + 53);
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 48);
  if (v3)
  {
    *((void *)this + 49) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 45);
  if (v4)
  {
    *((void *)this + 46) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 40);
  if (v5)
  {
    *((void *)this + 41) = v5;
    operator delete(v5);
  }
  int64_t v6 = (void *)*((void *)this + 37);
  if (v6)
  {
    *((void *)this + 38) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((void *)this + 34);
  if (v7)
  {
    *((void *)this + 35) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 31);
  if (v8)
  {
    *((void *)this + 32) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((void *)this + 28);
  if (v9)
  {
    *((void *)this + 29) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 25);
  if (v10)
  {
    *((void *)this + 26) = v10;
    operator delete(v10);
  }
  int64_t v11 = (void *)*((void *)this + 22);
  if (v11)
  {
    *((void *)this + 23) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 19);
  if (v12)
  {
    *((void *)this + 20) = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)*((void *)this + 16);
  if (v13)
  {
    *((void *)this + 17) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 13);
  if (v14)
  {
    *((void *)this + 14) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((void *)this + 10);
  if (v15)
  {
    *((void *)this + 11) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((void *)this + 7);
  if (v16)
  {
    *((void *)this + 8) = v16;
    operator delete(v16);
  }
  unint64_t v17 = (void *)*((void *)this + 4);
  if (v17)
  {
    *((void *)this + 5) = v17;
    operator delete(v17);
  }
}

void *operations_research::sat::Model::Delete<operations_research::sat::NonOverlappingRectanglesEnergyPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C05D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::NonOverlappingRectanglesEnergyPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C05D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C0610;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C0610;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F0C0658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat17ImpliesInIntervalENS0_7LiteralEN3gtl7IntTypeINS0_20IntegerVariable_tag"
                     "_EiEExxEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat17ImpliesInIntervalENS0_7LiteralEN3gtl7IntTypeINS0_20IntegerV"
                                "ariable_tag_EiEExxEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat17ImpliesInIntervalENS0_7LiteralEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExxEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat17ImpliesInIntervalENS0_7LiteralEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExxEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    unint64_t LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v5, *(_DWORD *)(a1 + 20), *(void *)a1);
    uint64_t v23 = (uint64_t (**)(void **))&unk_26F0BF9F8;
    unint64_t v24 = v6 | (LiteralAssociatedToEquality << 32);
    int v25 = (void **)&v23;
    uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
    operations_research::sat::SatSolver::AddBinaryClause(v8, v24 ^ 1, SHIDWORD(v24));
    uint64_t result = (uint64_t)v25;
    if (v25 == (void **)&v23) {
      return v23[4]((void **)&v23);
    }
  }
  else
  {
    int v10 = *(_DWORD *)(a1 + 16);
    LODWORD(v18) = *(_DWORD *)(a1 + 20);
    *(void *)((char *)&v18 + 4) = *(void *)a1;
    int64_t v11 = operator new(0x30uLL);
    v11[1] = v18;
    *int64_t v11 = &unk_26F0C06C8;
    *((_DWORD *)v11 + 4) = HIDWORD(v4);
    v11[4] = 0;
    v11[5] = 0;
    v11[3] = 0;
    uint64_t v12 = operator new(4uLL);
    v11[3] = v12;
    *v12++ = v10;
    v11[4] = v12;
    v11[5] = v12;
    v22 = v11;
    operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)v11 + 2, a2);
    if (v11 == v21)
    {
      (*(void (**)(void *))(v21[0] + 32))(v21);
    }
    else if (v22)
    {
      (*(void (**)(void))(*v22 + 40))();
    }
    int v13 = *(_DWORD *)(a1 + 16);
    int64_t v14 = *(void *)(a1 + 8);
    if (v14 >= (uint64_t)0x8000000000000002) {
      uint64_t v15 = -v14;
    }
    else {
      uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    LODWORD(v19) = *(_DWORD *)(a1 + 20) ^ 1;
    HIDWORD(v19) = v15;
    v16 = operator new(0x30uLL);
    v16[1] = v19;
    void *v16 = &unk_26F0C06C8;
    *((_DWORD *)v16 + 4) = HIDWORD(v15);
    v16[4] = 0;
    v16[5] = 0;
    v16[3] = 0;
    unint64_t v17 = operator new(4uLL);
    v16[3] = v17;
    *v17++ = v13;
    v16[4] = v17;
    v16[5] = v17;
    v20[3] = v16;
    operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)v16 + 2, a2);
    uint64_t result = (uint64_t)v16;
    if (v16 == v20) {
      return (*(uint64_t (**)(void *))(v20[0] + 32))(v20);
    }
  }
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_23CC36BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC36BEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CC36C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC36C18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CC36C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>>(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = operator new(0x30uLL);
  uint64_t v5 = *a2;
  void *v4 = &unk_26F0C06C8;
  v4[1] = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 2);
  v4[3] = 0;
  *((_DWORD *)v4 + 4) = v5;
  v4[4] = 0;
  v4[5] = 0;
  v7 = (unsigned char *)a2[2];
  uint64_t v6 = (unsigned char *)a2[3];
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    v9 = (char *)operator new(v6 - v7);
    v4[3] = v9;
    v4[4] = v9;
    int v10 = &v9[4 * (v8 >> 2)];
    v4[5] = v10;
    memcpy(v9, v7, v8);
    v4[4] = v10;
  }
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_23CC36D04(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C06C8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C06C8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_26F0C06C8;
  v2[1] = v3;
  LODWORD(v3) = *(_DWORD *)(a1 + 16);
  v2[3] = 0;
  *((_DWORD *)v2 + 4) = v3;
  v2[4] = 0;
  v2[5] = 0;
  uint64_t v5 = *(unsigned char **)(a1 + 24);
  uint64_t v4 = *(unsigned char **)(a1 + 32);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    v7 = (char *)operator new(v4 - v5);
    v2[3] = v7;
    v2[4] = v7;
    int64_t v8 = &v7[4 * (v6 >> 2)];
    v2[5] = v8;
    memcpy(v7, v5, v6);
    v2[4] = v8;
  }
  return v2;
}

void sub_23CC36E98(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(void *result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C06C8;
  uint64_t v2 = result[1];
  int v3 = *((_DWORD *)result + 4);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v5 = (unsigned char *)result[3];
  uint64_t v4 = (unsigned char *)result[4];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v8 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 24) = v8;
    *(void *)(a2 + 32) = v8;
    v9 = &v8[4 * (v6 >> 2)];
    *(void *)(a2 + 40) = v9;
    uint64_t result = memcpy(v8, v5, v6);
    *(void *)(a2 + 32) = v9;
  }
  return result;
}

void sub_23CC36F60(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat11ImplicationERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEENS0_14"
                     "IntegerLiteralEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat11ImplicationERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3"
                                "_EEEENS0_14IntegerLiteralEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat11ImplicationERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEENS0_14IntegerLiteralEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat11ImplicationERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEENS0_14IntegerLiteralEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}::operator()(int *a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  uint64_t v5 = *(void *)(a1 + 1);
  uint64_t v6 = *(void *)(v4 + 40);
  if (v5 <= *(void *)(v6 + 12 * *a1)) {
    return;
  }
  uint64_t v52 = a2;
  if (v5 > -*(void *)(v6 + 12 * (*a1 ^ 1)))
  {
    int64_t v8 = (_DWORD *)*((void *)a1 + 2);
    v7 = (_DWORD *)*((void *)a1 + 3);
    if (v8 != v7)
    {
      v9 = 0;
      int v10 = 0;
      int64_t v11 = 0;
      v53 = (_DWORD *)*((void *)a1 + 3);
      while (1)
      {
        while (1)
        {
          int v12 = *v8 ^ 1;
          if (v9 >= v10) {
            break;
          }
          *v9++ = v12;
          if (++v8 == v7) {
            goto LABEL_69;
          }
        }
        uint64_t v13 = v9 - v11;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v10 - (char *)v11) >> 1 > v14) {
          unint64_t v14 = ((char *)v10 - (char *)v11) >> 1;
        }
        if ((unint64_t)((char *)v10 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          if (v15 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v16 = operator new(4 * v15);
          unint64_t v17 = (int *)&v16[4 * v13];
          *unint64_t v17 = v12;
          uint64_t v18 = (uint64_t)(v17 + 1);
          if (v9 == v11) {
            goto LABEL_21;
          }
        }
        else
        {
          v16 = 0;
          unint64_t v17 = (int *)(4 * v13);
          *(_DWORD *)(4 * v13) = v12;
          uint64_t v18 = 4 * v13 + 4;
          if (v9 == v11) {
            goto LABEL_21;
          }
        }
        unint64_t v19 = (char *)(v9 - 1) - (char *)v11;
        if (v19 >= 0xBC)
        {
          if (&v16[(char *)v9 - (char *)v11 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[(char *)v9 - (char *)v11 - 4])
          {
            v20 = v9;
          }
          else if ((int *)((char *)v9 - (v19 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v9 - 1)
          {
            v20 = v9;
          }
          else if ((unint64_t)((char *)v11 - v16) >= 0x20)
          {
            uint64_t v22 = (v19 >> 2) + 1;
            uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
            v20 = &v9[v23 / 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v17 = (int *)((char *)v17 - v23);
            unint64_t v24 = &v16[4 * v13 - 16];
            int v25 = v9 - 4;
            uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v27 = *(_OWORD *)v25;
              *(v24 - 1) = *((_OWORD *)v25 - 1);
              *unint64_t v24 = v27;
              v24 -= 2;
              v25 -= 8;
              v26 -= 8;
            }
            while (v26);
            if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_21;
            }
          }
          else
          {
            v20 = v9;
          }
        }
        else
        {
          v20 = v9;
        }
        do
        {
          int v21 = *--v20;
          *--unint64_t v17 = v21;
        }
        while (v20 != v11);
LABEL_21:
        int v10 = (int *)&v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
        int64_t v11 = v17;
        v9 = (int *)v18;
        v7 = v53;
        if (++v8 == v53) {
          goto LABEL_69;
        }
      }
    }
    v9 = 0;
    int64_t v11 = 0;
LABEL_69:
    v58 = (void (**)(void **))&unk_26F0BD480;
    v59[0] = v11;
    v59[1] = (int *)(v9 - v11);
    v60 = (void **)&v58;
    operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v59, v52);
    v51 = v60;
    if (v60 == (void **)&v58)
    {
      v58[4]((void **)&v58);
      if (!v11) {
        return;
      }
      goto LABEL_77;
    }
LABEL_74:
    if (v51) {
      (*((void (**)(void **))*v51 + 5))(v51);
    }
    if (v11) {
      goto LABEL_77;
    }
    return;
  }
  v28 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v28, *(const char **)a1, a1[2]);
  v30 = (int *)operator new(4uLL);
  int64_t v11 = v30;
  int *v30 = AssociatedLiteral;
  v31 = v30 + 1;
  v33 = (_DWORD *)*((void *)a1 + 2);
  unint64_t v32 = (_DWORD *)*((void *)a1 + 3);
  if (v33 != v32)
  {
    uint64_t v34 = v30 + 1;
    v54 = (_DWORD *)*((void *)a1 + 3);
    while (1)
    {
      while (1)
      {
        int v36 = *v33 ^ 1;
        if (v31 >= v34) {
          break;
        }
        *v31++ = v36;
        uint64_t v35 = (uint64_t)v31;
        if (++v33 == v32) {
          goto LABEL_73;
        }
      }
      uint64_t v37 = v31 - v11;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v34 - (char *)v11) >> 1 > v38) {
        unint64_t v38 = ((char *)v34 - (char *)v11) >> 1;
      }
      if ((unint64_t)((char *)v34 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v38;
      }
      if (v39)
      {
        if (v39 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v40 = operator new(4 * v39);
        v41 = (int *)&v40[4 * v37];
        int *v41 = v36;
        uint64_t v35 = (uint64_t)(v41 + 1);
        if (v31 == v11) {
          goto LABEL_53;
        }
      }
      else
      {
        v40 = 0;
        v41 = (int *)(4 * v37);
        *(_DWORD *)(4 * v37) = v36;
        uint64_t v35 = 4 * v37 + 4;
        if (v31 == v11) {
          goto LABEL_53;
        }
      }
      unint64_t v42 = (char *)(v31 - 1) - (char *)v11;
      if (v42 >= 0xBC)
      {
        if (&v40[(char *)v31 - (char *)v11 - 4 - (v42 & 0xFFFFFFFFFFFFFFFCLL)] > &v40[(char *)v31 - (char *)v11 - 4])
        {
          v43 = v31;
        }
        else if ((int *)((char *)v31 - (v42 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v31 - 1)
        {
          v43 = v31;
        }
        else if ((unint64_t)((char *)v11 - v40) >= 0x20)
        {
          uint64_t v45 = (v42 >> 2) + 1;
          uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
          v43 = &v31[v46 / 0xFFFFFFFFFFFFFFFCLL];
          v41 = (int *)((char *)v41 - v46);
          v47 = &v40[4 * v37 - 16];
          v48 = v31 - 4;
          uint64_t v49 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            _OWORD *v47 = v50;
            v47 -= 2;
            v48 -= 8;
            v49 -= 8;
          }
          while (v49);
          if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_53;
          }
        }
        else
        {
          v43 = v31;
        }
      }
      else
      {
        v43 = v31;
      }
      do
      {
        int v44 = *--v43;
        *--v41 = v44;
      }
      while (v43 != v11);
LABEL_53:
      uint64_t v34 = (int *)&v40[4 * v39];
      if (v11) {
        operator delete(v11);
      }
      int64_t v11 = v41;
      unint64_t v32 = v54;
      ++v33;
      v31 = (int *)v35;
      if (v33 == v54) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v35 = (uint64_t)(v30 + 1);
LABEL_73:
  v55 = (void (**)(void **))&unk_26F0BD480;
  v56[0] = v11;
  v56[1] = (int *)((v35 - (uint64_t)v11) >> 2);
  v57 = (void **)&v55;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v56, v52);
  v51 = v57;
  if (v57 != (void **)&v55) {
    goto LABEL_74;
  }
  v55[4]((void **)&v55);
  if (v11) {
LABEL_77:
  }
    operator delete(v11);
}

void sub_23CC37634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(operations_research::sat::Model *)>::~function(va);
  if (v6) {
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void sub_23CC3769C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11) {
    JUMPOUT(0x23CC37694);
  }
  JUMPOUT(0x23CC37688);
}

void std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F0C0758;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0758;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 24);
  operations_research::sat::PrecedencesPropagator::AddArc(v3, v4, v5, v6, -1, &v7, 1);
}

uint64_t std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat33ConditionalLowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_"
                     "tag_EiEES4_xNS0_7LiteralEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat33ConditionalLowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20Integ"
                                "erVariable_tag_EiEES4_xNS0_7LiteralEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat33ConditionalLowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xNS0_7LiteralEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat33ConditionalLowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xNS0_7LiteralEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void *std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C07D8;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C07D8;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_26F0C07D8;
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CC37994(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C07D8;
  return operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[5];
  if (v2)
  {
    __p[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat17PartialIsOneOfVarEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__"
                     "16vectorIS4_NS5_9allocatorIS4_EEEERKNS6_INS0_7LiteralENS7_ISC_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat17PartialIsOneOfVarEN3gtl7IntTypeINS0_20IntegerVariable_tag_E"
                                "iEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEERKNS6_INS0_7LiteralENS7_ISC_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat17PartialIsOneOfVarEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEERKNS6_INS0_7LiteralENS7_ISC_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat17PartialIsOneOfVarEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEERKNS6_INS0_7LiteralENS7_ISC_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::Model(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    int64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  int v9 = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int64_t v11 = *(unsigned char **)(a2 + 32);
  int v10 = *(unsigned char **)(a2 + 40);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v9;
  unsigned char *v10;
  unsigned char *v11;
  int64_t v12;
  char *v13;
  char *v14;

  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    int64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  int v9 = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int64_t v11 = *(unsigned char **)(a2 + 32);
  int v10 = *(unsigned char **)(a2 + 40);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  return a1;
}

void sub_23CC37BE4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC37CF4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int8x16_t **)a1;
  uint64_t v2 = *(int8x16_t **)(a1 + 8);
  int v21 = 0;
  uint64_t v22 = 0;
  v20 = 0;
  uint64_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
  {
    int64_t v8 = 0;
    int v5 = 0;
  }
  else
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v5 = (char *)operator new(2 * v4);
    uint64_t v6 = v4 >> 2;
    v20 = v5;
    int v21 = v5;
    size_t v7 = 8 * (v4 >> 2);
    int64_t v8 = &v5[v7];
    uint64_t v22 = &v5[v7];
    bzero(v5, v7);
    if ((unint64_t)v4 > 8)
    {
      int v9 = *(_DWORD *)(a1 + 24);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      int64_t v12 = operator new(0x40uLL);
      *(void *)int64_t v12 = &unk_26F0C0848;
      v12[2] = v9;
      *((void *)v12 + 2) = v3;
      *((void *)v12 + 3) = v6;
      *((void *)v12 + 4) = v5;
      *((void *)v12 + 5) = v6;
      *((void *)v12 + 6) = v10;
      *((void *)v12 + 7) = (v11 - v10) >> 2;
      unint64_t v24 = v12;
      operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()();
    }
  }
  if (*(void *)(a1 + 8) - *(void *)a1 >= 9uLL)
  {
    int v13 = *(_DWORD *)(a1 + 24);
    operations_research::sat::NegationOf((int8x16_t **)a1, (int8x16_t **)__p);
    unint64_t v14 = __p[0];
    unint64_t v15 = __p[1];
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v23 = 0;
    uint64_t v18 = operator new(0x40uLL);
    *(void *)uint64_t v18 = &unk_26F0C0848;
    v18[2] = v13 ^ 1;
    *((void *)v18 + 2) = v14;
    *((void *)v18 + 3) = (v15 - v14) >> 2;
    *((void *)v18 + 4) = v5;
    *((void *)v18 + 5) = (v8 - v5) >> 3;
    *((void *)v18 + 6) = v17;
    *((void *)v18 + 7) = (v16 - v17) >> 2;
    uint64_t v23 = v18;
    operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()();
  }
  if (v5) {
    operator delete(v5);
  }
}

void sub_23CC38000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::function<void ()(operations_research::sat::Model *)>::~function(&a20);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26F0C0848;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0848;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()()
{
}

uint64_t std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4"
                     "absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable"
                                "_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_I"
                                "KNS0_7LiteralEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()()
{
}

void sub_23CC382B4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C40846E0A44);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::GreaterThanAtLeastOneOfPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C08B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::GreaterThanAtLeastOneOfPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C08B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0910;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0910;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_26F0C0910;
  v2[2] = 0;
  v2[3] = 0;
  long long v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    size_t v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_23CC38544(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(void *result, uint64_t a2)
{
  unint64_t v3 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = &unk_26F0C0910;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = (unsigned char *)result[1];
  long long v4 = (unsigned char *)result[2];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    int64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a2 + 24) = v8;
    __n128 result = memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
  return result;
}

void sub_23CC38610(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14ReifiedBoolAndERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_"
                     "EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14ReifiedBoolAndERKNSt3__16vectorINS0_7LiteralENS1_9allocator"
                                "IS3_EEEES3_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14ReifiedBoolAndERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14ReifiedBoolAndERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(unsigned int **a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v60 = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v52 = 0;
  v53 = 0;
  int64_t v5 = *a1;
  long long v4 = a1[1];
  if (*a1 == v4)
  {
    unint64_t v32 = 0;
    int64_t v6 = 0;
    v30 = 0;
    int64_t v33 = 0;
    uint64_t v34 = 0;
    unint64_t v35 = 1;
    goto LABEL_34;
  }
  do
  {
    while (1)
    {
      uint64_t v7 = *v5;
      unint64_t v8 = *((unsigned int *)v3 + 6) | (unint64_t)(v7 << 32);
      v57 = (void (**)(void **))&unk_26F0BF9F8;
      unint64_t v58 = v8;
      v59 = (void **)&v57;
      uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
      operations_research::sat::SatSolver::AddBinaryClause(v9, v58 ^ 1, SHIDWORD(v58));
      if (v59 != (void **)&v57) {
        break;
      }
      v57[4]((void **)&v57);
      int v10 = v7 ^ 1;
      int64_t v12 = v52;
      uint64_t v11 = v53;
      if (v52 >= v53) {
        goto LABEL_10;
      }
LABEL_3:
      *(_DWORD *)int64_t v12 = v10;
      int64_t v6 = v12 + 4;
      uint64_t v52 = v12 + 4;
      if (++v5 == v4) {
        goto LABEL_31;
      }
    }
    if (v59) {
      (*((void (**)(void))*v59 + 5))();
    }
    int v10 = v7 ^ 1;
    int64_t v12 = v52;
    uint64_t v11 = v53;
    if (v52 < v53) {
      goto LABEL_3;
    }
LABEL_10:
    int v13 = __p;
    uint64_t v14 = (v12 - (char *)__p) >> 2;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = a2;
    uint64_t v17 = v11 - (char *)__p;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    if (!v18)
    {
      unint64_t v19 = 0;
      v20 = (int *)(4 * v14);
      *(_DWORD *)(4 * v14) = v10;
      int64_t v6 = (char *)(4 * v14 + 4);
      if (v12 == (char *)__p) {
        goto LABEL_28;
      }
LABEL_19:
      unint64_t v21 = v12 - 4 - (char *)__p;
      if (v21 < 0x2C) {
        goto LABEL_69;
      }
      if ((unint64_t)((char *)__p - v19) < 0x20) {
        goto LABEL_69;
      }
      uint64_t v22 = (v21 >> 2) + 1;
      uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v24 = &v12[-v23];
      v20 = (int *)((char *)v20 - v23);
      uint64_t v25 = &v19[4 * v14 - 16];
      uint64_t v26 = v12 - 16;
      uint64_t v27 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *uint64_t v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 8;
      }
      while (v27);
      int64_t v12 = v24;
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_69:
        do
        {
          int v29 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *--v20 = v29;
        }
        while (v12 != (char *)__p);
      }
      goto LABEL_28;
    }
    if (v18 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v19 = operator new(4 * v18);
    v20 = (int *)&v19[4 * v14];
    int *v20 = v10;
    int64_t v6 = (char *)(v20 + 1);
    if (v12 != (char *)__p) {
      goto LABEL_19;
    }
LABEL_28:
    __p = v20;
    v53 = &v19[4 * v18];
    if (v13) {
      operator delete(v13);
    }
    a2 = v16;
    unint64_t v3 = a1;
    uint64_t v52 = v6;
    ++v5;
  }
  while (v5 != v4);
LABEL_31:
  v30 = v53;
  if (v6 < v53)
  {
    *(_DWORD *)int64_t v6 = *((_DWORD *)v3 + 6);
    v31 = v6 + 4;
    goto LABEL_56;
  }
  unint64_t v32 = __p;
  int64_t v33 = v6 - (char *)__p;
  uint64_t v34 = (v6 - (char *)__p) >> 2;
  unint64_t v35 = v34 + 1;
  if ((unint64_t)(v34 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
LABEL_34:
  uint64_t v36 = v30 - (char *)v32;
  if (v36 >> 1 > v35) {
    unint64_t v35 = v36 >> 1;
  }
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v37 = v35;
  }
  if (v37)
  {
    if (v37 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v38 = operator new(4 * v37);
  }
  else
  {
    unint64_t v38 = 0;
  }
  unint64_t v39 = (int *)&v38[4 * v34];
  *unint64_t v39 = *((_DWORD *)v3 + 6);
  v31 = v39 + 1;
  if (v6 != (char *)v32)
  {
    unint64_t v40 = v6 - (char *)v32 - 4;
    if (v40 < 0x2C)
    {
      v41 = v6;
      goto LABEL_53;
    }
    if ((unint64_t)(v6 - v38 - v33) < 0x20)
    {
      v41 = v6;
      goto LABEL_53;
    }
    uint64_t v42 = (v40 >> 2) + 1;
    uint64_t v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
    v41 = &v6[-v43];
    unint64_t v39 = (int *)((char *)v39 - v43);
    int v44 = &v38[4 * v34 - 16];
    uint64_t v45 = v6 - 16;
    uint64_t v46 = v42 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v47 = *(_OWORD *)v45;
      *(v44 - 1) = *((_OWORD *)v45 - 1);
      *int v44 = v47;
      v44 -= 2;
      v45 -= 32;
      v46 -= 8;
    }
    while (v46);
    if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_53:
        int v48 = *((_DWORD *)v41 - 1);
        v41 -= 4;
        *--unint64_t v39 = v48;
      }
      while (v41 != (char *)v32);
    }
  }
  __p = v39;
  if (v32) {
    operator delete(v32);
  }
LABEL_56:
  v54 = (void (**)(void **))&unk_26F0BD480;
  v55[0] = __p;
  v55[1] = (int *)(v31 - __p);
  v56 = (void **)&v54;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v55, a2);
  if (v56 == (void **)&v54)
  {
    v54[4]((void **)&v54);
    uint64_t v49 = __p;
    if (__p) {
      goto LABEL_60;
    }
  }
  else
  {
    if (v56) {
      (*((void (**)(void))*v56 + 5))();
    }
    uint64_t v49 = __p;
    if (__p) {
LABEL_60:
    }
      operator delete(v49);
  }
}

void sub_23CC38BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0990;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0990;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_26F0C0990;
  v2[2] = 0;
  v2[3] = 0;
  long long v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_23CC38DB8(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(void *result, uint64_t a2)
{
  unint64_t v3 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = &unk_26F0C0990;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = (unsigned char *)result[1];
  long long v4 = (unsigned char *)result[2];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    unint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a2 + 24) = v8;
    __n128 result = memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
  return result;
}

void sub_23CC38E84(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat13ReifiedBoolOrERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_E"
                     "UlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat13ReifiedBoolOrERKNSt3__16vectorINS0_7LiteralENS1_9allocatorI"
                                "S3_EEEES3_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat13ReifiedBoolOrERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat13ReifiedBoolOrERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(unsigned int **a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v60 = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v52 = 0;
  v53 = 0;
  long long v4 = *a1;
  int64_t v5 = a1[1];
  if (*a1 == v5)
  {
    v31 = 0;
    int64_t v6 = 0;
    long long v28 = 0;
    int v29 = *((_DWORD *)a1 + 6) ^ 1;
    int64_t v32 = 0;
    uint64_t v33 = 0;
    unint64_t v34 = 1;
    goto LABEL_34;
  }
  do
  {
    while (1)
    {
      uint64_t v7 = *v4;
      unint64_t v8 = v7 | ((unint64_t)*((unsigned int *)a1 + 6) << 32);
      v57 = (void (**)(void **))&unk_26F0BF9F8;
      unint64_t v58 = v8;
      v59 = (void **)&v57;
      uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v2);
      operations_research::sat::SatSolver::AddBinaryClause(v9, v58 ^ 1, SHIDWORD(v58));
      if (v59 != (void **)&v57) {
        break;
      }
      v57[4]((void **)&v57);
      uint64_t v11 = v52;
      int v10 = v53;
      if (v52 >= v53) {
        goto LABEL_10;
      }
LABEL_3:
      *uint64_t v11 = v7;
      int64_t v6 = v11 + 1;
      uint64_t v52 = v11 + 1;
      if (++v4 == v5) {
        goto LABEL_31;
      }
    }
    if (v59) {
      (*((void (**)(void))*v59 + 5))();
    }
    uint64_t v11 = v52;
    int v10 = v53;
    if (v52 < v53) {
      goto LABEL_3;
    }
LABEL_10:
    int64_t v12 = __p;
    uint64_t v13 = v11 - __p;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)v10 - (char *)__p;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (!v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = (int *)(4 * v13);
      *(_DWORD *)(4 * v13) = v7;
      int64_t v6 = (int *)(4 * v13 + 4);
      if (v11 == __p) {
        goto LABEL_28;
      }
LABEL_19:
      unint64_t v19 = (char *)(v11 - 1) - (char *)__p;
      if (v19 < 0x2C) {
        goto LABEL_69;
      }
      if ((unint64_t)((char *)__p - v17) < 0x20) {
        goto LABEL_69;
      }
      uint64_t v20 = (v19 >> 2) + 1;
      uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v22 = &v11[v21 / 0xFFFFFFFFFFFFFFFCLL];
      unint64_t v18 = (int *)((char *)v18 - v21);
      uint64_t v23 = &v17[4 * v13 - 16];
      unint64_t v24 = v11 - 4;
      uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *uint64_t v23 = v26;
        v23 -= 2;
        v24 -= 8;
        v25 -= 8;
      }
      while (v25);
      uint64_t v11 = v22;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_69:
        do
        {
          int v27 = *--v11;
          *--unint64_t v18 = v27;
        }
        while (v11 != __p);
      }
      goto LABEL_28;
    }
    if (v16 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v17 = operator new(4 * v16);
    unint64_t v18 = (int *)&v17[4 * v13];
    *unint64_t v18 = v7;
    int64_t v6 = v18 + 1;
    if (v11 != __p) {
      goto LABEL_19;
    }
LABEL_28:
    __p = v18;
    v53 = (int *)&v17[4 * v16];
    if (v12) {
      operator delete(v12);
    }
    uint64_t v2 = a2;
    uint64_t v52 = v6;
    ++v4;
  }
  while (v4 != v5);
LABEL_31:
  long long v28 = v53;
  int v29 = *((_DWORD *)a1 + 6) ^ 1;
  if (v6 < v53)
  {
    *int64_t v6 = v29;
    uint64_t v30 = (uint64_t)(v6 + 1);
    goto LABEL_56;
  }
  v31 = __p;
  int64_t v32 = (char *)v6 - (char *)__p;
  uint64_t v33 = v6 - __p;
  unint64_t v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
LABEL_34:
  uint64_t v35 = (char *)v28 - (char *)v31;
  if (v35 >> 1 > v34) {
    unint64_t v34 = v35 >> 1;
  }
  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v36 = v34;
  }
  if (v36)
  {
    if (v36 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v37 = operator new(4 * v36);
    unint64_t v38 = (int *)&v37[4 * v33];
    *unint64_t v38 = v29;
    uint64_t v30 = (uint64_t)(v38 + 1);
    int64_t v39 = (char *)v6 - (char *)v31;
    if (v6 == v31) {
      goto LABEL_54;
    }
LABEL_46:
    unint64_t v40 = v39 - 4;
    if (v40 < 0x2C)
    {
      v41 = v6;
      goto LABEL_53;
    }
    if ((unint64_t)((char *)v6 - v37 - v32) < 0x20)
    {
      v41 = v6;
      goto LABEL_53;
    }
    uint64_t v42 = (v40 >> 2) + 1;
    uint64_t v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
    v41 = &v6[v43 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v38 = (int *)((char *)v38 - v43);
    int v44 = &v37[4 * v33 - 16];
    uint64_t v45 = v6 - 4;
    uint64_t v46 = v42 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v47 = *(_OWORD *)v45;
      *(v44 - 1) = *((_OWORD *)v45 - 1);
      *int v44 = v47;
      v44 -= 2;
      v45 -= 8;
      v46 -= 8;
    }
    while (v46);
    if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_53:
        int v48 = *--v41;
        *--unint64_t v38 = v48;
      }
      while (v41 != v31);
    }
  }
  else
  {
    unint64_t v37 = 0;
    unint64_t v38 = (int *)(4 * v33);
    *(_DWORD *)(4 * v33) = v29;
    uint64_t v30 = 4 * v33 + 4;
    int64_t v39 = (char *)v6 - (char *)v31;
    if (v6 != v31) {
      goto LABEL_46;
    }
  }
LABEL_54:
  __p = v38;
  if (v31) {
    operator delete(v31);
  }
LABEL_56:
  v54 = (void (**)(void **))&unk_26F0BD480;
  v55[0] = __p;
  v55[1] = (int *)((v30 - (uint64_t)__p) >> 2);
  v56 = (void **)&v54;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v55, v2);
  if (v56 == (void **)&v54)
  {
    v54[4]((void **)&v54);
    uint64_t v49 = __p;
    if (__p) {
      goto LABEL_60;
    }
  }
  else
  {
    if (v56) {
      (*((void (**)(void))*v56 + 5))();
    }
    uint64_t v49 = __p;
    if (__p) {
LABEL_60:
    }
      operator delete(v49);
  }
}

void sub_23CC39490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0C0A10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_26F0C0A10;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  operations_research::sat::SatSolver::AddBinaryClause(v4, *(_DWORD *)(a1 + 8) ^ 1, *(_DWORD *)(a1 + 12));
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v3);
  int v6 = *(_DWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 12) ^ 1;

  return operations_research::sat::SatSolver::AddBinaryClause(v5, v6, v7);
}

uint64_t std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat8EqualityENS0_7LiteralES1_EUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat8EqualityENS0_7LiteralES1_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat8EqualityENS0_7LiteralES1_EUlPNS0_5ModelEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat8EqualityENS0_7LiteralES1_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *operations_research::sat::Model::Delete<operations_research::sat::SatParameters>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SatParameters *)a1[1];
  *a1 = &unk_26F0C0A90;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatParameters::~SatParameters(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SatParameters>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SatParameters *)a1[1];
  *a1 = &unk_26F0C0A90;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatParameters::~SatParameters(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C0AC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0AC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExE"
                                "UlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(int *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  int64_t v5 = *((void *)a1 + 1);
  if (v5 >= (uint64_t)0x8000000000000002) {
    uint64_t v6 = -v5;
  }
  else {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(_DWORD *)uint64_t v13 = *a1 ^ 1;
  *(void *)&v13[4] = v6;
  if ((operations_research::sat::IntegerTrail::Enqueue(v4, *(uint64_t *)v13, SHIDWORD(v6), 0, 0, 0, 0) & 1) == 0)
  {
    *(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2) + 496) = 1;
    google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1424, 1);
    int v7 = (void *)google::LogMessage::stream((google::LogMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Model trivially infeasible, variable ", 37);
    unint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" has lower bound ", 17);
    int v9 = *a1;
    unint64_t v14 = (void (**)(void **))&unk_26F0BFD30;
    int v15 = v9;
    unint64_t v16 = (void **)&v14;
    int v10 = *(void **)(a2 + 32);
    do
    {
      if (v10[4] >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v10 + 1;
      }
      int v10 = (void *)*v11;
    }
    while (*v11);
    int64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" and LowerOrEqual() was called with an upper bound of ", 54);
    std::ostream::operator<<();
    if (v16 == (void **)&v14)
    {
      v14[4]((void **)&v14);
    }
    else if (v16)
    {
      (*((void (**)(void))*v16 + 5))();
    }
    google::LogMessage::~LogMessage((google::LogMessage *)v13);
  }
}

void sub_23CC39A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::function<long long ()(operations_research::sat::Model const&)>::~function((uint64_t *)va1);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CC39A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C0B48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0B48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEE"
                                "xEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(int *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  uint64_t v5 = *((void *)a1 + 1);
  *(_DWORD *)int64_t v12 = *a1;
  *(void *)&v12[4] = v5;
  if ((operations_research::sat::IntegerTrail::Enqueue(v4, *(uint64_t *)v12, SHIDWORD(v5), 0, 0, 0, 0) & 1) == 0)
  {
    *(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2) + 496) = 1;
    if (*operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator() const(operations_research::sat::Model *)::vlocal__ >= 1
      && (operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator() const(operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator() const(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.h", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1410);
      uint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Model trivially infeasible, variable ", 37);
      int v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" has upper bound ", 17);
      int v8 = *a1;
      uint64_t v13 = (void (**)(void **))&unk_26F0BFDF8;
      int v14 = v8;
      int v15 = (void **)&v13;
      int v9 = *(void **)(a2 + 32);
      do
      {
        if (v9[4] >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          int v10 = v9;
        }
        else {
          int v10 = v9 + 1;
        }
        int v9 = (void *)*v10;
      }
      while (*v10);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" and GreaterOrEqual() was called with a lower bound of ", 55);
      std::ostream::operator<<();
      if (v15 == (void **)&v13)
      {
        v13[4]((void **)&v13);
      }
      else if (v15)
      {
        (*((void (**)(void))*v15 + 5))();
      }
      google::LogMessage::~LogMessage((google::LogMessage *)v12);
    }
  }
}

void sub_23CC39DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::function<long long ()(operations_research::sat::Model const&)>::~function((uint64_t *)va1);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CC39DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C0BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  uint64_t v6 = *(void *)(a1 + 16);

  operations_research::sat::PrecedencesPropagator::AddArc(v3, v4, v5, v6, -1, 0, 0);
}

uint64_t std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat22LowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_"
                     "xEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat22LowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_"
                                "tag_EiEES4_xEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat22LowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat22LowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F0C0C48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0C48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12) ^ 1;
  uint64_t v6 = -*(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 24);

  operations_research::sat::PrecedencesPropagator::AddArc(v3, v4, v5, v6, v7, 0, 0);
}

uint64_t std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16Sum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat16Sum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_Ei"
                                "EES4_S4_xEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16Sum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16Sum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0CC8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0CC8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_26F0C0CC8;
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v2 + 1, v1);
  return v2;
}

void sub_23CC3A1D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C0CC8;
  return operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(a2 + 1, a1 + 8);
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23WeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8fun"
                     "ctionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23WeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEE"
                                "EEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4"
                                "_ISF_EEEERKT_xEUlS9_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23WeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23WeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    int v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  int v10 = *(unsigned char **)(a2 + 24);
  int v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(void *)(a2 + 48);
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  unsigned char *v9;
  unsigned char *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    int v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  int v10 = *(unsigned char **)(a2 + 24);
  int v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(void *)(a2 + 48);
  return a1;
}

void sub_23CC3A424(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC3A534(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v138 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[1] - *a1;
  if ((int)((unint64_t)v5 >> 2) < 101) {
    operator new();
  }
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  LODWORD(v2) = llround(sqrt((double)(int)((unint64_t)v5 >> 2)));
  if ((int)v2 <= 0)
  {
    v122 = 0;
    operator new();
  }
  v116 = (void *)(a2 + 32);
  uint64_t v112 = v2;
  v122 = (char *)v121;
  int64_t v6 = (char *)v118;
  v119 = (char *)v118;
  uint64_t v113 = (int)(v5 >> 2);
  if (v113 > 0)
  {
    int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *a1;
    while (1)
    {
      int64_t v11 = v122;
      uint64_t v115 = v8;
      if (v122 < v123)
      {
        *(_DWORD *)v122 = *(_DWORD *)(v10 + 4 * v9);
        v122 = v11 + 4;
        uint64_t v12 = *(void *)(v4[3] + 8 * v9);
        uint64_t v13 = v120;
        if (v6 < v120) {
          goto LABEL_7;
        }
        goto LABEL_28;
      }
      int v15 = (char *)v121;
      int64_t v16 = v122 - (unsigned char *)v121;
      uint64_t v17 = (v122 - (unsigned char *)v121) >> 2;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v123 - (unsigned char *)v121;
      if ((v123 - (unsigned char *)v121) >> 1 > v18) {
        unint64_t v18 = v19 >> 1;
      }
      unint64_t v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v18;
      if (!v20) {
        break;
      }
      if (v20 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v21 = (char *)operator new(4 * v20);
      uint64_t v22 = &v21[4 * v17];
      *(_DWORD *)uint64_t v22 = *(_DWORD *)(v10 + 4 * v9);
      uint64_t v23 = (uint64_t)(v22 + 4);
      if (v11 != v15) {
        goto LABEL_19;
      }
LABEL_25:
      v121 = v22;
      v122 = (char *)v23;
      v123 = &v21[4 * v20];
      if (v15)
      {
        operator delete(v15);
        int64_t v6 = v119;
      }
      uint64_t v4 = a1;
      uint64_t v8 = v115;
      v122 = (char *)v23;
      uint64_t v12 = *(void *)(a1[3] + 8 * v9);
      uint64_t v13 = v120;
      if (v6 < v120)
      {
LABEL_7:
        *(void *)int64_t v6 = v12;
        v6 += 8;
        uint64_t v14 = v112;
        goto LABEL_43;
      }
LABEL_28:
      uint64_t v33 = (char *)v118;
      int64_t v34 = v6 - (unsigned char *)v118;
      uint64_t v35 = (v6 - (unsigned char *)v118) >> 3;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v37 = v13 - (unsigned char *)v118;
      if (v37 >> 2 > v36) {
        unint64_t v36 = v37 >> 2;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        if (v38 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int64_t v39 = operator new(8 * v38);
        unint64_t v40 = &v39[8 * v35];
        void *v40 = v12;
        uint64_t v41 = (uint64_t)(v40 + 1);
        if (v6 == v33)
        {
LABEL_68:
          uint64_t v14 = v112;
          v118 = v40;
          v119 = (char *)v41;
          v120 = &v39[8 * v38];
          if (!v33) {
            goto LABEL_42;
          }
LABEL_41:
          operator delete(v33);
          goto LABEL_42;
        }
      }
      else
      {
        int64_t v39 = 0;
        unint64_t v40 = (void *)(8 * v35);
        *(void *)(8 * v35) = v12;
        uint64_t v41 = 8 * v35 + 8;
        if (v6 == v33) {
          goto LABEL_68;
        }
      }
      unint64_t v42 = v6 - 8 - v33;
      uint64_t v14 = v112;
      if (v42 < 0x168)
      {
        uint64_t v43 = v6;
        goto LABEL_39;
      }
      if (&v39[v34 - 8 - (v42 & 0xFFFFFFFFFFFFFFF8)] > &v39[v34 - 8])
      {
        uint64_t v43 = v6;
        do
        {
LABEL_39:
          uint64_t v44 = *((void *)v43 - 1);
          v43 -= 8;
          *--unint64_t v40 = v44;
        }
        while (v43 != v33);
        goto LABEL_40;
      }
      if (&v6[-(v42 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        uint64_t v43 = v6;
        goto LABEL_39;
      }
      if ((unint64_t)(v6 - v39 - v34) < 0x20)
      {
        uint64_t v43 = v6;
        goto LABEL_39;
      }
      uint64_t v63 = (v42 >> 3) + 1;
      uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v43 = &v6[-v64];
      unint64_t v40 = (void *)((char *)v40 - v64);
      v65 = &v39[8 * v35 - 16];
      v66 = v6 - 16;
      uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v68 = *(_OWORD *)v66;
        *(v65 - 1) = *((_OWORD *)v66 - 1);
        _OWORD *v65 = v68;
        v65 -= 2;
        v66 -= 32;
        v67 -= 4;
      }
      while (v67);
      if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_39;
      }
LABEL_40:
      v118 = v40;
      v119 = (char *)v41;
      v120 = &v39[8 * v38];
      if (v33) {
        goto LABEL_41;
      }
LABEL_42:
      int64_t v6 = (char *)v41;
      uint64_t v4 = a1;
      uint64_t v8 = v115;
LABEL_43:
      v119 = v6;
      uint64_t v10 = *v4;
      int v45 = *(_DWORD *)(*v4 + 4 * v9);
      v135 = &unk_26F0BFD30;
      int v136 = v45;
      v137 = &v135;
      uint64_t v46 = v116;
      long long v47 = (void *)*v116;
      int v48 = (void *)*v116;
      do
      {
        unint64_t v49 = v48[4];
        BOOL v50 = v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          v51 = v48;
        }
        else {
          v51 = v48 + 1;
        }
        if (v50) {
          uint64_t v46 = v48;
        }
        int v48 = (void *)*v51;
      }
      while (*v51);
      uint64_t v52 = *(void *)(*(void *)(v46[5] + 40) + 12 * v45);
      uint64_t v53 = *(void *)(v4[3] + 8 * v9);
      int v54 = *(_DWORD *)(v10 + 4 * v9);
      v132 = &unk_26F0BFDF8;
      int v133 = v54;
      v134 = &v132;
      v55 = v116;
      do
      {
        unint64_t v56 = v47[4];
        BOOL v57 = v56 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v56 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          unint64_t v58 = v47;
        }
        else {
          unint64_t v58 = v47 + 1;
        }
        if (v57) {
          v55 = v47;
        }
        long long v47 = (void *)*v58;
      }
      while (*v58);
      uint64_t v59 = v53 * v52;
      uint64_t v60 = v53 * *(void *)(*(void *)(v55[5] + 40) + 12 * (v54 ^ 1));
      if (-v60 < v59) {
        uint64_t v61 = -v60;
      }
      else {
        uint64_t v61 = v59;
      }
      v7 += v61;
      if (v59 <= -v60) {
        uint64_t v62 = -v60;
      }
      else {
        uint64_t v62 = v59;
      }
      v8 += v62;
      if (++v9 * v14 >= v113)
      {
        uint64_t v3 = a2;
        goto LABEL_81;
      }
    }
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(4 * v17);
    *(_DWORD *)(4 * v17) = *(_DWORD *)(v10 + 4 * v9);
    uint64_t v23 = 4 * v17 + 4;
    if (v11 == v15) {
      goto LABEL_25;
    }
LABEL_19:
    unint64_t v24 = v11 - 4 - v15;
    if (v24 < 0x2C) {
      goto LABEL_143;
    }
    if ((unint64_t)(v11 - &v21[v16]) < 0x20) {
      goto LABEL_143;
    }
    uint64_t v25 = (v24 >> 2) + 1;
    uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
    int v27 = &v11[-v26];
    v22 -= v26;
    long long v28 = &v21[4 * v17 - 16];
    int v29 = v11 - 16;
    uint64_t v30 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
      *(_OWORD *)long long v28 = v31;
      v28 -= 32;
      v29 -= 32;
      v30 -= 8;
    }
    while (v30);
    int64_t v11 = v27;
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_143:
      do
      {
        int v32 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v22 - 1) = v32;
        v22 -= 4;
      }
      while (v11 != v15);
    }
    goto LABEL_25;
  }
  uint64_t v8 = 0;
  int v7 = 0;
LABEL_81:
  v128 = (void (**)(void **))&unk_26F0C0D38;
  uint64_t v129 = (uint64_t)v7;
  uint64_t v130 = v8;
  v131 = (void **)&v128;
  v117 = v7;
  uint64_t v127 = v8;
  if ((uint64_t)v7 > v8) {
    google::MakeCheckOpString<long long,long long>((int)&v117, (int)&v127, "lb <= ub");
  }
  uint64_t v69 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v3);
  int v70 = operations_research::sat::IntegerTrail::AddIntegerVariable(v69, v129, v130);
  if (v131 == (void **)&v128)
  {
    v128[4]((void **)&v128);
  }
  else if (v131)
  {
    (*((void (**)(void **))*v131 + 5))(v131);
  }
  v74 = operator new(4uLL);
  _DWORD *v74 = v70;
  v124 = v74;
  v126 = v74 + 1;
  v125 = v74 + 1;
  v75 = v122;
  if (v122 < v123)
  {
    *(_DWORD *)v122 = v70;
    v122 = v75 + 4;
    v72 = v119;
    v71 = v120;
    if (v119 >= v120) {
      goto LABEL_110;
    }
    goto LABEL_87;
  }
  v76 = (char *)v121;
  int64_t v77 = v122 - (unsigned char *)v121;
  uint64_t v78 = (v122 - (unsigned char *)v121) >> 2;
  unint64_t v79 = v78 + 1;
  if ((unint64_t)(v78 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v80 = v123 - (unsigned char *)v121;
  if ((v123 - (unsigned char *)v121) >> 1 > v79) {
    unint64_t v79 = v80 >> 1;
  }
  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v81 = v79;
  }
  if (v81)
  {
    if (v81 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v82 = (char *)operator new(4 * v81);
    v83 = &v82[4 * v78];
    *(_DWORD *)v83 = v70;
    uint64_t v84 = (uint64_t)(v83 + 4);
    if (v75 == v76)
    {
LABEL_107:
      v121 = v83;
      v122 = (char *)v84;
      v123 = &v82[4 * v81];
      if (v76) {
        operator delete(v76);
      }
      v122 = (char *)v84;
      v72 = v119;
      v71 = v120;
      if (v119 >= v120)
      {
LABEL_110:
        v94 = (char *)v118;
        int64_t v95 = v72 - (unsigned char *)v118;
        uint64_t v96 = (v72 - (unsigned char *)v118) >> 3;
        unint64_t v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v98 = v71 - (unsigned char *)v118;
        if (v98 >> 2 > v97) {
          unint64_t v97 = v98 >> 2;
        }
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v99 = v97;
        }
        if (v99)
        {
          if (v99 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v100 = operator new(8 * v99);
          v101 = &v100[8 * v96];
          void *v101 = -1;
          uint64_t v73 = (uint64_t)(v101 + 1);
          if (v72 == v94) {
            goto LABEL_127;
          }
        }
        else
        {
          v100 = 0;
          v101 = (void *)(8 * v96);
          *(void *)(8 * v96) = -1;
          uint64_t v73 = 8 * v96 + 8;
          if (v72 == v94)
          {
LABEL_127:
            v118 = v101;
            v119 = (char *)v73;
            v120 = &v100[8 * v99];
            if (v94) {
              operator delete(v94);
            }
LABEL_129:
            v119 = (char *)v73;
            operator new();
          }
        }
        unint64_t v102 = v72 - 8 - v94;
        if (v102 < 0x58) {
          goto LABEL_144;
        }
        if ((unint64_t)(v72 - &v100[v95]) < 0x20) {
          goto LABEL_144;
        }
        uint64_t v103 = (v102 >> 3) + 1;
        uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
        v105 = &v72[-v104];
        v101 = (void *)((char *)v101 - v104);
        v106 = &v100[8 * v96 - 16];
        v107 = v72 - 16;
        uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v109 = *(_OWORD *)v107;
          *(v106 - 1) = *((_OWORD *)v107 - 1);
          _OWORD *v106 = v109;
          v106 -= 2;
          v107 -= 32;
          v108 -= 4;
        }
        while (v108);
        v72 = v105;
        if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_144:
          do
          {
            uint64_t v110 = *((void *)v72 - 1);
            v72 -= 8;
            *--v101 = v110;
          }
          while (v72 != v94);
        }
        goto LABEL_127;
      }
LABEL_87:
      *(void *)v72 = -1;
      uint64_t v73 = (uint64_t)(v72 + 8);
      goto LABEL_129;
    }
  }
  else
  {
    v82 = 0;
    v83 = (char *)(4 * v78);
    *(_DWORD *)(4 * v78) = v70;
    uint64_t v84 = 4 * v78 + 4;
    if (v75 == v76) {
      goto LABEL_107;
    }
  }
  unint64_t v85 = v75 - 4 - v76;
  if (v85 < 0x2C) {
    goto LABEL_145;
  }
  if ((unint64_t)(v75 - &v82[v77]) < 0x20) {
    goto LABEL_145;
  }
  uint64_t v86 = (v85 >> 2) + 1;
  uint64_t v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
  v88 = &v75[-v87];
  v83 -= v87;
  v89 = &v82[4 * v78 - 16];
  v90 = v75 - 16;
  uint64_t v91 = v86 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v92 = *(_OWORD *)v90;
    *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
    *(_OWORD *)v89 = v92;
    v89 -= 32;
    v90 -= 32;
    v91 -= 8;
  }
  while (v91);
  v75 = v88;
  if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_145:
    do
    {
      int v93 = *((_DWORD *)v75 - 1);
      v75 -= 4;
      *((_DWORD *)v83 - 1) = v93;
      v83 -= 4;
    }
    while (v75 != v76);
  }
  goto LABEL_107;
}

void sub_23CC3B700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC3B708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  std::function<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~function((void *)(v31 - 192));
  if (__p)
  {
    operator delete(__p);
    uint64_t v33 = a27;
    if (!a27)
    {
LABEL_3:
      int64_t v34 = a30;
      if (!a30) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v33 = a27;
    if (!a27) {
      goto LABEL_3;
    }
  }
  operator delete(v33);
  int64_t v34 = a30;
  if (!a30) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v34);
  _Unwind_Resume(a1);
}

void *std::function<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C0D38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0D38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke[abi:ne180100]<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1} &,operations_research::sat::Model *>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18NewIntegerVariableExxEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat18NewIntegerVariableExxEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18NewIntegerVariableExxEUlPNS0_5ModelEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18NewIntegerVariableExxEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t std::__invoke[abi:ne180100]<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1} &,operations_research::sat::Model *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a1[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v4;
  if (v7 > v4) {
    google::MakeCheckOpString<long long,long long>((int)&v7, (int)&v8, "lb <= ub");
  }
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v3);
  return operations_research::sat::IntegerTrail::AddIntegerVariable(v5, *a1, a1[1]);
}

void sub_23CC3BA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *operations_research::sat::Model::Delete<operations_research::sat::IntegerSumLE>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C0DC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntegerSumLE>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C0DC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::~function(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>>(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v4 = &unk_26F0C0E10;
  long long v5 = *a2;
  *((void *)v4 + 3) = 0;
  *(_OWORD *)(v4 + 8) = v5;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 2);
  int64_t v6 = (unsigned char *)*((void *)a2 + 3);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *((void *)v4 + 3) = v9;
    *((void *)v4 + 4) = v9;
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    *((void *)v4 + 5) = v10;
    memcpy(v9, v7, v8);
    *((void *)v4 + 4) = v10;
  }
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_23CC3BC8C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0E10;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0E10;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

char *std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F0C0E10;
  long long v3 = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 3) = 0;
  *(_OWORD *)(v2 + 8) = v3;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  long long v5 = *(unsigned char **)(a1 + 24);
  uint64_t v4 = *(unsigned char **)(a1 + 32);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *((void *)v2 + 3) = v7;
    *((void *)v2 + 4) = v7;
    int64_t v8 = &v7[4 * (v6 >> 2)];
    *((void *)v2 + 5) = v8;
    memcpy(v7, v5, v6);
    *((void *)v2 + 4) = v8;
  }
  return v2;
}

void sub_23CC3BE1C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(char *result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0E10;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v4 = (unsigned char *)*((void *)result + 3);
  long long v3 = (unsigned char *)*((void *)result + 4);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v3 - v4);
    *(void *)(a2 + 24) = v7;
    *(void *)(a2 + 32) = v7;
    int64_t v8 = &v7[4 * (v5 >> 2)];
    *(void *)(a2 + 40) = v8;
    __n128 result = (char *)memcpy(v7, v4, v5);
    *(void *)(a2 + 32) = v8;
  }
  return result;
}

void sub_23CC3BEDC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  long long v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12) ^ 1;
  int64_t v6 = *(int **)(a1 + 24);
  uint64_t v7 = -*(void *)(a1 + 16);
  uint64_t v8 = (uint64_t)(*(void *)(a1 + 32) - (void)v6) >> 2;

  operations_research::sat::PrecedencesPropagator::AddArc(v3, v4, v5, v7, -1, v6, v8);
}

uint64_t std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27ConditionalSum2LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_Ei"
                     "EES4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27ConditionalSum2LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVari"
                                "able_tag_EiEES4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27ConditionalSum2LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27ConditionalSum2LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  int v4 = (char *)operator new(0x38uLL);
  *(void *)int v4 = &unk_26F0C0E90;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 16);
  *((void *)v4 + 4) = 0;
  *((_DWORD *)v4 + 6) = v5;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = 0;
  uint64_t v7 = *(unsigned char **)(a2 + 24);
  int64_t v6 = *(unsigned char **)(a2 + 32);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *((void *)v4 + 4) = v9;
    *((void *)v4 + 5) = v9;
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    *((void *)v4 + 6) = v10;
    memcpy(v9, v7, v8);
    *((void *)v4 + 5) = v10;
  }
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_23CC3C0F0(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0E90;
  long long v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0E90;
  long long v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

char *std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x38uLL);
  *(void *)long long v2 = &unk_26F0C0E90;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 24);
  *((void *)v2 + 4) = 0;
  *((_DWORD *)v2 + 6) = v3;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  int v5 = *(unsigned char **)(a1 + 32);
  int v4 = *(unsigned char **)(a1 + 40);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *((void *)v2 + 4) = v7;
    *((void *)v2 + 5) = v7;
    int64_t v8 = &v7[4 * (v6 >> 2)];
    *((void *)v2 + 6) = v8;
    memcpy(v7, v5, v6);
    *((void *)v2 + 5) = v8;
  }
  return v2;
}

void sub_23CC3C288(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(char *result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0E90;
  long long v2 = *(_OWORD *)(result + 8);
  int v3 = *((_DWORD *)result + 6);
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  int v5 = (unsigned char *)*((void *)result + 4);
  int v4 = (unsigned char *)*((void *)result + 5);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v8 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 32) = v8;
    *(void *)(a2 + 40) = v8;
    uint64_t v9 = &v8[4 * (v6 >> 2)];
    *(void *)(a2 + 48) = v9;
    __n128 result = (char *)memcpy(v8, v5, v6);
    *(void *)(a2 + 40) = v9;
  }
  return result;
}

void sub_23CC3C350(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  long long v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12) ^ 1;
  uint64_t v6 = -*(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 24);
  int64_t v8 = *(int **)(a1 + 32);
  uint64_t v9 = (uint64_t)(*(void *)(a1 + 40) - (void)v8) >> 2;

  operations_research::sat::PrecedencesPropagator::AddArc(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27ConditionalSum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_Ei"
                     "EES4_S4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27ConditionalSum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVari"
                                "able_tag_EiEES4_S4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27ConditionalSum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27ConditionalSum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0F10;
  long long v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0F10;
  long long v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x58uLL);
  *long long v2 = &unk_26F0C0F10;
  operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v2 + 1, v1);
  return v2;
}

void sub_23CC3C5F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C0F10;
  return operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(a2 + 1, a1 + 8);
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(void *a1)
{
  long long v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  long long v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3)
  {
    __p[5] = v3;
    operator delete(v3);
  }
  int v4 = (void *)__p[1];
  if (v4)
  {
    __p[2] = v4;
    operator delete(v4);
  }

  operator delete(__p);
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat34ConditionalWeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEE"
                     "EEENS2_8functionIFvPNS0_5ModelEEEERKNS3_INS0_7LiteralENS4_ISC_EEEERKNS3_IN3gtl7IntTypeINS0_20Intege"
                     "rVariable_tag_EiEENS4_ISK_EEEERKT_xEUlS9_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat34ConditionalWeightedSumLowerOrEqualINSt3__16vectorIxNS2_9all"
                                "ocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_INS0_7LiteralENS4_ISC_EEEERKNS3_IN3gt"
                                "l7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISK_EEEERKT_xEUlS9_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat34ConditionalWeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_INS0_7LiteralENS4_ISC_EEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISK_EEEERKT_xEUlS9_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat34ConditionalWeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_INS0_7LiteralENS4_ISC_EEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISK_EEEERKT_xEUlS9_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    int64_t v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  uint64_t v14 = *(void *)(a2 + 48);
  a1[7] = 0;
  a1[6] = v14;
  a1[8] = 0;
  a1[9] = 0;
  int64_t v16 = *(unsigned char **)(a2 + 56);
  int v15 = *(unsigned char **)(a2 + 64);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v18 = (char *)operator new(v15 - v16);
    a1[7] = v18;
    a1[8] = v18;
    uint64_t v19 = &v18[4 * (v17 >> 2)];
    a1[9] = v19;
    memcpy(v18, v16, v17);
    a1[8] = v19;
  }
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  unsigned char *v9;
  unsigned char *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned char *v15;
  unsigned char *v16;
  int64_t v17;
  char *v18;
  char *v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    int64_t v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  uint64_t v14 = *(void *)(a2 + 48);
  a1[7] = 0;
  a1[6] = v14;
  a1[8] = 0;
  a1[9] = 0;
  int64_t v16 = *(unsigned char **)(a2 + 56);
  int v15 = *(unsigned char **)(a2 + 64);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v18 = (char *)operator new(v15 - v16);
    a1[7] = v18;
    a1[8] = v18;
    uint64_t v19 = &v18[4 * (v17 >> 2)];
    a1[9] = v19;
    memcpy(v18, v16, v17);
    a1[8] = v19;
  }
  return a1;
}

void sub_23CC3C8B0(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
    int64_t v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      int v7 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 32) = v6;
  operator delete(v6);
  int v7 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  *(void *)(v1 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_23CC3C910()
{
  if (!*v0) {
    JUMPOUT(0x23CC3C8D4);
  }
  JUMPOUT(0x23CC3C8CCLL);
}

void sub_23CC3CA4C(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
    int64_t v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      int v7 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 32) = v6;
  operator delete(v6);
  int v7 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  *(void *)(v1 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_23CC3CAAC()
{
  if (!*v0) {
    JUMPOUT(0x23CC3CA70);
  }
  JUMPOUT(0x23CC3CA68);
}

void *operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  __n128 result = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = v6 - *a1;
  if (v6 != *a1)
  {
    int64_t v8 = result;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v7 >> 2;
    if ((unint64_t)(v7 >> 2) <= 1) {
      uint64_t v11 = 1;
    }
    do
    {
      while (1)
      {
        uint64_t v12 = *(void *)(a1[3] + 8 * v9);
        int v13 = *(_DWORD *)(v5 + 4 * v9);
        if ((v12 & 0x8000000000000000) == 0) {
          break;
        }
        v10 += -*(void *)(result[5] + 12 * (v13 ^ 1)) * v12;
        if (v11 == ++v9) {
          goto LABEL_8;
        }
      }
      v10 += *(void *)(result[5] + 12 * v13) * v12;
      ++v9;
    }
    while (v11 != v9);
LABEL_8:
    if (v10 == a1[6])
    {
      unint64_t v14 = 0;
      while (1)
      {
        uint64_t v15 = *(void *)(a1[3] + 8 * v14);
        if (v15 < 1)
        {
          if (v15 < 0)
          {
            int v31 = *(_DWORD *)(v5 + 4 * v14);
            uint64_t v32 = -*(void *)(v8[5] + 12 * (v31 ^ 1));
            *(_DWORD *)__p = v31;
            *(void *)&__p[4] = v32;
            uint64_t v46 = 0;
            long long v47 = 0;
            int v45 = 0;
            int64_t v34 = (unsigned char *)a1[7];
            uint64_t v33 = (unsigned char *)a1[8];
            int64_t v35 = v33 - v34;
            if (v33 == v34)
            {
              uint64_t v37 = 0;
              unint64_t v36 = 0;
            }
            else
            {
              if (v35 < 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v36 = (char *)operator new(v33 - v34);
              uint64_t v37 = &v36[4 * (v35 >> 2)];
              int v45 = v36;
              long long v47 = v37;
              memcpy(v36, v34, v35);
              uint64_t v46 = v37;
            }
            unint64_t v49 = 0;
            unint64_t v38 = operator new(0x30uLL);
            int64_t v39 = (void (**)(void *, unsigned char *))&unk_26F0C06C8;
            uint64_t v40 = *(void *)__p;
            *unint64_t v38 = &unk_26F0C06C8;
            v38[1] = v40;
            *((_DWORD *)v38 + 4) = *(_DWORD *)&__p[8];
            v38[3] = 0;
            v38[4] = 0;
            v38[5] = 0;
            int64_t v41 = v37 - v36;
            if (v41)
            {
              if (v41 < 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v42 = (char *)operator new(v41);
              v38[3] = v42;
              uint64_t v43 = &v42[4 * (v41 >> 2)];
              v38[5] = v43;
              memcpy(v42, v36, v41);
              v38[4] = v43;
            }
            unint64_t v49 = (void **)v38;
            if (v36)
            {
              operator delete(v36);
              unint64_t v38 = v49;
              *(void *)__p = a2;
              if (!v49) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              int64_t v39 = (void (**)(void *, unsigned char *))*v49;
            }
            else
            {
              *(void *)__p = a2;
            }
            v39[6](v38, __p);
            __n128 result = v49;
            if (v49 != v48)
            {
LABEL_28:
              if (result) {
                __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
              }
              goto LABEL_11;
            }
            __n128 result = (void *)(*(uint64_t (**)(void *))(v48[0] + 32))(v48);
          }
        }
        else
        {
          int v16 = *(_DWORD *)(v5 + 4 * v14);
          int64_t v17 = *(void *)(v8[5] + 12 * v16);
          int v18 = v16 ^ 1;
          if (v17 >= (uint64_t)0x8000000000000002) {
            uint64_t v19 = -v17;
          }
          else {
            uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          *(_DWORD *)__p = v18;
          *(void *)&__p[4] = v19;
          uint64_t v46 = 0;
          long long v47 = 0;
          int v45 = 0;
          uint64_t v21 = (unsigned char *)a1[7];
          unint64_t v20 = (unsigned char *)a1[8];
          int64_t v22 = v20 - v21;
          if (v20 == v21)
          {
            unint64_t v24 = 0;
            uint64_t v23 = 0;
          }
          else
          {
            if (v22 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v23 = (char *)operator new(v20 - v21);
            unint64_t v24 = &v23[4 * (v22 >> 2)];
            int v45 = v23;
            long long v47 = v24;
            memcpy(v23, v21, v22);
            uint64_t v46 = v24;
          }
          v51 = 0;
          uint64_t v25 = operator new(0x30uLL);
          uint64_t v26 = (void (**)(void *, unsigned char *))&unk_26F0C06C8;
          uint64_t v27 = *(void *)__p;
          *uint64_t v25 = &unk_26F0C06C8;
          v25[1] = v27;
          *((_DWORD *)v25 + 4) = *(_DWORD *)&__p[8];
          v25[3] = 0;
          v25[4] = 0;
          v25[5] = 0;
          int64_t v28 = v24 - v23;
          if (v28)
          {
            if (v28 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            int v29 = (char *)operator new(v28);
            v25[3] = v29;
            uint64_t v30 = &v29[4 * (v28 >> 2)];
            v25[5] = v30;
            memcpy(v29, v23, v28);
            v25[4] = v30;
          }
          v51 = (void **)v25;
          if (v23)
          {
            operator delete(v23);
            uint64_t v25 = v51;
            *(void *)__p = a2;
            if (!v51) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            uint64_t v26 = (void (**)(void *, unsigned char *))*v51;
          }
          else
          {
            *(void *)__p = a2;
          }
          v26[6](v25, __p);
          __n128 result = v51;
          if (v51 != v50) {
            goto LABEL_28;
          }
          __n128 result = (void *)(*(uint64_t (**)(void *))(v50[0] + 32))(v50);
        }
LABEL_11:
        ++v14;
        uint64_t v5 = *a1;
        if (v14 >= (a1[1] - *a1) >> 2) {
          return result;
        }
      }
    }
LABEL_46:
    operator new();
  }
  if (a1[6]) {
    goto LABEL_46;
  }
  return result;
}

void sub_23CC3D12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x23ECF2BC0](v10, 0x10A1C40F49E05ADLL);
  _Unwind_Resume(a1);
}

void sub_23CC3D164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC3D178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  int64_t v22 = *v18;
  if (*v18)
  {
    void v20[4] = v22;
    operator delete(v22);
  }
  operator delete(v20);
  if (v19)
  {
    operator delete(v19);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::iterator>(uint64_t a1, void *a2, int *a3, void *a4, int a5, size_t __sz)
{
  int64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(char **)a1;
  if (__sz <= (v11 - *(void *)a1) >> 2)
  {
    unint64_t v20 = (void *)(a1 + 8);
    __n128 result = *(char **)(a1 + 8);
    uint64_t v21 = (result - v12) >> 2;
    if (v21 >= __sz)
    {
      if (a2 == a4)
      {
        int64_t v28 = v12;
      }
      else
      {
        int64_t v28 = v12;
        do
        {
          int v29 = *v8++;
          *(_DWORD *)int64_t v28 = v29;
          int v30 = *((char *)v9 + 1);
          uint64_t v9 = (void *)((char *)v9 + 1);
          if (v30 <= -2)
          {
            do
            {
              unint64_t v31 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              uint64_t v9 = (void *)((char *)v9 + v31);
              v8 += v31;
            }
            while (*(char *)v9 < -1);
          }
          v28 += 4;
        }
        while (v9 != a4);
      }
      int64_t v27 = v28 - v12;
      __n128 result = v12;
    }
    else
    {
      if (result - v12 < 1)
      {
        uint64_t v23 = a2;
        int64_t v22 = a3;
      }
      else
      {
        int64_t v22 = a3;
        uint64_t v23 = a2;
        do
        {
          int v25 = *((char *)v23 + 1);
          uint64_t v23 = (void *)((char *)v23 + 1);
          ++v22;
          if (v25 <= -2)
          {
            do
            {
              unint64_t v26 = (__clz(__rbit64(((*v23 >> 7) & ~*v23 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              uint64_t v23 = (void *)((char *)v23 + v26);
              v22 += v26;
            }
            while (*(char *)v23 < -1);
          }
        }
        while (v21-- > 1);
        if (v23 == a2)
        {
          uint64_t v23 = a2;
        }
        else
        {
          do
          {
            int v32 = *v8++;
            *(_DWORD *)uint64_t v12 = v32;
            int v33 = *((char *)v9 + 1);
            uint64_t v9 = (void *)((char *)v9 + 1);
            if (v33 <= -2)
            {
              do
              {
                unint64_t v34 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                uint64_t v9 = (void *)((char *)v9 + v34);
                v8 += v34;
              }
              while (*(char *)v9 < -1);
            }
            v12 += 4;
          }
          while (v9 != v23);
        }
      }
      int64_t v35 = result;
      while (v23 != a4)
      {
        int v36 = *v22++;
        *(_DWORD *)int64_t v35 = v36;
        int v37 = *((char *)v23 + 1);
        uint64_t v23 = (void *)((char *)v23 + 1);
        if (v37 <= -2)
        {
          do
          {
            unint64_t v38 = (__clz(__rbit64(((*v23 >> 7) & ~*v23 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v23 = (void *)((char *)v23 + v38);
            v22 += v38;
          }
          while (*(char *)v23 < -1);
        }
        v35 += 4;
      }
      int64_t v27 = v35 - result;
    }
  }
  else
  {
    if (v12)
    {
      *(void *)(a1 + 8) = v12;
      operator delete(v12);
      uint64_t v11 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 62) {
      goto LABEL_47;
    }
    unint64_t v13 = v11 >> 1;
    if (v11 >> 1 <= __sz) {
      unint64_t v13 = __sz;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v13 >> 62) {
LABEL_47:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v14 = 4 * v13;
    __n128 result = (char *)operator new(4 * v13);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v14];
    int v16 = result;
    if (v9 != a4)
    {
      int v16 = result;
      do
      {
        int v17 = *v8++;
        *(_DWORD *)int v16 = v17;
        int v18 = *((char *)v9 + 1);
        uint64_t v9 = (void *)((char *)v9 + 1);
        if (v18 <= -2)
        {
          do
          {
            unint64_t v19 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v9 = (void *)((char *)v9 + v19);
            v8 += v19;
          }
          while (*(char *)v9 < -1);
        }
        v16 += 4;
      }
      while (v9 != a4);
    }
    int64_t v27 = v16 - result;
    unint64_t v20 = (void *)(a1 + 8);
  }
  void *v20 = &result[v27];
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2)))
     + *a2;
  unint64_t v5 = ((v4 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v4);
  unint64_t v6 = (v5 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v7 = a1[3];
  while (1)
  {
    unint64_t v8 = v6 & v7;
    uint64_t v9 = *(void *)(*a1 + (v6 & v7));
    unint64_t v10 = ((v9 ^ (0x101010101010101 * (v5 & 0x7F))) - 0x101010101010101) & ~(v9 ^ (0x101010101010101 * (v5 & 0x7F))) & 0x8080808080808080;
    if (v10) {
      break;
    }
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert(a1, v5);
    }
    v2 += 8;
    unint64_t v6 = v2 + v8;
  }
  while (1)
  {
    unint64_t v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v7;
    if (*(void *)(a1[1] + 8 * v11) == v3) {
      return v11;
    }
    v10 &= v10 - 1;
    if (!v10) {
      goto LABEL_5;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    unint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v18 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(void *)&v5[8 * (void)v13])
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(void *)&v5[8 * (void)v13])))
          + *(void *)&v5[8 * (void)v13];
      unint64_t v19 = ((v18 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v18);
      unint64_t v20 = *a1;
      uint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(void *)&a1[1][8 * v16] = *(void *)&v5[8 * (void)v13];
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  unint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v31 = *(void *)(result + 32);
    if (!v31) {
      return result;
    }
LABEL_26:
    *(void *)(v31 + 32) = v15 >> 3;
    *(void *)(v31 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      uint64_t v20 = *(void *)(*(void *)(result + 8) + 8 * v14);
      unint64_t v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v20)))
          + v20;
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      unint64_t v23 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v24 = *(uint64_t *)((unsigned char *)v19->i64 + v23) & (~*(uint64_t *)((char *)v19->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v24 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v24)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v23) ^ (v14 - v23)) & v13) > 7)
      {
        int v25 = v19->u8[v18];
        v19->i8[v18] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
        uint64_t v26 = *(void *)(result + 8);
        if (v25 == 128)
        {
          *(void *)(v26 + 8 * v18) = *(void *)(v26 + 8 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v27 = *(void *)(v26 + 8 * v14);
          *(void *)(v26 + 8 * v14) = *(void *)(v26 + 8 * v18);
          *(void *)(*(void *)(result + 8) + 8 * v18) = v27;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v28 = v14 - (v14 >> 3);
  BOOL v29 = v14 == 7;
  uint64_t v30 = 6;
  if (!v29) {
    uint64_t v30 = v28;
  }
  *(void *)(result + 40) = v30 - *(void *)(result + 16);
  uint64_t v31 = *(void *)(result + 32);
  if (v31) {
    goto LABEL_26;
  }
  return result;
}

void operations_research::sat::Model::MyNew<operations_research::sat::ImpliedBounds>()
{
}

void sub_23CC3DD4C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1070C406E7AE6DBLL);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::ImpliedBounds>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::ImpliedBounds *)a1[1];
  *a1 = &unk_26F0C0F90;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::ImpliedBounds::~ImpliedBounds(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::ImpliedBounds>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::ImpliedBounds *)a1[1];
  *a1 = &unk_26F0C0F90;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::ImpliedBounds::~ImpliedBounds(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::try_emplace_impl<int const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  uint64_t v9 = *a1;
  unint64_t v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v11 = a1[3];
  while (1)
  {
    unint64_t v12 = v10 & v11;
    uint64_t v13 = *(void *)(v9 + (v10 & v11));
    unint64_t v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::prepare_insert(a1, v8);
      uint64_t v18 = a1[1] + 56 * result;
      *(_DWORD *)uint64_t v18 = *a2;
      *(void *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(void *)(v18 + 48) = 0;
      uint64_t v9 = *a1;
      uint64_t v15 = a1[1];
      char v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    unint64_t v10 = v6 + v12;
  }
  uint64_t v15 = a1[1];
  while (1)
  {
    unint64_t result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 56 * result) == v7) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_6;
    }
  }
  char v17 = 0;
LABEL_10:
  *(void *)a3 = v9 + result;
  *(void *)(a3 + 8) = v15 + 56 * result;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  int v32 = v4;
  if (!v4)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v31 = a1[4];
    if (!v31) {
      return;
    }
LABEL_21:
    *((void *)v31 + 4) = v14 >> 3;
    *((void *)v31 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v5] & 0x80000000) == 0)
    {
      uint64_t v16 = &v32[56 * (void)v13];
      unint64_t v17 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v16)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v16));
      uint64_t v18 = *a1;
      unint64_t v19 = a1[3];
      unint64_t v20 = ((v17 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v19;
      uint64_t v21 = 0;
      for (unint64_t i = *(void *)&(*a1)[v20] & (~*(void *)&(*a1)[v20] << 7) & 0x8080808080808080;
            !i;
            unint64_t i = *(void *)&v18[v20] & (~*(void *)&v18[v20] << 7) & 0x8080808080808080)
      {
        v21 += 8;
        unint64_t v20 = (v21 + v20) & (unint64_t)v19;
      }
      unint64_t v23 = (v20 + (__clz(__rbit64(i)) >> 3)) & (unint64_t)v19;
      char v24 = v17 & 0x7F;
      v18[v23] = v24;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v23 - 8) & (unint64_t)a1[3])] = v24;
      uint64_t v25 = (uint64_t)&a1[1][56 * v23];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v16;
      uint64_t v26 = *((void *)v16 + 1);
      *((void *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(void *)(v25 + 8) = v26;
      uint64_t v27 = *((void *)v16 + 2);
      *((void *)v16 + 2) = 0;
      uint64_t v28 = *((void *)v16 + 3);
      *((void *)v16 + 3) = 0;
      *(void *)(v25 + 16) = v27;
      *(void *)(v25 + 24) = v28;
      uint64_t v29 = *((void *)v16 + 4);
      uint64_t v30 = *((void *)v16 + 5);
      *((void *)v16 + 4) = 0;
      *(void *)(v25 + 32) = v29;
      *(void *)(v25 + 40) = v30;
      *((void *)v16 + 5) = 0;
      *(void *)(v25 + 48) = *((void *)v16 + 6);
      *((void *)v16 + 6) = 0;
      if (*((void *)v16 + 4))
      {
        operator delete(*((void **)v16 + 1));
        *((void *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *((void *)v16 + 6) = 0;
        *((void *)v16 + 3) = 0;
        *((void *)v16 + 4) = 0;
        *((void *)v16 + 2) = 0;
      }
      v14 += v21;
      uint64_t v15 = (void *)*((void *)v16 + 5);
      if (v15) {
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
      }
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v5);
  uint64_t v31 = a1[4];
  if (v31) {
    goto LABEL_21;
  }
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::drop_deletes_without_resize(uint64_t a1)
{
  v29[7] = *MEMORY[0x263EF8340];
  unint64_t v2 = *(int8x16_t **)a1;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)a1 + v3;
  if (v4 + 1 != *(void *)a1)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)a1;
    if (v5 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      int8x16_t *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *unint64_t v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  uint64_t v14 = *(void *)(a1 + 24);
  if (!v14)
  {
    unint64_t v16 = 0;
    *(void *)(a1 + 40) = -*(void *)(a1 + 16);
    uint64_t v28 = *(void *)(a1 + 32);
    if (!v28) {
      return;
    }
LABEL_26:
    *(void *)(v28 + 32) = v16 >> 3;
    *(void *)(v28 + 16) = 0;
    return;
  }
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  do
  {
    unint64_t v20 = *(int8x16_t **)a1;
    if (*(unsigned __int8 *)(*(void *)a1 + v15) == 254)
    {
      unint64_t v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(a1 + 8) + 56 * v15);
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      unint64_t v23 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      unint64_t v24 = *(uint64_t *)((unsigned char *)v20->i64 + v23) & (~*(uint64_t *)((char *)v20->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          unint64_t v18 = (v17 + v18) & v14;
          unint64_t v24 = *(uint64_t *)((unsigned char *)v20->i64 + v18) & (~*(uint64_t *)((char *)v20->i64 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        int v25 = v20->u8[v19];
        v20->i8[v19] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(a1 + 24) & (v19 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v22 & 0x7F;
        uint64_t v26 = *(void *)(a1 + 8);
        if (v25 == 128)
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(a1 + 40, v26 + 56 * v19, v26 + 56 * v15);
          *(unsigned char *)(*(void *)a1 + v15) = 0x80;
          *(unsigned char *)((*(void *)(a1 + 24) & (v15 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(a1 + 40, (uint64_t)v29, v26 + 56 * v15);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(a1 + 40, *(void *)(a1 + 8) + 56 * v15, *(void *)(a1 + 8) + 56 * v19);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(a1 + 40, *(void *)(a1 + 8) + 56 * v19, (uint64_t)v29);
          --v15;
        }
      }
      else
      {
        v20->i8[v15] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(a1 + 24) & (v15 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    uint64_t v14 = *(void *)(a1 + 24);
  }
  while (v15 != v14);
  uint64_t v27 = v15 - (v15 >> 3);
  if (v15 == 7) {
    uint64_t v27 = 6;
  }
  *(void *)(a1 + 40) = v27 - *(void *)(a1 + 16);
  uint64_t v28 = *(void *)(a1 + 32);
  if (v28) {
    goto LABEL_26;
  }
}

void absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(void *)(a2 + 8) = v4;
  unint64_t v6 = (void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7;
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v9;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  if (*(void *)(a3 + 32))
  {
    operator delete(*(void **)(a3 + 8));
    *(void *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a3 + 48) = 0;
    v6[1] = 0;
    v6[2] = 0;
    *unint64_t v6 = 0;
  }
  int8x16_t v10 = *(void **)(a3 + 40);
  if (v10) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                int v80 = *(_DWORD *)(v10 + 8);
                int v81 = *(int *)(a2 - 16) >> 1;
                BOOL v5 = v81 == v80 >> 1;
                BOOL v82 = v81 < v80 >> 1;
                if (v5) {
                  BOOL v82 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(v10 + 12);
                }
                if (v82)
                {
                  uint64_t v193 = *(void *)(v10 + 16);
                  long long v187 = *(_OWORD *)v10;
                  long long v83 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v83;
                  *(void *)(a2 - 8) = v193;
                  *(_OWORD *)(a2 - 24) = v187;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)v10, (long long *)(v10 + 24), (int *)(a2 - 24));
                break;
              case 4uLL:
                uint64_t v84 = (long long *)(v10 + 24);
                unint64_t v85 = (long long *)(v10 + 48);
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)v10, (long long *)(v10 + 24), (int *)(v10 + 48));
                int v86 = *(_DWORD *)(v10 + 56);
                int v87 = *(int *)(a2 - 16) >> 1;
                BOOL v5 = v87 == v86 >> 1;
                BOOL v88 = v87 < v86 >> 1;
                if (v5) {
                  BOOL v88 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(v10 + 60);
                }
                if (v88)
                {
                  long long v89 = *v85;
                  uint64_t v90 = *(void *)(v10 + 64);
                  uint64_t v91 = *(void *)(a2 - 8);
                  *unint64_t v85 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 64) = v91;
                  *(void *)(a2 - 8) = v90;
                  *(_OWORD *)(a2 - 24) = v89;
                  int v92 = *(_DWORD *)(v10 + 32);
                  LODWORD(v90) = *(int *)(v10 + 56) >> 1;
                  BOOL v5 = v90 == v92 >> 1;
                  BOOL v93 = (int)v90 < v92 >> 1;
                  if (v5) {
                    BOOL v93 = *(_DWORD *)(v10 + 60) < *(_DWORD *)(v10 + 36);
                  }
                  if (v93)
                  {
                    uint64_t v94 = *(void *)(v10 + 40);
                    long long v95 = *v84;
                    *uint64_t v84 = *v85;
                    *(void *)(v10 + 40) = *(void *)(v10 + 64);
                    *unint64_t v85 = v95;
                    *(void *)(v10 + 64) = v94;
                    int v96 = *(_DWORD *)(v10 + 8);
                    LODWORD(v94) = *(int *)(v10 + 32) >> 1;
                    BOOL v5 = v94 == v96 >> 1;
                    BOOL v97 = (int)v94 < v96 >> 1;
                    if (v5) {
                      BOOL v97 = *(_DWORD *)(v10 + 36) < *(_DWORD *)(v10 + 12);
                    }
                    if (v97)
                    {
                      uint64_t v194 = *(void *)(v10 + 16);
                      long long v188 = *(_OWORD *)v10;
                      *(_OWORD *)unint64_t v10 = *v84;
                      *(void *)(v10 + 16) = *(void *)(v10 + 40);
                      *uint64_t v84 = v188;
                      *(void *)(v10 + 40) = v194;
                    }
                  }
                }
                break;
              case 5uLL:
                std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,0>(v10, v10 + 24, v10 + 48, v10 + 72, a2 - 24);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            uint64_t v98 = (void *)(v10 + 24);
            BOOL v100 = v10 == a2 || v98 == (void *)a2;
            if (a4)
            {
              if (!v100)
              {
                uint64_t v101 = 0;
                unint64_t v102 = (void *)v10;
                do
                {
                  uint64_t v104 = v98;
                  int v105 = *((_DWORD *)v102 + 8);
                  int v106 = *((_DWORD *)v102 + 9);
                  int v107 = *((_DWORD *)v102 + 2);
                  int v108 = v105 >> 1;
                  BOOL v5 = v105 >> 1 == v107 >> 1;
                  BOOL v109 = v105 >> 1 < v107 >> 1;
                  if (v5) {
                    BOOL v109 = v106 < *((_DWORD *)v102 + 3);
                  }
                  if (v109)
                  {
                    uint64_t v110 = *v104;
                    uint64_t v111 = v102[5];
                    uint64_t v112 = v101;
                    do
                    {
                      uint64_t v113 = v10 + v112;
                      *(_OWORD *)(v113 + 24) = *(_OWORD *)(v10 + v112);
                      *(void *)(v113 + 40) = *(void *)(v10 + v112 + 16);
                      if (!v112)
                      {
                        uint64_t v103 = v10;
                        goto LABEL_109;
                      }
                      int v114 = *(_DWORD *)(v113 - 16);
                      BOOL v115 = v106 < *(_DWORD *)(v113 - 12);
                      BOOL v5 = v108 == v114 >> 1;
                      BOOL v116 = v108 < v114 >> 1;
                      if (!v5) {
                        BOOL v115 = v116;
                      }
                      v112 -= 24;
                    }
                    while (v115);
                    uint64_t v103 = v10 + v112 + 24;
LABEL_109:
                    *(void *)uint64_t v103 = v110;
                    *(_DWORD *)(v103 + 8) = v105;
                    *(_DWORD *)(v103 + 12) = v106;
                    *(void *)(v103 + 16) = v111;
                  }
                  uint64_t v98 = v104 + 3;
                  v101 += 24;
                  unint64_t v102 = v104;
                }
                while (v104 + 3 != (void *)a2);
              }
            }
            else if (!v100)
            {
              do
              {
                v171 = v98;
                int v172 = *(_DWORD *)(a1 + 32);
                int v173 = *(_DWORD *)(a1 + 36);
                int v174 = *(_DWORD *)(a1 + 8);
                int v175 = v172 >> 1;
                BOOL v5 = v172 >> 1 == v174 >> 1;
                BOOL v176 = v172 >> 1 < v174 >> 1;
                if (v5) {
                  BOOL v176 = v173 < *(_DWORD *)(a1 + 12);
                }
                if (v176)
                {
                  uint64_t v177 = *v171;
                  uint64_t v178 = *(void *)(a1 + 40);
                  v179 = v171;
                  do
                  {
                    *(_OWORD *)v179 = *(_OWORD *)(v179 - 3);
                    v179[2] = *(v179 - 1);
                    int v180 = *((_DWORD *)v179 - 10);
                    int v181 = *((_DWORD *)v179 - 9);
                    v179 -= 3;
                    BOOL v182 = v173 < v181;
                    BOOL v5 = v175 == v180 >> 1;
                    BOOL v183 = v175 < v180 >> 1;
                    if (v5) {
                      BOOL v183 = v182;
                    }
                  }
                  while (v183);
                  void *v179 = v177;
                  *((_DWORD *)v179 + 2) = v172;
                  *((_DWORD *)v179 + 3) = v173;
                  v179[2] = v178;
                }
                uint64_t v98 = v171 + 3;
                a1 = (unint64_t)v171;
              }
              while (v171 + 3 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v117 = (v12 - 2) >> 1;
              int64_t v118 = v117;
              do
              {
                int64_t v119 = v118;
                if (v117 >= v118)
                {
                  uint64_t v120 = (2 * v118) | 1;
                  unint64_t v121 = v10 + 24 * v120;
                  if (2 * v119 + 2 < (uint64_t)v12)
                  {
                    int v122 = *(_DWORD *)(v121 + 32);
                    int v123 = *(int *)(v121 + 8) >> 1;
                    BOOL v5 = v123 == v122 >> 1;
                    BOOL v124 = v123 < v122 >> 1;
                    if (v5) {
                      BOOL v124 = *(_DWORD *)(v121 + 12) < *(_DWORD *)(v121 + 36);
                    }
                    v121 += 24 * v124;
                    if (v124) {
                      uint64_t v120 = 2 * v119 + 2;
                    }
                  }
                  unint64_t v125 = v10 + 24 * v119;
                  int v126 = *(_DWORD *)(v125 + 8);
                  int v127 = *(_DWORD *)(v125 + 12);
                  int v128 = *(int *)(v121 + 8) >> 1;
                  int v129 = v126 >> 1;
                  BOOL v130 = *(_DWORD *)(v121 + 12) < v127;
                  BOOL v5 = v128 == v126 >> 1;
                  BOOL v131 = v128 < v126 >> 1;
                  if (!v5) {
                    BOOL v130 = v131;
                  }
                  if (!v130)
                  {
                    uint64_t v132 = *(void *)v125;
                    uint64_t v133 = *(void *)(v125 + 16);
                    do
                    {
                      unint64_t v137 = v125;
                      unint64_t v125 = v121;
                      long long v138 = *(_OWORD *)v121;
                      *(void *)(v137 + 16) = *(void *)(v121 + 16);
                      *(_OWORD *)unint64_t v137 = v138;
                      if (v117 < v120) {
                        break;
                      }
                      uint64_t v139 = (2 * v120) | 1;
                      unint64_t v121 = v10 + 24 * v139;
                      uint64_t v140 = 2 * v120 + 2;
                      if (v140 < (uint64_t)v12)
                      {
                        int v141 = *(_DWORD *)(v121 + 32);
                        int v142 = *(int *)(v121 + 8) >> 1;
                        BOOL v5 = v142 == v141 >> 1;
                        BOOL v143 = v142 < v141 >> 1;
                        if (v5) {
                          BOOL v143 = *(_DWORD *)(v121 + 12) < *(_DWORD *)(v121 + 36);
                        }
                        v121 += 24 * v143;
                        if (v143) {
                          uint64_t v139 = v140;
                        }
                      }
                      int v134 = *(int *)(v121 + 8) >> 1;
                      BOOL v135 = *(_DWORD *)(v121 + 12) < v127;
                      BOOL v5 = v134 == v129;
                      BOOL v136 = v134 < v129;
                      if (!v5) {
                        BOOL v135 = v136;
                      }
                      uint64_t v120 = v139;
                    }
                    while (!v135);
                    *(void *)unint64_t v125 = v132;
                    *(_DWORD *)(v125 + 8) = v126;
                    *(_DWORD *)(v125 + 12) = v127;
                    *(void *)(v125 + 16) = v133;
                  }
                }
                int64_t v118 = v119 - 1;
              }
              while (v119);
              int64_t v144 = v11 / 0x18uLL;
              do
              {
                uint64_t v146 = 0;
                uint64_t v195 = *(void *)(v10 + 16);
                long long v189 = *(_OWORD *)v10;
                unint64_t v147 = v10;
                do
                {
                  uint64_t v149 = v147 + 24 * v146 + 24;
                  uint64_t v150 = (2 * v146) | 1;
                  uint64_t v151 = 2 * v146 + 2;
                  if (v151 < v144)
                  {
                    int v152 = *(_DWORD *)(v149 + 32);
                    int v153 = *(int *)(v149 + 8) >> 1;
                    BOOL v5 = v153 == v152 >> 1;
                    BOOL v154 = v153 < v152 >> 1;
                    if (v5) {
                      BOOL v154 = *(_DWORD *)(v149 + 12) < *(_DWORD *)(v149 + 36);
                    }
                    v149 += 24 * v154;
                    if (v154) {
                      uint64_t v150 = v151;
                    }
                  }
                  long long v148 = *(_OWORD *)v149;
                  *(void *)(v147 + 16) = *(void *)(v149 + 16);
                  *(_OWORD *)unint64_t v147 = v148;
                  unint64_t v147 = v149;
                  uint64_t v146 = v150;
                }
                while (v150 <= (uint64_t)((unint64_t)(v144 - 2) >> 1));
                a2 -= 24;
                if (v149 == a2)
                {
                  *(void *)(v149 + 16) = v195;
                  *(_OWORD *)uint64_t v149 = v189;
                }
                else
                {
                  long long v155 = *(_OWORD *)a2;
                  *(void *)(v149 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)uint64_t v149 = v155;
                  *(void *)(a2 + 16) = v195;
                  *(_OWORD *)a2 = v189;
                  uint64_t v156 = v149 - v10 + 24;
                  if (v156 >= 25)
                  {
                    unint64_t v157 = (v156 / 0x18uLL - 2) >> 1;
                    uint64_t v158 = v10 + 24 * v157;
                    int v159 = *(_DWORD *)(v149 + 8);
                    int v160 = *(_DWORD *)(v149 + 12);
                    int v161 = *(int *)(v158 + 8) >> 1;
                    int v162 = v159 >> 1;
                    BOOL v163 = *(_DWORD *)(v158 + 12) < v160;
                    BOOL v5 = v161 == v159 >> 1;
                    BOOL v164 = v161 < v159 >> 1;
                    if (!v5) {
                      BOOL v163 = v164;
                    }
                    if (v163)
                    {
                      uint64_t v165 = *(void *)v149;
                      uint64_t v166 = *(void *)(v149 + 16);
                      do
                      {
                        uint64_t v167 = v149;
                        uint64_t v149 = v158;
                        long long v168 = *(_OWORD *)v158;
                        *(void *)(v167 + 16) = *(void *)(v158 + 16);
                        *(_OWORD *)uint64_t v167 = v168;
                        if (!v157) {
                          break;
                        }
                        unint64_t v157 = (v157 - 1) >> 1;
                        uint64_t v158 = v10 + 24 * v157;
                        int v169 = *(int *)(v158 + 8) >> 1;
                        BOOL v5 = v169 == v162;
                        BOOL v170 = v169 < v162;
                        if (v5) {
                          BOOL v170 = *(_DWORD *)(v158 + 12) < v160;
                        }
                      }
                      while (v170);
                      *(void *)uint64_t v149 = v165;
                      *(_DWORD *)(v149 + 8) = v159;
                      *(_DWORD *)(v149 + 12) = v160;
                      *(void *)(v149 + 16) = v166;
                    }
                  }
                }
              }
              while (v144-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 24 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)a1, (long long *)(a1 + 24 * (v12 >> 1)), (int *)(a2 - 24));
            uint64_t v15 = 24 * v13;
            unint64_t v16 = (long long *)(24 * v13 + a1 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)(a1 + 24), v16, (int *)(a2 - 48));
            uint64_t v17 = (long long *)(a1 + 24 + v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)(a1 + 48), v17, (int *)(a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(v16, (long long *)v14, (int *)v17);
            uint64_t v190 = *(void *)(a1 + 16);
            long long v184 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            *(void *)(v14 + 16) = v190;
            *(_OWORD *)unint64_t v14 = v184;
            --a3;
            if (a4) {
              goto LABEL_21;
            }
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)(a1 + 24 * (v12 >> 1)), (long long *)a1, (int *)(a2 - 24));
            --a3;
            if (a4)
            {
LABEL_21:
              int v19 = *(_DWORD *)(a1 + 8);
              int v20 = *(_DWORD *)(a1 + 12);
              int v22 = v19 >> 1;
              break;
            }
          }
          int v19 = *(_DWORD *)(a1 + 8);
          int v20 = *(_DWORD *)(a1 + 12);
          int v21 = *(int *)(a1 - 16) >> 1;
          int v22 = v19 >> 1;
          BOOL v23 = *(_DWORD *)(a1 - 12) < v20;
          BOOL v5 = v21 == v19 >> 1;
          BOOL v24 = v21 < v19 >> 1;
          if (!v5) {
            BOOL v23 = v24;
          }
          if (v23) {
            break;
          }
          int v25 = *(_DWORD *)(a2 - 16);
          BOOL v5 = v22 == v25 >> 1;
          BOOL v26 = v22 < v25 >> 1;
          if (v5) {
            BOOL v26 = v20 < *(_DWORD *)(a2 - 12);
          }
          if (v26)
          {
            unint64_t v27 = a1;
            do
            {
              unint64_t v10 = v27 + 24;
              int v28 = *(_DWORD *)(v27 + 32);
              BOOL v29 = v20 < *(_DWORD *)(v27 + 36);
              BOOL v5 = v22 == v28 >> 1;
              BOOL v30 = v22 < v28 >> 1;
              if (v5) {
                BOOL v30 = v29;
              }
              unint64_t v27 = v10;
            }
            while (!v30);
          }
          else
          {
            unint64_t v59 = a1 + 24;
            do
            {
              unint64_t v10 = v59;
              if (v59 >= a2) {
                break;
              }
              int v60 = *(_DWORD *)(v59 + 8);
              BOOL v61 = v20 < *(_DWORD *)(v10 + 12);
              BOOL v5 = v22 == v60 >> 1;
              BOOL v62 = v22 < v60 >> 1;
              if (!v5) {
                BOOL v61 = v62;
              }
              unint64_t v59 = v10 + 24;
            }
            while (!v61);
          }
          unint64_t v63 = a2;
          if (v10 < a2)
          {
            unint64_t v64 = a2;
            do
            {
              unint64_t v63 = v64 - 24;
              int v65 = *(_DWORD *)(v64 - 16);
              BOOL v66 = v20 < *(_DWORD *)(v64 - 12);
              BOOL v5 = v22 == v65 >> 1;
              BOOL v67 = v22 < v65 >> 1;
              if (v5) {
                BOOL v67 = v66;
              }
              unint64_t v64 = v63;
            }
            while (v67);
          }
          uint64_t v68 = *(void *)a1;
          uint64_t v69 = *(void *)(a1 + 16);
          while (v10 < v63)
          {
            uint64_t v192 = *(void *)(v10 + 16);
            long long v186 = *(_OWORD *)v10;
            long long v70 = *(_OWORD *)v63;
            *(void *)(v10 + 16) = *(void *)(v63 + 16);
            *(_OWORD *)unint64_t v10 = v70;
            *(void *)(v63 + 16) = v192;
            *(_OWORD *)unint64_t v63 = v186;
            do
            {
              int v71 = *(_DWORD *)(v10 + 32);
              int v72 = *(_DWORD *)(v10 + 36);
              v10 += 24;
              BOOL v73 = v20 < v72;
              BOOL v5 = v22 == v71 >> 1;
              BOOL v74 = v22 < v71 >> 1;
              if (v5) {
                BOOL v74 = v73;
              }
            }
            while (!v74);
            do
            {
              int v75 = *(_DWORD *)(v63 - 16);
              int v76 = *(_DWORD *)(v63 - 12);
              v63 -= 24;
              BOOL v77 = v20 < v76;
              BOOL v5 = v22 == v75 >> 1;
              BOOL v78 = v22 < v75 >> 1;
              if (v5) {
                BOOL v78 = v77;
              }
            }
            while (v78);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v79 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v79;
          }
          a4 = 0;
          *(void *)(v10 - 24) = v68;
          *(_DWORD *)(v10 - 16) = v19;
          *(_DWORD *)(v10 - 12) = v20;
          *(void *)(v10 - 8) = v69;
        }
        uint64_t v31 = 0;
        uint64_t v32 = *(void *)a1;
        uint64_t v33 = *(void *)(a1 + 16);
        do
        {
          int v34 = *(int *)(a1 + v31 + 32) >> 1;
          BOOL v35 = *(_DWORD *)(a1 + v31 + 36) < v20;
          BOOL v5 = v34 == v22;
          BOOL v36 = v34 < v22;
          if (!v5) {
            BOOL v35 = v36;
          }
          v31 += 24;
        }
        while (v35);
        unint64_t v37 = a1 + v31;
        unint64_t v38 = a2;
        if (v31 == 24)
        {
          unint64_t v43 = a2;
          while (v37 < v43)
          {
            unint64_t v39 = v43 - 24;
            int v44 = *(int *)(v43 - 16) >> 1;
            BOOL v45 = *(_DWORD *)(v43 - 12) < v20;
            BOOL v5 = v44 == v22;
            BOOL v46 = v44 < v22;
            if (v5) {
              BOOL v46 = v45;
            }
            unint64_t v43 = v39;
            if (v46) {
              goto LABEL_36;
            }
          }
          unint64_t v39 = v43;
          unint64_t v10 = v37;
        }
        else
        {
          do
          {
            unint64_t v39 = v38 - 24;
            int v40 = *(int *)(v38 - 16) >> 1;
            BOOL v41 = *(_DWORD *)(v38 - 12) < v20;
            BOOL v5 = v40 == v22;
            BOOL v42 = v40 < v22;
            if (v5) {
              BOOL v42 = v41;
            }
            unint64_t v38 = v39;
          }
          while (!v42);
LABEL_36:
          unint64_t v10 = v37;
          if (v37 < v39)
          {
            unint64_t v47 = v39;
            do
            {
              uint64_t v191 = *(void *)(v10 + 16);
              long long v185 = *(_OWORD *)v10;
              long long v48 = *(_OWORD *)v47;
              *(void *)(v10 + 16) = *(void *)(v47 + 16);
              *(_OWORD *)unint64_t v10 = v48;
              *(void *)(v47 + 16) = v191;
              *(_OWORD *)unint64_t v47 = v185;
              do
              {
                int v49 = *(_DWORD *)(v10 + 32);
                int v50 = *(_DWORD *)(v10 + 36);
                v10 += 24;
                v49 >>= 1;
                BOOL v51 = v50 < v20;
                BOOL v5 = v49 == v22;
                BOOL v52 = v49 < v22;
                if (v5) {
                  BOOL v52 = v51;
                }
              }
              while (v52);
              do
              {
                int v53 = *(_DWORD *)(v47 - 16);
                int v54 = *(_DWORD *)(v47 - 12);
                v47 -= 24;
                v53 >>= 1;
                BOOL v55 = v54 < v20;
                BOOL v5 = v53 == v22;
                BOOL v56 = v53 < v22;
                if (v5) {
                  BOOL v56 = v55;
                }
              }
              while (!v56);
            }
            while (v10 < v47);
          }
        }
        if (v10 - 24 != a1)
        {
          long long v57 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v57;
        }
        *(void *)(v10 - 24) = v32;
        *(_DWORD *)(v10 - 16) = v19;
        *(_DWORD *)(v10 - 12) = v20;
        *(void *)(v10 - 8) = v33;
        if (v37 >= v39) {
          break;
        }
LABEL_51:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,false>(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(a1, v10 - 24);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(v10, a2))
      {
        break;
      }
      if (!v58) {
        goto LABEL_51;
      }
    }
    a2 = v10 - 24;
    if (!v58) {
      continue;
    }
    break;
  }
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)a1, (long long *)a2, (int *)a3);
  int v11 = *(_DWORD *)(a3 + 8);
  int v12 = *(int *)(a4 + 8) >> 1;
  BOOL v13 = v12 == v11 >> 1;
  BOOL v14 = v12 < v11 >> 1;
  if (v13) {
    BOOL v14 = *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12);
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v16 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v16;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v15;
    int v17 = *(_DWORD *)(a2 + 8);
    LODWORD(v15) = *(int *)(a3 + 8) >> 1;
    BOOL v13 = v15 == v17 >> 1;
    BOOL v18 = (int)v15 < v17 >> 1;
    if (v13) {
      BOOL v18 = *(_DWORD *)(a3 + 12) < *(_DWORD *)(a2 + 12);
    }
    if (v18)
    {
      uint64_t v19 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v20 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v20;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v19;
      int v21 = *(_DWORD *)(a1 + 8);
      LODWORD(v19) = *(int *)(a2 + 8) >> 1;
      BOOL v13 = v19 == v21 >> 1;
      BOOL v22 = (int)v19 < v21 >> 1;
      if (v13) {
        BOOL v22 = *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12);
      }
      if (v22)
      {
        uint64_t v23 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v24 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v24;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v23;
      }
    }
  }
  int v25 = *(_DWORD *)(a4 + 8);
  int v26 = *(int *)(a5 + 8) >> 1;
  BOOL v13 = v26 == v25 >> 1;
  BOOL v27 = v26 < v25 >> 1;
  if (v13) {
    BOOL v27 = *(_DWORD *)(a5 + 12) < *(_DWORD *)(a4 + 12);
  }
  if (v27)
  {
    uint64_t v28 = *(void *)(a4 + 16);
    __n128 result = *(__n128 *)a4;
    uint64_t v29 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v29;
    *(__n128 *)a5 = result;
    *(void *)(a5 + 16) = v28;
    int v30 = *(_DWORD *)(a3 + 8);
    LODWORD(v28) = *(int *)(a4 + 8) >> 1;
    BOOL v13 = v28 == v30 >> 1;
    BOOL v31 = (int)v28 < v30 >> 1;
    if (v13) {
      BOOL v31 = *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12);
    }
    if (v31)
    {
      uint64_t v32 = *(void *)(a3 + 16);
      __n128 result = *(__n128 *)a3;
      uint64_t v33 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v33;
      *(__n128 *)a4 = result;
      *(void *)(a4 + 16) = v32;
      int v34 = *(_DWORD *)(a2 + 8);
      LODWORD(v32) = *(int *)(a3 + 8) >> 1;
      BOOL v13 = v32 == v34 >> 1;
      BOOL v35 = (int)v32 < v34 >> 1;
      if (v13) {
        BOOL v35 = *(_DWORD *)(a3 + 12) < *(_DWORD *)(a2 + 12);
      }
      if (v35)
      {
        uint64_t v36 = *(void *)(a2 + 16);
        __n128 result = *(__n128 *)a2;
        uint64_t v37 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v37;
        *(__n128 *)a3 = result;
        *(void *)(a3 + 16) = v36;
        int v38 = *(_DWORD *)(a1 + 8);
        LODWORD(v36) = *(int *)(a2 + 8) >> 1;
        BOOL v13 = v36 == v38 >> 1;
        BOOL v39 = (int)v36 < v38 >> 1;
        if (v13) {
          BOOL v39 = *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12);
        }
        if (v39)
        {
          uint64_t v40 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v41 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v41;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v40;
        }
      }
    }
  }
  return result;
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(long long *result, long long *a2, int *a3)
{
  int v3 = *((_DWORD *)a2 + 3);
  int v4 = *((_DWORD *)result + 2);
  int v5 = *((int *)a2 + 2) >> 1;
  BOOL v6 = v5 == v4 >> 1;
  BOOL v7 = v5 < v4 >> 1;
  if (v6) {
    BOOL v7 = v3 < *((_DWORD *)result + 3);
  }
  int v8 = a3[2] >> 1;
  BOOL v9 = a3[3] < v3;
  BOOL v6 = v8 == v5;
  BOOL v10 = v8 < v5;
  if (v6) {
    BOOL v10 = v9;
  }
  if (v7)
  {
    if (v10)
    {
      uint64_t v11 = *((void *)result + 2);
      long long v12 = *result;
      uint64_t v13 = *((void *)a3 + 2);
      *__n128 result = *(_OWORD *)a3;
      *((void *)result + 2) = v13;
LABEL_17:
      *(_OWORD *)a3 = v12;
      *((void *)a3 + 2) = v11;
      return result;
    }
    uint64_t v22 = *((void *)result + 2);
    long long v23 = *result;
    uint64_t v24 = *((void *)a2 + 2);
    *__n128 result = *a2;
    *((void *)result + 2) = v24;
    *a2 = v23;
    *((void *)a2 + 2) = v22;
    int v25 = *((_DWORD *)a2 + 2);
    LODWORD(v22) = a3[2] >> 1;
    BOOL v6 = v22 == v25 >> 1;
    BOOL v26 = (int)v22 < v25 >> 1;
    if (v6) {
      BOOL v26 = a3[3] < *((_DWORD *)a2 + 3);
    }
    if (v26)
    {
      uint64_t v11 = *((void *)a2 + 2);
      long long v12 = *a2;
      uint64_t v27 = *((void *)a3 + 2);
      *a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v27;
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    uint64_t v14 = *((void *)a2 + 2);
    long long v15 = *a2;
    uint64_t v16 = *((void *)a3 + 2);
    *a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = v16;
    *(_OWORD *)a3 = v15;
    *((void *)a3 + 2) = v14;
    int v17 = *((_DWORD *)result + 2);
    LODWORD(v14) = *((int *)a2 + 2) >> 1;
    BOOL v6 = v14 == v17 >> 1;
    BOOL v18 = (int)v14 < v17 >> 1;
    if (v6) {
      BOOL v18 = *((_DWORD *)a2 + 3) < *((_DWORD *)result + 3);
    }
    if (v18)
    {
      uint64_t v19 = *((void *)result + 2);
      long long v20 = *result;
      uint64_t v21 = *((void *)a2 + 2);
      *__n128 result = *a2;
      *((void *)result + 2) = v21;
      *a2 = v20;
      *((void *)a2 + 2) = v19;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v24 = *(_DWORD *)(a1 + 8);
      int v25 = *(int *)(a2 - 16) >> 1;
      BOOL v14 = v25 == v24 >> 1;
      BOOL v26 = v25 < v24 >> 1;
      if (v14) {
        BOOL v26 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 12);
      }
      if (v26)
      {
        uint64_t v27 = *(void *)(a1 + 16);
        long long v28 = *(_OWORD *)a1;
        uint64_t v29 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v29;
        *(_OWORD *)(a2 - 24) = v28;
        *(void *)(a2 - 8) = v27;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)a1, (long long *)(a1 + 24), (int *)(a2 - 24));
      BOOL result = 1;
      break;
    case 4uLL:
      int v30 = (long long *)(a1 + 24);
      BOOL v31 = (long long *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)a1, (long long *)(a1 + 24), (int *)(a1 + 48));
      int v32 = *(_DWORD *)(a1 + 56);
      int v33 = *(int *)(a2 - 16) >> 1;
      BOOL v14 = v33 == v32 >> 1;
      BOOL v34 = v33 < v32 >> 1;
      if (v14) {
        BOOL v34 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 60);
      }
      if (!v34) {
        goto LABEL_17;
      }
      uint64_t v35 = *(void *)(a1 + 64);
      long long v36 = *v31;
      uint64_t v37 = *(void *)(a2 - 8);
      long long *v31 = *(_OWORD *)(a2 - 24);
      *(void *)(a1 + 64) = v37;
      *(_OWORD *)(a2 - 24) = v36;
      *(void *)(a2 - 8) = v35;
      int v38 = *(_DWORD *)(a1 + 32);
      LODWORD(v35) = *(int *)(a1 + 56) >> 1;
      BOOL v14 = v35 == v38 >> 1;
      BOOL v39 = (int)v35 < v38 >> 1;
      if (v14) {
        BOOL v39 = *(_DWORD *)(a1 + 60) < *(_DWORD *)(a1 + 36);
      }
      if (!v39) {
        goto LABEL_17;
      }
      uint64_t v40 = *(void *)(a1 + 40);
      long long v41 = *v30;
      long long *v30 = *v31;
      *(void *)(a1 + 40) = *(void *)(a1 + 64);
      long long *v31 = v41;
      *(void *)(a1 + 64) = v40;
      int v42 = *(_DWORD *)(a1 + 8);
      LODWORD(v40) = *(int *)(a1 + 32) >> 1;
      BOOL v14 = v40 == v42 >> 1;
      BOOL v43 = (int)v40 < v42 >> 1;
      if (v14) {
        BOOL v43 = *(_DWORD *)(a1 + 36) < *(_DWORD *)(a1 + 12);
      }
      if (!v43) {
        goto LABEL_17;
      }
      uint64_t v44 = *(void *)(a1 + 16);
      long long v45 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v30;
      *(void *)(a1 + 16) = *(void *)(a1 + 40);
      long long *v30 = v45;
      *(void *)(a1 + 40) = v44;
      BOOL result = 1;
      break;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      BOOL result = 1;
      break;
    default:
      uint64_t v6 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((long long *)a1, (long long *)(a1 + 24), (int *)(a1 + 48));
      uint64_t v7 = a1 + 72;
      if (a1 + 72 == a2)
      {
LABEL_17:
        BOOL result = 1;
      }
      else
      {
        uint64_t v8 = 0;
        int v9 = 0;
        while (1)
        {
          int v10 = *(_DWORD *)(v7 + 8);
          int v11 = *(_DWORD *)(v7 + 12);
          int v12 = *(_DWORD *)(v6 + 8);
          int v13 = v10 >> 1;
          BOOL v14 = v10 >> 1 == v12 >> 1;
          BOOL v15 = v10 >> 1 < v12 >> 1;
          if (v14) {
            BOOL v15 = v11 < *(_DWORD *)(v6 + 12);
          }
          if (v15) {
            break;
          }
LABEL_16:
          uint64_t v6 = v7;
          v8 += 24;
          v7 += 24;
          if (v7 == a2) {
            goto LABEL_17;
          }
        }
        uint64_t v16 = *(void *)v7;
        uint64_t v17 = *(void *)(v7 + 16);
        uint64_t v18 = v8;
        do
        {
          uint64_t v19 = a1 + v18;
          *(_OWORD *)(v19 + 72) = *(_OWORD *)(a1 + v18 + 48);
          *(void *)(v19 + 88) = *(void *)(a1 + v18 + 64);
          if (v18 == -48)
          {
            *(void *)a1 = v16;
            *(_DWORD *)(a1 + 8) = v10;
            *(_DWORD *)(a1 + 12) = v11;
            *(void *)(a1 + 16) = v17;
            if (++v9 != 8) {
              goto LABEL_16;
            }
            goto LABEL_34;
          }
          int v20 = *(_DWORD *)(v19 + 32);
          BOOL v21 = v11 < *(_DWORD *)(v19 + 36);
          BOOL v14 = v13 == v20 >> 1;
          BOOL v22 = v13 < v20 >> 1;
          if (!v14) {
            BOOL v21 = v22;
          }
          v18 -= 24;
        }
        while (v21);
        *(void *)(a1 + v18 + 72) = v16;
        uint64_t v23 = a1 + v18 + 72;
        *(_DWORD *)(v23 + 8) = v10;
        *(_DWORD *)(v23 + 12) = v11;
        *(void *)(v23 + 16) = v17;
        if (++v9 != 8) {
          goto LABEL_16;
        }
LABEL_34:
        BOOL result = v7 + 24 == a2;
      }
      break;
  }
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(a1, a2, a3, a4).n128_u64[0];
  int v11 = *(int *)(a5 + 8) >> 1;
  int v12 = *(int *)(a4 + 8) >> 1;
  BOOL v13 = v11 < v12;
  if (v11 != v12 || (v14 = *(void *)(a5 + 16), v15 = *(void *)(a4 + 16), BOOL v13 = v14 < v15, v14 != v15))
  {
    if (!v13) {
      return result;
    }
LABEL_8:
    *(_OWORD *)int v39 = *(_OWORD *)a4;
    long long v16 = *(_OWORD *)a4;
    *(_OWORD *)&v39[16] = *(_OWORD *)(a4 + 16);
    long long v17 = *(_OWORD *)(a5 + 9);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 9) = v17;
    *(_OWORD *)a5 = v16;
    __n128 result = *(__n128 *)&v39[9];
    *(_OWORD *)(a5 + 9) = *(_OWORD *)&v39[9];
    int v18 = *(int *)(a4 + 8) >> 1;
    int v19 = *(int *)(a3 + 8) >> 1;
    BOOL v20 = v18 < v19;
    if (v18 == v19 && (uint64_t v21 = *(void *)(a4 + 16), v22 = *(void *)(a3 + 16), v20 = v21 < v22, v21 == v22))
    {
      if (!*(unsigned char *)(a4 + 24) || *(unsigned char *)(a3 + 24)) {
        return result;
      }
    }
    else if (!v20)
    {
      return result;
    }
    *(_OWORD *)BOOL v40 = *(_OWORD *)a3;
    long long v23 = *(_OWORD *)a3;
    *(_OWORD *)&v40[16] = *(_OWORD *)(a3 + 16);
    long long v24 = *(_OWORD *)(a4 + 9);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 9) = v24;
    *(_OWORD *)a4 = v23;
    __n128 result = *(__n128 *)&v40[9];
    *(_OWORD *)(a4 + 9) = *(_OWORD *)&v40[9];
    int v25 = *(int *)(a3 + 8) >> 1;
    int v26 = *(int *)(a2 + 8) >> 1;
    BOOL v27 = v25 < v26;
    if (v25 == v26 && (v28 = *(void *)(a3 + 16), v29 = *(void *)(a2 + 16), BOOL v27 = v28 < v29, v28 == v29))
    {
      if (!*(unsigned char *)(a3 + 24) || *(unsigned char *)(a2 + 24)) {
        return result;
      }
    }
    else if (!v27)
    {
      return result;
    }
    *(_OWORD *)uint64_t v41 = *(_OWORD *)a2;
    long long v30 = *(_OWORD *)a2;
    *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 16);
    long long v31 = *(_OWORD *)(a3 + 9);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 9) = v31;
    *(_OWORD *)a3 = v30;
    __n128 result = *(__n128 *)&v41[9];
    *(_OWORD *)(a3 + 9) = *(_OWORD *)&v41[9];
    int v32 = *(int *)(a2 + 8) >> 1;
    int v33 = *(int *)(a1 + 8) >> 1;
    BOOL v34 = v32 < v33;
    if (v32 == v33 && (v35 = *(void *)(a2 + 16), v36 = *(void *)(a1 + 16), BOOL v34 = v35 < v36, v35 == v36))
    {
      if (!*(unsigned char *)(a2 + 24) || *(unsigned char *)(a1 + 24)) {
        return result;
      }
    }
    else if (!v34)
    {
      return result;
    }
    *(_OWORD *)BOOL v42 = *(_OWORD *)a1;
    long long v37 = *(_OWORD *)a1;
    *(_OWORD *)&v42[16] = *(_OWORD *)(a1 + 16);
    long long v38 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = v38;
    *(_OWORD *)a2 = v37;
    __n128 result = *(__n128 *)&v42[9];
    *(_OWORD *)(a2 + 9) = *(_OWORD *)&v42[9];
    return result;
  }
  if (*(unsigned char *)(a5 + 24) && !*(unsigned char *)(a4 + 24)) {
    goto LABEL_8;
  }
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(long long *a1, long long *a2, long long *a3)
{
  int v3 = *((int *)a2 + 2) >> 1;
  int v4 = *((int *)a1 + 2) >> 1;
  BOOL v5 = v3 < v4;
  if (v3 == v4 && (uint64_t v6 = *((void *)a2 + 2), v7 = *((void *)a1 + 2), v5 = v6 < v7, v6 == v7))
  {
    if (*((unsigned char *)a2 + 24)) {
      BOOL v8 = *((unsigned char *)a1 + 24) == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8)
    {
LABEL_14:
      int v16 = *((int *)a3 + 2) >> 1;
      BOOL v17 = v16 < v3;
      if (v16 == v3 && (v18 = *((void *)a3 + 2), v19 = *((void *)a2 + 2), BOOL v17 = v18 < v19, v18 == v19))
      {
        if (!*((unsigned char *)a3 + 24) || *((unsigned char *)a2 + 24)) {
          return result;
        }
      }
      else if (!v17)
      {
        return result;
      }
      *(_OWORD *)BOOL v40 = *a2;
      long long v27 = *a2;
      *(_OWORD *)&v40[16] = a2[1];
      long long v28 = *(long long *)((char *)a3 + 9);
      *a2 = *a3;
      *(long long *)((char *)a2 + 9) = v28;
      *a3 = v27;
      __n128 result = *(__n128 *)&v40[9];
      *(long long *)((char *)a3 + 9) = *(_OWORD *)&v40[9];
      int v29 = *((int *)a2 + 2) >> 1;
      int v30 = *((int *)a1 + 2) >> 1;
      BOOL v31 = v29 < v30;
      if (v29 == v30 && (uint64_t v32 = *((void *)a2 + 2), v33 = *((void *)a1 + 2), v31 = v32 < v33, v32 == v33))
      {
        if (!*((unsigned char *)a2 + 24) || *((unsigned char *)a1 + 24)) {
          return result;
        }
      }
      else if (!v31)
      {
        return result;
      }
      *(_OWORD *)BOOL v42 = *a1;
      long long v36 = *a1;
      *(_OWORD *)&v42[16] = a1[1];
      long long v37 = *(long long *)((char *)a2 + 9);
      *a1 = *a2;
      *(long long *)((char *)a1 + 9) = v37;
      *a2 = v36;
      __n128 result = *(__n128 *)&v42[9];
      *(long long *)((char *)a2 + 9) = *(_OWORD *)&v42[9];
      return result;
    }
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  int v9 = *((int *)a3 + 2) >> 1;
  BOOL v10 = v9 < v3;
  if (v9 == v3 && (uint64_t v11 = *((void *)a3 + 2), v12 = *((void *)a2 + 2), v10 = v11 < v12, v11 == v12))
  {
    if (*((unsigned char *)a3 + 24) && !*((unsigned char *)a2 + 24)) {
      goto LABEL_12;
    }
  }
  else if (v10)
  {
LABEL_12:
    *(_OWORD *)long long v38 = *a1;
    long long v13 = *a1;
    *(_OWORD *)&v38[16] = a1[1];
    long long v14 = *(long long *)((char *)a3 + 9);
    *a1 = *a3;
    *(long long *)((char *)a1 + 9) = v14;
    *a3 = v13;
    __n128 result = *(__n128 *)&v38[9];
    *(long long *)((char *)a3 + 9) = *(_OWORD *)&v38[9];
    return result;
  }
  *(_OWORD *)int v39 = *a1;
  long long v20 = *a1;
  *(_OWORD *)&v39[16] = a1[1];
  long long v21 = *(long long *)((char *)a2 + 9);
  *a1 = *a2;
  *(long long *)((char *)a1 + 9) = v21;
  *a2 = v20;
  __n128 result = *(__n128 *)&v39[9];
  *(long long *)((char *)a2 + 9) = *(_OWORD *)&v39[9];
  int v22 = *((int *)a3 + 2) >> 1;
  int v23 = *((int *)a2 + 2) >> 1;
  BOOL v24 = v22 < v23;
  if (v22 != v23 || (v25 = *((void *)a3 + 2), v26 = *((void *)a2 + 2), BOOL v24 = v25 < v26, v25 != v26))
  {
    if (!v24) {
      return result;
    }
LABEL_34:
    *(_OWORD *)uint64_t v41 = *a2;
    long long v34 = *a2;
    *(_OWORD *)&v41[16] = a2[1];
    long long v35 = *(long long *)((char *)a3 + 9);
    *a2 = *a3;
    *(long long *)((char *)a2 + 9) = v35;
    *a3 = v34;
    __n128 result = *(__n128 *)&v41[9];
    *(long long *)((char *)a3 + 9) = *(_OWORD *)&v41[9];
    return result;
  }
  if (*((unsigned char *)a3 + 24) && !*((unsigned char *)a2 + 24)) {
    goto LABEL_34;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v26 = *(int *)(a2 - 24) >> 1;
      int v27 = *(int *)(a1 + 8) >> 1;
      BOOL v28 = v26 < v27;
      if (v26 == v27 && (v29 = *(void *)(a2 - 16), v30 = *(void *)(a1 + 16), BOOL v28 = v29 < v30, v29 == v30))
      {
        if (!*(unsigned char *)(a2 - 8) || *(unsigned char *)(a1 + 24)) {
          return result;
        }
      }
      else if (!v28)
      {
        return result;
      }
      BOOL v31 = (_OWORD *)(a2 - 32);
      *(_OWORD *)long long v34 = *(_OWORD *)a1;
      long long v32 = *(_OWORD *)a1;
      *(_OWORD *)&v34[16] = *(_OWORD *)(a1 + 16);
      long long v33 = *(_OWORD *)(a2 - 23);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 9) = v33;
      _OWORD *v31 = v32;
      *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)&v34[9];
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,0>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      uint64_t v6 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v7 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        int v11 = *(_DWORD *)(v7 + 8);
        int v12 = v11 >> 1;
        int v13 = *(int *)(v6 + 8) >> 1;
        if (v11 >> 1 == v13)
        {
          uint64_t v14 = *(void *)(v7 + 16);
          uint64_t v15 = *(void *)(v6 + 16);
          if (v14 == v15)
          {
            if (*(unsigned char *)(v7 + 24)) {
              BOOL v16 = *(unsigned char *)(v6 + 24) == 0;
            }
            else {
              BOOL v16 = 0;
            }
            if (!v16) {
              goto LABEL_7;
            }
          }
          else if (v14 >= v15)
          {
            goto LABEL_7;
          }
        }
        else
        {
          if (v12 >= v13) {
            goto LABEL_7;
          }
          uint64_t v14 = *(void *)(v7 + 16);
        }
        uint64_t v17 = *(void *)v7;
        int v18 = *(_DWORD *)(v7 + 12);
        char v19 = *(unsigned char *)(v7 + 24);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
        *(_OWORD *)(v7 + 9) = *(_OWORD *)(v6 + 9);
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v20 = v8;
        if (!v19)
        {
          while (1)
          {
            uint64_t v24 = a1 + v20;
            int v25 = *(int *)(a1 + v20 + 40) >> 1;
            if (v12 == v25)
            {
              if (v14 >= *(void *)(v24 + 48)) {
                goto LABEL_34;
              }
            }
            else if (v12 >= v25)
            {
              goto LABEL_35;
            }
            v6 -= 32;
            *(_OWORD *)(v24 + 64) = *(_OWORD *)(v24 + 32);
            *(_OWORD *)(v24 + 73) = *(_OWORD *)(v24 + 41);
            v20 -= 32;
            if (v20 == -64) {
              goto LABEL_5;
            }
          }
        }
        while (2)
        {
          uint64_t v21 = a1 + v20;
          int v22 = *(int *)(a1 + v20 + 40) >> 1;
          if (v12 == v22)
          {
            uint64_t v23 = *(void *)(v21 + 48);
            if (v14 == v23)
            {
              if (*(unsigned char *)(a1 + v20 + 56)) {
                goto LABEL_34;
              }
            }
            else if (v14 >= v23)
            {
LABEL_34:
              uint64_t v10 = v6;
              goto LABEL_6;
            }
            goto LABEL_23;
          }
          if (v12 < v22)
          {
LABEL_23:
            v6 -= 32;
            *(_OWORD *)(v21 + 64) = *(_OWORD *)(v21 + 32);
            *(_OWORD *)(v21 + 73) = *(_OWORD *)(v21 + 41);
            v20 -= 32;
            if (v20 == -64)
            {
LABEL_5:
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
LABEL_35:
        uint64_t v10 = a1 + v20 + 64;
LABEL_6:
        *(void *)uint64_t v10 = v17;
        *(_DWORD *)(v10 + 8) = v11;
        *(_DWORD *)(v10 + 12) = v18;
        *(void *)(v10 + 16) = v14;
        ++v9;
        *(unsigned char *)(v10 + 24) = v19;
        if (v9 == 8) {
          return v7 + 32 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 32;
        v7 += 32;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((long long *)a1, (long long *)a2, (long long *)a3).n128_u64[0];
  int v9 = *(int *)(a4 + 8) >> 1;
  int v10 = *(int *)(a3 + 8) >> 1;
  BOOL v11 = v9 < v10;
  if (v9 != v10 || (v12 = *(void *)(a4 + 16), v13 = *(void *)(a3 + 16), BOOL v11 = v12 < v13, v12 != v13))
  {
    if (!v11) {
      return result;
    }
LABEL_8:
    *(_OWORD *)uint64_t v30 = *(_OWORD *)a3;
    long long v14 = *(_OWORD *)a3;
    *(_OWORD *)&v30[16] = *(_OWORD *)(a3 + 16);
    long long v15 = *(_OWORD *)(a4 + 9);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 9) = v15;
    *(_OWORD *)a4 = v14;
    __n128 result = *(__n128 *)&v30[9];
    *(_OWORD *)(a4 + 9) = *(_OWORD *)&v30[9];
    int v16 = *(int *)(a3 + 8) >> 1;
    int v17 = *(int *)(a2 + 8) >> 1;
    BOOL v18 = v16 < v17;
    if (v16 == v17 && (v19 = *(void *)(a3 + 16), v20 = *(void *)(a2 + 16), BOOL v18 = v19 < v20, v19 == v20))
    {
      if (!*(unsigned char *)(a3 + 24) || *(unsigned char *)(a2 + 24)) {
        return result;
      }
    }
    else if (!v18)
    {
      return result;
    }
    *(_OWORD *)BOOL v31 = *(_OWORD *)a2;
    long long v21 = *(_OWORD *)a2;
    *(_OWORD *)&v31[16] = *(_OWORD *)(a2 + 16);
    long long v22 = *(_OWORD *)(a3 + 9);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 9) = v22;
    *(_OWORD *)a3 = v21;
    __n128 result = *(__n128 *)&v31[9];
    *(_OWORD *)(a3 + 9) = *(_OWORD *)&v31[9];
    int v23 = *(int *)(a2 + 8) >> 1;
    int v24 = *(int *)(a1 + 8) >> 1;
    BOOL v25 = v23 < v24;
    if (v23 == v24 && (v26 = *(void *)(a2 + 16), v27 = *(void *)(a1 + 16), BOOL v25 = v26 < v27, v26 == v27))
    {
      if (!*(unsigned char *)(a2 + 24) || *(unsigned char *)(a1 + 24)) {
        return result;
      }
    }
    else if (!v25)
    {
      return result;
    }
    *(_OWORD *)long long v32 = *(_OWORD *)a1;
    long long v28 = *(_OWORD *)a1;
    *(_OWORD *)&v32[16] = *(_OWORD *)(a1 + 16);
    long long v29 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = v29;
    *(_OWORD *)a2 = v28;
    __n128 result = *(__n128 *)&v32[9];
    *(_OWORD *)(a2 + 9) = *(_OWORD *)&v32[9];
    return result;
  }
  if (*(unsigned char *)(a4 + 24) && !*(unsigned char *)(a3 + 24)) {
    goto LABEL_8;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = (void *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v3) & 0x80000000) == 0)
      {
        uint64_t v6 = *v4 + v2;
        if (*(void *)(v6 + 32))
        {
          operator delete(*(void **)(v6 + 8));
          *(void *)(v6 + 48) = 0;
          *(void *)(v6 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *(void *)(v6 + 32) = 0;
        }
        BOOL v5 = *(void **)(v6 + 40);
        if (v5) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
        }
      }
      ++v3;
      v2 += 56;
    }
    while (v3 != *(void *)(a1 + 24));
    operator delete(*(void **)a1);
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    void *v4 = 0;
  }
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  }
  return a1;
}

void *operations_research::sat::Model::Delete<operations_research::sat::CpModelMapping>::~Delete(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  *a1 = &unk_26F0C0FC8;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::CpModelMapping::~CpModelMapping(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CpModelMapping>::~Delete(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  *a1 = &unk_26F0C0FC8;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::CpModelMapping::~CpModelMapping(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::CpModelMapping::~CpModelMapping(void **this)
{
  if (this[36])
  {
    operator delete(this[33]);
    this[38] = 0;
    this[33] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[34] = 0;
    this[35] = 0;
    this[36] = 0;
  }
  uint64_t v2 = this[37];
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::~raw_hash_set((uint64_t)(this + 27));
  if (this[24])
  {
    operator delete(this[21]);
    this[26] = 0;
    this[21] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[22] = 0;
    this[23] = 0;
    this[24] = 0;
  }
  uint64_t v3 = this[25];
  if (v3) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
  }
  if (this[18])
  {
    operator delete(this[15]);
    this[20] = 0;
    this[15] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[16] = 0;
    this[17] = 0;
    this[18] = 0;
  }
  uint64_t v4 = this[19];
  if (v4) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
  }
  BOOL v5 = this[12];
  if (v5)
  {
    this[13] = v5;
    operator delete(v5);
  }
  uint64_t v6 = this[9];
  if (v6)
  {
    this[10] = v6;
    operator delete(v6);
  }
  uint64_t v7 = this[6];
  if (v7)
  {
    this[7] = v7;
    operator delete(v7);
  }
  uint64_t v8 = this[3];
  if (v8)
  {
    this[4] = v8;
    operator delete(v8);
  }
  int v9 = *this;
  if (*this)
  {
    this[1] = v9;
    operator delete(v9);
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<int const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  uint64_t v9 = *a1;
  unint64_t v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v11 = a1[3];
  while (1)
  {
    unint64_t v12 = v10 & v11;
    uint64_t v13 = *(void *)(v9 + (v10 & v11));
    unint64_t v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::prepare_insert(a1, v8);
      uint64_t v18 = a1[1] + 56 * result;
      *(_DWORD *)uint64_t v18 = *a2;
      *(void *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(void *)(v18 + 48) = 0;
      uint64_t v9 = *a1;
      uint64_t v15 = a1[1];
      char v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    unint64_t v10 = v6 + v12;
  }
  uint64_t v15 = a1[1];
  while (1)
  {
    unint64_t result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 56 * result) == v7) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_6;
    }
  }
  char v17 = 0;
LABEL_10:
  *(void *)a3 = v9 + result;
  *(void *)(a3 + 8) = v15 + 56 * result;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  long long v32 = v4;
  if (!v4)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    BOOL v31 = a1[4];
    if (!v31) {
      return;
    }
LABEL_21:
    *((void *)v31 + 4) = v14 >> 3;
    *((void *)v31 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v5] & 0x80000000) == 0)
    {
      int v16 = &v32[56 * (void)v13];
      unint64_t v17 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v16)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v16));
      uint64_t v18 = *a1;
      uint64_t v19 = a1[3];
      unint64_t v20 = ((v17 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v19;
      uint64_t v21 = 0;
      for (unint64_t i = *(void *)&(*a1)[v20] & (~*(void *)&(*a1)[v20] << 7) & 0x8080808080808080;
            !i;
            unint64_t i = *(void *)&v18[v20] & (~*(void *)&v18[v20] << 7) & 0x8080808080808080)
      {
        v21 += 8;
        unint64_t v20 = (v21 + v20) & (unint64_t)v19;
      }
      unint64_t v23 = (v20 + (__clz(__rbit64(i)) >> 3)) & (unint64_t)v19;
      char v24 = v17 & 0x7F;
      v18[v23] = v24;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v23 - 8) & (unint64_t)a1[3])] = v24;
      uint64_t v25 = (uint64_t)&a1[1][56 * v23];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v16;
      uint64_t v26 = *((void *)v16 + 1);
      *((void *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(void *)(v25 + 8) = v26;
      uint64_t v27 = *((void *)v16 + 2);
      *((void *)v16 + 2) = 0;
      uint64_t v28 = *((void *)v16 + 3);
      *((void *)v16 + 3) = 0;
      *(void *)(v25 + 16) = v27;
      *(void *)(v25 + 24) = v28;
      uint64_t v29 = *((void *)v16 + 4);
      uint64_t v30 = *((void *)v16 + 5);
      *((void *)v16 + 4) = 0;
      *(void *)(v25 + 32) = v29;
      *(void *)(v25 + 40) = v30;
      *((void *)v16 + 5) = 0;
      *(void *)(v25 + 48) = *((void *)v16 + 6);
      *((void *)v16 + 6) = 0;
      if (*((void *)v16 + 4))
      {
        operator delete(*((void **)v16 + 1));
        *((void *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *((void *)v16 + 6) = 0;
        *((void *)v16 + 3) = 0;
        *((void *)v16 + 4) = 0;
        *((void *)v16 + 2) = 0;
      }
      v14 += v21;
      uint64_t v15 = (void *)*((void *)v16 + 5);
      if (v15) {
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
      }
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v5);
  BOOL v31 = a1[4];
  if (v31) {
    goto LABEL_21;
  }
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::drop_deletes_without_resize(uint64_t a1)
{
  v29[7] = *MEMORY[0x263EF8340];
  unint64_t v2 = *(int8x16_t **)a1;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)a1 + v3;
  if (v4 + 1 != *(void *)a1)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)a1;
    if (v5 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      int8x16_t *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *unint64_t v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  uint64_t v14 = *(void *)(a1 + 24);
  if (!v14)
  {
    unint64_t v16 = 0;
    *(void *)(a1 + 40) = -*(void *)(a1 + 16);
    uint64_t v28 = *(void *)(a1 + 32);
    if (!v28) {
      return;
    }
LABEL_26:
    *(void *)(v28 + 32) = v16 >> 3;
    *(void *)(v28 + 16) = 0;
    return;
  }
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  do
  {
    unint64_t v20 = *(int8x16_t **)a1;
    if (*(unsigned __int8 *)(*(void *)a1 + v15) == 254)
    {
      unint64_t v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(a1 + 8) + 56 * v15);
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      unint64_t v23 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      unint64_t v24 = *(uint64_t *)((unsigned char *)v20->i64 + v23) & (~*(uint64_t *)((char *)v20->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          unint64_t v18 = (v17 + v18) & v14;
          unint64_t v24 = *(uint64_t *)((unsigned char *)v20->i64 + v18) & (~*(uint64_t *)((char *)v20->i64 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        int v25 = v20->u8[v19];
        v20->i8[v19] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(a1 + 24) & (v19 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v22 & 0x7F;
        uint64_t v26 = *(void *)(a1 + 8);
        if (v25 == 128)
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, v26 + 56 * v19, v26 + 56 * v15);
          *(unsigned char *)(*(void *)a1 + v15) = 0x80;
          *(unsigned char *)((*(void *)(a1 + 24) & (v15 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, (uint64_t)v29, v26 + 56 * v15);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, *(void *)(a1 + 8) + 56 * v15, *(void *)(a1 + 8) + 56 * v19);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, *(void *)(a1 + 8) + 56 * v19, (uint64_t)v29);
          --v15;
        }
      }
      else
      {
        v20->i8[v15] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(a1 + 24) & (v15 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    uint64_t v14 = *(void *)(a1 + 24);
  }
  while (v15 != v14);
  uint64_t v27 = v15 - (v15 >> 3);
  if (v15 == 7) {
    uint64_t v27 = 6;
  }
  *(void *)(a1 + 40) = v27 - *(void *)(a1 + 16);
  uint64_t v28 = *(void *)(a1 + 32);
  if (v28) {
    goto LABEL_26;
  }
}

void absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(void *)(a2 + 8) = v4;
  unint64_t v6 = (void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7;
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v9;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  if (*(void *)(a3 + 32))
  {
    operator delete(*(void **)(a3 + 8));
    *(void *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a3 + 48) = 0;
    v6[1] = 0;
    v6[2] = 0;
    *unint64_t v6 = 0;
  }
  int8x16_t v10 = *(void **)(a3 + 40);
  if (v10) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
  }
}

char *std::vector<operations_research::sat::LinearExpression>::__push_back_slow_path<operations_research::sat::LinearExpression>(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v5 = 0x492492492492492;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x492492492492492) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 56 * v5;
  uint64_t v8 = (char *)operator new(56 * v5);
  uint64_t v9 = &v8[56 * v3];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  int8x16_t v10 = &v8[v7];
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v9 + 5) = v11;
  *((void *)v9 + 6) = v12;
  int8x16_t v13 = v9 + 56;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v15) {
      return v13;
    }
    goto LABEL_20;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = &v9[v16];
    unint64_t v18 = &v15[v16];
    *(_OWORD *)(v17 - 56) = *(_OWORD *)&v15[v16 - 56];
    *((void *)v17 - 5) = *(void *)&v15[v16 - 40];
    *((void *)v18 - 7) = 0;
    *((void *)v18 - 6) = 0;
    *((void *)v18 - 5) = 0;
    *((_OWORD *)v17 - 2) = *(_OWORD *)&v15[v16 - 32];
    uint64_t v19 = *(void *)&v15[v16 - 8];
    *((void *)v17 - 2) = *(void *)&v15[v16 - 16];
    *((void *)v18 - 4) = 0;
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *((void *)v17 - 1) = v19;
    v16 -= 56;
  }
  while (&v15[v16] != v14);
  unint64_t v20 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  *a1 = &v9[v16];
  a1[1] = v13;
  a1[2] = v10;
  if (v15 != v20)
  {
    do
    {
      unint64_t v21 = (void *)*((void *)v15 - 4);
      if (v21)
      {
        *((void *)v15 - 3) = v21;
        operator delete(v21);
      }
      unint64_t v22 = (void *)*((void *)v15 - 7);
      if (v22)
      {
        *((void *)v15 - 6) = v22;
        operator delete(v22);
      }
      v15 -= 56;
    }
    while (v15 != v20);
    unint64_t v15 = v20;
  }
  if (v15) {
LABEL_20:
  }
    operator delete(v15);
  return v13;
}

uint64_t operations_research::sat::CpModelMapping::Interval(operations_research::sat::CpModelMapping *this, int a2)
{
  LODWORD(v6[0]) = a2;
  LODWORD(v7) = 0;
  if (a2 < 0) {
    google::MakeCheckOpString<int,int>((int)v6, (int)&v7, "i >= 0");
  }
  int v5 = a2;
  uint64_t v2 = *((void *)this + 3);
  v6[0] = (*((void *)this + 4) - v2) >> 2;
  if (v6[0] <= (unint64_t)a2) {
    google::MakeCheckOpString<int,unsigned long>((int)&v5, (int)v6, "i < intervals_.size()");
  }
  uint64_t v3 = (_DWORD *)(v2 + 4 * a2);
  if (*v3 == -1) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>>((int)v3, (int)operations_research::sat::kNoIntervalVariable, "intervals_[i] != kNoIntervalVariable");
  }
  return *(unsigned int *)(v2 + 4 * a2);
}

void sub_23CC42164(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC4216C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC42174(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CC421E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    int v25 = a1[4];
    if (!v25) {
      return;
    }
LABEL_21:
    *((void *)v25 + 4) = v14 >> 3;
    *((void *)v25 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v19 = &v5[32 * (void)v13];
      unint64_t v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v19)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v19));
      unint64_t v21 = *a1;
      unint64_t v22 = a1[3];
      unint64_t v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v23 = (v15 + v23) & (unint64_t)v22;
          unint64_t v24 = *(void *)&v21[v23] & (~*(void *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      char v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      unint64_t v18 = &a1[1][32 * v16];
      *(void *)unint64_t v18 = *(void *)v19;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      *((void *)v18 + 3) = 0;
      *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
      *((void *)v18 + 3) = *((void *)v19 + 3);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = 0;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  int v25 = a1[4];
  if (v25) {
    goto LABEL_21;
  }
}

void *std::vector<std::vector<operations_research::sat::Literal>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = operator new(24 * a2);
    unint64_t v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    unint64_t v8 = &v6[3 * a2];
    a1[2] = v8;
    uint64_t v9 = *(const void **)a3;
    int64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        *unint64_t v6 = 0;
        v6[1] = 0;
        void v6[2] = 0;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = 24 * a2;
      do
      {
        void *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        uint64_t v12 = (char *)operator new(v10);
        void *v7 = v12;
        v7[1] = v12;
        unint64_t v13 = &v12[4 * (v10 >> 2)];
        v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_23CC426C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_23CC426F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_23CC42704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  unint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    unint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        unint64_t v6 = (char *)v2[1];
        do
        {
          unint64_t v8 = (void *)*((void *)v6 - 3);
          v6 -= 24;
          unint64_t v7 = v8;
          if (v8)
          {
            *((void *)v4 - 2) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void operations_research::sat::PostsolveClause(uint64_t a1, const char *a2)
{
  if (*(_DWORD *)(a1 + 60) == 3) {
    uint64_t v4 = *(uint64_t **)(a1 + 48);
  }
  else {
    uint64_t v4 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  }
  uint64_t v5 = *((unsigned int *)v4 + 4);
  LODWORD(v21) = v5;
  int v23 = 0;
  if (!v5) {
    google::MakeCheckOpString<int,int>((int)&v21, (int)&v23, "size != 0");
  }
  if ((int)v5 < 1) {
    goto LABEL_22;
  }
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 4 * v5;
  do
  {
    if (*(_DWORD *)(a1 + 60) == 3) {
      uint64_t v9 = *(uint64_t **)(a1 + 48);
    }
    else {
      uint64_t v9 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    }
    int v10 = *(_DWORD *)(v9[3] + v6);
    unsigned int v11 = ~v10;
    if (~v10 > v10) {
      int v10 = ~v10;
    }
    int v12 = v10;
    if (operations_research::Domain::IsFixed((operations_research::Domain *)(*(void *)a2 + 24 * v10), a2))
    {
      v7 |= operations_research::Domain::Min((operations_research::Domain *)(*(void *)a2 + 24 * v12), v13) == v11 >> 31;
    }
    else
    {
      operations_research::Domain::Domain(&v21, 0);
      unint64_t v14 = (uint64_t *)(*(void *)a2 + 24 * v12);
      if (v14 == &v21)
      {
        if (v21) {
          operator delete(__p[0]);
        }
      }
      else
      {
        uint64_t v15 = (void **)(v14 + 1);
        if (*(unsigned char *)v14) {
          operator delete(*v15);
        }
        *unint64_t v14 = v21;
        *(_OWORD *)uint64_t v15 = *(_OWORD *)__p;
      }
    }
    v6 += 4;
  }
  while (v8 != v6);
  if ((v7 & 1) == 0)
  {
LABEL_22:
    if (*(_DWORD *)(a1 + 60) == 3) {
      unint64_t v16 = *(uint64_t **)(a1 + 48);
    }
    else {
      unint64_t v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    }
    int v17 = *(_DWORD *)v16[3];
    operations_research::Domain::Domain(&v21, v17 >= 0);
    if (~v17 <= v17) {
      int v18 = v17;
    }
    else {
      int v18 = ~v17;
    }
    uint64_t v19 = (uint64_t *)(*(void *)a2 + 24 * v18);
    if (v19 == &v21)
    {
      if (v21) {
        operator delete(__p[0]);
      }
    }
    else
    {
      unint64_t v20 = (void **)(v19 + 1);
      if (*(unsigned char *)v19) {
        operator delete(*v20);
      }
      *uint64_t v19 = v21;
      *(_OWORD *)unint64_t v20 = *(_OWORD *)__p;
    }
  }
}

void sub_23CC429D4(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PostsolveLinear(uint64_t a1, const char *a2, void *a3, __n128 a4)
{
  if (*(_DWORD *)(a1 + 60) == 12) {
    uint64_t v4 = *(uint64_t **)(a1 + 48);
  }
  else {
    uint64_t v4 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  }
  uint64_t v5 = *((unsigned int *)v4 + 4);
  int v106 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  char v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v92 = v5;
  if ((int)v5 <= 0)
  {
    int v51 = 0;
    goto LABEL_146;
  }
  uint64_t v6 = a3;
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v91 = 0;
  uint64_t v11 = 0;
  uint64_t v89 = 0;
  do
  {
    unint64_t v13 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (*(_DWORD *)(a1 + 60) == 12) {
      unint64_t v13 = *(uint64_t **)(a1 + 48);
    }
    int v14 = *(_DWORD *)(v13[3] + 4 * v11);
    uint64_t v15 = *(void *)(v13[6] + 8 * v11);
    LODWORD(v97) = v14;
    v102.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3);
    if (v102.__r_.__value_.__r.__words[0] <= v14) {
      google::MakeCheckOpString<int,unsigned long>((int)&v97, (int)&v102, "var < domains->size()");
    }
    if (v15)
    {
      if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*v6 + 24 * v14), a2))
      {
        unint64_t v16 = v91;
        if (v91 < v10)
        {
          *(_DWORD *)uint64_t v91 = v14;
          v91 += 4;
          uint64_t v107 = v16 + 4;
          if (v8 >= v7) {
            goto LABEL_36;
          }
LABEL_6:
          *(void *)uint64_t v8 = v15;
          uint64_t v12 = (uint64_t)(v8 + 8);
LABEL_7:
          uint64_t v104 = (char *)v12;
          uint64_t v8 = (char *)v12;
          uint64_t v6 = a3;
          goto LABEL_8;
        }
        int v17 = v10;
        int64_t v18 = v91 - v9;
        uint64_t v19 = (v91 - v9) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = v17 - v9;
        unint64_t v22 = (v17 - v9) >> 1;
        if (v22 > v20) {
          unint64_t v20 = v22;
        }
        if (v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v20;
        }
        if (v23)
        {
          if (v23 >> 62) {
            goto LABEL_153;
          }
          unint64_t v24 = (char *)operator new(4 * v23);
          unint64_t v25 = (unint64_t)v7;
          uint64_t v26 = &v24[4 * v19];
          *(_DWORD *)uint64_t v26 = v14;
          uint64_t v27 = (uint64_t)(v26 + 4);
          uint64_t v28 = v91;
          if (v91 == v9)
          {
LABEL_32:
            int v10 = &v24[4 * v23];
            int v106 = v26;
            uint64_t v107 = (char *)v27;
            uint64_t v108 = v10;
            if (!v9)
            {
              uint64_t v9 = v26;
              char v7 = (char *)v25;
              uint64_t v91 = (char *)v27;
              uint64_t v107 = (char *)v27;
              if ((unint64_t)v8 >= v25) {
                goto LABEL_36;
              }
              goto LABEL_6;
            }
            operator delete(v9);
            uint64_t v8 = v104;
            uint64_t v9 = v26;
            char v7 = v105;
            uint64_t v91 = (char *)v27;
            uint64_t v107 = (char *)v27;
            if (v104 < v105) {
              goto LABEL_6;
            }
LABEL_36:
            long long v32 = v103;
            uint64_t v33 = (v8 - (char *)v103) >> 3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if ((v7 - (char *)v103) >> 2 > v34) {
              unint64_t v34 = (v7 - (char *)v103) >> 2;
            }
            if ((unint64_t)(v7 - (char *)v103) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v34;
            }
            if (v35)
            {
              if (v35 >> 61) {
LABEL_153:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              long long v36 = operator new(8 * v35);
              long long v37 = (uint64_t *)&v36[8 * v33];
              *long long v37 = v15;
              uint64_t v12 = (uint64_t)(v37 + 1);
              if (v8 == (char *)v32) {
                goto LABEL_50;
              }
LABEL_47:
              unint64_t v38 = v8 - 8 - (char *)v32;
              if (v38 < 0x168)
              {
                int v39 = v8;
                goto LABEL_49;
              }
              if (&v36[v8 - (char *)v32 - 8 - (v38 & 0xFFFFFFFFFFFFFFF8)] > &v36[v8 - (char *)v32 - 8])
              {
                int v39 = v8;
                goto LABEL_49;
              }
              if (&v8[-(v38 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
              {
                int v39 = v8;
                goto LABEL_49;
              }
              if ((unint64_t)((char *)v32 - v36) < 0x20)
              {
                int v39 = v8;
                goto LABEL_49;
              }
              uint64_t v46 = (v38 >> 3) + 1;
              uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
              int v39 = &v8[-v47];
              long long v37 = (uint64_t *)((char *)v37 - v47);
              BOOL v48 = (__n128 *)&v36[8 * v33 - 16];
              uint64_t v49 = (__n128 *)(v8 - 16);
              uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                a4 = *v49;
                v48[-1] = v49[-1];
                __n128 *v48 = a4;
                v48 -= 2;
                v49 -= 2;
                v50 -= 4;
              }
              while (v50);
              if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_49:
                  uint64_t v40 = *((void *)v39 - 1);
                  v39 -= 8;
                  *--long long v37 = v40;
                }
                while (v39 != (char *)v32);
              }
            }
            else
            {
              long long v36 = 0;
              long long v37 = (uint64_t *)(8 * v33);
              *(void *)(8 * v33) = v15;
              uint64_t v12 = 8 * v33 + 8;
              if (v8 != (char *)v32) {
                goto LABEL_47;
              }
            }
LABEL_50:
            char v7 = &v36[8 * v35];
            char v103 = v37;
            uint64_t v105 = v7;
            if (v32) {
              operator delete(v32);
            }
            goto LABEL_7;
          }
        }
        else
        {
          unint64_t v25 = (unint64_t)v7;
          unint64_t v24 = 0;
          uint64_t v26 = (char *)(4 * v19);
          *(_DWORD *)(4 * v19) = v14;
          uint64_t v27 = 4 * v19 + 4;
          uint64_t v28 = v91;
          if (v91 == v9) {
            goto LABEL_32;
          }
        }
        unint64_t v29 = v28 - 4 - v9;
        if (v29 >= 0xBC)
        {
          if (&v24[v18 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v18 - 4])
          {
            uint64_t v30 = v91;
          }
          else if (&v28[-(v29 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v28 - 4)
          {
            uint64_t v30 = v91;
          }
          else if ((unint64_t)(v28 - &v24[v18]) >= 0x20)
          {
            uint64_t v41 = (v29 >> 2) + 1;
            uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v30 = &v91[-v42];
            v26 -= v42;
            BOOL v43 = (__n128 *)&v24[4 * v19 - 16];
            unint64_t v44 = (__n128 *)(v91 - 16);
            uint64_t v45 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              a4 = *v44;
              v43[-1] = v44[-1];
              __n128 *v43 = a4;
              v43 -= 2;
              v44 -= 2;
              v45 -= 8;
            }
            while (v45);
            if (v41 == (v41 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v30 = v91;
          }
        }
        else
        {
          uint64_t v30 = v28;
        }
        do
        {
          int v31 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *((_DWORD *)v26 - 1) = v31;
          v26 -= 4;
        }
        while (v30 != v9);
        goto LABEL_32;
      }
      v89 += operations_research::Domain::Min((operations_research::Domain *)(*v6 + 24 * v14), a2) * v15;
    }
LABEL_8:
    ++v11;
  }
  while (v11 != v92);
  int v51 = v106;
  if (v106 != v91)
  {
    BOOL v52 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (*(_DWORD *)(a1 + 60) == 12) {
      BOOL v52 = *(uint64_t **)(a1 + 48);
    }
    operations_research::Domain::FromFlatSpanOfIntervals(v52[9], *((int *)v52 + 16), (unint64_t *)&v99, a4);
    operations_research::Domain::Domain(&v97, -v89);
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v99, (const operations_research::Domain *)&v97, &v102, v53);
    if ((v97 & 1) == 0)
    {
      if ((v99 & 1) == 0) {
        goto LABEL_78;
      }
LABEL_85:
      operator delete(v100);
      uint64_t v54 = v91 - v51;
      if (v91 - v51 != 4) {
        goto LABEL_86;
      }
LABEL_79:
      unint64_t v55 = *(int *)v51;
      operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v102, *v103, &v97);
      operations_research::Domain::IntersectionWith(&v97, (const operations_research::Domain *)(*a3 + 24 * (int)v55), (unint64_t *)&v99);
      if (v97) {
        operator delete(__p[0]);
      }
      if ((*(void *)(*(void *)a2 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v55)) {
        uint64_t v57 = operations_research::Domain::Min((operations_research::Domain *)&v99, v56);
      }
      else {
        uint64_t v57 = operations_research::Domain::Max((operations_research::Domain *)&v99, v56);
      }
      operations_research::Domain::Domain(&v97, v57);
      int v84 = (unint64_t *)(*a3 + 24 * (int)v55);
      if (v84 == &v97)
      {
        if (v97) {
          operator delete(__p[0]);
        }
      }
      else
      {
        BOOL v85 = (void **)(v84 + 1);
        if (*(unsigned char *)v84) {
          operator delete(*v85);
        }
        *int v84 = v97;
        *(_OWORD *)BOOL v85 = *(_OWORD *)__p;
      }
      if (v99)
      {
        uint64_t v81 = v100;
        goto LABEL_141;
      }
      goto LABEL_142;
    }
    operator delete(__p[0]);
    if (v99) {
      goto LABEL_85;
    }
LABEL_78:
    uint64_t v54 = v91 - v51;
    if (v91 - v51 == 4) {
      goto LABEL_79;
    }
LABEL_86:
    uint64_t v99 = 0;
    BOOL v100 = 0;
    unint64_t v101 = 0;
    operations_research::Domain::Domain(&v97, 0);
    char v58 = (char *)v100;
    if ((unint64_t)v100 >= v101)
    {
      BOOL v100 = (void *)std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>((uint64_t *)&v99, (uint64_t)&v97);
      if (v97) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(void *)BOOL v100 = 0;
      *(void *)char v58 = v97;
      int8x16_t v59 = *(int8x16_t *)__p;
      *(_OWORD *)(v58 + 8) = *(_OWORD *)__p;
      BOOL v100 = v58 + 24;
    }
    if ((unint64_t)v54 >= 5)
    {
      uint64_t v60 = 0;
      uint64_t v61 = v103;
      do
      {
        LOBYTE(v94) = 0;
        operations_research::Domain::MultiplicationBy((operations_research::Domain *)(*a3 + 24 * *(int *)&v51[4 * v60]), (BOOL *)&v94, -v61[v60], &v97);
        if (!(_BYTE)v94)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v96, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 94);
          uint64_t v87 = (void *)google::LogMessage::stream((google::LogMessage *)&v96);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Check failed: exact ", 20);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v96);
        }
        operations_research::Domain::AdditionWith((operations_research::Domain *)&v97, (const operations_research::Domain *)((char *)v100 - 24), &v96, v62);
        BOOL v63 = (char *)v100;
        if ((unint64_t)v100 >= v101)
        {
          BOOL v100 = (void *)std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>((uint64_t *)&v99, (uint64_t)&v96);
          if (v96.__r_.__value_.__s.__data_[0])
          {
            operator delete((void *)v96.__r_.__value_.__l.__size_);
            if ((v97 & 1) == 0) {
              goto LABEL_92;
            }
LABEL_99:
            operator delete(__p[0]);
            goto LABEL_92;
          }
          if (v97) {
            goto LABEL_99;
          }
        }
        else
        {
          *(void *)BOOL v100 = 0;
          *(void *)BOOL v63 = v96.__r_.__value_.__r.__words[0];
          int8x16_t v59 = *(int8x16_t *)&v96.__r_.__value_.__r.__words[1];
          *(_OWORD *)(v63 + 8) = *(_OWORD *)&v96.__r_.__value_.__r.__words[1];
          BOOL v100 = v63 + 24;
          if (v97) {
            goto LABEL_99;
          }
        }
LABEL_92:
        ++v60;
      }
      while (v54 >> 2 > (unint64_t)(v60 + 1));
    }
    unint64_t v64 = (unint64_t)v54 >> 2;
    int v65 = v64 - 1;
    if ((int)v64 - 1 >= 0)
    {
      uint64_t v66 = 3 * (v64 - 1);
      uint64_t v67 = &v103[v65];
      int v68 = (int *)&v51[4 * v65];
      do
      {
        unint64_t v70 = *v68--;
        unint64_t v69 = v70;
        uint64_t v72 = *v67--;
        uint64_t v71 = v72;
        operations_research::Domain::AdditionWith((operations_research::Domain *)&v102, (const operations_research::Domain *)&v99[v66], &v94, v59);
        operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v94, v72, (unint64_t *)&v96);
        operations_research::Domain::IntersectionWith(&v96, (const operations_research::Domain *)(*a3 + 24 * (int)v69), &v97);
        if (v96.__r_.__value_.__s.__data_[0]) {
          operator delete((void *)v96.__r_.__value_.__l.__size_);
        }
        if (v94) {
          operator delete(v95);
        }
        if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v97))
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v94, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 105);
          uint64_t v86 = (void *)google::LogMessage::stream((google::LogMessage *)&v94);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Check failed: !domain.IsEmpty() ", 32);
          google::protobuf::Message::ShortDebugString(&v96);
        }
        if ((*(void *)(*(void *)a2 + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v69)) {
          uint64_t v74 = operations_research::Domain::Min((operations_research::Domain *)&v97, v73);
        }
        else {
          uint64_t v74 = operations_research::Domain::Max((operations_research::Domain *)&v97, v73);
        }
        uint64_t v75 = v74;
        operations_research::Domain::Domain(&v96, v74);
        BOOL v76 = (std::string *)(*a3 + 24 * (int)v69);
        if (v76 == &v96)
        {
          if (v96.__r_.__value_.__s.__data_[0]) {
            operator delete((void *)v96.__r_.__value_.__l.__size_);
          }
        }
        else
        {
          p_size = (void **)&v76->__r_.__value_.__l.__size_;
          if (v76->__r_.__value_.__s.__data_[0]) {
            operator delete(*p_size);
          }
          v76->__r_.__value_.__r.__words[0] = v96.__r_.__value_.__r.__words[0];
          *(_OWORD *)p_size = *(_OWORD *)&v96.__r_.__value_.__r.__words[1];
        }
        operations_research::Domain::Domain(&v94, -(v71 * v75));
        operations_research::Domain::AdditionWith((operations_research::Domain *)&v102, (const operations_research::Domain *)&v94, &v96, v78);
        if (v102.__r_.__value_.__s.__data_[0]) {
          operator delete((void *)v102.__r_.__value_.__l.__size_);
        }
        std::string v102 = v96;
        int8x16_t v59 = *(int8x16_t *)&v96.__r_.__value_.__r.__words[1];
        v96.__r_.__value_.__r.__words[0] = 0;
        if (v94)
        {
          operator delete(v95);
          if (v97) {
LABEL_123:
          }
            operator delete(__p[0]);
        }
        else if (v97)
        {
          goto LABEL_123;
        }
        v66 -= 3;
        LODWORD(v64) = v64 - 1;
      }
      while (v64);
    }
    int v79 = v99;
    if (v99)
    {
      BOOL v80 = (void **)v100;
      uint64_t v81 = v99;
      if (v100 != v99)
      {
        int v82 = (void **)v100;
        do
        {
          char v83 = *((unsigned char *)v82 - 24);
          v82 -= 3;
          if (v83) {
            operator delete(*(v80 - 2));
          }
          BOOL v80 = v82;
        }
        while (v82 != v79);
        uint64_t v81 = v99;
      }
      BOOL v100 = v79;
LABEL_141:
      operator delete(v81);
    }
LABEL_142:
    if (v102.__r_.__value_.__s.__data_[0]) {
      operator delete((void *)v102.__r_.__value_.__l.__size_);
    }
  }
  if (v103) {
    operator delete(v103);
  }
LABEL_146:
  if (v51)
  {
    uint64_t v107 = v51;
    operator delete(v51);
  }
}

void sub_23CC43488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_23CC43490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, void *a19, int a20,__int16 a21,char a22,char a23,char a24,void *__p,uint64_t a26,char a27,void *a28,uint64_t a29,char a30,void *a31)
{
  uint64_t v33 = *(void **)(v31 - 136);
  if (v33)
  {
    *(void *)(v31 - 128) = v33;
    operator delete(v33);
    unint64_t v34 = *(void **)(v31 - 112);
    if (!v34) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v34 = *(void **)(v31 - 112);
    if (!v34) {
      goto LABEL_3;
    }
  }
  *(void *)(v31 - 104) = v34;
  operator delete(v34);
  _Unwind_Resume(exception_object);
}

void **std::vector<operations_research::Domain>::~vector[abi:ne180100](void **a1)
{
  unint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (void **)a1[1];
      do
      {
        char v6 = *((unsigned char *)v5 - 24);
        v5 -= 3;
        if (v6) {
          operator delete(*(v3 - 2));
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL operations_research::sat::PostsolveIntMax(uint64_t a1, const char *a2)
{
  int v3 = *(_DWORD *)(a1 + 60);
  uint64_t v4 = *(uint64_t **)(a1 + 48);
  if (v3 == 9) {
    uint64_t v5 = *(uint64_t **)(a1 + 48);
  }
  else {
    uint64_t v5 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  }
  uint64_t v6 = *((int *)v5 + 4);
  if (v6)
  {
    char v7 = (int *)v5[3];
    uint64_t v8 = 4 * v6;
    uint64_t v9 = 0x8000000000000000;
    do
    {
      int v12 = *v7;
      if (~*v7 <= *v7) {
        int v13 = *v7;
      }
      else {
        int v13 = ~v12;
      }
      int v14 = v13;
      if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*(void *)a2 + 24 * v13), a2))
      {
        unint64_t v16 = (operations_research::Domain *)(*(void *)a2 + 24 * v14);
        if (v12 < 0) {
          uint64_t v17 = operations_research::Domain::Max(v16, v15);
        }
        else {
          uint64_t v17 = operations_research::Domain::Min(v16, v15);
        }
        operations_research::Domain::Domain(&v31, v17);
        int64_t v18 = (unint64_t *)(*(void *)a2 + 24 * v14);
        if (v18 == &v31)
        {
          if (v31) {
            operator delete(__p[0]);
          }
        }
        else
        {
          uint64_t v19 = (void **)(v18 + 1);
          if (*(unsigned char *)v18) {
            operator delete(*v19);
          }
          *int64_t v18 = v31;
          *(_OWORD *)uint64_t v19 = *(_OWORD *)__p;
        }
      }
      uint64_t v10 = operations_research::Domain::Min((operations_research::Domain *)(*(void *)a2 + 24 * v14), v15);
      if (v12 >= 0) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = -v10;
      }
      if (v9 <= v11) {
        uint64_t v9 = v11;
      }
      ++v7;
      v8 -= 4;
    }
    while (v8);
    int v3 = *(_DWORD *)(a1 + 60);
    uint64_t v4 = *(uint64_t **)(a1 + 48);
  }
  else
  {
    uint64_t v9 = 0x8000000000000000;
  }
  if (v3 == 9) {
    unint64_t v20 = v4;
  }
  else {
    unint64_t v20 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  }
  int v21 = *((_DWORD *)v20 + 9);
  if (~v21 <= v21) {
    int v22 = v21;
  }
  else {
    int v22 = ~v21;
  }
  int v23 = v22;
  unint64_t v24 = (void *)(*(void *)a2 + 24 * v22);
  if (v21 < 0) {
    operations_research::Domain::Domain(v30, -v9);
  }
  else {
    operations_research::Domain::Domain(v30, v9);
  }
  operations_research::Domain::IntersectionWith(v24, (const operations_research::Domain *)v30, &v31);
  unint64_t v25 = (unint64_t *)(*(void *)a2 + 24 * v23);
  if (v25 == &v31)
  {
    if (v31) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v26 = (void **)(v25 + 1);
    if (*(unsigned char *)v25) {
      operator delete(*v26);
    }
    *unint64_t v25 = v31;
    *(_OWORD *)uint64_t v26 = *(_OWORD *)__p;
    unint64_t v31 = 0;
  }
  if (((uint64_t)v30[0] & 1) == 0)
  {
    BOOL result = operations_research::Domain::IsEmpty((operations_research::Domain *)(*(void *)a2 + 24 * v23));
    if (!result) {
      return result;
    }
LABEL_44:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v31, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 140);
    uint64_t v28 = (void *)google::LogMessage::stream((google::LogMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: !(*domains)[target_var].IsEmpty() ", 48);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v31);
  }
  operator delete(v30[1]);
  BOOL result = operations_research::Domain::IsEmpty((operations_research::Domain *)(*(void *)a2 + 24 * v23));
  if (result) {
    goto LABEL_44;
  }
  return result;
}

void sub_23CC43954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p)
{
  if (a11) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC43974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PostsolveElement(uint64_t a1, const char *a2)
{
  if (*(_DWORD *)(a1 + 60) == 14) {
    uint64_t v4 = *(uint64_t **)(a1 + 48);
  }
  else {
    uint64_t v4 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  }
  int v6 = *((_DWORD *)v4 + 9);
  int v5 = *((_DWORD *)v4 + 10);
  if (~v6 <= v6) {
    int v7 = *((_DWORD *)v4 + 9);
  }
  else {
    int v7 = ~v6;
  }
  if (~v5 <= v5) {
    int v8 = *((_DWORD *)v4 + 10);
  }
  else {
    int v8 = ~v5;
  }
  int v9 = v8;
  BOOL IsFixed = operations_research::Domain::IsFixed((operations_research::Domain *)(*(void *)a2 + 24 * v8), a2);
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = v7;
  if (!IsFixed)
  {
    BOOL v14 = operations_research::Domain::IsFixed((operations_research::Domain *)(v12 + 24 * v7), v11);
    uint64_t v12 = *(void *)a2;
    if (!v14)
    {
      uint64_t v15 = operations_research::Domain::Min((operations_research::Domain *)(v12 + 24 * v7), v11);
      operations_research::Domain::Domain(&v52, v15);
      uint64_t v17 = (unint64_t *)(*(void *)a2 + 24 * v13);
      if (v17 == &v52)
      {
        if (v52) {
          operator delete(v53[0]);
        }
      }
      else
      {
        int64_t v18 = (void **)(v17 + 1);
        if (*(unsigned char *)v17) {
          operator delete(*v18);
        }
        *uint64_t v17 = v52;
        *(_OWORD *)int64_t v18 = *(_OWORD *)v53;
      }
      if (*(_DWORD *)(a1 + 60) == 14) {
        uint64_t v19 = *(uint64_t **)(a1 + 48);
      }
      else {
        uint64_t v19 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      }
      int v20 = -(int)v15;
      if (v6 >= 0) {
        int v20 = v15;
      }
      int v21 = *(_DWORD *)(v19[3] + 4 * v20);
      if (~v21 <= v21) {
        int v22 = v21;
      }
      else {
        int v22 = ~v21;
      }
      BOOL v23 = operations_research::Domain::IsFixed((operations_research::Domain *)(*(void *)a2 + 24 * v22), v16);
      uint64_t v12 = *(void *)a2;
      if (!v23)
      {
        uint64_t v24 = 24 * v22;
        uint64_t v25 = operations_research::Domain::Min((operations_research::Domain *)(v12 + v24), v11);
        operations_research::Domain::Domain(&v52, v25);
        uint64_t v26 = (unint64_t *)(*(void *)a2 + v24);
        if (v26 == &v52)
        {
          if (v52) {
            operator delete(v53[0]);
          }
        }
        else
        {
          uint64_t v27 = (void **)(v26 + 1);
          if (*(unsigned char *)v26) {
            operator delete(*v27);
          }
          *uint64_t v26 = v52;
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v53;
        }
        uint64_t v12 = *(void *)a2;
      }
    }
  }
  BOOL v28 = operations_research::Domain::IsFixed((operations_research::Domain *)(v12 + 24 * (int)v13), v11);
  uint64_t v30 = *(void *)a2;
  if (!v28)
  {
    uint64_t v42 = operations_research::Domain::Min((operations_research::Domain *)(v30 + 24 * v9), v29);
    for (uint64_t i = 0; ; ++i)
    {
      if (*(_DWORD *)(a1 + 60) == 14)
      {
        unint64_t v44 = *(uint64_t **)(a1 + 48);
        if (i >= *((int *)v44 + 4)) {
          goto LABEL_56;
        }
      }
      else
      {
        unint64_t v44 = &operations_research::sat::_ElementConstraintProto_default_instance_;
        if (i >= dword_26AEE1B68)
        {
LABEL_56:
          LODWORD(v52) = -1;
          int v54 = -1;
          google::MakeCheckOpString<int,int>((int)&v52, (int)&v54, "selected_index_value != -1");
        }
      }
      int v45 = *(_DWORD *)(v44[3] + 4 * i);
      if (~v45 <= v45) {
        int v46 = *(_DWORD *)(v44[3] + 4 * i);
      }
      else {
        int v46 = ~v45;
      }
      uint64_t v47 = operations_research::Domain::Min((operations_research::Domain *)(*(void *)a2 + 24 * v46), v41);
      if ((v45 ^ v5) < 0)
      {
        if (v47 == -v42) {
          goto LABEL_57;
        }
      }
      else if (v47 == v42)
      {
LABEL_57:
        BOOL v48 = (void *)(*(void *)a2 + 24 * (int)v13);
        if ((int)v13 >= 0) {
          int v49 = i;
        }
        else {
          int v49 = -(int)i;
        }
        operations_research::Domain::Domain(v51, v49);
        operations_research::Domain::IntersectionWith(v48, (const operations_research::Domain *)v51, &v52);
        uint64_t v40 = (unint64_t *)(*(void *)a2 + 24 * (int)v13);
        goto LABEL_61;
      }
    }
  }
  int v31 = operations_research::Domain::Min((operations_research::Domain *)(v30 + 24 * (int)v13), v29);
  if (*(_DWORD *)(a1 + 60) == 14) {
    uint64_t v33 = *(uint64_t **)(a1 + 48);
  }
  else {
    uint64_t v33 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  }
  int v34 = -v31;
  if (v6 >= 0) {
    int v34 = v31;
  }
  int v35 = *(_DWORD *)(v33[3] + 4 * v34);
  if (~v35 <= v35) {
    int v36 = *(_DWORD *)(v33[3] + 4 * v34);
  }
  else {
    int v36 = ~v35;
  }
  uint64_t v37 = operations_research::Domain::Min((operations_research::Domain *)(*(void *)a2 + 24 * v36), v32);
  unint64_t v38 = (void *)(*(void *)a2 + 24 * v9);
  if ((v35 ^ v5) >= 0) {
    uint64_t v39 = v37;
  }
  else {
    uint64_t v39 = -v37;
  }
  operations_research::Domain::Domain(v51, v39);
  operations_research::Domain::IntersectionWith(v38, (const operations_research::Domain *)v51, &v52);
  uint64_t v40 = (unint64_t *)(*(void *)a2 + 24 * v9);
LABEL_61:
  if (v40 == &v52)
  {
    if (v52) {
      operator delete(v53[0]);
    }
  }
  else
  {
    uint64_t v50 = (void **)(v40 + 1);
    if (*(unsigned char *)v40) {
      operator delete(*v50);
    }
    unint64_t *v40 = v52;
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v53;
    unint64_t v52 = 0;
  }
  if ((uint64_t)v51[0]) {
    operator delete(v51[1]);
  }
}

void sub_23CC43D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC43D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if (a10) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PostsolveResponse(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a4 + 152);
  BOOL v5 = v4 == 4 || v4 == 2;
  if (v5 && *(_DWORD *)(a4 + 16) == (a3[1] - *a3) >> 2)
  {
    uint64_t v57 = (unsigned int *)(a4 + 16);
    std::vector<operations_research::Domain>::vector(&v64, *(int *)(a2 + 24));
    uint64_t v11 = *a3;
    if (a3[1] != *a3)
    {
      unint64_t v12 = 0;
      do
      {
        unint64_t v13 = *(int *)(v11 + 4 * v12);
        v61[0] = v13;
        int8x16_t v62 = (void *)(0xAAAAAAAAAAAAAAABLL * ((v65 - (unsigned char *)v64) >> 3));
        if ((unint64_t)v62 < v13) {
          google::MakeCheckOpString<int,unsigned long>((int)v61, (int)&v62, "postsolve_mapping[i] <= domains.size()");
        }
        operations_research::Domain::Domain(&v62, *(void *)(*(void *)(a4 + 24) + 8 * v12));
        BOOL v14 = (void **)((char *)v64 + 24 * *(int *)(*a3 + 4 * v12));
        if (v14 == &v62)
        {
          if (v62) {
            operator delete((void *)__p.n128_u64[0]);
          }
        }
        else
        {
          uint64_t v15 = v14 + 1;
          if (*(unsigned char *)v14) {
            operator delete(*v15);
          }
          *BOOL v14 = v62;
          __n128 v10 = __p;
          *(__n128 *)uint64_t v15 = __p;
        }
        ++v12;
        uint64_t v11 = *a3;
      }
      while (v12 < (a3[1] - *a3) >> 2);
    }
    unint64_t v16 = v65;
    if (v65 != v64)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      unint64_t v16 = (char *)v64;
      while (1)
      {
        if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v16[v17]))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + 32) + 8 * v18 + 8);
          operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v20 + 24), *(int *)(v20 + 16), (unint64_t *)&v62, v19);
          int v21 = (char *)v64 + v17;
          if ((char *)v64 + v17 == (char *)&v62)
          {
            if (v62) {
              operator delete((void *)__p.n128_u64[0]);
            }
          }
          else
          {
            int v22 = (void **)(v21 + 8);
            if (*v21) {
              operator delete(*v22);
            }
            *(void *)int v21 = v62;
            *(__n128 *)int v22 = __p;
          }
        }
        if (operations_research::Domain::IsEmpty((operations_research::Domain *)((char *)v64 + v17))) {
          break;
        }
        ++v18;
        unint64_t v16 = (char *)v64;
        BOOL v23 = v65;
        v17 += 24;
        if (0xAAAAAAAAAAAAAAABLL * ((v65 - (unsigned char *)v64) >> 3) <= v18) {
          goto LABEL_32;
        }
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 229);
      int v54 = (void *)google::LogMessage::stream((google::LogMessage *)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Check failed: !domains[i].IsEmpty() ", 36);
LABEL_83:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v62);
    }
    BOOL v23 = v65;
LABEL_32:
    uint64_t v24 = *(void *)(a2 + 120);
    if ((_UNKNOWN *)a2 != &operations_research::sat::_CpModelProto_default_instance_ && v24)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 236);
      unint64_t v55 = (void *)google::LogMessage::stream((google::LogMessage *)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: !mapping_proto.has_objective() ", 45);
      goto LABEL_83;
    }
    int8x16_t v62 = 0;
    __n128 __p = 0uLL;
    uint64_t v25 = v23 - v16;
    if (v25)
    {
      if (v25 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
      int8x16_t v62 = operator new(8 * (((v26 - 1) >> 6) + 1));
      __p.n128_u64[0] = 0;
      __p.n128_u64[1] = ((v26 - 1) >> 6) + 1;
      std::vector<BOOL>::__construct_at_end[abi:ne180100](&v62, v26, 1);
      uint64_t v24 = *(void *)(a2 + 120);
    }
    if ((_UNKNOWN *)a2 != &operations_research::sat::_CpModelProto_default_instance_)
    {
      if (v24)
      {
        uint64_t v27 = *(unsigned int *)(v24 + 16);
        if ((int)v27 >= 1)
        {
          unint64_t v28 = 0;
          uint64_t v29 = *(void *)(v24 + 24);
          uint64_t v30 = *(void *)(v24 + 48);
          int v31 = v62;
          do
          {
            while (1)
            {
              uint64_t v32 = *(int *)(v29 + 4 * v28) >= 0 ? *(void *)(v30 + 8 * v28) : -*(void *)(v30 + 8 * v28);
              unint64_t v33 = v28 >> 6;
              uint64_t v34 = 1 << v28;
              if (v32 < 0) {
                break;
              }
              v31[v33] |= v34;
              if (v27 == ++v28) {
                goto LABEL_47;
              }
            }
            v31[v33] &= ~v34;
            ++v28;
          }
          while (v27 != v28);
        }
      }
    }
LABEL_47:
    uint64_t v35 = *(unsigned int *)(a2 + 48);
    if ((int)v35 >= 1)
    {
      do
      {
        uint64_t v37 = *(void *)(*(void *)(a2 + 56) + 8 * (v35 - 1) + 8);
        uint64_t v38 = *(int *)(v37 + 16);
        if (v38)
        {
          uint64_t v39 = *(int **)(v37 + 24);
          uint64_t v40 = 4 * v38;
          while (1)
          {
            unint64_t v41 = *v39;
            int v42 = ~v41 <= (int)v41 ? *v39 : ~v41;
            if (operations_research::Domain::Min((operations_research::Domain *)((char *)v64 + 24 * v42), v9) == v41 >> 31) {
              break;
            }
            ++v39;
            v40 -= 4;
            if (!v40) {
              goto LABEL_58;
            }
          }
        }
        else
        {
LABEL_58:
          switch(*(_DWORD *)(v37 + 60))
          {
            case 3:
              operations_research::sat::PostsolveClause(v37, (const char *)&v64);
              break;
            case 9:
              operations_research::sat::PostsolveIntMax(v37, (const char *)&v64);
              break;
            case 0xC:
              operations_research::sat::PostsolveLinear(v37, (const char *)&v62, &v64, v10);
              break;
            case 0xE:
              operations_research::sat::PostsolveElement(v37, (const char *)&v64);
              break;
            default:
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v61, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 283);
              uint64_t v56 = (void *)google::LogMessage::stream((google::LogMessage *)v61);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Unsupported constraint: ", 24);
              google::protobuf::Message::ShortDebugString(&v60);
          }
        }
      }
      while (v35-- > 1);
    }
    *uint64_t v57 = 0;
    unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v65 - (unsigned char *)v64) >> 3);
    v60.__r_.__value_.__r.__words[0] = a1;
    if (v59 < a1) {
      google::MakeCheckOpString<long long,unsigned long>((int)&v60, (int)&v59, "num_variables_in_original_model <= domains.size()");
    }
    if (a1 >= 1)
    {
      uint64_t v43 = 0;
      unint64_t v44 = 0;
      while (1)
      {
        int v45 = (operations_research::Domain *)((char *)v64 + v43);
        if (((*(void *)((char *)v62 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1) == 0) {
          break;
        }
        uint64_t v46 = operations_research::Domain::Min(v45, v9);
        unsigned int v47 = *(_DWORD *)(a4 + 16);
        unsigned int v48 = v47 + 1;
        if (v47 == *(_DWORD *)(a4 + 20)) {
          goto LABEL_68;
        }
LABEL_65:
        *(void *)(*(void *)(a4 + 24) + 8 * v47) = v46;
        *(_DWORD *)(a4 + 16) = v48;
        ++v44;
        v43 += 24;
        if (a1 == v44) {
          goto LABEL_71;
        }
      }
      uint64_t v46 = operations_research::Domain::Max(v45, v9);
      unsigned int v47 = *(_DWORD *)(a4 + 16);
      unsigned int v48 = v47 + 1;
      if (v47 != *(_DWORD *)(a4 + 20)) {
        goto LABEL_65;
      }
LABEL_68:
      google::protobuf::RepeatedField<long long>::Reserve(v57, v47 + 1);
      goto LABEL_65;
    }
LABEL_71:
    if (v62) {
      operator delete(v62);
    }
    int v49 = (char *)v64;
    if (v64)
    {
      uint64_t v50 = (void **)v65;
      int v51 = v64;
      if (v65 != v64)
      {
        unint64_t v52 = (void **)v65;
        do
        {
          char v53 = *((unsigned char *)v52 - 24);
          v52 -= 3;
          if (v53) {
            operator delete(*(v50 - 2));
          }
          uint64_t v50 = v52;
        }
        while (v52 != (void **)v49);
        int v51 = v64;
      }
      int v65 = v49;
      operator delete(v51);
    }
  }
}

void sub_23CC443DC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC443E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23)
{
  if (__p)
  {
    operator delete(__p);
    std::vector<operations_research::Domain>::~vector[abi:ne180100](&a23);
    _Unwind_Resume(a1);
  }
  std::vector<operations_research::Domain>::~vector[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void *std::vector<operations_research::Domain>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 24 * a2;
    BOOL v5 = operator new(24 * a2);
    *a1 = v5;
    a1[1] = v5;
    int v6 = &v5[3 * a2];
    a1[2] = v6;
    if ((unint64_t)(v4 - 24) >= 0x18)
    {
      unint64_t v8 = (v4 - 24) / 0x18uLL + 1;
      int v7 = &v5[3 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v9 = v8 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *BOOL v5 = 0;
        v5[3] = 0;
        v5 += 6;
        v9 -= 2;
      }
      while (v9);
      if (v8 == (v8 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_9;
      }
    }
    else
    {
      int v7 = v5;
    }
    do
    {
      void *v7 = 0;
      v7 += 3;
    }
    while (v7 != v6);
LABEL_9:
    a1[1] = v6;
  }
  return a1;
}

void sub_23CC44608(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<operations_research::Domain>::vector((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v17 = (uint64_t)&v9[24 * v5];
  __n128 v10 = &v9[24 * v8];
  *(void *)uint64_t v17 = *(void *)a2;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)a2 = 0;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>((uint64_t)(a1 + 2), v4, v4, v3, v3, v17, v17);
  unint64_t v12 = (void **)*a1;
  uint64_t v11 = (void **)a1[1];
  *a1 = v13;
  a1[1] = v17 + 24;
  a1[2] = (uint64_t)v10;
  if (v11 != v12)
  {
    BOOL v14 = v11;
    do
    {
      char v15 = *((unsigned char *)v14 - 24);
      v14 -= 3;
      if (v15) {
        operator delete(*(v11 - 2));
      }
      uint64_t v11 = v14;
    }
    while (v14 != v12);
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 24;
}

void sub_23CC4478C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<operations_research::Domain>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::Domain>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 24;
      *(void *)(a1 + 16) = v2 - 24;
      if (*(unsigned char *)(v2 - 24))
      {
        operator delete(*(void **)(v2 - 16));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    while (1)
    {
      while (1)
      {
        *(void *)(v7 - 24) = 0;
        unint64_t v11 = *(void *)(v9 - 24);
        v9 -= 24;
        unint64_t v10 = v11;
        if (v11) {
          break;
        }
        *(void *)(v7 - 24) = v10;
        *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
        uint64_t v7 = v19 - 24;
        v19 -= 24;
        a3 = v9;
        if (v9 == a5) {
          return v18;
        }
      }
      unint64_t v12 = *(long long **)(a3 - 16);
      unint64_t v13 = v10 >> 1;
      if (v10 >= 4) {
        break;
      }
      if (v10 >= 2)
      {
        BOOL v14 = (_OWORD *)(v7 - 16);
        do
        {
LABEL_11:
          long long v16 = *v12++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        uint64_t v15 = *(void *)(v7 - 24);
        goto LABEL_13;
      }
      uint64_t v15 = 0;
LABEL_13:
      *(void *)(v7 - 24) = v15 + (v10 & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v7 = v19 - 24;
      v19 -= 24;
      a3 = v9;
      if (v9 == a5) {
        return v18;
      }
    }
    if (v10 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v14 = operator new(16 * v13);
    *(void *)(v7 - 16) = v14;
    *(void *)(v7 - 8) = v13;
    *(void *)(v7 - 24) = 1;
    goto LABEL_11;
  }
  return a6;
}

void sub_23CC4493C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(v9 - 24)) {
    operator delete(*(void **)(v9 - 16));
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(unsigned char *)v3) {
        operator delete(*(void **)(v3 + 8));
      }
      v3 += 24;
    }
  }
  return a1;
}

void google::MakeCheckOpString<long long,unsigned long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CC44A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*((void *)this + 2) + 48);
  uint64_t v3 = *(int *)(v2 + 48);
  int v31 = 0;
  uint64_t v32 = 0;
  __n128 __p = 0;
  if (!v3) {
    goto LABEL_19;
  }
  if ((v3 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (char *)operator new(4 * v3);
  uint64_t v5 = &v4[4 * v3];
  __n128 __p = v4;
  uint64_t v32 = v5;
  memset(v4, 255, 4 * v3);
  uint64_t v7 = 0;
  int v8 = 0;
  int v31 = v5;
  do
  {
    uint64_t v9 = *(void *)(*(void *)(*((void *)this + 2) + 48) + 56);
    uint64_t v10 = *(void *)(v9 + 8 * v7 + 8);
    int v11 = *(_DWORD *)(v10 + 60);
    if (!v11) {
      goto LABEL_5;
    }
    if (v11 == 19) {
      *((_DWORD *)__p + v7) = v8;
    }
    unint64_t v12 = *(google::protobuf::internal **)(v9 + 8 * v8 + 8);
    if ((google::protobuf::internal *)v10 != v12)
    {
      uint64_t v13 = *((void *)v12 + 1);
      BOOL v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v13)
      {
        BOOL v14 = (void *)*v14;
        uint64_t v17 = *(void *)(v10 + 8);
        long long v16 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) == 0)
        {
LABEL_12:
          if (v14 == v16) {
            goto LABEL_4;
          }
LABEL_13:
          google::protobuf::internal::GenericSwap(v12, (google::protobuf::Message *)v10, v6);
          ++v8;
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v10 + 8);
        long long v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        if ((v15 & 1) == 0) {
          goto LABEL_12;
        }
      }
      if (v14 == (void *)*v16)
      {
LABEL_4:
        operations_research::sat::ConstraintProto::InternalSwap((__n128 *)v12, (__n128 *)v10);
        ++v8;
        goto LABEL_5;
      }
      goto LABEL_13;
    }
    ++v8;
LABEL_5:
    ++v7;
  }
  while (v3 != v7);
  uint64_t v2 = *(void *)(*((void *)this + 2) + 48);
  uint64_t v18 = (v3 - v8);
  if ((int)v18 >= 1)
  {
    uint64_t v22 = 8 * v8 + 8;
    uint64_t v23 = v18;
    do
    {
      uint64_t v24 = *(operations_research::sat::ConstraintProto **)(*(void *)(v2 + 56) + v22);
      if (v24) {
        BOOL v25 = *(void *)(v2 + 40) == 0;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25)
      {
        operations_research::sat::ConstraintProto::~ConstraintProto(v24);
        MEMORY[0x23ECF2BC0]();
      }
      v22 += 8;
      --v23;
    }
    while (v23);
    google::protobuf::internal::RepeatedPtrFieldBase::CloseGap(v2 + 40, v8, v18);
    uint64_t v26 = *(void *)(*((void *)this + 2) + 48);
    uint64_t v27 = *(void *)(v26 + 56);
    if (v27) {
      uint64_t v20 = (uint64_t *)(v27 + 8);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(int *)(v26 + 48);
    if (v21) {
      goto LABEL_37;
    }
  }
  else
  {
LABEL_19:
    uint64_t v19 = *(void *)(v2 + 56);
    if (v19) {
      uint64_t v20 = (uint64_t *)(v19 + 8);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(int *)(v2 + 48);
    if (!v21) {
      goto LABEL_43;
    }
LABEL_37:
    uint64_t v28 = 8 * v21;
    do
    {
      uint64_t v29 = *v20;
      v33[0] = &unk_26F0C1000;
      v33[1] = &__p;
      uint64_t v34 = v33;
      operations_research::sat::ApplyToAllIntervalIndices((uint64_t)v33, v29);
      if (v34 == v33)
      {
        (*(void (**)(void *))(v33[0] + 32))(v33);
      }
      else if (v34)
      {
        (*(void (**)(void))(*v34 + 40))();
      }
      ++v20;
      v28 -= 8;
    }
    while (v28);
  }
LABEL_43:
  if (__p)
  {
    int v31 = __p;
    operator delete(__p);
  }
}

void sub_23CC44D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<void ()(int *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

BOOL operations_research::sat::CpModelPresolver::PresolveEnforcementLiteral(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504)) {
    return 0;
  }
  uint64_t v4 = *((int *)a2 + 4);
  if (!v4) {
    return 0;
  }
  int v6 = 0;
  uint64_t v7 = (unsigned int *)*((void *)a2 + 3);
  uint64_t v8 = 4 * v4;
  do
  {
    uint64_t v9 = (const char *)*v7;
    BOOL IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)this + 2), v9);
    uint64_t v11 = *((void *)this + 2);
    if (IsTrue)
    {
      __n128 __p = operator new(0x20uLL);
      long long v22 = xmmword_23CE7ED90;
      strcpy((char *)__p, "true enforcement literal");
      operations_research::sat::PresolveContext::UpdateRuleStats(v11, (uint64_t)&__p);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      BOOL IsFalse = operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), v9);
      uint64_t v13 = *((void *)this + 2);
      if (IsFalse)
      {
        __n128 __p = operator new(0x20uLL);
        long long v22 = xmmword_23CE7EC90;
        strcpy((char *)__p, "false enforcement literal");
        operations_research::sat::PresolveContext::UpdateRuleStats(v13, (uint64_t)&__p);
        if (SHIBYTE(v22) < 0) {
          operator delete(__p);
        }
LABEL_30:
        operations_research::sat::ConstraintProto::Clear(a2);
        return 1;
      }
      BOOL IsUniqueAndRemovable = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), (int)v9);
      uint64_t v15 = *((void *)this + 2);
      if (IsUniqueAndRemovable)
      {
        __n128 __p = operator new(0x20uLL);
        long long v22 = xmmword_23CE7ECF0;
        strcpy((char *)__p, "enforcement literal not used");
        operations_research::sat::PresolveContext::UpdateRuleStats(v15, (uint64_t)&__p);
        if (SHIBYTE(v22) < 0) {
          operator delete(__p);
        }
        if ((operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), v9) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 111);
          uint64_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: context_->SetLiteralToFalse(literal) ", 51);
LABEL_32:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
        }
        goto LABEL_30;
      }
      if (operations_research::sat::PresolveContext::VariableWithCostIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), (int)v9))
      {
        long long v16 = (uint64_t *)(*((void *)this + 2) + 536);
        int v17 = ~v9 <= (int)v9 ? (int)v9 : ~v9;
        LODWORD(__p) = v17;
        if ((int)v9 >= 0 != *(void *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>(v16, (int *)&__p) < 1)
        {
          uint64_t v18 = *((void *)this + 2);
          __n128 __p = operator new(0x30uLL);
          long long v22 = xmmword_23CE7ECB0;
          strcpy((char *)__p, "enforcement literal with unique direction");
          operations_research::sat::PresolveContext::UpdateRuleStats(v18, (uint64_t)&__p);
          if (SHIBYTE(v22) < 0) {
            operator delete(__p);
          }
          if ((operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), v9) & 1) == 0)
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 124);
            uint64_t v19 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: context_->SetLiteralToFalse(literal) ", 51);
            goto LABEL_32;
          }
          goto LABEL_30;
        }
      }
      *(_DWORD *)(*((void *)a2 + 3) + 4 * v6++) = v9;
    }
    ++v7;
    v8 -= 4;
  }
  while (v8);
  if (*((int *)a2 + 4) >= 1) {
    *((_DWORD *)a2 + 4) = v6;
  }
  return v6 != v4;
}

void sub_23CC4511C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC45144(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC4514C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  uint64_t v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v10 = v7 & v8;
    uint64_t v11 = *(void *)(v5 + v10);
    unint64_t v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v2 += 8;
    unint64_t v7 = v2 + v10;
  }
  while (1)
  {
    unint64_t v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(_DWORD *)(v6 + 16 * v13) == v3) {
      break;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_5;
    }
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    uint64_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
    long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
  }
  return v6 + 16 * v13 + 8;
}

void sub_23CC45294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::CpModelPresolver::PresolveBoolXor(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504) || *((_DWORD *)a2 + 4))
  {
    char v3 = 0;
    return v3 & 1;
  }
  if (*((_DWORD *)a2 + 15) != 5)
  {
    uint64_t v6 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    uint64_t v7 = dword_26AEE17F8;
    if (dword_26AEE17F8) {
      goto LABEL_7;
    }
LABEL_35:
    int v8 = 0;
    char v3 = 0;
    goto LABEL_46;
  }
  uint64_t v6 = (uint64_t *)*((void *)a2 + 6);
  uint64_t v7 = *((int *)v6 + 4);
  if (!v7) {
    goto LABEL_35;
  }
LABEL_7:
  int v8 = 0;
  int v30 = 0;
  char v3 = 0;
  uint64_t v9 = (int *)v6[3];
  uint64_t v10 = 4 * v7;
  unsigned int v29 = 0x80000000;
  do
  {
    uint64_t v11 = (const char *)*v9;
    if (operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), *v9)&& (uint64_t v12 = *((void *)this + 2), __p = operator new(0x28uLL), v33 = xmmword_23CE7E400, strcpy((char *)__p, "TODO BOOL_xor: remove constraint"), operations_research::sat::PresolveContext::UpdateRuleStats(v12, (uint64_t)&__p), SHIBYTE(v33) < 0))
    {
      operator delete(__p);
      BOOL IsFalse = operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), v11);
      BOOL v14 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
      if (IsFalse)
      {
LABEL_13:
        __n128 __p = operator new(0x20uLL);
        long long v33 = xmmword_23CE7E3F0;
        strcpy((char *)__p, "BOOL_xor: remove false literal");
        operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v14, (uint64_t)&__p);
        if (SHIBYTE(v33) < 0) {
          operator delete(__p);
        }
        char v3 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      BOOL v13 = operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), v11);
      BOOL v14 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
      if (v13) {
        goto LABEL_13;
      }
    }
    if (operations_research::sat::PresolveContext::LiteralIsTrue(v14, v11))
    {
      ++v30;
      unsigned int v29 = v11;
    }
    else
    {
      if (*((_DWORD *)a2 + 15) == 5)
      {
        unint64_t v16 = *((void *)a2 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 5;
        uint64_t v17 = *((void *)a2 + 1);
        uint64_t v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if (v17) {
          uint64_t v18 = *(google::protobuf::Arena **)v18;
        }
        unint64_t v16 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v18);
        *((void *)a2 + 6) = v16;
      }
      *(_DWORD *)(*(void *)(v16 + 24) + 4 * v8++) = v11;
    }
LABEL_9:
    ++v9;
    v10 -= 4;
  }
  while (v10);
  if (v8 == 1)
  {
    uint64_t v21 = *((void *)this + 2);
    __n128 __p = operator new(0x28uLL);
    long long v33 = xmmword_23CE85CB0;
    strcpy((char *)__p, "TODO BOOL_xor: one active literal");
    operations_research::sat::PresolveContext::UpdateRuleStats(v21, (uint64_t)&__p);
    int v19 = v30;
    if (SHIBYTE(v33) < 0) {
      operator delete(__p);
    }
    int v8 = 1;
    if ((v30 & 0x80000001) != 1) {
      goto LABEL_39;
    }
LABEL_30:
    LODWORD(__p) = v29;
    LODWORD(v31) = 0x80000000;
    if (v29 == 0x80000000) {
      google::MakeCheckOpString<int,int>((int)&__p, (int)&v31, "true_literal != kint32min");
    }
    if (*((_DWORD *)a2 + 15) == 5)
    {
      *(_DWORD *)(*(void *)(*((void *)a2 + 6) + 24) + 4 * v8++) = v29;
      if (v19 >= 2) {
        goto LABEL_40;
      }
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 5;
      uint64_t v23 = *((void *)a2 + 1);
      uint64_t v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if (v23) {
        uint64_t v24 = *(google::protobuf::Arena **)v24;
      }
      unint64_t v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v24);
      *((void *)a2 + 6) = v25;
      *(_DWORD *)(*(void *)(v25 + 24) + 4 * v8++) = v29;
      if (v19 >= 2) {
        goto LABEL_40;
      }
    }
  }
  else
  {
    int v19 = v30;
    if (v8 == 2)
    {
      uint64_t v20 = *((void *)this + 2);
      __n128 __p = operator new(0x28uLL);
      long long v33 = xmmword_23CE834D0;
      strcpy((char *)__p, "TODO BOOL_xor: two active literals");
      operations_research::sat::PresolveContext::UpdateRuleStats(v20, (uint64_t)&__p);
      if (SHIBYTE(v33) < 0) {
        operator delete(__p);
      }
      int v8 = 2;
    }
    if ((v30 & 0x80000001) == 1) {
      goto LABEL_30;
    }
LABEL_39:
    if (v19 >= 2)
    {
LABEL_40:
      uint64_t v22 = *((void *)this + 2);
      __n128 __p = operator new(0x30uLL);
      long long v33 = xmmword_23CE85CC0;
      strcpy((char *)__p, "BOOL_xor: remove even number of true literals");
      operations_research::sat::PresolveContext::UpdateRuleStats(v22, (uint64_t)&__p);
      if (SHIBYTE(v33) < 0) {
        operator delete(__p);
      }
      char v3 = 1;
    }
  }
LABEL_46:
  if (*((_DWORD *)a2 + 15) == 5)
  {
    unint64_t v26 = *((void *)a2 + 6);
    if (*(int *)(v26 + 16) < 1) {
      return v3 & 1;
    }
LABEL_51:
    *(_DWORD *)(v26 + 16) = v8;
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 5;
    uint64_t v27 = *((void *)a2 + 1);
    uint64_t v28 = (google::protobuf::Arena **)(v27 & 0xFFFFFFFFFFFFFFFELL);
    if (v27)
    {
      unint64_t v26 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v28);
      *((void *)a2 + 6) = v26;
      if (*(int *)(v26 + 16) < 1) {
        return v3 & 1;
      }
      goto LABEL_51;
    }
    unint64_t v26 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v28);
    *((void *)a2 + 6) = v26;
    if (*(int *)(v26 + 16) >= 1) {
      goto LABEL_51;
    }
  }
  return v3 & 1;
}

void sub_23CC45748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC45750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveBoolOr(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (*(unsigned char *)(v2 + 504)) {
    goto LABEL_2;
  }
  uint64_t v6 = this;
  BOOL v100 = (unsigned int *)((char *)a2 + 16);
  if (*((_DWORD *)a2 + 4))
  {
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_23CE7FBD0;
    strcpy((char *)__p[0], "BOOL_or: removed enforcement literal");
    operations_research::sat::PresolveContext::UpdateRuleStats(v2, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *((int *)a2 + 4);
    if (v7)
    {
      int v8 = (int *)*((void *)a2 + 3);
      for (uint64_t i = 4 * v7; i; i -= 4)
      {
        int v10 = *v8;
        if (*((_DWORD *)a2 + 15) == 3)
        {
          unint64_t v11 = *((void *)a2 + 6);
          uint64_t v13 = *(unsigned int *)(v11 + 16);
          uint64_t v12 = (unsigned int *)(v11 + 16);
          int v14 = v13 + 1;
          if (v13 != *(_DWORD *)(v11 + 20)) {
            goto LABEL_10;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 3;
          uint64_t v15 = *((void *)a2 + 1);
          unint64_t v16 = (google::protobuf::Arena *)(v15 & 0xFFFFFFFFFFFFFFFELL);
          if (v15) {
            unint64_t v16 = *(google::protobuf::Arena **)v16;
          }
          unint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v16);
          *((void *)a2 + 6) = v11;
          uint64_t v13 = *(unsigned int *)(v11 + 16);
          uint64_t v12 = (unsigned int *)(v11 + 16);
          int v14 = v13 + 1;
          if (v13 != *(_DWORD *)(v11 + 20)) {
            goto LABEL_10;
          }
        }
        google::protobuf::RepeatedField<int>::Reserve(v12, v14);
LABEL_10:
        *(_DWORD *)(*(void *)(v11 + 24) + 4 * v13) = ~v10;
        *(_DWORD *)(v11 + 16) = v14;
        ++v8;
      }
    }
    unsigned int *v100 = 0;
    uint64_t v2 = *((void *)v6 + 2);
  }
  *(void *)(v2 + 136) = *(void *)(v2 + 128);
  unint64_t v17 = *(void *)(v2 + 224);
  if (v17 < 0x80)
  {
    if (v17)
    {
      *(void *)(v2 + 216) = 0;
      memset(*(void **)(v2 + 200), 128, v17 + 8);
      *(unsigned char *)(*(void *)(v2 + 200) + *(void *)(v2 + 224)) = -1;
      unint64_t v17 = *(void *)(v2 + 224);
      uint64_t v18 = v17 - (v17 >> 3);
      if (v17 == 7) {
        uint64_t v18 = 6;
      }
      *(void *)(v2 + 240) = v18 - *(void *)(v2 + 216);
    }
  }
  else
  {
    operator delete(*(void **)(v2 + 200));
    unint64_t v17 = 0;
    *(void *)(v2 + 240) = 0;
    *(void *)(v2 + 200) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(v2 + 208) = 0;
    *(void *)(v2 + 216) = 0;
    *(void *)(v2 + 224) = 0;
  }
  int v19 = *(unint64_t **)(v2 + 232);
  if (!v19)
  {
    if (*((_DWORD *)a2 + 15) == 3) {
      goto LABEL_27;
    }
LABEL_88:
    uint64_t v20 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    unint64_t v101 = a2;
    uint64_t v21 = dword_26AEE17F8;
    if (dword_26AEE17F8) {
      goto LABEL_28;
    }
LABEL_89:
    char v22 = 0;
    uint64_t v72 = *((void *)v6 + 2);
    unint64_t v73 = *(void *)(v72 + 224);
    if (v73 < 0x80) {
      goto LABEL_90;
    }
LABEL_78:
    operator delete(*(void **)(v72 + 200));
    unint64_t v73 = 0;
    *(void *)(v72 + 240) = 0;
    *(void *)(v72 + 200) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(v72 + 208) = 0;
    *(void *)(v72 + 216) = 0;
    *(void *)(v72 + 224) = 0;
    uint64_t v74 = (uint64_t)v101;
LABEL_94:
    BOOL v76 = *(unint64_t **)(v72 + 232);
    if (v76)
    {
      v76[1] = 0;
      unint64_t *v76 = v73;
      v76[4] = 0;
      v76[2] = 0;
      uint64_t v77 = *((void *)v6 + 2);
      uint64_t v78 = *(void *)(v77 + 128);
      uint64_t v79 = *(void *)(v77 + 136);
      if (v78 != v79) {
        goto LABEL_96;
      }
    }
    else
    {
      uint64_t v77 = *((void *)v6 + 2);
      uint64_t v78 = *(void *)(v77 + 128);
      uint64_t v79 = *(void *)(v77 + 136);
      if (v78 != v79)
      {
LABEL_96:
        uint64_t v80 = (v79 - v78) >> 2;
        if (v80 == 2)
        {
          HIBYTE(__p[2]) = 21;
          strcpy((char *)__p, "BOOL_or: implications");
          operations_research::sat::PresolveContext::UpdateRuleStats(v77, (uint64_t)__p);
          char v81 = v22;
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          int v82 = ~**(_DWORD **)(*((void *)v6 + 2) + 128);
          uint64_t v83 = *(unsigned int *)(v74 + 16);
          if (v83 == *(_DWORD *)(v74 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve(v100, v83 + 1);
          }
          *(_DWORD *)(*(void *)(v74 + 24) + 4 * v83) = v82;
          *(_DWORD *)(v74 + 16) = v83 + 1;
          if (*(_DWORD *)(v74 + 60) == 4)
          {
            unint64_t v84 = *(void *)(v74 + 48);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v74);
            *(_DWORD *)(v74 + 60) = 4;
            uint64_t v95 = *(void *)(v74 + 8);
            std::string v96 = (google::protobuf::Arena *)(v95 & 0xFFFFFFFFFFFFFFFELL);
            if (v95) {
              std::string v96 = *(google::protobuf::Arena **)v96;
            }
            unint64_t v84 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v96);
            *(void *)(v74 + 48) = v84;
          }
          int v97 = *(_DWORD *)(*(void *)(*((void *)v6 + 2) + 128) + 4);
          uint64_t v98 = *(unsigned int *)(v84 + 16);
          if (v98 == *(_DWORD *)(v84 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v84 + 16), v98 + 1);
          }
          *(_DWORD *)(*(void *)(v84 + 24) + 4 * v98) = v97;
          *(_DWORD *)(v84 + 16) = v98 + 1;
          char IsUnsat = v81;
          return IsUnsat & 1;
        }
        if (v80 == 1)
        {
          __p[0] = operator new(0x20uLL);
          *(_OWORD *)&__p[1] = xmmword_23CE7EC90;
          strcpy((char *)__p[0], "BOOL_or: only one literal");
          operations_research::sat::PresolveContext::UpdateRuleStats(v77, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          if ((operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)v6 + 2), **(_DWORD **)(*((void *)v6 + 2) + 128)) & 1) == 0)goto LABEL_122; {
LABEL_101:
          }
          operations_research::sat::ConstraintProto::Clear((operations_research::sat::ConstraintProto *)v74);
          char IsUnsat = 1;
          return IsUnsat & 1;
        }
        if ((v22 & 1) == 0)
        {
LABEL_2:
          char IsUnsat = 0;
          return IsUnsat & 1;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "BOOL_or: fixed literals");
        operations_research::sat::PresolveContext::UpdateRuleStats(v77, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_or((operations_research::sat::ConstraintProto *)v74)
                  + 16) = 0;
        uint64_t v85 = *((void *)v6 + 2);
        uint64_t v86 = *(int **)(v85 + 128);
        uint64_t v87 = *(int **)(v85 + 136);
        if (v86 == v87) {
          goto LABEL_122;
        }
        while (1)
        {
          int v88 = *v86;
          if (*(_DWORD *)(v74 + 60) == 3)
          {
            unint64_t v89 = *(void *)(v74 + 48);
            uint64_t v91 = *(unsigned int *)(v89 + 16);
            BOOL v90 = (unsigned int *)(v89 + 16);
            int v92 = v91 + 1;
            if (v91 != *(_DWORD *)(v89 + 20)) {
              goto LABEL_114;
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v74);
            *(_DWORD *)(v74 + 60) = 3;
            uint64_t v93 = *(void *)(v74 + 8);
            uint64_t v94 = (google::protobuf::Arena *)(v93 & 0xFFFFFFFFFFFFFFFELL);
            if (v93) {
              uint64_t v94 = *(google::protobuf::Arena **)v94;
            }
            unint64_t v89 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v94);
            *(void *)(v74 + 48) = v89;
            uint64_t v91 = *(unsigned int *)(v89 + 16);
            BOOL v90 = (unsigned int *)(v89 + 16);
            int v92 = v91 + 1;
            if (v91 != *(_DWORD *)(v89 + 20)) {
              goto LABEL_114;
            }
          }
          google::protobuf::RepeatedField<int>::Reserve(v90, v92);
LABEL_114:
          *(_DWORD *)(*(void *)(v89 + 24) + 4 * v91) = v88;
          *(_DWORD *)(v89 + 16) = v92;
          ++v86;
          char IsUnsat = 1;
          if (v86 == v87) {
            return IsUnsat & 1;
          }
        }
      }
    }
    HIBYTE(__p[2]) = 14;
    strcpy((char *)__p, "BOOL_or: empty");
    operations_research::sat::PresolveContext::UpdateRuleStats(v77, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v99 = *((void *)v6 + 2);
    HIBYTE(__p[2]) = 0;
    LOBYTE(__p[0]) = 0;
    char IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v99, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return IsUnsat & 1;
  }
  v19[1] = 0;
  *int v19 = v17;
  v19[4] = 0;
  v19[2] = 0;
  if (*((_DWORD *)a2 + 15) != 3) {
    goto LABEL_88;
  }
LABEL_27:
  uint64_t v20 = (uint64_t *)*((void *)a2 + 6);
  unint64_t v101 = a2;
  uint64_t v21 = *((int *)v20 + 4);
  if (!v21) {
    goto LABEL_89;
  }
LABEL_28:
  char v22 = 0;
  uint64_t v23 = (unsigned int *)v20[3];
  uint64_t v24 = &v23[v21];
  std::string v102 = v6;
  while (1)
  {
    unint64_t v25 = (const char *)*v23;
    if (operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)v6 + 2), v25))
    {
      goto LABEL_29;
    }
    BOOL IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v6 + 2), v25);
    uint64_t v27 = (operations_research::sat::PresolveContext *)*((void *)v6 + 2);
    if (IsTrue)
    {
      HIBYTE(__p[2]) = 20;
      strcpy((char *)__p, "BOOL_or: always true");
      operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v27, (uint64_t)__p);
LABEL_85:
      uint64_t v74 = (uint64_t)v101;
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_101;
    }
    BOOL IsUniqueAndRemovable = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(v27, (int)v25);
    unsigned int v29 = (void *)*((void *)v6 + 2);
    if (IsUniqueAndRemovable) {
      break;
    }
    uint64_t v30 = 0;
    unint64_t v31 = v29[25];
    int v32 = ~v25;
    unint64_t v33 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v32)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v32));
    unint64_t v34 = (v31 >> 12) ^ (v33 >> 7);
    uint64_t v35 = v29[28];
    uint64_t v36 = 0x101010101010101 * (v33 & 0x7F);
    while (1)
    {
      uint64_t v37 = v34 & v35;
      uint64_t v38 = *(void *)(v31 + v37);
      unint64_t v39 = ((v38 ^ v36) - 0x101010101010101) & ~(v38 ^ v36) & 0x8080808080808080;
      if (v39) {
        break;
      }
LABEL_37:
      if ((v38 & (~v38 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_40;
      }
      v30 += 8;
      unint64_t v34 = v30 + v37;
    }
    while (1)
    {
      unint64_t v40 = (v37 + (__clz(__rbit64(v39)) >> 3)) & v35;
      if (*(_DWORD *)(v29[26] + 4 * v40) == v32) {
        break;
      }
      v39 &= v39 - 1;
      if (!v39) {
        goto LABEL_37;
      }
    }
    if (v40 != v35)
    {
      HIBYTE(__p[2]) = 20;
      strcpy((char *)__p, "BOOL_or: always true");
      operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v29, (uint64_t)__p);
      goto LABEL_85;
    }
LABEL_40:
    uint64_t v41 = 0;
    unint64_t v42 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v25)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + (int)v25));
    unint64_t v43 = (v31 >> 12) ^ (v42 >> 7);
    uint64_t v44 = 0x101010101010101 * (v42 & 0x7F);
    for (unint64_t j = v43; ; unint64_t j = v41 + v46)
    {
      unint64_t v46 = j & v35;
      uint64_t v47 = *(void *)(v31 + v46);
      unint64_t v48 = ((v47 ^ v44) - 0x101010101010101) & ~(v47 ^ v44) & 0x8080808080808080;
      if (v48) {
        break;
      }
LABEL_44:
      if ((v47 & (~v47 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_47;
      }
      v41 += 8;
    }
    while (1)
    {
      unint64_t v49 = (v46 + (__clz(__rbit64(v48)) >> 3)) & v35;
      if (*(_DWORD *)(v29[26] + 4 * v49) == v25) {
        break;
      }
      v48 &= v48 - 1;
      if (!v48) {
        goto LABEL_44;
      }
    }
    if (v49 == v35)
    {
LABEL_47:
      for (k = 0; ; unint64_t v43 = k + v51)
      {
        unint64_t v51 = v43 & v35;
        uint64_t v52 = *(void *)(v31 + v51);
        unint64_t v53 = ((v52 ^ v44) - 0x101010101010101) & ~(v52 ^ v44) & 0x8080808080808080;
        if (v53) {
          break;
        }
LABEL_51:
        if ((v52 & (~v52 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v29[26]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v29 + 25, v42)) = v25;
          unsigned int v29 = (void *)*((void *)v6 + 2);
          goto LABEL_54;
        }
        k += 8;
      }
      while (*(_DWORD *)(v29[26] + 4 * ((v51 + (__clz(__rbit64(v53)) >> 3)) & v35)) != v25)
      {
        v53 &= v53 - 1;
        if (!v53) {
          goto LABEL_51;
        }
      }
LABEL_54:
      unint64_t v55 = (char *)v29[17];
      unint64_t v54 = v29[18];
      if ((unint64_t)v55 >= v54)
      {
        uint64_t v57 = (char *)v29[16];
        uint64_t v58 = (v55 - v57) >> 2;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v60 = v54 - (void)v57;
        if (v60 >> 1 > v59) {
          unint64_t v59 = v60 >> 1;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        unint64_t v103 = v59;
        if (v59)
        {
          if (v59 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v61 = operator new(4 * v59);
          int8x16_t v62 = &v61[4 * v58];
          *int8x16_t v62 = v25;
          uint64_t v56 = (uint64_t)(v62 + 1);
          if (v55 == v57) {
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v61 = 0;
          int8x16_t v62 = (_DWORD *)(4 * v58);
          *(_DWORD *)(4 * v58) = v25;
          uint64_t v56 = 4 * v58 + 4;
          if (v55 == v57)
          {
LABEL_73:
            v29[16] = v62;
            v29[17] = v56;
            v29[18] = &v61[4 * v103];
            if (v57) {
              operator delete(v57);
            }
            uint64_t v6 = v102;
            goto LABEL_76;
          }
        }
        unint64_t v63 = v55 - 4 - v57;
        if (v63 < 0x2C) {
          goto LABEL_138;
        }
        if ((unint64_t)(v57 - v61) < 0x20) {
          goto LABEL_138;
        }
        uint64_t v64 = (v63 >> 2) + 1;
        uint64_t v65 = 4 * (v64 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v66 = &v55[-v65];
        int8x16_t v62 = (_DWORD *)((char *)v62 - v65);
        uint64_t v67 = &v61[4 * v58 - 16];
        int v68 = v55 - 16;
        uint64_t v69 = v64 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v70 = *(_OWORD *)v68;
          *(v67 - 1) = *((_OWORD *)v68 - 1);
          *uint64_t v67 = v70;
          v67 -= 2;
          v68 -= 32;
          v69 -= 8;
        }
        while (v69);
        unint64_t v55 = v66;
        if (v64 != (v64 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_138:
          do
          {
            int v71 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *--int8x16_t v62 = v71;
          }
          while (v55 != v57);
        }
        goto LABEL_73;
      }
      *(_DWORD *)unint64_t v55 = v25;
      uint64_t v56 = (uint64_t)(v55 + 4);
LABEL_76:
      v29[17] = v56;
      if (++v23 == v24)
      {
LABEL_77:
        uint64_t v72 = *((void *)v6 + 2);
        unint64_t v73 = *(void *)(v72 + 224);
        if (v73 >= 0x80) {
          goto LABEL_78;
        }
LABEL_90:
        uint64_t v74 = (uint64_t)v101;
        if (v73)
        {
          *(void *)(v72 + 216) = 0;
          memset(*(void **)(v72 + 200), 128, v73 + 8);
          *(unsigned char *)(*(void *)(v72 + 200) + *(void *)(v72 + 224)) = -1;
          unint64_t v73 = *(void *)(v72 + 224);
          uint64_t v75 = v73 - (v73 >> 3);
          if (v73 == 7) {
            uint64_t v75 = 6;
          }
          *(void *)(v72 + 240) = v75 - *(void *)(v72 + 216);
        }
        goto LABEL_94;
      }
    }
    else
    {
LABEL_29:
      char v22 = 1;
      if (++v23 == v24) {
        goto LABEL_77;
      }
    }
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "BOOL_or: singleton");
  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v29, (uint64_t)__p);
  uint64_t v74 = (uint64_t)v101;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)v6 + 2), (int)v25))goto LABEL_101; {
LABEL_122:
  }
  char IsUnsat = 1;
  return IsUnsat & 1;
}

void sub_23CC46238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::ConstraintProto::mutable_BOOL_or(operations_research::sat::ConstraintProto *this)
{
  if (*((_DWORD *)this + 15) == 3) {
    return *((void *)this + 6);
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 3;
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if (v3) {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v4);
  }
  else {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v4);
  }
  *((void *)this + 6) = result;
  return result;
}

BOOL absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::contains<int>(void *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  unint64_t v5 = (v4 >> 7) ^ (*a1 >> 12);
  uint64_t v6 = a1[3];
  uint64_t v7 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v8 = v5 & v6;
    uint64_t v9 = *(void *)(*a1 + v8);
    unint64_t v10 = ((v9 ^ v7) - 0x101010101010101) & ~(v9 ^ v7) & 0x8080808080808080;
    if (v10) {
      break;
    }
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v11 = a1[3];
      return v11 != v6;
    }
    v2 += 8;
    unint64_t v5 = v2 + v8;
  }
  while (1)
  {
    unint64_t v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v6;
    if (*(_DWORD *)(a1[1] + 4 * v11) == v3) {
      return v11 != v6;
    }
    v10 &= v10 - 1;
    if (!v10) {
      goto LABEL_5;
    }
  }
}

unint64_t operations_research::sat::ConstraintProto::mutable_BOOL_and(operations_research::sat::ConstraintProto *this)
{
  if (*((_DWORD *)this + 15) == 4) {
    return *((void *)this + 6);
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 4;
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if (v3) {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v4);
  }
  else {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v4);
  }
  *((void *)this + 6) = result;
  return result;
}

uint64_t operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*((_DWORD *)a2 + 4))
  {
    if (*((_DWORD *)a2 + 15) == 3)
    {
      *(_DWORD *)(*((void *)a2 + 6) + 16) = 0;
      uint64_t v4 = *((int *)a2 + 4);
      if (!v4) {
        goto LABEL_19;
      }
      goto LABEL_9;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 3;
    uint64_t v7 = *((void *)a2 + 1);
    uint64_t v8 = (google::protobuf::Arena **)(v7 & 0xFFFFFFFFFFFFFFFELL);
    if (v7)
    {
      unint64_t v19 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v8);
      *((void *)a2 + 6) = v19;
      *(_DWORD *)(v19 + 16) = 0;
      uint64_t v4 = *((int *)a2 + 4);
      if (v4) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v8);
      *((void *)a2 + 6) = v9;
      *(_DWORD *)(v9 + 16) = 0;
      uint64_t v4 = *((int *)a2 + 4);
      if (v4)
      {
LABEL_9:
        unint64_t v10 = (int *)*((void *)a2 + 3);
        uint64_t v11 = 4 * v4;
        while (1)
        {
          int v12 = *v10;
          if (*((_DWORD *)a2 + 15) != 3) {
            break;
          }
          unint64_t v13 = *((void *)a2 + 6);
          uint64_t v15 = *(unsigned int *)(v13 + 16);
          int v14 = (unsigned int *)(v13 + 16);
          int v16 = v15 + 1;
          if (v15 == *(_DWORD *)(v13 + 20)) {
            goto LABEL_17;
          }
LABEL_10:
          *(_DWORD *)(*(void *)(v13 + 24) + 4 * v15) = ~v12;
          *(_DWORD *)(v13 + 16) = v16;
          ++v10;
          v11 -= 4;
          if (!v11) {
            goto LABEL_19;
          }
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 3;
        uint64_t v17 = *((void *)a2 + 1);
        uint64_t v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if (v17) {
          uint64_t v18 = *(google::protobuf::Arena **)v18;
        }
        unint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v18);
        *((void *)a2 + 6) = v13;
        uint64_t v15 = *(unsigned int *)(v13 + 16);
        int v14 = (unsigned int *)(v13 + 16);
        int v16 = v15 + 1;
        if (v15 != *(_DWORD *)(v13 + 20)) {
          goto LABEL_10;
        }
LABEL_17:
        google::protobuf::RepeatedField<int>::Reserve(v14, v16);
        goto LABEL_10;
      }
    }
LABEL_19:
    *((_DWORD *)a2 + 4) = 0;
    operations_research::sat::CpModelPresolver::PresolveBoolOr(this, a2);
    return 1;
  }
  uint64_t v5 = *((void *)this + 2);
  char v22 = 0;
  LOBYTE(__p) = 0;
  uint64_t IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v5, (uint64_t)&__p);
  if (v22 < 0) {
    operator delete(__p);
  }
  return IsUnsat;
}

void sub_23CC465D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveBoolAnd(operations_research::sat::CpModelPresolver *this, uint64_t **a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (*(unsigned char *)(v3 + 504)) {
    return 0;
  }
  uint64_t v5 = (operations_research::sat::ConstraintProto *)a2;
  if (!*((_DWORD *)a2 + 4))
  {
    strcpy((char *)__p, "BOOL_and: non-reified.");
    HIBYTE(__p[2]) = 22;
    operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if (*((_DWORD *)v5 + 15) == 4)
      {
LABEL_9:
        uint64_t v8 = (uint64_t *)*((void *)v5 + 6);
        uint64_t v9 = *((int *)v8 + 4);
        if (!v9) {
          goto LABEL_55;
        }
        goto LABEL_52;
      }
    }
    else if (*((_DWORD *)v5 + 15) == 4)
    {
      goto LABEL_9;
    }
    uint64_t v8 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    uint64_t v9 = dword_26AEE17F8;
    if (!dword_26AEE17F8) {
      goto LABEL_55;
    }
LABEL_52:
    unint64_t v39 = (int *)v8[3];
    uint64_t v40 = 4 * v9;
    while ((operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)this + 2), *v39) & 1) != 0)
    {
      ++v39;
      v40 -= 4;
      if (!v40) {
        goto LABEL_55;
      }
    }
    return 1;
  }
  *(void *)(v3 + 136) = *(void *)(v3 + 128);
  if (*((_DWORD *)a2 + 15) == 4)
  {
    uint64_t v6 = a2[6];
    uint64_t v7 = *((int *)v6 + 4);
    if (!v7) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v6 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    uint64_t v7 = dword_26AEE17F8;
    if (!dword_26AEE17F8) {
      goto LABEL_55;
    }
  }
  LOBYTE(v4) = 0;
  unint64_t v10 = (unsigned int *)v6[3];
  uint64_t v11 = &v10[v7];
  unint64_t v51 = v11;
  while (1)
  {
    int v12 = (const char *)*v10;
    BOOL IsFalse = operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), v12);
    int v14 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
    if (IsFalse) {
      break;
    }
    if (!operations_research::sat::PresolveContext::LiteralIsTrue(v14, v12))
    {
      BOOL IsUniqueAndRemovable = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), (int)v12);
      int v16 = (void *)*((void *)this + 2);
      if (IsUniqueAndRemovable)
      {
        uint64_t v4 = 1;
        if ((operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)this + 2), (int)v12) & 1) == 0)return v4; {
        goto LABEL_14;
        }
      }
      uint64_t v18 = (char *)v16[17];
      unint64_t v17 = v16[18];
      if ((unint64_t)v18 < v17)
      {
        *(_DWORD *)uint64_t v18 = v12;
        uint64_t v19 = (uint64_t)(v18 + 4);
LABEL_42:
        v16[17] = v19;
        goto LABEL_14;
      }
      uint64_t v20 = (char *)v16[16];
      uint64_t v21 = (v18 - v20) >> 2;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v17 - (void)v20;
      if (v23 >> 1 > v22) {
        unint64_t v22 = v23 >> 1;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v53 = v22;
      if (v22)
      {
        if (v22 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v24 = operator new(4 * v22);
        unint64_t v25 = &v24[4 * v21];
        *unint64_t v25 = v12;
        uint64_t v19 = (uint64_t)(v25 + 1);
        if (v18 != v20)
        {
LABEL_30:
          unint64_t v26 = v18 - 4 - v20;
          if (v26 < 0x2C)
          {
            uint64_t v11 = v51;
            goto LABEL_38;
          }
          uint64_t v11 = v51;
          if ((unint64_t)(v20 - v24) < 0x20) {
            goto LABEL_79;
          }
          uint64_t v27 = (v26 >> 2) + 1;
          uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
          unsigned int v29 = &v18[-v28];
          unint64_t v25 = (_DWORD *)((char *)v25 - v28);
          uint64_t v30 = &v24[4 * v21 - 16];
          unint64_t v31 = v18 - 16;
          uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v33 = *(_OWORD *)v31;
            *(v30 - 1) = *((_OWORD *)v31 - 1);
            _OWORD *v30 = v33;
            v30 -= 2;
            v31 -= 32;
            v32 -= 8;
          }
          while (v32);
          uint64_t v18 = v29;
          if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_79:
            do
            {
LABEL_38:
              int v34 = *((_DWORD *)v18 - 1);
              v18 -= 4;
              *--unint64_t v25 = v34;
            }
            while (v18 != v20);
          }
LABEL_39:
          v16[16] = v25;
          v16[17] = v19;
          v16[18] = &v24[4 * v53];
          if (v20) {
            operator delete(v20);
          }
          uint64_t v5 = (operations_research::sat::ConstraintProto *)a2;
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v25 = (_DWORD *)(4 * v21);
        *(_DWORD *)(4 * v21) = v12;
        uint64_t v19 = 4 * v21 + 4;
        if (v18 != v20) {
          goto LABEL_30;
        }
      }
      uint64_t v11 = v51;
      goto LABEL_39;
    }
    LOBYTE(v4) = 1;
LABEL_14:
    if (++v10 == v11)
    {
      uint64_t v35 = *((void *)this + 2);
      uint64_t v36 = *(int **)(v35 + 128);
      uint64_t v37 = *(int **)(v35 + 136);
      if (v36 != v37)
      {
        if ((v4 & 1) == 0) {
          return 0;
        }
        if (*((_DWORD *)v5 + 15) == 4)
        {
          unint64_t v38 = *((void *)v5 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v5);
          *((_DWORD *)v5 + 15) = 4;
          uint64_t v42 = *((void *)v5 + 1);
          unint64_t v43 = (google::protobuf::Arena *)(v42 & 0xFFFFFFFFFFFFFFFELL);
          if (v42) {
            unint64_t v43 = *(google::protobuf::Arena **)v43;
          }
          unint64_t v38 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v43);
          *((void *)v5 + 6) = v38;
          uint64_t v35 = *((void *)this + 2);
          uint64_t v36 = *(int **)(v35 + 128);
          uint64_t v37 = *(int **)(v35 + 136);
        }
        *(_DWORD *)(v38 + 16) = 0;
        if (v36 != v37)
        {
          while (2)
          {
            int v44 = *v36;
            if (*((_DWORD *)v5 + 15) == 4)
            {
              unint64_t v45 = *((void *)v5 + 6);
              uint64_t v47 = *(unsigned int *)(v45 + 16);
              unint64_t v46 = (unsigned int *)(v45 + 16);
              int v48 = v47 + 1;
              if (v47 == *(_DWORD *)(v45 + 20)) {
                goto LABEL_63;
              }
            }
            else
            {
              operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v5);
              *((_DWORD *)v5 + 15) = 4;
              uint64_t v49 = *((void *)v5 + 1);
              uint64_t v50 = (google::protobuf::Arena *)(v49 & 0xFFFFFFFFFFFFFFFELL);
              if (v49) {
                uint64_t v50 = *(google::protobuf::Arena **)v50;
              }
              unint64_t v45 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v50);
              *((void *)v5 + 6) = v45;
              uint64_t v47 = *(unsigned int *)(v45 + 16);
              unint64_t v46 = (unsigned int *)(v45 + 16);
              int v48 = v47 + 1;
              if (v47 == *(_DWORD *)(v45 + 20)) {
LABEL_63:
              }
                google::protobuf::RepeatedField<int>::Reserve(v46, v48);
            }
            *(_DWORD *)(*(void *)(v45 + 24) + 4 * v47) = v44;
            *(_DWORD *)(v45 + 16) = v48;
            if (++v36 == v37)
            {
              uint64_t v35 = *((void *)this + 2);
              break;
            }
            continue;
          }
        }
        __p[0] = operator new(0x20uLL);
        *(_OWORD *)&__p[1] = xmmword_23CE7ED90;
        strcpy((char *)__p[0], "BOOL_and: fixed literals");
        operations_research::sat::PresolveContext::UpdateRuleStats(v35, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        return 1;
      }
LABEL_55:
      operations_research::sat::ConstraintProto::Clear(v5);
      return 1;
    }
  }
  strcpy((char *)__p, "BOOL_and: always false");
  HIBYTE(__p[2]) = 22;
  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v14, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, v5);
}

void sub_23CC46AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveAtMostOne(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504)) {
    return 0;
  }
  uint64_t v3 = a2;
  if (*((_DWORD *)a2 + 4))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 322);
    unint64_t v63 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Check failed: !HasEnforcementLiteral(*ct) ", 42);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
  }
  if (*((_DWORD *)a2 + 15) != 26)
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)v3 + 15) = 26;
    uint64_t v5 = *((void *)v3 + 1);
    uint64_t v6 = (google::protobuf::Arena **)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if (v5)
    {
      *((void *)v3 + 6) = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v6);
      if (*((_DWORD *)v3 + 15) == 26) {
        goto LABEL_10;
      }
    }
    else
    {
      *((void *)v3 + 6) = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v6);
      if (*((_DWORD *)v3 + 15) == 26) {
        goto LABEL_10;
      }
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v3);
    *((_DWORD *)v3 + 15) = 26;
    uint64_t v7 = *((void *)v3 + 1);
    uint64_t v8 = (google::protobuf::Arena *)(v7 & 0xFFFFFFFFFFFFFFFELL);
    if (v7) {
      uint64_t v8 = *(google::protobuf::Arena **)v8;
    }
    *((void *)v3 + 6) = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v8);
  }
LABEL_10:
  std::__sort<std::__less<int,int> &,int *>();
  int v9 = *((_DWORD *)v3 + 15);
  if (v9 != 26)
  {
    unint64_t v10 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    uint64_t v11 = dword_26AEE17F8;
    if (dword_26AEE17F8) {
      goto LABEL_12;
    }
LABEL_19:
    *(void *)(*((void *)this + 2) + 136) = *(void *)(*((void *)this + 2) + 128);
    if (v9 != 26) {
      goto LABEL_53;
    }
    goto LABEL_20;
  }
  unint64_t v10 = (uint64_t *)*((void *)v3 + 6);
  uint64_t v11 = *((int *)v10 + 4);
  if (!v11) {
    goto LABEL_19;
  }
LABEL_12:
  int v12 = (unsigned int *)v10[3];
  uint64_t v13 = 4 * v11;
  unsigned int v14 = 0x7FFFFFFF;
  do
  {
    unsigned int v15 = *v12;
    if (*v12 == v14)
    {
      if (!operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), v14))return 1; {
      uint64_t v16 = *((void *)this + 2);
      }
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_23CE7ECA0;
      strcpy((char *)__p[0], "at_most_one: duplicate literals");
      operations_research::sat::PresolveContext::UpdateRuleStats(v16, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    ++v12;
    unsigned int v14 = v15;
    v13 -= 4;
  }
  while (v13);
  int v49 = *((_DWORD *)v3 + 15);
  *(void *)(*((void *)this + 2) + 136) = *(void *)(*((void *)this + 2) + 128);
  if (v49 != 26)
  {
LABEL_53:
    unint64_t v17 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    uint64_t v18 = dword_26AEE17F8;
    if (!dword_26AEE17F8)
    {
LABEL_54:
      uint64_t v45 = *((void *)this + 2);
      if (*(void *)(v45 + 128) != *(void *)(v45 + 136)) {
        return 0;
      }
      goto LABEL_55;
    }
    goto LABEL_21;
  }
LABEL_20:
  unint64_t v17 = (uint64_t *)*((void *)v3 + 6);
  uint64_t v18 = *((int *)v17 + 4);
  if (!v18) {
    goto LABEL_54;
  }
LABEL_21:
  int v19 = 0;
  uint64_t v20 = (unsigned int *)v17[3];
  uint64_t v21 = &v20[v18];
  uint64_t v66 = v3;
  uint64_t v64 = v21;
  do
  {
    while (1)
    {
      while (1)
      {
        unint64_t v22 = (const char *)*v20;
        BOOL IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)this + 2), v22);
        uint64_t v24 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
        if (IsTrue)
        {
          strcpy((char *)__p, "at_most_one: satisfied");
          HIBYTE(__p[2]) = 22;
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v24, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
          {
            operator delete(__p[0]);
            if (*((_DWORD *)v3 + 15) == 26)
            {
LABEL_59:
              uint64_t v50 = (uint64_t *)*((void *)v3 + 6);
              uint64_t v51 = *((int *)v50 + 4);
              if (!v51) {
                goto LABEL_68;
              }
              goto LABEL_63;
            }
          }
          else if (*((_DWORD *)v3 + 15) == 26)
          {
            goto LABEL_59;
          }
          uint64_t v50 = &operations_research::sat::_BoolArgumentProto_default_instance_;
          uint64_t v51 = dword_26AEE17F8;
          if (!dword_26AEE17F8) {
            goto LABEL_68;
          }
LABEL_63:
          uint64_t v52 = (unsigned int *)v50[3];
          uint64_t v53 = 4 * v51;
          while (*v52 == v22
               || operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), *v52))
          {
            ++v52;
            v53 -= 4;
            if (!v53) {
              goto LABEL_68;
            }
          }
          return 1;
        }
        if (!operations_research::sat::PresolveContext::LiteralIsFalse(v24, v22)) {
          break;
        }
        int v19 = 1;
        if (++v20 == v21) {
          goto LABEL_48;
        }
      }
      unint64_t v25 = (void *)*((void *)this + 2);
      uint64_t v27 = (char *)v25[17];
      unint64_t v26 = v25[18];
      if ((unint64_t)v27 >= v26) {
        break;
      }
      *(_DWORD *)uint64_t v27 = v22;
      v25[17] = v27 + 4;
      if (++v20 == v21) {
        goto LABEL_48;
      }
    }
    int v65 = v19;
    uint64_t v28 = (char *)v25[16];
    uint64_t v29 = (v27 - v28) >> 2;
    unint64_t v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = v26 - (void)v28;
    if (v31 >> 1 > v30) {
      unint64_t v30 = v31 >> 1;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (!v32)
    {
      long long v33 = 0;
      int v34 = (_DWORD *)(4 * v29);
      *(_DWORD *)(4 * v29) = v22;
      uint64_t v35 = 4 * v29 + 4;
      if (v27 == v28) {
        goto LABEL_45;
      }
LABEL_39:
      unint64_t v36 = v27 - 4 - v28;
      if (v36 < 0x2C) {
        goto LABEL_94;
      }
      if ((unint64_t)(v28 - v33) < 0x20) {
        goto LABEL_94;
      }
      uint64_t v37 = (v36 >> 2) + 1;
      uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v39 = &v27[-v38];
      int v34 = (_DWORD *)((char *)v34 - v38);
      uint64_t v40 = &v33[4 * v29 - 16];
      uint64_t v41 = v27 - 16;
      uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v43 = *(_OWORD *)v41;
        *(v40 - 1) = *((_OWORD *)v41 - 1);
        _OWORD *v40 = v43;
        v40 -= 2;
        v41 -= 32;
        v42 -= 8;
      }
      while (v42);
      uint64_t v27 = v39;
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_94:
        do
        {
          int v44 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *--int v34 = v44;
        }
        while (v27 != v28);
      }
      goto LABEL_45;
    }
    if (v32 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v33 = operator new(4 * v32);
    int v34 = &v33[4 * v29];
    *int v34 = v22;
    uint64_t v35 = (uint64_t)(v34 + 1);
    if (v27 != v28) {
      goto LABEL_39;
    }
LABEL_45:
    v25[16] = v34;
    v25[17] = v35;
    v25[18] = &v33[4 * v32];
    if (v28) {
      operator delete(v28);
    }
    uint64_t v3 = v66;
    int v19 = v65;
    uint64_t v21 = v64;
    v25[17] = v35;
    ++v20;
  }
  while (v20 != v64);
LABEL_48:
  uint64_t v45 = *((void *)this + 2);
  uint64_t v47 = *(int **)(v45 + 128);
  unint64_t v46 = *(int **)(v45 + 136);
  if (v47 != v46)
  {
    if (v19)
    {
      if (*((_DWORD *)v3 + 15) == 26)
      {
        unint64_t v48 = *((void *)v3 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v3);
        *((_DWORD *)v3 + 15) = 26;
        uint64_t v54 = *((void *)v3 + 1);
        unint64_t v55 = (google::protobuf::Arena *)(v54 & 0xFFFFFFFFFFFFFFFELL);
        if (v54) {
          unint64_t v55 = *(google::protobuf::Arena **)v55;
        }
        unint64_t v48 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v55);
        *((void *)v3 + 6) = v48;
        uint64_t v45 = *((void *)this + 2);
        uint64_t v47 = *(int **)(v45 + 128);
        unint64_t v46 = *(int **)(v45 + 136);
      }
      *(_DWORD *)(v48 + 16) = 0;
      if (v47 == v46)
      {
LABEL_85:
        __p[0] = operator new(0x20uLL);
        *(_OWORD *)&__p[1] = xmmword_23CE7FBE0;
        strcpy((char *)__p[0], "at_most_one: removed literals");
        operations_research::sat::PresolveContext::UpdateRuleStats(v45, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        return 1;
      }
      while (2)
      {
        int v56 = *v47;
        if (*((_DWORD *)v3 + 15) == 26)
        {
          unint64_t v57 = *((void *)v3 + 6);
          uint64_t v59 = *(unsigned int *)(v57 + 16);
          uint64_t v58 = (unsigned int *)(v57 + 16);
          int v60 = v59 + 1;
          if (v59 == *(_DWORD *)(v57 + 20)) {
            goto LABEL_75;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v3);
          *((_DWORD *)v3 + 15) = 26;
          uint64_t v61 = *((void *)v3 + 1);
          int8x16_t v62 = (google::protobuf::Arena *)(v61 & 0xFFFFFFFFFFFFFFFELL);
          if (v61) {
            int8x16_t v62 = *(google::protobuf::Arena **)v62;
          }
          unint64_t v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v62);
          *((void *)v3 + 6) = v57;
          uint64_t v59 = *(unsigned int *)(v57 + 16);
          uint64_t v58 = (unsigned int *)(v57 + 16);
          int v60 = v59 + 1;
          if (v59 == *(_DWORD *)(v57 + 20)) {
LABEL_75:
          }
            google::protobuf::RepeatedField<int>::Reserve(v58, v60);
        }
        *(_DWORD *)(*(void *)(v57 + 24) + 4 * v59) = v56;
        *(_DWORD *)(v57 + 16) = v60;
        ++v47;
        uint64_t v3 = v66;
        if (v47 == v46)
        {
          uint64_t v45 = *((void *)this + 2);
          goto LABEL_85;
        }
        continue;
      }
    }
    return 0;
  }
LABEL_55:
  strcpy((char *)__p, "at_most_one: all false");
  HIBYTE(__p[2]) = 22;
  operations_research::sat::PresolveContext::UpdateRuleStats(v45, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_68:
  operations_research::sat::ConstraintProto::Clear(v3);
  return 1;
}

void sub_23CC4712C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC47154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveIntMax(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (*(unsigned char *)(v4 + 504))
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  BOOL v189 = this;
  if (*((_DWORD *)a2 + 15) == 9)
  {
    uint64_t v6 = *((void *)a2 + 6);
    if (*(_DWORD *)(v6 + 16))
    {
      LODWORD(v7) = *(_DWORD *)(v6 + 36);
      v199[1] = 0;
      v199[2] = 0;
      v199[0] = &v199[1];
      uint64_t v8 = *(int *)(v6 + 16);
      if (!v8)
      {
        char v12 = 0;
        int v13 = 0;
        uint64_t v14 = 0x8000000000000000;
        uint64_t v15 = 0x8000000000000000;
        int v39 = 9;
        if (*(int *)(*((void *)a2 + 6) + 16) > 0) {
          goto LABEL_74;
        }
LABEL_59:
        if (v39 != 9) {
          goto LABEL_77;
        }
LABEL_60:
        uint64_t v40 = *((void *)a2 + 6);
        if (*(int *)(v40 + 16) < 1) {
          goto LABEL_62;
        }
        goto LABEL_61;
      }
      int v9 = (int)v7;
      unint64_t v10 = *(unsigned int **)(v6 + 24);
      uint64_t v11 = (uint64_t)&v10[v8];
      goto LABEL_9;
    }
LABEL_67:
    strcpy((char *)v199, "int_max: no variables!");
    HIBYTE(v199[2]) = 22;
    operations_research::sat::PresolveContext::UpdateRuleStats(v4, (uint64_t)v199);
    if (SHIBYTE(v199[2]) < 0) {
      operator delete(v199[0]);
    }
    LOBYTE(v2) = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
    return v2 & 1;
  }
  if (!dword_26AEE1880) {
    goto LABEL_67;
  }
  int v9 = dword_26AEE1894;
  v199[1] = 0;
  v199[2] = 0;
  v199[0] = &v199[1];
  unint64_t v10 = (unsigned int *)qword_26AEE1888;
  uint64_t v11 = qword_26AEE1888 + 4 * dword_26AEE1880;
LABEL_9:
  int v185 = (unsigned int *)v11;
  char v12 = 0;
  int v13 = 0;
  int v187 = v9;
  int v184 = ~v9;
  uint64_t v14 = 0x8000000000000000;
  uint64_t v15 = 0x8000000000000000;
  do
  {
    uint64_t v2 = (const char *)*v10;
    uint64_t v16 = v199[1];
    if (!v199[1]) {
      goto LABEL_35;
    }
    unint64_t v17 = &v199[1];
    uint64_t v18 = (void **)v199[1];
    do
    {
      int v19 = v18;
      uint64_t v20 = v17;
      int v21 = *((_DWORD *)v18 + 7);
      if (v21 >= (int)v2) {
        unint64_t v17 = v18;
      }
      else {
        ++v18;
      }
      uint64_t v18 = (void **)*v18;
    }
    while (v18);
    if (v17 == &v199[1]) {
      goto LABEL_21;
    }
    if (v21 < (int)v2) {
      int v19 = v20;
    }
    if ((int)v2 < *((_DWORD *)v19 + 7))
    {
LABEL_21:
      int v22 = ~v2;
      uint64_t v23 = &v199[1];
      uint64_t v24 = (void **)v199[1];
      do
      {
        unint64_t v25 = v24;
        unint64_t v26 = v23;
        int v27 = *((_DWORD *)v24 + 7);
        if (v27 >= v22) {
          uint64_t v23 = v24;
        }
        else {
          ++v24;
        }
        uint64_t v24 = (void **)*v24;
      }
      while (v24);
      if (v23 == &v199[1])
      {
LABEL_35:
        if (v2 != v184) {
          goto LABEL_33;
        }
      }
      else
      {
        if (v27 < v22) {
          unint64_t v25 = v26;
        }
        if (*((_DWORD *)v25 + 7) > v22 && v2 != v184)
        {
LABEL_33:
          uint64_t v29 = v14;
          unint64_t v30 = &v199[1];
          uint64_t v31 = &v199[1];
          if (v199[1]) {
            goto LABEL_39;
          }
          goto LABEL_43;
        }
      }
      uint64_t v29 = v14 & ~(v14 >> 63);
      unint64_t v30 = &v199[1];
      uint64_t v31 = &v199[1];
      if (v199[1])
      {
        while (1)
        {
LABEL_39:
          while (1)
          {
            uint64_t v31 = (void **)v16;
            int v32 = *((_DWORD *)v16 + 7);
            if ((int)v2 >= v32) {
              break;
            }
            uint64_t v16 = *v31;
            unint64_t v30 = v31;
            if (!*v31) {
              goto LABEL_43;
            }
          }
          if (v32 >= (int)v2) {
            goto LABEL_46;
          }
          uint64_t v16 = v31[1];
          if (!v16)
          {
            unint64_t v30 = v31 + 1;
            break;
          }
        }
      }
LABEL_43:
      long long v33 = operator new(0x20uLL);
      v33[7] = v2;
      *(void *)long long v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v31;
      _OWORD *v30 = v33;
      if (*(void *)v199[0])
      {
        v199[0] = *(void **)v199[0];
        long long v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v199[1], (uint64_t *)v33);
      ++v199[2];
LABEL_46:
      if (*((_DWORD *)a2 + 15) == 9)
      {
        uint64_t v34 = *((void *)a2 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 9;
        uint64_t v35 = *((void *)a2 + 1);
        unint64_t v36 = (google::protobuf::Arena *)(v35 & 0xFFFFFFFFFFFFFFFELL);
        if (v35) {
          unint64_t v36 = *(google::protobuf::Arena **)v36;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v36);
        *((void *)a2 + 6) = v34;
      }
      *(_DWORD *)(*(void *)(v34 + 24) + 4 * v13) = v2;
      uint64_t v37 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)v189 + 2), v2);
      uint64_t v38 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)v189 + 2), v2);
      ++v13;
      if (v29 <= v37) {
        uint64_t v14 = v37;
      }
      else {
        uint64_t v14 = v29;
      }
      if (v15 <= v38) {
        uint64_t v15 = v38;
      }
    }
    v12 |= v2 == v187;
    ++v10;
  }
  while (v10 != v185);
  int v39 = *((_DWORD *)a2 + 15);
  if (v39 != 9)
  {
    LODWORD(v7) = v187;
    if (v13 < dword_26AEE1880) {
      goto LABEL_74;
    }
    goto LABEL_59;
  }
  LODWORD(v7) = v187;
  int v39 = 9;
  if (v13 >= *(_DWORD *)(*((void *)a2 + 6) + 16)) {
    goto LABEL_59;
  }
LABEL_74:
  uint64_t v47 = *((void *)v189 + 2);
  HIBYTE(v198[2]) = 20;
  strcpy((char *)v198, "int_max: removed dup");
  operations_research::sat::PresolveContext::UpdateRuleStats(v47, (uint64_t)v198);
  if (SHIBYTE(v198[2]) < 0) {
    operator delete(v198[0]);
  }
  if (*((_DWORD *)a2 + 15) == 9) {
    goto LABEL_60;
  }
LABEL_77:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 9;
  uint64_t v48 = *((void *)a2 + 1);
  int v49 = (google::protobuf::Arena *)(v48 & 0xFFFFFFFFFFFFFFFELL);
  if (v48) {
    int v49 = *(google::protobuf::Arena **)v49;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v49);
  *((void *)a2 + 6) = v40;
  if (*(int *)(v40 + 16) >= 1) {
LABEL_61:
  }
    *(_DWORD *)(v40 + 16) = v13;
LABEL_62:
  if ((v12 & 1) == 0)
  {
    v198[0] = 0;
    int v44 = a2;
    int v188 = (int)v7;
    if (*((_DWORD *)a2 + 15) == 9)
    {
      uint64_t v45 = (uint64_t *)*((void *)a2 + 6);
      uint64_t v46 = *((int *)v45 + 4);
      if (!v46)
      {
LABEL_93:
        LOBYTE(v191[0]) = 0;
        uint64_t v52 = (operations_research::sat::PresolveContext *)*((void *)v189 + 2);
        if (*((_DWORD *)a2 + 4))
        {
          uint64_t v7 = (const char *)v7;
        }
        else
        {
          uint64_t v7 = (const char *)v7;
          if (!operations_research::sat::PresolveContext::IntersectDomainWith(v52, (const char *)v7, (const operations_research::Domain *)v198, (BOOL *)v191))goto LABEL_264; {
          uint64_t v52 = (operations_research::sat::PresolveContext *)*((void *)v189 + 2);
          }
        }
        if (!operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(v52, (int)v7))
        {
LABEL_213:
          if (*((_DWORD *)v44 + 15) == 9) {
            uint64_t v148 = (uint64_t *)*((void *)v44 + 6);
          }
          else {
            uint64_t v148 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
          }
          int v149 = *((_DWORD *)v148 + 4);
          uint64_t v150 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)v189 + 2), v7);
          if (*((_DWORD *)v44 + 15) == 9)
          {
            __n128 v151 = (uint64_t *)*((void *)v44 + 6);
            uint64_t v152 = *((int *)v151 + 4);
            if (v152) {
              goto LABEL_218;
            }
          }
          else
          {
            __n128 v151 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
            uint64_t v152 = dword_26AEE1880;
            if (dword_26AEE1880)
            {
LABEL_218:
              int v153 = 0;
              uint64_t v154 = (unsigned int *)v151[3];
              uint64_t v155 = 4 * v152;
              while (1)
              {
                int v157 = (const char *)*v154;
                if (!*((_DWORD *)v44 + 4))
                {
                  BOOL v158 = (operations_research::sat::PresolveContext *)*((void *)v189 + 2);
                  operations_research::Domain::Domain(&v196, 0x8000000000000000, v150);
                  char v159 = operations_research::sat::PresolveContext::IntersectDomainWith(v158, v157, (const operations_research::Domain *)&v196, (BOOL *)v191);
                  if (v196) {
                    operator delete((void *)v197);
                  }
                  if ((v159 & 1) == 0) {
                    goto LABEL_264;
                  }
                }
                if (operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)v189 + 2), v157) >= v14)
                {
                  if (*((_DWORD *)v44 + 15) == 9)
                  {
                    uint64_t v156 = *((void *)v44 + 6);
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v44);
                    *((_DWORD *)v44 + 15) = 9;
                    uint64_t v160 = *((void *)v44 + 1);
                    uint64_t v161 = (google::protobuf::Arena *)(v160 & 0xFFFFFFFFFFFFFFFELL);
                    if (v160) {
                      uint64_t v161 = *(google::protobuf::Arena **)v161;
                    }
                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v161);
                    *((void *)v44 + 6) = v156;
                  }
                  *(_DWORD *)(*(void *)(v156 + 24) + 4 * v153++) = v157;
                }
                ++v154;
                v155 -= 4;
                if (!v155) {
                  goto LABEL_233;
                }
              }
            }
          }
          int v153 = 0;
LABEL_233:
          if (LOBYTE(v191[0]))
          {
            uint64_t v162 = *((void *)v189 + 2);
            std::string::basic_string[abi:ne180100]<0>(&v196, "int_max: reduced domains");
            operations_research::sat::PresolveContext::UpdateRuleStats(v162, (uint64_t)&v196);
            if (SHIBYTE(v197) < 0) {
              operator delete(v196);
            }
          }
          LOBYTE(v2) = v153 < v149;
          if (v153 < v149)
          {
            uint64_t v163 = *((void *)v189 + 2);
            std::string::basic_string[abi:ne180100]<0>(&v196, "int_max: removed variables");
            operations_research::sat::PresolveContext::UpdateRuleStats(v163, (uint64_t)&v196);
            if (SHIBYTE(v197) < 0) {
              operator delete(v196);
            }
            operations_research::sat::ConstraintProto::mutable_int_max(v44);
            if (*(int *)(v164 + 16) >= 1) {
              *(_DWORD *)(v164 + 16) = v153;
            }
          }
          if (v153 != 1)
          {
            if (!v153)
            {
              uint64_t v165 = *((void *)v189 + 2);
              std::string::basic_string[abi:ne180100]<0>(&v196, "int_max: no variables!");
              operations_research::sat::PresolveContext::UpdateRuleStats(v165, (uint64_t)&v196);
              if (SHIBYTE(v197) < 0) {
                operator delete(v196);
              }
              LOBYTE(v2) = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(v189, v44);
            }
            goto LABEL_265;
          }
          uint64_t v166 = *((void *)v189 + 2);
          std::string::basic_string[abi:ne180100]<0>(&v196, "int_max: converted to equality");
          operations_research::sat::PresolveContext::UpdateRuleStats(v166, (uint64_t)&v196);
          if (SHIBYTE(v197) < 0) {
            operator delete(v196);
          }
          int v167 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)v189 + 2) + 48));
          operations_research::sat::ConstraintProto::CopyFrom(v167, v44);
          operations_research::sat::ConstraintProto::mutable_linear(v167);
          uint64_t v169 = v168;
          uint64_t v170 = *(unsigned int *)(v168 + 16);
          BOOL v171 = (unsigned int *)(v168 + 16);
          int v172 = v170 + 1;
          if (v170 == *(_DWORD *)(v168 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v168 + 16), v170 + 1);
          }
          *(_DWORD *)(*(void *)(v169 + 24) + 4 * v170) = v188;
          uint64_t v173 = *(unsigned int *)(v169 + 40);
          *(_DWORD *)(v169 + 16) = v172;
          if (v173 == *(_DWORD *)(v169 + 44)) {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v169 + 40), v173 + 1);
          }
          *(void *)(*(void *)(v169 + 48) + 8 * v173) = 1;
          *(_DWORD *)(v169 + 40) = v173 + 1;
          if (*((_DWORD *)v44 + 15) == 9) {
            int v174 = (uint64_t *)*((void *)v44 + 6);
          }
          else {
            int v174 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
          }
          int v175 = *(_DWORD *)v174[3];
          uint64_t v176 = *(unsigned int *)(v169 + 16);
          if (v176 == *(_DWORD *)(v169 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve(v171, v176 + 1);
          }
          *(_DWORD *)(*(void *)(v169 + 24) + 4 * v176) = v175;
          *(_DWORD *)(v169 + 16) = v176 + 1;
          uint64_t v177 = *(unsigned int *)(v169 + 40);
          if (v177 == *(_DWORD *)(v169 + 44)) {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v169 + 40), v177 + 1);
          }
          uint64_t v178 = *(unsigned int *)(v169 + 64);
          *(void *)(*(void *)(v169 + 48) + 8 * v177) = -1;
          *(_DWORD *)(v169 + 40) = v177 + 1;
          int v179 = *(_DWORD *)(v169 + 68);
          unsigned int v180 = v178 + 1;
          if (v178 == v179)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v169 + 64), v178 + 1);
            int v179 = *(_DWORD *)(v169 + 68);
          }
          uint64_t v181 = *(void *)(v169 + 72);
          *(void *)(v181 + 8 * v178) = 0;
          *(_DWORD *)(v169 + 64) = v180;
          if (v180 == v179)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v169 + 64), v178 + 2);
            uint64_t v181 = *(void *)(v169 + 72);
          }
          *(void *)(v181 + 8 * v180) = 0;
          *(_DWORD *)(v169 + 64) = v178 + 2;
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)v189
                                                                                       + 2));
          operations_research::sat::ConstraintProto::Clear(v44);
LABEL_264:
          LOBYTE(v2) = 1;
LABEL_265:
          if ((uint64_t)v198[0]) {
            operator delete(v198[1]);
          }
          goto LABEL_267;
        }
        operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)v189 + 2), v7, (unint64_t *)&v196);
        uint64_t v79 = operations_research::Domain::Max((operations_research::Domain *)&v196, v78);
        operations_research::Domain::Domain(&v192, 0x8000000000000000, v79);
        operations_research::Domain::IntersectionWith(v198, (const operations_research::Domain *)&v192, (unint64_t *)&v194);
        int IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v194, (const operations_research::Domain *)&v196);
        if (v194)
        {
          operator delete(__p[0]);
          if ((v192 & 1) == 0)
          {
LABEL_136:
            if (!IsIncludedIn)
            {
LABEL_210:
              if (v196) {
                operator delete((void *)v197);
              }
              if (IsIncludedIn) {
                goto LABEL_265;
              }
              goto LABEL_213;
            }
LABEL_140:
            char v183 = IsIncludedIn;
            uint64_t v82 = operations_research::Domain::Max((operations_research::Domain *)v198, v80);
            uint64_t v186 = v14;
            if (v82 <= operations_research::Domain::Max((operations_research::Domain *)&v196, v83))
            {
              uint64_t v87 = *((void *)v189 + 2);
              std::string::basic_string[abi:ne180100]<0>(&v194, "int_max: always true");
              operations_research::sat::PresolveContext::UpdateRuleStats(v87, (uint64_t)&v194);
              if (SHIBYTE(__p[1]) < 0) {
                operator delete(v194);
              }
            }
            else if (*((_DWORD *)a2 + 4))
            {
              uint64_t v84 = *((void *)v189 + 2);
              std::string::basic_string[abi:ne180100]<0>(&v194, "int_max: reified lower than constant");
              operations_research::sat::PresolveContext::UpdateRuleStats(v84, (uint64_t)&v194);
              if (SHIBYTE(__p[1]) < 0) {
                operator delete(v194);
              }
              if (*((_DWORD *)a2 + 15) == 9) {
                uint64_t v86 = (uint64_t *)*((void *)a2 + 6);
              }
              else {
                uint64_t v86 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
              }
              uint64_t v89 = *((int *)v86 + 4);
              if (v89)
              {
                BOOL v90 = (int *)v86[3];
                uint64_t v91 = 4 * v89;
                while (1)
                {
                  int v92 = *v90;
                  uint64_t v93 = *(void *)(*((void *)v189 + 2) + 48);
                  uint64_t v94 = *(int **)(v93 + 56);
                  if (!v94) {
                    break;
                  }
                  uint64_t v95 = *(int *)(v93 + 48);
                  int v96 = *v94;
                  if ((int)v95 < *v94)
                  {
                    *(_DWORD *)(v93 + 48) = v95 + 1;
                    unint64_t v97 = *(void *)&v94[2 * v95 + 2];
                    uint64_t v98 = a2;
                    if ((operations_research::sat::ConstraintProto *)v97 == a2) {
                      goto LABEL_164;
                    }
                    goto LABEL_162;
                  }
                  if (v96 == *(_DWORD *)(v93 + 52)) {
                    goto LABEL_160;
                  }
LABEL_161:
                  int *v94 = v96 + 1;
                  unint64_t v97 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v93 + 40));
                  uint64_t v99 = *(void *)(v93 + 56);
                  uint64_t v100 = *(int *)(v93 + 48);
                  *(_DWORD *)(v93 + 48) = v100 + 1;
                  *(void *)(v99 + 8 * v100 + 8) = v97;
                  uint64_t v98 = a2;
                  if ((operations_research::sat::ConstraintProto *)v97 == a2) {
                    goto LABEL_164;
                  }
LABEL_162:
                  *(_DWORD *)(v97 + 16) = 0;
                  uint64_t v85 = (const char *)*((unsigned int *)v98 + 4);
                  if (v85)
                  {
                    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v97 + 16), (int)v85);
                    uint64_t v98 = a2;
                    unint64_t v101 = *(void **)(v97 + 24);
                    *(_DWORD *)(v97 + 16) += *((_DWORD *)a2 + 4);
                    memcpy(v101, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
                  }
LABEL_164:
                  if (*((_DWORD *)v98 + 15) == 12)
                  {
                    uint64_t v102 = *((void *)v98 + 6);
                    uint64_t v104 = *(unsigned int *)(v102 + 16);
                    unint64_t v103 = (unsigned int *)(v102 + 16);
                    int v105 = v104 + 1;
                    if (v104 == *(_DWORD *)(v102 + 20)) {
                      goto LABEL_170;
                    }
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v98);
                    *((_DWORD *)a2 + 15) = 12;
                    uint64_t v106 = *((void *)a2 + 1);
                    uint64_t v107 = (google::protobuf::Arena *)(v106 & 0xFFFFFFFFFFFFFFFELL);
                    if (v106) {
                      uint64_t v107 = *(google::protobuf::Arena **)v107;
                    }
                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v107);
                    uint64_t v102 = v108;
                    *((void *)a2 + 6) = v108;
                    uint64_t v104 = *(unsigned int *)(v108 + 16);
                    int v109 = *(_DWORD *)(v108 + 20);
                    unint64_t v103 = (unsigned int *)(v108 + 16);
                    int v105 = v104 + 1;
                    if (v104 == v109) {
LABEL_170:
                    }
                      google::protobuf::RepeatedField<int>::Reserve(v103, v105);
                  }
                  *(_DWORD *)(*(void *)(v102 + 24) + 4 * v104) = v92;
                  *(_DWORD *)(v102 + 16) = v105;
                  if (*((_DWORD *)a2 + 15) == 12)
                  {
                    uint64_t v110 = *((void *)a2 + 6);
                    uint64_t v112 = *(unsigned int *)(v110 + 40);
                    int64_t v111 = (unsigned int *)(v110 + 40);
                    int v113 = v112 + 1;
                    if (v112 == *(_DWORD *)(v110 + 44)) {
                      goto LABEL_177;
                    }
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
                    *((_DWORD *)a2 + 15) = 12;
                    uint64_t v114 = *((void *)a2 + 1);
                    int v115 = (google::protobuf::Arena *)(v114 & 0xFFFFFFFFFFFFFFFELL);
                    if (v114) {
                      int v115 = *(google::protobuf::Arena **)v115;
                    }
                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v115);
                    uint64_t v110 = v116;
                    *((void *)a2 + 6) = v116;
                    uint64_t v112 = *(unsigned int *)(v116 + 40);
                    int v117 = *(_DWORD *)(v116 + 44);
                    int64_t v111 = (unsigned int *)(v116 + 40);
                    int v113 = v112 + 1;
                    if (v112 == v117) {
LABEL_177:
                    }
                      google::protobuf::RepeatedField<long long>::Reserve(v111, v113);
                  }
                  *(void *)(*(void *)(v110 + 48) + 8 * v112) = 1;
                  *(_DWORD *)(v110 + 40) = v113;
                  if (*((_DWORD *)a2 + 15) == 12)
                  {
                    uint64_t v118 = *((void *)a2 + 6);
                    uint64_t v120 = *(unsigned int *)(v118 + 64);
                    uint64_t v119 = (unsigned int *)(v118 + 64);
                    int v121 = v120 + 1;
                    if (v120 != *(_DWORD *)(v118 + 68)) {
                      goto LABEL_185;
                    }
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
                    *((_DWORD *)a2 + 15) = 12;
                    uint64_t v122 = *((void *)a2 + 1);
                    int v123 = (google::protobuf::Arena *)(v122 & 0xFFFFFFFFFFFFFFFELL);
                    if (v122) {
                      int v123 = *(google::protobuf::Arena **)v123;
                    }
                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v123);
                    uint64_t v118 = v124;
                    *((void *)a2 + 6) = v124;
                    uint64_t v120 = *(unsigned int *)(v124 + 64);
                    int v125 = *(_DWORD *)(v124 + 68);
                    uint64_t v119 = (unsigned int *)(v124 + 64);
                    int v121 = v120 + 1;
                    if (v120 != v125) {
                      goto LABEL_185;
                    }
                  }
                  google::protobuf::RepeatedField<long long>::Reserve(v119, v121);
LABEL_185:
                  *(void *)(*(void *)(v118 + 72) + 8 * v120) = 0x8000000000000000;
                  *(_DWORD *)(v118 + 64) = v121;
                  if (*((_DWORD *)a2 + 15) == 12)
                  {
                    uint64_t v126 = *((void *)a2 + 6);
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
                    *((_DWORD *)a2 + 15) = 12;
                    uint64_t v127 = *((void *)a2 + 1);
                    BOOL v128 = (google::protobuf::Arena *)(v127 & 0xFFFFFFFFFFFFFFFELL);
                    if (v127) {
                      BOOL v128 = *(google::protobuf::Arena **)v128;
                    }
                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v128);
                    uint64_t v126 = v129;
                    *((void *)a2 + 6) = v129;
                  }
                  uint64_t v130 = operations_research::Domain::Max((operations_research::Domain *)&v196, v85);
                  uint64_t v131 = *(unsigned int *)(v126 + 64);
                  if (v131 == *(_DWORD *)(v126 + 68)) {
                    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v126 + 64), v131 + 1);
                  }
                  *(void *)(*(void *)(v126 + 72) + 8 * v131) = v130;
                  *(_DWORD *)(v126 + 64) = v131 + 1;
                  ++v90;
                  v91 -= 4;
                  if (!v91) {
                    goto LABEL_201;
                  }
                }
                int v96 = *(_DWORD *)(v93 + 52);
LABEL_160:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v93 + 40), v96 + 1);
                uint64_t v94 = *(int **)(v93 + 56);
                int v96 = *v94;
                goto LABEL_161;
              }
            }
            else
            {
              if (*((_DWORD *)a2 + 15) == 9) {
                int v88 = (uint64_t *)*((void *)a2 + 6);
              }
              else {
                int v88 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
              }
              uint64_t v132 = *((int *)v88 + 4);
              if (v132)
              {
                long long v133 = (unsigned int *)v88[3];
                uint64_t v134 = 4 * v132;
                while (1)
                {
                  uint64_t v135 = (const char *)*v133;
                  uint64_t v136 = *((void *)v189 + 2);
                  int v194 = operator new(0x20uLL);
                  *(_OWORD *)__n128 __p = xmmword_23CE7ECF0;
                  strcpy((char *)v194, "int_max: lower than constant");
                  operations_research::sat::PresolveContext::UpdateRuleStats(v136, (uint64_t)&v194);
                  if (SHIBYTE(__p[1]) < 0) {
                    operator delete(v194);
                  }
                  int v138 = (operations_research::sat::PresolveContext *)*((void *)v189 + 2);
                  uint64_t v139 = operations_research::Domain::Max((operations_research::Domain *)&v196, v137);
                  operations_research::Domain::Domain(&v194, 0x8000000000000000, v139);
                  char v140 = operations_research::sat::PresolveContext::IntersectDomainWith(v138, v135, (const operations_research::Domain *)&v194, 0);
                  if (v194) {
                    operator delete(__p[0]);
                  }
                  if ((v140 & 1) == 0) {
                    break;
                  }
                  ++v133;
                  v134 -= 4;
                  if (!v134) {
                    goto LABEL_201;
                  }
                }
                LOBYTE(v2) = 0;
                int v44 = a2;
                uint64_t v7 = (const char *)v7;
                goto LABEL_209;
              }
            }
LABEL_201:
            uint64_t v7 = (const char *)v7;
            operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)v189 + 2), (int)v7);
            int v44 = a2;
            uint64_t v14 = v186;
            uint64_t v141 = *(void *)(*((void *)v189 + 2) + 56);
            uint64_t v142 = *(int **)(v141 + 56);
            if (v142)
            {
              uint64_t v143 = *(int *)(v141 + 48);
              int v144 = *v142;
              if ((int)v143 < *v142)
              {
                *(_DWORD *)(v141 + 48) = v143 + 1;
                BOOL v145 = *(operations_research::sat::ConstraintProto **)&v142[2 * v143 + 2];
LABEL_208:
                operations_research::sat::ConstraintProto::CopyFrom(v145, a2);
                operations_research::sat::ConstraintProto::Clear(a2);
                LOBYTE(v2) = 1;
LABEL_209:
                LOBYTE(IsIncludedIn) = v183;
                goto LABEL_210;
              }
              if (v144 != *(_DWORD *)(v141 + 52))
              {
LABEL_207:
                *uint64_t v142 = v144 + 1;
                BOOL v145 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v141 + 40));
                uint64_t v146 = *(void *)(v141 + 56);
                uint64_t v147 = *(int *)(v141 + 48);
                *(_DWORD *)(v141 + 48) = v147 + 1;
                *(void *)(v146 + 8 * v147 + 8) = v145;
                goto LABEL_208;
              }
            }
            else
            {
              int v144 = *(_DWORD *)(v141 + 52);
            }
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v141 + 40), v144 + 1);
            uint64_t v142 = *(int **)(v141 + 56);
            int v144 = *v142;
            goto LABEL_207;
          }
        }
        else if ((v192 & 1) == 0)
        {
          goto LABEL_136;
        }
        operator delete(v193);
        if (!IsIncludedIn) {
          goto LABEL_210;
        }
        goto LABEL_140;
      }
    }
    else
    {
      uint64_t v45 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      uint64_t v46 = dword_26AEE1880;
      if (!dword_26AEE1880) {
        goto LABEL_93;
      }
    }
    uint64_t v50 = (unsigned int *)v45[3];
    uint64_t v51 = 4 * v46;
    while (1)
    {
      operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)v189 + 2), (const char *)*v50, &v192);
      operations_research::Domain::Domain(v191, v14, v15);
      operations_research::Domain::IntersectionWith(&v192, (const operations_research::Domain *)v191, (unint64_t *)&v194);
      operations_research::Domain::UnionWith((operations_research::Domain *)v198, (const operations_research::Domain *)&v194, (unint64_t *)&v196);
      if ((uint64_t)v198[0]) {
        operator delete(v198[1]);
      }
      v198[0] = (char *)v196;
      *(_OWORD *)&v198[1] = v197;
      uint64_t v196 = 0;
      if (v194)
      {
        operator delete(__p[0]);
        if (((uint64_t)v191[0] & 1) == 0)
        {
LABEL_88:
          if (v192) {
            goto LABEL_92;
          }
          goto LABEL_83;
        }
      }
      else if (((uint64_t)v191[0] & 1) == 0)
      {
        goto LABEL_88;
      }
      operator delete(v191[1]);
      if (v192) {
LABEL_92:
      }
        operator delete(v193);
LABEL_83:
      ++v50;
      v51 -= 4;
      if (!v51) {
        goto LABEL_93;
      }
    }
  }
  uint64_t v41 = *((void *)v189 + 2);
  v198[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v198[1] = xmmword_23CE7ED90;
  strcpy(v198[0], "int_max: x = max(x, ...)");
  operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)v198);
  if (SHIBYTE(v198[2]) < 0)
  {
    operator delete(v198[0]);
    if (*((_DWORD *)a2 + 15) != 9) {
      goto LABEL_98;
    }
LABEL_65:
    uint64_t v42 = (uint64_t *)*((void *)a2 + 6);
    uint64_t v43 = *((int *)v42 + 4);
    if (!v43) {
      goto LABEL_130;
    }
LABEL_99:
    uint64_t v53 = 4 * v43;
    uint64_t v54 = (int *)v42[3];
    while (1)
    {
      int v55 = *v54;
      if (*v54 != v7) {
        break;
      }
LABEL_101:
      ++v54;
      v53 -= 4;
      if (!v53) {
        goto LABEL_130;
      }
    }
    uint64_t v56 = *(void *)(*((void *)v189 + 2) + 48);
    unint64_t v57 = *(int **)(v56 + 56);
    if (v57)
    {
      uint64_t v58 = *(int *)(v56 + 48);
      int v59 = *v57;
      if ((int)v58 < *v57)
      {
        *(_DWORD *)(v56 + 48) = v58 + 1;
        unint64_t v60 = *(void *)&v57[2 * v58 + 2];
        if ((operations_research::sat::ConstraintProto *)v60 == a2) {
          goto LABEL_113;
        }
        goto LABEL_111;
      }
      if (v59 != *(_DWORD *)(v56 + 52))
      {
LABEL_110:
        *unint64_t v57 = v59 + 1;
        unint64_t v60 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v56 + 40));
        uint64_t v61 = *(void *)(v56 + 56);
        uint64_t v62 = *(int *)(v56 + 48);
        *(_DWORD *)(v56 + 48) = v62 + 1;
        *(void *)(v61 + 8 * v62 + 8) = v60;
        if ((operations_research::sat::ConstraintProto *)v60 == a2) {
          goto LABEL_113;
        }
LABEL_111:
        *(_DWORD *)(v60 + 16) = 0;
        int v63 = *((_DWORD *)a2 + 4);
        if (v63)
        {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v60 + 16), v63);
          uint64_t v64 = *(void **)(v60 + 24);
          *(_DWORD *)(v60 + 16) += *((_DWORD *)a2 + 4);
          memcpy(v64, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
        }
LABEL_113:
        if (*(_DWORD *)(v60 + 60) == 12)
        {
          uint64_t v65 = *(void *)(v60 + 48);
          uint64_t v66 = *(unsigned int *)(v65 + 16);
          uint64_t v67 = (unsigned int *)(v65 + 16);
          unsigned int v68 = v66 + 1;
          if (v66 != *(_DWORD *)(v65 + 20)) {
            goto LABEL_120;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v60);
          *(_DWORD *)(v60 + 60) = 12;
          uint64_t v69 = *(void *)(v60 + 8);
          long long v70 = (google::protobuf::Arena *)(v69 & 0xFFFFFFFFFFFFFFFELL);
          if (v69) {
            long long v70 = *(google::protobuf::Arena **)v70;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v70);
          uint64_t v65 = v71;
          *(void *)(v60 + 48) = v71;
          uint64_t v66 = *(unsigned int *)(v71 + 16);
          uint64_t v67 = (unsigned int *)(v71 + 16);
          unsigned int v68 = v66 + 1;
          if (v66 != *(_DWORD *)(v71 + 20)) {
            goto LABEL_120;
          }
        }
        google::protobuf::RepeatedField<int>::Reserve(v67, v68);
LABEL_120:
        *(_DWORD *)(*(void *)(v65 + 24) + 4 * v66) = v7;
        uint64_t v72 = *(unsigned int *)(v65 + 40);
        *(_DWORD *)(v65 + 16) = v68;
        if (v72 == *(_DWORD *)(v65 + 44))
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 40), v72 + 1);
          unsigned int v68 = *v67;
        }
        *(void *)(*(void *)(v65 + 48) + 8 * v72) = 1;
        *(_DWORD *)(v65 + 40) = v72 + 1;
        if (v68 == *(_DWORD *)(v65 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve(v67, v68 + 1);
        }
        *(_DWORD *)(*(void *)(v65 + 24) + 4 * v68) = v55;
        *(_DWORD *)(v65 + 16) = v68 + 1;
        uint64_t v73 = *(unsigned int *)(v65 + 40);
        if (v73 == *(_DWORD *)(v65 + 44)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 40), v73 + 1);
        }
        uint64_t v74 = *(unsigned int *)(v65 + 64);
        *(void *)(*(void *)(v65 + 48) + 8 * v73) = -1;
        *(_DWORD *)(v65 + 40) = v73 + 1;
        int v75 = *(_DWORD *)(v65 + 68);
        unsigned int v76 = v74 + 1;
        if (v74 == v75)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 64), v74 + 1);
          int v75 = *(_DWORD *)(v65 + 68);
        }
        uint64_t v77 = *(void *)(v65 + 72);
        *(void *)(v77 + 8 * v74) = 0;
        *(_DWORD *)(v65 + 64) = v76;
        if (v76 == v75)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 64), v74 + 2);
          uint64_t v77 = *(void *)(v65 + 72);
        }
        *(void *)(v77 + 8 * v76) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v65 + 64) = v74 + 2;
        goto LABEL_101;
      }
    }
    else
    {
      int v59 = *(_DWORD *)(v56 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v56 + 40), v59 + 1);
    unint64_t v57 = *(int **)(v56 + 56);
    int v59 = *v57;
    goto LABEL_110;
  }
  if (*((_DWORD *)a2 + 15) == 9) {
    goto LABEL_65;
  }
LABEL_98:
  uint64_t v42 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  uint64_t v43 = dword_26AEE1880;
  if (dword_26AEE1880) {
    goto LABEL_99;
  }
LABEL_130:
  operations_research::sat::ConstraintProto::Clear(a2);
  LOBYTE(v2) = 1;
LABEL_267:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v199, (void *)v199[1]);
  return v2 & 1;
}

void sub_23CC48438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, char a20,void *a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,void *a29,void *a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a30);
  }
  if (*(unsigned char *)(v34 - 144)) {
    operator delete(*(void **)(v34 - 136));
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v34 - 112, *(void **)(v34 - 104));
  _Unwind_Resume(a1);
}

uint64_t **std::set<int>::insert[abi:ne180100](uint64_t **a1, int *a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v3 = a1[1];
  int v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v3;
        int v7 = *((_DWORD *)v3 + 7);
        if (v5 >= v7) {
          break;
        }
        uint64_t v3 = *v6;
        uint64_t v4 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= v5) {
        return v6;
      }
      uint64_t v3 = v6[1];
      if (!v3)
      {
        uint64_t v4 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_8:
    uint64_t v8 = v6;
    int v9 = operator new(0x20uLL);
    v9[7] = v5;
    *(void *)int v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v8;
    char *v4 = (uint64_t *)v9;
    unint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v9;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v9;
  }
}

void operations_research::sat::ConstraintProto::mutable_int_max(operations_research::sat::ConstraintProto *this)
{
  if (*((_DWORD *)this + 15) != 9)
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
    *((_DWORD *)this + 15) = 9;
    uint64_t v2 = *((void *)this + 1);
    uint64_t v3 = (google::protobuf::Arena **)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v2) {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v3);
    }
    else {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v3);
    }
    *((void *)this + 6) = v4;
  }
}

void operations_research::sat::ConstraintProto::mutable_linear(operations_research::sat::ConstraintProto *this)
{
  if (*((_DWORD *)this + 15) != 12)
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
    *((_DWORD *)this + 15) = 12;
    uint64_t v2 = *((void *)this + 1);
    uint64_t v3 = (google::protobuf::Arena **)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v2) {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(*v3);
    }
    else {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>((google::protobuf::Arena *)v3);
    }
    *((void *)this + 6) = v4;
  }
}

uint64_t operations_research::sat::CpModelPresolver::PresolveLinMin(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (!*(unsigned char *)(*((void *)this + 2) + 504))
  {
    if (*((_DWORD *)a2 + 15) == 28) {
      int v5 = (const operations_research::sat::LinearArgumentProto *)*((void *)a2 + 6);
    }
    else {
      int v5 = (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_;
    }
    operations_research::sat::LinearArgumentProto::LinearArgumentProto((operations_research::sat::LinearArgumentProto *)v31, v5);
    if (v34) {
      int v7 = v34;
    }
    else {
      int v7 = (operations_research::sat *)&operations_research::sat::_LinearExpressionProto_default_instance_;
    }
    if (*((_DWORD *)a2 + 15) == 27)
    {
      uint64_t v8 = (operations_research::sat::LinearArgumentProto *)*((void *)a2 + 6);
      int v9 = (const operations_research::sat::LinearExpressionProto *)*((void *)v8 + 5);
      if (v9)
      {
LABEL_18:
        operations_research::sat::SetToNegatedLinearExpression(v7, v9, v6);
        if (v33) {
          uint64_t v16 = (operations_research::sat **)(v33 + 8);
        }
        else {
          uint64_t v16 = 0;
        }
        if (!v32)
        {
LABEL_35:
          uint64_t v2 = operations_research::sat::CpModelPresolver::PresolveLinMax(this, (operations_research::sat::LinearArgumentProto **)a2);
          operations_research::sat::LinearArgumentProto::~LinearArgumentProto((operations_research::sat::LinearArgumentProto *)v31);
          return v2;
        }
        uint64_t v17 = 8 * v32;
        while (1)
        {
          uint64_t v18 = *v16;
          if (*((_DWORD *)a2 + 15) == 27)
          {
            int v19 = (operations_research::sat::LinearArgumentProto *)*((void *)a2 + 6);
            uint64_t v20 = (unsigned int *)((char *)v19 + 16);
            int v21 = (int *)*((void *)v19 + 4);
            if (!v21) {
              goto LABEL_30;
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
            *((_DWORD *)a2 + 15) = 27;
            uint64_t v25 = *((void *)a2 + 1);
            unint64_t v26 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
            if (v25) {
              unint64_t v26 = *(google::protobuf::Arena **)v26;
            }
            int v19 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v26);
            *((void *)a2 + 6) = v19;
            uint64_t v20 = (unsigned int *)((char *)v19 + 16);
            int v21 = (int *)*((void *)v19 + 4);
            if (!v21)
            {
LABEL_30:
              int v23 = *((_DWORD *)v19 + 7);
              goto LABEL_32;
            }
          }
          uint64_t v22 = *((int *)v19 + 6);
          int v23 = *v21;
          if ((int)v22 >= *v21)
          {
            if (v23 == *((_DWORD *)v19 + 7))
            {
LABEL_32:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v20, v23 + 1);
              int v21 = (int *)*((void *)v19 + 4);
              int v23 = *v21;
            }
            int *v21 = v23 + 1;
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(*(google::protobuf::Arena **)v20);
            uint64_t v24 = v27;
            uint64_t v28 = *((void *)v19 + 4);
            uint64_t v29 = *((int *)v19 + 6);
            *((_DWORD *)v19 + 6) = v29 + 1;
            *(void *)(v28 + 8 * v29 + 8) = v27;
            goto LABEL_34;
          }
          *((_DWORD *)v19 + 6) = v22 + 1;
          uint64_t v24 = *(const operations_research::sat::LinearExpressionProto **)&v21[2 * v22 + 2];
LABEL_34:
          operations_research::sat::SetToNegatedLinearExpression(v18, v24, v15);
          ++v16;
          v17 -= 8;
          if (!v17) {
            goto LABEL_35;
          }
        }
      }
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 27;
      uint64_t v10 = *((void *)a2 + 1);
      uint64_t v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      if (v10) {
        uint64_t v11 = *(google::protobuf::Arena **)v11;
      }
      uint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v11);
      *((void *)a2 + 6) = v8;
      int v9 = (const operations_research::sat::LinearExpressionProto *)*((void *)v8 + 5);
      if (v9) {
        goto LABEL_18;
      }
    }
    uint64_t v12 = *((void *)v8 + 1);
    int v13 = (google::protobuf::Arena *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (v12) {
      int v13 = *(google::protobuf::Arena **)v13;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v13);
    int v9 = v14;
    *((void *)v8 + 5) = v14;
    goto LABEL_18;
  }
  return 0;
}

void sub_23CC48A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::LinearArgumentProto::~LinearArgumentProto((operations_research::sat::LinearArgumentProto *)va);
  _Unwind_Resume(a1);
}

void sub_23CC48A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::LinearArgumentProto::~LinearArgumentProto((operations_research::sat::LinearArgumentProto *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveLinMax(operations_research::sat::CpModelPresolver *this, operations_research::sat::LinearArgumentProto **a2)
{
  uint64_t v3 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (*((unsigned char *)v3 + 504)) {
    return 0;
  }
  if (*((_DWORD *)a2 + 15) != 27)
  {
    uint64_t v6 = (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_;
    if (dword_26AEE1850) {
      goto LABEL_5;
    }
LABEL_32:
    char v39 = 17;
    strcpy(__p, "lin_max: no exprs");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v3, (uint64_t)__p);
    if (v39 < 0) {
      operator delete(*(void **)__p);
    }
    return operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, (operations_research::sat::ConstraintProto *)a2);
  }
  uint64_t v6 = a2[6];
  if (!*((_DWORD *)v6 + 6)) {
    goto LABEL_32;
  }
LABEL_5:
  int v7 = (const operations_research::sat::LinearExpressionProto *)*((void *)v6 + 5);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = (const operations_research::sat::LinearExpressionProto *)&operations_research::sat::_LinearExpressionProto_default_instance_;
  }
  uint64_t v9 = operations_research::sat::PresolveContext::MinOf(v3, v8);
  uint64_t v10 = (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_;
  if (*((_DWORD *)a2 + 15) == 27) {
    uint64_t v10 = a2[6];
  }
  uint64_t v11 = *((void *)v10 + 4);
  if (v11) {
    uint64_t v12 = (const operations_research::sat::LinearExpressionProto **)(v11 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *((int *)v10 + 6);
  if (v13)
  {
    uint64_t v14 = 8 * v13;
    do
    {
      uint64_t v15 = *v12++;
      uint64_t v16 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v15);
      if (v9 <= v16) {
        uint64_t v9 = v16;
      }
      v14 -= 8;
    }
    while (v14);
  }
  uint64_t v17 = 0;
  int v18 = 0;
  while (*((_DWORD *)a2 + 15) == 27)
  {
    uint64_t v20 = a2[6];
    uint64_t v21 = *((int *)v20 + 6);
    if (v17 >= v21) {
      goto LABEL_35;
    }
LABEL_26:
    uint64_t v22 = *(const operations_research::sat::LinearExpressionProto **)(*((void *)v20 + 4) + 8 * v17 + 8);
    if (operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v22) >= v9)
    {
      if (*((_DWORD *)a2 + 15) == 27)
      {
        int v19 = a2[6];
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 27;
        int v23 = a2[1];
        uint64_t v24 = (google::protobuf::Arena *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL);
        if (v23) {
          uint64_t v24 = *(google::protobuf::Arena **)v24;
        }
        int v19 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v24);
        a2[6] = v19;
      }
      operations_research::sat::LinearExpressionProto::CopyFrom(*(void *)(*((void *)v19 + 4) + 8 * v18++ + 8), v22);
    }
    ++v17;
  }
  LODWORD(v21) = dword_26AEE1850;
  uint64_t v20 = (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_;
  if (v17 < dword_26AEE1850) {
    goto LABEL_26;
  }
LABEL_35:
  if (v18 >= (int)v21) {
    return 0;
  }
  uint64_t v25 = *((void *)this + 2);
  strcpy(__p, "lin_max: Removed exprs");
  char v39 = 22;
  operations_research::sat::PresolveContext::UpdateRuleStats(v25, (uint64_t)__p);
  if (v39 < 0)
  {
    operator delete(*(void **)__p);
    if (*((_DWORD *)a2 + 15) != 27) {
      goto LABEL_41;
    }
LABEL_38:
    unint64_t v26 = a2[6];
    int v27 = (void *)((char *)v26 + 16);
    uint64_t v28 = (*((_DWORD *)v26 + 6) - v18);
    if ((int)v28 >= 1) {
      goto LABEL_47;
    }
  }
  else
  {
    if (*((_DWORD *)a2 + 15) == 27) {
      goto LABEL_38;
    }
LABEL_41:
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 27;
    uint64_t v29 = a2[1];
    unint64_t v30 = (google::protobuf::Arena **)((unint64_t)v29 & 0xFFFFFFFFFFFFFFFELL);
    if (v29)
    {
      uint64_t v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(*v30);
      a2[6] = v31;
      int v33 = *((_DWORD *)a2 + 15);
      int v27 = (void *)((char *)v31 + 16);
      if (v33 != 27) {
        goto LABEL_46;
      }
LABEL_43:
      uint64_t v28 = (*((_DWORD *)v31 + 6) - v18);
      if ((int)v28 >= 1)
      {
LABEL_47:
        uint64_t v34 = 8 * v18 + 8;
        uint64_t v35 = v28;
        do
        {
          unint64_t v36 = *(operations_research::sat::LinearExpressionProto **)(v27[2] + v34);
          if (v36) {
            BOOL v37 = *v27 == 0;
          }
          else {
            BOOL v37 = 0;
          }
          if (v37)
          {
            operations_research::sat::LinearExpressionProto::~LinearExpressionProto(v36);
            MEMORY[0x23ECF2BC0]();
          }
          v34 += 8;
          --v35;
        }
        while (v35);
        google::protobuf::internal::RepeatedPtrFieldBase::CloseGap((uint64_t)v27, v18, v28);
      }
    }
    else
    {
      uint64_t v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>((google::protobuf::Arena *)v30);
      a2[6] = v31;
      int v32 = *((_DWORD *)a2 + 15);
      int v27 = (void *)((char *)v31 + 16);
      if (v32 == 27) {
        goto LABEL_43;
      }
LABEL_46:
      uint64_t v28 = (dword_26AEE1850 - v18);
      if ((int)v28 >= 1) {
        goto LABEL_47;
      }
    }
  }
  return 1;
}

void sub_23CC48D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveIntAbs(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  LODWORD(v82[0]) = *((_DWORD *)a2 + 4);
  LODWORD(v81[0]) = 0;
  if (LODWORD(v82[0])) {
    google::MakeCheckOpString<int,int>((int)v82, (int)v81, "ct->enforcement_literal_size() == 0");
  }
  uint64_t v4 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (*((unsigned char *)v4 + 504)) {
    return 0;
  }
  if (*((_DWORD *)a2 + 15) == 9) {
    uint64_t v6 = (uint64_t *)*((void *)a2 + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  }
  int v7 = (const char *)*((unsigned int *)v6 + 9);
  int v8 = *(_DWORD *)v6[3];
  if (~v8 <= v8) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = ~v8;
  }
  operations_research::sat::PresolveContext::DomainOf(v4, (const char *)v9, v82);
  operations_research::Domain::Negation((operations_research::Domain *)v82, v10, &v77);
  operations_research::Domain::UnionWith((operations_research::Domain *)v82, (const operations_research::Domain *)&v77, (unint64_t *)&v79);
  operations_research::Domain::Domain(&v75, 0, 0x7FFFFFFFFFFFFFFFLL);
  operations_research::Domain::IntersectionWith(&v79, (const operations_research::Domain *)&v75, v81);
  if (v75)
  {
    operator delete(v76[0]);
    if ((v79 & 1) == 0)
    {
LABEL_12:
      if ((v77 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else if ((v79 & 1) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v80[0]);
  if (v77) {
LABEL_13:
  }
    operator delete(__p);
LABEL_14:
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v7, (unint64_t *)&v79);
  char IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v79, (const operations_research::Domain *)v81);
  if (v79) {
    operator delete(v80[0]);
  }
  if ((IsIncludedIn & 1) == 0)
  {
    if ((operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), v7, (const operations_research::Domain *)v81, 0) & 1) == 0)
    {
      uint64_t v5 = 1;
      if ((v81[0] & 1) == 0) {
        goto LABEL_126;
      }
LABEL_125:
      operator delete((void *)v81[1]);
      goto LABEL_126;
    }
    uint64_t v12 = *((void *)this + 2);
    uint64_t v79 = operator new(0x28uLL);
    *(_OWORD *)uint64_t v80 = xmmword_23CE7EC80;
    strcpy((char *)v79, "int_abs: propagate domain x to abs(x)");
    operations_research::sat::PresolveContext::UpdateRuleStats(v12, (uint64_t)&v79);
    if (SHIBYTE(v80[1]) < 0) {
      operator delete(v79);
    }
  }
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v7, (unint64_t *)&v79);
  operations_research::Domain::Negation((operations_research::Domain *)&v79, v13, (unint64_t *)&v75);
  operations_research::Domain::UnionWith((operations_research::Domain *)&v79, (const operations_research::Domain *)&v75, &v77);
  if (v75) {
    operator delete(v76[0]);
  }
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9, (unint64_t *)&v75);
  char v14 = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v75, (const operations_research::Domain *)&v77);
  if (v75) {
    operator delete(v76[0]);
  }
  if ((v14 & 1) == 0)
  {
    if ((operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9, (const operations_research::Domain *)&v77, 0) & 1) == 0)goto LABEL_121; {
    uint64_t v15 = *((void *)this + 2);
    }
    int v75 = operator new(0x28uLL);
    *(_OWORD *)unsigned int v76 = xmmword_23CE7EC80;
    strcpy((char *)v75, "int_abs: propagate domain abs(x) to x");
    operations_research::sat::PresolveContext::UpdateRuleStats(v15, (uint64_t)&v75);
    if (SHIBYTE(v76[1]) < 0) {
      operator delete(v75);
    }
  }
  if ((operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9) & 0x8000000000000000) == 0&& !operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9))
  {
    uint64_t v21 = *((void *)this + 2);
    int v75 = operator new(0x20uLL);
    *(_OWORD *)unsigned int v76 = xmmword_23CE7E3F0;
    strcpy((char *)v75, "int_abs: converted to equality");
    operations_research::sat::PresolveContext::UpdateRuleStats(v21, (uint64_t)&v75);
    if (SHIBYTE(v76[1]) < 0) {
      operator delete(v75);
    }
    uint64_t v22 = *(void *)(*((void *)this + 2) + 48);
    int v23 = *(int **)(v22 + 56);
    if (v23)
    {
      uint64_t v24 = *(int *)(v22 + 48);
      int v25 = *v23;
      if ((int)v24 < *v23)
      {
        *(_DWORD *)(v22 + 48) = v24 + 1;
        unint64_t v26 = *(void *)&v23[2 * v24 + 2];
        goto LABEL_62;
      }
      if (v25 != *(_DWORD *)(v22 + 52))
      {
LABEL_61:
        *int v23 = v25 + 1;
        unint64_t v26 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v22 + 40));
        uint64_t v34 = *(void *)(v22 + 56);
        uint64_t v35 = *(int *)(v22 + 48);
        *(_DWORD *)(v22 + 48) = v35 + 1;
        *(void *)(v34 + 8 * v35 + 8) = v26;
LABEL_62:
        unint64_t v36 = (std::string **)(v26 + 40);
        uint64_t v37 = *(void *)(v26 + 8);
        uint64_t v38 = (google::protobuf::Arena *)(v37 & 0xFFFFFFFFFFFFFFFELL);
        if (v37)
        {
          uint64_t v38 = *(google::protobuf::Arena **)v38;
          char v39 = *v36;
          if (*v36 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_64;
          }
        }
        else
        {
          char v39 = *v36;
          if (*v36 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_64:
            std::string::operator=(v39, *((const std::string **)a2 + 5));
            goto LABEL_83;
          }
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v36, v38, *((long long **)a2 + 5));
LABEL_83:
        if (*(_DWORD *)(v26 + 60) == 12)
        {
          uint64_t v49 = *(void *)(v26 + 48);
          uint64_t v51 = *(unsigned int *)(v49 + 16);
          uint64_t v50 = (unsigned int *)(v49 + 16);
          unsigned int v52 = v51 + 1;
          if (v51 != *(_DWORD *)(v49 + 20)) {
            goto LABEL_90;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v26);
          *(_DWORD *)(v26 + 60) = 12;
          uint64_t v53 = *(void *)(v26 + 8);
          uint64_t v54 = (google::protobuf::Arena *)(v53 & 0xFFFFFFFFFFFFFFFELL);
          if (v53) {
            uint64_t v54 = *(google::protobuf::Arena **)v54;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v54);
          uint64_t v49 = v55;
          *(void *)(v26 + 48) = v55;
          uint64_t v51 = *(unsigned int *)(v55 + 16);
          uint64_t v50 = (unsigned int *)(v55 + 16);
          unsigned int v52 = v51 + 1;
          if (v51 != *(_DWORD *)(v55 + 20)) {
            goto LABEL_90;
          }
        }
        google::protobuf::RepeatedField<int>::Reserve(v50, v52);
LABEL_90:
        *(_DWORD *)(*(void *)(v49 + 24) + 4 * v51) = v7;
        uint64_t v56 = *(unsigned int *)(v49 + 40);
        *(_DWORD *)(v49 + 16) = v52;
        if (v56 == *(_DWORD *)(v49 + 44))
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v49 + 40), v56 + 1);
          unsigned int v52 = *v50;
        }
        *(void *)(*(void *)(v49 + 48) + 8 * v56) = 1;
        *(_DWORD *)(v49 + 40) = v56 + 1;
        if (v52 == *(_DWORD *)(v49 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve(v50, v52 + 1);
        }
        *(_DWORD *)(*(void *)(v49 + 24) + 4 * v52) = v9;
        *(_DWORD *)(v49 + 16) = v52 + 1;
        uint64_t v57 = *(unsigned int *)(v49 + 40);
        if (v57 == *(_DWORD *)(v49 + 44)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v49 + 40), v57 + 1);
        }
        uint64_t v58 = (_DWORD *)(v49 + 64);
        uint64_t v59 = *(unsigned int *)(v49 + 64);
        *(void *)(*(void *)(v49 + 48) + 8 * v57) = -1;
        *(_DWORD *)(v49 + 40) = v57 + 1;
        int v60 = *(_DWORD *)(v49 + 68);
        unsigned int v61 = v59 + 1;
        if (v59 == v60)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v49 + 64), v59 + 1);
          int v60 = *(_DWORD *)(v49 + 68);
        }
        uint64_t v62 = *(void *)(v49 + 72);
        *(void *)(v62 + 8 * v59) = 0;
        *(_DWORD *)(v49 + 64) = v61;
        int v63 = v59 + 2;
        if (v61 == v60)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v49 + 64), v59 + 2);
          uint64_t v62 = *(void *)(v49 + 72);
        }
        goto LABEL_120;
      }
    }
    else
    {
      int v25 = *(_DWORD *)(v22 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v22 + 40), v25 + 1);
    int v23 = *(int **)(v22 + 56);
    int v25 = *v23;
    goto LABEL_61;
  }
  if (operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9) <= 0&& !operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9))
  {
    uint64_t v28 = *((void *)this + 2);
    int v75 = operator new(0x20uLL);
    *(_OWORD *)unsigned int v76 = xmmword_23CE7E3F0;
    strcpy((char *)v75, "int_abs: converted to equality");
    operations_research::sat::PresolveContext::UpdateRuleStats(v28, (uint64_t)&v75);
    if (SHIBYTE(v76[1]) < 0) {
      operator delete(v75);
    }
    uint64_t v29 = *(void *)(*((void *)this + 2) + 48);
    unint64_t v30 = *(int **)(v29 + 56);
    if (v30)
    {
      uint64_t v31 = *(int *)(v29 + 48);
      int v32 = *v30;
      if ((int)v31 < *v30)
      {
        *(_DWORD *)(v29 + 48) = v31 + 1;
        unint64_t v33 = *(void *)&v30[2 * v31 + 2];
        goto LABEL_77;
      }
      if (v32 != *(_DWORD *)(v29 + 52))
      {
LABEL_76:
        int *v30 = v32 + 1;
        unint64_t v33 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v29 + 40));
        uint64_t v43 = *(void *)(v29 + 56);
        uint64_t v44 = *(int *)(v29 + 48);
        *(_DWORD *)(v29 + 48) = v44 + 1;
        *(void *)(v43 + 8 * v44 + 8) = v33;
LABEL_77:
        uint64_t v45 = (std::string **)(v33 + 40);
        uint64_t v46 = *(void *)(v33 + 8);
        uint64_t v47 = (google::protobuf::Arena *)(v46 & 0xFFFFFFFFFFFFFFFELL);
        if (v46)
        {
          uint64_t v47 = *(google::protobuf::Arena **)v47;
          uint64_t v48 = *v45;
          if (*v45 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_79;
          }
        }
        else
        {
          uint64_t v48 = *v45;
          if (*v45 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_79:
            std::string::operator=(v48, *((const std::string **)a2 + 5));
LABEL_103:
            if (*(_DWORD *)(v33 + 60) == 12)
            {
              uint64_t v64 = *(void *)(v33 + 48);
            }
            else
            {
              operations_research::sat::ConstraintProto::clear_constraint(v33);
              *(_DWORD *)(v33 + 60) = 12;
              uint64_t v65 = *(void *)(v33 + 8);
              uint64_t v66 = (google::protobuf::Arena *)(v65 & 0xFFFFFFFFFFFFFFFELL);
              if (v65) {
                uint64_t v66 = *(google::protobuf::Arena **)v66;
              }
              google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v66);
              uint64_t v64 = v67;
              *(void *)(v33 + 48) = v67;
            }
            uint64_t v68 = *(unsigned int *)(v64 + 16);
            unsigned int v69 = v68 + 1;
            if (v68 == *(_DWORD *)(v64 + 20)) {
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v64 + 16), v68 + 1);
            }
            *(_DWORD *)(*(void *)(v64 + 24) + 4 * v68) = v7;
            uint64_t v70 = *(unsigned int *)(v64 + 40);
            *(_DWORD *)(v64 + 16) = v69;
            if (v70 == *(_DWORD *)(v64 + 44))
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v64 + 40), v70 + 1);
              unsigned int v69 = *(_DWORD *)(v64 + 16);
            }
            *(void *)(*(void *)(v64 + 48) + 8 * v70) = 1;
            *(_DWORD *)(v64 + 40) = v70 + 1;
            if (v69 == *(_DWORD *)(v64 + 20)) {
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v64 + 16), v69 + 1);
            }
            *(_DWORD *)(*(void *)(v64 + 24) + 4 * v69) = v9;
            *(_DWORD *)(v64 + 16) = v69 + 1;
            uint64_t v71 = *(unsigned int *)(v64 + 40);
            if (v71 == *(_DWORD *)(v64 + 44)) {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v64 + 40), v71 + 1);
            }
            uint64_t v58 = (_DWORD *)(v64 + 64);
            uint64_t v72 = *(unsigned int *)(v64 + 64);
            *(void *)(*(void *)(v64 + 48) + 8 * v71) = 1;
            *(_DWORD *)(v64 + 40) = v71 + 1;
            int v73 = *(_DWORD *)(v64 + 68);
            unsigned int v61 = v72 + 1;
            if (v72 == v73)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v64 + 64), v72 + 1);
              int v73 = *(_DWORD *)(v64 + 68);
            }
            uint64_t v62 = *(void *)(v64 + 72);
            *(void *)(v62 + 8 * v72) = 0;
            *(_DWORD *)(v64 + 64) = v61;
            int v63 = v72 + 2;
            if (v61 == v73)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v64 + 64), v72 + 2);
              uint64_t v62 = *(void *)(v64 + 72);
            }
LABEL_120:
            *(void *)(v62 + 8 * v61) = 0;
            *uint64_t v58 = v63;
            operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                         + 2));
            operations_research::sat::ConstraintProto::Clear(a2);
            goto LABEL_121;
          }
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v45, v47, *((long long **)a2 + 5));
        goto LABEL_103;
      }
    }
    else
    {
      int v32 = *(_DWORD *)(v29 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v29 + 40), v32 + 1);
    unint64_t v30 = *(int **)(v29 + 56);
    int v32 = *v30;
    goto LABEL_76;
  }
  if (operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), (int)v7)|| operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v7))
  {
    if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v7))
    {
LABEL_70:
      uint64_t v42 = *((void *)this + 2);
      int v75 = operator new(0x20uLL);
      *(_OWORD *)unsigned int v76 = xmmword_23CE7E7C0;
      strcpy((char *)v75, "int_abs: remove constraint");
      operations_research::sat::PresolveContext::UpdateRuleStats(v42, (uint64_t)&v75);
      if (SHIBYTE(v76[1]) < 0) {
        operator delete(v75);
      }
      operations_research::sat::ConstraintProto::Clear(a2);
LABEL_121:
      uint64_t v5 = 1;
      if ((v77 & 1) == 0) {
        goto LABEL_123;
      }
      goto LABEL_122;
    }
    operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), (int)v7);
    uint64_t v16 = *(void *)(*((void *)this + 2) + 56);
    uint64_t v17 = *(int **)(v16 + 56);
    if (v17)
    {
      uint64_t v18 = *(int *)(v16 + 48);
      int v19 = *v17;
      if ((int)v18 < *v17)
      {
        *(_DWORD *)(v16 + 48) = v18 + 1;
        uint64_t v20 = *(operations_research::sat::ConstraintProto **)&v17[2 * v18 + 2];
LABEL_69:
        operations_research::sat::ConstraintProto::CopyFrom(v20, a2);
        goto LABEL_70;
      }
      if (v19 != *(_DWORD *)(v16 + 52))
      {
LABEL_68:
        *uint64_t v17 = v19 + 1;
        uint64_t v20 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v16 + 40));
        uint64_t v40 = *(void *)(v16 + 56);
        uint64_t v41 = *(int *)(v16 + 48);
        *(_DWORD *)(v16 + 48) = v41 + 1;
        *(void *)(v40 + 8 * v41 + 8) = v20;
        goto LABEL_69;
      }
    }
    else
    {
      int v19 = *(_DWORD *)(v16 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v16 + 40), v19 + 1);
    uint64_t v17 = *(int **)(v16 + 56);
    int v19 = *v17;
    goto LABEL_68;
  }
  if (operations_research::sat::PresolveContext::StoreAbsRelation(*((operations_research::sat::PresolveContext **)this + 2), (int)v7, v9))
  {
    uint64_t v27 = *((void *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(&v75, "int_abs: store abs(x) == y");
    operations_research::sat::PresolveContext::UpdateRuleStats(v27, (uint64_t)&v75);
    if (SHIBYTE(v76[1]) < 0) {
      operator delete(v75);
    }
  }
  uint64_t v5 = 0;
  if (v77) {
LABEL_122:
  }
    operator delete(__p);
LABEL_123:
  if ((v79 & 1) == 0)
  {
    if ((v81[0] & 1) == 0) {
      goto LABEL_126;
    }
    goto LABEL_125;
  }
  operator delete(v80[0]);
  if (v81[0]) {
    goto LABEL_125;
  }
LABEL_126:
  if (v82[0]) {
    operator delete((void *)v82[1]);
  }
  return v5;
}

void sub_23CC4980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC49814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,char a28,void *a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a17);
  }
  if (a19) {
    operator delete(a20);
  }
  if (a25) {
    operator delete(a26);
  }
  if (a28) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConstraintProto::set_name(uint64_t a1, std::string *__str)
{
  uint64_t v4 = (std::string **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (google::protobuf::Arena *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (v5)
  {
    uint64_t v6 = *(google::protobuf::Arena **)v6;
    int v7 = *v4;
    if (*v4 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_3;
    }
  }
  else
  {
    int v7 = *v4;
    if (*v4 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v7, __str);
      return;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v4, v6, (long long *)__str);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveIntMin(operations_research::sat::CpModelPresolver *this, const operations_research::sat::IntegerArgumentProto **a2)
{
  if (!*(unsigned char *)(*((void *)this + 2) + 504))
  {
    if (*((_DWORD *)a2 + 15) == 10)
    {
      operations_research::sat::IntegerArgumentProto::IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)v21, a2[6]);
      if (*((_DWORD *)a2 + 15) != 9) {
        goto LABEL_5;
      }
    }
    else
    {
      operations_research::sat::IntegerArgumentProto::IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)v21, (const operations_research::sat::IntegerArgumentProto *)&operations_research::sat::_IntegerArgumentProto_default_instance_);
      if (*((_DWORD *)a2 + 15) != 9)
      {
LABEL_5:
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 9;
        unint64_t v5 = (unint64_t)a2[1];
        uint64_t v6 = (google::protobuf::Arena *)(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          uint64_t v6 = *(google::protobuf::Arena **)v6;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v6);
        a2[6] = v7;
        uint64_t v8 = v22;
        *((_DWORD *)v7 + 9) = ~v24;
        if (!v8) {
          goto LABEL_20;
        }
LABEL_11:
        unint64_t v9 = v23;
        uint64_t v10 = 4 * v8;
        while (1)
        {
          int v11 = *v9;
          if (*((_DWORD *)a2 + 15) != 9) {
            break;
          }
          uint64_t v12 = a2[6];
          uint64_t v14 = *((unsigned int *)v12 + 4);
          uint64_t v13 = (unsigned int *)((char *)v12 + 16);
          int v15 = v14 + 1;
          if (v14 == *((_DWORD *)v12 + 5)) {
            goto LABEL_19;
          }
LABEL_12:
          *(_DWORD *)(*((void *)v12 + 3) + 4 * v14) = ~v11;
          *((_DWORD *)v12 + 4) = v15;
          ++v9;
          v10 -= 4;
          if (!v10) {
            goto LABEL_20;
          }
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 9;
        unint64_t v16 = (unint64_t)a2[1];
        uint64_t v17 = (google::protobuf::Arena *)(v16 & 0xFFFFFFFFFFFFFFFELL);
        if (v16) {
          uint64_t v17 = *(google::protobuf::Arena **)v17;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v17);
        uint64_t v12 = (const operations_research::sat::IntegerArgumentProto *)v18;
        a2[6] = (const operations_research::sat::IntegerArgumentProto *)v18;
        uint64_t v14 = v18[4];
        unsigned int v19 = v18[5];
        uint64_t v13 = v18 + 4;
        int v15 = v14 + 1;
        if (v14 != v19) {
          goto LABEL_12;
        }
LABEL_19:
        google::protobuf::RepeatedField<int>::Reserve(v13, v15);
        goto LABEL_12;
      }
    }
    uint64_t v8 = v22;
    *((_DWORD *)a2[6] + 9) = ~v24;
    if (!v8)
    {
LABEL_20:
      uint64_t v2 = operations_research::sat::CpModelPresolver::PresolveIntMax(this, (operations_research::sat::ConstraintProto *)a2);
      operations_research::sat::IntegerArgumentProto::~IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)v21);
      return v2;
    }
    goto LABEL_11;
  }
  return 0;
}

void sub_23CC49B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CC49BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::CpModelPresolver::PresolveIntProd(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504) || *((_DWORD *)a2 + 4)) {
    goto LABEL_3;
  }
  uint64_t v6 = 0;
  char v3 = 0;
  uint64_t v7 = 1;
  while (*((_DWORD *)a2 + 15) == 11)
  {
    unint64_t v9 = (uint64_t *)*((void *)a2 + 6);
    if (v6 >= *((int *)v9 + 4)) {
      goto LABEL_22;
    }
LABEL_13:
    int v10 = *(_DWORD *)(v9[3] + 4 * v6);
    operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), v10, (uint64_t)&__p);
    int v11 = (int)__p;
    if (__p != v10 && v152[1] == 0)
    {
      if (*((_DWORD *)a2 + 15) == 11)
      {
        uint64_t v8 = *((void *)a2 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 11;
        uint64_t v13 = *((void *)a2 + 1);
        uint64_t v14 = (google::protobuf::Arena *)(v13 & 0xFFFFFFFFFFFFFFFELL);
        if (v13) {
          uint64_t v14 = *(google::protobuf::Arena **)v14;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v14);
        *((void *)a2 + 6) = v8;
        int v11 = (int)__p;
      }
      *(_DWORD *)(*(void *)(v8 + 24) + 4 * v6) = v11;
      v7 *= (uint64_t)v152[0];
      char v3 = 1;
    }
    ++v6;
  }
  unint64_t v9 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  if (v6 < dword_26AEE1880) {
    goto LABEL_13;
  }
LABEL_22:
  if (v7 == 1) {
    goto LABEL_23;
  }
  uint64_t v18 = *((void *)this + 2);
  __n128 __p = operator new(0x30uLL);
  *(_OWORD *)uint64_t v152 = xmmword_23CE85CD0;
  strcpy((char *)__p, "int_prod: extracted product by constant.");
  operations_research::sat::PresolveContext::UpdateRuleStats(v18, (uint64_t)&__p);
  if (SHIBYTE(v152[1]) < 0) {
    operator delete(__p);
  }
  if (*((_DWORD *)a2 + 15) == 11)
  {
    unint64_t v19 = *(unsigned int *)(*((void *)a2 + 6) + 36);
    uint64_t v20 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
    uint64_t v21 = *((void *)v20 + 6);
    int v22 = (const char *)*(unsigned int *)(v21 + 24);
    int v23 = *(int **)(v21 + 32);
    if (v23) {
      goto LABEL_30;
    }
LABEL_50:
    int v24 = *(_DWORD *)(v21 + 28);
LABEL_63:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v21 + 16), v24 + 1);
    int v23 = *(int **)(v21 + 32);
    int v24 = *v23;
LABEL_64:
    *int v23 = v24 + 1;
    unint64_t v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v21 + 16));
    uint64_t v42 = *(void *)(v21 + 32);
    uint64_t v43 = *(int *)(v21 + 24);
    *(_DWORD *)(v21 + 24) = v43 + 1;
    *(void *)(v42 + 8 * v43 + 8) = v25;
    uint64_t v20 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  }
  else
  {
    unint64_t v19 = dword_26AEE1894;
    uint64_t v20 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
    uint64_t v21 = *((void *)v20 + 6);
    int v22 = (const char *)*(unsigned int *)(v21 + 24);
    int v23 = *(int **)(v21 + 32);
    if (!v23) {
      goto LABEL_50;
    }
LABEL_30:
    int v24 = *v23;
    if ((int)v22 >= *v23)
    {
      if (v24 == *(_DWORD *)(v21 + 28)) {
        goto LABEL_63;
      }
      goto LABEL_64;
    }
    *(_DWORD *)(v21 + 24) = v22 + 1;
    unint64_t v25 = *(void *)&v23[2 * (int)v22 + 2];
  }
  operations_research::sat::PresolveContext::DomainOf(v20, (const char *)v19, (unint64_t *)&v149);
  operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v149, v7, (unint64_t *)&__p);
  *(_DWORD *)(v25 + 16) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 16), (unint64_t)__p >> 1);
  uint64_t v45 = __p & 1;
  if (__p) {
    uint64_t v46 = (void **)v152[0];
  }
  else {
    uint64_t v46 = v152;
  }
  if ((unint64_t)__p >= 2)
  {
    unsigned int v142 = v19;
    uint64_t v143 = v22;
    char v145 = v3;
    uint64_t v47 = &v46[2 * ((unint64_t)__p >> 1)];
    unsigned int v48 = *(_DWORD *)(v25 + 16);
    do
    {
      uint64_t v49 = *v46;
      int v50 = *(_DWORD *)(v25 + 20);
      unsigned int v51 = v48 + 1;
      if (v48 == v50)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 16), v48 + 1);
        int v50 = *(_DWORD *)(v25 + 20);
      }
      uint64_t v52 = *(void *)(v25 + 24);
      *(void *)(v52 + 8 * v48) = v49;
      *(_DWORD *)(v25 + 16) = v51;
      uint64_t v53 = v46[1];
      v48 += 2;
      if (v51 == v50)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 16), v48);
        uint64_t v52 = *(void *)(v25 + 24);
      }
      *(void *)(v52 + 8 * v51) = v53;
      *(_DWORD *)(v25 + 16) = v48;
      v46 += 2;
    }
    while (v46 != v47);
    uint64_t v45 = __p & 1;
    char v3 = v145;
    int v22 = v143;
    unint64_t v19 = v142;
  }
  if (v45) {
    operator delete(v152[0]);
  }
  if (v149) {
    operator delete(v150[0]);
  }
  operations_research::sat::PresolveContext::InitializeNewDomains(*((operations_research::sat::PresolveContext **)this + 2), v44);
  uint64_t v54 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (*((unsigned char *)v54 + 504)) {
    goto LABEL_3;
  }
  if (*((_DWORD *)a2 + 15) == 11)
  {
    uint64_t v55 = *((void *)a2 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 11;
    uint64_t v56 = *((void *)a2 + 1);
    uint64_t v57 = (google::protobuf::Arena *)(v56 & 0xFFFFFFFFFFFFFFFELL);
    if (v56) {
      uint64_t v57 = *(google::protobuf::Arena **)v57;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v57);
    uint64_t v55 = v58;
    *((void *)a2 + 6) = v58;
    uint64_t v54 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  }
  *(_DWORD *)(v55 + 36) = v22;
  BOOL IsFixed = operations_research::sat::PresolveContext::IsFixed(v54, v22);
  int v60 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (!IsFixed)
  {
    if (!operations_research::sat::PresolveContext::StoreAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v19, v22, v7, 0))
    {
      int v144 = (int)v22;
      char v146 = v3;
      uint64_t v62 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
      operations_research::sat::ConstraintProto::mutable_linear(v62);
      uint64_t v64 = v63;
      uint64_t v66 = (unsigned int *)(v63 + 16);
      uint64_t v65 = *(unsigned int *)(v63 + 16);
      unsigned int v67 = v65 + 1;
      if (v65 == *(_DWORD *)(v63 + 20)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v63 + 16), v65 + 1);
      }
      *(_DWORD *)(*(void *)(v64 + 24) + 4 * v65) = v19;
      uint64_t v68 = *(unsigned int *)(v64 + 40);
      *(_DWORD *)(v64 + 16) = v67;
      if (v68 == *(_DWORD *)(v64 + 44))
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v64 + 40), v68 + 1);
        unsigned int v67 = *v66;
      }
      *(void *)(*(void *)(v64 + 48) + 8 * v68) = 1;
      *(_DWORD *)(v64 + 40) = v68 + 1;
      if (v67 == *(_DWORD *)(v64 + 20)) {
        google::protobuf::RepeatedField<int>::Reserve(v66, v67 + 1);
      }
      *(_DWORD *)(*(void *)(v64 + 24) + 4 * v67) = v144;
      *(_DWORD *)(v64 + 16) = v67 + 1;
      uint64_t v69 = *(unsigned int *)(v64 + 40);
      if (v69 == *(_DWORD *)(v64 + 44)) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v64 + 40), v69 + 1);
      }
      uint64_t v70 = *(unsigned int *)(v64 + 64);
      *(void *)(*(void *)(v64 + 48) + 8 * v69) = -v7;
      *(_DWORD *)(v64 + 40) = v69 + 1;
      int v71 = *(_DWORD *)(v64 + 68);
      unsigned int v72 = v70 + 1;
      char v3 = v146;
      if (v70 == v71)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v64 + 64), v70 + 1);
        int v71 = *(_DWORD *)(v64 + 68);
      }
      uint64_t v73 = *(void *)(v64 + 72);
      *(void *)(v73 + 8 * v70) = 0;
      *(_DWORD *)(v64 + 64) = v72;
      int v74 = v70 + 2;
      if (v72 == v71)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v64 + 64), v74);
        uint64_t v73 = *(void *)(v64 + 72);
      }
      *(void *)(v73 + 8 * v72) = 0;
      *(_DWORD *)(v64 + 64) = v74;
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
    }
    goto LABEL_23;
  }
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v22, (unint64_t *)&v149);
  operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v149, 0, v7, (unint64_t *)&__p);
  char v61 = operations_research::sat::PresolveContext::IntersectDomainWith(v60, (const char *)v19, (const operations_research::Domain *)&__p, 0);
  if (__p)
  {
    operator delete(v152[0]);
    if (v149) {
      goto LABEL_127;
    }
LABEL_89:
    if ((v61 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_23:
    operations_research::Domain::Domain(&__p, 1);
    int v15 = *((_DWORD *)a2 + 15);
    if (v15 == 11)
    {
      unint64_t v16 = (uint64_t *)*((void *)a2 + 6);
      uint64_t v17 = *((int *)v16 + 4);
      if (!v17) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v16 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      uint64_t v17 = dword_26AEE1880;
      if (!dword_26AEE1880) {
        goto LABEL_40;
      }
    }
    unint64_t v26 = (unsigned int *)v16[3];
    uint64_t v27 = 4 * v17;
    do
    {
      operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*v26, v148);
      operations_research::Domain::ContinuousMultiplicationBy((operations_research::Domain *)&__p, (const operations_research::Domain *)v148, (unint64_t *)&v149, v28);
      if (__p) {
        operator delete(v152[0]);
      }
      __n128 __p = v149;
      *(_OWORD *)uint64_t v152 = *(_OWORD *)v150;
      int v149 = 0;
      if (v148[0]) {
        operator delete((void *)v148[1]);
      }
      ++v26;
      v27 -= 4;
    }
    while (v27);
    int v15 = *((_DWORD *)a2 + 15);
LABEL_40:
    LOBYTE(v148[0]) = 0;
    uint64_t v29 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
    unint64_t v30 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
    if (v15 == 11) {
      unint64_t v30 = (uint64_t *)*((void *)a2 + 6);
    }
    if ((operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*((unsigned int *)v30 + 9), (const operations_research::Domain *)&__p, (BOOL *)v148) & 1) == 0)goto LABEL_151; {
    if (LOBYTE(v148[0]))
    }
    {
      uint64_t v31 = *((void *)this + 2);
      int v149 = operator new(0x28uLL);
      *(_OWORD *)uint64_t v150 = xmmword_23CE7E400;
      strcpy((char *)v149, "int_prod: reduced target domain.");
      operations_research::sat::PresolveContext::UpdateRuleStats(v31, (uint64_t)&v149);
      if (SHIBYTE(v150[1]) < 0) {
        operator delete(v149);
      }
    }
    if (*((_DWORD *)a2 + 15) == 11)
    {
      int v32 = (uint64_t *)*((void *)a2 + 6);
      if (*((_DWORD *)v32 + 4) != 2)
      {
LABEL_48:
        uint64_t v29 = (uint64_t *)*((void *)a2 + 6);
        goto LABEL_110;
      }
    }
    else
    {
      int v32 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      if (dword_26AEE1880 != 2) {
        goto LABEL_110;
      }
    }
    unint64_t v33 = (unsigned int *)v32[3];
    unsigned int v34 = *v33;
    unsigned int v35 = v33[1];
    unint64_t v36 = (const char *)*((unsigned int *)v32 + 9);
    BOOL v37 = operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v35);
    if (v37) {
      unint64_t v38 = v35;
    }
    else {
      unint64_t v38 = v34;
    }
    if (v37) {
      unsigned int v39 = v34;
    }
    else {
      unsigned int v39 = v35;
    }
    if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v38))
    {
      uint64_t v40 = (operations_research::sat::CpModelProto **)*((void *)this + 2);
      if (v39 != v36)
      {
        uint64_t v89 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(v40[6]);
        operations_research::sat::ConstraintProto::mutable_linear(v89);
        uint64_t v91 = v90;
        uint64_t v94 = *(unsigned int *)(v90 + 16);
        int v93 = *(_DWORD *)(v90 + 20);
        int v92 = (unsigned int *)(v90 + 16);
        if (v94 == v93) {
          google::protobuf::RepeatedField<int>::Reserve(v92, v94 + 1);
        }
        *(_DWORD *)(*(void *)(v91 + 24) + 4 * v94) = v39;
        *(_DWORD *)(v91 + 16) = v94 + 1;
        operations_research::sat::ConstraintProto::mutable_linear(v89);
        uint64_t v96 = v95;
        uint64_t v97 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v38);
        uint64_t v98 = *(unsigned int *)(v96 + 40);
        if (v98 == *(_DWORD *)(v96 + 44)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v96 + 40), v98 + 1);
        }
        *(void *)(*(void *)(v96 + 48) + 8 * v98) = v97;
        *(_DWORD *)(v96 + 40) = v98 + 1;
        operations_research::sat::ConstraintProto::mutable_linear(v89);
        uint64_t v100 = v99;
        uint64_t v103 = *(unsigned int *)(v99 + 16);
        int v102 = *(_DWORD *)(v99 + 20);
        unint64_t v101 = (unsigned int *)(v99 + 16);
        if (v103 == v102) {
          google::protobuf::RepeatedField<int>::Reserve(v101, v103 + 1);
        }
        *(_DWORD *)(*(void *)(v100 + 24) + 4 * v103) = v36;
        *(_DWORD *)(v100 + 16) = v103 + 1;
        operations_research::sat::ConstraintProto::mutable_linear(v89);
        uint64_t v105 = v104;
        uint64_t v108 = *(unsigned int *)(v104 + 40);
        int v107 = *(_DWORD *)(v104 + 44);
        uint64_t v106 = (unsigned int *)(v104 + 40);
        if (v108 == v107) {
          google::protobuf::RepeatedField<long long>::Reserve(v106, v108 + 1);
        }
        *(void *)(*(void *)(v105 + 48) + 8 * v108) = -1;
        *(_DWORD *)(v105 + 40) = v108 + 1;
        operations_research::sat::ConstraintProto::mutable_linear(v89);
        uint64_t v110 = v109;
        uint64_t v113 = *(unsigned int *)(v109 + 64);
        int v112 = *(_DWORD *)(v109 + 68);
        int64_t v111 = (unsigned int *)(v109 + 64);
        if (v113 == v112) {
          google::protobuf::RepeatedField<long long>::Reserve(v111, v113 + 1);
        }
        *(void *)(*(void *)(v110 + 72) + 8 * v113) = 0;
        *(_DWORD *)(v110 + 64) = v113 + 1;
        operations_research::sat::ConstraintProto::mutable_linear(v89);
        uint64_t v115 = v114;
        uint64_t v118 = *(unsigned int *)(v114 + 64);
        int v117 = *(_DWORD *)(v114 + 68);
        uint64_t v116 = (unsigned int *)(v114 + 64);
        if (v118 == v117) {
          google::protobuf::RepeatedField<long long>::Reserve(v116, v118 + 1);
        }
        *(void *)(*(void *)(v115 + 72) + 8 * v118) = 0;
        *(_DWORD *)(v115 + 64) = v118 + 1;
        operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                     + 2));
        uint64_t v119 = *((void *)this + 2);
        std::string::basic_string[abi:ne180100]<0>(&v149, "int_prod: linearize product by constant.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v119, (uint64_t)&v149);
        if (SHIBYTE(v150[1]) < 0) {
          operator delete(v149);
        }
        goto LABEL_143;
      }
      if (operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v40, (const char *)v38) != 1)
      {
        BOOL v147 = 0;
        int v123 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
        operations_research::Domain::Domain(&v149, 0, 0);
        char v3 = operations_research::sat::PresolveContext::IntersectDomainWith(v123, v36, (const operations_research::Domain *)&v149, &v147);
        if (v149) {
          operator delete(v150[0]);
        }
        if (v3)
        {
          uint64_t v124 = *((void *)this + 2);
          std::string::basic_string[abi:ne180100]<0>(&v149, "int_prod: fix variable to zero.");
          operations_research::sat::PresolveContext::UpdateRuleStats(v124, (uint64_t)&v149);
          if (SHIBYTE(v150[1]) < 0) {
            operator delete(v149);
          }
          operations_research::sat::ConstraintProto::Clear(a2);
        }
        goto LABEL_176;
      }
      uint64_t v41 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v149, "int_prod: remove identity.");
      operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)&v149);
LABEL_148:
      if (SHIBYTE(v150[1]) < 0) {
        operator delete(v149);
      }
LABEL_143:
      operations_research::sat::ConstraintProto::Clear(a2);
LABEL_175:
      char v3 = 1;
LABEL_176:
      if (__p) {
        operator delete(v152[0]);
      }
      return v3 & 1;
    }
    if (v38 == v39 && v38 == v36)
    {
      uint64_t v120 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
      operations_research::Domain::Domain(&v149, 0, 1);
      char v121 = operations_research::sat::PresolveContext::IntersectDomainWith(v120, v36, (const operations_research::Domain *)&v149, 0);
      if (v149) {
        operator delete(v150[0]);
      }
      if ((v121 & 1) == 0) {
        goto LABEL_151;
      }
      uint64_t v122 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v149, "int_prod: fix variable to zero or one.");
      operations_research::sat::PresolveContext::UpdateRuleStats(v122, (uint64_t)&v149);
      goto LABEL_148;
    }
    if (*((_DWORD *)a2 + 15) == 11) {
      goto LABEL_48;
    }
LABEL_110:
    unsigned int v76 = (const char *)*((unsigned int *)v29 + 9);
    if ((v76 & 0x80000000) != 0) {
      goto LABEL_176;
    }
    uint64_t v77 = *((int *)v29 + 4);
    if (v77)
    {
      uint64_t v78 = (unsigned int *)v29[3];
      uint64_t v79 = 4 * v77;
      do
      {
        uint64_t v80 = (const char *)*v78;
        if ((v80 & 0x80000000) != 0
          || operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*v78) < 0|| operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v80) >= 2)
        {
          goto LABEL_176;
        }
        ++v78;
        v79 -= 4;
      }
      while (v79);
    }
    char v81 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
    operations_research::Domain::Domain(&v149, 0, 1);
    char v82 = operations_research::sat::PresolveContext::IntersectDomainWith(v81, v76, (const operations_research::Domain *)&v149, 0);
    if (v149) {
      operator delete(v150[0]);
    }
    if (v82)
    {
      uint64_t v83 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v149, "int_prod: all Boolean.");
      operations_research::sat::PresolveContext::UpdateRuleStats(v83, (uint64_t)&v149);
      if (SHIBYTE(v150[1]) < 0) {
        operator delete(v149);
      }
      unint64_t v84 = operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
      uint64_t v85 = *(unsigned int *)(v84 + 16);
      if (v85 == *(_DWORD *)(v84 + 20)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v84 + 16), v85 + 1);
      }
      *(_DWORD *)(*(void *)(v84 + 24) + 4 * v85) = v76;
      *(_DWORD *)(v84 + 16) = v85 + 1;
      unint64_t v86 = operations_research::sat::ConstraintProto::mutable_BOOL_and((operations_research::sat::ConstraintProto *)v84);
      unint64_t v87 = v86;
      if (*((_DWORD *)a2 + 15) == 11) {
        int v88 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        int v88 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      }
      uint64_t v125 = *((int *)v88 + 4);
      if (v125)
      {
        uint64_t v126 = (int *)v88[3];
        unsigned int v127 = *(_DWORD *)(v86 + 16);
        uint64_t v128 = 4 * v125;
        do
        {
          int v129 = *v126;
          if (v127 == *(_DWORD *)(v87 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v87 + 16), v127 + 1);
          }
          *(_DWORD *)(*(void *)(v87 + 24) + 4 * v127) = v129;
          *(_DWORD *)(v87 + 16) = v127 + 1;
          ++v126;
          ++v127;
          v128 -= 4;
        }
        while (v128);
      }
      uint64_t v130 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
      unint64_t v131 = operations_research::sat::ConstraintProto::mutable_BOOL_or(v130);
      unint64_t v132 = v131;
      uint64_t v134 = *(unsigned int *)(v131 + 16);
      long long v133 = (unsigned int *)(v131 + 16);
      unsigned int v135 = v134 + 1;
      if (v134 == *(_DWORD *)(v131 + 20)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v131 + 16), v134 + 1);
      }
      uint64_t v136 = *(void *)(v132 + 24);
      *(_DWORD *)(v136 + 4 * v134) = v76;
      *(_DWORD *)(v132 + 16) = v135;
      if (*((_DWORD *)a2 + 15) == 11) {
        int v137 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        int v137 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      }
      uint64_t v138 = *((int *)v137 + 4);
      if (v138)
      {
        uint64_t v139 = (int *)v137[3];
        uint64_t v140 = 4 * v138;
        do
        {
          int v141 = *v139;
          if (v135 == *(_DWORD *)(v132 + 20))
          {
            google::protobuf::RepeatedField<int>::Reserve(v133, v135 + 1);
            uint64_t v136 = *(void *)(v132 + 24);
          }
          *(_DWORD *)(v136 + 4 * v135) = ~v141;
          *long long v133 = v135 + 1;
          ++v139;
          ++v135;
          v140 -= 4;
        }
        while (v140);
      }
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      operations_research::sat::ConstraintProto::Clear(a2);
      goto LABEL_175;
    }
LABEL_151:
    char v3 = 0;
    goto LABEL_176;
  }
  if ((v149 & 1) == 0) {
    goto LABEL_89;
  }
LABEL_127:
  operator delete(v150[0]);
  if (v61) {
    goto LABEL_23;
  }
LABEL_3:
  char v3 = 0;
  return v3 & 1;
}

void sub_23CC4A834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, void *a15, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,int a23,__int16 a24,char a25,char a26)
{
  if (a21) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::CpModelPresolver::PresolveIntDiv(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v2 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (*((unsigned char *)v2 + 504)) {
    return 0;
  }
  if (*((_DWORD *)a2 + 15) == 7)
  {
    uint64_t v6 = (uint64_t *)*((void *)a2 + 6);
    BOOL result = 0;
    unint64_t v7 = *((unsigned int *)v6 + 9);
    if ((v7 & 0x80000000) != 0) {
      return result;
    }
  }
  else
  {
    uint64_t v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
    BOOL result = 0;
    unint64_t v7 = dword_26AEE1894;
    if (dword_26AEE1894 < 0) {
      return result;
    }
  }
  uint64_t v8 = (unsigned int *)v6[3];
  unint64_t v9 = (const char *)*v8;
  if ((v9 & 0x80000000) != 0) {
    return result;
  }
  int v10 = (const char *)v8[1];
  if ((v10 & 0x80000000) != 0) {
    return result;
  }
  if (operations_research::sat::PresolveContext::DomainIsEmpty(v2, v8[1])) {
    return 0;
  }
  BOOL result = operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v10);
  if (!result) {
    return result;
  }
  uint64_t v11 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v10);
  uint64_t v12 = v11 - 1;
  if (v11 == 1)
  {
    uint64_t v13 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
    operations_research::sat::ConstraintProto::mutable_linear(v13);
    uint64_t v15 = v14;
    unint64_t v16 = (unsigned int *)(v14 + 16);
    uint64_t v17 = *(unsigned int *)(v14 + 16);
    unsigned int v18 = v17 + 1;
    if (v17 == *(_DWORD *)(v14 + 20)) {
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v14 + 16), v17 + 1);
    }
    *(_DWORD *)(*(void *)(v15 + 24) + 4 * v17) = v9;
    uint64_t v19 = *(unsigned int *)(v15 + 40);
    *(_DWORD *)(v15 + 16) = v18;
    if (v19 == *(_DWORD *)(v15 + 44))
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 40), v19 + 1);
      unsigned int v18 = *v16;
    }
    *(void *)(*(void *)(v15 + 48) + 8 * v19) = 1;
    *(_DWORD *)(v15 + 40) = v19 + 1;
    if (v18 == *(_DWORD *)(v15 + 20)) {
      google::protobuf::RepeatedField<int>::Reserve(v16, v18 + 1);
    }
    *(_DWORD *)(*(void *)(v15 + 24) + 4 * v18) = v7;
    *(_DWORD *)(v15 + 16) = v18 + 1;
    uint64_t v20 = *(unsigned int *)(v15 + 40);
    if (v20 == *(_DWORD *)(v15 + 44)) {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 40), v20 + 1);
    }
    uint64_t v21 = *(unsigned int *)(v15 + 64);
    *(void *)(*(void *)(v15 + 48) + 8 * v20) = -1;
    *(_DWORD *)(v15 + 40) = v20 + 1;
    int v22 = *(_DWORD *)(v15 + 68);
    unsigned int v23 = v21 + 1;
    if (v21 == v22)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 64), v21 + 1);
      int v22 = *(_DWORD *)(v15 + 68);
    }
    uint64_t v24 = *(void *)(v15 + 72);
    *(void *)(v24 + 8 * v21) = 0;
    *(_DWORD *)(v15 + 64) = v23;
    if (v23 == v22)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 64), v21 + 2);
      uint64_t v24 = *(void *)(v15 + 72);
    }
    *(void *)(v24 + 8 * v23) = 0;
    *(_DWORD *)(v15 + 64) = v21 + 2;
    operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                 + 2));
    uint64_t v25 = *((void *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "int_div: rewrite to equality");
    operations_research::sat::PresolveContext::UpdateRuleStats(v25, (uint64_t)__p);
LABEL_26:
    if (v48 < 0) {
      operator delete(__p[0]);
    }
    operations_research::sat::ConstraintProto::Clear(a2);
    return 1;
  }
  uint64_t v26 = v11;
  BOOL v46 = 0;
  uint64_t v27 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  operations_research::sat::PresolveContext::DomainOf(v27, v9, v45);
  operations_research::Domain::DivisionBy((operations_research::Domain *)v45, v26, (unint64_t *)__p);
  int v28 = operations_research::sat::PresolveContext::IntersectDomainWith(v27, (const char *)v7, (const operations_research::Domain *)__p, &v46);
  if ((uint64_t)__p[0])
  {
    operator delete(__p[1]);
    if ((v45[0] & 1) == 0)
    {
LABEL_31:
      if (v28) {
        goto LABEL_35;
      }
      return 0;
    }
  }
  else if ((v45[0] & 1) == 0)
  {
    goto LABEL_31;
  }
  operator delete((void *)v45[1]);
  if (!v28) {
    return 0;
  }
LABEL_35:
  if (v46)
  {
    uint64_t v29 = *((void *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "int_div: updated domain of target in target = X / cte");
    operations_research::sat::PresolveContext::UpdateRuleStats(v29, (uint64_t)__p);
    if (v48 < 0) {
      operator delete(__p[0]);
    }
  }
  if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v7) < 0)return 0; {
  uint64_t v30 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v9);
  }
  BOOL result = 0;
  if (v26 >= 2 && (v30 & 0x8000000000000000) == 0)
  {
    uint64_t v44 = v12;
    uint64_t v31 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
    operations_research::sat::ConstraintProto::mutable_linear(v31);
    uint64_t v33 = v32;
    unsigned int v34 = (unsigned int *)(v32 + 16);
    uint64_t v35 = *(unsigned int *)(v32 + 16);
    unsigned int v36 = v35 + 1;
    if (v35 == *(_DWORD *)(v32 + 20)) {
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v32 + 16), v35 + 1);
    }
    *(_DWORD *)(*(void *)(v33 + 24) + 4 * v35) = v9;
    uint64_t v37 = *(unsigned int *)(v33 + 40);
    *(_DWORD *)(v33 + 16) = v36;
    if (v37 == *(_DWORD *)(v33 + 44))
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v33 + 40), v37 + 1);
      unsigned int v36 = *v34;
    }
    *(void *)(*(void *)(v33 + 48) + 8 * v37) = 1;
    *(_DWORD *)(v33 + 40) = v37 + 1;
    if (v36 == *(_DWORD *)(v33 + 20)) {
      google::protobuf::RepeatedField<int>::Reserve(v34, v36 + 1);
    }
    *(_DWORD *)(*(void *)(v33 + 24) + 4 * v36) = v7;
    *(_DWORD *)(v33 + 16) = v36 + 1;
    uint64_t v38 = *(unsigned int *)(v33 + 40);
    if (v38 == *(_DWORD *)(v33 + 44)) {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v33 + 40), v38 + 1);
    }
    uint64_t v39 = *(unsigned int *)(v33 + 64);
    *(void *)(*(void *)(v33 + 48) + 8 * v38) = -v26;
    *(_DWORD *)(v33 + 40) = v38 + 1;
    int v40 = *(_DWORD *)(v33 + 68);
    unsigned int v41 = v39 + 1;
    if (v39 == v40)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v33 + 64), v39 + 1);
      int v40 = *(_DWORD *)(v33 + 68);
    }
    uint64_t v42 = *(void *)(v33 + 72);
    *(void *)(v42 + 8 * v39) = 0;
    *(_DWORD *)(v33 + 64) = v41;
    if (v41 == v40)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v33 + 64), v39 + 2);
      uint64_t v42 = *(void *)(v33 + 72);
    }
    *(void *)(v42 + 8 * v41) = v44;
    *(_DWORD *)(v33 + 64) = v39 + 2;
    operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                 + 2));
    uint64_t v43 = *((void *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "int_div: linearize positive division with a constant divisor");
    operations_research::sat::PresolveContext::UpdateRuleStats(v43, (uint64_t)__p);
    goto LABEL_26;
  }
  return result;
}

void sub_23CC4ADDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, void *a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(operations_research::sat::PresolveContext **this, int a2, operations_research::sat::ConstraintProto *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v16 = 0;
  if (*((_DWORD *)a3 + 15) == 12)
  {
    uint64_t v5 = *((int *)a3 + 4);
    if (v5)
    {
      int v6 = 0;
      unint64_t v7 = (unsigned int *)*((void *)a3 + 3);
      uint64_t v8 = 4 * v5;
      do
      {
        unsigned int LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this[2], (const char *)*v7);
        if (LiteralRepresentative != *v7)
        {
          unsigned int *v7 = LiteralRepresentative;
          int v6 = 1;
        }
        ++v7;
        v8 -= 4;
      }
      while (v8);
    }
    else
    {
      int v6 = 0;
    }
    BOOL v15 = v6 == 0;
  }
  else
  {
    uint64_t v10 = *((void *)this[2] + 82) + 24 * a2;
    uint64_t v11 = *(int **)v10;
    uint64_t v12 = *(int **)(v10 + 8);
    if (*(int **)v10 == v12) {
      return 0;
    }
    while (1)
    {
      int v13 = *v11;
      operations_research::sat::PresolveContext::GetAffineRelation(this[2], *v11, (uint64_t)&v17);
      if (v17 != v13) {
        break;
      }
      if (++v11 == v12) {
        return 0;
      }
    }
    uint64_t v17 = (void (**)(void **))&unk_26F0C1090;
    unsigned int v18 = &v16;
    uint64_t v19 = this;
    uint64_t v20 = (void **)&v17;
    operations_research::sat::ApplyToAllVariableIndices((uint64_t)&v17, a3);
    if (v20 == (void **)&v17)
    {
      v17[4]((void **)&v17);
    }
    else if (v20)
    {
      (*((void (**)(void))*v20 + 5))();
    }
    uint64_t v17 = (void (**)(void **))&unk_26F0C1110;
    unsigned int v18 = &v16;
    uint64_t v19 = this;
    uint64_t v20 = (void **)&v17;
    operations_research::sat::ApplyToAllLiteralIndices((uint64_t)&v17, (uint64_t)a3);
    if (v20 == (void **)&v17)
    {
      v17[4]((void **)&v17);
    }
    else if (v20)
    {
      (*((void (**)(void))*v20 + 5))();
    }
    BOOL v15 = v16 == 0;
  }
  return !v15;
}

void sub_23CC4B084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(int *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC4B098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(int *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpModelPresolver::DivideLinearByGcd(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (*(unsigned char *)(v3 + 504)) {
    return;
  }
  if (*((_DWORD *)a2 + 15) == 12)
  {
    uint64_t v5 = *((void *)a2 + 6);
    uint64_t v6 = *(unsigned int *)(v5 + 16);
    if ((int)v6 <= 0) {
      return;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(v5 + 48);
    do
    {
      uint64_t v10 = *(void *)(v9 + 8 * v7);
      if (v10)
      {
        if (v10 < 0) {
          uint64_t v10 = -v10;
        }
        unint64_t v11 = v8;
        do
        {
          uint64_t v8 = v10;
          uint64_t v10 = v11 % v10;
          unint64_t v11 = v8;
        }
        while (v10);
        if (v8 == 1) {
          return;
        }
      }
      ++v7;
    }
    while (v7 != v6);
  }
  else
  {
    LODWORD(v6) = dword_26AEE19E8;
    if (dword_26AEE19E8 <= 0) {
      return;
    }
    uint64_t v12 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t v13 = *(void *)(qword_26AEE1A08 + 8 * v12);
      if (v13)
      {
        if (v13 < 0) {
          uint64_t v13 = -v13;
        }
        unint64_t v14 = v8;
        do
        {
          uint64_t v8 = v13;
          uint64_t v13 = v14 % v13;
          unint64_t v14 = v8;
        }
        while (v13);
        if (v8 == 1) {
          return;
        }
      }
      ++v12;
    }
    while (v12 != dword_26AEE19E8);
  }
  if (v8 < 2) {
    return;
  }
  char v41 = 21;
  strcpy(__p, "linear: divide by GCD");
  operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)__p);
  if (v41 < 0) {
    operator delete(*(void **)__p);
  }
  int v16 = *((_DWORD *)a2 + 15);
  if (v16 == 12)
  {
    uint64_t v17 = 0;
    do
      *(uint64_t *)(*(void *)(*((void *)a2 + 6) + 48) + 8 * v17++) /= v8;
    while (v6 != v17);
LABEL_42:
    uint64_t v24 = (uint64_t *)*((void *)a2 + 6);
    goto LABEL_44;
  }
  uint64_t v18 = 0;
  int v19 = *((_DWORD *)a2 + 15);
  do
  {
    if (v19 == 12)
    {
      uint64_t v21 = (uint64_t *)*((void *)a2 + 6);
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      uint64_t v22 = *((void *)a2 + 1);
      unsigned int v23 = (google::protobuf::Arena **)(v22 & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
      {
        v15.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(*v23);
        *((void *)a2 + 6) = v21;
        int v16 = *((_DWORD *)a2 + 15);
        if (v16 != 12)
        {
LABEL_32:
          int v19 = v16;
          uint64_t v20 = &operations_research::sat::_LinearConstraintProto_default_instance_;
          goto LABEL_33;
        }
      }
      else
      {
        v15.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>((google::protobuf::Arena *)v23);
        *((void *)a2 + 6) = v21;
        int v16 = *((_DWORD *)a2 + 15);
        if (v16 != 12) {
          goto LABEL_32;
        }
      }
    }
    int v19 = 12;
    uint64_t v20 = v21;
LABEL_33:
    *(void *)(v21[6] + 8 * v18) = *(void *)(v20[6] + 8 * v18) / v8;
    ++v18;
  }
  while (v6 != v18);
  if (v16 == 12) {
    goto LABEL_42;
  }
  uint64_t v24 = &operations_research::sat::_LinearConstraintProto_default_instance_;
LABEL_44:
  operations_research::Domain::FromFlatSpanOfIntervals(v24[9], *((int *)v24 + 16), (unint64_t *)__p, v15);
  operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)__p, v8, &v38);
  if (*((_DWORD *)a2 + 15) == 12)
  {
    uint64_t v25 = *((void *)a2 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    uint64_t v26 = *((void *)a2 + 1);
    uint64_t v27 = (google::protobuf::Arena *)(v26 & 0xFFFFFFFFFFFFFFFELL);
    if (v26) {
      uint64_t v27 = *(google::protobuf::Arena **)v27;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v27);
    uint64_t v25 = v28;
    *((void *)a2 + 6) = v28;
  }
  *(_DWORD *)(v25 + 64) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 64), v38 >> 1);
  unint64_t v29 = v38 & 1;
  if (v38) {
    uint64_t v30 = (uint64_t *)v39;
  }
  else {
    uint64_t v30 = (uint64_t *)&v39;
  }
  if (v38 >= 2)
  {
    uint64_t v31 = &v30[2 * (v38 >> 1)];
    unsigned int v32 = *(_DWORD *)(v25 + 64);
    do
    {
      uint64_t v33 = *v30;
      int v34 = *(_DWORD *)(v25 + 68);
      unsigned int v35 = v32 + 1;
      if (v32 == v34)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 64), v32 + 1);
        int v34 = *(_DWORD *)(v25 + 68);
      }
      uint64_t v36 = *(void *)(v25 + 72);
      *(void *)(v36 + 8 * v32) = v33;
      *(_DWORD *)(v25 + 64) = v35;
      uint64_t v37 = v30[1];
      v32 += 2;
      if (v35 == v34)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 64), v32);
        uint64_t v36 = *(void *)(v25 + 72);
      }
      *(void *)(v36 + 8 * v35) = v37;
      *(_DWORD *)(v25 + 64) = v32;
      v30 += 2;
    }
    while (v30 != v31);
    unint64_t v29 = v38 & 1;
  }
  if (v29) {
    operator delete(v39);
  }
  if (*((_DWORD *)a2 + 15) == 12)
  {
    if (!*(_DWORD *)(*((void *)a2 + 6) + 64)) {
LABEL_66:
    }
      operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
  }
  else if (!qword_26AEE1A18)
  {
    goto LABEL_66;
  }
  if (__p[0]) {
    operator delete(*(void **)&__p[8]);
  }
}

void sub_23CC4B488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, void *__p, int a15, __int16 a16, char a17, char a18)
{
  if (a13) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>(unint64_t *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = 0;
  uint64_t v4 = (unsigned int *)(a2 + 64);
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(a2 + 64), *a1 >> 1);
  unint64_t v5 = *a1;
  uint64_t v8 = (uint64_t *)a1[1];
  uint64_t v7 = (uint64_t *)(a1 + 1);
  uint64_t v6 = v8;
  if (v5) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v7;
  }
  if (v5 >= 2)
  {
    uint64_t v10 = &v9[2 * (v5 >> 1)];
    unsigned int v11 = *(_DWORD *)(a2 + 64);
    do
    {
      uint64_t v12 = *v9;
      int v13 = *(_DWORD *)(a2 + 68);
      unsigned int v14 = v11 + 1;
      if (v11 == v13)
      {
        google::protobuf::RepeatedField<long long>::Reserve(v4, v11 + 1);
        int v13 = *(_DWORD *)(a2 + 68);
      }
      uint64_t v15 = *(void *)(a2 + 72);
      *(void *)(v15 + 8 * v11) = v12;
      *(_DWORD *)(a2 + 64) = v14;
      uint64_t v16 = v9[1];
      v11 += 2;
      if (v14 == v13)
      {
        google::protobuf::RepeatedField<long long>::Reserve(v4, v11);
        uint64_t v15 = *(void *)(a2 + 72);
      }
      *(void *)(v15 + 8 * v14) = v16;
      unsigned int *v4 = v11;
      v9 += 2;
    }
    while (v9 != v10);
  }
}

uint64_t operations_research::sat::CpModelPresolver::CanonicalizeLinear(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*((_DWORD *)a2 + 15) != 12 || (uint64_t v2 = this, *(unsigned char *)(*((void *)this + 2) + 504)))
  {
    char v3 = 0;
    return v3 & 1;
  }
  uint64_t v108 = (void **)((char *)this + 24);
  *((void *)this + 4) = *((void *)this + 3);
  uint64_t v6 = *(unsigned int *)(*((void *)a2 + 6) + 16);
  uint64_t v111 = v6;
  if ((int)v6 < 1)
  {
    LOBYTE(v9) = 0;
    goto LABEL_87;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v10 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  __n128 v11 = (__n128)xmmword_23CE7ECB0;
  do
  {
    if (*((_DWORD *)a2 + 15) == 12)
    {
      uint64_t v12 = (uint64_t *)*((void *)a2 + 6);
      int v13 = *(_DWORD *)(v12[3] + 4 * v7);
      if (~v13 <= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = ~v13;
      }
      if (v13 < 0) {
        goto LABEL_14;
      }
    }
    else
    {
      int v17 = *(_DWORD *)(v10[3] + 4 * v7);
      if (~v17 <= v17) {
        unint64_t v14 = v17;
      }
      else {
        unint64_t v14 = ~v17;
      }
      uint64_t v12 = v10;
      if (v17 < 0)
      {
LABEL_14:
        uint64_t v15 = *(void *)(v12[6] + 8 * v7);
        uint64_t v16 = -v15;
        if (!v15) {
          goto LABEL_8;
        }
        goto LABEL_21;
      }
    }
    uint64_t v16 = *(void *)(v12[6] + 8 * v7);
    if (!v16) {
      goto LABEL_8;
    }
LABEL_21:
    if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)v2 + 2), (const char *)v14))
    {
      v8 += operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)v2 + 2), (const char *)v14)* v16;
      goto LABEL_8;
    }
    uint64_t v18 = *((int *)a2 + 4);
    if (!v18)
    {
LABEL_29:
      int v23 = v9;
      operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)v2 + 2), v14, (uint64_t)&v115);
      int v24 = (int)v115;
      BOOL v25 = v115 != v14;
      if (v115 == v14) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = *((void *)&v116 + 1) * v16;
      }
      unint64_t v27 = v116 * v16;
      unint64_t v29 = (__n128 *)*((void *)v2 + 4);
      unint64_t v28 = *((void *)v2 + 5);
      if ((unint64_t)v29 < v28)
      {
        v29->n128_u32[0] = v115;
        v29->n128_u64[1] = v27;
        uint64_t v30 = v29 + 1;
        int v31 = v23;
        uint64_t v6 = v111;
LABEL_48:
        int v9 = v25 | v31;
        v8 += v26;
        *((void *)v2 + 4) = v30;
        goto LABEL_8;
      }
      uint64_t v107 = v8;
      unsigned int v32 = (__n128 *)*v108;
      uint64_t v33 = ((char *)v29 - (unsigned char *)*v108) >> 4;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v35 = v10;
      uint64_t v36 = v28 - (void)v32;
      if (v36 >> 3 > v34) {
        unint64_t v34 = v36 >> 3;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v34;
      }
      BOOL v106 = v25;
      uint64_t v105 = v26;
      if (v37)
      {
        if (v37 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v38 = (char *)operator new(16 * v37);
        uint64_t v39 = (uint64_t)&v38[16 * v33];
        *(_DWORD *)uint64_t v39 = v24;
        *(void *)(v39 + 8) = v27;
        uint64_t v40 = v39;
        if (v29 != v32)
        {
LABEL_43:
          uint64_t v2 = this;
          int v31 = v23;
          do
          {
            __n128 v11 = v29[-1];
            *(__n128 *)(v40 - 16) = v11;
            v40 -= 16;
            --v29;
          }
          while (v29 != v32);
          unint64_t v29 = (__n128 *)*v108;
          uint64_t v6 = v111;
          uint64_t v30 = (__n128 *)(v39 + 16);
          *((void *)this + 3) = v40;
          *((void *)this + 4) = v39 + 16;
          *((void *)this + 5) = &v38[16 * v37];
          if (v29) {
LABEL_46:
          }
            operator delete(v29);
LABEL_47:
          uint64_t v10 = v35;
          uint64_t v8 = v107;
          BOOL v25 = v106;
          uint64_t v26 = v105;
          goto LABEL_48;
        }
      }
      else
      {
        unint64_t v38 = 0;
        uint64_t v39 = 16 * v33;
        *(_DWORD *)uint64_t v39 = v115;
        *(void *)(v39 + 8) = v27;
        uint64_t v40 = 16 * v33;
        if (v29 != v32) {
          goto LABEL_43;
        }
      }
      int v31 = v23;
      uint64_t v2 = this;
      uint64_t v6 = v111;
      uint64_t v30 = (__n128 *)(v39 + 16);
      *((void *)this + 3) = v40;
      *((void *)this + 4) = v39 + 16;
      *((void *)this + 5) = &v38[16 * v37];
      if (v29) {
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    int v19 = (int *)*((void *)a2 + 3);
    uint64_t v20 = 4 * v18;
    while (1)
    {
      int v21 = *v19;
      int v22 = ~*v19 <= *v19 ? *v19 : ~v21;
      if (v14 == v22) {
        break;
      }
      ++v19;
      v20 -= 4;
      if (!v20) {
        goto LABEL_29;
      }
    }
    if (v21 >= 0) {
      uint64_t v41 = v16;
    }
    else {
      uint64_t v41 = 0;
    }
    uint64_t v42 = *((void *)v2 + 2);
    uint64_t v115 = (char *)operator new(0x30uLL);
    long long v116 = xmmword_23CE7ECB0;
    strcpy(v115, "linear: enforcement literal in constraint");
    operations_research::sat::PresolveContext::UpdateRuleStats(v42, (uint64_t)&v115);
    if (SHIBYTE(v116) < 0) {
      operator delete(v115);
    }
    v8 += v41;
LABEL_8:
    ++v7;
  }
  while (v7 != v6);
  int v43 = *((_DWORD *)a2 + 15);
  if (v8)
  {
    if (v43 == 12) {
      uint64_t v44 = (uint64_t *)*((void *)a2 + 6);
    }
    else {
      uint64_t v44 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    }
    operations_research::Domain::FromFlatSpanOfIntervals(v44[9], *((int *)v44 + 16), (unint64_t *)&v115, v11);
    operations_research::Domain::Domain(v112, -v8, -v8);
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v115, (const operations_research::Domain *)v112, &v113, v45);
    if (v115) {
      operator delete((void *)v116);
    }
    uint64_t v115 = v113;
    long long v116 = v114;
    uint64_t v113 = 0;
    if ((uint64_t)v112[0]) {
      operator delete(v112[1]);
    }
    if (*((_DWORD *)a2 + 15) == 12)
    {
      uint64_t v46 = *((void *)a2 + 6);
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      uint64_t v47 = *((void *)a2 + 1);
      char v48 = (google::protobuf::Arena *)(v47 & 0xFFFFFFFFFFFFFFFELL);
      if (v47) {
        char v48 = *(google::protobuf::Arena **)v48;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v48);
      uint64_t v46 = v49;
      *((void *)a2 + 6) = v49;
    }
    *(_DWORD *)(v46 + 64) = 0;
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v46 + 64), (unint64_t)v115 >> 1);
    uint64_t v50 = v115 & 1;
    if (v115) {
      unsigned int v51 = (long long *)v116;
    }
    else {
      unsigned int v51 = &v116;
    }
    if ((unint64_t)v115 >= 2)
    {
      uint64_t v52 = &v51[(unint64_t)v115 >> 1];
      unsigned int v53 = *(_DWORD *)(v46 + 64);
      do
      {
        uint64_t v54 = *(void *)v51;
        int v55 = *(_DWORD *)(v46 + 68);
        unsigned int v56 = v53 + 1;
        if (v53 == v55)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v46 + 64), v53 + 1);
          int v55 = *(_DWORD *)(v46 + 68);
        }
        uint64_t v57 = *(void *)(v46 + 72);
        *(void *)(v57 + 8 * v53) = v54;
        *(_DWORD *)(v46 + 64) = v56;
        uint64_t v58 = *((void *)v51 + 1);
        v53 += 2;
        if (v56 == v55)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v46 + 64), v53);
          uint64_t v57 = *(void *)(v46 + 72);
        }
        *(void *)(v57 + 8 * v56) = v58;
        *(_DWORD *)(v46 + 64) = v53;
        ++v51;
      }
      while (v51 != v52);
      uint64_t v50 = v115 & 1;
    }
    uint64_t v2 = this;
    if (v50) {
      operator delete((void *)v116);
    }
    int v43 = *((_DWORD *)a2 + 15);
  }
  if (v43 == 12)
  {
LABEL_87:
    *(_DWORD *)(*((void *)a2 + 6) + 16) = 0;
    char v109 = v9;
    if (*((_DWORD *)a2 + 15) == 12) {
      goto LABEL_88;
    }
LABEL_92:
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    uint64_t v63 = *((void *)a2 + 1);
    uint64_t v64 = (google::protobuf::Arena *)(v63 & 0xFFFFFFFFFFFFFFFELL);
    if (v63) {
      uint64_t v64 = *(google::protobuf::Arena **)v64;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v64);
    *((void *)a2 + 6) = v59;
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    uint64_t v60 = *((void *)a2 + 1);
    char v61 = (google::protobuf::Arena *)(v60 & 0xFFFFFFFFFFFFFFFELL);
    if (v60) {
      char v61 = *(google::protobuf::Arena **)v61;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v61);
    *((void *)a2 + 6) = v62;
    *(_DWORD *)(v62 + 16) = 0;
    char v109 = v9;
    if (*((_DWORD *)a2 + 15) != 12) {
      goto LABEL_92;
    }
LABEL_88:
    uint64_t v59 = *((void *)a2 + 6);
  }
  uint64_t v66 = *((void *)v2 + 3);
  uint64_t v65 = (int *)*((void *)v2 + 4);
  unint64_t v67 = 126 - 2 * __clz(((uint64_t)v65 - v66) >> 4);
  *(_DWORD *)(v59 + 40) = 0;
  if (v65 == (int *)v66) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = v67;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(v66, v65, (uint64_t)&v115, v68, 1);
  uint64_t v69 = (int *)*((void *)v2 + 3);
  uint64_t v70 = (int *)*((void *)v2 + 4);
  if (v69 == v70) {
    goto LABEL_136;
  }
  uint64_t v71 = 0;
  int v72 = 0;
  while (1)
  {
LABEL_101:
    int v73 = *v69;
    if (*v69 < 0)
    {
      uint64_t v103 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v115, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1027);
      uint64_t v104 = (void *)google::LogMessage::stream(v103);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Check failed: RefIsPositive(entry.first) ", 41);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v115);
    }
    uint64_t v74 = *((void *)v69 + 1);
    if (v73 != v72) {
      break;
    }
    v71 += v74;
    v69 += 4;
    if (v69 == v70) {
      goto LABEL_120;
    }
  }
  if (v71)
  {
    if (*((_DWORD *)a2 + 15) == 12)
    {
      uint64_t v75 = *((void *)a2 + 6);
      uint64_t v77 = *(unsigned int *)(v75 + 16);
      unsigned int v76 = (unsigned int *)(v75 + 16);
      int v78 = v77 + 1;
      if (v77 != *(_DWORD *)(v75 + 20)) {
        goto LABEL_111;
      }
LABEL_110:
      google::protobuf::RepeatedField<int>::Reserve(v76, v78);
      goto LABEL_111;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    uint64_t v79 = *((void *)a2 + 1);
    uint64_t v80 = (google::protobuf::Arena *)(v79 & 0xFFFFFFFFFFFFFFFELL);
    if (v79) {
      uint64_t v80 = *(google::protobuf::Arena **)v80;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v80);
    uint64_t v75 = v81;
    *((void *)a2 + 6) = v81;
    uint64_t v77 = *(unsigned int *)(v81 + 16);
    int v82 = *(_DWORD *)(v81 + 20);
    unsigned int v76 = (unsigned int *)(v81 + 16);
    int v78 = v77 + 1;
    if (v77 == v82) {
      goto LABEL_110;
    }
LABEL_111:
    *(_DWORD *)(*(void *)(v75 + 24) + 4 * v77) = v72;
    *(_DWORD *)(v75 + 16) = v78;
    if (*((_DWORD *)a2 + 15) == 12)
    {
      uint64_t v83 = *((void *)a2 + 6);
      uint64_t v85 = *(unsigned int *)(v83 + 40);
      unint64_t v84 = (unsigned int *)(v83 + 40);
      int v86 = v85 + 1;
      if (v85 != *(_DWORD *)(v83 + 44)) {
        goto LABEL_118;
      }
LABEL_117:
      google::protobuf::RepeatedField<long long>::Reserve(v84, v86);
      goto LABEL_118;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    uint64_t v87 = *((void *)a2 + 1);
    int v88 = (google::protobuf::Arena *)(v87 & 0xFFFFFFFFFFFFFFFELL);
    if (v87) {
      int v88 = *(google::protobuf::Arena **)v88;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v88);
    uint64_t v83 = v89;
    *((void *)a2 + 6) = v89;
    uint64_t v85 = *(unsigned int *)(v89 + 40);
    int v90 = *(_DWORD *)(v89 + 44);
    unint64_t v84 = (unsigned int *)(v89 + 40);
    int v86 = v85 + 1;
    if (v85 == v90) {
      goto LABEL_117;
    }
LABEL_118:
    *(void *)(*(void *)(v83 + 48) + 8 * v85) = v71;
    *(_DWORD *)(v83 + 40) = v86;
  }
  int v72 = v73;
  uint64_t v71 = v74;
  v69 += 4;
  if (v69 != v70) {
    goto LABEL_101;
  }
LABEL_120:
  if (v71)
  {
    if (*((_DWORD *)a2 + 15) == 12)
    {
      uint64_t v91 = *((void *)a2 + 6);
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      uint64_t v92 = *((void *)a2 + 1);
      int v93 = (google::protobuf::Arena *)(v92 & 0xFFFFFFFFFFFFFFFELL);
      if (v92) {
        int v93 = *(google::protobuf::Arena **)v93;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v93);
      uint64_t v91 = v94;
      *((void *)a2 + 6) = v94;
    }
    uint64_t v95 = *(unsigned int *)(v91 + 16);
    if (v95 == *(_DWORD *)(v91 + 20)) {
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v91 + 16), v95 + 1);
    }
    *(_DWORD *)(*(void *)(v91 + 24) + 4 * v95) = v72;
    *(_DWORD *)(v91 + 16) = v95 + 1;
    if (*((_DWORD *)a2 + 15) == 12)
    {
      uint64_t v96 = *((void *)a2 + 6);
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      uint64_t v97 = *((void *)a2 + 1);
      uint64_t v98 = (google::protobuf::Arena *)(v97 & 0xFFFFFFFFFFFFFFFELL);
      if (v97) {
        uint64_t v98 = *(google::protobuf::Arena **)v98;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v98);
      uint64_t v96 = v99;
      *((void *)a2 + 6) = v99;
    }
    uint64_t v100 = *(unsigned int *)(v96 + 40);
    if (v100 == *(_DWORD *)(v96 + 44)) {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v96 + 40), v100 + 1);
    }
    *(void *)(*(void *)(v96 + 48) + 8 * v100) = v71;
    *(_DWORD *)(v96 + 40) = v100 + 1;
  }
LABEL_136:
  operations_research::sat::CpModelPresolver::DivideLinearByGcd(this, a2);
  char v3 = v109;
  if ((v109 & 1) != 0
    && (uint64_t v101 = *((void *)this + 2),
        uint64_t v115 = (char *)operator new(0x28uLL),
        long long v116 = xmmword_23CE834B0,
        strcpy(v115, "linear: remapped using affine relations"),
        operations_research::sat::PresolveContext::UpdateRuleStats(v101, (uint64_t)&v115),
        SHIBYTE(v116) < 0))
  {
    operator delete(v115);
    if (*((_DWORD *)a2 + 15) != 12) {
      goto LABEL_142;
    }
LABEL_139:
    if (*(_DWORD *)(*((void *)a2 + 6) + 16) < (int)v111)
    {
LABEL_143:
      uint64_t v102 = *((void *)this + 2);
      uint64_t v115 = (char *)operator new(0x20uLL);
      long long v116 = xmmword_23CE7E3F0;
      strcpy(v115, "linear: fixed or dup variables");
      operations_research::sat::PresolveContext::UpdateRuleStats(v102, (uint64_t)&v115);
      if (SHIBYTE(v116) < 0) {
        operator delete(v115);
      }
      char v3 = 1;
    }
  }
  else
  {
    if (*((_DWORD *)a2 + 15) == 12) {
      goto LABEL_139;
    }
LABEL_142:
    if (dword_26AEE19E8 < (int)v111) {
      goto LABEL_143;
    }
  }
  return v3 & 1;
}

void sub_23CC4BEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p)
{
  if (a18) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v19 - 104)) {
    operator delete(*(void **)(v19 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC4BF34()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 104));
}

uint64_t operations_research::sat::CpModelPresolver::RemoveSingletonInLinear(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2, __n128 a3)
{
  if (*((_DWORD *)a2 + 15) != 12 || *(unsigned char *)(*((void *)this + 2) + 504))
  {
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v110 = &v111;
  uint64_t v7 = *((void *)a2 + 6);
  uint64_t v8 = *(unsigned int *)(v7 + 16);
  operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v7 + 72), *(int *)(v7 + 64), &v107, a3);
  if ((int)v8 >= 1)
  {
    uint64_t v10 = 0;
    char v3 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    while (1)
    {
      __n128 v11 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (*((_DWORD *)a2 + 15) == 12) {
        __n128 v11 = (uint64_t *)*((void *)a2 + 6);
      }
      uint64_t v12 = v11[3];
      int v13 = (const char *)*(unsigned int *)(v12 + 4 * v10);
      if ((v13 & 0x80000000) != 0)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v105, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1071);
        uint64_t v96 = (void *)google::LogMessage::stream((google::LogMessage *)&v105);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
        goto LABEL_166;
      }
      uint64_t v14 = *(void *)(v11[6] + 8 * v10);
      if (operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), *(_DWORD *)(v12 + 4 * v10)))
      {
        break;
      }
LABEL_7:
      if (++v10 == v8) {
        goto LABEL_60;
      }
    }
    v100[0] = 0;
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v13, (unint64_t *)&v103);
    operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v103, v100, -v14, (unint64_t *)&v105);
    if (v103) {
      operator delete(__p);
    }
    if (!v100[0])
    {
LABEL_58:
      if (v105) {
        operator delete(v106);
      }
      goto LABEL_7;
    }
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v107, (const operations_research::Domain *)&v105, &v103, v15);
    char v16 = v103;
    if ((int)((unint64_t)v103 >> 1) > 100)
    {
LABEL_56:
      if (v16) {
        operator delete(__p);
      }
      goto LABEL_58;
    }
    uint64_t v17 = *((void *)this + 2);
    uint64_t v101 = operator new(0x20uLL);
    *(_OWORD *)uint64_t v102 = xmmword_23CE7ED90;
    strcpy((char *)v101, "linear: singleton column");
    operations_research::sat::PresolveContext::UpdateRuleStats(v17, (uint64_t)&v101);
    if (SHIBYTE(v102[1]) < 0) {
      operator delete(v101);
    }
    uint64_t v18 = v111;
    uint64_t v19 = &v111;
LABEL_20:
    uint64_t v20 = v19;
    if (v18)
    {
      do
      {
        uint64_t v19 = (uint64_t **)v18;
        uint64_t v21 = *((int *)v18 + 7);
        if (v10 < v21)
        {
          uint64_t v18 = *v19;
          goto LABEL_20;
        }
        if (v10 <= v21) {
          goto LABEL_28;
        }
        uint64_t v18 = v19[1];
      }
      while (v18);
      uint64_t v20 = v19 + 1;
    }
    int v22 = operator new(0x20uLL);
    v22[7] = v10;
    *(void *)int v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = v19;
    uint64_t *v20 = (uint64_t *)v22;
    if (*v110)
    {
      uint64_t v110 = (uint64_t **)*v110;
      int v22 = *v20;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v111, (uint64_t *)v22);
    ++v112;
LABEL_28:
    uint64_t v23 = v103;
    if (v103) {
      p_p = (long long *)__p;
    }
    else {
      p_p = (long long *)&__p;
    }
    unint64_t v25 = v103 >> 1;
    uint64_t v26 = v108;
    unint64_t v27 = v109;
    if ((v107 & 1) == 0)
    {
      uint64_t v26 = &v108;
      unint64_t v27 = 1;
    }
    if (v27 >= v25)
    {
      unint64_t v31 = v107 >> 1;
      unint64_t v32 = v25 - (v107 >> 1);
      if (v25 < v107 >> 1) {
        unint64_t v32 = 0;
      }
      if (v31 >= v25) {
        unint64_t v33 = v103 >> 1;
      }
      else {
        unint64_t v33 = v107 >> 1;
      }
      if (v33)
      {
        unint64_t v34 = v26;
        do
        {
          long long v35 = *p_p++;
          *v34++ = v35;
          --v33;
        }
        while (v33);
      }
      if (v31 >= v25)
      {
        char v37 = v107;
LABEL_55:
        unint64_t v107 = v23 & 0xFFFFFFFFFFFFFFFELL | v37 & 1;
        char v16 = v103;
        goto LABEL_56;
      }
      unint64_t v28 = 0;
      uint64_t v30 = 0;
      unint64_t v25 = v32;
      unint64_t v29 = &v26[v31];
    }
    else
    {
      if (2 * v27 <= v25) {
        unint64_t v28 = v103 >> 1;
      }
      else {
        unint64_t v28 = 2 * v27;
      }
      if (v28 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v29 = operator new(16 * v28);
      uint64_t v30 = v29;
    }
    do
    {
      long long v36 = *p_p++;
      *v29++ = v36;
      --v25;
    }
    while (v25);
    char v37 = v107;
    if (v30)
    {
      if (v107) {
        operator delete(v108);
      }
      uint64_t v108 = v30;
      unint64_t v109 = v28;
      char v37 = 1;
    }
    goto LABEL_55;
  }
LABEL_60:
  if (v112) {
    goto LABEL_61;
  }
  if (*(int *)(*(void *)this + 544) < 1
    || *((_DWORD *)a2 + 4)
    || (uint64_t v43 = operations_research::Domain::Min((operations_research::Domain *)&v107, v9),
        v43 != operations_research::Domain::Max((operations_research::Domain *)&v107, v44)))
  {
LABEL_169:
    LOBYTE(v3) = 0;
    goto LABEL_170;
  }
  *(_DWORD *)uint64_t v100 = 0;
  if ((int)v8 < 1) {
    goto LABEL_168;
  }
  int v45 = 0;
  while (1)
  {
    int v99 = 0;
    if (*((_DWORD *)a2 + 15) == 12)
    {
      uint64_t v79 = (uint64_t *)*((void *)a2 + 6);
      uint64_t v80 = v45;
      uint64_t v81 = (int *)(v79[3] + 4 * v45);
    }
    else
    {
      uint64_t v80 = v45;
      uint64_t v81 = (int *)(qword_26AEE19F0 + 4 * v45);
      uint64_t v79 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    }
    int v82 = *v81;
    int v99 = v82;
    if (v82 < 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v105, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1106);
      uint64_t v97 = (void *)google::LogMessage::stream((google::LogMessage *)&v105);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
LABEL_166:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v105);
    }
    uint64_t v83 = *(void *)(v79[6] + 8 * v80);
    if (operations_research::sat::PresolveContext::VariableWithCostIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), v82))
    {
      uint64_t v84 = *(void *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>((uint64_t *)(*((void *)this + 2) + 536), &v99);
      uint64_t v105 = v83;
      LODWORD(v101) = 0;
      if (!v83) {
        google::MakeCheckOpString<long long,int>((int)&v105, (int)&v101, "coeff != 0");
      }
      if (!(v84 % v83)) {
        break;
      }
    }
LABEL_128:
    int v45 = *(_DWORD *)v100 + 1;
    *(_DWORD *)uint64_t v100 = v45;
    if (v45 >= (int)v8) {
      goto LABEL_168;
    }
  }
  BOOL v98 = 0;
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v99, (unint64_t *)&v103);
  operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v103, &v98, -v83, (unint64_t *)&v105);
  if (v103) {
    operator delete(__p);
  }
  if (!v98)
  {
    int v86 = 7;
    goto LABEL_158;
  }
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v107, (const operations_research::Domain *)&v105, &v103, v85);
  if ((int)((unint64_t)v103 >> 1) > 100) {
    goto LABEL_140;
  }
  uint64_t v87 = (void *)*((void *)this + 2);
  if (v87[69] != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v101, "linear: singleton column in equality and in objective.");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v87, (uint64_t)&v101);
    if (SHIBYTE(v102[1]) < 0) {
      operator delete(v101);
    }
    operations_research::sat::PresolveContext::SubstituteVariableInObjective(*((void *)this + 2), v99, v83, (uint64_t)a2, 0);
    operations_research::Domain::operator=(&v107, (unint64_t *)&v103);
    std::set<int>::insert[abi:ne180100]((uint64_t **)&v110, (int *)v100);
    int v86 = 5;
    goto LABEL_156;
  }
  int v88 = (const char *)v99;
  operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)(v87 + 77), v84, (unint64_t *)&v101);
  char v89 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v87, v88, (const operations_research::Domain *)&v101, 0);
  if (v101) {
    operator delete(v102[0]);
  }
  if ((v89 & 1) == 0) {
    goto LABEL_152;
  }
  if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v99))
  {
LABEL_140:
    int v86 = 7;
    goto LABEL_156;
  }
  BOOL v91 = operations_research::sat::PresolveContext::CanonicalizeObjective(*((operations_research::sat::PresolveContext **)this + 2), v90);
  uint64_t v92 = *((void *)this + 2);
  if (!v91)
  {
    std::string::basic_string[abi:ne180100]<0>(&v101, "");
    LOBYTE(v3) = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v92, (uint64_t)&v101);
    if (SHIBYTE(v102[1]) < 0) {
      operator delete(v101);
    }
    int v86 = 1;
    goto LABEL_156;
  }
  if (absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::contains<int>((void *)(v92 + 536), &v99))
  {
    uint64_t v93 = *((void *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(&v101, "linear: singleton column define objective.");
    operations_research::sat::PresolveContext::UpdateRuleStats(v93, (uint64_t)&v101);
    if (SHIBYTE(v102[1]) < 0) {
      operator delete(v101);
    }
    operations_research::sat::PresolveContext::SubstituteVariableInObjective(*((void *)this + 2), v99, v83, (uint64_t)a2, 0);
    operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), v99);
    uint64_t v94 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 56));
    operations_research::sat::ConstraintProto::CopyFrom(v94, a2);
    operations_research::sat::ConstraintProto::Clear(a2);
LABEL_152:
    int v86 = 1;
    LOBYTE(v3) = 1;
    goto LABEL_156;
  }
  google::LogMessage::LogMessage((google::LogMessage *)&v101, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1159, 1);
  uint64_t v95 = (void *)google::LogMessage::stream((google::LogMessage *)&v101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"This was not supposed to happen and the presolve could be improved.", 67);
  google::LogMessage::~LogMessage((google::LogMessage *)&v101);
  int v86 = 7;
LABEL_156:
  if (v103) {
    operator delete(__p);
  }
LABEL_158:
  if (v105) {
    operator delete(v106);
  }
  if (v86 == 7) {
    goto LABEL_128;
  }
  if (v86 == 5)
  {
LABEL_168:
    if (!v112) {
      goto LABEL_169;
    }
LABEL_61:
    uint64_t v38 = *(void *)(*((void *)this + 2) + 56);
    uint64_t v39 = *(int **)(v38 + 56);
    if (!v39)
    {
      int v41 = *(_DWORD *)(v38 + 52);
      goto LABEL_71;
    }
    uint64_t v40 = *(int *)(v38 + 48);
    int v41 = *v39;
    if ((int)v40 < *v39)
    {
      *(_DWORD *)(v38 + 48) = v40 + 1;
      uint64_t v42 = *(operations_research::sat::ConstraintProto **)&v39[2 * v40 + 2];
      goto LABEL_73;
    }
    if (v41 == *(_DWORD *)(v38 + 52))
    {
LABEL_71:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v38 + 40), v41 + 1);
      uint64_t v39 = *(int **)(v38 + 56);
      int v41 = *v39;
    }
    *uint64_t v39 = v41 + 1;
    uint64_t v42 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v38 + 40));
    uint64_t v46 = *(void *)(v38 + 56);
    uint64_t v47 = *(int *)(v38 + 48);
    *(_DWORD *)(v38 + 48) = v47 + 1;
    *(void *)(v46 + 8 * v47 + 8) = v42;
LABEL_73:
    operations_research::sat::ConstraintProto::CopyFrom(v42, a2);
    if ((int)v8 >= 1)
    {
      uint64_t v48 = 0;
      int v49 = 0;
LABEL_76:
      while (1)
      {
        uint64_t v50 = v111;
        if (v111) {
          break;
        }
LABEL_77:
        if (*((_DWORD *)a2 + 15) == 12)
        {
          uint64_t v51 = *((void *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 12;
          uint64_t v54 = *((void *)a2 + 1);
          int v55 = (google::protobuf::Arena *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if (v54) {
            int v55 = *(google::protobuf::Arena **)v55;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v55);
          *((void *)a2 + 6) = v51;
          if (*((_DWORD *)a2 + 15) != 12)
          {
            *(void *)(*(void *)(v51 + 48) + 8 * v49) = *(void *)(qword_26AEE1A08 + 8 * v48);
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
            *((_DWORD *)a2 + 15) = 12;
            uint64_t v59 = *((void *)a2 + 1);
            uint64_t v60 = (google::protobuf::Arena *)(v59 & 0xFFFFFFFFFFFFFFFELL);
            if (v59) {
              uint64_t v60 = *(google::protobuf::Arena **)v60;
            }
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v60);
            uint64_t v56 = v49;
            *((void *)a2 + 6) = v57;
            uint64_t v58 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (*((_DWORD *)a2 + 15) != 12) {
              goto LABEL_90;
            }
            goto LABEL_89;
          }
        }
        uint64_t v56 = v49;
        *(void *)(*(void *)(v51 + 48) + 8 * v49) = *(void *)(*(void *)(v51 + 48) + 8 * v48);
        uint64_t v57 = (uint64_t *)*((void *)a2 + 6);
LABEL_89:
        uint64_t v58 = v57;
LABEL_90:
        *(_DWORD *)(v57[3] + 4 * v56) = *(_DWORD *)(v58[3] + 4 * v48);
        ++v49;
        if (++v48 == v8) {
          goto LABEL_97;
        }
      }
      while (1)
      {
        uint64_t v52 = *((int *)v50 + 7);
        if (v48 >= v52)
        {
          if (v48 <= v52)
          {
            unsigned int v53 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (*((_DWORD *)a2 + 15) == 12) {
              unsigned int v53 = (uint64_t *)*((void *)a2 + 6);
            }
            operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), *(_DWORD *)(v53[3] + 4 * v48++));
            if (v48 == v8) {
              goto LABEL_97;
            }
            goto LABEL_76;
          }
          ++v50;
        }
        uint64_t v50 = (uint64_t *)*v50;
        if (!v50) {
          goto LABEL_77;
        }
      }
    }
    int v49 = 0;
LABEL_97:
    if (*((_DWORD *)a2 + 15) == 12)
    {
      uint64_t v61 = *((void *)a2 + 6);
      if (*(int *)(v61 + 16) < 1) {
        goto LABEL_100;
      }
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      uint64_t v64 = *((void *)a2 + 1);
      uint64_t v65 = (google::protobuf::Arena *)(v64 & 0xFFFFFFFFFFFFFFFELL);
      if (v64) {
        uint64_t v65 = *(google::protobuf::Arena **)v65;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v65);
      *((void *)a2 + 6) = v61;
      if (*(int *)(v61 + 16) < 1)
      {
LABEL_100:
        if (*((_DWORD *)a2 + 15) == 12)
        {
          uint64_t v62 = *((void *)a2 + 6);
          if (*(int *)(v62 + 40) < 1)
          {
LABEL_103:
            if (*((_DWORD *)a2 + 15) == 12)
            {
              uint64_t v63 = *((void *)a2 + 6);
            }
            else
            {
              operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
              *((_DWORD *)a2 + 15) = 12;
              uint64_t v68 = *((void *)a2 + 1);
              uint64_t v69 = (google::protobuf::Arena *)(v68 & 0xFFFFFFFFFFFFFFFELL);
              if (v68) {
                uint64_t v69 = *(google::protobuf::Arena **)v69;
              }
              google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v69);
              uint64_t v63 = v70;
              *((void *)a2 + 6) = v70;
            }
            *(_DWORD *)(v63 + 64) = 0;
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v107 >> 1);
            if (v107) {
              uint64_t v71 = (uint64_t *)v108;
            }
            else {
              uint64_t v71 = (uint64_t *)&v108;
            }
            if (v107 >= 2)
            {
              int v72 = &v71[2 * (v107 >> 1)];
              unsigned int v73 = *(_DWORD *)(v63 + 64);
              do
              {
                uint64_t v74 = *v71;
                int v75 = *(_DWORD *)(v63 + 68);
                unsigned int v76 = v73 + 1;
                if (v73 == v75)
                {
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v73 + 1);
                  int v75 = *(_DWORD *)(v63 + 68);
                }
                uint64_t v77 = *(void *)(v63 + 72);
                *(void *)(v77 + 8 * v73) = v74;
                *(_DWORD *)(v63 + 64) = v76;
                uint64_t v78 = v71[1];
                v73 += 2;
                if (v76 == v75)
                {
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v73);
                  uint64_t v77 = *(void *)(v63 + 72);
                }
                *(void *)(v77 + 8 * v76) = v78;
                *(_DWORD *)(v63 + 64) = v73;
                v71 += 2;
              }
              while (v71 != v72);
            }
            operations_research::sat::CpModelPresolver::DivideLinearByGcd(this, a2);
            LOBYTE(v3) = 1;
            goto LABEL_170;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 12;
          uint64_t v66 = *((void *)a2 + 1);
          unint64_t v67 = (google::protobuf::Arena *)(v66 & 0xFFFFFFFFFFFFFFFELL);
          if (v66) {
            unint64_t v67 = *(google::protobuf::Arena **)v67;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v67);
          *((void *)a2 + 6) = v62;
          if (*(int *)(v62 + 40) < 1) {
            goto LABEL_103;
          }
        }
        *(_DWORD *)(v62 + 40) = v49;
        goto LABEL_103;
      }
    }
    *(_DWORD *)(v61 + 16) = v49;
    goto LABEL_100;
  }
LABEL_170:
  if (v107) {
    operator delete(v108);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v110, v111);
  return v3 & 1;
}

void sub_23CC4CA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC4CA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29,void *__p)
{
  if (a29) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v30 - 112, *(void **)(v30 - 104));
  _Unwind_Resume(a1);
}

unint64_t *operations_research::Domain::operator=(unint64_t *a1, unint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *a2;
    uint64_t v6 = (long long *)a2[1];
    uint64_t v4 = (long long *)(a2 + 1);
    unint64_t v5 = v6;
    if (v3) {
      uint64_t v4 = v5;
    }
    absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Assign<absl::lts_2020_02_25::inlined_vector_internal::IteratorValueAdapter<std::allocator<operations_research::ClosedInterval>,operations_research::ClosedInterval const*>>(a1, v4, v3 >> 1);
  }
  return a1;
}

BOOL absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::contains<int>(void *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  unint64_t v5 = (v4 >> 7) ^ (*a1 >> 12);
  uint64_t v6 = a1[3];
  uint64_t v7 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v8 = v5 & v6;
    uint64_t v9 = *(void *)(*a1 + v8);
    unint64_t v10 = ((v9 ^ v7) - 0x101010101010101) & ~(v9 ^ v7) & 0x8080808080808080;
    if (v10) {
      break;
    }
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v11 = a1[3];
      return v11 != v6;
    }
    v2 += 8;
    unint64_t v5 = v2 + v8;
  }
  while (1)
  {
    unint64_t v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v6;
    if (*(_DWORD *)(a1[1] + 16 * v11) == v3) {
      return v11 != v6;
    }
    v10 &= v10 - 1;
    if (!v10) {
      goto LABEL_5;
    }
  }
}

uint64_t operations_research::sat::CpModelPresolver::PresolveSmallLinear(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2, __n128 a3)
{
  if (*((_DWORD *)a2 + 15) != 12) {
    return 0;
  }
  unint64_t v4 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (*((unsigned char *)v4 + 504)) {
    return 0;
  }
  uint64_t v8 = *((void *)a2 + 6);
  int v9 = *(_DWORD *)(v8 + 16);
  if (!v9)
  {
    char v75 = 13;
    strcpy(__p, "linear: empty");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v4, (uint64_t)__p);
    if (v75 < 0) {
      operator delete(*(void **)__p);
    }
    if (*((_DWORD *)a2 + 15) == 12) {
      char v16 = (uint64_t *)*((void *)a2 + 6);
    }
    else {
      char v16 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    }
    operations_research::Domain::FromFlatSpanOfIntervals(v16[9], *((int *)v16 + 16), (unint64_t *)__p, v15);
    if (operations_research::Domain::Contains((operations_research::Domain *)__p, 0))
    {
      operations_research::sat::ConstraintProto::Clear(a2);
      uint64_t v5 = 1;
      goto LABEL_31;
    }
    uint64_t v19 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
LABEL_30:
    uint64_t v5 = v19;
LABEL_31:
    if (__p[0]) {
      operator delete(*(void **)&__p[8]);
    }
    return v5;
  }
  int v73 = 0;
  if (v9 == 1
    && *((int *)a2 + 4) >= 1
    && **(void **)(v8 + 48) == 1
    && operations_research::sat::PresolveContext::GetAbsRelation(v4, **(_DWORD **)(v8 + 24), &v73))
  {
    uint64_t v10 = *((void *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "linear: remove abs from abs(x) in domain");
    operations_research::sat::PresolveContext::UpdateRuleStats(v10, (uint64_t)__p);
    if (v75 < 0) {
      operator delete(*(void **)__p);
    }
    if (*((_DWORD *)a2 + 15) == 12) {
      uint64_t v12 = (uint64_t *)*((void *)a2 + 6);
    }
    else {
      uint64_t v12 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    }
    operations_research::Domain::FromFlatSpanOfIntervals(v12[9], *((int *)v12 + 16), &v69, v11);
    operations_research::Domain::Domain(&v67, 0, 0x7FFFFFFFFFFFFFFFLL);
    operations_research::Domain::IntersectionWith(&v69, (const operations_research::Domain *)&v67, &v71);
    if (*((_DWORD *)a2 + 15) == 12) {
      long long v36 = (uint64_t *)*((void *)a2 + 6);
    }
    else {
      long long v36 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    }
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)v36[3], &v65);
    operations_research::Domain::IntersectionWith(&v71, (const operations_research::Domain *)&v65, (unint64_t *)__p);
    if (v65)
    {
      operator delete(v66);
      if ((v71 & 1) == 0)
      {
LABEL_55:
        if ((v67 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_62;
      }
    }
    else if ((v71 & 1) == 0)
    {
      goto LABEL_55;
    }
    operator delete(v72);
    if ((v67 & 1) == 0)
    {
LABEL_56:
      if ((v69 & 1) == 0) {
        goto LABEL_58;
      }
      goto LABEL_57;
    }
LABEL_62:
    operator delete(v68);
    if ((v69 & 1) == 0)
    {
LABEL_58:
      if (operations_research::Domain::IsEmpty((operations_research::Domain *)__p))
      {
        uint64_t v19 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
        goto LABEL_30;
      }
      operations_research::Domain::Negation((operations_research::Domain *)__p, v37, &v67);
      operations_research::Domain::UnionWith((operations_research::Domain *)__p, (const operations_research::Domain *)&v67, &v69);
      operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v73, &v65);
      operations_research::Domain::IntersectionWith(&v69, (const operations_research::Domain *)&v65, &v71);
      if (v65)
      {
        operator delete(v66);
        if ((v69 & 1) == 0)
        {
LABEL_66:
          if ((v67 & 1) == 0)
          {
LABEL_68:
            if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v71))
            {
              uint64_t v5 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
            }
            else
            {
              unint64_t v51 = operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
              operations_research::sat::ConstraintProto::set_name(v51, *((std::string **)a2 + 5));
              uint64_t v52 = *((int *)a2 + 4);
              if (v52)
              {
                unsigned int v53 = (int *)*((void *)a2 + 3);
                unsigned int v54 = *(_DWORD *)(v51 + 16);
                uint64_t v55 = 4 * v52;
                do
                {
                  int v56 = *v53;
                  if (v54 == *(_DWORD *)(v51 + 20)) {
                    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v51 + 16), v54 + 1);
                  }
                  *(_DWORD *)(*(void *)(v51 + 24) + 4 * v54) = v56;
                  *(_DWORD *)(v51 + 16) = v54 + 1;
                  ++v53;
                  ++v54;
                  v55 -= 4;
                }
                while (v55);
              }
              operations_research::sat::ConstraintProto::mutable_linear((operations_research::sat::ConstraintProto *)v51);
              uint64_t v58 = v57;
              int v59 = v73;
              uint64_t v62 = *(unsigned int *)(v57 + 16);
              int v61 = *(_DWORD *)(v57 + 20);
              uint64_t v60 = (unsigned int *)(v57 + 16);
              if (v62 == v61) {
                google::protobuf::RepeatedField<int>::Reserve(v60, v62 + 1);
              }
              *(_DWORD *)(*(void *)(v58 + 24) + 4 * v62) = v59;
              uint64_t v63 = *(unsigned int *)(v58 + 40);
              *(_DWORD *)(v58 + 16) = v62 + 1;
              if (v63 == *(_DWORD *)(v58 + 44)) {
                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v58 + 40), v63 + 1);
              }
              *(void *)(*(void *)(v58 + 48) + 8 * v63) = 1;
              *(_DWORD *)(v58 + 40) = v63 + 1;
              operations_research::sat::ConstraintProto::mutable_linear((operations_research::sat::ConstraintProto *)v51);
              operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>(&v71, v64);
              operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                           + 2));
              operations_research::sat::ConstraintProto::Clear(a2);
              uint64_t v5 = 1;
            }
            if (v71) {
              operator delete(v72);
            }
            goto LABEL_31;
          }
LABEL_67:
          operator delete(v68);
          goto LABEL_68;
        }
      }
      else if ((v69 & 1) == 0)
      {
        goto LABEL_66;
      }
      operator delete(v70);
      if ((v67 & 1) == 0) {
        goto LABEL_68;
      }
      goto LABEL_67;
    }
LABEL_57:
    operator delete(v70);
    goto LABEL_58;
  }
  int v13 = *((_DWORD *)a2 + 4);
  if (v13)
  {
    if (v13 != 1) {
      return 0;
    }
    uint64_t v14 = *((_DWORD *)a2 + 15) == 12
        ? (uint64_t *)*((void *)a2 + 6)
        : &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (*((_DWORD *)v14 + 4) != 1 || *(void *)v14[6] == -1) {
      return 0;
    }
    uint64_t v20 = (const char *)**((unsigned int **)a2 + 3);
    uint64_t v21 = (const char *)*(unsigned int *)v14[3];
    if (~v21 <= (int)v21) {
      int v22 = *(_DWORD *)v14[3];
    }
    else {
      int v22 = ~v21;
    }
    if ((v21 & 0x80000000) != 0)
    {
      int v24 = 0;
      uint64_t v23 = -*(void *)v14[6];
    }
    else
    {
      uint64_t v23 = *(void *)v14[6];
      int v24 = 1;
    }
    if (*((_DWORD *)v14 + 16) == 2)
    {
      int v45 = (void *)v14[9];
      uint64_t v46 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
      if (*v45 == v45[1])
      {
        if (v24) {
          uint64_t v47 = *v45 * v23;
        }
        else {
          uint64_t v47 = -(*v45 * v23);
        }
        if (operations_research::sat::PresolveContext::StoreLiteralImpliesVarEqValue(v46, v20, v22, v47)) {
          operations_research::SparseBitset<long long>::Set((void *)(*((void *)this + 2) + 248), v22);
        }
LABEL_129:
        operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                     + 2));
        return 0;
      }
    }
    else
    {
      uint64_t v46 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
    }
    operations_research::sat::PresolveContext::DomainOf(v46, v21, &v71);
    operations_research::Domain::FromFlatSpanOfIntervals(v14[9], *((int *)v14 + 16), &v67, v48);
    operations_research::Domain::Complement((operations_research::Domain *)&v67, &v69);
    operations_research::Domain::IntersectionWith(&v71, (const operations_research::Domain *)&v69, (unint64_t *)__p);
    if (v69)
    {
      operator delete(v70);
      if ((v67 & 1) == 0)
      {
LABEL_94:
        if ((v71 & 1) == 0) {
          goto LABEL_96;
        }
        goto LABEL_95;
      }
    }
    else if ((v67 & 1) == 0)
    {
      goto LABEL_94;
    }
    operator delete(v68);
    if ((v71 & 1) == 0)
    {
LABEL_96:
      if (operations_research::Domain::Size((operations_research::Domain *)__p) == 1)
      {
        if (v24) {
          uint64_t v50 = operations_research::Domain::Min((operations_research::Domain *)__p, v49) * v23;
        }
        else {
          uint64_t v50 = -(v23 * operations_research::Domain::Min((operations_research::Domain *)__p, v49));
        }
        if (operations_research::sat::PresolveContext::StoreLiteralImpliesVarNEqValue(*((operations_research::sat::PresolveContext **)this + 2), v20, v22, v50))operations_research::SparseBitset<long long>::Set((void *)(*((void *)this + 2) + 248), v22); {
        if (__p[0])
        }
          operator delete(*(void **)&__p[8]);
        goto LABEL_129;
      }
LABEL_132:
      if (__p[0]) {
        operator delete(*(void **)&__p[8]);
      }
      return 0;
    }
LABEL_95:
    operator delete(v72);
    goto LABEL_96;
  }
  if (*((_DWORD *)a2 + 15) != 12)
  {
    uint64_t v17 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (dword_26AEE19E8 == 2) {
      goto LABEL_45;
    }
    if (dword_26AEE19E8 != 1) {
      return 0;
    }
LABEL_43:
    if ((*(_DWORD *)v17[3] & 0x80000000) != 0) {
      uint64_t v25 = -*(void *)v17[6];
    }
    else {
      uint64_t v25 = *(void *)v17[6];
    }
    uint64_t v38 = *((void *)this + 2);
    char v75 = 16;
    strcpy(__p, "linear: size one");
    operations_research::sat::PresolveContext::UpdateRuleStats(v38, (uint64_t)__p);
    if (v75 < 0) {
      operator delete(*(void **)__p);
    }
    if (*((_DWORD *)a2 + 15) == 12) {
      uint64_t v40 = (uint64_t *)*((void *)a2 + 6);
    }
    else {
      uint64_t v40 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    }
    int v41 = *(_DWORD *)v40[3];
    if (~v41 <= v41) {
      unint64_t v42 = v41;
    }
    else {
      unint64_t v42 = ~v41;
    }
    operations_research::Domain::FromFlatSpanOfIntervals(v40[9], *((int *)v40 + 16), (unint64_t *)__p, v39);
    uint64_t v43 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
    operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)__p, v25, &v71);
    char v44 = operations_research::sat::PresolveContext::IntersectDomainWith(v43, (const char *)v42, (const operations_research::Domain *)&v71, 0);
    if (v71) {
      operator delete(v72);
    }
    if (v44) {
      operations_research::sat::ConstraintProto::Clear(a2);
    }
    goto LABEL_106;
  }
  uint64_t v17 = (uint64_t *)*((void *)a2 + 6);
  int v18 = *((_DWORD *)v17 + 4);
  if (v18 == 1) {
    goto LABEL_43;
  }
  if (v18 != 2) {
    return 0;
  }
LABEL_45:
  operations_research::Domain::FromFlatSpanOfIntervals(v17[9], *((int *)v17 + 16), (unint64_t *)__p, a3);
  uint64_t v27 = operations_research::Domain::Min((operations_research::Domain *)__p, v26);
  if (v27 != operations_research::Domain::Max((operations_research::Domain *)__p, v28)) {
    goto LABEL_132;
  }
  unint64_t v29 = (unsigned int *)v17[3];
  unint64_t v31 = (const char *)*v29;
  uint64_t v30 = (const char *)v29[1];
  unint64_t v32 = (uint64_t *)v17[6];
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  if (*v32 == 1)
  {
    uint64_t v33 = -v33;
  }
  else
  {
    if (v33 == 1)
    {
      uint64_t v33 = -v34;
      long long v35 = v30;
      uint64_t v30 = v31;
      goto LABEL_104;
    }
    if (v34 != -1)
    {
      if (v33 != -1) {
        goto LABEL_132;
      }
      uint64_t v27 = -v27;
      long long v35 = v30;
      uint64_t v30 = v31;
      uint64_t v33 = *v32;
      goto LABEL_104;
    }
    uint64_t v27 = -v27;
  }
  long long v35 = v31;
LABEL_104:
  if (!operations_research::sat::PresolveContext::StoreAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), v35, v30, v33, v27))goto LABEL_132; {
  operations_research::sat::ConstraintProto::Clear(a2);
  }
LABEL_106:
  if (__p[0]) {
    operator delete(*(void **)&__p[8]);
  }
  return 1;
}

void sub_23CC4D4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14, uint64_t a15, char a16, void *a17, uint64_t a18, char a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,int a25,__int16 a26,char a27,char a28)
{
  if (a19) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::SparseBitset<long long>::Set(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 6));
  if ((v3 & (1 << a2)) == 0)
  {
    *(void *)(v2 + 8 * (a2 >> 6)) = v3 | (1 << a2);
    uint64_t v7 = (char *)a1[8];
    unint64_t v6 = a1[9];
    if ((unint64_t)v7 < v6)
    {
      *(void *)uint64_t v7 = a2;
      uint64_t v8 = (uint64_t)(v7 + 8);
LABEL_23:
      a1[8] = v8;
      return;
    }
    int v9 = (char *)a1[7];
    uint64_t v10 = (v7 - v9) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(8 * v13);
      __n128 v15 = (unint64_t *)&v14[8 * v10];
      char v16 = &v14[8 * v13];
      unint64_t *v15 = a2;
      uint64_t v8 = (uint64_t)(v15 + 1);
      int64_t v17 = v7 - v9;
      if (v7 == v9) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v14 = 0;
      __n128 v15 = (unint64_t *)(8 * v10);
      char v16 = 0;
      *(void *)(8 * v10) = a2;
      uint64_t v8 = 8 * v10 + 8;
      int64_t v17 = v7 - v9;
      if (v7 == v9)
      {
LABEL_21:
        a1[7] = v15;
        a1[8] = v8;
        a1[9] = v16;
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_23;
      }
    }
    unint64_t v18 = v17 - 8;
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v21 = &v7[-v20];
    __n128 v15 = (unint64_t *)((char *)v15 - v20);
    int v22 = &v14[8 * v10 - 16];
    uint64_t v23 = v7 - 16;
    uint64_t v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      _OWORD *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    uint64_t v7 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        unint64_t v26 = *((void *)v7 - 1);
        v7 -= 8;
        *--__n128 v15 = v26;
      }
      while (v7 != v9);
    }
    goto LABEL_21;
  }
}

uint64_t operations_research::sat::CpModelPresolver::PropagateDomainsInLinear(operations_research::sat::CpModelPresolver *this, int a2, operations_research::sat::ConstraintProto *a3)
{
  v212[7] = *MEMORY[0x263EF8340];
  int v208 = a2;
  if (*((_DWORD *)a3 + 15) != 12) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 2);
  if (*(unsigned char *)(v4 + 504)) {
    return 0;
  }
  uint64_t v185 = *(unsigned int *)(*((void *)a3 + 6) + 16);
  unint64_t v8 = (int)v185 + 1;
  uint64_t v10 = *(void *)(v4 + 152);
  uint64_t v9 = *(void *)(v4 + 160);
  unint64_t v11 = (void *)(v4 + 152);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
  if (v8 <= v12)
  {
    if (v8 < v12)
    {
      uint64_t v13 = v10 + 24 * v8;
      if (v9 != v13)
      {
        uint64_t v14 = *(void *)(v4 + 160);
        do
        {
          char v15 = *(unsigned char *)(v14 - 24);
          v14 -= 24;
          if (v15) {
            operator delete(*(void **)(v9 - 16));
          }
          uint64_t v9 = v14;
        }
        while (v14 != v13);
      }
      *(void *)(v4 + 160) = v13;
    }
  }
  else
  {
    std::vector<operations_research::Domain>::__append((uint64_t *)(v4 + 152), v8 - v12);
  }
  uint64_t v17 = *(void *)(v4 + 176);
  uint64_t v16 = *(void *)(v4 + 184);
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 3);
  int v187 = (unint64_t **)(v4 + 176);
  if (v8 <= v18)
  {
    if (v8 < v18)
    {
      uint64_t v19 = v17 + 24 * v8;
      if (v16 != v19)
      {
        uint64_t v20 = *(void *)(v4 + 184);
        do
        {
          char v21 = *(unsigned char *)(v20 - 24);
          v20 -= 24;
          if (v21) {
            operator delete(*(void **)(v16 - 16));
          }
          uint64_t v16 = v20;
        }
        while (v20 != v19);
      }
      *(void *)(v4 + 184) = v19;
    }
  }
  else
  {
    std::vector<operations_research::Domain>::__append((uint64_t *)(v4 + 176), v8 - v18);
  }
  uint64_t v186 = (operations_research::sat::PresolveContext **)this;
  operations_research::Domain::Domain(v212, 0);
  uint64_t v23 = *v187;
  if (*v187 == v212)
  {
    if (v212[0]) {
      operator delete((void *)v212[1]);
    }
  }
  else
  {
    uint64_t v24 = (void **)(v23 + 1);
    if (*(unsigned char *)v23) {
      operator delete(*v24);
    }
    *uint64_t v23 = v212[0];
    __n128 v22 = *(__n128 *)&v212[1];
    *(_OWORD *)uint64_t v24 = *(_OWORD *)&v212[1];
  }
  if ((int)v185 >= 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (*((_DWORD *)a3 + 15) == 12) {
        uint64_t v27 = (uint64_t *)*((void *)a3 + 6);
      }
      unint64_t v28 = (const char *)*(unsigned int *)(v27[3] + 4 * v26);
      if ((v28 & 0x80000000) != 0) {
        break;
      }
      uint64_t v29 = *(void *)(v27[6] + 8 * v26);
      operations_research::sat::PresolveContext::DomainOf(v186[2], v28, &v209);
      operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v209, 0, v29, v212);
      unint64_t v31 = (unint64_t *)(*v11 + v25 * 8);
      if (v31 == v212)
      {
        if (v212[0]) {
          operator delete((void *)v212[1]);
        }
      }
      else
      {
        unint64_t v32 = (void **)(v31 + 1);
        if (*(unsigned char *)v31) {
          operator delete(*v32);
        }
        unint64_t *v31 = v212[0];
        int8x16_t v30 = *(int8x16_t *)&v212[1];
        *(_OWORD *)unint64_t v32 = *(_OWORD *)&v212[1];
        v212[0] = 0;
      }
      if (v209) {
        operator delete(v210);
      }
      operations_research::Domain::AdditionWith((operations_research::Domain *)&(*v187)[v25], (const operations_research::Domain *)(*v11 + v25 * 8), &v209, v30);
      operations_research::Domain::RelaxIfTooComplex(&v209, v33, v212);
      uint64_t v34 = &(*v187)[v25];
      long long v35 = v34 + 3;
      if (v34 + 3 == v212)
      {
        if (v212[0]) {
          operator delete((void *)v212[1]);
        }
      }
      else
      {
        long long v36 = (void **)(v34 + 4);
        if (*v35) {
          operator delete(*v36);
        }
        *(void *)long long v35 = v212[0];
        __n128 v22 = *(__n128 *)&v212[1];
        *(_OWORD *)long long v36 = *(_OWORD *)&v212[1];
        v212[0] = 0;
      }
      if (v209) {
        operator delete(v210);
      }
      v25 += 3;
      ++v26;
      if (3 * v185 == v25) {
        goto LABEL_49;
      }
    }
    uint64_t v177 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v212, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1427);
    uint64_t v178 = (void *)google::LogMessage::stream(v177);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
LABEL_291:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v212);
  }
LABEL_49:
  char v37 = *v187;
  uint64_t v38 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  if (*((_DWORD *)a3 + 15) == 12) {
    uint64_t v38 = (uint64_t *)*((void *)a3 + 6);
  }
  operations_research::Domain::FromFlatSpanOfIntervals(v38[9], *((int *)v38 + 16), &v206, v22);
  __n128 v39 = (operations_research::Domain *)&v37[3 * (int)v185];
  if (operations_research::Domain::IsIncludedIn(v39, (const operations_research::Domain *)&v206))
  {
    uint64_t v40 = (uint64_t)v186[2];
    HIBYTE(v212[2]) = 19;
    strcpy((char *)v212, "linear: always true");
    operations_research::sat::PresolveContext::UpdateRuleStats(v40, (uint64_t)v212);
    if (SHIBYTE(v212[2]) < 0) {
      operator delete((void *)v212[0]);
    }
    operations_research::sat::ConstraintProto::Clear(a3);
    uint64_t v5 = 1;
    goto LABEL_283;
  }
  operations_research::Domain::SimplifyUsingImpliedDomain((operations_research::Domain *)&v206, v39, &v204);
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v204))
  {
    uint64_t v41 = (uint64_t)v186[2];
    HIBYTE(v212[2]) = 18;
    strcpy((char *)v212, "linear: infeasible");
    operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)v212);
    if (SHIBYTE(v212[2]) < 0) {
      operator delete((void *)v212[0]);
    }
    uint64_t v5 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse((operations_research::sat::CpModelPresolver *)v186, a3);
    if ((v204 & 1) == 0) {
      goto LABEL_283;
    }
    goto LABEL_282;
  }
  unint64_t v42 = (void **)v205;
  if ((v204 & 1) == 0) {
    unint64_t v42 = (void **)&v205;
  }
  unint64_t v43 = (8 * v204) & 0xFFFFFFFFFFFFFFF0;
  if (v43 == 16 * (v206 >> 1))
  {
    if (v204 < 2) {
      goto LABEL_76;
    }
    char v44 = (void **)((char *)v42 + v43);
    if (v206) {
      int v45 = v207;
    }
    else {
      int v45 = (void **)&v207;
    }
    while (*v42 == *v45 && v42[1] == v45[1])
    {
      v42 += 2;
      v45 += 2;
      if (v42 == v44) {
        goto LABEL_76;
      }
    }
  }
  uint64_t v47 = (uint64_t)v186[2];
  strcpy((char *)v212, "linear: simplified rhs");
  HIBYTE(v212[2]) = 22;
  operations_research::sat::PresolveContext::UpdateRuleStats(v47, (uint64_t)v212);
  if (SHIBYTE(v212[2]) < 0) {
    operator delete((void *)v212[0]);
  }
LABEL_76:
  if (*((_DWORD *)a3 + 15) == 12)
  {
    uint64_t v48 = *((void *)a3 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a3);
    *((_DWORD *)a3 + 15) = 12;
    uint64_t v49 = *((void *)a3 + 1);
    uint64_t v50 = (google::protobuf::Arena *)(v49 & 0xFFFFFFFFFFFFFFFELL);
    if (v49) {
      uint64_t v50 = *(google::protobuf::Arena **)v50;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v50);
    uint64_t v48 = v51;
    *((void *)a3 + 6) = v51;
  }
  *(_DWORD *)(v48 + 64) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v48 + 64), v204 >> 1);
  if (v204) {
    unsigned int v53 = (uint64_t *)v205;
  }
  else {
    unsigned int v53 = (uint64_t *)&v205;
  }
  if (v204 >= 2)
  {
    int v61 = &v53[2 * (v204 >> 1)];
    unsigned int v62 = *(_DWORD *)(v48 + 64);
    do
    {
      uint64_t v63 = *v53;
      int v64 = *(_DWORD *)(v48 + 68);
      unsigned int v65 = v62 + 1;
      if (v62 == v64)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v48 + 64), v62 + 1);
        int v64 = *(_DWORD *)(v48 + 68);
      }
      uint64_t v66 = *(void *)(v48 + 72);
      *(void *)(v66 + 8 * v62) = v63;
      *(_DWORD *)(v48 + 64) = v65;
      uint64_t v67 = v53[1];
      v62 += 2;
      if (v65 == v64)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v48 + 64), v62);
        uint64_t v66 = *(void *)(v48 + 72);
      }
      *(void *)(v66 + 8 * v65) = v67;
      *(_DWORD *)(v48 + 64) = v62;
      v53 += 2;
    }
    while (v53 != v61);
  }
  HIBYTE(v203) = 0;
  uint64_t v54 = operations_research::Domain::Max((operations_research::Domain *)&v204, v52);
  operations_research::Domain::Domain(&v209, 0x8000000000000000, v54);
  operations_research::Domain::IntersectionWith(v39, (const operations_research::Domain *)&v209, v212);
  char IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)v212, (const operations_research::Domain *)&v204);
  uint64_t v57 = v186;
  if (v212[0]) {
    operator delete((void *)v212[1]);
  }
  if (v209) {
    operator delete(v210);
  }
  HIBYTE(v203) = IsIncludedIn;
  LOBYTE(v203) = 0;
  uint64_t v58 = operations_research::Domain::Min((operations_research::Domain *)&v204, v55);
  operations_research::Domain::Domain(&v209, v58, 0x7FFFFFFFFFFFFFFFLL);
  operations_research::Domain::IntersectionWith(v39, (const operations_research::Domain *)&v209, v212);
  char v60 = operations_research::Domain::IsIncludedIn((operations_research::Domain *)v212, (const operations_research::Domain *)&v204);
  if ((v212[0] & 1) == 0)
  {
    if ((v209 & 1) == 0) {
      goto LABEL_91;
    }
LABEL_101:
    operator delete(v210);
    LOBYTE(v203) = v60;
    if (*((int *)a3 + 4) > 1)
    {
LABEL_92:
      uint64_t v5 = 0;
      if ((v204 & 1) == 0) {
        goto LABEL_283;
      }
      goto LABEL_282;
    }
    goto LABEL_102;
  }
  operator delete((void *)v212[1]);
  if (v209) {
    goto LABEL_101;
  }
LABEL_91:
  LOBYTE(v203) = v60;
  if (*((int *)a3 + 4) > 1) {
    goto LABEL_92;
  }
LABEL_102:
  BOOL v202 = 0;
  operations_research::Domain::Negation((operations_research::Domain *)&v204, v59, &v200);
  operations_research::Domain::Domain(&v198, 0);
  unint64_t v196 = 0;
  *(void *)&v194[1] = 0;
  operations_research::Domain::Domain(v212, 0);
  unint64_t v69 = (unint64_t *)(*v11 + 24 * (int)v185);
  if (v69 == v212)
  {
    if (v212[0]) {
      operator delete((void *)v212[1]);
    }
  }
  else
  {
    uint64_t v70 = (void **)(v69 + 1);
    if (*(unsigned char *)v69) {
      operator delete(*v70);
    }
    *unint64_t v69 = v212[0];
    __n128 v68 = *(__n128 *)&v212[1];
    *(_OWORD *)uint64_t v70 = *(_OWORD *)&v212[1];
  }
  char v184 = 0;
  unint64_t v71 = ((((unint64_t)&off_264E82C18 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 7));
  unint64_t v182 = v71 >> 7;
  uint64_t v183 = 0x101010101010101 * (v71 & 0x7F);
  int v72 = v185;
  while (1)
  {
    uint64_t v73 = (v72 - 1);
    if (v72 < 1)
    {
      if (v202)
      {
        uint64_t v176 = (uint64_t)v57[2];
        std::string::basic_string[abi:ne180100]<0>(v212, "linear: reduced variable domains");
        operations_research::sat::PresolveContext::UpdateRuleStats(v176, (uint64_t)v212);
        if (SHIBYTE(v212[2]) < 0) {
          operator delete((void *)v212[0]);
        }
      }
      if ((v184 & 1) == 0) {
        goto LABEL_276;
      }
      uint64_t v5 = operations_research::sat::CpModelPresolver::CanonicalizeLinear((operations_research::sat::CpModelPresolver *)v57, a3);
      goto LABEL_277;
    }
    v194[0] = 0;
    if (*((_DWORD *)a3 + 15) == 12)
    {
      uint64_t v74 = (uint64_t *)*((void *)a3 + 6);
      char v75 = (int *)(v74[3] + 4 * v73);
    }
    else
    {
      char v75 = (int *)(qword_26AEE19F0 + 4 * v73);
      uint64_t v74 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    }
    v194[0] = *v75;
    uint64_t v76 = *(void *)(v74[6] + 8 * v73);
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v198, (const operations_research::Domain *)(*v11 + 24 * v72), &v209, (int8x16_t)v68);
    operations_research::Domain::RelaxIfTooComplex(&v209, v77, v212);
    if (v198) {
      operator delete((void *)__p);
    }
    unint64_t v198 = v212[0];
    int8x16_t v78 = *(int8x16_t *)&v212[1];
    long long __p = *(_OWORD *)&v212[1];
    v212[0] = 0;
    if (v209) {
      operator delete(v210);
    }
    operations_research::Domain::AdditionWith((operations_research::Domain *)&(*v187)[3 * v73], (const operations_research::Domain *)&v198, v212, v78);
    if (v194[1]) {
      operator delete((void *)v195);
    }
    *(void *)&v194[1] = v212[0];
    long long v195 = *(_OWORD *)&v212[1];
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v194[1], (const operations_research::Domain *)&v200, &v209, *(int8x16_t *)&v212[1]);
    operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v209, -v76, v212);
    if (v196) {
      operator delete((void *)v197);
    }
    unint64_t v196 = v212[0];
    long long v197 = *(_OWORD *)&v212[1];
    v212[0] = 0;
    if (v209) {
      operator delete(v210);
    }
    int v79 = *((_DWORD *)a3 + 4);
    if (v79 != 1)
    {
      if (!v79
        && (operations_research::sat::PresolveContext::IntersectDomainWith(v57[2], (const char *)v194[0], (const operations_research::Domain *)&v196, &v202) & 1) == 0)
      {
        goto LABEL_270;
      }
      goto LABEL_139;
    }
    if (v194[0] < 0)
    {
      int v179 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v212, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1484);
      unsigned int v180 = (void *)google::LogMessage::stream(v179);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
      goto LABEL_291;
    }
    if ((operations_research::Domain::IsIncludedIn((operations_research::Domain *)(*((void *)v57[2] + 64) + 24 * v194[0]), (const operations_research::Domain *)&v196) & 1) == 0)
    {
      uint64_t v80 = v57[2];
      int v81 = **((_DWORD **)a3 + 3);
      uint64_t v82 = v194[0];
      unint64_t v192 = 0;
      unint64_t v83 = v196;
      if ((v196 & 1) == 0)
      {
        unint64_t v192 = v196;
        long long v193 = v197;
        goto LABEL_137;
      }
      uint64_t v84 = (long long *)v197;
      unint64_t v85 = v196 >> 1;
      if (v196 < 4)
      {
        uint64_t v87 = &v193;
        if (v196 < 2)
        {
          uint64_t v88 = 0;
LABEL_136:
          unint64_t v192 = v88 + (v83 & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v57 = v186;
LABEL_137:
          operations_research::sat::DomainDeductions::AddDeduction((uint64_t *)v80 + 41, v81, v82, (uint64_t)&v192);
          if (v192) {
            operator delete((void *)v193);
          }
          goto LABEL_139;
        }
      }
      else
      {
        if (v196 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v86 = v81;
        uint64_t v87 = (long long *)operator new(16 * v85);
        *(void *)&long long v193 = v87;
        *((void *)&v193 + 1) = v83 >> 1;
        unint64_t v192 = 1;
        int v81 = v86;
      }
      do
      {
        long long v89 = *v84++;
        *v87++ = v89;
        --v85;
      }
      while (v85);
      uint64_t v88 = v192;
      goto LABEL_136;
    }
LABEL_139:
    if (operations_research::sat::PresolveContext::IsFixed(v57[2], (const char *)v194[0])) {
      goto LABEL_140;
    }
    if (!(HIBYTE(v203) | v203)) {
      goto LABEL_160;
    }
    if (HIBYTE(v203) == v203) {
      google::MakeCheckOpString<BOOL,BOOL>((int)&v203 + 1, (int)&v203, "is_le_constraint != is_ge_constraint");
    }
    BOOL v91 = v57[2];
    if (v203 == v76 > 0)
    {
      uint64_t v92 = 0;
      uint64_t v93 = (uint64_t *)(*((void *)v91 + 3) + 48 * v194[0]);
      unint64_t v90 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v208)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v208));
      unint64_t v94 = (v90 >> 7) ^ ((unint64_t)*v93 >> 12);
      uint64_t v95 = v93[3];
      while (1)
      {
        unint64_t v96 = v94 & v95;
        uint64_t v97 = *(void *)(*v93 + v96);
        unint64_t v98 = ((v97 ^ (0x101010101010101 * (v90 & 0x7F))) - 0x101010101010101) & ~(v97 ^ (0x101010101010101
                                                                                            * (v90 & 0x7F))) & 0x8080808080808080;
        if (v98) {
          break;
        }
LABEL_148:
        if ((v97 & (~v97 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_158;
        }
        v92 += 8;
        unint64_t v94 = v92 + v96;
      }
      while (*(_DWORD *)(v93[1] + 4 * ((v96 + (__clz(__rbit64(v98)) >> 3)) & v95)) != v208)
      {
        v98 &= v98 - 1;
        if (!v98) {
          goto LABEL_148;
        }
      }
    }
    else
    {
      uint64_t v99 = 0;
      uint64_t v93 = (uint64_t *)(*(void *)v91 + 48 * v194[0]);
      unint64_t v90 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v208)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v208));
      unint64_t v100 = (v90 >> 7) ^ ((unint64_t)*v93 >> 12);
      uint64_t v101 = v93[3];
      while (1)
      {
        unint64_t v102 = v100 & v101;
        uint64_t v103 = *(void *)(*v93 + v102);
        unint64_t v104 = ((v103 ^ (0x101010101010101 * (v90 & 0x7F))) - 0x101010101010101) & ~(v103 ^ (0x101010101010101
                                                                                               * (v90 & 0x7F))) & 0x8080808080808080;
        if (v104) {
          break;
        }
LABEL_156:
        if ((v103 & (~v103 << 6) & 0x8080808080808080) != 0)
        {
LABEL_158:
          unint64_t v105 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v93, v90);
          *(_DWORD *)(v93[1] + 4 * v105) = v208;
          goto LABEL_159;
        }
        v99 += 8;
        unint64_t v100 = v99 + v102;
      }
      while (*(_DWORD *)(v93[1] + 4 * ((v102 + (__clz(__rbit64(v104)) >> 3)) & v101)) != v208)
      {
        v104 &= v104 - 1;
        if (!v104) {
          goto LABEL_156;
        }
      }
    }
LABEL_159:
    BOOL v106 = v57[2];
    if (*((unsigned char *)v106 + 64)) {
      goto LABEL_160;
    }
    uint64_t v113 = 0;
    LODWORD(v114) = v194[0];
    uint64_t v115 = (void *)(*((void *)v106 + 85) + 48 * v194[0]);
    uint64_t v116 = v182 ^ (*v115 >> 12);
    uint64_t v117 = v115[3];
    while (1)
    {
      uint64_t v118 = v116 & v117;
      uint64_t v119 = *(void *)(*v115 + v118);
      unint64_t v120 = ((v119 ^ v183) - 0x101010101010101) & ~(v119 ^ v183) & 0x8080808080808080;
      if (v120)
      {
        while (1)
        {
          unint64_t v121 = (v118 + (__clz(__rbit64(v120)) >> 3)) & v117;
          if (*(_DWORD *)(v115[1] + 4 * v121) == -1) {
            break;
          }
          v120 &= v120 - 1;
          if (!v120) {
            goto LABEL_172;
          }
        }
        unint64_t v122 = v115[2] - (v121 != v117);
        if (v121 == v117)
        {
          uint64_t v123 = 0;
          goto LABEL_239;
        }
        uint64_t v123 = *(void *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>((uint64_t *)v106 + 67, v194);
        BOOL v106 = v57[2];
        if (!v123)
        {
          LODWORD(v114) = v194[0];
          goto LABEL_239;
        }
        if (*((unsigned char *)v106 + 608))
        {
          int v124 = 7;
          goto LABEL_219;
        }
        LODWORD(v114) = v194[0];
        if (v123 < 1) {
          goto LABEL_239;
        }
        unint64_t v122 = (int)v122;
        unint64_t v90 = *(void *)v106 + 48 * v194[0];
        if (*(void *)(v90 + 16) < (unint64_t)(int)v122) {
          goto LABEL_160;
        }
LABEL_243:
        uint64_t v162 = v57[2];
        uint64_t v163 = (const char *)v194[0];
        if (*(void *)(*(void *)v162 + 48 * v194[0] + 16) < v122) {
          goto LABEL_160;
        }
        uint64_t v164 = operations_research::sat::PresolveContext::MinOf(v57[2], (const char *)v194[0]);
        operations_research::Domain::Domain(v212, v164);
        char v165 = operations_research::sat::PresolveContext::IntersectDomainWith(v162, v163, (const operations_research::Domain *)v212, 0);
        if (v212[0]) {
          operator delete((void *)v212[1]);
        }
        if (v165) {
          goto LABEL_251;
        }
        goto LABEL_276;
      }
LABEL_172:
      if ((v119 & (~v119 << 6) & 0x8080808080808080) != 0) {
        break;
      }
      v113 += 8;
      uint64_t v116 = v113 + v118;
    }
    uint64_t v123 = 0;
    unint64_t v122 = v115[2];
LABEL_239:
    unint64_t v90 = *((void *)v106 + 3) + 48 * (int)v114;
    unint64_t v122 = (int)v122;
    if (*(void *)(v90 + 16) >= (unint64_t)(int)v122)
    {
      BOOL v106 = v57[2];
      long long v114 = (const char *)v194[0];
      if (*(void *)(*((void *)v106 + 3) + 48 * v194[0] + 16) >= (unint64_t)(int)v122) {
        break;
      }
    }
    if ((v123 & 0x8000000000000000) == 0)
    {
      unint64_t v90 = *(void *)v106 + 48 * (int)v114;
      if (*(void *)(v90 + 16) >= (unint64_t)(int)v122) {
        goto LABEL_243;
      }
    }
LABEL_160:
    if (*((_DWORD *)a3 + 4)) {
      goto LABEL_218;
    }
    uint64_t v107 = operations_research::Domain::Min((operations_research::Domain *)&v204, (const char *)v90);
    if (v107 == operations_research::Domain::Max((operations_research::Domain *)&v204, v108)
      || !operations_research::sat::PresolveContext::VariableWithCostIsUniqueAndRemovable(v57[2], v194[0]))
    {
      goto LABEL_198;
    }
    if (v76 > 0 != *(void *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>((uint64_t *)v57[2] + 67, v194) > 0)
    {
      operations_research::sat::PresolveContext::DomainOf(v57[2], (const char *)v194[0], v212);
      if (v212[0]) {
        operator delete((void *)v212[1]);
      }
      if (CanBeFixedToMax)
      {
        uint64_t v112 = operations_research::Domain::Max((operations_research::Domain *)&v204, v109);
        operations_research::Domain::Domain(v212, v112);
        goto LABEL_184;
      }
LABEL_198:
      uint64_t v136 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (*((_DWORD *)a3 + 15) == 12) {
        uint64_t v136 = (uint64_t *)*((void *)a3 + 6);
      }
      if (*((int *)v136 + 4) >= 3)
      {
        uint64_t v137 = operations_research::Domain::Min((operations_research::Domain *)&v204, v109);
        if (v137 == operations_research::Domain::Max((operations_research::Domain *)&v204, v138))
        {
          operations_research::sat::PresolveContext::DomainOf(v57[2], (const char *)v194[0], v212);
          char v139 = operations_research::Domain::operator!=(v212, (uint64_t *)&v196);
          if (v212[0]) {
            operator delete((void *)v212[1]);
          }
          uint64_t v140 = v76 >= 0 ? v76 : -v76;
          char v141 = v140 == 1 ? v139 : 1;
          if ((v141 & 1) == 0 && *((int *)*v57 + 136) >= 1)
          {
            unsigned int v142 = v57[2];
            if (!*((unsigned char *)v142 + 64))
            {
              uint64_t v143 = (void *)(*((void *)v142 + 85) + 48 * v194[0]);
              LODWORD(v212[0]) = -1;
              BOOL v144 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::contains<int>(v143, (int *)v212);
              char v145 = &operations_research::sat::_LinearConstraintProto_default_instance_;
              if (*((_DWORD *)a3 + 15) == 12) {
                char v145 = (uint64_t *)*((void *)a3 + 6);
              }
              uint64_t v146 = *((void *)v57[2] + 85) + 48 * v194[0];
              if ((*((_DWORD *)v145 + 4) - 1) * (*(_DWORD *)(v146 + 16) - v144 - 1) < *((_DWORD *)v145 + 4)
                                                                                     + *(_DWORD *)(v146 + 16)
                                                                                     - v144)
              {
                BOOL v181 = v144;
                BOOL v189 = 0;
                uint64_t v190 = 0;
                uint64_t v191 = 0;
                uint64_t v150 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::begin(v146);
                __n128 v151 = (void *)(*(void *)v146 + *(void *)(v146 + 24));
                if (v151 == v150)
                {
LABEL_259:
                  uint64_t v169 = (int *)v189;
                  uint64_t v170 = v190;
                  if (v189 != v190)
                  {
                    do
                    {
                      uint64_t v171 = *v169;
                      operations_research::sat::SubstituteVariable((operations_research::sat *)v194[0], v76, (uint64_t)a3, *(const operations_research::sat::ConstraintProto **)(*(void *)(*((void *)v57[2] + 6) + 56)+ 8 * v171+ 8), v149, v68);
                      operations_research::sat::PresolveContext::UpdateConstraintVariableUsage((char **)v57[2], v171);
                      ++v169;
                    }
                    while (v169 != v170);
                  }
                  uint64_t v172 = (uint64_t)v57[2];
                  if (v181)
                  {
                    operations_research::sat::PresolveContext::SubstituteVariableInObjective((uint64_t)v57[2], v194[0], v76, (uint64_t)a3, 0);
                    uint64_t v172 = (uint64_t)v57[2];
                  }
                  v212[0] = (unint64_t)"linear: variable substitution ";
                  v212[1] = 30;
                  uint64_t v173 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)(((char *)v190 - (unsigned char *)v189) >> 2), v211, v148);
                  unint64_t v209 = (unint64_t)v211;
                  v210 = (void *)(v173 - v211);
                  absl::lts_2020_02_25::StrCat((uint64_t)v212, (uint64_t)&v209, &v188);
                  operations_research::sat::PresolveContext::UpdateRuleStats(v172, (uint64_t)&v188);
                  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v188.__r_.__value_.__l.__data_);
                  }
                  int v174 = v57[2];
                  v212[0] = *(void *)(*((void *)v174 + 85) + 48 * v194[0] + 16);
                  LODWORD(v188.__r_.__value_.__l.__data_) = 1;
                  if (v212[0] != 1) {
                    google::MakeCheckOpString<unsigned long,int>((int)v212, (int)&v188, "context_->VarToConstraints(var).size() == 1");
                  }
                  operations_research::sat::PresolveContext::MarkVariableAsRemoved(v174, v194[0]);
                  int v175 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*((operations_research::sat::CpModelProto **)v57[2] + 7));
                  operations_research::sat::ConstraintProto::CopyFrom(v175, a3);
                  operations_research::sat::ConstraintProto::Clear(a3);
                  int v124 = 1;
                }
                else
                {
                  uint64_t v152 = v147;
                  char v153 = 0;
                  do
                  {
                    LODWORD(v212[0]) = 0;
                    int v154 = *v152;
                    LODWORD(v212[0]) = v154;
                    if (v154 != -1)
                    {
                      if (v154 == -2) {
                        goto LABEL_258;
                      }
                      uint64_t v155 = *(void *)(*(void *)(*((void *)v57[2] + 6) + 56) + 8 * v154 + 8);
                      if ((operations_research::sat::ConstraintProto *)v155 != a3)
                      {
                        if (*(_DWORD *)(v155 + 60) != 12) {
                          goto LABEL_258;
                        }
                        uint64_t v156 = *(int *)(v155 + 16);
                        if (v156)
                        {
                          int v157 = *(int **)(v155 + 24);
                          uint64_t v158 = 4 * v156;
                          while (1)
                          {
                            int v159 = *v157;
                            if (~*v157 > *v157) {
                              int v159 = ~v159;
                            }
                            if (v159 == v194[0]) {
                              break;
                            }
                            ++v157;
                            v158 -= 4;
                            if (!v158) {
                              goto LABEL_234;
                            }
                          }
                          char v153 = 1;
                        }
LABEL_234:
                        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v189, v212);
                      }
                    }
                    int v160 = *((char *)v150 + 1);
                    uint64_t v150 = (void *)((char *)v150 + 1);
                    ++v152;
                    if (v160 <= -2)
                    {
                      do
                      {
                        unint64_t v161 = (__clz(__rbit64(((*v150 >> 7) & ~*v150 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                        uint64_t v150 = (void *)((char *)v150 + v161);
                        v152 += v161;
                      }
                      while (*(char *)v150 < -1);
                    }
                  }
                  while (v150 != v151);
                  if ((v153 & 1) == 0) {
                    goto LABEL_259;
                  }
LABEL_258:
                  int v124 = 7;
                }
                if (v189)
                {
                  uint64_t v190 = (int *)v189;
                  operator delete(v189);
                }
                goto LABEL_219;
              }
            }
          }
        }
      }
LABEL_218:
      int v124 = 7;
      goto LABEL_219;
    }
    operations_research::sat::PresolveContext::DomainOf(v57[2], (const char *)v194[0], v212);
    if (v212[0]) {
      operator delete((void *)v212[1]);
    }
    if (!CanBeFixedToMin) {
      goto LABEL_198;
    }
    uint64_t v127 = operations_research::Domain::Min((operations_research::Domain *)&v204, v109);
    operations_research::Domain::Domain(v212, v127);
LABEL_184:
    if (v204) {
      operator delete((void *)v205);
    }
    unint64_t v204 = v212[0];
    long long v205 = *(_OWORD *)&v212[1];
    uint64_t v128 = (uint64_t)v57[2];
    std::string::basic_string[abi:ne180100]<0>(v212, "linear: tightened into equality");
    operations_research::sat::PresolveContext::UpdateRuleStats(v128, (uint64_t)v212);
    if (SHIBYTE(v212[2]) < 0) {
      operator delete((void *)v212[0]);
    }
    operations_research::sat::ConstraintProto::mutable_linear(a3);
    operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>(&v204, v129);
    operations_research::Domain::Negation((operations_research::Domain *)&v204, v130, v212);
    if (v200) {
      operator delete((void *)v201);
    }
    unint64_t v200 = v212[0];
    long long v201 = *(_OWORD *)&v212[1];
    operations_research::Domain::Domain(v212, 0);
    if (v198) {
      operator delete((void *)__p);
    }
    unint64_t v198 = v212[0];
    __n128 v68 = *(__n128 *)&v212[1];
    long long __p = *(_OWORD *)&v212[1];
    __int16 v203 = 0;
    unint64_t v131 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (*((_DWORD *)a3 + 15) == 12) {
      unint64_t v131 = (uint64_t *)*((void *)a3 + 6);
    }
    uint64_t v132 = *((int *)v131 + 4);
    if (v132)
    {
      long long v133 = (int *)v131[3];
      uint64_t v134 = 4 * v132;
      do
      {
        int v135 = *v133;
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((void *)v57[2] + 3) + 48 * *v133), &v208);
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*(void *)v57[2] + 48 * v135), &v208);
        ++v133;
        int v124 = 7;
        v134 -= 4;
      }
      while (v134);
      LODWORD(v73) = v185;
    }
    else
    {
      int v124 = 7;
      LODWORD(v73) = v185;
    }
LABEL_219:
    int v72 = v73;
    if (v124 != 7)
    {
LABEL_270:
      uint64_t v5 = 1;
      goto LABEL_277;
    }
  }
  uint64_t v166 = operations_research::sat::PresolveContext::MaxOf(v57[2], (const char *)v194[0]);
  operations_research::Domain::Domain(v212, v166);
  char v167 = operations_research::sat::PresolveContext::IntersectDomainWith(v106, v114, (const operations_research::Domain *)v212, 0);
  if (v212[0]) {
    operator delete((void *)v212[1]);
  }
  if (v167)
  {
LABEL_251:
    uint64_t v168 = (uint64_t)v57[2];
    std::string::basic_string[abi:ne180100]<0>(v212, "linear: dual fixing");
    operations_research::sat::PresolveContext::UpdateRuleStats(v168, (uint64_t)v212);
    if (SHIBYTE(v212[2]) < 0) {
      operator delete((void *)v212[0]);
    }
LABEL_140:
    char v184 = 1;
    goto LABEL_218;
  }
LABEL_276:
  uint64_t v5 = 0;
LABEL_277:
  if ((v194[1] & 1) == 0)
  {
    if ((v196 & 1) == 0) {
      goto LABEL_279;
    }
LABEL_286:
    operator delete((void *)v197);
    if (v198) {
      goto LABEL_287;
    }
LABEL_280:
    if ((v200 & 1) == 0) {
      goto LABEL_281;
    }
LABEL_288:
    operator delete((void *)v201);
    if ((v204 & 1) == 0) {
      goto LABEL_283;
    }
LABEL_282:
    operator delete((void *)v205);
    goto LABEL_283;
  }
  operator delete((void *)v195);
  if (v196) {
    goto LABEL_286;
  }
LABEL_279:
  if ((v198 & 1) == 0) {
    goto LABEL_280;
  }
LABEL_287:
  operator delete((void *)__p);
  if (v200) {
    goto LABEL_288;
  }
LABEL_281:
  if (v204) {
    goto LABEL_282;
  }
LABEL_283:
  if (v206) {
    operator delete(v207);
  }
  return v5;
}

void sub_23CC4EFA0()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_23CC4EFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36,uint64_t a37,char a38,void *a39,uint64_t a40,char a41,void *a42,uint64_t a43,char a44,void *a45,uint64_t a46,char a47,void *a48,uint64_t a49,uint64_t a50,char a51,void *a52)
{
  if (__p) {
    operator delete(__p);
  }
  if (a38)
  {
    operator delete(a39);
    if ((a41 & 1) == 0)
    {
LABEL_5:
      if ((a44 & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a41 & 1) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a42);
  if ((a44 & 1) == 0)
  {
LABEL_6:
    if ((a47 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_11:
    operator delete(a48);
LABEL_12:
    if (a51) {
      operator delete(a52);
    }
    if (*(unsigned char *)(v52 - 240))
    {
      operator delete(*(void **)(v52 - 232));
      _Unwind_Resume(exception_object);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_10:
  operator delete(a45);
  if ((a47 & 1) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t operations_research::Domain::operator!=(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v5 = (void *)a1[1];
  uint64_t v3 = a1 + 1;
  uint64_t v4 = v5;
  if ((v2 & 1) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v6 = *a2;
  unint64_t v7 = (8 * v2) & 0xFFFFFFFFFFFFFFF0;
  if (v7 != 16 * ((unint64_t)*a2 >> 1)) {
    return 1;
  }
  if (v2 < 2) {
    return 0;
  }
  uint64_t v9 = (void *)((char *)v4 + v7);
  unint64_t v12 = (void *)a2[1];
  uint64_t v10 = a2 + 1;
  unint64_t v11 = v12;
  if (v6) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v10;
  }
  do
  {
    BOOL v14 = *v4 == *v13 && v4[1] == v13[1];
    uint64_t result = !v14;
    if (!v14) {
      break;
    }
    v4 += 2;
    v13 += 2;
  }
  while (v4 != v9);
  return result;
}

void operations_research::sat::anonymous namespace'::TakeIntersectionWith(void *a1, char **a2)
{
  long long __p = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v58 = a2 + 1;
  uint64_t v5 = *a2;
  if (**a2 <= -2)
  {
    do
    {
      unint64_t v6 = (__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v5 = (void *)((char *)v5 + v6);
      v4 += 4 * v6;
    }
    while (*(char *)v5 < -1);
  }
  unint64_t v7 = (unint64_t)a2[3];
  unint64_t v8 = (void *)((char *)v3 + v7);
  if (v5 != (void *)((char *)v3 + v7))
  {
    char v60 = (void *)((char *)v3 + v7);
    int v61 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(int *)v4;
      unint64_t v13 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v12)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v12));
      unint64_t v14 = (v13 >> 7) ^ (*a1 >> 12);
      uint64_t v15 = a1[3];
      uint64_t v16 = 0x101010101010101 * (v13 & 0x7F);
      while (1)
      {
        uint64_t v17 = v14 & v15;
        uint64_t v18 = *(void *)(*a1 + v17);
        unint64_t v19 = ((v18 ^ v16) - 0x101010101010101) & ~(v18 ^ v16) & 0x8080808080808080;
        if (v19) {
          break;
        }
LABEL_10:
        if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_33;
        }
        v11 += 8;
        unint64_t v14 = v11 + v17;
      }
      while (1)
      {
        unint64_t v20 = (v17 + (__clz(__rbit64(v19)) >> 3)) & v15;
        if (*(_DWORD *)(a1[1] + 4 * v20) == v12) {
          break;
        }
        v19 &= v19 - 1;
        if (!v19) {
          goto LABEL_10;
        }
      }
      if (v20 == v15) {
        goto LABEL_33;
      }
      if (v61 >= v9) {
        break;
      }
      *(_DWORD *)int v61 = v12;
      uint64_t v21 = (uint64_t)(v61 + 4);
LABEL_32:
      int v61 = (char *)v21;
LABEL_33:
      int v34 = *((char *)v5 + 1);
      uint64_t v5 = (void *)((char *)v5 + 1);
      v4 += 4;
      if (v34 <= -2)
      {
        do
        {
          unint64_t v35 = (__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v5 = (void *)((char *)v5 + v35);
          v4 += 4 * v35;
        }
        while (*(char *)v5 < -1);
      }
      if (v5 == v8)
      {
        unint64_t v43 = v58;
        unint64_t v42 = a2;
        unint64_t v7 = (unint64_t)a2[3];
        char v44 = (int *)v61;
        if (v7 >= 0x80) {
          goto LABEL_47;
        }
LABEL_50:
        if (v7)
        {
          v42[2] = 0;
          memset(*v42, 128, v7 + 8);
          v42[3][(void)*v42] = -1;
          int v45 = v42[3];
          uint64_t v47 = (uint64_t)&v45[-((unint64_t)v45 >> 3)];
          if (v45 == (char *)7) {
            uint64_t v47 = 6;
          }
          v42[5] = (char *)(v47 - (void)v42[2]);
          uint64_t v46 = v42[4];
          if (!v46) {
            goto LABEL_54;
          }
        }
        else
        {
          int v45 = 0;
          uint64_t v46 = v42[4];
          if (!v46) {
            goto LABEL_54;
          }
        }
LABEL_65:
        *((void *)v46 + 1) = 0;
        *(void *)uint64_t v46 = v45;
        *((void *)v46 + 4) = 0;
        *((void *)v46 + 2) = 0;
        uint64_t v48 = __p;
        if (__p == v44) {
          goto LABEL_66;
        }
LABEL_55:
        uint64_t v49 = v48;
        do
        {
          uint64_t v53 = 0;
          uint64_t v55 = *v49;
          unint64_t v56 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v55)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v55));
          unint64_t v54 = (v56 >> 7) ^ ((unint64_t)*v42 >> 12);
          uint64_t v57 = v42[3];
          while (1)
          {
            unint64_t v50 = v54 & (unint64_t)v57;
            uint64_t v51 = *(void *)&(*v42)[v50];
            unint64_t v52 = ((v51 ^ (0x101010101010101 * (v56 & 0x7F))) - 0x101010101010101) & ~(v51 ^ (0x101010101010101
                                                                                                * (v56 & 0x7F))) & 0x8080808080808080;
            if (v52) {
              break;
            }
LABEL_59:
            if ((v51 & (~v51 << 6) & 0x8080808080808080) != 0)
            {
              *(_DWORD *)&(*v43)[4
                               * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v42, v56)] = v55;
              goto LABEL_62;
            }
            v53 += 8;
            unint64_t v54 = v53 + v50;
          }
          while (*(_DWORD *)&(*v43)[4 * ((v50 + (__clz(__rbit64(v52)) >> 3)) & (unint64_t)v57)] != v55)
          {
            v52 &= v52 - 1;
            if (!v52) {
              goto LABEL_59;
            }
          }
LABEL_62:
          ++v49;
        }
        while (v49 != v44);
        goto LABEL_66;
      }
    }
    int64_t v22 = v61 - v10;
    uint64_t v23 = (v61 - v10) >> 2;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v9 - v10) >> 1 > v24) {
      unint64_t v24 = (v9 - v10) >> 1;
    }
    if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      if (v25 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v26 = v25;
      uint64_t v27 = (char *)operator new(4 * v25);
      unint64_t v25 = v26;
      unint64_t v28 = &v27[4 * v23];
      *(_DWORD *)unint64_t v28 = v12;
      uint64_t v21 = (uint64_t)(v28 + 4);
      uint64_t v29 = v61;
      if (v61 == v10) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v27 = 0;
      unint64_t v28 = (char *)(4 * v23);
      *(_DWORD *)(4 * v23) = v12;
      uint64_t v21 = 4 * v23 + 4;
      uint64_t v29 = v61;
      if (v61 == v10) {
        goto LABEL_29;
      }
    }
    unint64_t v30 = v29 - 4 - v10;
    if (v30 >= 0xBC)
    {
      if (&v27[v22 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v27[v22 - 4])
      {
        unint64_t v31 = v61;
      }
      else if (&v29[-(v30 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v29 - 4)
      {
        unint64_t v31 = v61;
      }
      else if ((unint64_t)(v29 - &v27[v22]) >= 0x20)
      {
        uint64_t v36 = (v30 >> 2) + 1;
        uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v31 = &v61[-v37];
        v28 -= v37;
        uint64_t v38 = &v27[4 * v23 - 16];
        __n128 v39 = v61 - 16;
        uint64_t v40 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v41 = *(_OWORD *)v39;
          *((_OWORD *)v38 - 1) = *((_OWORD *)v39 - 1);
          *(_OWORD *)uint64_t v38 = v41;
          v38 -= 32;
          v39 -= 32;
          v40 -= 8;
        }
        while (v40);
        if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v31 = v61;
      }
    }
    else
    {
      unint64_t v31 = v29;
    }
    do
    {
      int v32 = *((_DWORD *)v31 - 1);
      v31 -= 4;
      *((_DWORD *)v28 - 1) = v32;
      v28 -= 4;
    }
    while (v31 != v10);
LABEL_29:
    uint64_t v9 = &v27[4 * v25];
    long long __p = (int *)v28;
    if (v10)
    {
      uint64_t v33 = &v27[4 * v25];
      operator delete(v10);
      uint64_t v9 = v33;
    }
    uint64_t v10 = v28;
    unint64_t v8 = v60;
    goto LABEL_32;
  }
  char v44 = 0;
  unint64_t v43 = a2 + 1;
  unint64_t v42 = a2;
  if (v7 < 0x80) {
    goto LABEL_50;
  }
LABEL_47:
  operator delete(*v42);
  int v45 = 0;
  *unint64_t v42 = (char *)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v42[5] = 0;
  v43[1] = 0;
  v43[2] = 0;
  operations_research::sat::PresolveContext *v43 = 0;
  uint64_t v46 = v42[4];
  if (v46) {
    goto LABEL_65;
  }
LABEL_54:
  uint64_t v48 = __p;
  if (__p != v44) {
    goto LABEL_55;
  }
LABEL_66:
  if (v48)
  {
    operator delete(v48);
  }
}

void sub_23CC4F848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::anonymous namespace'::RhsCanBeFixedToMin(uint64_t this, char *a2, const operations_research::Domain *a3, const operations_research::Domain *a4, const operations_research::Domain *a5)
{
  if (this >= 0) {
    uint64_t v5 = this;
  }
  else {
    uint64_t v5 = -this;
  }
  if ((*(void *)a2 & 0x1FFFFFFFELL) != 2 || v5 != 1) {
    return 0;
  }
  if (this == -1)
  {
    uint64_t v14 = operations_research::Domain::Max(a3, a2);
    uint64_t v16 = v14 - operations_research::Domain::Max((operations_research::Domain *)a2, v15);
    if (v16 > operations_research::Domain::Min(a4, v17)) {
      return 0;
    }
  }
  else
  {
    if (this != 1) {
      return 0;
    }
    uint64_t v9 = operations_research::Domain::Max(a3, a2);
    uint64_t v11 = operations_research::Domain::Min((operations_research::Domain *)a2, v10) + v9;
    if (v11 > operations_research::Domain::Min(a4, v12)) {
      return 0;
    }
  }
  return 1;
}

uint64_t operations_research::sat::anonymous namespace'::RhsCanBeFixedToMax(uint64_t this, char *a2, const operations_research::Domain *a3, const operations_research::Domain *a4, const operations_research::Domain *a5)
{
  if (this >= 0) {
    uint64_t v5 = this;
  }
  else {
    uint64_t v5 = -this;
  }
  if ((*(void *)a2 & 0x1FFFFFFFELL) != 2 || v5 != 1) {
    return 0;
  }
  if (this == -1)
  {
    uint64_t v14 = operations_research::Domain::Min(a3, a2);
    uint64_t v16 = v14 - operations_research::Domain::Min((operations_research::Domain *)a2, v15);
    if (v16 < operations_research::Domain::Max(a4, v17)) {
      return 0;
    }
  }
  else
  {
    if (this != 1) {
      return 0;
    }
    uint64_t v9 = operations_research::Domain::Min(a3, a2);
    uint64_t v11 = operations_research::Domain::Max((operations_research::Domain *)a2, v10) + v9;
    if (v11 < operations_research::Domain::Max(a4, v12)) {
      return 0;
    }
  }
  return 1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  uint64_t v5 = *a1;
  unint64_t v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v7 = a1[3];
  uint64_t v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v9 = v6 & v7;
    uint64_t v10 = *(void *)(v5 + (v6 & v7));
    unint64_t v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v2 += 8;
    unint64_t v6 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_DWORD *)(a1[1] + 4 * v12) == v3) {
      break;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_5;
    }
  }
  if (v12 == v7) {
    return 0;
  }
  --a1[2];
  uint64_t v14 = *(void *)(v5 + ((v12 - 8) & v7));
  unint64_t v15 = *(void *)(v5 + v12) & (~*(void *)(v5 + v12) << 6) & 0x8080808080808080;
  unint64_t v16 = v14 & (~v14 << 6) & 0x8080808080808080;
  if (v16) {
    BOOL v17 = v15 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v21 = 0;
    char v18 = -2;
  }
  else
  {
    unsigned int v19 = (__clz(v16) >> 3) + (__clz(__rbit64(v15)) >> 3);
    BOOL v20 = v19 >= 8;
    uint64_t v21 = v19 < 8;
    if (v20) {
      char v18 = -2;
    }
    else {
      char v18 = 0x80;
    }
  }
  *(unsigned char *)(v5 + v12) = v18;
  *(unsigned char *)((a1[3] & (v12 - 8)) + (a1[3] & 7) + *a1 + 1) = v18;
  uint64_t v22 = a1[4];
  a1[5] += v21;
  if (!v22) {
    return 1;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t result = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  return result;
}

void *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::begin(uint64_t a1)
{
  uint64_t result = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(char *)result <= -2)
  {
    do
    {
      unint64_t v4 = (__clz(__rbit64(((*result >> 7) & ~*result | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t result = (void *)((char *)result + v4);
      v3 += 4 * v4;
    }
    while (*(char *)result < -1);
  }
  return result;
}

void operations_research::sat::CpModelPresolver::ExtractEnforcementLiteralFromLinearConstraint(operations_research::sat::PresolveContext **this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a2 + 15) == 12 && !*((unsigned char *)this[2] + 504))
  {
    uint64_t v3 = *((void *)a2 + 6);
    uint64_t v4 = *(unsigned int *)(v3 + 16);
    if ((int)v4 >= 2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = (const char *)*(unsigned int *)(*(void *)(v3 + 24) + 4 * v5);
        uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v5);
        uint64_t v11 = operations_research::sat::PresolveContext::MinOf(this[2], v9) * v10;
        uint64_t v12 = operations_research::sat::PresolveContext::MaxOf(this[2], v9);
        uint64_t v14 = v12 * v10;
        if (v10 >= 0) {
          uint64_t v15 = v10;
        }
        else {
          uint64_t v15 = -v10;
        }
        if (v8 <= v15) {
          uint64_t v8 = v15;
        }
        if (v14 >= v11) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v12 * v10;
        }
        v6 += v16;
        if (v11 > v14) {
          uint64_t v14 = v11;
        }
        v7 += v14;
        ++v5;
      }
      while (v4 != v5);
      if (*((_DWORD *)a2 + 15) == 12) {
        BOOL v17 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        BOOL v17 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      }
      operations_research::Domain::FromFlatSpanOfIntervals(v17[9], *((int *)v17 + 16), &v73, v13);
      uint64_t v19 = operations_research::Domain::Max((operations_research::Domain *)&v73, v18);
      uint64_t v21 = operations_research::Domain::Min((operations_research::Domain *)&v73, v20);
      uint64_t v23 = v7 - v19;
      if (v7 - v19 <= v21 - v6) {
        uint64_t v23 = v21 - v6;
      }
      if (v8 >= v23)
      {
        BOOL v24 = v6 < operations_research::Domain::Min((operations_research::Domain *)&v73, v22);
        BOOL v26 = v7 > operations_research::Domain::Max((operations_research::Domain *)&v73, v25);
        if (v24 || v26)
        {
          if (v24 && v26)
          {
            uint64_t v27 = (uint64_t)this[2];
            std::string::basic_string[abi:ne180100]<0>(&v77, "linear: split boxed constraint");
            operations_research::sat::PresolveContext::UpdateRuleStats(v27, (uint64_t)&v77);
            if (SHIBYTE(v78) < 0) {
              operator delete(v77);
            }
            unint64_t v28 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*((operations_research::sat::CpModelProto **)this[2] + 6));
            operations_research::sat::ConstraintProto::CopyFrom(v28, a2);
            unint64_t v30 = (void *)*((void *)a2 + 5);
            uint64_t v31 = *((unsigned __int8 *)v30 + 23);
            if (*((char *)v30 + 23) < 0) {
              uint64_t v32 = v30[1];
            }
            else {
              uint64_t v32 = *((unsigned __int8 *)v30 + 23);
            }
            if (v32)
            {
              uint64_t v48 = v30[1];
              if ((v31 & 0x80u) != 0)
              {
                unint64_t v30 = (void *)*v30;
                uint64_t v31 = v48;
              }
              uint64_t v77 = v30;
              *(void *)&long long v78 = v31;
              char v75 = " (part 1)";
              uint64_t v76 = (void *)9;
              absl::lts_2020_02_25::StrCat((uint64_t)&v77, (uint64_t)&v75, &__str);
              operations_research::sat::ConstraintProto::set_name((uint64_t)v28, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            uint64_t v49 = operations_research::Domain::Max((operations_research::Domain *)&v73, v29);
            operations_research::Domain::Domain(&v77, v6, v49);
            operations_research::sat::ConstraintProto::mutable_linear(v28);
            operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>((unint64_t *)&v77, v50);
            if (v77) {
              operator delete((void *)v78);
            }
            uint64_t v51 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*((operations_research::sat::CpModelProto **)this[2] + 6));
            operations_research::sat::ConstraintProto::CopyFrom(v51, a2);
            uint64_t v53 = (void *)*((void *)a2 + 5);
            uint64_t v54 = *((unsigned __int8 *)v53 + 23);
            if (*((char *)v53 + 23) < 0) {
              uint64_t v55 = v53[1];
            }
            else {
              uint64_t v55 = *((unsigned __int8 *)v53 + 23);
            }
            if (v55)
            {
              uint64_t v56 = v53[1];
              if ((v54 & 0x80u) != 0)
              {
                uint64_t v53 = (void *)*v53;
                uint64_t v54 = v56;
              }
              uint64_t v77 = v53;
              *(void *)&long long v78 = v54;
              char v75 = " (part 2)";
              uint64_t v76 = (void *)9;
              absl::lts_2020_02_25::StrCat((uint64_t)&v77, (uint64_t)&v75, &__str);
              operations_research::sat::ConstraintProto::set_name((uint64_t)v51, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            uint64_t v57 = operations_research::Domain::Max((operations_research::Domain *)&v73, v52);
            operations_research::Domain::Domain(&v75, v57, v7);
            operations_research::Domain::UnionWith((operations_research::Domain *)&v73, (const operations_research::Domain *)&v75, (unint64_t *)&v77);
            operations_research::sat::ConstraintProto::mutable_linear(v51);
            operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>((unint64_t *)&v77, v58);
            if (v77) {
              operator delete((void *)v78);
            }
            if (v75) {
              operator delete(v76);
            }
            operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(this[2]);
            operations_research::sat::ConstraintProto::Clear(a2);
          }
          else
          {
            operations_research::sat::ConstraintProto::mutable_linear(a2);
            uint64_t v34 = v33;
            if (*(int *)(v3 + 16) < 1)
            {
              int v36 = 0;
            }
            else
            {
              uint64_t v70 = (unsigned int *)((char *)a2 + 16);
              uint64_t v35 = 0;
              int v36 = 0;
              if (v24)
              {
                do
                {
                  uint64_t v37 = (const char *)*(unsigned int *)(*(void *)(v3 + 24) + 4 * v35);
                  if (operations_research::sat::PresolveContext::MinOf(this[2], v37)
                    || operations_research::sat::PresolveContext::MaxOf(this[2], v37) != 1)
                  {
                    goto LABEL_39;
                  }
                  if (v73 < 2) {
                  uint64_t v39 = *(void *)(v3 + 48);
                  }
                  uint64_t v40 = *(void *)(v39 + 8 * v35);
                  if (v40 >= 0) {
                    uint64_t v41 = *(void *)(v39 + 8 * v35);
                  }
                  else {
                    uint64_t v41 = -v40;
                  }
                  p_p = (long long *)__p;
                  if ((v73 & 1) == 0) {
                    p_p = &__p;
                  }
                  if (v41 + v6 >= *(void *)&p_p[(v73 >> 1) - 1])
                  {
                    if (v40 <= 0)
                    {
                      operations_research::Domain::Domain(&v75, -v40);
                      operations_research::Domain::AdditionWith((operations_research::Domain *)&v73, (const operations_research::Domain *)&v75, &v77, v44);
                      if (v73) {
                        operator delete((void *)__p);
                      }
                      unint64_t v73 = (unint64_t)v77;
                      long long __p = v78;
                      uint64_t v77 = 0;
                      if (v75) {
                        operator delete(v76);
                      }
                      uint64_t v45 = *((unsigned int *)a2 + 4);
                      int v46 = v45 + 1;
                      if (v45 == *((_DWORD *)a2 + 5))
                      {
                        google::protobuf::RepeatedField<int>::Reserve(v70, v46);
                        int v46 = v45 + 1;
                      }
                      *(_DWORD *)(*((void *)a2 + 3) + 4 * v45) = v37;
                      *((_DWORD *)a2 + 4) = v46;
                      v6 -= v40;
                    }
                    else
                    {
                      uint64_t v43 = *((unsigned int *)a2 + 4);
                      if (v43 == *((_DWORD *)a2 + 5)) {
                        google::protobuf::RepeatedField<int>::Reserve(v70, v43 + 1);
                      }
                      *(_DWORD *)(*((void *)a2 + 3) + 4 * v43) = ~v37;
                      *((_DWORD *)a2 + 4) = v43 + 1;
                    }
                    uint64_t v47 = (uint64_t)this[2];
                    uint64_t v77 = operator new(0x38uLL);
                    long long v78 = xmmword_23CE7E440;
                    strcpy((char *)v77, "linear: extracted enforcement literal from constraint");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v47, (uint64_t)&v77);
                    if (SHIBYTE(v78) < 0) {
                      operator delete(v77);
                    }
                  }
                  else
                  {
LABEL_39:
                    *(_DWORD *)(*(void *)(v34 + 24) + 4 * v36) = *(_DWORD *)(*(void *)(v34 + 24) + 4 * v35);
                    *(void *)(*(void *)(v34 + 48) + 8 * v36++) = *(void *)(*(void *)(v34 + 48) + 8 * v35);
                  }
                  ++v35;
                }
                while (v35 < *(int *)(v3 + 16));
              }
              else
              {
                do
                {
                  int v59 = (const char *)*(unsigned int *)(*(void *)(v3 + 24) + 4 * v35);
                  if (operations_research::sat::PresolveContext::MinOf(this[2], v59)
                    || operations_research::sat::PresolveContext::MaxOf(this[2], v59) != 1)
                  {
                    goto LABEL_95;
                  }
                  if (v73 <= 1) {
                  uint64_t v61 = *(void *)(v3 + 48);
                  }
                  uint64_t v62 = *(void *)(v61 + 8 * v35);
                  uint64_t v63 = v62 >= 0 ? *(void *)(v61 + 8 * v35) : -v62;
                  int v64 = (v73 & 1) != 0 ? (long long *)(__p + 8) : (long long *)((char *)&__p + 8);
                  if (v7 - v63 <= *(void *)v64)
                  {
                    if (v62 < 1)
                    {
                      uint64_t v68 = *((unsigned int *)a2 + 4);
                      if (v68 == *((_DWORD *)a2 + 5)) {
                        google::protobuf::RepeatedField<int>::Reserve(v70, v68 + 1);
                      }
                      *(_DWORD *)(*((void *)a2 + 3) + 4 * v68) = ~v59;
                      *((_DWORD *)a2 + 4) = v68 + 1;
                    }
                    else
                    {
                      operations_research::Domain::Domain(&v75, -v62);
                      operations_research::Domain::AdditionWith((operations_research::Domain *)&v73, (const operations_research::Domain *)&v75, &v77, v65);
                      if (v73) {
                        operator delete((void *)__p);
                      }
                      unint64_t v73 = (unint64_t)v77;
                      long long __p = v78;
                      uint64_t v77 = 0;
                      if (v75) {
                        operator delete(v76);
                      }
                      uint64_t v66 = *((unsigned int *)a2 + 4);
                      int v67 = v66 + 1;
                      if (v66 == *((_DWORD *)a2 + 5))
                      {
                        google::protobuf::RepeatedField<int>::Reserve(v70, v67);
                        int v67 = v66 + 1;
                      }
                      *(_DWORD *)(*((void *)a2 + 3) + 4 * v66) = v59;
                      *((_DWORD *)a2 + 4) = v67;
                      v7 -= v62;
                    }
                    uint64_t v69 = (uint64_t)this[2];
                    uint64_t v77 = operator new(0x38uLL);
                    long long v78 = xmmword_23CE7E440;
                    strcpy((char *)v77, "linear: extracted enforcement literal from constraint");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v69, (uint64_t)&v77);
                    if (SHIBYTE(v78) < 0) {
                      operator delete(v77);
                    }
                  }
                  else
                  {
LABEL_95:
                    *(_DWORD *)(*(void *)(v34 + 24) + 4 * v36) = *(_DWORD *)(*(void *)(v34 + 24) + 4 * v35);
                    *(void *)(*(void *)(v34 + 48) + 8 * v36++) = *(void *)(*(void *)(v34 + 48) + 8 * v35);
                  }
                  ++v35;
                }
                while (v35 < *(int *)(v3 + 16));
              }
            }
            if (*(int *)(v34 + 16) >= 1) {
              *(_DWORD *)(v34 + 16) = v36;
            }
            if (*(int *)(v34 + 40) >= 1) {
              *(_DWORD *)(v34 + 40) = v36;
            }
            operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>(&v73, v34);
          }
        }
      }
      if (v73) {
        operator delete((void *)__p);
      }
    }
  }
}

void sub_23CC503AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,char a28,void *__p)
{
  if (a28) {
    operator delete(__p);
  }
  if ((a25 & 1) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::Domain::front(operations_research::Domain *this, const char *a2)
{
  if (*(void *)this <= 1uLL) {
  uint64_t v2 = (char *)this + 8;
  }
  if (*(void *)this) {
    uint64_t v2 = *(char **)v2;
  }
  return *(void *)v2;
}

uint64_t operations_research::Domain::back(operations_research::Domain *this, const char *a2)
{
  unint64_t v2 = *(void *)this;
  if (*(void *)this <= 1uLL) {
  uint64_t v3 = (void *)((char *)this + 8);
  }
  if (v2) {
    uint64_t v3 = (void *)*v3;
  }
  return v3[2 * (v2 >> 1) - 2];
}

void operations_research::sat::CpModelPresolver::ExtractAtMostOneFromLinear(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2, __n128 a3)
{
  v105[1] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*((void *)this + 2) + 504) || *((_DWORD *)a2 + 4)) {
    return;
  }
  if (*((_DWORD *)a2 + 15) == 12) {
    uint64_t v5 = (uint64_t *)*((void *)a2 + 6);
  }
  else {
    uint64_t v5 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  }
  operations_research::Domain::FromFlatSpanOfIntervals(v5[9], *((int *)v5 + 16), v104, a3);
  if (*((_DWORD *)a2 + 15) != 12)
  {
    uint64_t v6 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    unint64_t v94 = a2;
    uint64_t v7 = dword_26AEE19E8;
    if (dword_26AEE19E8 < 1) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v98 = 0;
    do
    {
      uint64_t v10 = (const char *)*(unsigned int *)(v6[3] + 4 * v9);
      uint64_t v11 = *(void *)(v6[6] + 8 * v9);
      uint64_t v12 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v10);
      uint64_t v13 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v10);
      uint64_t v14 = v12 * v11;
      if (v13 * v11 >= v12 * v11) {
        uint64_t v15 = v12 * v11;
      }
      else {
        uint64_t v15 = v13 * v11;
      }
      v98 += v15;
      if (v14 <= v13 * v11) {
        uint64_t v14 = v13 * v11;
      }
      v8 += v14;
      ++v9;
    }
    while (v7 != v9);
    goto LABEL_17;
  }
  uint64_t v6 = (uint64_t *)*((void *)a2 + 6);
  unint64_t v94 = a2;
  uint64_t v7 = *((unsigned int *)v6 + 4);
  if ((int)v7 >= 1) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v98 = 0;
  uint64_t v8 = 0;
LABEL_17:
  uint64_t v16 = 0;
  v105[0] = 0x100000000;
  uint64_t v95 = v8;
  do
  {
    uint64_t v96 = v16;
    int v97 = *((_DWORD *)v105 + v16);
    uint64_t v101 = 0;
    unint64_t v102 = 0;
    uint64_t v103 = 0;
    if ((int)v7 >= 1)
    {
      if (v97)
      {
        uint64_t v17 = 0;
        while (1)
        {
          uint64_t v19 = (const char *)*(unsigned int *)(v6[3] + 4 * v17);
          uint64_t v20 = *(void *)(v6[6] + 8 * v17);
          if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v19)|| operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v19) != 1)
          {
            goto LABEL_24;
          }
          uint64_t v22 = operations_research::Domain::Min((operations_research::Domain *)v104, v21);
          uint64_t v23 = v20 >= 0 ? v20 : -v20;
          if (v8 - 2 * v23 >= v22) {
            goto LABEL_24;
          }
          int v24 = v20 <= 0 ? (int)v19 : ~v19;
          unint64_t v25 = v102;
          if (v102 >= v103) {
            break;
          }
          *(_DWORD *)unint64_t v102 = v24;
          uint64_t v18 = (uint64_t)(v25 + 4);
LABEL_23:
          unint64_t v102 = (char *)v18;
LABEL_24:
          if (++v17 == v7) {
            goto LABEL_89;
          }
        }
        BOOL v26 = (char *)v101;
        int64_t v27 = v102 - (unsigned char *)v101;
        uint64_t v28 = (v102 - (unsigned char *)v101) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v103 - (unsigned char *)v101;
        if ((v103 - (unsigned char *)v101) >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          if (v31 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v32 = v31;
          uint64_t v33 = (char *)operator new(4 * v31);
          unint64_t v31 = v32;
          uint64_t v34 = &v33[4 * v28];
          *(_DWORD *)uint64_t v34 = v24;
          uint64_t v18 = (uint64_t)(v34 + 4);
          if (v25 == v26) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v33 = 0;
          uint64_t v34 = (char *)(4 * v28);
          *(_DWORD *)(4 * v28) = v24;
          uint64_t v18 = 4 * v28 + 4;
          if (v25 == v26)
          {
LABEL_52:
            uint64_t v101 = v34;
            unint64_t v102 = (char *)v18;
            uint64_t v103 = &v33[4 * v31];
            if (v26) {
              operator delete(v26);
            }
            uint64_t v8 = v95;
            goto LABEL_23;
          }
        }
        unint64_t v35 = v25 - 4 - v26;
        if (v35 < 0x2C) {
          goto LABEL_130;
        }
        if ((unint64_t)(v25 - &v33[v27]) < 0x20) {
          goto LABEL_130;
        }
        uint64_t v36 = (v35 >> 2) + 1;
        uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v38 = &v25[-v37];
        v34 -= v37;
        uint64_t v39 = &v33[4 * v28 - 16];
        uint64_t v40 = v25 - 16;
        uint64_t v41 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v42 = *(_OWORD *)v40;
          *((_OWORD *)v39 - 1) = *((_OWORD *)v40 - 1);
          *(_OWORD *)uint64_t v39 = v42;
          v39 -= 32;
          v40 -= 32;
          v41 -= 8;
        }
        while (v41);
        unint64_t v25 = v38;
        if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_130:
          do
          {
            int v43 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v34 - 1) = v43;
            v34 -= 4;
          }
          while (v25 != v26);
        }
        goto LABEL_52;
      }
      uint64_t v44 = 0;
      while (1)
      {
        int v46 = (const char *)*(unsigned int *)(v6[3] + 4 * v44);
        uint64_t v47 = *(void *)(v6[6] + 8 * v44);
        if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v46)|| operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v46) != 1)
        {
          goto LABEL_58;
        }
        uint64_t v49 = operations_research::Domain::Max((operations_research::Domain *)v104, v48);
        uint64_t v50 = v47 >= 0 ? v47 : -v47;
        if (v98 + 2 * v50 <= v49) {
          goto LABEL_58;
        }
        int v51 = v47 >= 1 ? (int)v46 : ~v46;
        unint64_t v52 = v102;
        if (v102 >= v103) {
          break;
        }
        *(_DWORD *)unint64_t v102 = v51;
        uint64_t v45 = (uint64_t)(v52 + 4);
LABEL_57:
        unint64_t v102 = (char *)v45;
LABEL_58:
        if (++v44 == v7) {
          goto LABEL_89;
        }
      }
      uint64_t v53 = (char *)v101;
      int64_t v54 = v102 - (unsigned char *)v101;
      uint64_t v55 = (v102 - (unsigned char *)v101) >> 2;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v57 = v103 - (unsigned char *)v101;
      if ((v103 - (unsigned char *)v101) >> 1 > v56) {
        unint64_t v56 = v57 >> 1;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      if (v58)
      {
        if (v58 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v59 = v58;
        char v60 = (char *)operator new(4 * v58);
        unint64_t v58 = v59;
        uint64_t v61 = &v60[4 * v55];
        *(_DWORD *)uint64_t v61 = v51;
        uint64_t v45 = (uint64_t)(v61 + 4);
        if (v52 == v53) {
          goto LABEL_86;
        }
      }
      else
      {
        char v60 = 0;
        uint64_t v61 = (char *)(4 * v55);
        *(_DWORD *)(4 * v55) = v51;
        uint64_t v45 = 4 * v55 + 4;
        if (v52 == v53)
        {
LABEL_86:
          uint64_t v101 = v61;
          unint64_t v102 = (char *)v45;
          uint64_t v103 = &v60[4 * v58];
          if (v53) {
            operator delete(v53);
          }
          uint64_t v8 = v95;
          goto LABEL_57;
        }
      }
      unint64_t v62 = v52 - 4 - v53;
      if (v62 < 0x2C) {
        goto LABEL_131;
      }
      if ((unint64_t)(v52 - &v60[v54]) < 0x20) {
        goto LABEL_131;
      }
      uint64_t v63 = (v62 >> 2) + 1;
      uint64_t v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
      int8x16_t v65 = &v52[-v64];
      v61 -= v64;
      uint64_t v66 = &v60[4 * v55 - 16];
      int v67 = v52 - 16;
      uint64_t v68 = v63 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v69 = *(_OWORD *)v67;
        *((_OWORD *)v66 - 1) = *((_OWORD *)v67 - 1);
        *(_OWORD *)uint64_t v66 = v69;
        v66 -= 32;
        v67 -= 32;
        v68 -= 8;
      }
      while (v68);
      unint64_t v52 = v65;
      if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_131:
        do
        {
          int v70 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *((_DWORD *)v61 - 1) = v70;
          v61 -= 4;
        }
        while (v52 != v53);
      }
      goto LABEL_86;
    }
LABEL_89:
    unint64_t v71 = (char *)v101;
    if ((unint64_t)(v102 - (unsigned char *)v101) <= 4) {
      goto LABEL_119;
    }
    uint64_t v72 = *((void *)this + 2);
    long long __p = operator new(0x28uLL);
    long long v100 = xmmword_23CE7FBD0;
    if (v97) {
      strcpy((char *)__p, "linear: extracted at most one (min).");
    }
    else {
      strcpy((char *)__p, "linear: extracted at most one (max).");
    }
    operations_research::sat::PresolveContext::UpdateRuleStats(v72, (uint64_t)&__p);
    if (SHIBYTE(v100) < 0)
    {
      operator delete(__p);
      uint64_t v73 = *(void *)(*((void *)this + 2) + 48);
      uint64_t v74 = (unsigned int *)(v73 + 40);
      char v75 = *(int **)(v73 + 56);
      if (!v75)
      {
LABEL_98:
        int v77 = *(_DWORD *)(v73 + 52);
LABEL_100:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v74, v77 + 1);
        char v75 = *(int **)(v73 + 56);
        int v77 = *v75;
        goto LABEL_101;
      }
    }
    else
    {
      uint64_t v73 = *(void *)(*((void *)this + 2) + 48);
      uint64_t v74 = (unsigned int *)(v73 + 40);
      char v75 = *(int **)(v73 + 56);
      if (!v75) {
        goto LABEL_98;
      }
    }
    uint64_t v76 = *(int *)(v73 + 48);
    int v77 = *v75;
    if ((int)v76 < *v75)
    {
      *(_DWORD *)(v73 + 48) = v76 + 1;
      unint64_t v78 = *(void *)&v75[2 * v76 + 2];
      goto LABEL_102;
    }
    if (v77 == *(_DWORD *)(v73 + 52)) {
      goto LABEL_100;
    }
LABEL_101:
    int *v75 = v77 + 1;
    unint64_t v78 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)v74);
    uint64_t v79 = *(void *)(v73 + 56);
    uint64_t v80 = *(int *)(v73 + 48);
    *(_DWORD *)(v73 + 48) = v80 + 1;
    *(void *)(v79 + 8 * v80 + 8) = v78;
LABEL_102:
    uint64_t v81 = *(void *)(v78 + 8);
    uint64_t v82 = (google::protobuf::Arena *)(v81 & 0xFFFFFFFFFFFFFFFELL);
    if (v81)
    {
      uint64_t v82 = *(google::protobuf::Arena **)v82;
      unint64_t v83 = (std::string **)(v78 + 40);
      uint64_t v84 = *(std::string **)(v78 + 40);
      if (v84 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_106:
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v83, v82, *((long long **)v94 + 5));
        goto LABEL_107;
      }
    }
    else
    {
      unint64_t v83 = (std::string **)(v78 + 40);
      uint64_t v84 = *(std::string **)(v78 + 40);
      if (v84 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_106;
      }
    }
    std::string::operator=(v84, *((const std::string **)v94 + 5));
LABEL_107:
    unint64_t v85 = (char *)v101;
    int v86 = v102;
    while (v85 != v86)
    {
      int v87 = *(_DWORD *)v85;
      if (*(_DWORD *)(v78 + 60) == 26)
      {
        unint64_t v88 = *(void *)(v78 + 48);
        uint64_t v90 = *(unsigned int *)(v88 + 16);
        long long v89 = (unsigned int *)(v88 + 16);
        int v91 = v90 + 1;
        if (v90 == *(_DWORD *)(v88 + 20)) {
          goto LABEL_108;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint(v78);
        *(_DWORD *)(v78 + 60) = 26;
        uint64_t v92 = *(void *)(v78 + 8);
        uint64_t v93 = (google::protobuf::Arena *)(v92 & 0xFFFFFFFFFFFFFFFELL);
        if (v92) {
          uint64_t v93 = *(google::protobuf::Arena **)v93;
        }
        unint64_t v88 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v93);
        *(void *)(v78 + 48) = v88;
        uint64_t v90 = *(unsigned int *)(v88 + 16);
        long long v89 = (unsigned int *)(v88 + 16);
        int v91 = v90 + 1;
        if (v90 == *(_DWORD *)(v88 + 20)) {
LABEL_108:
        }
          google::protobuf::RepeatedField<int>::Reserve(v89, v91);
      }
      *(_DWORD *)(*(void *)(v88 + 24) + 4 * v90) = v87;
      *(_DWORD *)(v88 + 16) = v91;
      v85 += 4;
    }
    operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                 + 2));
    uint64_t v8 = v95;
    unint64_t v71 = (char *)v101;
LABEL_119:
    if (v71)
    {
      unint64_t v102 = v71;
      operator delete(v71);
    }
    uint64_t v16 = v96 + 1;
  }
  while (v96 != 1);
  if (v104[0]) {
    operator delete((void *)v104[1]);
  }
}

void sub_23CC50CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  if (a21 < 0)
  {
    operator delete(__p);
    int64_t v27 = a22;
    if (a22)
    {
LABEL_7:
      operator delete(v27);
      if (a25)
      {
LABEL_8:
        operator delete(a26);
        _Unwind_Resume(a1);
      }
LABEL_6:
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64_t v27 = a22;
    if (a22) {
      goto LABEL_7;
    }
  }
  if (a25) {
    goto LABEL_8;
  }
  goto LABEL_6;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveLinearOnBooleans(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*((_DWORD *)a2 + 15) != 12 || *(unsigned char *)(*((void *)this + 2) + 504)) {
    return 0;
  }
  uint64_t v6 = *((void *)a2 + 6);
  uint64_t v135 = *(unsigned int *)(v6 + 16);
  if ((int)v135 <= 0)
  {
    long long __p = (void *)0x7FFFFFFFFFFFFFFFLL;
    uint64_t v141 = 0;
    goto LABEL_32;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v12 = (const char *)*(unsigned int *)(*(void *)(v6 + 24) + 4 * v7);
    if ((v12 & 0x80000000) != 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1939);
      uint64_t v84 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
    }
    long long __p = *(void **)(*(void *)(v6 + 48) + 8 * v7);
    LODWORD(v141) = 0;
    if (!__p) {
      google::MakeCheckOpString<long long,int>((int)&__p, (int)&v141, "coeff != 0");
    }
    if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v12)|| operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v12) != 1)
    {
      return 0;
    }
    if (v11 >= -(uint64_t)__p) {
      uint64_t v14 = -(uint64_t)__p;
    }
    else {
      uint64_t v14 = v11;
    }
    if ((uint64_t)__p >= v11) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = (uint64_t)__p;
    }
    if ((uint64_t)__p >= 1) {
      uint64_t v16 = (uint64_t)__p;
    }
    else {
      uint64_t v16 = -(uint64_t)__p;
    }
    if ((uint64_t)__p >= 1) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = v14;
    }
    if ((uint64_t)__p < 1) {
      v8 += (uint64_t)__p;
    }
    else {
      v9 += (uint64_t)__p;
    }
    if (v10 <= v16) {
      uint64_t v10 = v16;
    }
    ++v7;
  }
  while (v135 != v7);
  long long __p = (void *)v11;
  uint64_t v141 = v10;
  if (v11 > v10) {
LABEL_32:
  }
    google::MakeCheckOpString<long long,long long>((int)&__p, (int)&v141, "min_coeff <= max_coeff");
  operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v6 + 72), *(int *)(v6 + 64), v140, v13);
  if ((operations_research::Domain::Contains((operations_research::Domain *)v140, v8)
     || v8 + v11 <= operations_research::Domain::Max((operations_research::Domain *)v140, v17))
    && (operations_research::Domain::Contains((operations_research::Domain *)v140, v9)
     || v9 - v11 >= operations_research::Domain::Min((operations_research::Domain *)v140, v18)))
  {
    operations_research::Domain::Domain(&__p, v8, v9);
    int IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&__p, (const operations_research::Domain *)v140);
    if (__p) {
      operator delete(v137[0]);
    }
    if (IsIncludedIn)
    {
      uint64_t v22 = *((void *)this + 2);
      long long __p = operator new(0x28uLL);
      *(_OWORD *)uint64_t v137 = xmmword_23CE834B0;
      strcpy((char *)__p, "linear: all BOOLeans and trivially true");
      operations_research::sat::PresolveContext::UpdateRuleStats(v22, (uint64_t)&__p);
      if (SHIBYTE(v137[1]) < 0) {
        operator delete(__p);
      }
      operations_research::sat::ConstraintProto::Clear(a2);
LABEL_48:
      uint64_t v3 = 1;
      if ((v140[0] & 1) == 0) {
        return v3;
      }
LABEL_110:
      operator delete((void *)v140[1]);
      return v3;
    }
    uint64_t v24 = v8 + v11;
    if (v8 + v11 > operations_research::Domain::Max((operations_research::Domain *)v140, v20))
    {
      uint64_t v25 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "linear: negative reified and");
      operations_research::sat::PresolveContext::UpdateRuleStats(v25, (uint64_t)&__p);
      if (SHIBYTE(v137[1]) < 0) {
        operator delete(__p);
      }
      operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
      *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_and(a2) + 16) = 0;
      for (uint64_t i = 0; i != v135; ++i)
      {
        if (*((_DWORD *)a2 + 15) == 4)
        {
          unint64_t v27 = *((void *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 4;
          uint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = (google::protobuf::Arena *)(v28 & 0xFFFFFFFFFFFFFFFELL);
          if (v28) {
            unint64_t v29 = *(google::protobuf::Arena **)v29;
          }
          unint64_t v27 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v29);
          *((void *)a2 + 6) = v27;
        }
        if (*(uint64_t *)(v139 + 8 * i) <= 0) {
          int v30 = *(_DWORD *)(v138 + 4 * i);
        }
        else {
          int v30 = ~*(_DWORD *)(v138 + 4 * i);
        }
        uint64_t v31 = *(unsigned int *)(v27 + 16);
        if (v31 == *(_DWORD *)(v27 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v27 + 16), v31 + 1);
        }
        *(_DWORD *)(*(void *)(v27 + 24) + 4 * v31) = v30;
        *(_DWORD *)(v27 + 16) = v31 + 1;
      }
LABEL_108:
      uint64_t v50 = operations_research::sat::CpModelPresolver::PresolveBoolAnd(this, (uint64_t **)a2);
      goto LABEL_109;
    }
    uint64_t v33 = v9 - v11;
    if (v9 - v11 < operations_research::Domain::Min((operations_research::Domain *)v140, v23))
    {
      uint64_t v34 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "linear: positive reified and");
      operations_research::sat::PresolveContext::UpdateRuleStats(v34, (uint64_t)&__p);
      if (SHIBYTE(v137[1]) < 0) {
        operator delete(__p);
      }
      operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
      *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_and(a2) + 16) = 0;
      for (uint64_t j = 0; j != v135; ++j)
      {
        if (*((_DWORD *)a2 + 15) == 4)
        {
          unint64_t v36 = *((void *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 4;
          uint64_t v37 = *((void *)a2 + 1);
          uint64_t v38 = (google::protobuf::Arena *)(v37 & 0xFFFFFFFFFFFFFFFELL);
          if (v37) {
            uint64_t v38 = *(google::protobuf::Arena **)v38;
          }
          unint64_t v36 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v38);
          *((void *)a2 + 6) = v36;
        }
        if (*(uint64_t *)(v139 + 8 * j) >= 1) {
          int v39 = *(_DWORD *)(v138 + 4 * j);
        }
        else {
          int v39 = ~*(_DWORD *)(v138 + 4 * j);
        }
        uint64_t v40 = *(unsigned int *)(v36 + 16);
        if (v40 == *(_DWORD *)(v36 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v36 + 16), v40 + 1);
        }
        *(_DWORD *)(*(void *)(v36 + 24) + 4 * v40) = v39;
        *(_DWORD *)(v36 + 16) = v40 + 1;
      }
      goto LABEL_108;
    }
    if (v24 >= operations_research::Domain::Min((operations_research::Domain *)v140, v32)
      && (operations_research::Domain::front((operations_research::Domain *)v140, v41), (uint64_t)v41 >= v9))
    {
      uint64_t v53 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "linear: positive clause");
      operations_research::sat::PresolveContext::UpdateRuleStats(v53, (uint64_t)&__p);
      if (SHIBYTE(v137[1]) < 0) {
        operator delete(__p);
      }
      operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
      *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_or(a2) + 16) = 0;
      for (uint64_t k = 0; k != v135; ++k)
      {
        if (*((_DWORD *)a2 + 15) == 3)
        {
          unint64_t v55 = *((void *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 3;
          uint64_t v56 = *((void *)a2 + 1);
          uint64_t v57 = (google::protobuf::Arena *)(v56 & 0xFFFFFFFFFFFFFFFELL);
          if (v56) {
            uint64_t v57 = *(google::protobuf::Arena **)v57;
          }
          unint64_t v55 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v57);
          *((void *)a2 + 6) = v55;
        }
        if (*(uint64_t *)(v139 + 8 * k) >= 1) {
          int v58 = *(_DWORD *)(v138 + 4 * k);
        }
        else {
          int v58 = ~*(_DWORD *)(v138 + 4 * k);
        }
        uint64_t v59 = *(unsigned int *)(v55 + 16);
        if (v59 == *(_DWORD *)(v55 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v55 + 16), v59 + 1);
        }
        *(_DWORD *)(*(void *)(v55 + 24) + 4 * v59) = v58;
        *(_DWORD *)(v55 + 16) = v59 + 1;
      }
    }
    else
    {
      if (v33 > operations_research::Domain::Max((operations_research::Domain *)v140, v41)
        || operations_research::Domain::back((operations_research::Domain *)v140, v42) > v8)
      {
        long long v133 = (int *)((char *)a2 + 16);
        if (*((_DWORD *)a2 + 4)) {
          goto LABEL_105;
        }
        uint64_t v44 = v8 + v10;
        if (v8 + v10 <= operations_research::Domain::Max((operations_research::Domain *)v140, v42)
          && v8 + 2 * v11 > operations_research::Domain::Max((operations_research::Domain *)v140, v43)
          && operations_research::Domain::back((operations_research::Domain *)v140, v43) <= v8)
        {
          uint64_t v85 = *((void *)this + 2);
          std::string::basic_string[abi:ne180100]<0>(&__p, "linear: positive at most one");
          operations_research::sat::PresolveContext::UpdateRuleStats(v85, (uint64_t)&__p);
          if (SHIBYTE(v137[1]) < 0) {
            operator delete(__p);
          }
          operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
          *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_at_most_one(a2) + 16) = 0;
          for (uint64_t m = 0; m != v135; ++m)
          {
            unint64_t v87 = operations_research::sat::ConstraintProto::mutable_at_most_one(a2);
            unint64_t v88 = v87;
            if (*(uint64_t *)(v139 + 8 * m) >= 1) {
              int v89 = *(_DWORD *)(v138 + 4 * m);
            }
            else {
              int v89 = ~*(_DWORD *)(v138 + 4 * m);
            }
            uint64_t v92 = *(unsigned int *)(v87 + 16);
            int v91 = *(_DWORD *)(v87 + 20);
            uint64_t v90 = (unsigned int *)(v87 + 16);
            if (v92 == v91) {
              google::protobuf::RepeatedField<int>::Reserve(v90, v92 + 1);
            }
            *(_DWORD *)(*(void *)(v88 + 24) + 4 * v92) = v89;
            *(_DWORD *)(v88 + 16) = v92 + 1;
          }
        }
        else
        {
          if (*v133) {
            goto LABEL_105;
          }
          uint64_t v46 = v9 - v10;
          if (v46 < operations_research::Domain::Min((operations_research::Domain *)v140, v43)
            || v9 - 2 * v11 >= operations_research::Domain::Min((operations_research::Domain *)v140, v45)
            || (operations_research::Domain::front((operations_research::Domain *)v140, v45), (uint64_t)v45 < v9))
          {
            if (!*v133)
            {
              if ((v140[0] & 0x1FFFFFFFELL) == 2
                && v8 < operations_research::Domain::Min((operations_research::Domain *)v140, v45)
                && v24 >= operations_research::Domain::Min((operations_research::Domain *)v140, v45)
                && v8 + 2 * v11 > operations_research::Domain::Max((operations_research::Domain *)v140, v45)
                && v44 <= operations_research::Domain::Max((operations_research::Domain *)v140, v45))
              {
                uint64_t v101 = *((void *)this + 2);
                std::string::basic_string[abi:ne180100]<0>(&__p, "linear: positive equal one");
                operations_research::sat::PresolveContext::UpdateRuleStats(v101, (uint64_t)&__p);
                if (SHIBYTE(v137[1]) < 0) {
                  operator delete(__p);
                }
                unint64_t v102 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
                uint64_t v103 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
                operations_research::sat::ConstraintProto::set_name((uint64_t)v102, *((std::string **)a2 + 5));
                operations_research::sat::ConstraintProto::set_name((uint64_t)v103, *((std::string **)a2 + 5));
                for (uint64_t n = 0; n != v135; ++n)
                {
                  unint64_t v105 = operations_research::sat::ConstraintProto::mutable_BOOL_or(v102);
                  unint64_t v106 = v105;
                  if (*(uint64_t *)(*(void *)(v6 + 48) + 8 * n) >= 1) {
                    int v107 = *(_DWORD *)(*(void *)(v6 + 24) + 4 * n);
                  }
                  else {
                    int v107 = ~*(_DWORD *)(*(void *)(v6 + 24) + 4 * n);
                  }
                  uint64_t v110 = *(unsigned int *)(v105 + 16);
                  int v109 = *(_DWORD *)(v105 + 20);
                  uint64_t v108 = (unsigned int *)(v105 + 16);
                  if (v110 == v109) {
                    google::protobuf::RepeatedField<int>::Reserve(v108, v110 + 1);
                  }
                  *(_DWORD *)(*(void *)(v106 + 24) + 4 * v110) = v107;
                  *(_DWORD *)(v106 + 16) = v110 + 1;
                  unint64_t v111 = operations_research::sat::ConstraintProto::mutable_at_most_one(v103);
                  unint64_t v112 = v111;
                  if (*(uint64_t *)(*(void *)(v6 + 48) + 8 * n) >= 1) {
                    int v113 = *(_DWORD *)(*(void *)(v6 + 24) + 4 * n);
                  }
                  else {
                    int v113 = ~*(_DWORD *)(*(void *)(v6 + 24) + 4 * n);
                  }
                  uint64_t v116 = *(unsigned int *)(v111 + 16);
                  int v115 = *(_DWORD *)(v111 + 20);
                  long long v114 = (unsigned int *)(v111 + 16);
                  if (v116 == v115) {
                    google::protobuf::RepeatedField<int>::Reserve(v114, v116 + 1);
                  }
                  *(_DWORD *)(*(void *)(v112 + 24) + 4 * v116) = v113;
                  *(_DWORD *)(v112 + 16) = v116 + 1;
                }
              }
              else
              {
                if (*v133
                  || (v140[0] & 0x1FFFFFFFELL) != 2
                  || v9 <= operations_research::Domain::Max((operations_research::Domain *)v140, v45)
                  || v33 > operations_research::Domain::Max((operations_research::Domain *)v140, v47)
                  || v9 - 2 * v11 >= operations_research::Domain::Min((operations_research::Domain *)v140, v48)
                  || v46 < operations_research::Domain::Min((operations_research::Domain *)v140, v49))
                {
                  goto LABEL_105;
                }
                uint64_t v117 = *((void *)this + 2);
                std::string::basic_string[abi:ne180100]<0>(&__p, "linear: negative equal one");
                operations_research::sat::PresolveContext::UpdateRuleStats(v117, (uint64_t)&__p);
                if (SHIBYTE(v137[1]) < 0) {
                  operator delete(__p);
                }
                uint64_t v118 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
                uint64_t v119 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
                operations_research::sat::ConstraintProto::set_name((uint64_t)v118, *((std::string **)a2 + 5));
                operations_research::sat::ConstraintProto::set_name((uint64_t)v119, *((std::string **)a2 + 5));
                for (iuint64_t i = 0; ii != v135; ++ii)
                {
                  unint64_t v121 = operations_research::sat::ConstraintProto::mutable_BOOL_or(v118);
                  unint64_t v122 = v121;
                  if (*(uint64_t *)(*(void *)(v6 + 48) + 8 * ii) <= 0) {
                    int v123 = *(_DWORD *)(*(void *)(v6 + 24) + 4 * ii);
                  }
                  else {
                    int v123 = ~*(_DWORD *)(*(void *)(v6 + 24) + 4 * ii);
                  }
                  uint64_t v126 = *(unsigned int *)(v121 + 16);
                  int v125 = *(_DWORD *)(v121 + 20);
                  int v124 = (unsigned int *)(v121 + 16);
                  if (v126 == v125) {
                    google::protobuf::RepeatedField<int>::Reserve(v124, v126 + 1);
                  }
                  *(_DWORD *)(*(void *)(v122 + 24) + 4 * v126) = v123;
                  *(_DWORD *)(v122 + 16) = v126 + 1;
                  unint64_t v127 = operations_research::sat::ConstraintProto::mutable_at_most_one(v119);
                  unint64_t v128 = v127;
                  if (*(uint64_t *)(*(void *)(v6 + 48) + 8 * ii) <= 0) {
                    int v129 = *(_DWORD *)(*(void *)(v6 + 24) + 4 * ii);
                  }
                  else {
                    int v129 = ~*(_DWORD *)(*(void *)(v6 + 24) + 4 * ii);
                  }
                  uint64_t v132 = *(unsigned int *)(v127 + 16);
                  int v131 = *(_DWORD *)(v127 + 20);
                  uint64_t v130 = (unsigned int *)(v127 + 16);
                  if (v132 == v131) {
                    google::protobuf::RepeatedField<int>::Reserve(v130, v132 + 1);
                  }
                  *(_DWORD *)(*(void *)(v128 + 24) + 4 * v132) = v129;
                  *(_DWORD *)(v128 + 16) = v132 + 1;
                }
              }
LABEL_114:
              operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                           + 2));
              operations_research::sat::ConstraintProto::Clear(a2);
              goto LABEL_48;
            }
LABEL_105:
            if ((int)v135 > 3)
            {
              uint64_t v3 = 0;
              if ((v140[0] & 1) == 0) {
                return v3;
              }
              goto LABEL_110;
            }
            uint64_t v51 = *((void *)this + 2);
            std::string::basic_string[abi:ne180100]<0>(&__p, "linear: small Boolean expression");
            operations_research::sat::PresolveContext::UpdateRuleStats(v51, (uint64_t)&__p);
            if (SHIBYTE(v137[1]) < 0) {
              operator delete(__p);
            }
            int v52 = *(_DWORD *)(v6 + 16);
            if (v52 == 31) {
              goto LABEL_114;
            }
            unsigned int v67 = 0;
            int v68 = 1 << v52;
            if (v68 <= 1) {
              int v68 = 1;
            }
            int v134 = v68;
            while (1)
            {
              uint64_t v69 = 0;
              uint64_t v70 = 0;
              do
              {
                if ((v67 >> v69)) {
                  v70 += *(void *)(*(void *)(v6 + 48) + 8 * v69);
                }
                ++v69;
              }
              while (v135 != v69);
              if (operations_research::Domain::Contains((operations_research::Domain *)v140, v70)) {
                goto LABEL_148;
              }
              uint64_t v71 = *(void *)(*((void *)this + 2) + 48);
              uint64_t v72 = *(int **)(v71 + 56);
              if (!v72) {
                break;
              }
              uint64_t v73 = *(int *)(v71 + 48);
              int v74 = *v72;
              if ((int)v73 >= *v72)
              {
                if (v74 == *(_DWORD *)(v71 + 52))
                {
LABEL_159:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v71 + 40), v74 + 1);
                  uint64_t v72 = *(int **)(v71 + 56);
                  int v74 = *v72;
                }
                int *v72 = v74 + 1;
                unint64_t v75 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v71 + 40));
                uint64_t v76 = *(void *)(v71 + 56);
                uint64_t v77 = *(int *)(v71 + 48);
                *(_DWORD *)(v71 + 48) = v77 + 1;
                *(void *)(v76 + 8 * v77 + 8) = v75;
                goto LABEL_161;
              }
              *(_DWORD *)(v71 + 48) = v73 + 1;
              unint64_t v75 = *(void *)&v72[2 * v73 + 2];
LABEL_161:
              if (*(_DWORD *)(v75 + 60) == 3)
              {
                unint64_t v78 = *(void *)(v75 + 48);
              }
              else
              {
                operations_research::sat::ConstraintProto::clear_constraint(v75);
                *(_DWORD *)(v75 + 60) = 3;
                uint64_t v79 = *(void *)(v75 + 8);
                uint64_t v80 = (google::protobuf::Arena *)(v79 & 0xFFFFFFFFFFFFFFFELL);
                if (v79) {
                  uint64_t v80 = *(google::protobuf::Arena **)v80;
                }
                unint64_t v78 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v80);
                *(void *)(v75 + 48) = v78;
              }
              if (*v133) {
                google::protobuf::RepeatedField<int>::operator=((unsigned int *)(v75 + 16), v133);
              }
              for (juint64_t j = 0; jj != v135; ++jj)
              {
                if ((v67 >> jj)) {
                  int v82 = ~*(_DWORD *)(*(void *)(v6 + 24) + 4 * jj);
                }
                else {
                  int v82 = *(_DWORD *)(*(void *)(v6 + 24) + 4 * jj);
                }
                uint64_t v83 = *(unsigned int *)(v78 + 16);
                if (v83 == *(_DWORD *)(v78 + 20)) {
                  google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v78 + 16), v83 + 1);
                }
                *(_DWORD *)(*(void *)(v78 + 24) + 4 * v83) = v82;
                *(_DWORD *)(v78 + 16) = v83 + 1;
              }
LABEL_148:
              if (++v67 == v134) {
                goto LABEL_114;
              }
            }
            int v74 = *(_DWORD *)(v71 + 52);
            goto LABEL_159;
          }
          uint64_t v93 = *((void *)this + 2);
          std::string::basic_string[abi:ne180100]<0>(&__p, "linear: negative at most one");
          operations_research::sat::PresolveContext::UpdateRuleStats(v93, (uint64_t)&__p);
          if (SHIBYTE(v137[1]) < 0) {
            operator delete(__p);
          }
          operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
          *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_at_most_one(a2) + 16) = 0;
          for (kuint64_t k = 0; kk != v135; ++kk)
          {
            unint64_t v95 = operations_research::sat::ConstraintProto::mutable_at_most_one(a2);
            unint64_t v96 = v95;
            if (*(uint64_t *)(v139 + 8 * kk) <= 0) {
              int v97 = *(_DWORD *)(v138 + 4 * kk);
            }
            else {
              int v97 = ~*(_DWORD *)(v138 + 4 * kk);
            }
            uint64_t v100 = *(unsigned int *)(v95 + 16);
            int v99 = *(_DWORD *)(v95 + 20);
            uint64_t v98 = (unsigned int *)(v95 + 16);
            if (v100 == v99) {
              google::protobuf::RepeatedField<int>::Reserve(v98, v100 + 1);
            }
            *(_DWORD *)(*(void *)(v96 + 24) + 4 * v100) = v97;
            *(_DWORD *)(v96 + 16) = v100 + 1;
          }
        }
        operations_research::sat::LinearConstraintProto::~LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p);
        uint64_t v3 = 1;
        if ((v140[0] & 1) == 0) {
          return v3;
        }
        goto LABEL_110;
      }
      uint64_t v60 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "linear: negative clause");
      operations_research::sat::PresolveContext::UpdateRuleStats(v60, (uint64_t)&__p);
      if (SHIBYTE(v137[1]) < 0) {
        operator delete(__p);
      }
      operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
      *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_or(a2) + 16) = 0;
      for (uint64_t mm = 0; mm != v135; ++mm)
      {
        if (*((_DWORD *)a2 + 15) == 3)
        {
          unint64_t v62 = *((void *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 3;
          uint64_t v63 = *((void *)a2 + 1);
          uint64_t v64 = (google::protobuf::Arena *)(v63 & 0xFFFFFFFFFFFFFFFELL);
          if (v63) {
            uint64_t v64 = *(google::protobuf::Arena **)v64;
          }
          unint64_t v62 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v64);
          *((void *)a2 + 6) = v62;
        }
        if (*(uint64_t *)(v139 + 8 * mm) <= 0) {
          int v65 = *(_DWORD *)(v138 + 4 * mm);
        }
        else {
          int v65 = ~*(_DWORD *)(v138 + 4 * mm);
        }
        uint64_t v66 = *(unsigned int *)(v62 + 16);
        if (v66 == *(_DWORD *)(v62 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v62 + 16), v66 + 1);
        }
        *(_DWORD *)(*(void *)(v62 + 24) + 4 * v66) = v65;
        *(_DWORD *)(v62 + 16) = v66 + 1;
      }
    }
    uint64_t v50 = operations_research::sat::CpModelPresolver::PresolveBoolOr(this, a2);
LABEL_109:
    uint64_t v3 = v50;
    operations_research::sat::LinearConstraintProto::~LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p);
    if ((v140[0] & 1) == 0) {
      return v3;
    }
    goto LABEL_110;
  }
  uint64_t v19 = *((void *)this + 2);
  long long __p = operator new(0x30uLL);
  *(_OWORD *)uint64_t v137 = xmmword_23CE85CD0;
  strcpy((char *)__p, "linear: all BOOLeans and trivially false");
  operations_research::sat::PresolveContext::UpdateRuleStats(v19, (uint64_t)&__p);
  if (SHIBYTE(v137[1]) < 0) {
    operator delete(__p);
  }
  uint64_t v3 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
  if (v140[0]) {
    goto LABEL_110;
  }
  return v3;
}

void sub_23CC51D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *__p)
{
  if (a26) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC51E48(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveInterval(operations_research::sat::CpModelPresolver *this, int a2, operations_research::sat::ConstraintProto *a3)
{
  uint64_t v4 = *((void *)this + 2);
  if (*(unsigned char *)(v4 + 504)) {
    return 0;
  }
  if (*((_DWORD *)a3 + 15) == 19)
  {
    uint64_t v8 = (unsigned int *)*((void *)a3 + 6);
    unint64_t v10 = v8[4];
    unint64_t v9 = v8[5];
    unint64_t v11 = v8[6];
    if (*((_DWORD *)a3 + 4)) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v10 = dword_26AEE1BD8;
    unint64_t v9 = dword_26AEE1BDC;
    unint64_t v11 = qword_26AEE1BE0;
    if (*((_DWORD *)a3 + 4))
    {
LABEL_6:
      if (!*(_DWORD *)(*(void *)(v4 + 776) + 4 * a2)) {
        goto LABEL_7;
      }
      return 0;
    }
  }
  BOOL v112 = 0;
  operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v4, (const char *)v10, (unint64_t *)&v110);
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9, &v108);
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v11, &v106);
  uint64_t v17 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  uint64_t v18 = operations_research::sat::PresolveContext::MaxOf(v17, (const char *)v11);
  operations_research::Domain::Domain(&v103, 0, v18);
  char v19 = operations_research::sat::PresolveContext::IntersectDomainWith(v17, (const char *)v11, (const operations_research::Domain *)&v103, &v112);
  if (v103) {
    operator delete(__p);
  }
  if ((v19 & 1) == 0) {
    goto LABEL_103;
  }
  uint64_t v21 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v110, (const operations_research::Domain *)&v106, &v103, v20);
  char v23 = operations_research::sat::PresolveContext::IntersectDomainWith(v21, (const char *)v9, (const operations_research::Domain *)&v103, &v112);
  if (v103) {
    operator delete(__p);
  }
  if ((v23 & 1) == 0)
  {
LABEL_103:
    if (v106)
    {
      operator delete(v107);
      if ((v108 & 1) == 0)
      {
LABEL_105:
        if ((v110 & 1) == 0) {
          return 0;
        }
LABEL_109:
        operator delete(v111[0]);
        return 0;
      }
    }
    else if ((v108 & 1) == 0)
    {
      goto LABEL_105;
    }
    operator delete(v109);
    if ((v110 & 1) == 0) {
      return 0;
    }
    goto LABEL_109;
  }
  uint64_t v24 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  operations_research::Domain::Negation((operations_research::Domain *)&v106, v22, &v101);
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v108, (const operations_research::Domain *)&v101, &v103, v25);
  char v27 = operations_research::sat::PresolveContext::IntersectDomainWith(v24, (const char *)v10, (const operations_research::Domain *)&v103, &v112);
  if ((v103 & 1) == 0)
  {
    if ((v101 & 1) == 0) {
      goto LABEL_19;
    }
LABEL_88:
    operator delete(v102);
    if ((v27 & 1) == 0) {
      goto LABEL_103;
    }
    goto LABEL_89;
  }
  operator delete(__p);
  if (v101) {
    goto LABEL_88;
  }
LABEL_19:
  if ((v27 & 1) == 0) {
    goto LABEL_103;
  }
LABEL_89:
  int v97 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  operations_research::Domain::Negation((operations_research::Domain *)&v110, v26, &v101);
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v108, (const operations_research::Domain *)&v101, &v103, v98);
  char v99 = operations_research::sat::PresolveContext::IntersectDomainWith(v97, (const char *)v11, (const operations_research::Domain *)&v103, &v112);
  if (v103)
  {
    operator delete(__p);
    if ((v101 & 1) == 0)
    {
LABEL_91:
      if ((v99 & 1) == 0) {
        goto LABEL_103;
      }
      goto LABEL_92;
    }
  }
  else if ((v101 & 1) == 0)
  {
    goto LABEL_91;
  }
  operator delete(v102);
  if ((v99 & 1) == 0) {
    goto LABEL_103;
  }
LABEL_92:
  if (v112)
  {
    uint64_t v100 = *((void *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(&v103, "interval: reduced domains");
    operations_research::sat::PresolveContext::UpdateRuleStats(v100, (uint64_t)&v103);
    if (v105 < 0) {
      operator delete(v103);
    }
  }
  if (v106)
  {
    operator delete(v107);
    if ((v108 & 1) == 0)
    {
LABEL_97:
      if ((v110 & 1) == 0) {
        goto LABEL_99;
      }
      goto LABEL_98;
    }
  }
  else if ((v108 & 1) == 0)
  {
    goto LABEL_97;
  }
  operator delete(v109);
  if (v110) {
LABEL_98:
  }
    operator delete(v111[0]);
LABEL_99:
  uint64_t v4 = *((void *)this + 2);
  if (*(_DWORD *)(*(void *)(v4 + 776) + 4 * a2)) {
    return 0;
  }
LABEL_7:
  uint64_t v12 = *(void *)(v4 + 48);
  __n128 v13 = *(int **)(v12 + 56);
  if (!v13)
  {
    int v15 = *(_DWORD *)(v12 + 52);
    goto LABEL_23;
  }
  uint64_t v14 = *(int *)(v12 + 48);
  int v15 = *v13;
  if ((int)v14 >= *v13)
  {
    if (v15 != *(_DWORD *)(v12 + 52))
    {
LABEL_24:
      *__n128 v13 = v15 + 1;
      unint64_t v16 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v12 + 40));
      uint64_t v28 = *(void *)(v12 + 56);
      uint64_t v29 = *(int *)(v12 + 48);
      *(_DWORD *)(v12 + 48) = v29 + 1;
      *(void *)(v28 + 8 * v29 + 8) = v16;
      goto LABEL_25;
    }
LABEL_23:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v12 + 40), v15 + 1);
    __n128 v13 = *(int **)(v12 + 56);
    int v15 = *v13;
    goto LABEL_24;
  }
  *(_DWORD *)(v12 + 48) = v14 + 1;
  unint64_t v16 = *(void *)&v13[2 * v14 + 2];
LABEL_25:
  if ((operations_research::sat::ConstraintProto *)v16 != a3)
  {
    *(_DWORD *)(v16 + 16) = 0;
    int v30 = *((_DWORD *)a3 + 4);
    if (v30)
    {
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v16 + 16), v30);
      uint64_t v31 = *(void **)(v16 + 24);
      *(_DWORD *)(v16 + 16) += *((_DWORD *)a3 + 4);
      memcpy(v31, *((const void **)a3 + 3), 4 * *((int *)a3 + 4));
    }
  }
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v32 = *(void *)(v16 + 48);
    uint64_t v34 = *(unsigned int *)(v32 + 64);
    uint64_t v33 = (unsigned int *)(v32 + 64);
    int v35 = v34 + 1;
    if (v34 != *(_DWORD *)(v32 + 68)) {
      goto LABEL_35;
    }
LABEL_34:
    google::protobuf::RepeatedField<long long>::Reserve(v33, v35);
    goto LABEL_35;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  uint64_t v36 = *(void *)(v16 + 8);
  uint64_t v37 = (google::protobuf::Arena *)(v36 & 0xFFFFFFFFFFFFFFFELL);
  if (v36) {
    uint64_t v37 = *(google::protobuf::Arena **)v37;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v37);
  uint64_t v32 = v38;
  *(void *)(v16 + 48) = v38;
  uint64_t v34 = *(unsigned int *)(v38 + 64);
  int v39 = *(_DWORD *)(v38 + 68);
  uint64_t v33 = (unsigned int *)(v38 + 64);
  int v35 = v34 + 1;
  if (v34 == v39) {
    goto LABEL_34;
  }
LABEL_35:
  *(void *)(*(void *)(v32 + 72) + 8 * v34) = 0;
  *(_DWORD *)(v32 + 64) = v35;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v40 = *(void *)(v16 + 48);
    uint64_t v42 = *(unsigned int *)(v40 + 64);
    uint64_t v41 = (unsigned int *)(v40 + 64);
    int v43 = v42 + 1;
    if (v42 != *(_DWORD *)(v40 + 68)) {
      goto LABEL_42;
    }
LABEL_41:
    google::protobuf::RepeatedField<long long>::Reserve(v41, v43);
    goto LABEL_42;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  uint64_t v44 = *(void *)(v16 + 8);
  uint64_t v45 = (google::protobuf::Arena *)(v44 & 0xFFFFFFFFFFFFFFFELL);
  if (v44) {
    uint64_t v45 = *(google::protobuf::Arena **)v45;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v45);
  uint64_t v40 = v46;
  *(void *)(v16 + 48) = v46;
  uint64_t v42 = *(unsigned int *)(v46 + 64);
  int v47 = *(_DWORD *)(v46 + 68);
  uint64_t v41 = (unsigned int *)(v46 + 64);
  int v43 = v42 + 1;
  if (v42 == v47) {
    goto LABEL_41;
  }
LABEL_42:
  *(void *)(*(void *)(v40 + 72) + 8 * v42) = 0;
  *(_DWORD *)(v40 + 64) = v43;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v48 = *(void *)(v16 + 48);
    uint64_t v50 = *(unsigned int *)(v48 + 16);
    uint64_t v49 = (unsigned int *)(v48 + 16);
    int v51 = v50 + 1;
    if (v50 != *(_DWORD *)(v48 + 20)) {
      goto LABEL_49;
    }
LABEL_48:
    google::protobuf::RepeatedField<int>::Reserve(v49, v51);
    goto LABEL_49;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  uint64_t v52 = *(void *)(v16 + 8);
  uint64_t v53 = (google::protobuf::Arena *)(v52 & 0xFFFFFFFFFFFFFFFELL);
  if (v52) {
    uint64_t v53 = *(google::protobuf::Arena **)v53;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v53);
  uint64_t v48 = v54;
  *(void *)(v16 + 48) = v54;
  uint64_t v50 = *(unsigned int *)(v54 + 16);
  int v55 = *(_DWORD *)(v54 + 20);
  uint64_t v49 = (unsigned int *)(v54 + 16);
  int v51 = v50 + 1;
  if (v50 == v55) {
    goto LABEL_48;
  }
LABEL_49:
  *(_DWORD *)(*(void *)(v48 + 24) + 4 * v50) = v10;
  *(_DWORD *)(v48 + 16) = v51;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v56 = *(void *)(v16 + 48);
    uint64_t v58 = *(unsigned int *)(v56 + 40);
    uint64_t v57 = (unsigned int *)(v56 + 40);
    int v59 = v58 + 1;
    if (v58 != *(_DWORD *)(v56 + 44)) {
      goto LABEL_56;
    }
LABEL_55:
    google::protobuf::RepeatedField<long long>::Reserve(v57, v59);
    goto LABEL_56;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  uint64_t v60 = *(void *)(v16 + 8);
  uint64_t v61 = (google::protobuf::Arena *)(v60 & 0xFFFFFFFFFFFFFFFELL);
  if (v60) {
    uint64_t v61 = *(google::protobuf::Arena **)v61;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v61);
  uint64_t v56 = v62;
  *(void *)(v16 + 48) = v62;
  uint64_t v58 = *(unsigned int *)(v62 + 40);
  int v63 = *(_DWORD *)(v62 + 44);
  uint64_t v57 = (unsigned int *)(v62 + 40);
  int v59 = v58 + 1;
  if (v58 == v63) {
    goto LABEL_55;
  }
LABEL_56:
  *(void *)(*(void *)(v56 + 48) + 8 * v58) = 1;
  *(_DWORD *)(v56 + 40) = v59;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v64 = *(void *)(v16 + 48);
    uint64_t v66 = *(unsigned int *)(v64 + 16);
    int v65 = (unsigned int *)(v64 + 16);
    int v67 = v66 + 1;
    if (v66 != *(_DWORD *)(v64 + 20)) {
      goto LABEL_63;
    }
LABEL_62:
    google::protobuf::RepeatedField<int>::Reserve(v65, v67);
    goto LABEL_63;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  uint64_t v68 = *(void *)(v16 + 8);
  uint64_t v69 = (google::protobuf::Arena *)(v68 & 0xFFFFFFFFFFFFFFFELL);
  if (v68) {
    uint64_t v69 = *(google::protobuf::Arena **)v69;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v69);
  uint64_t v64 = v70;
  *(void *)(v16 + 48) = v70;
  uint64_t v66 = *(unsigned int *)(v70 + 16);
  int v71 = *(_DWORD *)(v70 + 20);
  int v65 = (unsigned int *)(v70 + 16);
  int v67 = v66 + 1;
  if (v66 == v71) {
    goto LABEL_62;
  }
LABEL_63:
  *(_DWORD *)(*(void *)(v64 + 24) + 4 * v66) = v11;
  *(_DWORD *)(v64 + 16) = v67;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v72 = *(void *)(v16 + 48);
    uint64_t v74 = *(unsigned int *)(v72 + 40);
    uint64_t v73 = (unsigned int *)(v72 + 40);
    int v75 = v74 + 1;
    if (v74 != *(_DWORD *)(v72 + 44)) {
      goto LABEL_70;
    }
LABEL_69:
    google::protobuf::RepeatedField<long long>::Reserve(v73, v75);
    goto LABEL_70;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  uint64_t v76 = *(void *)(v16 + 8);
  uint64_t v77 = (google::protobuf::Arena *)(v76 & 0xFFFFFFFFFFFFFFFELL);
  if (v76) {
    uint64_t v77 = *(google::protobuf::Arena **)v77;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v77);
  uint64_t v72 = v78;
  *(void *)(v16 + 48) = v78;
  uint64_t v74 = *(unsigned int *)(v78 + 40);
  int v79 = *(_DWORD *)(v78 + 44);
  uint64_t v73 = (unsigned int *)(v78 + 40);
  int v75 = v74 + 1;
  if (v74 == v79) {
    goto LABEL_69;
  }
LABEL_70:
  *(void *)(*(void *)(v72 + 48) + 8 * v74) = 1;
  *(_DWORD *)(v72 + 40) = v75;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v80 = *(void *)(v16 + 48);
    uint64_t v82 = *(unsigned int *)(v80 + 16);
    uint64_t v81 = (unsigned int *)(v80 + 16);
    int v83 = v82 + 1;
    if (v82 != *(_DWORD *)(v80 + 20)) {
      goto LABEL_77;
    }
LABEL_76:
    google::protobuf::RepeatedField<int>::Reserve(v81, v83);
    goto LABEL_77;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  uint64_t v84 = *(void *)(v16 + 8);
  uint64_t v85 = (google::protobuf::Arena *)(v84 & 0xFFFFFFFFFFFFFFFELL);
  if (v84) {
    uint64_t v85 = *(google::protobuf::Arena **)v85;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v85);
  uint64_t v80 = v86;
  *(void *)(v16 + 48) = v86;
  uint64_t v82 = *(unsigned int *)(v86 + 16);
  int v87 = *(_DWORD *)(v86 + 20);
  uint64_t v81 = (unsigned int *)(v86 + 16);
  int v83 = v82 + 1;
  if (v82 == v87) {
    goto LABEL_76;
  }
LABEL_77:
  *(_DWORD *)(*(void *)(v80 + 24) + 4 * v82) = v9;
  *(_DWORD *)(v80 + 16) = v83;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v88 = *(void *)(v16 + 48);
    uint64_t v90 = *(unsigned int *)(v88 + 40);
    int v89 = (unsigned int *)(v88 + 40);
    int v91 = v90 + 1;
    if (v90 != *(_DWORD *)(v88 + 44)) {
      goto LABEL_84;
    }
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(v16);
    *(_DWORD *)(v16 + 60) = 12;
    uint64_t v92 = *(void *)(v16 + 8);
    uint64_t v93 = (google::protobuf::Arena *)(v92 & 0xFFFFFFFFFFFFFFFELL);
    if (v92) {
      uint64_t v93 = *(google::protobuf::Arena **)v93;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v93);
    uint64_t v88 = v94;
    *(void *)(v16 + 48) = v94;
    uint64_t v90 = *(unsigned int *)(v94 + 40);
    int v95 = *(_DWORD *)(v94 + 44);
    int v89 = (unsigned int *)(v94 + 40);
    int v91 = v90 + 1;
    if (v90 != v95) {
      goto LABEL_84;
    }
  }
  google::protobuf::RepeatedField<long long>::Reserve(v89, v91);
LABEL_84:
  *(void *)(*(void *)(v88 + 48) + 8 * v90) = -1;
  *(_DWORD *)(v88 + 40) = v91;
  operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                               + 2));
  uint64_t v96 = *((void *)this + 2);
  uint64_t v110 = operator new(0x28uLL);
  *(_OWORD *)unint64_t v111 = xmmword_23CE7EC80;
  strcpy((char *)v110, "interval: unused, converted to linear");
  operations_research::sat::PresolveContext::UpdateRuleStats(v96, (uint64_t)&v110);
  if (SHIBYTE(v111[1]) < 0) {
    operator delete(v110);
  }
  operations_research::sat::ConstraintProto::Clear(a3);
  return 1;
}

void sub_23CC52678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, void *__p, void *a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,char a21,void *a22,uint64_t a23,uint64_t a24,void *a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a18)
  {
    operator delete(a19);
    if ((a21 & 1) == 0)
    {
LABEL_5:
      if ((a24 & 1) == 0) {
LABEL_10:
      }
        _Unwind_Resume(exception_object);
LABEL_9:
      operator delete(a25);
      goto LABEL_10;
    }
  }
  else if ((a21 & 1) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a22);
  if ((a24 & 1) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveElement(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  unint64_t v2 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (*((unsigned char *)v2 + 504)) {
    return 0;
  }
  int v7 = *((_DWORD *)a2 + 15);
  if (v7 == 14)
  {
    uint64_t v8 = (uint64_t *)*((void *)a2 + 6);
    if (!*((_DWORD *)a2 + 4)) {
      goto LABEL_8;
    }
    return 0;
  }
  uint64_t v8 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  if (*((_DWORD *)a2 + 4)) {
    return 0;
  }
LABEL_8:
  unint64_t v10 = *((unsigned int *)v8 + 9);
  unint64_t v9 = (const char *)*((unsigned int *)v8 + 10);
  long long v166 = 0u;
  long long v167 = 0u;
  unint64_t v165 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v168 = 0;
  BOOL v164 = 0;
  if (v7 == 14) {
    unint64_t v11 = (uint64_t *)*((void *)a2 + 6);
  }
  else {
    unint64_t v11 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  }
  operations_research::Domain::Domain(v163, 0, *((int *)v11 + 4) - 1);
  char v12 = operations_research::sat::PresolveContext::IntersectDomainWith(v2, (const char *)v10, (const operations_research::Domain *)v163, &v164);
  if ((uint64_t)v163[0]) {
    operator delete(v163[1]);
  }
  if ((v12 & 1) == 0) {
    goto LABEL_204;
  }
  v163[0] = 0;
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10, (unint64_t *)&v160);
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v9, &v158);
  unsigned int v149 = v10;
  unsigned int v145 = v9;
  if (v160) {
    __n128 v13 = (int *)v161;
  }
  else {
    __n128 v13 = (int *)&v161;
  }
  if ((unint64_t)v160 < 2)
  {
    int v14 = 1;
    int v146 = 1;
LABEL_19:
    unint64_t v15 = v9;
    if (v164)
    {
      uint64_t v16 = *((void *)this + 2);
      long long __p = operator new(0x20uLL);
      *(_OWORD *)int v157 = xmmword_23CE7FBE0;
      strcpy((char *)__p, "element: reduced index domain");
      operations_research::sat::PresolveContext::UpdateRuleStats(v16, (uint64_t)&__p);
      if (SHIBYTE(v157[1]) < 0) {
        operator delete(__p);
      }
    }
    v154[0] = 0;
    int v17 = operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9, (const operations_research::Domain *)v163, v154);
    unint64_t v10 = v10;
    if (v17)
    {
      if (v154[0])
      {
        uint64_t v18 = *((void *)this + 2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "element: reduced target domain");
        operations_research::sat::PresolveContext::UpdateRuleStats(v18, (uint64_t)&__p);
        if (SHIBYTE(v157[1]) < 0) {
          operator delete(__p);
        }
      }
      int v19 = 0;
    }
    else
    {
      int v19 = 1;
    }
    uint64_t v3 = v17 ^ 1u;
    if ((v158 & 1) == 0) {
      goto LABEL_72;
    }
LABEL_66:
    operator delete(v159);
    if ((v160 & 1) == 0) {
      goto LABEL_73;
    }
LABEL_67:
    operator delete(v161);
    if (((uint64_t)v163[0] & 1) == 0) {
      goto LABEL_74;
    }
LABEL_68:
    operator delete(v163[1]);
    if (v19) {
      goto LABEL_205;
    }
LABEL_75:
    if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10))
    {
      if (*((_DWORD *)a2 + 15) == 14) {
        uint64_t v42 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        uint64_t v42 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      }
      int v45 = *(_DWORD *)(v42[3]
                      + 4
                      * (int)operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10));
      if (v45 == v15)
      {
LABEL_121:
        uint64_t v70 = *((void *)this + 2);
        HIBYTE(v163[2]) = 20;
        strcpy((char *)v163, "element: fixed index");
        operations_research::sat::PresolveContext::UpdateRuleStats(v70, (uint64_t)v163);
        if (SHIBYTE(v163[2]) < 0) {
          operator delete(v163[0]);
        }
LABEL_123:
        operations_research::sat::ConstraintProto::Clear(a2);
        goto LABEL_124;
      }
      uint64_t v46 = *(void *)(*((void *)this + 2) + 48);
      int v47 = *(int **)(v46 + 56);
      if (v47)
      {
        uint64_t v48 = *(int *)(v46 + 48);
        int v49 = *v47;
        if ((int)v48 < *v47)
        {
          *(_DWORD *)(v46 + 48) = v48 + 1;
          unint64_t v50 = *(void *)&v47[2 * v48 + 2];
LABEL_103:
          if (*(_DWORD *)(v50 + 60) == 12)
          {
            uint64_t v57 = *(void *)(v50 + 48);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v50);
            *(_DWORD *)(v50 + 60) = 12;
            uint64_t v58 = *(void *)(v50 + 8);
            int v59 = (google::protobuf::Arena *)(v58 & 0xFFFFFFFFFFFFFFFELL);
            if (v58) {
              int v59 = *(google::protobuf::Arena **)v59;
            }
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v59);
            uint64_t v57 = v60;
            *(void *)(v50 + 48) = v60;
          }
          uint64_t v61 = *(unsigned int *)(v57 + 16);
          unsigned int v62 = v61 + 1;
          if (v61 == *(_DWORD *)(v57 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v57 + 16), v61 + 1);
          }
          *(_DWORD *)(*(void *)(v57 + 24) + 4 * v61) = v45;
          uint64_t v63 = *(unsigned int *)(v57 + 40);
          *(_DWORD *)(v57 + 16) = v62;
          if (v63 == *(_DWORD *)(v57 + 44))
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 40), v63 + 1);
            unsigned int v62 = *(_DWORD *)(v57 + 16);
          }
          *(void *)(*(void *)(v57 + 48) + 8 * v63) = -1;
          *(_DWORD *)(v57 + 40) = v63 + 1;
          if (v62 == *(_DWORD *)(v57 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v57 + 16), v62 + 1);
          }
          *(_DWORD *)(*(void *)(v57 + 24) + 4 * v62) = v15;
          *(_DWORD *)(v57 + 16) = v62 + 1;
          uint64_t v64 = *(unsigned int *)(v57 + 40);
          if (v64 == *(_DWORD *)(v57 + 44)) {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 40), v64 + 1);
          }
          uint64_t v65 = *(unsigned int *)(v57 + 64);
          *(void *)(*(void *)(v57 + 48) + 8 * v64) = 1;
          *(_DWORD *)(v57 + 40) = v64 + 1;
          int v66 = *(_DWORD *)(v57 + 68);
          unsigned int v67 = v65 + 1;
          if (v65 == v66)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 64), v65 + 1);
            int v66 = *(_DWORD *)(v57 + 68);
          }
          uint64_t v68 = *(void *)(v57 + 72);
          *(void *)(v68 + 8 * v65) = 0;
          *(_DWORD *)(v57 + 64) = v67;
          int v69 = v65 + 2;
          if (v67 == v66)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 64), v69);
            uint64_t v68 = *(void *)(v57 + 72);
          }
          *(void *)(v68 + 8 * v67) = 0;
          *(_DWORD *)(v57 + 64) = v69;
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                       + 2));
          goto LABEL_121;
        }
        if (v49 != *(_DWORD *)(v46 + 52))
        {
LABEL_102:
          int *v47 = v49 + 1;
          unint64_t v50 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v46 + 40));
          uint64_t v55 = *(void *)(v46 + 56);
          uint64_t v56 = *(int *)(v46 + 48);
          *(_DWORD *)(v46 + 48) = v56 + 1;
          *(void *)(v55 + 8 * v56 + 8) = v50;
          goto LABEL_103;
        }
      }
      else
      {
        int v49 = *(_DWORD *)(v46 + 52);
      }
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v46 + 40), v49 + 1);
      int v47 = *(int **)(v46 + 56);
      int v49 = *v47;
      goto LABEL_102;
    }
    int v43 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
    if ((v146 & (*((void *)&v166 + 1) == 1)) == 1)
    {
      if (!operations_research::sat::PresolveContext::IsFixed(v43, (const char *)v15))
      {
        unsigned int v142 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v163, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 2276);
        uint64_t v143 = (void *)google::LogMessage::stream(v142);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Check failed: context_->IsFixed(target_ref) ", 44);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v163);
      }
      uint64_t v44 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(v163, "element: one value array");
      operations_research::sat::PresolveContext::UpdateRuleStats(v44, (uint64_t)v163);
      if (SHIBYTE(v163[2]) < 0) {
        operator delete(v163[0]);
      }
      goto LABEL_123;
    }
    if (!operations_research::sat::PresolveContext::MinOf(v43, (const char *)v10)
      && ((operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10) == 1) & v146) == 1)
    {
      if (*((_DWORD *)a2 + 15) == 14) {
        int v51 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        int v51 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      }
      uint64_t v88 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)v51[3]);
      if (*((_DWORD *)a2 + 15) == 14) {
        int v89 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        int v89 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      }
      uint64_t v90 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)(v89[3] + 4));
      int v91 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
      operations_research::sat::ConstraintProto::mutable_linear(v91);
      uint64_t v93 = v92;
      uint64_t v94 = *(unsigned int *)(v92 + 16);
      int v95 = (unsigned int *)(v92 + 16);
      unsigned int v96 = v94 + 1;
      if (v94 == *(_DWORD *)(v92 + 20)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v92 + 16), v94 + 1);
      }
      *(_DWORD *)(*(void *)(v93 + 24) + 4 * v94) = v145;
      uint64_t v97 = *(unsigned int *)(v93 + 40);
      *(_DWORD *)(v93 + 16) = v96;
      if (v97 == *(_DWORD *)(v93 + 44))
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v93 + 40), v97 + 1);
        unsigned int v96 = *v95;
      }
      *(void *)(*(void *)(v93 + 48) + 8 * v97) = 1;
      *(_DWORD *)(v93 + 40) = v97 + 1;
      if (v96 == *(_DWORD *)(v93 + 20)) {
        google::protobuf::RepeatedField<int>::Reserve(v95, v96 + 1);
      }
      *(_DWORD *)(*(void *)(v93 + 24) + 4 * v96) = v149;
      *(_DWORD *)(v93 + 16) = v96 + 1;
      uint64_t v98 = *(unsigned int *)(v93 + 40);
      if (v98 == *(_DWORD *)(v93 + 44)) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v93 + 40), v98 + 1);
      }
      uint64_t v99 = v88 - v90;
      uint64_t v100 = *(unsigned int *)(v93 + 64);
      *(void *)(*(void *)(v93 + 48) + 8 * v98) = v99;
      *(_DWORD *)(v93 + 40) = v98 + 1;
      int v101 = *(_DWORD *)(v93 + 68);
      unsigned int v102 = v100 + 1;
      if (v100 == v101)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v93 + 64), v100 + 1);
        int v101 = *(_DWORD *)(v93 + 68);
      }
      uint64_t v103 = *(void *)(v93 + 72);
      *(void *)(v103 + 8 * v100) = v88;
      *(_DWORD *)(v93 + 64) = v102;
      int v104 = v100 + 2;
      if (v102 == v101)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v93 + 64), v104);
        uint64_t v103 = *(void *)(v93 + 72);
      }
      *(void *)(v103 + 8 * v102) = v88;
      *(_DWORD *)(v93 + 64) = v104;
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      uint64_t v105 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(v163, "element: linearize constant element of size 2");
      operations_research::sat::PresolveContext::UpdateRuleStats(v105, (uint64_t)v163);
      if (SHIBYTE(v163[2]) < 0) {
        operator delete(v163[0]);
      }
      goto LABEL_123;
    }
    operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), v10, (uint64_t)v163);
    if (LODWORD(v163[0]) == v10)
    {
LABEL_93:
      unint64_t v52 = v10;
      uint64_t v3 = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), v10)|| operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10);
      uint64_t v71 = *((void *)this + 2);
      if ((v146 & v3) == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v160, "element: trivial target domain reduction");
        operations_research::sat::PresolveContext::UpdateRuleStats(v71, (uint64_t)&v160);
        if (SHIBYTE(v162) < 0) {
          operator delete(v160);
        }
        operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), v10);
        uint64_t v72 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 56));
        operations_research::sat::ConstraintProto::CopyFrom(v72, a2);
        operations_research::sat::ConstraintProto::Clear(a2);
        goto LABEL_124;
      }
      BOOL v73 = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), v15)|| operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v15);
      if ((v14 & v73) == 1)
      {
        uint64_t v79 = *((void *)this + 2);
        std::string::basic_string[abi:ne180100]<0>(&v160, "element: trivial index domain reduction");
        operations_research::sat::PresolveContext::UpdateRuleStats(v79, (uint64_t)&v160);
        if (SHIBYTE(v162) < 0) {
          operator delete(v160);
        }
        operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), v15);
        uint64_t v80 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 56));
        operations_research::sat::ConstraintProto::CopyFrom(v80, a2);
        operations_research::sat::ConstraintProto::Clear(a2);
        goto LABEL_124;
      }
      if (v15 == v10)
      {
        int v160 = 0;
        unint64_t v161 = 0;
        unint64_t v162 = 0;
        operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10, &v158);
        if (v158) {
          uint64_t v81 = (uint64_t *)v159;
        }
        else {
          uint64_t v81 = (uint64_t *)&v159;
        }
        if (v158 < 2)
        {
LABEL_147:
          int v83 = v160;
          uint64_t v82 = v161;
          if (operations_research::Domain::Size((operations_research::Domain *)&v158) <= (v82 - v83) >> 3) {
            goto LABEL_153;
          }
          uint64_t v84 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
          std::vector<long long>::vector(v151, (uint64_t)&v160);
          operations_research::Domain::FromValues((int64_t **)v151, (unint64_t *)&__p);
          char v85 = operations_research::sat::PresolveContext::IntersectDomainWith(v84, (const char *)v52, (const operations_research::Domain *)&__p, 0);
          if (__p) {
            operator delete(v157[0]);
          }
          if (v151[0])
          {
            v151[1] = v151[0];
            operator delete(v151[0]);
          }
          if (v85)
          {
LABEL_153:
            uint64_t v86 = *((void *)this + 2);
            std::string::basic_string[abi:ne180100]<0>(&__p, "element: reduce index domain when target equals index");
            operations_research::sat::PresolveContext::UpdateRuleStats(v86, (uint64_t)&__p);
            if (SHIBYTE(v157[1]) < 0) {
              operator delete(__p);
            }
          }
          if (v158) {
            operator delete(v159);
          }
          if (v160)
          {
            unint64_t v161 = v160;
            operator delete(v160);
          }
          goto LABEL_124;
        }
        uint64_t v148 = &v81[2 * (v158 >> 1)];
        while (1)
        {
          uint64_t v118 = *v81;
          if (*v81 <= v81[1]) {
            break;
          }
LABEL_210:
          v81 += 2;
          if (v81 == v148) {
            goto LABEL_147;
          }
        }
        while (1)
        {
          unint64_t v121 = &operations_research::sat::_ElementConstraintProto_default_instance_;
          if (*((_DWORD *)a2 + 15) == 14) {
            unint64_t v121 = (uint64_t *)*((void *)a2 + 6);
          }
          unint64_t v52 = v149;
          if (!operations_research::sat::PresolveContext::DomainContains(*((operations_research::sat::PresolveContext **)this + 2), *(_DWORD *)(v121[3] + 4 * (int)v118), v118))goto LABEL_215; {
          unint64_t v122 = (char *)v161;
          }
          if ((unint64_t)v161 >= v162) {
            break;
          }
          *(void *)unint64_t v161 = v118;
          uint64_t v119 = v122 + 8;
LABEL_214:
          unint64_t v161 = v119;
LABEL_215:
          if (v118++ >= v81[1]) {
            goto LABEL_210;
          }
        }
        int v123 = (char *)v160;
        int64_t v124 = (unsigned char *)v161 - (unsigned char *)v160;
        int64_t v125 = ((unsigned char *)v161 - (unsigned char *)v160) >> 3;
        unint64_t v126 = v125 + 1;
        if ((unint64_t)(v125 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v127 = v162 - (void)v160;
        if ((uint64_t)(v162 - (void)v160) >> 2 > v126) {
          unint64_t v126 = v127 >> 2;
        }
        if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v128 = v126;
        }
        if (v128)
        {
          if (v128 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v129 = operator new(8 * v128);
        }
        else
        {
          int v129 = 0;
        }
        uint64_t v130 = (uint64_t *)&v129[8 * v125];
        *uint64_t v130 = v118;
        uint64_t v119 = v130 + 1;
        if (v122 == v123)
        {
          unint64_t v52 = v149;
          goto LABEL_240;
        }
        unint64_t v131 = v122 - 8 - v123;
        if (v131 >= 0x58)
        {
          unint64_t v132 = v122 - &v129[v124];
          unint64_t v52 = v149;
          if (v132 >= 0x20)
          {
            uint64_t v133 = (v131 >> 3) + 1;
            uint64_t v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v135 = &v122[-v134];
            uint64_t v130 = (uint64_t *)((char *)v130 - v134);
            uint64_t v136 = &v129[8 * v125 - 16];
            uint64_t v137 = v122 - 16;
            uint64_t v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v139 = *(_OWORD *)v137;
              *(v136 - 1) = *((_OWORD *)v137 - 1);
              *uint64_t v136 = v139;
              v136 -= 2;
              v137 -= 32;
              v138 -= 4;
            }
            while (v138);
            unint64_t v122 = v135;
            if (v133 == (v133 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_240:
              int v160 = v130;
              unint64_t v161 = v119;
              unint64_t v162 = (unint64_t)&v129[8 * v128];
              if (v123) {
                operator delete(v123);
              }
              goto LABEL_214;
            }
          }
        }
        else
        {
          unint64_t v52 = v149;
        }
        do
        {
          uint64_t v140 = *((void *)v122 - 1);
          v122 -= 8;
          *--uint64_t v130 = v140;
        }
        while (v122 != v123);
        goto LABEL_240;
      }
      if (v73
        && !operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v15))
      {
        uint64_t v116 = *((void *)this + 2);
        std::string::basic_string[abi:ne180100]<0>(&v160, "TODO element: target not used elsewhere");
        operations_research::sat::PresolveContext::UpdateRuleStats(v116, (uint64_t)&v160);
        if (SHIBYTE(v162) < 0) {
          operator delete(v160);
        }
      }
      if (!v3) {
        goto LABEL_205;
      }
      uint64_t v117 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v160, "TODO element: index not used elsewhere");
      operations_research::sat::PresolveContext::UpdateRuleStats(v117, (uint64_t)&v160);
      if (SHIBYTE(v162) < 0) {
        operator delete(v160);
      }
LABEL_204:
      uint64_t v3 = 0;
      goto LABEL_205;
    }
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)LODWORD(v163[0]), (unint64_t *)&v160);
    int64_t v53 = operations_research::Domain::Size((operations_research::Domain *)&v160);
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10, &v158);
    int64_t v54 = operations_research::Domain::Size((operations_research::Domain *)&v158);
    if (v158)
    {
      operator delete(v159);
      if ((v160 & 1) == 0)
      {
LABEL_97:
        if (v53 > v54) {
          goto LABEL_124;
        }
        goto LABEL_135;
      }
    }
    else if ((v160 & 1) == 0)
    {
      goto LABEL_97;
    }
    operator delete(v161);
    if (v53 > v54) {
      goto LABEL_124;
    }
LABEL_135:
    uint64_t v74 = (const char *)LODWORD(v163[0]);
    uint64_t v75 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)LODWORD(v163[0]));
    uint64_t v76 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v74);
    uint64_t v77 = v76;
    if (*((_DWORD *)a2 + 15) == 14) {
      uint64_t v78 = (uint64_t *)*((void *)a2 + 6);
    }
    else {
      uint64_t v78 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    }
    if (v75)
    {
      uint64_t v87 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v160, "TODO element: representative has bad domain");
      operations_research::sat::PresolveContext::UpdateRuleStats(v87, (uint64_t)&v160);
      if (SHIBYTE(v162) < 0) {
        operator delete(v160);
      }
    }
    else if (((unint64_t)v163[2] & 0x8000000000000000) == 0)
    {
      int v106 = *((_DWORD *)v78 + 4);
      if ((uint64_t)v163[2] < v106)
      {
        uint64_t v107 = (uint64_t)v163[2] + (uint64_t)v163[1] * v76;
        if ((v107 & 0x8000000000000000) == 0 && v107 < v106)
        {
          unint64_t v108 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
          unint64_t v109 = operations_research::sat::ConstraintProto::mutable_element(v108);
          unint64_t v110 = v109;
          if ((v77 & 0x8000000000000000) == 0)
          {
            uint64_t v111 = 0;
            BOOL v147 = (unsigned int *)(v109 + 16);
            *(void *)uint64_t v150 = v77 + 1;
            do
            {
              uint64_t v112 = (uint64_t)v163[2] + (uint64_t)v163[1] * v111;
              int v160 = (void *)v112;
              LODWORD(__p) = 0;
              if (v112 < 0) {
                google::MakeCheckOpString<long long,int>((int)&v160, (int)&__p, "scaled_index >= 0");
              }
              int v160 = (char *)v163[2] + (uint64_t)v163[1] * v111;
              LODWORD(__p) = v106;
              if (v112 >= v106) {
                google::MakeCheckOpString<long long,int>((int)&v160, (int)&__p, "scaled_index < array_size");
              }
              int v113 = &operations_research::sat::_ElementConstraintProto_default_instance_;
              if (*((_DWORD *)a2 + 15) == 14) {
                int v113 = (uint64_t *)*((void *)a2 + 6);
              }
              int v114 = *(_DWORD *)(v113[3] + 4 * (int)v112);
              uint64_t v115 = *(unsigned int *)(v110 + 16);
              if (v115 == *(_DWORD *)(v110 + 20)) {
                google::protobuf::RepeatedField<int>::Reserve(v147, v115 + 1);
              }
              *(_DWORD *)(*(void *)(v110 + 24) + 4 * v115) = v114;
              *(_DWORD *)(v110 + 16) = v115 + 1;
              ++v111;
            }
            while (*(void *)v150 != v111);
          }
          *(_DWORD *)(v110 + 36) = v74;
          *(_DWORD *)(v110 + 40) = v145;
          uint64_t v141 = *((void *)this + 2);
          if (v163[1] == (void *)1) {
            std::string::basic_string[abi:ne180100]<0>(&v160, "element: shifed index ");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(&v160, "element: scaled index");
          }
          operations_research::sat::PresolveContext::UpdateRuleStats(v141, (uint64_t)&v160);
          if (SHIBYTE(v162) < 0) {
            operator delete(v160);
          }
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                       + 2));
          operations_research::sat::ConstraintProto::Clear(a2);
LABEL_124:
          uint64_t v3 = 1;
          if ((void)v167) {
            goto LABEL_206;
          }
          goto LABEL_207;
        }
      }
    }
    goto LABEL_93;
  }
  BOOL v144 = &v13[4 * ((unint64_t)v160 >> 1)];
  int v146 = 1;
  int v14 = 1;
  uint64_t v20 = *v13;
  uint64_t v21 = *((void *)v13 + 1);
  if (v21 >= v20) {
    goto LABEL_30;
  }
  do
  {
LABEL_28:
    v13 += 4;
    if (v13 == v144) {
      goto LABEL_19;
    }
    uint64_t v20 = *v13;
    uint64_t v21 = *((void *)v13 + 1);
  }
  while (v21 < v20);
  while (1)
  {
LABEL_30:
    LODWORD(__p) = v20;
    LODWORD(v152[0]) = 0;
    if (v20 < 0) {
      google::MakeCheckOpString<int,int>((int)&__p, (int)v152, "value >= 0");
    }
    int v22 = *((_DWORD *)a2 + 15);
    char v23 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    if (v22 == 14) {
      char v23 = (uint64_t *)*((void *)a2 + 6);
    }
    uint64_t v24 = *((int *)v23 + 4);
    LODWORD(__p) = v20;
    LODWORD(v152[0]) = v24;
    if (v20 >= v24) {
      google::MakeCheckOpString<int,int>((int)&__p, (int)v152, "value < ct->element().vars_size()");
    }
    int8x16_t v25 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    if (v22 == 14) {
      int8x16_t v25 = (uint64_t *)*((void *)a2 + 6);
    }
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)(v25[3] + 4 * v20), (unint64_t *)&__p);
    operations_research::Domain::IntersectionWith(&__p, (const operations_research::Domain *)&v158, (unint64_t *)v154);
    BOOL IsEmpty = operations_research::Domain::IsEmpty((operations_research::Domain *)v154);
    if (v154[0]) {
      operator delete((void *)v155);
    }
    if (IsEmpty)
    {
      BOOL v153 = 0;
      uint64_t v28 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
      operations_research::Domain::Domain(v152, v20);
      operations_research::Domain::Complement((operations_research::Domain *)v152, (unint64_t *)v154);
      char v29 = operations_research::sat::PresolveContext::IntersectDomainWith(v28, (const char *)v10, (const operations_research::Domain *)v154, &v153);
      if (v154[0])
      {
        operator delete((void *)v155);
        if (((uint64_t)v152[0] & 1) == 0)
        {
LABEL_41:
          if (v29) {
            goto LABEL_42;
          }
LABEL_53:
          char v30 = 0;
          goto LABEL_58;
        }
      }
      else if (((uint64_t)v152[0] & 1) == 0)
      {
        goto LABEL_41;
      }
      operator delete(v152[1]);
      if (v29)
      {
LABEL_42:
        char v30 = 1;
        BOOL v164 = 1;
        goto LABEL_58;
      }
      goto LABEL_53;
    }
    if (operations_research::Domain::IsFixed((operations_research::Domain *)&__p, v26))
    {
      uint64_t v32 = operations_research::Domain::Min((operations_research::Domain *)&__p, v31);
      uint64_t v33 = v32;
      uint64_t v34 = 0;
      unint64_t v35 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v32)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v32));
      for (unint64_t i = (v35 >> 7) ^ (v165 >> 12); ; unint64_t i = v34 + v37)
      {
        unint64_t v37 = i & v167;
        uint64_t v38 = *(void *)(v165 + v37);
        unint64_t v39 = ((v38 ^ (0x101010101010101 * (v35 & 0x7F))) - 0x101010101010101) & ~(v38 ^ (0x101010101010101
                                                                                            * (v35 & 0x7F))) & 0x8080808080808080;
        if (v39) {
          break;
        }
LABEL_48:
        if ((v38 & (~v38 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v40 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)&v165, v35);
          *(void *)(v166 + 8 * v40) = v33;
          goto LABEL_55;
        }
        v34 += 8;
      }
      while (*(void *)(v166 + 8 * ((v37 + (__clz(__rbit64(v39)) >> 3)) & v167)) != v32)
      {
        v39 &= v39 - 1;
        if (!v39) {
          goto LABEL_48;
        }
      }
    }
    else
    {
      int v146 = 0;
    }
LABEL_55:
    int IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&__p, (const operations_research::Domain *)&v158);
    operations_research::Domain::UnionWith((operations_research::Domain *)v163, (const operations_research::Domain *)&__p, (unint64_t *)v154);
    if ((uint64_t)v163[0]) {
      operator delete(v163[1]);
    }
    v14 &= IsIncludedIn;
    v163[0] = *(void **)v154;
    *(_OWORD *)&v163[1] = v155;
    char v30 = 1;
LABEL_58:
    if (__p) {
      operator delete(v157[0]);
    }
    if ((v30 & 1) == 0) {
      break;
    }
    if (v21 < ++v20) {
      goto LABEL_28;
    }
  }
  uint64_t v3 = 0;
  int v19 = 1;
  unint64_t v15 = v145;
  unint64_t v10 = v10;
  if (v158) {
    goto LABEL_66;
  }
LABEL_72:
  if (v160) {
    goto LABEL_67;
  }
LABEL_73:
  if ((uint64_t)v163[0]) {
    goto LABEL_68;
  }
LABEL_74:
  if (!v19) {
    goto LABEL_75;
  }
LABEL_205:
  if ((void)v167)
  {
LABEL_206:
    operator delete((void *)v165);
    unint64_t v165 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v168 = 0;
    *(void *)&long long v167 = 0;
    long long v166 = 0uLL;
  }
LABEL_207:
  if (*((void *)&v167 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v167 + 1));
  }
  return v3;
}

void sub_23CC53A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_23CC53A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_23CC53A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,void *a24,void *a25,int a26,__int16 a27,char a28,char a29,char a30,void *a31,uint64_t a32,void *__p,void *a34,int a35,__int16 a36,char a37,char a38)
{
  absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~flat_hash_set(v38 - 144);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::ConstraintProto::mutable_element(operations_research::sat::ConstraintProto *this)
{
  if (*((_DWORD *)this + 15) == 14) {
    return *((void *)this + 6);
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 14;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if (v3) {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(*v4);
  }
  else {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>((google::protobuf::Arena *)v4);
  }
  *((void *)this + 6) = result;
  return result;
}

void *std::vector<long long>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - *(void *)a2);
    *a1 = v6;
    a1[1] = v6;
    int v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_23CC53E10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveTable(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (*(unsigned char *)(v2 + 504) || *((_DWORD *)a2 + 4))
  {
    char v4 = 0;
    return v4 & 1;
  }
  uint64_t v6 = this;
  if (*((_DWORD *)a2 + 15) == 16)
  {
    int v7 = (uint64_t *)*((void *)a2 + 6);
    int v8 = *((_DWORD *)v7 + 4);
    if (v8) {
      goto LABEL_7;
    }
LABEL_58:
    BOOL v181 = operator new(0x19uLL);
    long long v182 = xmmword_23CE7EB30;
    strcpy((char *)v181, "table: empty constraint");
    operations_research::sat::PresolveContext::UpdateRuleStats(v2, (uint64_t)&v181);
    if (SHIBYTE(v182) < 0) {
      operator delete(v181);
    }
    operations_research::sat::ConstraintProto::Clear(a2);
    char v4 = 1;
    return v4 & 1;
  }
  int v7 = &operations_research::sat::_TableConstraintProto_default_instance_;
  int v8 = dword_26AEE1950;
  if (!dword_26AEE1950) {
    goto LABEL_58;
  }
LABEL_7:
  int v9 = *((_DWORD *)v7 + 10);
  long long v193 = 0;
  int v194 = 0;
  long long v195 = 0;
  if (v8 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unsigned int v10 = v8;
  long long v193 = (char *)operator new(8 * v8);
  long long v195 = &v193[8 * v8];
  bzero(v193, 8 * v8);
  int v194 = v195;
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  unint64_t v192 = 0;
  uint64_t v170 = (v9 / v8);
  std::vector<std::vector<long long>>::reserve((uint64_t)&v190, (int)v170);
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v188, v8);
  uint64_t v169 = 8 * v8;
  uint64_t v185 = 0;
  uint64_t v186 = 0;
  unint64_t v187 = 0;
  long long v182 = 0u;
  long long v183 = 0u;
  BOOL v181 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v184 = 0;
  unint64_t v11 = &operations_research::sat::_TableConstraintProto_default_instance_;
  if (*((_DWORD *)a2 + 15) == 16) {
    unint64_t v11 = (uint64_t *)*((void *)a2 + 6);
  }
  uint64_t v12 = *((int *)v11 + 4);
  uint64_t v172 = (operations_research::sat::PresolveContext **)v6;
  unint64_t v168 = v8;
  if (!v12) {
    goto LABEL_34;
  }
  __n128 v13 = (int *)v11[3];
  int v14 = &v13[v12];
  do
  {
LABEL_18:
    while (1)
    {
      uint64_t v21 = 0;
      int v22 = ~*v13 <= *v13 ? *v13 : ~*v13;
      unint64_t v23 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v22)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v22));
      unint64_t v19 = (v23 >> 7) ^ ((unint64_t)v181 >> 12);
      uint64_t v24 = 0x101010101010101 * (v23 & 0x7F);
      for (unint64_t i = v19; ; unint64_t i = v21 + v26)
      {
        unint64_t v26 = i & v183;
        uint64_t v27 = *(void *)((char *)v181 + v26);
        unint64_t v28 = ((v27 ^ v24) - 0x101010101010101) & ~(v27 ^ v24) & 0x8080808080808080;
        if (v28) {
          break;
        }
LABEL_25:
        if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
        {
LABEL_28:
          for (j = 0; ; unint64_t v19 = j + v15)
          {
            unint64_t v15 = v19 & v183;
            uint64_t v16 = *(void *)((char *)v181 + v15);
            unint64_t v17 = ((v16 ^ v24) - 0x101010101010101) & ~(v16 ^ v24) & 0x8080808080808080;
            if (v17)
            {
              while (*(_DWORD *)(v182 + 4 * ((v15 + (__clz(__rbit64(v17)) >> 3)) & v183)) != v22)
              {
                v17 &= v17 - 1;
                if (!v17) {
                  goto LABEL_15;
                }
              }
              goto LABEL_30;
            }
LABEL_15:
            if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
              break;
            }
            j += 8;
          }
          unint64_t v20 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v181, v23);
          *(_DWORD *)(v182 + 4 * v20) = v22;
          if (++v13 == v14) {
            goto LABEL_33;
          }
          goto LABEL_18;
        }
        v21 += 8;
      }
      while (1)
      {
        unint64_t v29 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v183;
        if (*(_DWORD *)(v182 + 4 * v29) == v22) {
          break;
        }
        v28 &= v28 - 1;
        if (!v28) {
          goto LABEL_25;
        }
      }
      if (v29 == (void)v183) {
        goto LABEL_28;
      }
      uint64_t v30 = *((void *)v6 + 2);
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_23CE7ECA0;
      strcpy((char *)__p[0], "TODO table: duplicate variables");
      operations_research::sat::PresolveContext::UpdateRuleStats(v30, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0) {
        break;
      }
LABEL_30:
      if (++v13 == v14) {
        goto LABEL_33;
      }
    }
    operator delete(__p[0]);
    ++v13;
  }
  while (v13 != v14);
LABEL_33:
  unsigned int v10 = v8;
  if (v8 >= 1)
  {
LABEL_34:
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    char v33 = 0;
    uint64_t v34 = v10;
    while (1)
    {
      unint64_t v37 = &operations_research::sat::_TableConstraintProto_default_instance_;
      if (*((_DWORD *)a2 + 15) == 16) {
        unint64_t v37 = (uint64_t *)*((void *)a2 + 6);
      }
      int v38 = *(_DWORD *)(v37[3] + 4 * v32);
      operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)v6 + 2), v38, (uint64_t)__p);
      if ((unint64_t)v31 < v187)
      {
        long long v35 = *(_OWORD *)__p;
        v31[2] = __p[2];
        *(_OWORD *)uint64_t v31 = v35;
        uint64_t v36 = v31 + 3;
        uint64_t v6 = (operations_research::sat::CpModelPresolver *)v172;
      }
      else
      {
        unint64_t v39 = v185;
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v31 - v185) + 1;
        if (v40 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v187 - (void)v185) >> 3) > v40) {
          unint64_t v40 = 0x5555555555555556 * ((uint64_t)(v187 - (void)v185) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - (void)v185) >> 3) >= 0x555555555555555) {
          unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41)
        {
          if (v41 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v42 = (char *)operator new(24 * v41);
        }
        else
        {
          uint64_t v42 = 0;
        }
        int v43 = &v42[8 * (v31 - v39)];
        *(_OWORD *)int v43 = *(_OWORD *)__p;
        *((void **)v43 + 2) = __p[2];
        uint64_t v44 = v43;
        if (v31 != v39)
        {
          uint64_t v6 = (operations_research::sat::CpModelPresolver *)v172;
          do
          {
            long long v45 = *(_OWORD *)(v31 - 3);
            *((void *)v44 - 1) = *(v31 - 1);
            *(_OWORD *)(v44 - 24) = v45;
            v44 -= 24;
            v31 -= 3;
          }
          while (v31 != v39);
          uint64_t v31 = v185;
          uint64_t v46 = &v42[24 * v41];
          uint64_t v36 = (void **)(v43 + 24);
          uint64_t v185 = (void **)v44;
          uint64_t v186 = v43 + 24;
          unint64_t v187 = (unint64_t)v46;
          if (!v31) {
            goto LABEL_36;
          }
LABEL_56:
          operator delete(v31);
          goto LABEL_36;
        }
        uint64_t v6 = (operations_research::sat::CpModelPresolver *)v172;
        int v47 = &v42[24 * v41];
        uint64_t v36 = (void **)(v43 + 24);
        uint64_t v185 = (void **)&v42[8 * (v31 - v39)];
        uint64_t v186 = v43 + 24;
        unint64_t v187 = (unint64_t)v47;
        if (v31) {
          goto LABEL_56;
        }
      }
LABEL_36:
      uint64_t v186 = (char *)v36;
      v33 |= LODWORD(__p[0]) != v38;
      ++v32;
      uint64_t v31 = v36;
      if (v32 == v34)
      {
        char v167 = v33;
        int v171 = 1;
        if ((int)v170 < 1) {
          goto LABEL_91;
        }
        goto LABEL_64;
      }
    }
  }
  int v171 = 0;
  char v167 = 0;
  if ((int)v170 < 1) {
    goto LABEL_91;
  }
LABEL_64:
  uint64_t v48 = 0;
  for (uint64_t k = 0; k != v170; ++k)
  {
    if (v171)
    {
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      while (1)
      {
        unint64_t v52 = &operations_research::sat::_TableConstraintProto_default_instance_;
        if (*((_DWORD *)a2 + 15) == 16) {
          unint64_t v52 = (uint64_t *)*((void *)a2 + 6);
        }
        uint64_t v53 = *(void *)(v52[6] + v48 + 8 * v51);
        unsigned int v54 = v185[v50];
        if (v54 != *(_DWORD *)(v52[3] + 4 * v51))
        {
          uint64_t v55 = (uint64_t)v185[v50 + 1];
          uint64_t v56 = (char *)v185[v50 + 2];
          BOOL v57 = &v56[(v53 - (uint64_t)v56) / v55 * v55] == (char *)v53;
          uint64_t v53 = (v53 - (uint64_t)v56) / v55;
          if (!v57) {
            break;
          }
        }
        *(void *)&v193[8 * v51] = v53;
        if (!operations_research::sat::PresolveContext::DomainContains(v172[2], v54, v53)) {
          break;
        }
        ++v51;
        v50 += 3;
        if (v168 == v51) {
          goto LABEL_75;
        }
      }
    }
    else
    {
LABEL_75:
      uint64_t v58 = v191;
      if ((unint64_t)v191 >= v192)
      {
        uint64_t v63 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>((char **)&v190, (uint64_t)&v193);
      }
      else
      {
        *uint64_t v191 = 0;
        v58[1] = 0;
        v58[2] = 0;
        int v59 = v193;
        int64_t v60 = v194 - v193;
        if (v194 != v193)
        {
          if (v60 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v61 = (char *)operator new(v194 - v193);
          *uint64_t v58 = v61;
          v58[1] = v61;
          unsigned int v62 = &v61[8 * (v60 >> 3)];
          v58[2] = v62;
          memcpy(v61, v59, v60);
          v58[1] = v62;
        }
        uint64_t v63 = (char *)(v58 + 3);
      }
      uint64_t v191 = (char **)v63;
      if (v171)
      {
        uint64_t v64 = 0;
        do
        {
          uint64_t v68 = 0;
          uint64_t v70 = *(void *)&v193[8 * v64];
          uint64_t v71 = &v188[6 * v64];
          unint64_t v72 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v70)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v70));
          unint64_t v69 = (v72 >> 7) ^ (*v71 >> 12);
          unint64_t v73 = v71[3];
          while (1)
          {
            unint64_t v65 = v69 & v73;
            uint64_t v66 = *(void *)(*v71 + v65);
            unint64_t v67 = ((v66 ^ (0x101010101010101 * (v72 & 0x7F))) - 0x101010101010101) & ~(v66 ^ (0x101010101010101
                                                                                                * (v72 & 0x7F))) & 0x8080808080808080;
            if (v67) {
              break;
            }
LABEL_86:
            if ((v66 & (~v66 << 6) & 0x8080808080808080) != 0)
            {
              *(void *)(v71[1]
                        + 8
                        * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)&v188[6 * v64], v72)) = v70;
              goto LABEL_89;
            }
            v68 += 8;
            unint64_t v69 = v68 + v65;
          }
          while (*(void *)(v71[1] + 8 * ((v65 + (__clz(__rbit64(v67)) >> 3)) & v73)) != v70)
          {
            v67 &= v67 - 1;
            if (!v67) {
              goto LABEL_86;
            }
          }
LABEL_89:
          ++v64;
        }
        while (v64 != v168);
      }
    }
    v48 += v169;
  }
LABEL_91:
  gtl::STLSortAndRemoveDuplicates<std::vector<std::vector<long long>>>((const void ***)&v190);
  uint64_t v74 = v172;
  char v4 = v167;
  unint64_t v75 = v168;
  uint64_t v77 = v190;
  uint64_t v76 = v191;
  if (!((0xAAAAAAAAAAAAAAABLL * (v191 - v190) < (int)v170) | v167 & 1)) {
    goto LABEL_116;
  }
  if (*((_DWORD *)a2 + 15) == 16)
  {
    uint64_t v78 = *((void *)a2 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 16;
    uint64_t v79 = *((void *)a2 + 1);
    uint64_t v80 = (google::protobuf::Arena *)(v79 & 0xFFFFFFFFFFFFFFFELL);
    if (v79) {
      uint64_t v80 = *(google::protobuf::Arena **)v80;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v80);
    *((void *)a2 + 6) = v78;
    uint64_t v77 = v190;
    uint64_t v76 = v191;
  }
  *(_DWORD *)(v78 + 40) = 0;
  if (v77 == v76)
  {
    uint64_t v92 = v76;
    goto LABEL_113;
  }
  while (2)
  {
    uint64_t v81 = *v77;
    uint64_t v82 = v77[1];
    while (v81 != v82)
    {
      uint64_t v83 = *(void *)v81;
      if (*((_DWORD *)a2 + 15) == 16)
      {
        uint64_t v84 = *((void *)a2 + 6);
        uint64_t v86 = *(unsigned int *)(v84 + 40);
        char v85 = (unsigned int *)(v84 + 40);
        int v87 = v86 + 1;
        if (v86 == *(_DWORD *)(v84 + 44)) {
          goto LABEL_101;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 16;
        uint64_t v88 = *((void *)a2 + 1);
        int v89 = (google::protobuf::Arena *)(v88 & 0xFFFFFFFFFFFFFFFELL);
        if (v88) {
          int v89 = *(google::protobuf::Arena **)v89;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v89);
        uint64_t v84 = v90;
        *((void *)a2 + 6) = v90;
        uint64_t v86 = *(unsigned int *)(v90 + 40);
        int v91 = *(_DWORD *)(v90 + 44);
        char v85 = (unsigned int *)(v90 + 40);
        int v87 = v86 + 1;
        if (v86 == v91) {
LABEL_101:
        }
          google::protobuf::RepeatedField<long long>::Reserve(v85, v87);
      }
      *(void *)(*(void *)(v84 + 48) + 8 * v86) = v83;
      *(_DWORD *)(v84 + 40) = v87;
      v81 += 8;
    }
    v77 += 3;
    if (v77 != v76) {
      continue;
    }
    break;
  }
  uint64_t v76 = v190;
  uint64_t v92 = v191;
  uint64_t v74 = v172;
  char v4 = v167;
  unint64_t v75 = v168;
LABEL_113:
  if (0xAAAAAAAAAAAAAAABLL * (v92 - v76) < (int)v170)
  {
    uint64_t v93 = (uint64_t)v74[2];
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "table: removed rows");
    operations_research::sat::PresolveContext::UpdateRuleStats(v93, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_116:
  if (v4)
  {
    if (v171)
    {
      uint64_t v94 = 0;
      int v95 = v185;
      do
      {
        int v96 = *(_DWORD *)v95;
        if (*((_DWORD *)a2 + 15) == 16)
        {
          uint64_t v97 = *(void *)(*((void *)a2 + 6) + 24);
          if (v96 == *(_DWORD *)(v97 + 4 * v94)) {
            goto LABEL_120;
          }
        }
        else
        {
          if (v96 == *(_DWORD *)(qword_26AEE1958 + 4 * v94)) {
            goto LABEL_120;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 16;
          uint64_t v98 = *((void *)a2 + 1);
          uint64_t v99 = (google::protobuf::Arena *)(v98 & 0xFFFFFFFFFFFFFFFELL);
          if (v98) {
            uint64_t v99 = *(google::protobuf::Arena **)v99;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v99);
          *((void *)a2 + 6) = v100;
          int v96 = *(_DWORD *)v95;
          uint64_t v97 = *(void *)(v100 + 24);
        }
        *(_DWORD *)(v97 + 4 * v94) = v96;
LABEL_120:
        ++v94;
        v95 += 3;
      }
      while (v75 != v94);
    }
    uint64_t v101 = (uint64_t)v74[2];
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_23CE7E460;
    strcpy((char *)__p[0], "table: replace variable by canonical affine one");
    operations_research::sat::PresolveContext::UpdateRuleStats(v101, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*((_DWORD *)a2 + 15) == 16)
  {
    if (*(unsigned char *)(*((void *)a2 + 6) + 60)) {
      goto LABEL_209;
    }
  }
  else if (byte_26AEE197C)
  {
    goto LABEL_209;
  }
  BOOL v179 = 0;
  if (v171)
  {
    uint64_t v102 = 0;
    uint64_t v103 = v75;
    do
    {
      int v104 = &operations_research::sat::_TableConstraintProto_default_instance_;
      if (*((_DWORD *)a2 + 15) == 16) {
        int v104 = (uint64_t *)*((void *)a2 + 6);
      }
      int v105 = *(_DWORD *)(v104[3] + 4 * v102);
      if (~v105 <= v105) {
        unint64_t v106 = v105;
      }
      else {
        unint64_t v106 = ~v105;
      }
      uint64_t v107 = (char **)&v188[6 * v102];
      unint64_t v108 = (uint64_t *)v107[1];
      unint64_t v109 = *v107;
      if (**v107 <= -2)
      {
        do
        {
          unint64_t v110 = (__clz(__rbit64(((*v109 >> 7) & ~*v109 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v109 = (void *)((char *)v109 + v110);
          v108 += v110;
        }
        while (*(char *)v109 < -1);
      }
      uint64_t v111 = v74[2];
      std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,0>(v178, v109, v108, &v107[3][(void)*v107]);
      operations_research::Domain::FromValues((int64_t **)v178, (unint64_t *)__p);
      char v112 = operations_research::sat::PresolveContext::IntersectDomainWith(v111, (const char *)v106, (const operations_research::Domain *)__p, &v179);
      if ((uint64_t)__p[0]) {
        operator delete(__p[1]);
      }
      if (v178[0])
      {
        v178[1] = v178[0];
        operator delete(v178[0]);
      }
      if ((v112 & 1) == 0)
      {
        char v4 = 1;
        goto LABEL_209;
      }
      ++v102;
    }
    while (v102 != v75);
    unint64_t v75 = v168;
    if (v179)
    {
      uint64_t v113 = (uint64_t)v74[2];
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_23CE7ECA0;
      strcpy((char *)__p[0], "table: reduced variable domains");
      operations_research::sat::PresolveContext::UpdateRuleStats(v113, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    if (v168 != 1)
    {
      double v114 = 1.0;
      uint64_t v115 = v188 + 2;
      do
      {
        unint64_t v116 = *v115;
        v115 += 6;
        double v114 = v114 * (double)v116;
        --v103;
      }
      while (v103);
      goto LABEL_160;
    }
LABEL_157:
    uint64_t v117 = (uint64_t)v74[2];
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_23CE7EB30;
    strcpy((char *)__p[0], "table: only one column!");
    operations_research::sat::PresolveContext::UpdateRuleStats(v117, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_163;
  }
  double v114 = 1.0;
  if (v75 == 1) {
    goto LABEL_157;
  }
LABEL_160:
  double v118 = (double)(0xAAAAAAAAAAAAAAABLL * (v191 - v190));
  if (v114 == v118)
  {
    uint64_t v119 = (uint64_t)v74[2];
    std::string::basic_string[abi:ne180100]<0>(__p, "table: all tuples!");
    operations_research::sat::PresolveContext::UpdateRuleStats(v119, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
LABEL_163:
    operations_research::sat::ConstraintProto::Clear(a2);
    char v4 = 1;
    goto LABEL_209;
  }
  if (v114 * 0.7 >= v118) {
    goto LABEL_209;
  }
  std::vector<std::vector<long long>>::vector(__p, v75);
  if (v171)
  {
    uint64_t v121 = 0;
    do
    {
      unint64_t v122 = (char **)&v188[6 * v121];
      int v123 = (uint64_t *)v122[1];
      int64_t v124 = *v122;
      if (**v122 <= -2)
      {
        do
        {
          unint64_t v125 = (__clz(__rbit64(((*(void *)v124 >> 7) & ~*(void *)v124 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v124 += v125;
          v123 += v125;
        }
        while (*v124 < -1);
      }
      unint64_t v126 = &v122[3][(void)*v122];
      if (v124 == v126)
      {
        size_t v127 = 0;
      }
      else
      {
        size_t v127 = 0;
        unint64_t v128 = v124;
        do
        {
          int v129 = *++v128;
          if (v129 <= -2)
          {
            do
              v128 += (__clz(__rbit64(((*(void *)v128 >> 7) & ~*(void *)v128 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            while (*v128 < -1);
          }
          ++v127;
        }
        while (v128 != v126);
      }
      std::vector<long long>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator>((uint64_t)__p[0] + 24 * v121++, v124, v123, v126, v120, v127);
    }
    while (v121 != v75);
  }
  std::vector<std::vector<long long>>::vector(v177, (unint64_t)v114);
  if (v114 > 0.0)
  {
    uint64_t v130 = 0;
    do
    {
      unint64_t v131 = (char *)v177[0] + 24 * v130;
      unint64_t v132 = (uint64_t)(v131[1] - *v131) >> 3;
      if (v75 <= v132)
      {
        if (v75 < v132) {
          v131[1] = *v131 + 8 * v75;
        }
      }
      else
      {
        std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)v131, v75 - v132);
      }
      if (v171)
      {
        uint64_t v133 = (void *)*((void *)v177[0] + 3 * v130);
        uint64_t v134 = (char *)__p[0] + 8;
        uint64_t v135 = v75;
        LODWORD(v136) = v130;
        do
        {
          uint64_t v137 = (int)v136;
          uint64_t v138 = *(v134 - 1);
          unint64_t v139 = (*v134 - v138) >> 3;
          unint64_t v136 = (int)v136 / v139;
          *v133++ = *(void *)(v138 + 8 * (v137 - v136 * v139));
          v134 += 3;
          --v135;
        }
        while (v135);
      }
      ++v130;
    }
    while (v114 > (double)(int)v130);
  }
  gtl::STLSortAndRemoveDuplicates<std::vector<std::vector<long long>>>((const void ***)v177);
  std::vector<std::vector<long long>>::vector(&v175, (unint64_t)(v114 - (double)(0xAAAAAAAAAAAAAAABLL * (v191 - v190))));
  std::set_difference[abi:ne180100]<std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>>((char **)v177[0], (char **)v177[1], v190, v191, v175);
  operations_research::sat::ConstraintProto::mutable_table(a2);
  if (*((_DWORD *)a2 + 15) == 16) {
    uint64_t v141 = (uint64_t *)*((void *)a2 + 6);
  }
  else {
    uint64_t v141 = &operations_research::sat::_TableConstraintProto_default_instance_;
  }
  *(unsigned char *)(v140 + 60) = *((unsigned char *)v141 + 60) ^ 1;
  operations_research::sat::ConstraintProto::mutable_table(a2);
  *(_DWORD *)(v142 + 40) = 0;
  uint64_t v143 = v175;
  BOOL v144 = v176;
  if (v175 == v176) {
    goto LABEL_206;
  }
  while (2)
  {
    unsigned int v145 = *v143;
    int v146 = v143[1];
    while (v145 != v146)
    {
      uint64_t v147 = *(void *)v145;
      if (*((_DWORD *)a2 + 15) == 16)
      {
        uint64_t v148 = *((void *)a2 + 6);
        uint64_t v150 = *(unsigned int *)(v148 + 40);
        unsigned int v149 = (unsigned int *)(v148 + 40);
        int v151 = v150 + 1;
        if (v150 == *(_DWORD *)(v148 + 44)) {
          goto LABEL_196;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 16;
        uint64_t v152 = *((void *)a2 + 1);
        BOOL v153 = (google::protobuf::Arena *)(v152 & 0xFFFFFFFFFFFFFFFELL);
        if (v152) {
          BOOL v153 = *(google::protobuf::Arena **)v153;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v153);
        uint64_t v148 = v154;
        *((void *)a2 + 6) = v154;
        uint64_t v150 = *(unsigned int *)(v154 + 40);
        int v155 = *(_DWORD *)(v154 + 44);
        unsigned int v149 = (unsigned int *)(v154 + 40);
        int v151 = v150 + 1;
        if (v150 == v155) {
LABEL_196:
        }
          google::protobuf::RepeatedField<long long>::Reserve(v149, v151);
      }
      *(void *)(*(void *)(v148 + 48) + 8 * v150) = v147;
      *(_DWORD *)(v148 + 40) = v151;
      v145 += 8;
    }
    v143 += 3;
    if (v143 != v144) {
      continue;
    }
    break;
  }
LABEL_206:
  uint64_t v156 = (uint64_t)v172[2];
  std::string::basic_string[abi:ne180100]<0>(v173, "table: negated");
  operations_research::sat::PresolveContext::UpdateRuleStats(v156, (uint64_t)v173);
  char v4 = v167;
  if (v174 < 0) {
    operator delete(v173[0]);
  }
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)&v175);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v177);
  std::vector<std::vector<int>>::~vector[abi:ne180100](__p);
LABEL_209:
  if ((void)v183)
  {
    operator delete(v181);
    BOOL v181 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v184 = 0;
    *(void *)&long long v183 = 0;
    long long v182 = 0uLL;
  }
  if (*((void *)&v183 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v183 + 1));
  }
  if (v185) {
    operator delete(v185);
  }
  int v157 = v188;
  if (v188)
  {
    unint64_t v158 = v189;
    int v159 = v188;
    if (v189 != v188)
    {
      do
      {
        if (*(v158 - 3))
        {
          operator delete((void *)*(v158 - 6));
          *(v158 - 1) = 0;
          *(v158 - 6) = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v158 - 5) = 0;
          *(v158 - 4) = 0;
          *(v158 - 3) = 0;
        }
        int v160 = (void *)*(v158 - 2);
        if (v160) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v160);
        }
        v158 -= 6;
      }
      while (v158 != v157);
      int v159 = v188;
    }
    BOOL v189 = v157;
    operator delete(v159);
  }
  unint64_t v161 = v190;
  if (v190)
  {
    unint64_t v162 = v191;
    uint64_t v163 = (char *)v190;
    if (v191 != v190)
    {
      BOOL v164 = v191;
      do
      {
        long long v166 = *(v164 - 3);
        v164 -= 3;
        unint64_t v165 = v166;
        if (v166)
        {
          *(v162 - 2) = v165;
          operator delete(v165);
        }
        unint64_t v162 = v164;
      }
      while (v164 != v161);
      uint64_t v163 = (char *)v190;
    }
    uint64_t v191 = v161;
    operator delete(v163);
  }
  if (v193)
  {
    int v194 = v193;
    operator delete(v193);
  }
  return v4 & 1;
}

void sub_23CC54FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a24);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a27);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a34);
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set((uint64_t)&a41);
  uint64_t v48 = *(void **)(v46 - 208);
  if (v48)
  {
    *(void *)(v46 - 200) = v48;
    operator delete(v48);
  }
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100]((void **)(v46 - 184));
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v46 - 160));
  int v49 = *(void **)(v46 - 136);
  if (v49)
  {
    *(void *)(v46 - 128) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(a1);
}

void gtl::STLSortAndRemoveDuplicates<std::vector<std::vector<long long>>>(const void ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char **)a1[1];
  unint64_t v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v2) >> 3));
  if (v3 == (char **)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *,false>((uint64_t)v2, v3, (uint64_t)&v12, v5, 1);
  uint64_t v6 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>,std::__equal_to &>(*a1, a1[1]);
  int v7 = a1[1];
  if (v7 != v6)
  {
    int v8 = v6;
    int v9 = a1[1];
    do
    {
      unint64_t v11 = (void *)*(v9 - 3);
      v9 -= 3;
      unsigned int v10 = v11;
      if (v11)
      {
        *(v7 - 2) = v10;
        operator delete(v10);
      }
      int v7 = v9;
    }
    while (v9 != v8);
    a1[1] = v8;
  }
}

void operations_research::sat::ConstraintProto::mutable_table(operations_research::sat::ConstraintProto *this)
{
  if (*((_DWORD *)this + 15) != 16)
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
    *((_DWORD *)this + 15) = 16;
    uint64_t v2 = *((void *)this + 1);
    uint64_t v3 = (google::protobuf::Arena **)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v2) {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(*v3);
    }
    else {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>((google::protobuf::Arena *)v3);
    }
    *((void *)this + 6) = v4;
  }
}

uint64_t std::set_difference[abi:ne180100]<std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>>(char **a1, char **a2, char **a3, char **a4, char **a5)
{
  unsigned int v10 = a2;
  unint64_t v11 = a1;
  int v8 = a4;
  int v9 = a3;
  int v7 = a5;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &>(&v11, &v10, &v9, &v8, &v7);
  return v5;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveAllDiff(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504) || *((_DWORD *)a2 + 4)) {
    return 0;
  }
  if (*((_DWORD *)a2 + 15) == 13)
  {
    unint64_t v6 = *((void *)a2 + 6);
    int v7 = (unsigned int *)(v6 + 16);
    uint64_t v8 = *(unsigned int *)(v6 + 16);
    if (*(_DWORD *)(v6 + 16) != 1) {
      goto LABEL_7;
    }
LABEL_12:
    uint64_t v12 = *((void *)this + 2);
    long long __p = operator new(0x20uLL);
    long long v60 = xmmword_23CE7EC70;
    strcpy((char *)__p, "all_diff: only one variable");
    operations_research::sat::PresolveContext::UpdateRuleStats(v12, (uint64_t)&__p);
    goto LABEL_13;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 13;
  uint64_t v10 = *((void *)a2 + 1);
  unint64_t v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if (v10) {
    unint64_t v11 = *(google::protobuf::Arena **)v11;
  }
  unint64_t v6 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(v11);
  *((void *)a2 + 6) = v6;
  int v7 = (unsigned int *)(v6 + 16);
  uint64_t v8 = *(unsigned int *)(v6 + 16);
  if (v8 == 1) {
    goto LABEL_12;
  }
LABEL_7:
  if (!v8)
  {
    uint64_t v9 = *((void *)this + 2);
    long long __p = operator new(0x20uLL);
    long long v60 = xmmword_23CE7E7C0;
    strcpy((char *)__p, "all_diff: empty constraint");
    operations_research::sat::PresolveContext::UpdateRuleStats(v9, (uint64_t)&__p);
LABEL_13:
    if (SHIBYTE(v60) < 0) {
      operator delete(__p);
    }
    operations_research::sat::ConstraintProto::Clear(a2);
    return 1;
  }
  long long __p = 0;
  long long v60 = 0uLL;
  if ((int)v8 < 1) {
    goto LABEL_65;
  }
  uint64_t v55 = 0;
  __n128 v13 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  unsigned int v54 = v7;
  while (2)
  {
    if (!operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)(*(void *)(v6 + 24) + 4 * v15)))
    {
      int v23 = *(_DWORD *)(*(void *)(v6 + 24) + 4 * v15);
      if (v14 < v55)
      {
        *(_DWORD *)int v14 = v23;
        v14 += 4;
LABEL_19:
        *(void *)&long long v60 = v14;
        goto LABEL_20;
      }
      uint64_t v24 = (v14 - v13) >> 2;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v55 - v13) >> 1 > v25) {
        unint64_t v25 = (v55 - v13) >> 1;
      }
      if ((unint64_t)(v55 - v13) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26)
      {
        if (v26 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v27 = v26;
        unint64_t v28 = operator new(4 * v26);
        unint64_t v26 = v27;
        unint64_t v29 = &v28[4 * v24];
        _DWORD *v29 = v23;
        uint64_t v30 = (uint64_t)(v29 + 1);
        if (v14 != v13)
        {
LABEL_45:
          unint64_t v31 = v14 - 4 - v13;
          if (v31 < 0xBC
            || &v28[v14 - v13 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v28[v14 - v13 - 4]
            || &v14[-(v31 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4
            || (unint64_t)(v13 - v28) < 0x20)
          {
            uint64_t v32 = v14;
            int v14 = (char *)v30;
          }
          else
          {
            uint64_t v35 = (v31 >> 2) + 1;
            uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v32 = &v14[-v36];
            unint64_t v29 = (_DWORD *)((char *)v29 - v36);
            unint64_t v37 = &v28[4 * v24 - 16];
            int v38 = v14 - 16;
            uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v40 = *(_OWORD *)v38;
              *(v37 - 1) = *((_OWORD *)v38 - 1);
              *unint64_t v37 = v40;
              v37 -= 2;
              v38 -= 32;
              v39 -= 8;
            }
            while (v39);
            int v14 = (char *)v30;
            if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_48:
              long long __p = v29;
              *(void *)&long long v60 = v14;
              uint64_t v55 = &v28[4 * v26];
              *((void *)&v60 + 1) = v55;
              if (!v13)
              {
LABEL_50:
                __n128 v13 = (char *)v29;
                goto LABEL_19;
              }
LABEL_49:
              operator delete(v13);
              goto LABEL_50;
            }
          }
          do
          {
            int v33 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *--unint64_t v29 = v33;
          }
          while (v32 != v13);
          goto LABEL_48;
        }
      }
      else
      {
        unint64_t v28 = 0;
        unint64_t v29 = (_DWORD *)(4 * v24);
        *(_DWORD *)(4 * v24) = v23;
        uint64_t v30 = 4 * v24 + 4;
        if (v14 != v13) {
          goto LABEL_45;
        }
      }
      int v14 = (char *)v30;
      long long __p = v29;
      *(void *)&long long v60 = v30;
      uint64_t v55 = &v28[4 * v26];
      *((void *)&v60 + 1) = v55;
      if (!v13) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
    uint64_t v16 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)(*(void *)(v6 + 24) + 4 * v15));
    uint64_t v17 = 0;
    char v18 = 0;
    do
    {
      while (v15 != v17
           && operations_research::sat::PresolveContext::DomainContains(*((operations_research::sat::PresolveContext **)this + 2), *(_DWORD *)(*(void *)(v6 + 24) + 4 * v17), v16))
      {
        unint64_t v19 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
        unint64_t v20 = (const char *)*(unsigned int *)(*(void *)(v6 + 24) + 4 * v17);
        operations_research::Domain::Domain(v56, v16);
        operations_research::Domain::Complement((operations_research::Domain *)v56, (unint64_t *)&v57);
        char v21 = operations_research::sat::PresolveContext::IntersectDomainWith(v19, v20, (const operations_research::Domain *)&v57, 0);
        if (v57)
        {
          operator delete(v58[0]);
          if ((uint64_t)v56[0])
          {
LABEL_31:
            operator delete(v56[1]);
            if ((v21 & 1) == 0) {
              goto LABEL_81;
            }
            goto LABEL_32;
          }
        }
        else if ((uint64_t)v56[0])
        {
          goto LABEL_31;
        }
        if ((v21 & 1) == 0) {
          goto LABEL_81;
        }
LABEL_32:
        char v18 = 1;
        if (v8 - 1 == v17++) {
          goto LABEL_52;
        }
      }
      ++v17;
    }
    while (v8 != v17);
    if ((v18 & 1) == 0) {
      goto LABEL_20;
    }
LABEL_52:
    uint64_t v34 = *((void *)this + 2);
    BOOL v57 = operator new(0x28uLL);
    *(_OWORD *)uint64_t v58 = xmmword_23CE7FBD0;
    strcpy((char *)v57, "all_diff: propagated fixed variables");
    operations_research::sat::PresolveContext::UpdateRuleStats(v34, (uint64_t)&v57);
    if (SHIBYTE(v58[1]) < 0) {
      operator delete(v57);
    }
LABEL_20:
    if (++v15 != v8) {
      continue;
    }
    break;
  }
  int v7 = v54;
LABEL_65:
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v42 = (int *)__p;
  unint64_t v41 = (int *)v60;
  unint64_t v43 = (uint64_t)(v60 - (void)__p) >> 2;
  if ((void)v60 - (void)__p < 5uLL)
  {
LABEL_72:
    if (v43 >= (int)*v7)
    {
      uint64_t IsUnsat = 0;
    }
    else
    {
      unsigned int *v7 = 0;
      if (v42 != v41)
      {
        unsigned int v50 = 0;
        do
        {
          int v51 = *v42;
          if (v50 == *(_DWORD *)(v6 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve(v7, v50 + 1);
          }
          *(_DWORD *)(*(void *)(v6 + 24) + 4 * v50) = v51;
          *(_DWORD *)(v6 + 16) = v50 + 1;
          ++v42;
          ++v50;
        }
        while (v42 != v41);
      }
      uint64_t v52 = *((void *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v57, "all_diff: removed fixed variables");
      operations_research::sat::PresolveContext::UpdateRuleStats(v52, (uint64_t)&v57);
      if (SHIBYTE(v58[1]) < 0) {
        operator delete(v57);
      }
LABEL_81:
      uint64_t IsUnsat = 1;
    }
  }
  else
  {
    if (v43 <= 2) {
      uint64_t v44 = 2;
    }
    else {
      uint64_t v44 = (uint64_t)(v60 - (void)__p) >> 2;
    }
    long long v45 = (int *)((char *)__p + 4);
    int v46 = *(_DWORD *)__p;
    uint64_t v47 = v44 - 1;
    while (1)
    {
      int v49 = *v45++;
      int v48 = v49;
      if (v49 == v46) {
        break;
      }
      int v46 = v48;
      if (!--v47) {
        goto LABEL_72;
      }
    }
    uint64_t v53 = *((void *)this + 2);
    BOOL v57 = operator new(0x20uLL);
    *(_OWORD *)uint64_t v58 = xmmword_23CE7E3F0;
    strcpy((char *)v57, "Duplicate variable in all_diff");
    uint64_t IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v53, (uint64_t)&v57);
    if (SHIBYTE(v58[1]) < 0) {
      operator delete(v57);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return IsUnsat;
}

void sub_23CC55968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *__p, void *a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::ConstraintProto::mutable_all_diff(operations_research::sat::ConstraintProto *this)
{
  if (*((_DWORD *)this + 15) == 13) {
    return *((void *)this + 6);
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 13;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if (v3) {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(*v4);
  }
  else {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>((google::protobuf::Arena *)v4);
  }
  *((void *)this + 6) = result;
  return result;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504)) {
    return 0;
  }
  int v5 = *((_DWORD *)a2 + 15);
  if (v5 == 20)
  {
    unint64_t v6 = (uint64_t *)*((void *)a2 + 6);
    int v7 = *((_DWORD *)v6 + 4);
    if (v7 < 1) {
      goto LABEL_5;
    }
  }
  else
  {
    unint64_t v6 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
    int v7 = dword_26AEE1CE0;
    if (dword_26AEE1CE0 < 1)
    {
LABEL_5:
      int v8 = 0;
      if (v5 != 20) {
        goto LABEL_6;
      }
LABEL_20:
      unint64_t v11 = *((void *)a2 + 6);
      if (*(int *)(v11 + 16) < 1) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  uint64_t v12 = 0;
  int v8 = 0;
  do
  {
    uint64_t v14 = *(int *)(v6[3] + 4 * v12);
    if (*(_DWORD *)(*(void *)(*(void *)(*(void *)(*((void *)this + 2) + 48) + 56) + 8 * v14 + 8) + 60))
    {
      if (*((_DWORD *)a2 + 15) == 20)
      {
        unint64_t v13 = *((void *)a2 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 20;
        uint64_t v15 = *((void *)a2 + 1);
        uint64_t v16 = (google::protobuf::Arena *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        if (v15) {
          uint64_t v16 = *(google::protobuf::Arena **)v16;
        }
        unint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v16);
        *((void *)a2 + 6) = v13;
      }
      *(_DWORD *)(*(void *)(v13 + 24) + 4 * v8++) = v14;
      int v7 = *((_DWORD *)v6 + 4);
    }
    ++v12;
  }
  while (v12 < v7);
  if (*((_DWORD *)a2 + 15) == 20) {
    goto LABEL_20;
  }
LABEL_6:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 20;
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v10 = (google::protobuf::Arena *)(v9 & 0xFFFFFFFFFFFFFFFELL);
  if ((v9 & 1) == 0)
  {
    unint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v10);
    *((void *)a2 + 6) = v11;
    if (*(int *)(v11 + 16) < 1) {
      goto LABEL_22;
    }
LABEL_21:
    *(_DWORD *)(v11 + 16) = v8;
    goto LABEL_22;
  }
  unint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*(google::protobuf::Arena **)v10);
  *((void *)a2 + 6) = v11;
  if (*(int *)(v11 + 16) >= 1) {
    goto LABEL_21;
  }
LABEL_22:
  if (*((_DWORD *)a2 + 15) == 20)
  {
    unint64_t v17 = *((void *)a2 + 6);
    uint64_t v18 = *(void *)(v17 + 24);
    goto LABEL_29;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 20;
  uint64_t v19 = *((void *)a2 + 1);
  unint64_t v20 = (google::protobuf::Arena **)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if (v19)
  {
    unint64_t v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*v20);
    *((void *)a2 + 6) = v17;
    uint64_t v18 = *(void *)(v17 + 24);
    if (*((_DWORD *)a2 + 15) == 20) {
      goto LABEL_29;
    }
  }
  else
  {
    unint64_t v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>((google::protobuf::Arena *)v20);
    *((void *)a2 + 6) = v17;
    uint64_t v18 = *(void *)(v17 + 24);
    if (*((_DWORD *)a2 + 15) == 20) {
      goto LABEL_29;
    }
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 20;
  uint64_t v21 = *((void *)a2 + 1);
  int v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if (v21) {
    int v22 = *(google::protobuf::Arena **)v22;
  }
  unint64_t v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v22);
  *((void *)a2 + 6) = v17;
LABEL_29:
  int v23 = (int *)(*(void *)(v17 + 24) + 4 * *(int *)(v17 + 16));
  unint64_t v24 = 126 - 2 * __clz(((uint64_t)v23 - v18) >> 2);
  long long __p = this;
  if (v23 == (int *)v18) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v24;
  }
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,false>(v18, v23, (uint64_t *)&__p, v25, 1);
  if (*((int *)v6 + 4) < 1)
  {
    int v27 = 0;
  }
  else
  {
    uint64_t v26 = 0;
    int v27 = 0;
    uint64_t v28 = 0x8000000000000000;
    do
    {
      uint64_t v31 = *(int *)(v6[3] + 4 * v26);
      uint64_t v32 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
      uint64_t v33 = *(void *)(*(void *)(*((void *)v32 + 6) + 56) + 8 * v31 + 8);
      uint64_t v34 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      if (*(_DWORD *)(v33 + 60) == 19) {
        uint64_t v34 = *(uint64_t **)(v33 + 48);
      }
      uint64_t v35 = operations_research::sat::PresolveContext::MaxOf(v32, (const char *)*((unsigned int *)v34 + 5));
      if (v28 <= v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = v28;
      }
      if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*((unsigned int *)v34 + 4)) < v28)goto LABEL_47; {
      uint64_t v30 = v26 + 1;
      }
      if (v26 + 1 == *((_DWORD *)v6 + 4)) {
        goto LABEL_51;
      }
      unint64_t v37 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
      uint64_t v38 = *(void *)(*(void *)(*((void *)v37 + 6) + 56) + 8 * *(int *)(v6[3] + 4 * v30) + 8);
      uint64_t v39 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      if (*(_DWORD *)(v38 + 60) == 19) {
        uint64_t v39 = *(uint64_t **)(v38 + 48);
      }
      if (v36 <= operations_research::sat::PresolveContext::MinOf(v37, (const char *)*((unsigned int *)v39 + 4)))
      {
LABEL_51:
        uint64_t v42 = *((void *)this + 2);
        long long __p = operator new(0x28uLL);
        long long v50 = xmmword_23CE834B0;
        strcpy((char *)__p, "no_overlap: removed redundant intervals");
        operations_research::sat::PresolveContext::UpdateRuleStats(v42, (uint64_t)&__p);
        if (SHIBYTE(v50) < 0) {
          operator delete(__p);
        }
      }
      else
      {
LABEL_47:
        if (*((_DWORD *)a2 + 15) == 20)
        {
          unint64_t v29 = *((void *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 20;
          uint64_t v40 = *((void *)a2 + 1);
          unint64_t v41 = (google::protobuf::Arena *)(v40 & 0xFFFFFFFFFFFFFFFELL);
          if (v40) {
            unint64_t v41 = *(google::protobuf::Arena **)v41;
          }
          unint64_t v29 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v41);
          *((void *)a2 + 6) = v29;
        }
        *(_DWORD *)(*(void *)(v29 + 24) + 4 * v27++) = v31;
        uint64_t v30 = v26 + 1;
      }
      uint64_t v26 = v30;
      uint64_t v28 = v36;
    }
    while (v30 < *((int *)v6 + 4));
  }
  if (*((_DWORD *)a2 + 15) == 20)
  {
    unint64_t v43 = *((void *)a2 + 6);
    if (*(int *)(v43 + 16) < 1) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 20;
  uint64_t v44 = *((void *)a2 + 1);
  long long v45 = (google::protobuf::Arena *)(v44 & 0xFFFFFFFFFFFFFFFELL);
  if ((v44 & 1) == 0)
  {
    unint64_t v43 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v45);
    *((void *)a2 + 6) = v43;
    if (*(int *)(v43 + 16) < 1) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  unint64_t v43 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*(google::protobuf::Arena **)v45);
  *((void *)a2 + 6) = v43;
  if (*(int *)(v43 + 16) >= 1) {
LABEL_59:
  }
    *(_DWORD *)(v43 + 16) = v27;
LABEL_60:
  int v46 = *((_DWORD *)v6 + 4);
  if (v46)
  {
    if (v46 != 1) {
      return 0;
    }
    uint64_t v47 = *((void *)this + 2);
    long long __p = operator new(0x20uLL);
    long long v50 = xmmword_23CE7FBE0;
    strcpy((char *)__p, "no_overlap: only one interval");
    operations_research::sat::PresolveContext::UpdateRuleStats(v47, (uint64_t)&__p);
  }
  else
  {
    uint64_t v48 = *((void *)this + 2);
    long long __p = operator new(0x20uLL);
    long long v50 = xmmword_23CE7ED90;
    strcpy((char *)__p, "no_overlap: no intervals");
    operations_research::sat::PresolveContext::UpdateRuleStats(v48, (uint64_t)&__p);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  operations_research::sat::ConstraintProto::Clear(a2);
  return 1;
}

void sub_23CC55FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::ConstraintProto::mutable_no_overlap(operations_research::sat::ConstraintProto *this)
{
  if (*((_DWORD *)this + 15) == 20) {
    return *((void *)this + 6);
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 20;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if (v3) {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*v4);
  }
  else {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>((google::protobuf::Arena *)v4);
  }
  *((void *)this + 6) = result;
  return result;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveCumulative(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504)) {
    return 0;
  }
  if (*((_DWORD *)a2 + 15) == 22)
  {
    unint64_t v6 = (uint64_t *)*((void *)a2 + 6);
    LODWORD(v7) = *((_DWORD *)v6 + 4);
    if ((int)v7 < 1)
    {
LABEL_6:
      int v8 = 0;
      int v9 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v6 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
    LODWORD(v7) = dword_26AEE1D78;
    if (dword_26AEE1D78 < 1) {
      goto LABEL_6;
    }
  }
  uint64_t v11 = 0;
  int v9 = 0;
  int v8 = 0;
  do
  {
    uint64_t v12 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
    if (*(_DWORD *)(*(void *)(*(void *)(*((void *)v12 + 6) + 56) + 8 * *(int *)(v6[3] + 4 * v11) + 8) + 60))
    {
      if (operations_research::sat::PresolveContext::MaxOf(v12, (const char *)*(unsigned int *)(v6[6] + 4 * v11)))
      {
        if (*((_DWORD *)a2 + 15) == 22)
        {
          uint64_t v13 = *((void *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 22;
          uint64_t v14 = *((void *)a2 + 1);
          uint64_t v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if (v14) {
            uint64_t v15 = *(google::protobuf::Arena **)v15;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v15);
          *((void *)a2 + 6) = v13;
        }
        *(_DWORD *)(*(void *)(v13 + 24) + 4 * v9) = *(_DWORD *)(v6[3] + 4 * v11);
        if (*((_DWORD *)a2 + 15) == 22)
        {
          uint64_t v16 = *((void *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 22;
          uint64_t v17 = *((void *)a2 + 1);
          uint64_t v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if (v17) {
            uint64_t v18 = *(google::protobuf::Arena **)v18;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v18);
          *((void *)a2 + 6) = v16;
        }
        *(_DWORD *)(*(void *)(v16 + 48) + 4 * v9++) = *(_DWORD *)(v6[6] + 4 * v11);
      }
      else
      {
        ++v8;
      }
    }
    ++v11;
    uint64_t v7 = *((int *)v6 + 4);
  }
  while (v11 < v7);
LABEL_7:
  uint64_t IsUnsat = v9 < (int)v7;
  if (v9 >= (int)v7) {
    goto LABEL_37;
  }
  if (*((_DWORD *)a2 + 15) == 22)
  {
    uint64_t v10 = *((void *)a2 + 6);
    if (*(int *)(v10 + 16) < 1) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 22;
  uint64_t v19 = *((void *)a2 + 1);
  unint64_t v20 = (google::protobuf::Arena **)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if (v19)
  {
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(*v20);
    *((void *)a2 + 6) = v10;
    if (*(int *)(v10 + 16) < 1) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>((google::protobuf::Arena *)v20);
  *((void *)a2 + 6) = v10;
  if (*(int *)(v10 + 16) >= 1) {
LABEL_30:
  }
    *(_DWORD *)(v10 + 16) = v9;
LABEL_31:
  if (*((_DWORD *)a2 + 15) == 22)
  {
    uint64_t v21 = *((void *)a2 + 6);
    if (*(int *)(v21 + 40) < 1) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 22;
  uint64_t v22 = *((void *)a2 + 1);
  int v23 = (google::protobuf::Arena **)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if (v22)
  {
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(*v23);
    *((void *)a2 + 6) = v21;
    if (*(int *)(v21 + 40) < 1) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>((google::protobuf::Arena *)v23);
  *((void *)a2 + 6) = v21;
  if (*(int *)(v21 + 40) >= 1) {
LABEL_36:
  }
    *(_DWORD *)(v21 + 40) = v9;
LABEL_37:
  if (v8 >= 1)
  {
    uint64_t v24 = *((void *)this + 2);
    uint64_t v79 = (char *)operator new(0x30uLL);
    long long v80 = xmmword_23CE85CC0;
    strcpy(v79, "cumulative: removed intervals with no demands");
    operations_research::sat::PresolveContext::UpdateRuleStats(v24, (uint64_t)&v79);
    if (SHIBYTE(v80) < 0)
    {
      operator delete(v79);
      if (v9) {
        goto LABEL_40;
      }
LABEL_64:
      uint64_t v44 = *((void *)this + 2);
      uint64_t v79 = (char *)operator new(0x20uLL);
      long long v80 = xmmword_23CE7ED90;
      strcpy(v79, "cumulative: no intervals");
      operations_research::sat::PresolveContext::UpdateRuleStats(v44, (uint64_t)&v79);
      if (SHIBYTE(v80) < 0) {
        operator delete(v79);
      }
      operations_research::sat::ConstraintProto::Clear(a2);
      return 1;
    }
  }
  if (!v9) {
    goto LABEL_64;
  }
LABEL_40:
  if (!*((_DWORD *)a2 + 4)
    && operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*((unsigned int *)v6 + 15)))
  {
    uint64_t v25 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*((unsigned int *)v6 + 15));
    uint64_t v26 = *((int *)v6 + 4);
    uint64_t v79 = 0;
    long long v80 = 0uLL;
    int v70 = v26;
    if (v26)
    {
      uint64_t v75 = v25;
      if ((v26 & 0x80000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int v27 = (char *)operator new(4 * v26);
      uint64_t v28 = &v27[4 * v26];
      uint64_t v79 = v27;
      *((void *)&v80 + 1) = v28;
      unint64_t v73 = v27;
      memset(v27, 255, 4 * v26);
      uint64_t v29 = 0;
      char v30 = 0;
      unsigned int v31 = v26;
      LODWORD(v26) = 0;
      int v72 = 0;
      unint64_t v69 = v28;
      *(void *)&long long v80 = v28;
      uint64_t v71 = 4 * v31;
      while (1)
      {
        uint64_t v32 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
        uint64_t v33 = *(void *)(*(void *)(*((void *)v32 + 6) + 56) + 8 * *(int *)(v6[3] + v29) + 8);
        BOOL v76 = *(_DWORD *)(v33 + 16) != 0;
        uint64_t v34 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v33 + 60) == 19) {
          uint64_t v34 = *(uint64_t **)(v33 + 48);
        }
        uint64_t v74 = *(void *)(*(void *)(*((void *)v32 + 6) + 56) + 8 * *(int *)(v6[3] + v29) + 8);
        *(_DWORD *)&v73[v29] = *((_DWORD *)v34 + 4);
        uint64_t v35 = (const char *)*((unsigned int *)v34 + 6);
        uint64_t v36 = (const char *)*(unsigned int *)(v6[6] + v29);
        if (operations_research::sat::PresolveContext::IsFixed(v32, v35))
        {
          uint64_t v37 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v35);
          int v38 = v72;
          if (v37 == 1) {
            int v38 = v72 + 1;
          }
          int v72 = v38;
        }
        if (!operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v35))
        {
          uint64_t v47 = v73;
          uint64_t IsUnsat = v9 < (int)v7;
          goto LABEL_101;
        }
        uint64_t v39 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v36);
        uint64_t v40 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v36);
        if (v39 > v75 / 2) {
          LODWORD(v26) = v26 + 1;
        }
        if (v39 > v75) {
          break;
        }
        if (v40 > v75)
        {
          uint64_t v41 = *((void *)this + 2);
          if (*(_DWORD *)(v74 + 16))
          {
            uint64_t IsUnsat = v9 < (int)v7;
            long long __p = operator new(0x40uLL);
            *(_OWORD *)uint64_t v78 = xmmword_23CE85CE0;
            strcpy((char *)__p, "cumulative: demand_max of optional interval exceeds capacity.");
            uint64_t v47 = v73;
            operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)&__p);
            goto LABEL_99;
          }
          long long __p = operator new(0x30uLL);
          *(_OWORD *)uint64_t v78 = xmmword_23CE85CD0;
          strcpy((char *)__p, "cumulative: demand_max exceeds capacity.");
          operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)&__p);
          if (SHIBYTE(v78[1]) < 0) {
            operator delete(__p);
          }
          uint64_t v42 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
          operations_research::Domain::Domain(&__p, 0x8000000000000000, v75);
          char v43 = operations_research::sat::PresolveContext::IntersectDomainWith(v42, v36, (const operations_research::Domain *)&__p, 0);
          if (__p) {
            operator delete(v78[0]);
          }
          if ((v43 & 1) == 0)
          {
            uint64_t IsUnsat = 1;
            uint64_t v47 = v73;
            goto LABEL_101;
          }
        }
        v30 |= v76;
        v29 += 4;
        if (v71 == v29)
        {
          uint64_t IsUnsat = v9 < (int)v7;
          long long v45 = v69;
          int v46 = v72;
          goto LABEL_77;
        }
      }
      uint64_t v48 = *((void *)this + 2);
      long long __p = operator new(0x28uLL);
      *(_OWORD *)uint64_t v78 = xmmword_23CE834B0;
      strcpy((char *)__p, "cumulative: demand_min exceeds capacity");
      uint64_t v47 = v73;
      operations_research::sat::PresolveContext::UpdateRuleStats(v48, (uint64_t)&__p);
      if (SHIBYTE(v78[1]) < 0) {
        operator delete(__p);
      }
      int v49 = *(_DWORD *)(v74 + 16);
      if (!v49)
      {
        uint64_t v68 = *((void *)this + 2);
        HIBYTE(v78[1]) = 0;
        LOBYTE(__p) = 0;
        uint64_t IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v68, (uint64_t)&__p);
LABEL_99:
        if (SHIBYTE(v78[1]) < 0) {
          operator delete(__p);
        }
        goto LABEL_101;
      }
      LODWORD(__p) = *(_DWORD *)(v74 + 16);
      int v81 = 1;
      if (v49 != 1) {
        google::MakeCheckOpString<int,int>((int)&__p, (int)&v81, "ct.enforcement_literal().size() == 1");
      }
      unsigned int v50 = operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), **(_DWORD **)(v74 + 24)) ^ 1;
      if (v9 < (int)v7) {
        uint64_t IsUnsat = 1;
      }
      else {
        uint64_t IsUnsat = v50;
      }
      goto LABEL_101;
    }
    unint64_t v73 = 0;
    long long v45 = 0;
    int v46 = 0;
    char v30 = 0;
LABEL_77:
    if (v26 == v70)
    {
      uint64_t v51 = *((void *)this + 2);
      if ((v46 != v70) | v30 & 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "cumulative: convert to no_overlap");
        operations_research::sat::PresolveContext::UpdateRuleStats(v51, (uint64_t)&__p);
        if (SHIBYTE(v78[1]) < 0) {
          operator delete(__p);
        }
        uint64_t v52 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
        unint64_t v53 = operations_research::sat::ConstraintProto::mutable_no_overlap(v52);
        uint64_t v54 = *((int *)v6 + 4);
        if (v54)
        {
          unint64_t v55 = v53;
          uint64_t v56 = (int *)v6[3];
          BOOL v57 = (unsigned int *)(v53 + 16);
          unsigned int v58 = *(_DWORD *)(v53 + 16);
          uint64_t v59 = 4 * v54;
          do
          {
            int v60 = *v56;
            if (v58 == *(_DWORD *)(v55 + 20)) {
              google::protobuf::RepeatedField<int>::Reserve(v57, v58 + 1);
            }
            *(_DWORD *)(*(void *)(v55 + 24) + 4 * v58) = v60;
            *(_DWORD *)(v55 + 16) = v58 + 1;
            ++v56;
            ++v58;
            v59 -= 4;
          }
          while (v59);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "cumulative: convert to all_different");
        operations_research::sat::PresolveContext::UpdateRuleStats(v51, (uint64_t)&__p);
        if (SHIBYTE(v78[1]) < 0) {
          operator delete(__p);
        }
        uint64_t v61 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((void *)this + 2) + 48));
        unint64_t v62 = operations_research::sat::ConstraintProto::mutable_all_diff(v61);
        if (v73 != v45)
        {
          unint64_t v63 = v62;
          uint64_t v64 = (unsigned int *)(v62 + 16);
          unsigned int v65 = *(_DWORD *)(v62 + 16);
          uint64_t v66 = v73;
          do
          {
            int v67 = *(_DWORD *)v66;
            if (v65 == *(_DWORD *)(v63 + 20)) {
              google::protobuf::RepeatedField<int>::Reserve(v64, v65 + 1);
            }
            *(_DWORD *)(*(void *)(v63 + 24) + 4 * v65) = v67;
            *(_DWORD *)(v63 + 16) = v65 + 1;
            v66 += 4;
            ++v65;
          }
          while (v66 != v45);
        }
      }
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      operations_research::sat::ConstraintProto::Clear(a2);
      uint64_t IsUnsat = 1;
    }
    uint64_t v47 = v73;
    if (v73)
    {
LABEL_101:
      *(void *)&long long v80 = v47;
      operator delete(v47);
    }
  }
  return IsUnsat;
}

void sub_23CC56914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC5691C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 - 112) = __p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveRoutes(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504) || *((_DWORD *)a2 + 4)) {
    return 0;
  }
  if (*((_DWORD *)a2 + 15) == 23)
  {
    uint64_t v4 = *((void *)a2 + 6);
    uint64_t v5 = *(unsigned int *)(v4 + 64);
    if ((int)v5 < 1)
    {
LABEL_5:
      int v6 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 23;
    uint64_t v8 = *((void *)a2 + 1);
    int v9 = (google::protobuf::Arena **)(v8 & 0xFFFFFFFFFFFFFFFELL);
    if (v8)
    {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(*v9);
      uint64_t v4 = v17;
      *((void *)a2 + 6) = v17;
      uint64_t v5 = *(unsigned int *)(v17 + 64);
      if ((int)v5 < 1) {
        goto LABEL_5;
      }
    }
    else
    {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>((google::protobuf::Arena *)v9);
      uint64_t v4 = v10;
      *((void *)a2 + 6) = v10;
      uint64_t v5 = *(unsigned int *)(v10 + 64);
      if ((int)v5 < 1) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v11 = 0;
  int v6 = 0;
  do
  {
    unsigned int v13 = *(_DWORD *)(*(void *)(v4 + 72) + v11);
    int v14 = *(_DWORD *)(*(void *)(v4 + 24) + v11);
    int v15 = *(_DWORD *)(*(void *)(v4 + 48) + v11);
    if (operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v13))
    {
      uint64_t v16 = *((void *)this + 2);
      long long __p = operator new(0x20uLL);
      long long v19 = xmmword_23CE7E7C0;
      strcpy((char *)__p, "routes: removed false arcs");
      operations_research::sat::PresolveContext::UpdateRuleStats(v16, (uint64_t)&__p);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v12 = 4 * v6;
      *(_DWORD *)(*(void *)(v4 + 72) + v12) = v13;
      *(_DWORD *)(*(void *)(v4 + 24) + v12) = v14;
      *(_DWORD *)(*(void *)(v4 + 48) + v12) = v15;
      ++v6;
    }
    v11 += 4;
  }
  while (4 * v5 != v11);
LABEL_6:
  if (v6 >= (int)v5) {
    return 0;
  }
  if (*(int *)(v4 + 64) >= 1) {
    *(_DWORD *)(v4 + 64) = v6;
  }
  if (*(int *)(v4 + 16) >= 1) {
    *(_DWORD *)(v4 + 16) = v6;
  }
  if (*(int *)(v4 + 40) >= 1) {
    *(_DWORD *)(v4 + 40) = v6;
  }
  return 1;
}

void sub_23CC56BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveCircuit(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504) || *((_DWORD *)a2 + 4)) {
    return 0;
  }
  uint64_t v5 = this;
  if (*((_DWORD *)a2 + 15) == 15)
  {
    uint64_t v6 = *((void *)a2 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 15;
    uint64_t v7 = *((void *)a2 + 1);
    uint64_t v8 = (google::protobuf::Arena *)(v7 & 0xFFFFFFFFFFFFFFFELL);
    if (v7) {
      uint64_t v8 = *(google::protobuf::Arena **)v8;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(v8);
    *((void *)a2 + 6) = v6;
  }
  int v194 = a2;
  uint64_t v196 = v6;
  v212 = 0;
  v213 = 0;
  uint64_t v214 = 0;
  unint64_t v209 = 0;
  v210 = 0;
  uint64_t v211 = 0;
  uint64_t v197 = *(unsigned int *)(v6 + 64);
  unint64_t v198 = (operations_research::sat::PresolveContext **)v5;
  if ((int)v197 >= 1)
  {
    uint64_t v9 = 0;
    signed int v10 = 0;
    while (1)
    {
      int v204 = *(_DWORD *)(*(void *)(v6 + 72) + 4 * v9);
      int v12 = *(_DWORD *)(*(void *)(v6 + 48) + 4 * v9);
      int v199 = *(_DWORD *)(*(void *)(v6 + 24) + 4 * v9);
      if (v199 <= v12) {
        int v13 = *(_DWORD *)(*(void *)(v6 + 48) + 4 * v9);
      }
      else {
        int v13 = *(_DWORD *)(*(void *)(v6 + 24) + 4 * v9);
      }
      int v14 = v13 + 1;
      if (v10 <= v13 + 1) {
        signed int v10 = v13 + 1;
      }
      signed int v201 = v10;
      int v15 = v213;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v213 - v212);
      if (v16 <= v13)
      {
        unint64_t v17 = v14;
        if (v14 <= v16)
        {
          if (v14 < v16)
          {
            uint64_t v18 = &v212[3 * v14];
            if (v213 != v18)
            {
              long long v19 = v213;
              do
              {
                uint64_t v21 = (void *)*(v19 - 3);
                v19 -= 3;
                unint64_t v20 = v21;
                if (v21)
                {
                  *(v15 - 2) = v20;
                  operator delete(v20);
                }
                int v15 = v19;
              }
              while (v19 != v18);
            }
            v213 = v18;
          }
        }
        else
        {
          std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)&v212, v14 - v16);
        }
        uint64_t v22 = v210;
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (v210 - v209);
        if (v17 <= v23)
        {
          if (v17 < v23)
          {
            uint64_t v24 = &v209[3 * (int)v17];
            if (v210 != v24)
            {
              uint64_t v25 = v210;
              do
              {
                int v27 = (void *)*(v25 - 3);
                v25 -= 3;
                uint64_t v26 = v27;
                if (v27)
                {
                  *(v22 - 2) = v26;
                  operator delete(v26);
                }
                uint64_t v22 = v25;
              }
              while (v25 != v24);
            }
            v210 = v24;
          }
        }
        else
        {
          std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)&v209, v17 - v23);
        }
      }
      uint64_t v28 = &v212[3 * v12];
      uint64_t v29 = v28 + 1;
      char v30 = (char *)v28[1];
      unint64_t v31 = v28[2];
      if ((unint64_t)v30 < v31)
      {
        *(_DWORD *)char v30 = v204;
        uint64_t v32 = (uint64_t)(v30 + 4);
        goto LABEL_59;
      }
      uint64_t v33 = (char *)*v28;
      uint64_t v34 = (uint64_t)&v30[-*v28];
      uint64_t v35 = v34 >> 2;
      unint64_t v36 = (v34 >> 2) + 1;
      if (v36 >> 62) {
        goto LABEL_302;
      }
      uint64_t v37 = v31 - (void)v33;
      if (v37 >> 1 > v36) {
        unint64_t v36 = v37 >> 1;
      }
      unint64_t v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v36;
      if (v38) {
        break;
      }
      uint64_t v39 = 0;
      uint64_t v40 = (_DWORD *)(4 * v35);
      *(_DWORD *)(4 * v35) = v204;
      uint64_t v32 = 4 * v35 + 4;
      if (v30 != v33) {
        goto LABEL_51;
      }
LABEL_57:
      void *v28 = v40;
      uint64_t *v29 = v32;
      v28[2] = &v39[4 * v38];
      if (v33) {
        operator delete(v33);
      }
LABEL_59:
      uint64_t *v29 = v32;
      unsigned int v50 = &v209[3 * v199];
      uint64_t v51 = v50 + 1;
      uint64_t v52 = (char *)v50[1];
      unint64_t v53 = v50[2];
      if ((unint64_t)v52 >= v53)
      {
        uint64_t v54 = (char *)*v50;
        uint64_t v55 = (uint64_t)&v52[-*v50];
        uint64_t v56 = v55 >> 2;
        unint64_t v57 = (v55 >> 2) + 1;
        if (v57 >> 62) {
LABEL_302:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v58 = v53 - (void)v54;
        if (v58 >> 1 > v57) {
          unint64_t v57 = v58 >> 1;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59)
        {
          if (v59 >> 62) {
LABEL_303:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          int v60 = operator new(4 * v59);
          uint64_t v61 = &v60[4 * v56];
          *uint64_t v61 = v204;
          uint64_t v11 = (uint64_t)(v61 + 1);
          if (v52 != v54)
          {
LABEL_69:
            unint64_t v62 = v52 - 4 - v54;
            if (v62 < 0x2C)
            {
              uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
              goto LABEL_77;
            }
            unint64_t v63 = v52 - &v60[v55];
            uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
            if (v63 < 0x20) {
              goto LABEL_308;
            }
            uint64_t v64 = (v62 >> 2) + 1;
            uint64_t v65 = 4 * (v64 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v66 = &v52[-v65];
            uint64_t v61 = (_DWORD *)((char *)v61 - v65);
            int v67 = &v60[4 * v56 - 16];
            uint64_t v68 = v52 - 16;
            uint64_t v69 = v64 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v70 = *(_OWORD *)v68;
              *(v67 - 1) = *((_OWORD *)v68 - 1);
              *int v67 = v70;
              v67 -= 2;
              v68 -= 32;
              v69 -= 8;
            }
            while (v69);
            uint64_t v52 = v66;
            if (v64 != (v64 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_308:
              do
              {
LABEL_77:
                int v71 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *--uint64_t v61 = v71;
              }
              while (v52 != v54);
            }
LABEL_78:
            *unsigned int v50 = v61;
            uint64_t *v51 = v11;
            v50[2] = &v60[4 * v59];
            if (v54) {
              operator delete(v54);
            }
            goto LABEL_13;
          }
        }
        else
        {
          int v60 = 0;
          uint64_t v61 = (_DWORD *)(4 * v56);
          *(_DWORD *)(4 * v56) = v204;
          uint64_t v11 = 4 * v56 + 4;
          if (v52 != v54) {
            goto LABEL_69;
          }
        }
        uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
        goto LABEL_78;
      }
      *(_DWORD *)uint64_t v52 = v204;
      uint64_t v11 = (uint64_t)(v52 + 4);
      uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
LABEL_13:
      uint64_t v6 = v196;
      signed int v10 = v201;
      uint64_t *v51 = v11;
      if (++v9 == v197) {
        goto LABEL_81;
      }
    }
    if (v38 >> 62) {
      goto LABEL_303;
    }
    uint64_t v39 = operator new(4 * v38);
    uint64_t v40 = &v39[4 * v35];
    _DWORD *v40 = v204;
    uint64_t v32 = (uint64_t)(v40 + 1);
    if (v30 == v33) {
      goto LABEL_57;
    }
LABEL_51:
    unint64_t v41 = v30 - 4 - v33;
    if (v41 < 0x2C) {
      goto LABEL_309;
    }
    if ((unint64_t)(v30 - &v39[v34]) < 0x20) {
      goto LABEL_309;
    }
    uint64_t v42 = (v41 >> 2) + 1;
    uint64_t v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v44 = &v30[-v43];
    uint64_t v40 = (_DWORD *)((char *)v40 - v43);
    long long v45 = &v39[4 * v35 - 16];
    int v46 = v30 - 16;
    uint64_t v47 = v42 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      *long long v45 = v48;
      v45 -= 2;
      v46 -= 32;
      v47 -= 8;
    }
    while (v47);
    char v30 = v44;
    if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_309:
      do
      {
        int v49 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *--uint64_t v40 = v49;
      }
      while (v30 != v33);
    }
    goto LABEL_57;
  }
  signed int v10 = 0;
LABEL_81:
  unsigned int v202 = v10;
  int v72 = 0;
  do
  {
    unint64_t v73 = (int **)v212;
    uint64_t v74 = (int **)v213;
    if (v212 != v213)
    {
      char v75 = 0;
      while (1)
      {
        BOOL v76 = *v73;
        uint64_t v77 = v73[1];
        if ((char *)v77 - (char *)*v73 == 4)
        {
          if (!operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v76))
          {
            if ((operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)v5 + 2), **v73) & 1) == 0)
            {
LABEL_130:
              uint64_t IsUnsat = 1;
              goto LABEL_131;
            }
            ++v72;
          }
        }
        else
        {
          while (v76 != v77)
          {
            int v78 = *v76;
            if (operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v76))
            {
              uint64_t v79 = *v73;
              long long v80 = v73[1];
              while (v79 != v80)
              {
                unsigned int v81 = *v79;
                if (*v79 != v78)
                {
                  if (!operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v79))
                  {
                    uint64_t v82 = *((void *)v5 + 2);
                    long long __p = operator new(0x20uLL);
                    long long v208 = xmmword_23CE7E3F0;
                    strcpy((char *)__p, "circuit: set literal to false.");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v82, (uint64_t)&__p);
                    if (SHIBYTE(v208) < 0) {
                      operator delete(__p);
                    }
                    char v75 = 1;
                  }
                  if (!operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v81))goto LABEL_130; {
                }
                  }
                ++v79;
              }
              break;
            }
            ++v76;
          }
        }
        v73 += 3;
        if (v73 == v74) {
          goto LABEL_103;
        }
      }
    }
    char v75 = 0;
LABEL_103:
    uint64_t v83 = (int **)v209;
    uint64_t v84 = (int **)v210;
    while (v83 != v84)
    {
      char v85 = *v83;
      uint64_t v86 = v83[1];
      if ((char *)v86 - (char *)*v83 == 4)
      {
        if (!operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v85))
        {
          if (!operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)v5 + 2), **v83))goto LABEL_130; {
          ++v72;
          }
        }
      }
      else
      {
        while (v85 != v86)
        {
          int v87 = *v85;
          if (operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v85))
          {
            uint64_t v88 = *v83;
            int v89 = v83[1];
            while (v88 != v89)
            {
              unsigned int v90 = *v88;
              if (*v88 != v87)
              {
                if (!operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v88))
                {
                  uint64_t v91 = *((void *)v5 + 2);
                  long long __p = operator new(0x20uLL);
                  long long v208 = xmmword_23CE7E3F0;
                  strcpy((char *)__p, "circuit: set literal to false.");
                  operations_research::sat::PresolveContext::UpdateRuleStats(v91, (uint64_t)&__p);
                  if (SHIBYTE(v208) < 0) {
                    operator delete(__p);
                  }
                  char v75 = 1;
                }
                if (!operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v90))goto LABEL_130; {
              }
                }
              ++v88;
            }
            break;
          }
          ++v85;
        }
      }
      v83 += 3;
    }
  }
  while ((v75 & 1) != 0);
  if (v72 >= 1)
  {
    uint64_t v92 = *((void *)v5 + 2);
    long long __p = operator new(0x20uLL);
    long long v208 = xmmword_23CE7E3F0;
    strcpy((char *)__p, "circuit: fixed singleton arcs.");
    operations_research::sat::PresolveContext::UpdateRuleStats(v92, (uint64_t)&__p);
    if (SHIBYTE(v208) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v191 = v202;
  if (v202)
  {
    uint64_t v93 = operator new(4 * v202);
    memset(v93, 255, 4 * v202);
    uint64_t v94 = operator new(4 * v202);
    bzero(v94, 4 * v202);
    int v95 = operator new(4 * v202);
    bzero(v95, 4 * v202);
  }
  else
  {
    uint64_t v93 = 0;
    int v95 = 0;
    uint64_t v94 = 0;
  }
  long long v193 = v95;
  unint64_t v200 = v94;
  BOOL v189 = v93;
  if ((int)v197 >= 1)
  {
    uint64_t v108 = 0;
    int v109 = 0;
    int v110 = 0;
    int v111 = -1;
    while (1)
    {
      double v114 = (const char *)*(unsigned int *)(*(void *)(v196 + 72) + v108);
      if (!operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v114))
      {
        BOOL IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), v114);
        uint64_t v116 = *(void *)(v196 + 24);
        int v117 = *(_DWORD *)(v116 + v108);
        if (IsTrue)
        {
          if (v189[v117] != -1) {
            goto LABEL_294;
          }
          uint64_t v112 = *(void *)(v196 + 48);
          v189[v117] = *(_DWORD *)(v112 + v108);
          int v117 = *(_DWORD *)(v116 + v108);
          if (v117 != *(_DWORD *)(v112 + v108)) {
            int v111 = *(_DWORD *)(v116 + v108);
          }
          ++v109;
        }
        else
        {
          uint64_t v112 = *(void *)(v196 + 48);
        }
        ++v193[v117];
        ++v200[*(int *)(v112 + v108)];
        uint64_t v113 = 4 * v110;
        *(_DWORD *)(v116 + v113) = *(_DWORD *)(v116 + v108);
        *(_DWORD *)(v112 + v113) = *(_DWORD *)(v112 + v108);
        *(_DWORD *)(*(void *)(v196 + 72) + v113) = *(_DWORD *)(*(void *)(v196 + 72) + v108);
        ++v110;
      }
      v108 += 4;
      if (4 * v197 == v108) {
        goto LABEL_160;
      }
    }
  }
  int v110 = 0;
  int v109 = 0;
  int v111 = -1;
LABEL_160:
  if ((int)v202 < 1)
  {
LABEL_167:
    int v192 = v110;
    if (v111 == -1)
    {
      if (v109 == v110)
      {
        uint64_t v131 = *((void *)v5 + 2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "circuit: empty circuit.");
        unint64_t v132 = v189;
        uint64_t v133 = v193;
        operations_research::sat::PresolveContext::UpdateRuleStats(v131, (uint64_t)&__p);
        uint64_t v134 = v200;
        if (SHIBYTE(v208) < 0) {
          operator delete(__p);
        }
        operations_research::sat::ConstraintProto::Clear(v194);
        goto LABEL_292;
      }
    }
    else
    {
      LOBYTE(v206[0]) = 0;
      std::vector<BOOL>::vector(&__p, v202, (unsigned __int8 *)v206);
      int v123 = __p;
      int v124 = v111;
      while (1)
      {
        unint64_t v125 = (unint64_t)v124 >> 6;
        uint64_t v126 = v123[v125];
        if ((v126 & (1 << v124)) != 0) {
          break;
        }
        v123[v125] = v126 | (1 << v124);
        int v124 = v189[v124];
        if (v124 == -1)
        {
          int v124 = -1;
          break;
        }
      }
      if (v124 == v111)
      {
        if ((int)v197 >= 1)
        {
          for (uint64_t i = 0; 4 * v197 != i; i += 4)
          {
            unint64_t v128 = *(int *)(*(void *)(v196 + 24) + i);
            if (((*(void *)((char *)__p + ((v128 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v128) & 1) == 0)
            {
              int v129 = (operations_research::sat::PresolveContext *)*((void *)v5 + 2);
              unsigned int v130 = *(_DWORD *)(*(void *)(v196 + 72) + i);
              if (v128 == *(_DWORD *)(*(void *)(v196 + 48) + i))
              {
                if ((operations_research::sat::PresolveContext::SetLiteralToTrue(v129, v130) & 1) == 0) {
                  goto LABEL_190;
                }
              }
              else if (!operations_research::sat::PresolveContext::SetLiteralToFalse(v129, v130))
              {
                goto LABEL_190;
              }
            }
          }
        }
        uint64_t v135 = *((void *)v5 + 2);
        std::string::basic_string[abi:ne180100]<0>(v206, "circuit: fully specified.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v135, (uint64_t)v206);
        if (SHIBYTE(v206[2]) < 0) {
          operator delete(v206[0]);
        }
        operations_research::sat::ConstraintProto::Clear(v194);
      }
LABEL_190:
      if (__p) {
        operator delete(__p);
      }
      int v110 = v192;
      if (v124 == v111)
      {
        uint64_t IsUnsat = 1;
        unint64_t v132 = v189;
        uint64_t v134 = v200;
        uint64_t v133 = v193;
        goto LABEL_296;
      }
    }
    if ((int)v202 >= 1)
    {
      for (uint64_t j = 0; j != v191; ++j)
      {
        uint64_t v137 = 24 * j;
        uint64_t v138 = (unsigned int **)&v212[3 * j];
        unint64_t v139 = (operations_research::sat::ConstraintProto *)v209;
        long long __p = 0;
        long long v208 = 0uLL;
        uint64_t v141 = *v138;
        uint64_t v140 = v138[1];
        uint64_t v203 = j;
        if (*v138 == v140) {
          goto LABEL_242;
        }
        uint64_t v190 = 24 * j;
        long long v195 = (operations_research::sat::ConstraintProto *)v209;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        BOOL v144 = 0;
        long long v205 = v138[1];
        while (1)
        {
          while (1)
          {
            unsigned int v145 = (const char *)*v141;
            if (!operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v145))break; {
            uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
            }
            if (++v141 == v140) {
              goto LABEL_233;
            }
          }
          if (operations_research::sat::PresolveContext::LiteralIsTrue(v198[2], v145)) {
            break;
          }
          if (v144 >= v143)
          {
            uint64_t v146 = (v144 - v142) >> 2;
            unint64_t v147 = v146 + 1;
            if ((unint64_t)(v146 + 1) >> 62) {
LABEL_304:
            }
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if ((v143 - v142) >> 1 > v147) {
              unint64_t v147 = (v143 - v142) >> 1;
            }
            if ((unint64_t)(v143 - v142) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v148 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v148 = v147;
            }
            if (v148)
            {
              if (v148 >> 62) {
LABEL_305:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              unsigned int v149 = operator new(4 * v148);
              uint64_t v150 = &v149[4 * v146];
              *uint64_t v150 = v145;
              uint64_t v151 = (uint64_t)(v150 + 1);
              if (v144 == v142)
              {
LABEL_224:
                uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
                uint64_t v143 = &v149[4 * v148];
                long long __p = v150;
                *(void *)&long long v208 = v151;
                *((void *)&v208 + 1) = v143;
                if (!v142) {
                  goto LABEL_221;
                }
LABEL_220:
                operator delete(v142);
                goto LABEL_221;
              }
            }
            else
            {
              unsigned int v149 = 0;
              uint64_t v150 = (_DWORD *)(4 * v146);
              *(_DWORD *)(4 * v146) = v145;
              uint64_t v151 = 4 * v146 + 4;
              if (v144 == v142) {
                goto LABEL_224;
              }
            }
            unint64_t v152 = v144 - 4 - v142;
            if (v152 < 0xBC
              || &v149[v144 - v142 - 4 - (v152 & 0xFFFFFFFFFFFFFFFCLL)] > &v149[v144 - v142 - 4]
              || &v144[-(v152 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v144 - 4
              || (unint64_t)(v142 - v149) < 0x20)
            {
              BOOL v153 = v144;
              uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
              do
              {
LABEL_218:
                int v154 = *((_DWORD *)v153 - 1);
                v153 -= 4;
                *--uint64_t v150 = v154;
              }
              while (v153 != v142);
              goto LABEL_219;
            }
            uint64_t v155 = (v152 >> 2) + 1;
            uint64_t v156 = 4 * (v155 & 0x7FFFFFFFFFFFFFF8);
            BOOL v153 = &v144[-v156];
            uint64_t v150 = (_DWORD *)((char *)v150 - v156);
            int v157 = &v149[4 * v146 - 16];
            unint64_t v158 = v144 - 16;
            uint64_t v159 = v155 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v160 = *(_OWORD *)v158;
              *(v157 - 1) = *((_OWORD *)v158 - 1);
              *int v157 = v160;
              v157 -= 2;
              v158 -= 32;
              v159 -= 8;
            }
            while (v159);
            uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
            if (v155 != (v155 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_218;
            }
LABEL_219:
            uint64_t v143 = &v149[4 * v148];
            long long __p = v150;
            *(void *)&long long v208 = v151;
            *((void *)&v208 + 1) = v143;
            if (v142) {
              goto LABEL_220;
            }
LABEL_221:
            uint64_t v142 = (char *)v150;
            uint64_t v140 = v205;
            *(void *)&long long v208 = v151;
            BOOL v144 = (char *)v151;
            if (++v141 == v205)
            {
LABEL_233:
              unint64_t v161 = (unsigned int *)__p;
              goto LABEL_235;
            }
          }
          else
          {
            *(_DWORD *)BOOL v144 = v145;
            v144 += 4;
            uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
            *(void *)&long long v208 = v144;
            if (++v141 == v140) {
              goto LABEL_233;
            }
          }
        }
        unint64_t v161 = (unsigned int *)__p;
        BOOL v144 = (char *)__p;
        uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
LABEL_235:
        int v110 = v192;
        unint64_t v139 = v195;
        uint64_t v137 = v190;
        if (v144 - (char *)v161 == 8)
        {
          uint64_t j = v203;
          if (*v161 != ~v161[1])
          {
            uint64_t v162 = *((void *)v5 + 2);
            HIBYTE(v206[2]) = 17;
            strcpy((char *)v206, "circuit: degree 2");
            operations_research::sat::PresolveContext::UpdateRuleStats(v162, (uint64_t)v206);
            if (SHIBYTE(v206[2]) < 0) {
              operator delete(v206[0]);
            }
            operations_research::sat::PresolveContext::StoreBooleanEqualityRelation(*((void *)v5 + 2), (const char *)*v161, (const char *)~v161[1]);
          }
LABEL_241:
          operator delete(v161);
        }
        else
        {
          uint64_t j = v203;
          if (v161) {
            goto LABEL_241;
          }
        }
LABEL_242:
        long long __p = 0;
        long long v208 = 0uLL;
        uint64_t v163 = *(unsigned int **)((char *)v139 + v137);
        BOOL v164 = (unsigned int *)*((void *)v139 + 3 * j + 1);
        if (v163 == v164) {
          continue;
        }
        unint64_t v165 = 0;
        long long v166 = 0;
        while (2)
        {
          while (1)
          {
            char v167 = (const char *)*v163;
            if (!operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v167))break; {
            uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
            }
            if (++v163 == v164) {
              goto LABEL_275;
            }
          }
          if (!operations_research::sat::PresolveContext::LiteralIsTrue(v198[2], v167))
          {
            if (v166 < v165)
            {
              *(_DWORD *)long long v166 = v167;
              uint64_t v168 = (uint64_t)(v166 + 4);
              uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
              goto LABEL_263;
            }
            uint64_t v169 = (char *)__p;
            int64_t v170 = v166 - (unsigned char *)__p;
            uint64_t v171 = (v166 - (unsigned char *)__p) >> 2;
            unint64_t v172 = v171 + 1;
            if ((unint64_t)(v171 + 1) >> 62) {
              goto LABEL_304;
            }
            if ((v165 - (unsigned char *)__p) >> 1 > v172) {
              unint64_t v172 = (v165 - (unsigned char *)__p) >> 1;
            }
            if ((unint64_t)(v165 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v173 = v172;
            }
            if (v173)
            {
              if (v173 >> 62) {
                goto LABEL_305;
              }
              char v174 = operator new(4 * v173);
              int v175 = &v174[4 * v171];
              *int v175 = v167;
              uint64_t v168 = (uint64_t)(v175 + 1);
              if (v166 != v169)
              {
LABEL_258:
                unint64_t v176 = v166 - 4 - v169;
                if (v176 < 0xBC
                  || &v174[v170 - 4 - (v176 & 0xFFFFFFFFFFFFFFFCLL)] > &v174[v170 - 4]
                  || &v166[-(v176 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v166 - 4
                  || (unint64_t)(v166 - v174 - v170) < 0x20)
                {
                  uint64_t v177 = v166;
                  uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
                }
                else
                {
                  uint64_t v179 = (v176 >> 2) + 1;
                  uint64_t v180 = 4 * (v179 & 0x7FFFFFFFFFFFFFF8);
                  uint64_t v177 = &v166[-v180];
                  int v175 = (_DWORD *)((char *)v175 - v180);
                  BOOL v181 = &v174[4 * v171 - 16];
                  long long v182 = v166 - 16;
                  uint64_t v183 = v179 & 0x7FFFFFFFFFFFFFF8;
                  uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
                  do
                  {
                    long long v184 = *(_OWORD *)v182;
                    *(v181 - 1) = *((_OWORD *)v182 - 1);
                    *BOOL v181 = v184;
                    v181 -= 2;
                    v182 -= 32;
                    v183 -= 8;
                  }
                  while (v183);
                  if (v179 == (v179 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_261:
                    unint64_t v165 = &v174[4 * v173];
                    long long __p = v175;
                    *((void *)&v208 + 1) = v165;
                    if (v169) {
                      goto LABEL_262;
                    }
                    goto LABEL_263;
                  }
                }
                do
                {
                  int v178 = *((_DWORD *)v177 - 1);
                  v177 -= 4;
                  *--int v175 = v178;
                }
                while (v177 != v169);
                goto LABEL_261;
              }
            }
            else
            {
              char v174 = 0;
              int v175 = (_DWORD *)(4 * v171);
              *(_DWORD *)(4 * v171) = v167;
              uint64_t v168 = 4 * v171 + 4;
              if (v166 != v169) {
                goto LABEL_258;
              }
            }
            uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
            unint64_t v165 = &v174[4 * v173];
            long long __p = v175;
            *((void *)&v208 + 1) = v165;
            if (v169) {
LABEL_262:
            }
              operator delete(v169);
LABEL_263:
            *(void *)&long long v208 = v168;
            long long v166 = (char *)v168;
            if (++v163 == v164)
            {
LABEL_275:
              uint64_t v185 = (unsigned int *)__p;
              goto LABEL_277;
            }
            continue;
          }
          break;
        }
        uint64_t v185 = (unsigned int *)__p;
        long long v166 = (char *)__p;
        uint64_t v5 = (operations_research::sat::CpModelPresolver *)v198;
LABEL_277:
        int v110 = v192;
        if (v166 - (char *)v185 == 8)
        {
          uint64_t j = v203;
          if (*v185 != ~v185[1])
          {
            uint64_t v186 = *((void *)v5 + 2);
            HIBYTE(v206[2]) = 17;
            strcpy((char *)v206, "circuit: degree 2");
            operations_research::sat::PresolveContext::UpdateRuleStats(v186, (uint64_t)v206);
            if (SHIBYTE(v206[2]) < 0) {
              operator delete(v206[0]);
            }
            operations_research::sat::PresolveContext::StoreBooleanEqualityRelation(*((void *)v5 + 2), (const char *)*v185, (const char *)~v185[1]);
          }
LABEL_197:
          operator delete(v185);
        }
        else
        {
          uint64_t j = v203;
          if (v185) {
            goto LABEL_197;
          }
        }
      }
    }
    uint64_t v134 = v200;
    if (v110 >= (int)v197)
    {
      uint64_t IsUnsat = 0;
      unint64_t v132 = v189;
      uint64_t v133 = v193;
      goto LABEL_296;
    }
    unint64_t v132 = v189;
    uint64_t v133 = v193;
    if (*(int *)(v196 + 16) >= 1) {
      *(_DWORD *)(v196 + 16) = v110;
    }
    if (*(int *)(v196 + 40) >= 1) {
      *(_DWORD *)(v196 + 40) = v110;
    }
    if (*(int *)(v196 + 64) >= 1) {
      *(_DWORD *)(v196 + 64) = v110;
    }
    uint64_t v187 = *((void *)v5 + 2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "circuit: removed false arcs.");
    operations_research::sat::PresolveContext::UpdateRuleStats(v187, (uint64_t)&__p);
    if (SHIBYTE(v208) < 0) {
      operator delete(__p);
    }
LABEL_292:
    uint64_t IsUnsat = 1;
    goto LABEL_296;
  }
  double v118 = v212 + 1;
  uint64_t v119 = v209 + 1;
  uint64_t v120 = v202;
  uint64_t v121 = v193;
  unint64_t v122 = v200;
  while (*(v118 - 1) == *v118 && *(v119 - 1) == *v119 || *v122 && *v121)
  {
    v118 += 3;
    v119 += 3;
    ++v122;
    ++v121;
    if (!--v120) {
      goto LABEL_167;
    }
  }
LABEL_294:
  uint64_t v188 = *((void *)v5 + 2);
  HIBYTE(v208) = 0;
  LOBYTE(__p) = 0;
  uint64_t IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v188, (uint64_t)&__p);
  unint64_t v132 = v189;
  uint64_t v134 = v200;
  uint64_t v133 = v193;
  if (SHIBYTE(v208) < 0) {
    operator delete(__p);
  }
LABEL_296:
  if (v133) {
    operator delete(v133);
  }
  if (v134) {
    operator delete(v134);
  }
  if (v132) {
    operator delete(v132);
  }
LABEL_131:
  int v96 = v209;
  if (v209)
  {
    uint64_t v97 = v210;
    uint64_t v98 = v209;
    if (v210 != v209)
    {
      uint64_t v99 = v210;
      do
      {
        uint64_t v101 = (void *)*(v99 - 3);
        v99 -= 3;
        uint64_t v100 = v101;
        if (v101)
        {
          *(v97 - 2) = v100;
          operator delete(v100);
        }
        uint64_t v97 = v99;
      }
      while (v99 != v96);
      uint64_t v98 = v209;
    }
    v210 = v96;
    operator delete(v98);
  }
  uint64_t v102 = v212;
  if (v212)
  {
    uint64_t v103 = v213;
    int v104 = v212;
    if (v213 != v212)
    {
      int v105 = v213;
      do
      {
        uint64_t v107 = (void *)*(v105 - 3);
        v105 -= 3;
        unint64_t v106 = v107;
        if (v107)
        {
          *(v103 - 2) = v106;
          operator delete(v106);
        }
        uint64_t v103 = v105;
      }
      while (v105 != v102);
      int v104 = v212;
    }
    v213 = v102;
    operator delete(v104);
  }
  return IsUnsat;
}

void sub_23CC57DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (__p)
  {
    operator delete(__p);
    if (!a19)
    {
LABEL_3:
      if (!a10)
      {
LABEL_8:
        std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v35 - 136));
        std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v35 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a10);
      std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v35 - 136));
      std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v35 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!a19)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if (!a10) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void **std::vector<BOOL>::vector(void **a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = ((a2 - 1) >> 6) + 1;
    *a1 = operator new(8 * v6);
    a1[1] = 0;
    a1[2] = (void *)v6;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](a1, a2, *a3);
  }
  return a1;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveAutomaton(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  if (*(unsigned char *)(*((void *)this + 2) + 504) || *((_DWORD *)a2 + 4)) {
    return 0;
  }
  uint64_t v5 = this;
  if (*((_DWORD *)a2 + 15) == 17)
  {
    uint64_t v6 = *((void *)a2 + 6);
    if (!*(_DWORD *)(v6 + 112)) {
      return 0;
    }
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 17;
    uint64_t v7 = *((void *)a2 + 1);
    uint64_t v8 = (google::protobuf::Arena **)(v7 & 0xFFFFFFFFFFFFFFFELL);
    if (v7)
    {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(*v8);
      uint64_t v6 = v154;
      *((void *)a2 + 6) = v154;
      if (!*(_DWORD *)(v154 + 112)) {
        return 0;
      }
    }
    else
    {
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>((google::protobuf::Arena *)v8);
      uint64_t v6 = v9;
      *((void *)a2 + 6) = v9;
      if (!*(_DWORD *)(v9 + 112)) {
        return 0;
      }
    }
  }
  if (!*(_DWORD *)(v6 + 88)) {
    return 0;
  }
  signed int v10 = 0;
  uint64_t v11 = 0;
  unint64_t v172 = 0;
  unint64_t v173 = 0;
  char v174 = 0;
  int v157 = (operations_research::sat::PresolveContext **)v5;
  while (1)
  {
    int v13 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
    if (*((_DWORD *)a2 + 15) == 17) {
      int v13 = (uint64_t *)*((void *)a2 + 6);
    }
    int v14 = *(_DWORD *)(v13[15] + 4 * v11);
    int v15 = ~v14 <= v14 ? *(_DWORD *)(v13[15] + 4 * v11) : ~v14;
    operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)v5 + 2), v15, (uint64_t)v171);
    if (v10 >= v174)
    {
      unint64_t v17 = v172;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v172) >> 3);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((v174 - v172) >> 3) > v19) {
        unint64_t v19 = 0x5555555555555556 * ((v174 - v172) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v174 - v172) >> 3) >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20)
      {
        if (v20 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(24 * v20);
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = &v21[8 * ((v10 - v17) >> 3)];
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v171;
      *((void *)v22 + 2) = *(void *)&v171[16];
      if (v10 == v17)
      {
        uint64_t v25 = v10;
        signed int v10 = v22 + 24;
        unint64_t v172 = &v21[24 * v18];
        unint64_t v173 = v22 + 24;
        char v174 = &v21[24 * v20];
        uint64_t v5 = (operations_research::sat::CpModelPresolver *)v157;
        if (!v25) {
          goto LABEL_35;
        }
LABEL_34:
        operator delete(v25);
        goto LABEL_35;
      }
      unint64_t v23 = &v21[24 * v18];
      do
      {
        long long v24 = *(_OWORD *)(v10 - 24);
        *((void *)v23 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v23 - 24) = v24;
        v23 -= 24;
        v10 -= 24;
      }
      while (v10 != v17);
      uint64_t v25 = v172;
      signed int v10 = v22 + 24;
      unint64_t v172 = v23;
      unint64_t v173 = v22 + 24;
      char v174 = &v21[24 * v20];
      uint64_t v5 = (operations_research::sat::CpModelPresolver *)v157;
      if (v25) {
        goto LABEL_34;
      }
    }
    else
    {
      long long v16 = *(_OWORD *)v171;
      *((void *)v10 + 2) = *(void *)&v171[16];
      *(_OWORD *)signed int v10 = v16;
      v10 += 24;
      uint64_t v5 = (operations_research::sat::CpModelPresolver *)v157;
    }
LABEL_35:
    unint64_t v173 = v10;
    if (*(_DWORD *)v171 == v14 || v11 && *(_OWORD *)&v171[8] != *(_OWORD *)&v172[24 * (v11 - 1) + 8]) {
      break;
    }
    ++v11;
    uint64_t v12 = *(int *)(v6 + 112);
    if (v11 >= v12)
    {
      uint64_t v32 = v172;
      if ((int)v12 >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v34 = *(void *)(v6 + 120);
        uint64_t v35 = v172;
        do
        {
          int v36 = *(_DWORD *)v35;
          v35 += 24;
          *(_DWORD *)(v34 + 4 * v33++) = v36;
        }
        while (v33 < *(int *)(v6 + 112));
      }
      uint64_t v37 = *(unsigned int *)(v6 + 40);
      if ((int)v37 >= 1)
      {
        uint64_t v38 = 0;
        int v39 = 0;
        uint64_t v40 = *((void *)v32 + 1);
        uint64_t v41 = *((void *)v32 + 2);
        uint64_t v42 = *(void *)(v6 + 96);
        do
        {
          uint64_t v45 = *(void *)(v42 + 8 * v38);
          uint64_t v46 = (v45 - v41) / v40;
          if (v41 + v46 * v40 == v45)
          {
            if (v38 == v39)
            {
              uint64_t v44 = v39;
            }
            else
            {
              uint64_t v43 = 8 * v39;
              *(void *)(*(void *)(v6 + 48) + v43) = *(void *)(*(void *)(v6 + 48) + 8 * v38);
              uint64_t v44 = v39;
              *(void *)(*(void *)(v6 + 72) + v43) = *(void *)(*(void *)(v6 + 72) + 8 * v38);
            }
            *(void *)(v42 + 8 * v44) = v46;
            ++v39;
          }
          ++v38;
        }
        while (v37 != v38);
        if (v39 < (int)v37)
        {
          *(_DWORD *)(v6 + 40) = v39;
          if (*(int *)(v6 + 88) >= 1) {
            *(_DWORD *)(v6 + 88) = v39;
          }
          if (*(int *)(v6 + 64) >= 1) {
            *(_DWORD *)(v6 + 64) = v39;
          }
          uint64_t v71 = *((void *)v5 + 2);
          *(void *)uint64_t v171 = operator new(0x28uLL);
          *(_OWORD *)&v171[8] = xmmword_23CE7EC80;
          strcpy(*(char **)v171, "automaton: remove invalid transitions");
          operations_research::sat::PresolveContext::UpdateRuleStats(v71, (uint64_t)v171);
          if ((v171[23] & 0x80000000) != 0) {
            operator delete(*(void **)v171);
          }
        }
      }
      uint64_t v72 = *((void *)v5 + 2);
      *(void *)uint64_t v171 = operator new(0x28uLL);
      *(_OWORD *)&v171[8] = xmmword_23CE7FBD0;
      strcpy(*(char **)v171, "automaton: unscale all affine labels");
      operations_research::sat::PresolveContext::UpdateRuleStats(v72, (uint64_t)v171);
      if ((v171[23] & 0x80000000) != 0) {
        operator delete(*(void **)v171);
      }
      uint64_t v3 = 1;
      goto LABEL_219;
    }
  }
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)**(unsigned int **)(v6 + 120), (unint64_t *)v171);
  if (*(int *)(v6 + 112) > 1)
  {
    uint64_t v26 = 1;
    do
    {
      operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*(unsigned int *)(*(void *)(v6 + 120) + 4 * v26), (unint64_t *)&v166);
      operations_research::Domain::UnionWith((operations_research::Domain *)v171, (const operations_research::Domain *)&v166, (unint64_t *)&v169);
      if (v171[0]) {
        operator delete(*(void **)&v171[8]);
      }
      *(void *)uint64_t v171 = v169;
      *(_OWORD *)&v171[8] = v170;
      uint64_t v169 = 0;
      if (v166) {
        operator delete(__p);
      }
      ++v26;
    }
    while (v26 < *(int *)(v6 + 112));
  }
  LODWORD(v27) = *(_DWORD *)(v6 + 40);
  if ((int)v27 < 1)
  {
    int v29 = 0;
  }
  else
  {
    uint64_t v28 = 0;
    int v29 = 0;
    do
    {
      uint64_t v30 = *(void *)(*(void *)(v6 + 96) + 8 * v28);
      if (operations_research::Domain::Contains((operations_research::Domain *)v171, v30))
      {
        if (v28 != v29)
        {
          uint64_t v31 = 8 * v29;
          *(void *)(*(void *)(v6 + 48) + v31) = *(void *)(*(void *)(v6 + 48) + 8 * v28);
          *(void *)(*(void *)(v6 + 96) + v31) = v30;
          *(void *)(*(void *)(v6 + 72) + v31) = *(void *)(*(void *)(v6 + 72) + 8 * v28);
        }
        ++v29;
      }
      ++v28;
      uint64_t v27 = *(int *)(v6 + 40);
    }
    while (v28 < v27);
  }
  if (v29 < (int)v27)
  {
    if ((int)v27 >= 1) {
      *(_DWORD *)(v6 + 40) = v29;
    }
    if (*(int *)(v6 + 88) >= 1) {
      *(_DWORD *)(v6 + 88) = v29;
    }
    if (*(int *)(v6 + 64) >= 1) {
      *(_DWORD *)(v6 + 64) = v29;
    }
    uint64_t v47 = *((void *)v5 + 2);
    uint64_t v169 = operator new(0x28uLL);
    long long v170 = xmmword_23CE7EC80;
    strcpy((char *)v169, "automaton: remove invalid transitions");
    operations_research::sat::PresolveContext::UpdateRuleStats(v47, (uint64_t)&v169);
    if (SHIBYTE(v170) < 0)
    {
      long long v48 = v169;
      goto LABEL_215;
    }
    goto LABEL_216;
  }
  uint64_t v49 = *(int *)(v6 + 112);
  uint64_t v50 = *(unsigned int *)(v6 + 112);
  uint64_t v51 = *(const void **)(v6 + 120);
  long long v170 = 0uLL;
  uint64_t v169 = 0;
  if (v49)
  {
    if ((v50 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v52 = (char *)operator new(4 * v49);
    unint64_t v53 = &v52[4 * v49];
    uint64_t v169 = v52;
    *((void *)&v170 + 1) = v53;
    memcpy(v52, v51, 4 * v49);
    *(void *)&long long v170 = v53;
  }
  long long v166 = 0;
  long long __p = 0;
  uint64_t v168 = 0;
  size_t v54 = 24 * (v50 + 1);
  uint64_t v55 = (uint64_t **)operator new(v54);
  uint64_t v56 = v55;
  unint64_t v57 = 0;
  long long v166 = v55;
  uint64_t v168 = &v55[v54 / 8];
  do
  {
    uint64_t v58 = &v55[v57 / 8];
    v58[2] = 0;
    v55[v57 / 8 + 1] = 0;
    *uint64_t v58 = (uint64_t *)&v55[v57 / 8 + 1];
    v57 += 24;
  }
  while (v54 != v57);
  long long __p = &v55[v54 / 8];
  uint64_t v59 = *(void *)(v6 + 136);
  uint64_t v61 = v55 + 1;
  int v60 = v55[1];
  if (v60)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v62 = (uint64_t **)v60;
        uint64_t v63 = v60[4];
        if (v59 >= v63) {
          break;
        }
        int v60 = *v62;
        uint64_t v61 = v62;
        if (!*v62) {
          goto LABEL_88;
        }
      }
      if (v63 >= v59) {
        break;
      }
      int v60 = v62[1];
      if (!v60)
      {
        uint64_t v61 = v62 + 1;
        goto LABEL_88;
      }
    }
  }
  else
  {
    unint64_t v62 = v55 + 1;
LABEL_88:
    uint64_t v64 = (uint64_t *)operator new(0x28uLL);
    v64[4] = v59;
    *uint64_t v64 = 0;
    v64[1] = 0;
    v64[2] = (uint64_t)v62;
    *uint64_t v61 = v64;
    uint64_t v65 = (uint64_t *)**v56;
    if (v65)
    {
      *uint64_t v56 = v65;
      uint64_t v64 = *v61;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v56[1], v64);
    v56[2] = (uint64_t *)((char *)v56[2] + 1);
  }
  std::set<long long>::set[abi:ne180100]<long long const*>((void **)&v163, *(uint64_t **)(v6 + 24), (uint64_t *)(*(void *)(v6 + 24) + 8 * *(int *)(v6 + 16)));
  uint64_t v66 = (char *)v166 + 24 * (int)v49;
  int v67 = v66 + 8;
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v66, *((void **)v66 + 1));
  *(void *)uint64_t v66 = v163;
  uint64_t v68 = v164;
  *((void *)v66 + 1) = v164;
  uint64_t v69 = v165;
  *((void *)v66 + 2) = v165;
  uint64_t v156 = v49;
  if (v69)
  {
    long long v70 = 0;
    v68[2] = v67;
    uint64_t v163 = &v164;
    BOOL v164 = 0;
    unint64_t v165 = 0;
  }
  else
  {
    *(void *)uint64_t v66 = v67;
    long long v70 = v164;
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v163, v70);
  int v155 = v50;
  if ((int)v50 < 2)
  {
LABEL_133:
    uint64_t v163 = 0;
    BOOL v164 = 0;
    unint64_t v165 = 0;
    uint64_t v94 = v156;
    if (!v155) {
      goto LABEL_204;
    }
    if ((v156 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
  }
  else
  {
    LODWORD(v73) = *(_DWORD *)(v6 + 40);
    if ((int)v73 > 0)
    {
      uint64_t v74 = 0;
      uint64_t v75 = 1;
      do
      {
        if ((int)v73 >= 1 && *((void *)v166 + 3 * v74 + 1))
        {
          uint64_t v76 = 0;
          do
          {
            uint64_t v77 = (char *)v166 + 24 * v74;
            long long v80 = (void *)*((void *)v77 + 1);
            int v78 = v77 + 8;
            uint64_t v79 = v80;
            if (v80)
            {
              uint64_t v81 = *(void *)(*(void *)(v6 + 48) + 8 * v76);
              uint64_t v82 = *(void *)(*(void *)(v6 + 72) + 8 * v76);
              uint64_t v83 = v78;
              do
              {
                uint64_t v84 = v79[4];
                BOOL v85 = v84 < v81;
                if (v84 >= v81) {
                  uint64_t v86 = v79;
                }
                else {
                  uint64_t v86 = v79 + 1;
                }
                if (!v85) {
                  uint64_t v83 = (char *)v79;
                }
                uint64_t v79 = (void *)*v86;
              }
              while (*v86);
              if (v83 != v78
                && v81 >= *((void *)v83 + 4)
                && operations_research::sat::PresolveContext::DomainContains(v157[2], *((_DWORD *)v169 + v74), *(void *)(*(void *)(v6 + 96) + 8 * v76)))
              {
                int v87 = (char *)v166 + 24 * v75;
                int v89 = (uint64_t **)(v87 + 8);
                uint64_t v88 = (uint64_t *)*((void *)v87 + 1);
                if (v88)
                {
                  while (1)
                  {
                    while (1)
                    {
                      unsigned int v90 = (uint64_t **)v88;
                      uint64_t v91 = v88[4];
                      if (v82 >= v91) {
                        break;
                      }
                      uint64_t v88 = *v90;
                      int v89 = v90;
                      if (!*v90) {
                        goto LABEL_131;
                      }
                    }
                    if (v91 >= v82) {
                      break;
                    }
                    uint64_t v88 = v90[1];
                    if (!v88)
                    {
                      int v89 = v90 + 1;
                      goto LABEL_131;
                    }
                  }
                }
                else
                {
                  unsigned int v90 = (uint64_t **)(v87 + 8);
LABEL_131:
                  uint64_t v92 = (uint64_t *)operator new(0x28uLL);
                  v92[4] = v82;
                  *uint64_t v92 = 0;
                  v92[1] = 0;
                  v92[2] = (uint64_t)v90;
                  int *v89 = v92;
                  uint64_t v93 = **(void **)v87;
                  if (v93)
                  {
                    *(void *)int v87 = v93;
                    uint64_t v92 = *v89;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v87 + 1), v92);
                  ++*((void *)v87 + 2);
                }
              }
            }
            ++v76;
            uint64_t v73 = *(int *)(v6 + 40);
          }
          while (v76 < v73);
        }
        ++v74;
        ++v75;
      }
      while (v74 != v50 - 1);
      goto LABEL_133;
    }
    uint64_t v163 = 0;
    BOOL v164 = 0;
    unint64_t v165 = 0;
    uint64_t v94 = v49;
  }
  uint64_t v95 = 24 * v94;
  uint64_t v163 = operator new(24 * v94);
  BOOL v164 = v163;
  int v96 = (char *)v163 + 24 * v94;
  unint64_t v165 = v96;
  uint64_t v97 = (char *)v163 + 8;
  do
  {
    *uint64_t v97 = 0;
    v97[1] = 0;
    *(v97 - 1) = v97;
    v97 += 3;
    v95 -= 24;
  }
  while (v95);
  BOOL v164 = v96;
  if ((int)v94 < 1) {
    goto LABEL_204;
  }
  while (2)
  {
    uint64_t v100 = v94 - 1;
    unint64_t v161 = 0;
    uint64_t v162 = 0;
    long long v160 = &v161;
    uint64_t v101 = v166;
    if (*(int *)(v6 + 40) < 1)
    {
      uint64_t v102 = 0;
      goto LABEL_148;
    }
    uint64_t v102 = *((void *)v166 + 3 * v100 + 1);
    if (!v102)
    {
LABEL_148:
      int v104 = &v161;
      goto LABEL_192;
    }
    uint64_t v103 = 0;
    do
    {
      int v105 = (char *)v166 + 24 * v100;
      uint64_t v108 = (void *)*((void *)v105 + 1);
      unint64_t v106 = v105 + 8;
      uint64_t v107 = v108;
      if (v108)
      {
        uint64_t v109 = *(void *)(*(void *)(v6 + 48) + 8 * v103);
        uint64_t v110 = *(void *)(*(void *)(v6 + 96) + 8 * v103);
        uint64_t v111 = *(void *)(*(void *)(v6 + 72) + 8 * v103);
        uint64_t v112 = v106;
        do
        {
          uint64_t v113 = v107[4];
          BOOL v114 = v113 < v109;
          if (v113 >= v109) {
            uint64_t v115 = v107;
          }
          else {
            uint64_t v115 = v107 + 1;
          }
          if (!v114) {
            uint64_t v112 = (char *)v107;
          }
          uint64_t v107 = (void *)*v115;
        }
        while (*v115);
        if (v112 != v106
          && v109 >= *((void *)v112 + 4)
          && operations_research::sat::PresolveContext::DomainContains(v157[2], *((_DWORD *)v169 + v100), *(void *)(*(void *)(v6 + 96) + 8 * v103)))
        {
          uint64_t v116 = (char *)v166 + 24 * v94;
          uint64_t v119 = (void *)*((void *)v116 + 1);
          int v117 = v116 + 8;
          double v118 = v119;
          if (v119)
          {
            uint64_t v120 = v117;
            do
            {
              uint64_t v121 = v118[4];
              BOOL v122 = v121 < v111;
              if (v121 >= v111) {
                int v123 = v118;
              }
              else {
                int v123 = v118 + 1;
              }
              if (!v122) {
                uint64_t v120 = (char *)v118;
              }
              double v118 = (void *)*v123;
            }
            while (*v123);
            if (v120 != v117 && v111 >= *((void *)v120 + 4))
            {
              int v124 = (void **)v161;
              unint64_t v125 = &v161;
              uint64_t v126 = &v161;
              if (v161)
              {
                while (1)
                {
                  while (1)
                  {
                    uint64_t v126 = v124;
                    size_t v127 = v124[4];
                    if (v109 >= (uint64_t)v127) {
                      break;
                    }
                    int v124 = (void **)*v126;
                    unint64_t v125 = v126;
                    if (!*v126) {
                      goto LABEL_179;
                    }
                  }
                  if ((uint64_t)v127 >= v109) {
                    break;
                  }
                  int v124 = (void **)v126[1];
                  if (!v124)
                  {
                    unint64_t v125 = v126 + 1;
                    goto LABEL_179;
                  }
                }
              }
              else
              {
LABEL_179:
                unint64_t v128 = (uint64_t *)operator new(0x28uLL);
                v128[4] = v109;
                *unint64_t v128 = 0;
                v128[1] = 0;
                v128[2] = (uint64_t)v126;
                const operations_research::Domain *v125 = v128;
                if (*(void *)v160)
                {
                  long long v160 = *(void **)v160;
                  unint64_t v128 = (uint64_t *)*v125;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v161, v128);
                ++v162;
              }
              int v129 = (char *)v163 + 24 * v100;
              uint64_t v131 = (uint64_t **)(v129 + 8);
              unsigned int v130 = (uint64_t *)*((void *)v129 + 1);
              if (v130)
              {
                while (1)
                {
                  while (1)
                  {
                    unint64_t v132 = (uint64_t **)v130;
                    uint64_t v133 = v130[4];
                    if (v110 >= v133) {
                      break;
                    }
                    unsigned int v130 = *v132;
                    uint64_t v131 = v132;
                    if (!*v132) {
                      goto LABEL_189;
                    }
                  }
                  if (v133 >= v110) {
                    break;
                  }
                  unsigned int v130 = v132[1];
                  if (!v130)
                  {
                    uint64_t v131 = v132 + 1;
                    goto LABEL_189;
                  }
                }
              }
              else
              {
                unint64_t v132 = (uint64_t **)(v129 + 8);
LABEL_189:
                uint64_t v134 = (uint64_t *)operator new(0x28uLL);
                v134[4] = v110;
                *uint64_t v134 = 0;
                v134[1] = 0;
                v134[2] = (uint64_t)v132;
                *uint64_t v131 = v134;
                uint64_t v135 = **(void **)v129;
                if (v135)
                {
                  *(void *)int v129 = v135;
                  uint64_t v134 = *v131;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v129 + 1), v134);
                ++*((void *)v129 + 2);
              }
            }
          }
        }
      }
      ++v103;
    }
    while (v103 < *(int *)(v6 + 40));
    uint64_t v101 = v166;
    int v104 = v160;
    uint64_t v102 = v162;
LABEL_192:
    uint64_t v136 = (uint64_t)v101 + 24 * v100;
    uint64_t v137 = *(void **)v136;
    *(void *)uint64_t v136 = v104;
    long long v160 = v137;
    uint64_t v138 = (void *)(v136 + 8);
    unint64_t v139 = *(void **)(v136 + 8);
    *(void *)(v136 + 8) = v161;
    unint64_t v161 = v139;
    uint64_t v140 = *(void *)(v136 + 16);
    *(void *)(v136 + 16) = v102;
    uint64_t v162 = v140;
    if (*(void *)(v136 + 16)) {
      uint64_t v136 = *v138 + 16;
    }
    *(void *)uint64_t v136 = v138;
    uint64_t v98 = v161;
    uint64_t v99 = (void **)((char *)v161 + 16);
    if (!v140) {
      uint64_t v99 = &v160;
    }
    *uint64_t v99 = &v161;
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v160, v98);
    BOOL v85 = v94-- <= 1;
    if (!v85) {
      continue;
    }
    break;
  }
  uint64_t v141 = 0;
  BOOL v159 = 0;
  uint64_t v142 = (unsigned int *)v169;
  while (1)
  {
    uint64_t v143 = v157[2];
    unsigned int v144 = *v142++;
    std::vector<long long>::vector<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,0>(v158, *(void **)((char *)v163 + v141), (char *)v163 + v141 + 8);
    operations_research::Domain::FromValues((int64_t **)v158, (unint64_t *)&v160);
    char v145 = operations_research::sat::PresolveContext::IntersectDomainWith(v143, (const char *)v144, (const operations_research::Domain *)&v160, &v159);
    if (v160) {
      operator delete(v161);
    }
    if (v158[0])
    {
      v158[1] = v158[0];
      operator delete(v158[0]);
    }
    if ((v145 & 1) == 0) {
      break;
    }
    v141 += 24;
    if (24 * v156 == v141)
    {
      if (v159)
      {
        uint64_t v146 = (uint64_t)v157[2];
        std::string::basic_string[abi:ne180100]<0>(&v160, "automaton: reduced variable domains");
        operations_research::sat::PresolveContext::UpdateRuleStats(v146, (uint64_t)&v160);
        if (SHIBYTE(v162) < 0) {
          operator delete(v160);
        }
      }
      break;
    }
  }
LABEL_204:
  unint64_t v147 = v163;
  if (v163)
  {
    unint64_t v148 = v164;
    unsigned int v149 = v163;
    if (v164 != v163)
    {
      do
      {
        uint64_t v150 = v148 - 3;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v148 - 3), (void *)*(v148 - 2));
        unint64_t v148 = v150;
      }
      while (v150 != v147);
      unsigned int v149 = v163;
    }
    BOOL v164 = v147;
    operator delete(v149);
  }
  uint64_t v151 = (char *)v166;
  if (v166)
  {
    unint64_t v152 = (char *)__p;
    if (__p != v166)
    {
      do
      {
        BOOL v153 = v152 - 24;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v152 - 24), *((void **)v152 - 2));
        unint64_t v152 = v153;
      }
      while (v153 != v151);
      uint64_t v151 = (char *)v166;
    }
    operator delete(v151);
  }
  long long v48 = v169;
  if (v169) {
LABEL_215:
  }
    operator delete(v48);
LABEL_216:
  if (v171[0]) {
    operator delete(*(void **)&v171[8]);
  }
  uint64_t v3 = 0;
  uint64_t v32 = v172;
LABEL_219:
  if (v32)
  {
    unint64_t v173 = v32;
    operator delete(v32);
  }
  return v3;
}

void sub_23CC58DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::vector<std::set<long long>>::~vector[abi:ne180100]((void **)&a22);
  std::vector<std::set<long long>>::~vector[abi:ne180100](&a25);
  if (a28) {
    operator delete(a28);
  }
  if (*(unsigned char *)(v33 - 136)) {
    operator delete(*(void **)(v33 - 128));
  }
  uint64_t v35 = *(void **)(v33 - 112);
  if (v35)
  {
    *(void *)(v33 - 104) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::set<long long>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v3 - 24), *((void **)v3 - 2));
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::CpModelPresolver::ExtractBoolAnd(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v44 = 0;
  long long __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v48 = 0;
  uint64_t v2 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  uint64_t v3 = *(unsigned int *)(*((void *)v2 + 6) + 48);
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v6 = *(void *)(*((void *)this + 2) + 48);
      uint64_t v7 = *(void *)(*(void *)(v6 + 56) + 8 * v4 + 8);
      if (*(_DWORD *)(v7 + 16)) {
        goto LABEL_5;
      }
      int v8 = *(_DWORD *)(v7 + 60);
      if (v8 == 26)
      {
        uint64_t v18 = *(void *)(v7 + 48);
        if (*(_DWORD *)(v18 + 16) != 2) {
          goto LABEL_5;
        }
        signed int v10 = v43;
        if (v43 >= (int *)v44)
        {
          uint64_t v11 = v42;
          uint64_t v19 = v43 - v42;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
LABEL_61:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          uint64_t v21 = v44 - (char *)v42;
          if ((v44 - (char *)v42) >> 1 > v20) {
            unint64_t v20 = v21 >> 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v20;
          }
          if (v15)
          {
            if (v15 >> 62) {
LABEL_62:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            long long v16 = (char *)operator new(4 * v15);
            unint64_t v17 = &v16[4 * v19];
            *(_DWORD *)unint64_t v17 = v4;
            uint64_t v5 = (uint64_t)(v17 + 4);
            if (v43 == v42) {
              goto LABEL_48;
            }
LABEL_42:
            unint64_t v31 = (char *)(v43 - 1) - (char *)v42;
            if (v31 < 0x2C) {
              goto LABEL_65;
            }
            if ((unint64_t)((char *)v42 - v16) < 0x20) {
              goto LABEL_65;
            }
            uint64_t v32 = (v31 >> 2) + 1;
            uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v34 = &v43[v33 / 0xFFFFFFFFFFFFFFFCLL];
            v17 -= v33;
            uint64_t v35 = &v16[4 * v19 - 16];
            int v36 = v43 - 4;
            uint64_t v37 = v32 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v38 = *(_OWORD *)v36;
              *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
              *(_OWORD *)uint64_t v35 = v38;
              v35 -= 32;
              v36 -= 8;
              v37 -= 8;
            }
            while (v37);
            signed int v10 = v34;
            if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_65:
              do
              {
                int v39 = *--v10;
                *((_DWORD *)v17 - 1) = v39;
                v17 -= 4;
              }
              while (v10 != v42);
            }
          }
          else
          {
            long long v16 = 0;
            unint64_t v17 = (char *)(4 * v19);
            *(_DWORD *)(4 * v19) = v4;
            uint64_t v5 = 4 * v19 + 4;
            if (v43 != v42) {
              goto LABEL_42;
            }
          }
LABEL_48:
          uint64_t v42 = (int *)v17;
          uint64_t v44 = &v16[4 * v15];
          if (v11) {
            operator delete(v11);
          }
          goto LABEL_4;
        }
      }
      else
      {
        if (v8 != 3) {
          goto LABEL_5;
        }
        uint64_t v9 = *(void *)(v7 + 48);
        if (*(_DWORD *)(v9 + 16) != 2) {
          goto LABEL_5;
        }
        signed int v10 = v43;
        if (v43 >= (int *)v44)
        {
          uint64_t v11 = v42;
          uint64_t v12 = v43 - v42;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            goto LABEL_61;
          }
          uint64_t v14 = v44 - (char *)v42;
          if ((v44 - (char *)v42) >> 1 > v13) {
            unint64_t v13 = v14 >> 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            if (v15 >> 62) {
              goto LABEL_62;
            }
            long long v16 = (char *)operator new(4 * v15);
            unint64_t v17 = &v16[4 * v12];
            *(_DWORD *)unint64_t v17 = v4;
            uint64_t v5 = (uint64_t)(v17 + 4);
            if (v43 == v42) {
              goto LABEL_48;
            }
          }
          else
          {
            long long v16 = 0;
            unint64_t v17 = (char *)(4 * v12);
            *(_DWORD *)(4 * v12) = v4;
            uint64_t v5 = 4 * v12 + 4;
            if (v43 == v42) {
              goto LABEL_48;
            }
          }
          unint64_t v22 = (char *)(v43 - 1) - (char *)v42;
          if (v22 < 0x2C) {
            goto LABEL_66;
          }
          if ((unint64_t)((char *)v42 - v16) < 0x20) {
            goto LABEL_66;
          }
          uint64_t v23 = (v22 >> 2) + 1;
          uint64_t v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v25 = &v43[v24 / 0xFFFFFFFFFFFFFFFCLL];
          v17 -= v24;
          uint64_t v26 = &v16[4 * v12 - 16];
          uint64_t v27 = v43 - 4;
          uint64_t v28 = v23 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v29 = *(_OWORD *)v27;
            *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
            *(_OWORD *)uint64_t v26 = v29;
            v26 -= 32;
            v27 -= 8;
            v28 -= 8;
          }
          while (v28);
          signed int v10 = v25;
          if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_66:
            do
            {
              int v30 = *--v10;
              *((_DWORD *)v17 - 1) = v30;
              v17 -= 4;
            }
            while (v10 != v42);
          }
          goto LABEL_48;
        }
      }
      int *v10 = v4;
      uint64_t v5 = (uint64_t)(v10 + 1);
LABEL_4:
      uint64_t v43 = (int *)v5;
LABEL_5:
      if (++v4 == v3)
      {
        uint64_t v2 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
        break;
      }
    }
  }
  operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(v2);
  uint64_t v40 = v42;
  if (v42 != v43)
  {
    do
    {
      uint64_t v41 = *v40;
      operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*(void *)(*(void *)(*((void *)this + 2) + 48) + 56) + 8 * v41 + 8));
      operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v41);
      ++v40;
    }
    while (v40 != v43);
    uint64_t v40 = v42;
  }
  if (v40) {
    operator delete(v40);
  }
  if ((void)v47)
  {
    operator delete(__p);
    long long __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v48 = 0;
    *(void *)&long long v47 = 0;
    long long v46 = 0uLL;
  }
  if (*((void *)&v47 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v47 + 1));
  }
}

void sub_23CC5939C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  absl::lts_2020_02_25::flat_hash_map<int,int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::~flat_hash_map((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void operations_research::sat::anonymous namespace'::AddImplication(int a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = 0;
  unint64_t v9 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a1)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a1));
  uint64_t v10 = *a4;
  unint64_t v11 = (unint64_t)*a4 >> 12;
  unint64_t v12 = v11 ^ (v9 >> 7);
  uint64_t v13 = a4[3];
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  for (unint64_t i = v12; ; unint64_t i = v8 + v16)
  {
    uint64_t v16 = i & v13;
    uint64_t v17 = *(void *)(v10 + (i & v13));
    unint64_t v18 = ((v17 ^ v14) - 0x101010101010101) & ~(v17 ^ v14) & 0x8080808080808080;
    if (v18) {
      break;
    }
LABEL_6:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v8 += 8;
  }
  uint64_t v19 = a4[1];
  while (1)
  {
    unint64_t v20 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v13;
    if (*(_DWORD *)(v19 + 8 * v20) == a1) {
      break;
    }
    v18 &= v18 - 1;
    if (!v18) {
      goto LABEL_6;
    }
  }
  if (v20 != v13)
  {
    for (j = 0; ; unint64_t v12 = j + v40)
    {
      unint64_t v40 = v12 & v13;
      uint64_t v41 = *(void *)(v10 + v40);
      unint64_t v42 = ((v41 ^ v14) - 0x101010101010101) & ~(v41 ^ v14) & 0x8080808080808080;
      if (v42) {
        break;
      }
LABEL_28:
      if ((v41 & (~v41 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v43 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(a4, v9);
        uint64_t v19 = a4[1];
        uint64_t v65 = (_DWORD *)(v19 + 8 * v43);
        _DWORD *v65 = a1;
        v65[1] = 0;
        goto LABEL_55;
      }
      j += 8;
    }
    while (1)
    {
      unint64_t v43 = (v40 + (__clz(__rbit64(v42)) >> 3)) & v13;
      if (*(_DWORD *)(v19 + 8 * v43) == a1) {
        break;
      }
      v42 &= v42 - 1;
      if (!v42) {
        goto LABEL_28;
      }
    }
LABEL_55:
    uint64_t v66 = *(void *)(*(void *)(a3 + 56) + 8 * *(int *)(v19 + 8 * v43 + 4) + 8);
    if (*(_DWORD *)(v66 + 60) == 4)
    {
      unint64_t v67 = *(void *)(v66 + 48);
      uint64_t v69 = *(unsigned int *)(v67 + 16);
      uint64_t v68 = (unsigned int *)(v67 + 16);
      int v70 = v69 + 1;
      if (v69 != *(_DWORD *)(v67 + 20)) {
        goto LABEL_62;
      }
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint(v66);
      *(_DWORD *)(v66 + 60) = 4;
      uint64_t v71 = *(void *)(v66 + 8);
      uint64_t v72 = (google::protobuf::Arena *)(v71 & 0xFFFFFFFFFFFFFFFELL);
      if (v71) {
        uint64_t v72 = *(google::protobuf::Arena **)v72;
      }
      unint64_t v67 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v72);
      *(void *)(v66 + 48) = v67;
      uint64_t v69 = *(unsigned int *)(v67 + 16);
      uint64_t v68 = (unsigned int *)(v67 + 16);
      int v70 = v69 + 1;
      if (v69 != *(_DWORD *)(v67 + 20)) {
        goto LABEL_62;
      }
    }
    google::protobuf::RepeatedField<int>::Reserve(v68, v70);
LABEL_62:
    *(_DWORD *)(*(void *)(v67 + 24) + 4 * v69) = a2;
    *(_DWORD *)(v67 + 16) = v70;
    return;
  }
LABEL_9:
  uint64_t v21 = 0;
  int v22 = ~a2;
  unint64_t v23 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v22)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v22));
  unint64_t v24 = v11 ^ (v23 >> 7);
  uint64_t v25 = 0x101010101010101 * (v23 & 0x7F);
  for (unint64_t k = v24; ; unint64_t k = v21 + v27)
  {
    uint64_t v27 = k & v13;
    uint64_t v28 = *(void *)(v10 + (k & v13));
    unint64_t v29 = ((v28 ^ v25) - 0x101010101010101) & ~(v28 ^ v25) & 0x8080808080808080;
    if (v29) {
      break;
    }
LABEL_14:
    if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_17;
    }
    v21 += 8;
  }
  uint64_t v30 = a4[1];
  while (1)
  {
    unint64_t v31 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v13;
    if (*(_DWORD *)(v30 + 8 * v31) == v22) {
      break;
    }
    v29 &= v29 - 1;
    if (!v29) {
      goto LABEL_14;
    }
  }
  if (v31 == v13)
  {
LABEL_17:
    uint64_t v32 = 0;
    int v33 = *(_DWORD *)(a3 + 48);
    while (1)
    {
      unint64_t v34 = v12 & v13;
      uint64_t v35 = *(void *)(v10 + v34);
      unint64_t v36 = ((v35 ^ v14) - 0x101010101010101) & ~(v35 ^ v14) & 0x8080808080808080;
      if (v36) {
        break;
      }
LABEL_22:
      if ((v35 & (~v35 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v38 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(a4, v9);
        uint64_t v37 = a4[1];
        uint64_t v49 = (_DWORD *)(v37 + 8 * v38);
        *uint64_t v49 = a1;
        v49[1] = 0;
        goto LABEL_37;
      }
      v32 += 8;
      unint64_t v12 = v32 + v34;
    }
    uint64_t v37 = a4[1];
    while (1)
    {
      unint64_t v38 = (v34 + (__clz(__rbit64(v36)) >> 3)) & v13;
      if (*(_DWORD *)(v37 + 8 * v38) == a1) {
        break;
      }
      v36 &= v36 - 1;
      if (!v36) {
        goto LABEL_22;
      }
    }
LABEL_37:
    *(_DWORD *)(v37 + 8 * v38 + 4) = v33;
    uint64_t v50 = *(int **)(a3 + 56);
    if (v50)
    {
      uint64_t v51 = *(int *)(a3 + 48);
      int v52 = *v50;
      if ((int)v51 < *v50)
      {
        *(_DWORD *)(a3 + 48) = v51 + 1;
        unint64_t v53 = *(void *)&v50[2 * v51 + 2];
        uint64_t v55 = *(unsigned int *)(v53 + 16);
        size_t v54 = (unsigned int *)(v53 + 16);
        int v56 = v55 + 1;
        if (v55 != *(_DWORD *)(v53 + 20))
        {
LABEL_46:
          *(_DWORD *)(*(void *)(v53 + 24) + 4 * v55) = a1;
          *(_DWORD *)(v53 + 16) = v56;
          if (*(_DWORD *)(v53 + 60) == 4)
          {
            unint64_t v59 = *(void *)(v53 + 48);
            uint64_t v61 = *(unsigned int *)(v59 + 16);
            int v60 = (unsigned int *)(v59 + 16);
            int v62 = v61 + 1;
            if (v61 != *(_DWORD *)(v59 + 20)) {
              goto LABEL_53;
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v53);
            *(_DWORD *)(v53 + 60) = 4;
            uint64_t v63 = *(void *)(v53 + 8);
            uint64_t v64 = (google::protobuf::Arena *)(v63 & 0xFFFFFFFFFFFFFFFELL);
            if (v63) {
              uint64_t v64 = *(google::protobuf::Arena **)v64;
            }
            unint64_t v59 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v64);
            *(void *)(v53 + 48) = v59;
            uint64_t v61 = *(unsigned int *)(v59 + 16);
            int v60 = (unsigned int *)(v59 + 16);
            int v62 = v61 + 1;
            if (v61 != *(_DWORD *)(v59 + 20)) {
              goto LABEL_53;
            }
          }
          google::protobuf::RepeatedField<int>::Reserve(v60, v62);
LABEL_53:
          *(_DWORD *)(*(void *)(v59 + 24) + 4 * v61) = a2;
          *(_DWORD *)(v59 + 16) = v62;
          return;
        }
LABEL_45:
        google::protobuf::RepeatedField<int>::Reserve(v54, v56);
        goto LABEL_46;
      }
      if (v52 != *(_DWORD *)(a3 + 52))
      {
LABEL_44:
        *uint64_t v50 = v52 + 1;
        unint64_t v53 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(a3 + 40));
        uint64_t v57 = *(void *)(a3 + 56);
        uint64_t v58 = *(int *)(a3 + 48);
        *(_DWORD *)(a3 + 48) = v58 + 1;
        *(void *)(v57 + 8 * v58 + 8) = v53;
        uint64_t v55 = *(unsigned int *)(v53 + 16);
        size_t v54 = (unsigned int *)(v53 + 16);
        int v56 = v55 + 1;
        if (v55 != *(_DWORD *)(v53 + 20)) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
    }
    else
    {
      int v52 = *(_DWORD *)(a3 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a3 + 40), v52 + 1);
    uint64_t v50 = *(int **)(a3 + 56);
    int v52 = *v50;
    goto LABEL_44;
  }
  for (m = 0; ; unint64_t v24 = m + v45)
  {
    unint64_t v45 = v24 & v13;
    uint64_t v46 = *(void *)(v10 + (v24 & v13));
    unint64_t v47 = ((v46 ^ v25) - 0x101010101010101) & ~(v46 ^ v25) & 0x8080808080808080;
    if (v47) {
      break;
    }
LABEL_34:
    if ((v46 & (~v46 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v48 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(a4, v23);
      uint64_t v30 = a4[1];
      uint64_t v73 = (int *)(v30 + 8 * v48);
      *uint64_t v73 = v22;
      v73[1] = 0;
      goto LABEL_64;
    }
    m += 8;
  }
  while (1)
  {
    unint64_t v48 = (v45 + (__clz(__rbit64(v47)) >> 3)) & v13;
    if (*(_DWORD *)(v30 + 8 * v48) == v22) {
      break;
    }
    v47 &= v47 - 1;
    if (!v47) {
      goto LABEL_34;
    }
  }
LABEL_64:
  uint64_t v74 = *(void *)(*(void *)(a3 + 56) + 8 * *(int *)(v30 + 8 * v48 + 4) + 8);
  if (*(_DWORD *)(v74 + 60) == 4)
  {
    unint64_t v75 = *(void *)(v74 + 48);
    int v76 = ~a1;
    uint64_t v78 = *(unsigned int *)(v75 + 16);
    uint64_t v77 = (unsigned int *)(v75 + 16);
    int v79 = v78 + 1;
    if (v78 != *(_DWORD *)(v75 + 20)) {
      goto LABEL_71;
    }
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(*(void *)(*(void *)(a3 + 56)
                                                                          + 8 * *(int *)(v30 + 8 * v48 + 4)
                                                                          + 8));
    *(_DWORD *)(v74 + 60) = 4;
    uint64_t v80 = *(void *)(v74 + 8);
    uint64_t v81 = (google::protobuf::Arena *)(v80 & 0xFFFFFFFFFFFFFFFELL);
    if (v80) {
      uint64_t v81 = *(google::protobuf::Arena **)v81;
    }
    unint64_t v75 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v81);
    *(void *)(v74 + 48) = v75;
    int v76 = ~a1;
    uint64_t v78 = *(unsigned int *)(v75 + 16);
    uint64_t v77 = (unsigned int *)(v75 + 16);
    int v79 = v78 + 1;
    if (v78 != *(_DWORD *)(v75 + 20)) {
      goto LABEL_71;
    }
  }
  google::protobuf::RepeatedField<int>::Reserve(v77, v79);
LABEL_71:
  *(_DWORD *)(*(void *)(v75 + 24) + 4 * v78) = v76;
  *(_DWORD *)(v75 + 16) = v79;
}

void operations_research::sat::CpModelPresolver::Probe(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (!*(unsigned char *)(v2 + 504))
  {
    unint64_t v3 = *(void *)(v2 + 48);
    if (*(int *)(v3 + 24) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v2, (const char *)v4, (unint64_t *)&v75);
        uint64_t v5 = *(void *)(*(void *)(*(void *)(*((void *)this + 2) + 48) + 32) + 8 * v4 + 8);
        *(_DWORD *)(v5 + 16) = 0;
        uint64_t v6 = (unsigned int *)(v5 + 16);
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v5 + 16), (unint64_t)v75 >> 1);
        uint64_t v7 = v75 & 1;
        if (v75) {
          p_p = (uint64_t *)__p;
        }
        else {
          p_p = (uint64_t *)&__p;
        }
        if ((unint64_t)v75 >= 2)
        {
          unint64_t v9 = &p_p[2 * ((unint64_t)v75 >> 1)];
          unsigned int v10 = *(_DWORD *)(v5 + 16);
          do
          {
            uint64_t v11 = *p_p;
            int v12 = *(_DWORD *)(v5 + 20);
            unsigned int v13 = v10 + 1;
            if (v10 == v12)
            {
              google::protobuf::RepeatedField<long long>::Reserve(v6, v10 + 1);
              int v12 = *(_DWORD *)(v5 + 20);
            }
            uint64_t v14 = *(void *)(v5 + 24);
            *(void *)(v14 + 8 * v10) = v11;
            *(_DWORD *)(v5 + 16) = v13;
            uint64_t v15 = p_p[1];
            v10 += 2;
            if (v13 == v12)
            {
              google::protobuf::RepeatedField<long long>::Reserve(v6, v10);
              uint64_t v14 = *(void *)(v5 + 24);
            }
            *(void *)(v14 + 8 * v13) = v15;
            *uint64_t v6 = v10;
            p_p += 2;
          }
          while (p_p != v9);
          uint64_t v7 = v75 & 1;
        }
        if (v7) {
          operator delete(__p);
        }
        ++v4;
        uint64_t v2 = *((void *)this + 2);
        unint64_t v3 = *(void *)(v2 + 48);
      }
      while (v4 < *(int *)(v3 + 24));
    }
    unint64_t v75 = 0;
    long long __p = 0;
    v79[0] = 0;
    v79[1] = 0;
    uint64_t v77 = 0;
    uint64_t v78 = v79;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v80 = 0;
    uint64_t v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)&v75);
    operations_research::sat::SatParameters::CopyFrom((operations_research::sat::SatParameters *)v16, (const operations_research::sat::SatParameters *)(*(void *)this + 8));
    *(_DWORD *)(v16 + 32) |= 0x80u;
    *(unsigned char *)(v16 + 545) = 0;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)&v75);
    operations_research::TimeLimit::MergeWithGlobalTimeLimit(v17, *(void *)(*(void *)this + 584));
    uint64_t v18 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)&v75);
    *(unsigned char *)(v18 + 16) = 0;
    uint64_t v19 = (std::vector<int> *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)&v75);
    operations_research::sat::CpModelMapping::CreateVariables(v19, (const operations_research::sat::CpModelProto *)v3, 0, (operations_research::sat::Model *)&v75);
    operations_research::sat::CpModelMapping::DetectOptionalVariables((operations_research::sat::CpModelMapping *)v19, (const operations_research::sat::CpModelProto *)v3, (operations_research::sat::Model *)&v75);
    operations_research::sat::CpModelMapping::ExtractEncoding((operations_research::sat::CpModelMapping *)v19, v3, (operations_research::sat::Model *)&v75);
    uint64_t v21 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)&v75);
    uint64_t v22 = *(void *)(v3 + 56);
    if (v22) {
      unint64_t v23 = (operations_research::sat **)(v22 + 8);
    }
    else {
      unint64_t v23 = 0;
    }
    uint64_t v24 = *(int *)(v3 + 48);
    if (v24)
    {
      uint64_t v25 = &v23[v24];
      do
      {
        uint64_t v26 = 0;
        uint64_t v27 = *v23;
        unint64_t v28 = (unint64_t)*v23
            + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v23)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + (void)*v23)));
        unint64_t v29 = ((v28 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v28);
        begiuint64_t n = v19[5].__begin_;
        unint64_t v31 = (v29 >> 7) ^ ((unint64_t)begin >> 12);
        std::vector<int>::pointer v32 = v19[6].__begin_;
        uint64_t v33 = 0x101010101010101 * (v29 & 0x7F);
        while (1)
        {
          unint64_t v34 = v31 & (unint64_t)v32;
          uint64_t v35 = *(void *)((char *)begin + v34);
          unint64_t v36 = ((v35 ^ v33) - 0x101010101010101) & ~(v35 ^ v33) & 0x8080808080808080;
          if (v36) {
            break;
          }
LABEL_28:
          if ((v35 & (~v35 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_31;
          }
          v26 += 8;
          unint64_t v31 = v26 + v34;
        }
        while (1)
        {
          unint64_t v37 = (v34 + (__clz(__rbit64(v36)) >> 3)) & (unint64_t)v32;
          if (*(operations_research::sat **)&v19[5].__end_[2 * v37] == v27) {
            break;
          }
          v36 &= v36 - 1;
          if (!v36) {
            goto LABEL_28;
          }
        }
        if ((std::vector<int>::pointer)v37 == v32)
        {
LABEL_31:
          if ((operations_research::sat::LoadConstraint(v27, (const operations_research::sat::ConstraintProto *)&v75, v20) & 1) == 0)
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v73, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3310);
            uint64_t v72 = google::LogMessage::stream((google::LogMessage *)&v73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)v72, (uint64_t)"Check failed: LoadConstraint(ct, &model) ", 41);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v73);
          }
          if (*(unsigned char *)(v21 + 496)) {
            goto LABEL_49;
          }
        }
        ++v23;
      }
      while (v23 != v25);
    }
    operations_research::sat::IntegerEncoder::AddAllImplicationsBetweenAssociatedLiterals(v18);
    if ((operations_research::sat::SatSolver::Propagate((operations_research::sat::SatSolver *)v21) & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v38 = (operations_research::sat::BinaryImplicationGraph *)operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)&v75);
    operations_research::sat::ProbeBooleanVariables((operations_research::sat *)&v75, 1.0, 0);
    uint64_t v39 = *(void *)(*(void *)this + 584);
    if (v39) {
      *(double *)(v39 + 112) = *(double *)(operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)&v75)
    }
                                         + 112)
                             + *(double *)(v39 + 112);
    if (!*(unsigned char *)(v21 + 496)
      && (operations_research::sat::BinaryImplicationGraph::DetectEquivalences(v38, 0) & 1) != 0)
    {
      LODWORD(v73) = *(_DWORD *)(v21 + 304);
      int v83 = 0;
      if (v73) {
        google::MakeCheckOpString<int,int>((int)&v73, (int)&v83, "sat_solver->CurrentDecisionLevel() == 0");
      }
      uint64_t v40 = *(void *)(v21 + 208);
      if (*(int *)(v40 + 12) >= 1)
      {
        for (uint64_t i = 0; i < *(int *)(v40 + 12); ++i)
        {
          unint64_t v42 = (uint64_t)*(int *)(*(void *)(v40 + 72) + 4 * i) >> 1;
          std::vector<int>::pointer v43 = v19[3].__begin_;
          if (v42 < v19[3].__end_ - v43)
          {
            int v44 = v43[v42];
            if ((v44 & 0x80000000) == 0)
            {
              if (!operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)this + 2), v44 ^ -(*(_DWORD *)(*(void *)(v40 + 72) + 4 * i) & 1)))goto LABEL_51; {
              uint64_t v40 = *(void *)(v21 + 208);
              }
            }
          }
        }
      }
      int v51 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 48) + 24);
      uint64_t v52 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)&v75);
      if (v51 >= 1)
      {
        uint64_t v53 = v52;
        size_t v54 = 0;
        while (1)
        {
          while (1)
          {
            uint64_t v55 = ~v54 <= (int)v54 ? v54 : ~v54;
            int v56 = v19[2].__begin_[v55];
            if (v56 == -1) {
              break;
            }
            int v57 = 2 * v56;
            uint64_t v58 = *((void *)v38 + 71);
            if (v57 < (int)((unint64_t)(*((void *)v38 + 72) - v58) >> 2))
            {
              int v59 = *(_DWORD *)(v58 + 4 * v57);
              if (v59 != -1 && v59 != v57)
              {
                unint64_t v61 = (uint64_t)v59 >> 1;
                std::vector<int>::pointer v62 = v19[3].__begin_;
                if (v61 >= v19[3].__end_ - v62)
                {
                  LODWORD(v73) = -1;
                  int v83 = 0;
LABEL_78:
                  google::MakeCheckOpString<int,int>((int)&v73, (int)&v83, "r_var >= 0");
                }
                LODWORD(v73) = v62[v61];
                int v83 = 0;
                if ((v73 & 0x80000000) != 0) {
                  goto LABEL_78;
                }
                operations_research::sat::PresolveContext::StoreBooleanEqualityRelation(*((void *)this + 2), v54, (const char *)(v73 ^ -(v59 & 1)));
              }
            }
            size_t v54 = (const char *)(v54 + 1);
            if ((int)v54 >= v51) {
              goto LABEL_51;
            }
          }
          uint64_t v63 = operations_research::sat::IntegerTrail::InitialVariableDomain(v53, v19->__begin_[v55]);
          uint64_t v73 = 0;
          unint64_t v64 = *(void *)v63;
          if (*(void *)v63) {
            break;
          }
          uint64_t v73 = *(void **)v63;
          long long v74 = *(_OWORD *)(v63 + 8);
LABEL_89:
          char v70 = operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), v54, (const operations_research::Domain *)&v73, 0);
          if (v73) {
            operator delete((void *)v74);
          }
          size_t v54 = (const char *)(v54 + 1);
          if ((int)v54 < v51) {
            char v71 = v70;
          }
          else {
            char v71 = 0;
          }
          if ((v71 & 1) == 0) {
            goto LABEL_51;
          }
        }
        uint64_t v65 = *(long long **)(v63 + 8);
        unint64_t v66 = v64 >> 1;
        if (v64 < 4)
        {
          unint64_t v67 = &v74;
          if (v64 < 2)
          {
            uint64_t v68 = 0;
LABEL_88:
            uint64_t v73 = &v68[v64 & 0xFFFFFFFFFFFFFFFELL];
            goto LABEL_89;
          }
        }
        else
        {
          if (v64 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v67 = (long long *)operator new(16 * v66);
          *(void *)&long long v74 = v67;
          *((void *)&v74 + 1) = v64 >> 1;
          uint64_t v73 = (void *)1;
        }
        do
        {
          long long v69 = *v65++;
          *v67++ = v69;
          --v66;
        }
        while (v66);
        uint64_t v68 = (char *)v73;
        goto LABEL_88;
      }
    }
    else
    {
LABEL_49:
      uint64_t v45 = *((void *)this + 2);
      HIBYTE(v74) = 0;
      LOBYTE(v73) = 0;
      operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v45, (uint64_t)&v73);
      if (SHIBYTE(v74) < 0) {
        operator delete(v73);
      }
    }
LABEL_51:
    uint64_t v46 = v80;
    if (v80)
    {
      unint64_t v47 = v81;
      unint64_t v48 = v80;
      if (v81 != v80)
      {
        do
        {
          uint64_t v50 = *--v47;
          uint64_t v49 = v50;
          void *v47 = 0;
          if (v50) {
            (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
          }
        }
        while (v47 != v46);
        unint64_t v48 = v80;
      }
      uint64_t v81 = v46;
      operator delete(v48);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v78, v79[0]);
    if (SHIBYTE(v77) < 0) {
      operator delete(v75);
    }
  }
}

void sub_23CC5A0C0(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC5A0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17)
{
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep operations_research::TimeLimit::MergeWithGlobalTimeLimit(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result, uint64_t a2)
{
  if (!a2) {
    return result;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v5 = INFINITY;
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_23;
    }
LABEL_12:
    unint64_t result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
    if (v6 - result < 0)
    {
      double v11 = 0.0;
    }
    else if (FLAGS_time_limit_use_usertime)
    {
      double v9 = *(double *)(a2 + 96);
      if (*(unsigned char *)(a2 + 72))
      {
        unint64_t result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
        uint64_t v10 = result - *(void *)(a2 + 80) + *(void *)(a2 + 88);
      }
      else
      {
        uint64_t v10 = *(void *)(a2 + 88);
      }
      double v11 = v9 + (double)v10 * -0.000000001;
      if (v11 < 0.0) {
        double v11 = 0.0;
      }
    }
    else
    {
      double v11 = (double)(v6 - result) * 0.000000001;
    }
    goto LABEL_27;
  }
  unint64_t result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
  if (v4 - result < 0)
  {
    double v5 = 0.0;
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_23;
    }
    goto LABEL_12;
  }
  if (FLAGS_time_limit_use_usertime)
  {
    double v7 = *(double *)(v3 + 96);
    if (*(unsigned char *)(v3 + 72))
    {
      unint64_t result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
      uint64_t v8 = result - *(void *)(v3 + 80) + *(void *)(v3 + 88);
    }
    else
    {
      uint64_t v8 = *(void *)(v3 + 88);
    }
    if (v7 + (double)v8 * -0.000000001 >= 0.0) {
      double v5 = v7 + (double)v8 * -0.000000001;
    }
    else {
      double v5 = 0.0;
    }
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_23;
    }
    goto LABEL_12;
  }
  double v5 = (double)(v4 - result) * 0.000000001;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_12;
  }
LABEL_23:
  double v11 = INFINITY;
LABEL_27:
  if (v11 < v5) {
    double v5 = v11;
  }
  double v12 = fmax(*(double *)(v3 + 104) - *(double *)(v3 + 112), 0.0);
  double v13 = fmax(*(double *)(a2 + 104) - *(double *)(a2 + 112), 0.0);
  if (v13 < v12) {
    double v12 = v13;
  }
  *(void *)(v3 + 112) = 0;
  *(double *)(v3 + 104) = v12;
  *(void *)(v3 + 128) = 0x7FF0000000000000;
  if (FLAGS_time_limit_use_usertime)
  {
    *(unsigned char *)(v3 + 72) = 1;
    unint64_t result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
    *(void *)(v3 + 80) = result;
    *(double *)(v3 + 96) = v5;
  }
  unint64_t result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
  *(void *)std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = result;
  *(void *)(v3 + 8) = result;
  uint64_t v14 = result + (uint64_t)(v5 * 1000000000.0);
  if ((double)(result ^ 0x7FFFFFFFFFFFFFFFLL) * 0.000000001 <= v5) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(void *)(v3 + 16) = v14;
  uint64_t v15 = *(void *)(a2 + 120);
  if (v15) {
    *(void *)(v3 + 120) = v15;
  }
  return result;
}

void operations_research::sat::CpModelPresolver::PresolvePureSatPart(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (*(unsigned char *)(v1 + 504) || *(unsigned char *)(v1 + 64)) {
    return;
  }
  uint64_t v2 = (char ***)this;
  int v3 = *(_DWORD *)(*(void *)(v1 + 48) + 24);
  operations_research::sat::SatPostsolver::SatPostsolver((operations_research::sat::SatPostsolver *)v291, v3);
  operations_research::sat::SatPresolver::SatPresolver((operations_research::sat::SatPresolver *)v285, (operations_research::sat::SatPostsolver *)v291);
  unint64_t v259 = v3;
  operations_research::sat::SatPresolver::SetNumVariables((operations_research::sat::SatPresolver *)v285, v3);
  uint64_t v4 = *v2;
  v290[73] = (*v2)[73];
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v280, (const operations_research::sat::SatParameters *)(v4 + 1));
  int v5 = v281;
  if (v282)
  {
    int v5 = v281 | 0x400000;
    char v283 = 0;
  }
  int v281 = v5 | 0x800000;
  char v284 = 0;
  operations_research::sat::SatParameters::CopyFrom((operations_research::sat::SatParameters *)v290, (const operations_research::sat::SatParameters *)v280);
  v276 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v277 = 0u;
  long long v278 = 0u;
  uint64_t v279 = 0;
  uint64_t v6 = v2[2];
  double v7 = v6[6];
  if (*((int *)v7 + 12) < 1)
  {
    uint64_t v150 = 0;
    v273 = 0;
    v274 = 0;
    v275 = 0;
    goto LABEL_350;
  }
  uint64_t v8 = 0;
  do
  {
    if ((*(_DWORD *)(*(void *)(*((void *)v7 + 7) + 8 * v8 + 8) + 60) - 3) <= 1)
    {
      if (operations_research::sat::CpModelPresolver::PresolveOneConstraint((operations_research::sat::CpModelPresolver *)v2, v8))operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v2[2], v8); {
      uint64_t v6 = v2[2];
      }
      if (*((unsigned char *)v6 + 504)) {
        goto LABEL_352;
      }
    }
    ++v8;
    double v7 = v6[6];
    uint64_t v9 = *((int *)v7 + 12);
  }
  while (v8 < v9);
  v273 = 0;
  v274 = 0;
  v275 = 0;
  if ((int)v9 < 1)
  {
    uint64_t v150 = 0;
    goto LABEL_350;
  }
  uint64_t v10 = 0;
  int v11 = 0;
  v262 = v2;
  do
  {
    uint64_t v12 = *(void *)(*((void *)v7 + 7) + 8 * v10 + 8);
    int v13 = *(_DWORD *)(v12 + 60);
    if (v13 != 4)
    {
      if (v13 != 3) {
        goto LABEL_15;
      }
      uint64_t v266 = v10;
      int v263 = v11;
      uint64_t v14 = (char *)v273;
      v274 = (char *)v273;
      uint64_t v260 = v12;
      uint64_t v15 = *(void *)(v12 + 48);
      uint64_t v16 = *(int *)(v15 + 16);
      if (v16)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17 = *(int **)(v15 + 24);
        uint64_t v18 = &v17[v16];
        while (1)
        {
          uint64_t v20 = 0;
          int v21 = *v17;
          int v22 = ~*v17;
          int v23 = v22 <= *v17 ? *v17 : ~v21;
          unint64_t v24 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v23)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v23));
          for (unint64_t i = (v24 >> 7) ^ ((unint64_t)v276 >> 12); ; unint64_t i = v20 + v26)
          {
            unint64_t v26 = i & v278;
            uint64_t v27 = *(void *)((char *)v276 + v26);
            unint64_t v28 = ((v27 ^ (0x101010101010101 * (v24 & 0x7F))) - 0x101010101010101) & ~(v27 ^ (0x101010101010101
                                                                                                * (v24 & 0x7F))) & 0x8080808080808080;
            if (v28) {
              break;
            }
LABEL_29:
            if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v29 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, v24);
              *(_DWORD *)(v277 + 4 * v29) = v23;
              uint64_t v14 = v274;
              goto LABEL_32;
            }
            v20 += 8;
          }
          while (*(_DWORD *)(v277 + 4 * ((v26 + (__clz(__rbit64(v28)) >> 3)) & v278)) != v23)
          {
            v28 &= v28 - 1;
            if (!v28) {
              goto LABEL_29;
            }
          }
LABEL_32:
          int v30 = v21 >= 0 ? 2 * v21 : (2 * v22) | 1;
          if (v14 >= v275) {
            break;
          }
          *(_DWORD *)uint64_t v14 = v30;
          uint64_t v19 = v14 + 4;
LABEL_21:
          v274 = v19;
          ++v17;
          uint64_t v14 = v19;
          if (v17 == v18) {
            goto LABEL_109;
          }
        }
        unint64_t v31 = (char *)v273;
        int64_t v32 = v14 - (unsigned char *)v273;
        uint64_t v33 = (v14 - (unsigned char *)v273) >> 2;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v35 = v275 - (unsigned char *)v273;
        if ((v275 - (unsigned char *)v273) >> 1 > v34) {
          unint64_t v34 = v35 >> 1;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          if (v36 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v37 = operator new(4 * v36);
          unint64_t v38 = (int *)&v37[4 * v33];
          *unint64_t v38 = v30;
          uint64_t v19 = (char *)(v38 + 1);
          if (v14 == v31) {
            goto LABEL_50;
          }
        }
        else
        {
          unint64_t v37 = 0;
          unint64_t v38 = (int *)(4 * v33);
          *(_DWORD *)(4 * v33) = v30;
          uint64_t v19 = (char *)(4 * v33 + 4);
          if (v14 == v31) {
            goto LABEL_50;
          }
        }
        unint64_t v39 = v14 - 4 - v31;
        if (v39 >= 0xBC)
        {
          if (&v37[v32 - 4 - (v39 & 0xFFFFFFFFFFFFFFFCLL)] > &v37[v32 - 4])
          {
            uint64_t v40 = v14;
          }
          else if (&v14[-(v39 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
          {
            uint64_t v40 = v14;
          }
          else if ((unint64_t)(v14 - v37 - v32) >= 0x20)
          {
            uint64_t v42 = (v39 >> 2) + 1;
            uint64_t v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v40 = &v14[-v43];
            unint64_t v38 = (int *)((char *)v38 - v43);
            int v44 = &v37[4 * v33 - 16];
            uint64_t v45 = (long long *)(v14 - 16);
            uint64_t v46 = v42 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v47 = *v45;
              *(v44 - 1) = *(v45 - 1);
              *int v44 = v47;
              v44 -= 2;
              v45 -= 2;
              v46 -= 8;
            }
            while (v46);
            if (v42 == (v42 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_50:
              v273 = v38;
              v274 = v19;
              v275 = &v37[4 * v36];
              if (v31) {
                operator delete(v31);
              }
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v40 = v14;
          }
        }
        else
        {
          uint64_t v40 = v14;
        }
        do
        {
          int v41 = *((_DWORD *)v40 - 1);
          v40 -= 4;
          *--unint64_t v38 = v41;
        }
        while (v40 != v31);
        goto LABEL_50;
      }
      uint64_t v19 = (char *)v273;
LABEL_109:
      uint64_t v83 = *(int *)(v260 + 16);
      if (!v83)
      {
        uint64_t v86 = (uint64_t)v19;
LABEL_155:
        operations_research::sat::SatPresolver::AddClause((uint64_t)v285, v273, (v86 - (uint64_t)v273) >> 2);
        uint64_t v2 = v262;
        uint64_t v10 = v266;
        operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*((void *)v262[2][6] + 7) + 8 * v266 + 8));
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v262[2], v266);
        int v120 = v263;
        goto LABEL_14;
      }
      uint64_t v84 = *(int **)(v260 + 24);
      BOOL v85 = &v84[v83];
      while (1)
      {
        uint64_t v87 = 0;
        int v88 = *v84;
        int v89 = ~*v84;
        int v90 = v89 <= *v84 ? *v84 : ~v88;
        unint64_t v91 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v90)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v90));
        for (unint64_t j = (v91 >> 7) ^ ((unint64_t)v276 >> 12); ; unint64_t j = v87 + v93)
        {
          unint64_t v93 = j & v278;
          uint64_t v94 = *(void *)((char *)v276 + v93);
          unint64_t v95 = ((v94 ^ (0x101010101010101 * (v91 & 0x7F))) - 0x101010101010101) & ~(v94 ^ (0x101010101010101
                                                                                              * (v91 & 0x7F))) & 0x8080808080808080;
          if (v95) {
            break;
          }
LABEL_120:
          if ((v94 & (~v94 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v96 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, v91);
            *(_DWORD *)(v277 + 4 * v96) = v90;
            uint64_t v19 = v274;
            goto LABEL_123;
          }
          v87 += 8;
        }
        while (*(_DWORD *)(v277 + 4 * ((v93 + (__clz(__rbit64(v95)) >> 3)) & v278)) != v90)
        {
          v95 &= v95 - 1;
          if (!v95) {
            goto LABEL_120;
          }
        }
LABEL_123:
        int v97 = 2 * v88;
        if (v88 < 0) {
          int v97 = (2 * v89) | 1;
        }
        int v98 = v97 ^ 1;
        if (v19 >= v275) {
          break;
        }
        *(_DWORD *)uint64_t v19 = v98;
        uint64_t v86 = (uint64_t)(v19 + 4);
LABEL_112:
        v274 = (char *)v86;
        ++v84;
        uint64_t v19 = (char *)v86;
        if (v84 == v85) {
          goto LABEL_155;
        }
      }
      uint64_t v99 = (char *)v273;
      int64_t v100 = v19 - (unsigned char *)v273;
      uint64_t v101 = (v19 - (unsigned char *)v273) >> 2;
      unint64_t v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v103 = v275 - (unsigned char *)v273;
      if ((v275 - (unsigned char *)v273) >> 1 > v102) {
        unint64_t v102 = v103 >> 1;
      }
      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v104 = v102;
      }
      if (v104)
      {
        if (v104 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v105 = operator new(4 * v104);
        unint64_t v106 = (int *)&v105[4 * v101];
        int *v106 = v98;
        uint64_t v86 = (uint64_t)(v106 + 1);
        if (v19 == v99) {
          goto LABEL_140;
        }
      }
      else
      {
        int v105 = 0;
        unint64_t v106 = (int *)(4 * v101);
        *(_DWORD *)(4 * v101) = v98;
        uint64_t v86 = 4 * v101 + 4;
        if (v19 == v99) {
          goto LABEL_140;
        }
      }
      unint64_t v107 = v19 - 4 - v99;
      if (v107 >= 0xBC)
      {
        if (&v105[v100 - 4 - (v107 & 0xFFFFFFFFFFFFFFFCLL)] > &v105[v100 - 4])
        {
          uint64_t v108 = v19;
        }
        else if (&v19[-(v107 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v19 - 4)
        {
          uint64_t v108 = v19;
        }
        else if ((unint64_t)(v19 - v105 - v100) >= 0x20)
        {
          uint64_t v110 = (v107 >> 2) + 1;
          uint64_t v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v108 = &v19[-v111];
          unint64_t v106 = (int *)((char *)v106 - v111);
          uint64_t v112 = &v105[4 * v101 - 16];
          uint64_t v113 = (long long *)(v19 - 16);
          uint64_t v114 = v110 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v115 = *v113;
            *(v112 - 1) = *(v113 - 1);
            *uint64_t v112 = v115;
            v112 -= 2;
            v113 -= 2;
            v114 -= 8;
          }
          while (v114);
          if (v110 == (v110 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_140:
            v273 = v106;
            v274 = (char *)v86;
            v275 = &v105[4 * v104];
            if (v99) {
              operator delete(v99);
            }
            goto LABEL_112;
          }
        }
        else
        {
          uint64_t v108 = v19;
        }
      }
      else
      {
        uint64_t v108 = v19;
      }
      do
      {
        int v109 = *((_DWORD *)v108 - 1);
        v108 -= 4;
        *--unint64_t v106 = v109;
      }
      while (v108 != v99);
      goto LABEL_140;
    }
    uint64_t v267 = v10;
    int v264 = v11;
    long long v308 = 0uLL;
    uint64_t v307 = 0;
    uint64_t v48 = *(int *)(v12 + 16);
    if (!v48)
    {
      uint64_t v49 = 0;
      uint64_t v81 = 0;
      uint64_t v116 = (int *)v307;
      uint64_t v117 = -v307;
      uint64_t v118 = -v307 >> 2;
      unint64_t v119 = v118 + 1;
      if (!((unint64_t)(v118 + 1) >> 62)) {
        goto LABEL_157;
      }
LABEL_384:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v49 = 0;
    uint64_t v261 = v12;
    uint64_t v50 = *(int **)(v12 + 24);
    int v51 = &v50[v48];
    do
    {
      uint64_t v52 = 0;
      int v53 = *v50;
      int v54 = ~*v50;
      if (v54 <= *v50) {
        int v55 = *v50;
      }
      else {
        int v55 = ~v53;
      }
      unint64_t v56 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v55)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v55));
      for (unint64_t k = (v56 >> 7) ^ ((unint64_t)v276 >> 12); ; unint64_t k = v52 + v58)
      {
        unint64_t v58 = k & v278;
        uint64_t v59 = *(void *)((char *)v276 + v58);
        unint64_t v60 = ((v59 ^ (0x101010101010101 * (v56 & 0x7F))) - 0x101010101010101) & ~(v59 ^ (0x101010101010101
                                                                                            * (v56 & 0x7F))) & 0x8080808080808080;
        if (v60) {
          break;
        }
LABEL_73:
        if ((v59 & (~v59 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v62 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, v56);
          *(_DWORD *)(v277 + 4 * v62) = v55;
          unint64_t v61 = (int *)v308;
          goto LABEL_77;
        }
        v52 += 8;
      }
      while (*(_DWORD *)(v277 + 4 * ((v58 + (__clz(__rbit64(v60)) >> 3)) & v278)) != v55)
      {
        v60 &= v60 - 1;
        if (!v60) {
          goto LABEL_73;
        }
      }
      unint64_t v61 = v49;
LABEL_77:
      int v63 = 2 * v53;
      if (v53 < 0) {
        int v63 = (2 * v54) | 1;
      }
      int v64 = v63 ^ 1;
      if ((unint64_t)v61 < *((void *)&v308 + 1))
      {
        *unint64_t v61 = v64;
        uint64_t v49 = v61 + 1;
        goto LABEL_65;
      }
      uint64_t v65 = (int *)v307;
      uint64_t v66 = ((uint64_t)v61 - v307) >> 2;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v68 = *((void *)&v308 + 1) - v307;
      if ((*((void *)&v308 + 1) - v307) >> 1 > v67) {
        unint64_t v67 = v68 >> 1;
      }
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v67;
      }
      if (v69)
      {
        if (v69 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v70 = operator new(4 * v69);
        char v71 = (int *)&v70[4 * v66];
        int *v71 = v64;
        uint64_t v49 = v71 + 1;
        if (v61 == v65) {
          goto LABEL_94;
        }
      }
      else
      {
        char v70 = 0;
        char v71 = (int *)(4 * v66);
        *(_DWORD *)(4 * v66) = v64;
        uint64_t v49 = (int *)(4 * v66 + 4);
        if (v61 == v65) {
          goto LABEL_94;
        }
      }
      unint64_t v72 = (char *)(v61 - 1) - (char *)v65;
      if (v72 < 0xBC)
      {
        uint64_t v73 = v61;
        goto LABEL_93;
      }
      if (&v70[(char *)v61 - (char *)v65 - 4 - (v72 & 0xFFFFFFFFFFFFFFFCLL)] > &v70[(char *)v61 - (char *)v65 - 4])
      {
        uint64_t v73 = v61;
        do
        {
LABEL_93:
          int v74 = *--v73;
          *--char v71 = v74;
        }
        while (v73 != v65);
        goto LABEL_94;
      }
      if ((int *)((char *)v61 - (v72 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v61 - 1)
      {
        uint64_t v73 = v61;
        goto LABEL_93;
      }
      if ((unint64_t)((char *)v65 - v70) < 0x20)
      {
        uint64_t v73 = v61;
        goto LABEL_93;
      }
      uint64_t v75 = (v72 >> 2) + 1;
      uint64_t v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v73 = &v61[v76 / 0xFFFFFFFFFFFFFFFCLL];
      char v71 = (int *)((char *)v71 - v76);
      uint64_t v77 = &v70[4 * v66 - 16];
      uint64_t v78 = v61 - 4;
      uint64_t v79 = v75 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v80 = *(_OWORD *)v78;
        *(v77 - 1) = *((_OWORD *)v78 - 1);
        *uint64_t v77 = v80;
        v77 -= 2;
        v78 -= 8;
        v79 -= 8;
      }
      while (v79);
      if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_93;
      }
LABEL_94:
      uint64_t v307 = (uint64_t)v71;
      *(void *)&long long v308 = v49;
      *((void *)&v308 + 1) = &v70[4 * v69];
      if (v65) {
        operator delete(v65);
      }
LABEL_65:
      *(void *)&long long v308 = v49;
      ++v50;
    }
    while (v50 != v51);
    uint64_t v81 = *((void *)&v308 + 1);
    if ((unint64_t)v49 < *((void *)&v308 + 1))
    {
      *uint64_t v49 = -1;
      uint64_t v82 = (uint64_t)(v49 + 1);
      uint64_t v12 = v261;
      uint64_t v2 = v262;
      goto LABEL_171;
    }
    uint64_t v12 = v261;
    uint64_t v116 = (int *)v307;
    uint64_t v117 = (uint64_t)v49 - v307;
    uint64_t v118 = ((uint64_t)v49 - v307) >> 2;
    unint64_t v119 = v118 + 1;
    if ((unint64_t)(v118 + 1) >> 62) {
      goto LABEL_384;
    }
LABEL_157:
    uint64_t v121 = v81 - (void)v116;
    if (v121 >> 1 > v119) {
      unint64_t v119 = v121 >> 1;
    }
    if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v122 = v119;
    }
    if (!v122)
    {
      int v123 = 0;
      int v124 = (_DWORD *)(4 * v118);
      *(_DWORD *)(4 * v118) = -1;
      uint64_t v82 = 4 * v118 + 4;
      if (v49 != v116) {
        goto LABEL_165;
      }
LABEL_191:
      uint64_t v2 = v262;
      uint64_t v307 = (uint64_t)v124;
      *(void *)&long long v308 = v82;
      *((void *)&v308 + 1) = &v123[4 * v122];
      if (v116) {
        goto LABEL_170;
      }
      goto LABEL_171;
    }
    if (v122 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v123 = operator new(4 * v122);
    int v124 = &v123[4 * v118];
    _DWORD *v124 = -1;
    uint64_t v82 = (uint64_t)(v124 + 1);
    if (v49 == v116) {
      goto LABEL_191;
    }
LABEL_165:
    unint64_t v125 = (char *)(v49 - 1) - (char *)v116;
    if (v125 < 0x2C || (unint64_t)((char *)v49 - v123 - v117) < 0x20)
    {
      uint64_t v126 = v49;
      uint64_t v2 = v262;
      goto LABEL_168;
    }
    uint64_t v144 = (v125 >> 2) + 1;
    uint64_t v145 = 4 * (v144 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v126 = &v49[v145 / 0xFFFFFFFFFFFFFFFCLL];
    int v124 = (_DWORD *)((char *)v124 - v145);
    uint64_t v146 = &v123[4 * v118 - 16];
    unint64_t v147 = v49 - 4;
    uint64_t v148 = v144 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v149 = *(_OWORD *)v147;
      *(v146 - 1) = *((_OWORD *)v147 - 1);
      *uint64_t v146 = v149;
      v146 -= 2;
      v147 -= 8;
      v148 -= 8;
    }
    while (v148);
    uint64_t v2 = v262;
    if (v144 != (v144 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_168:
        int v127 = *--v126;
        *--int v124 = v127;
      }
      while (v126 != v116);
    }
    uint64_t v307 = (uint64_t)v124;
    *(void *)&long long v308 = v82;
    *((void *)&v308 + 1) = &v123[4 * v122];
    if (v116) {
LABEL_170:
    }
      operator delete(v116);
LABEL_171:
    *(void *)&long long v308 = v82;
    unint64_t v128 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    if (*(_DWORD *)(v12 + 60) == 4) {
      unint64_t v128 = *(uint64_t **)(v12 + 48);
    }
    uint64_t v129 = *((int *)v128 + 4);
    if (v129)
    {
      unsigned int v130 = (int *)v128[3];
      uint64_t v131 = &v130[v129];
      do
      {
        uint64_t v132 = 0;
        int v133 = *v130;
        int v134 = ~*v130;
        if (v134 <= *v130) {
          int v135 = *v130;
        }
        else {
          int v135 = ~v133;
        }
        unint64_t v136 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v135)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v135));
        for (unint64_t m = (v136 >> 7) ^ ((unint64_t)v276 >> 12); ; unint64_t m = v132 + v138)
        {
          unint64_t v138 = m & v278;
          uint64_t v139 = *(void *)((char *)v276 + v138);
          unint64_t v140 = ((v139 ^ (0x101010101010101 * (v136 & 0x7F))) - 0x101010101010101) & ~(v139 ^ (0x101010101010101
                                                                                                  * (v136 & 0x7F))) & 0x8080808080808080;
          if (v140) {
            break;
          }
LABEL_182:
          if ((v139 & (~v139 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v141 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, v136);
            *(_DWORD *)(v277 + 4 * v141) = v135;
            goto LABEL_185;
          }
          v132 += 8;
        }
        while (*(_DWORD *)(v277 + 4 * ((v138 + (__clz(__rbit64(v140)) >> 3)) & v278)) != v135)
        {
          v140 &= v140 - 1;
          if (!v140) {
            goto LABEL_182;
          }
        }
LABEL_185:
        int v142 = 2 * v133;
        if (v133 < 0) {
          int v142 = (2 * v134) | 1;
        }
        uint64_t v143 = v308;
        *(_DWORD *)(v308 - 4) = v142;
        operations_research::sat::SatPresolver::AddClause((uint64_t)v285, (void *)v307, (v143 - v307) >> 2);
        ++v130;
      }
      while (v130 != v131);
    }
    uint64_t v10 = v267;
    operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*((void *)v2[2][6] + 7) + 8 * v267 + 8));
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v2[2], v267);
    int v120 = v264;
    if (v307)
    {
      *(void *)&long long v308 = v307;
      operator delete((void *)v307);
    }
LABEL_14:
    int v11 = v120 + 1;
LABEL_15:
    ++v10;
    double v7 = v2[2][6];
  }
  while (v10 < *((int *)v7 + 12));
  if (!v11) {
    goto LABEL_349;
  }
  long long __p = 0;
  uint64_t v271 = 0;
  unint64_t v272 = 0;
  if (v259)
  {
    if ((v259 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(8 * (((v259 - 1) >> 6) + 1));
    uint64_t v271 = 0;
    unint64_t v272 = ((v259 - 1) >> 6) + 1;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](&__p, v259, 0);
    uint64_t v151 = 0;
    do
    {
      long long v170 = (operations_research::sat::PresolveContext *)v262[2];
      if (!*(void *)(*((void *)v170 + 85) + 48 * (void)v151 + 16)) {
        *(void *)((char *)__p + (((unint64_t)v151 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (char)v151;
      }
      uint64_t v156 = 0;
      unint64_t v171 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v151)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + (void)v151));
      unint64_t v172 = v171 >> 7;
      unint64_t v157 = (v171 >> 7) ^ ((unint64_t)v276 >> 12);
      uint64_t v173 = 0x101010101010101 * (v171 & 0x7F);
      while (1)
      {
        unint64_t v152 = v157 & v278;
        uint64_t v153 = *(void *)((char *)v276 + v152);
        unint64_t v154 = ((v153 ^ v173) - 0x101010101010101) & ~(v153 ^ v173) & 0x8080808080808080;
        if (v154) {
          break;
        }
LABEL_205:
        if ((v153 & (~v153 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_226;
        }
        v156 += 8;
        unint64_t v157 = v156 + v152;
      }
      while (1)
      {
        unint64_t v155 = (v152 + (__clz(__rbit64(v154)) >> 3)) & v278;
        if (v151 == (const char *)*(unsigned int *)(v277 + 4 * v155)) {
          break;
        }
        v154 &= v154 - 1;
        if (!v154) {
          goto LABEL_205;
        }
      }
      if (v155 != (void)v278 && operations_research::sat::PresolveContext::IsFixed(v170, v151))
      {
        BOOL IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue((operations_research::sat::PresolveContext *)v262[2], v151);
        uint64_t v159 = 0;
        if (IsTrue)
        {
          for (unint64_t n = v172 ^ ((unint64_t)v276 >> 12); ; unint64_t n = v159 + v161)
          {
            unint64_t v161 = n & v278;
            uint64_t v162 = *(void *)((char *)v276 + v161);
            unint64_t v163 = ((v162 ^ v173) - 0x101010101010101) & ~(v162 ^ v173) & 0x8080808080808080;
            if (v163) {
              break;
            }
LABEL_214:
            if ((v162 & (~v162 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v168 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ (unint64_t)v151)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ (void)v151)));
              *(_DWORD *)(v277 + 4 * v168) = v151;
              goto LABEL_223;
            }
            v159 += 8;
          }
          while (v151 != (const char *)*(unsigned int *)(v277 + 4 * ((v161 + (__clz(__rbit64(v163)) >> 3)) & v278)))
          {
            v163 &= v163 - 1;
            if (!v163) {
              goto LABEL_214;
            }
          }
LABEL_223:
          LODWORD(v307) = 2 * v151;
          operations_research::sat::SatPresolver::AddClause((uint64_t)v285, &v307, 1);
        }
        else
        {
          for (iunint64_t i = v172 ^ ((unint64_t)v276 >> 12); ; iunint64_t i = v159 + v165)
          {
            unint64_t v165 = ii & v278;
            uint64_t v166 = *(void *)((char *)v276 + v165);
            unint64_t v167 = ((v166 ^ v173) - 0x101010101010101) & ~(v166 ^ v173) & 0x8080808080808080;
            if (v167) {
              break;
            }
LABEL_220:
            if ((v166 & (~v166 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v169 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ (unint64_t)v151)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ (void)v151)));
              *(_DWORD *)(v277 + 4 * v169) = v151;
              goto LABEL_225;
            }
            v159 += 8;
          }
          while (v151 != (const char *)*(unsigned int *)(v277 + 4 * ((v165 + (__clz(__rbit64(v167)) >> 3)) & v278)))
          {
            v167 &= v167 - 1;
            if (!v167) {
              goto LABEL_220;
            }
          }
LABEL_225:
          LODWORD(v307) = (2 * v151) | 1;
          operations_research::sat::SatPresolver::AddClause((uint64_t)v285, &v307, 1);
        }
      }
LABEL_226:
      ++v151;
    }
    while (v151 != (const char *)v259);
  }
  if (v284)
  {
    char v174 = v293;
    int v175 = v292;
    unint64_t v176 = v262;
    if ((operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262) & 1) == 0) {
      goto LABEL_238;
    }
    unint64_t v178 = (unint64_t)(v174 - v175) >> 2;
    unint64_t v179 = (unint64_t)(v293 - (unsigned char *)v292) >> 2;
    if (v178 != v179)
    {
      if (!operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262))goto LABEL_238; {
      unint64_t v180 = (unint64_t)(v293 - (unsigned char *)v292) >> 2;
      }
      if (v179 != v180
        && (!operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262)|| v180 != ((unint64_t)(v293 - (unsigned char *)v292) >> 2)&& !operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262)))
      {
        goto LABEL_238;
      }
    }
  }
  else
  {
    unint64_t v176 = v262;
    if ((operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262) & 1) == 0)
    {
LABEL_238:
      if (*_MergedGlobals_7[0] >= 1
        && (_MergedGlobals_7[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)_MergedGlobals_7, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_presolve.cc", (const char *)1)))
      {
        BOOL v181 = google::LogMessage::LogMessage((google::LogMessage *)&v307, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3513);
        long long v182 = (void *)google::LogMessage::stream(v181);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"UNSAT during SAT presolve.", 26);
        google::LogMessage::~LogMessage((google::LogMessage *)&v307);
      }
      uint64_t v183 = (uint64_t)v176[2];
      HIBYTE(v308) = 0;
      LOBYTE(v307) = 0;
      operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v183, (uint64_t)&v307);
      if (SHIBYTE(v308) < 0) {
        operator delete((void *)v307);
      }
      goto LABEL_347;
    }
  }
  unint64_t v184 = (unint64_t)(v289 - v288) >> 3;
  uint64_t v185 = (uint64_t)v176[2][6];
  if (*(_DWORD *)(v185 + 24) < (int)v184)
  {
    if (*off_26AECFEB0[0] >= 1
      && (off_26AECFEB0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFEB0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_presolve.cc", (const char *)1)))
    {
      uint64_t v186 = google::LogMessage::LogMessage((google::LogMessage *)&v307, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3522);
      uint64_t v187 = (void *)google::LogMessage::stream(v186);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)"New variables added by the SAT presolver.", 41);
      google::LogMessage::~LogMessage((google::LogMessage *)&v307);
    }
    uint64_t v188 = (operations_research::sat::PresolveContext *)v176[2];
    int v189 = *(_DWORD *)(*((void *)v188 + 6) + 24);
    BOOL v190 = __OFSUB__(v184, v189);
    int v191 = v184 - v189;
    if (!((v191 < 0) ^ v190 | (v191 == 0)))
    {
      while (1)
      {
        int v192 = v176[2][6];
        long long v193 = (int *)*((void *)v192 + 4);
        if (!v193) {
          break;
        }
        uint64_t v194 = *((int *)v192 + 6);
        int v195 = *v193;
        if ((int)v194 < *v193)
        {
          *((_DWORD *)v192 + 6) = v194 + 1;
          unint64_t v196 = *(void *)&v193[2 * v194 + 2];
          uint64_t v199 = *(unsigned int *)(v196 + 16);
          int v197 = *(_DWORD *)(v196 + 20);
          unint64_t v198 = (unsigned int *)(v196 + 16);
          unsigned int v200 = v199 + 1;
          if (v199 != v197) {
            goto LABEL_263;
          }
LABEL_262:
          google::protobuf::RepeatedField<long long>::Reserve(v198, v200);
          int v197 = *(_DWORD *)(v196 + 20);
          goto LABEL_263;
        }
        if (v195 == *((_DWORD *)v192 + 7)) {
          goto LABEL_260;
        }
LABEL_261:
        *long long v193 = v195 + 1;
        unint64_t v196 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)v192 + 2));
        uint64_t v201 = *((void *)v192 + 4);
        uint64_t v202 = *((int *)v192 + 6);
        *((_DWORD *)v192 + 6) = v202 + 1;
        *(void *)(v201 + 8 * v202 + 8) = v196;
        uint64_t v199 = *(unsigned int *)(v196 + 16);
        int v197 = *(_DWORD *)(v196 + 20);
        unint64_t v198 = (unsigned int *)(v196 + 16);
        unsigned int v200 = v199 + 1;
        if (v199 == v197) {
          goto LABEL_262;
        }
LABEL_263:
        uint64_t v203 = *(void *)(v196 + 24);
        *(void *)(v203 + 8 * v199) = 0;
        *(_DWORD *)(v196 + 16) = v200;
        int v204 = v199 + 2;
        if (v200 == v197)
        {
          google::protobuf::RepeatedField<long long>::Reserve(v198, v204);
          uint64_t v203 = *(void *)(v196 + 24);
        }
        *(void *)(v203 + 8 * v200) = 1;
        *unint64_t v198 = v204;
        if (!--v191)
        {
          uint64_t v188 = (operations_research::sat::PresolveContext *)v176[2];
          goto LABEL_266;
        }
      }
      int v195 = *((_DWORD *)v192 + 7);
LABEL_260:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v192 + 4, v195 + 1);
      long long v193 = (int *)*((void *)v192 + 4);
      int v195 = *v193;
      goto LABEL_261;
    }
LABEL_266:
    operations_research::sat::PresolveContext::InitializeNewDomains(v188, v177);
    uint64_t v185 = (uint64_t)v176[2][6];
  }
  long long v308 = 0u;
  long long v309 = 0u;
  uint64_t v307 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v310 = 0;
  uint64_t v205 = v286;
  if ((int)(-1431655765 * ((unint64_t)(v287 - v286) >> 3)) >= 1)
  {
    uint64_t v206 = 0;
    v268 = (unsigned int *)(v185 + 40);
    do
    {
      v207 = (int **)(v205 + 24 * v206);
      long long v208 = *v207;
      unint64_t v209 = v207[1];
      if (*v207 != v209)
      {
        if ((char *)v209 - (char *)v208 != 8)
        {
          v210 = *(int **)(v185 + 56);
          if (!v210)
          {
            int v212 = *(_DWORD *)(v185 + 52);
            goto LABEL_278;
          }
          uint64_t v211 = *(int *)(v185 + 48);
          int v212 = *v210;
          if ((int)v211 < *v210)
          {
            *(_DWORD *)(v185 + 48) = v211 + 1;
            unint64_t v213 = *(void *)&v210[2 * v211 + 2];
            goto LABEL_283;
          }
          if (v212 == *(_DWORD *)(v185 + 52))
          {
LABEL_278:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v268, v212 + 1);
            v210 = *(int **)(v185 + 56);
            int v212 = *v210;
          }
          int *v210 = v212 + 1;
          unint64_t v213 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)v268);
          uint64_t v214 = *(void *)(v185 + 56);
          uint64_t v215 = *(int *)(v185 + 48);
          *(_DWORD *)(v185 + 48) = v215 + 1;
          *(void *)(v214 + 8 * v215 + 8) = v213;
          long long v208 = *v207;
          unint64_t v209 = v207[1];
LABEL_283:
          while (2)
          {
            if (v208 == v209) {
              goto LABEL_270;
            }
            int v218 = *v208;
            int v219 = *(_DWORD *)(v213 + 60);
            if ((*v208 & 1) == 0)
            {
              if (v219 == 3)
              {
                unint64_t v220 = *(void *)(v213 + 48);
                uint64_t v222 = *(unsigned int *)(v220 + 16);
                v221 = (unsigned int *)(v220 + 16);
                int v223 = v222 + 1;
                if (v222 == *(_DWORD *)(v220 + 20)) {
                  goto LABEL_280;
                }
              }
              else
              {
                operations_research::sat::ConstraintProto::clear_constraint(v213);
                *(_DWORD *)(v213 + 60) = 3;
                uint64_t v225 = *(void *)(v213 + 8);
                v226 = (google::protobuf::Arena *)(v225 & 0xFFFFFFFFFFFFFFFELL);
                if (v225) {
                  v226 = *(google::protobuf::Arena **)v226;
                }
                unint64_t v220 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v226);
                *(void *)(v213 + 48) = v220;
                uint64_t v222 = *(unsigned int *)(v220 + 16);
                v221 = (unsigned int *)(v220 + 16);
                int v223 = v222 + 1;
                if (v222 == *(_DWORD *)(v220 + 20)) {
LABEL_280:
                }
                  google::protobuf::RepeatedField<int>::Reserve(v221, v223);
              }
              uint64_t v216 = *(void *)(v220 + 24);
              int v217 = v218 >> 1;
LABEL_282:
              *(_DWORD *)(v216 + 4 * v222) = v217;
              *(_DWORD *)(v220 + 16) = v223;
              ++v208;
              continue;
            }
            break;
          }
          if (v219 == 3)
          {
            unint64_t v220 = *(void *)(v213 + 48);
            uint64_t v222 = *(unsigned int *)(v220 + 16);
            v224 = (unsigned int *)(v220 + 16);
            int v223 = v222 + 1;
            if (v222 == *(_DWORD *)(v220 + 20)) {
              goto LABEL_300;
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v213);
            *(_DWORD *)(v213 + 60) = 3;
            uint64_t v227 = *(void *)(v213 + 8);
            v228 = (google::protobuf::Arena *)(v227 & 0xFFFFFFFFFFFFFFFELL);
            if (v227) {
              v228 = *(google::protobuf::Arena **)v228;
            }
            unint64_t v220 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v228);
            *(void *)(v213 + 48) = v220;
            uint64_t v222 = *(unsigned int *)(v220 + 16);
            v224 = (unsigned int *)(v220 + 16);
            int v223 = v222 + 1;
            if (v222 == *(_DWORD *)(v220 + 20)) {
LABEL_300:
            }
              google::protobuf::RepeatedField<int>::Reserve(v224, v223);
          }
          uint64_t v216 = *(void *)(v220 + 24);
          int v217 = ~(v218 >> 1);
          goto LABEL_282;
        }
      }
LABEL_270:
      ++v206;
      uint64_t v205 = v286;
    }
    while (v206 < (int)(-1431655765 * ((unint64_t)(v287 - v286) >> 3)));
    unint64_t v176 = v262;
    if ((void)v309)
    {
      operator delete((void *)v307);
      uint64_t v307 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      uint64_t v310 = 0;
      *(void *)&long long v309 = 0;
      long long v308 = 0uLL;
    }
  }
  if (*((void *)&v309 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v309 + 1));
  }
  operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v176[2]);
  v229 = v176[2][7];
  long long v308 = 0u;
  long long v309 = 0u;
  uint64_t v307 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v310 = 0;
  if ((int)((unint64_t)(v293 - (unsigned char *)v292) >> 2) < 1) {
    goto LABEL_345;
  }
  int v230 = 0;
  v265 = v229;
  v269 = (unsigned int *)(v229 + 40);
  while (2)
  {
    operations_research::sat::SatPostsolver::Clause((operations_research::sat::SatPostsolver *)v291, v230, &v305);
    v231 = v305;
    v232 = v306;
    if (v305 == v306) {
      goto LABEL_341;
    }
    v233 = (int *)*((void *)v229 + 7);
    if (!v233)
    {
      int v235 = *((_DWORD *)v229 + 13);
      goto LABEL_316;
    }
    uint64_t v234 = *((int *)v229 + 12);
    int v235 = *v233;
    if ((int)v234 < *v233)
    {
      *((_DWORD *)v229 + 12) = v234 + 1;
      unint64_t v236 = *(void *)&v233[2 * v234 + 2];
      if (v231 != v232) {
        goto LABEL_321;
      }
      goto LABEL_318;
    }
    if (v235 == *((_DWORD *)v229 + 13))
    {
LABEL_316:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v269, v235 + 1);
      v233 = (int *)*((void *)v229 + 7);
      int v235 = *v233;
    }
    int *v233 = v235 + 1;
    unint64_t v236 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)v269);
    uint64_t v237 = *((void *)v229 + 7);
    uint64_t v238 = *((int *)v229 + 12);
    *((_DWORD *)v229 + 12) = v238 + 1;
    *(void *)(v237 + 8 * v238 + 8) = v236;
    v231 = v305;
    v232 = v306;
    if (v305 == v306)
    {
LABEL_318:
      v231 = v232;
      goto LABEL_340;
    }
LABEL_321:
    while (2)
    {
      while (2)
      {
        int v239 = *v231;
        int v240 = *(_DWORD *)(v236 + 60);
        if ((*v231 & 1) == 0)
        {
          if (v240 == 3)
          {
            unint64_t v241 = *(void *)(v236 + 48);
            uint64_t v243 = *(unsigned int *)(v241 + 16);
            v242 = (unsigned int *)(v241 + 16);
            int v244 = v243 + 1;
            if (v243 == *(_DWORD *)(v241 + 20)) {
              goto LABEL_319;
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v236);
            *(_DWORD *)(v236 + 60) = 3;
            uint64_t v249 = *(void *)(v236 + 8);
            v250 = (google::protobuf::Arena *)(v249 & 0xFFFFFFFFFFFFFFFELL);
            if (v249) {
              v250 = *(google::protobuf::Arena **)v250;
            }
            unint64_t v241 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v250);
            *(void *)(v236 + 48) = v241;
            uint64_t v243 = *(unsigned int *)(v241 + 16);
            v242 = (unsigned int *)(v241 + 16);
            int v244 = v243 + 1;
            if (v243 == *(_DWORD *)(v241 + 20)) {
LABEL_319:
            }
              google::protobuf::RepeatedField<int>::Reserve(v242, v244);
          }
          *(_DWORD *)(*(void *)(v241 + 24) + 4 * v243) = v239 >> 1;
          *(_DWORD *)(v241 + 16) = v244;
          if (++v231 == v232) {
            goto LABEL_339;
          }
          continue;
        }
        break;
      }
      if (v240 == 3)
      {
        unint64_t v245 = *(void *)(v236 + 48);
        uint64_t v247 = *(unsigned int *)(v245 + 16);
        v246 = (unsigned int *)(v245 + 16);
        int v248 = v247 + 1;
        if (v247 == *(_DWORD *)(v245 + 20)) {
          goto LABEL_337;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint(v236);
        *(_DWORD *)(v236 + 60) = 3;
        uint64_t v251 = *(void *)(v236 + 8);
        v252 = (google::protobuf::Arena *)(v251 & 0xFFFFFFFFFFFFFFFELL);
        if (v251) {
          v252 = *(google::protobuf::Arena **)v252;
        }
        unint64_t v245 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v252);
        *(void *)(v236 + 48) = v245;
        uint64_t v247 = *(unsigned int *)(v245 + 16);
        v246 = (unsigned int *)(v245 + 16);
        int v248 = v247 + 1;
        if (v247 == *(_DWORD *)(v245 + 20)) {
LABEL_337:
        }
          google::protobuf::RepeatedField<int>::Reserve(v246, v248);
      }
      *(_DWORD *)(*(void *)(v245 + 24) + 4 * v247) = ~(v239 >> 1);
      *(_DWORD *)(v245 + 16) = v248;
      if (++v231 != v232) {
        continue;
      }
      break;
    }
LABEL_339:
    v231 = v305;
LABEL_340:
    v229 = v265;
LABEL_341:
    if (v231)
    {
      v306 = v231;
      operator delete(v231);
    }
    if (++v230 < (int)((unint64_t)(v293 - (unsigned char *)v292) >> 2)) {
      continue;
    }
    break;
  }
  if ((void)v309)
  {
    operator delete((void *)v307);
    uint64_t v307 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v310 = 0;
    *(void *)&long long v309 = 0;
    long long v308 = 0uLL;
  }
LABEL_345:
  if (*((void *)&v309 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v309 + 1));
  }
LABEL_347:
  if (__p) {
    operator delete(__p);
  }
LABEL_349:
  uint64_t v150 = (char *)v273;
LABEL_350:
  if (v150)
  {
    v274 = v150;
    operator delete(v150);
  }
LABEL_352:
  if ((void)v278)
  {
    operator delete(v276);
    v276 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v279 = 0;
    *(void *)&long long v278 = 0;
    long long v277 = 0uLL;
  }
  if (*((void *)&v278 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v278 + 1));
  }
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v280);
  operations_research::sat::SatPresolver::~SatPresolver((operations_research::sat::SatPresolver *)v285);
  if (v303)
  {
    v304 = v303;
    operator delete(v303);
  }
  if (v301)
  {
    v302 = v301;
    operator delete(v301);
  }
  if (v299)
  {
    v300 = v299;
    operator delete(v299);
  }
  v253 = v295;
  v254 = v296;
  uint64_t v298 = 0;
  unint64_t v255 = (char *)v296 - (char *)v295;
  if ((unint64_t)((char *)v296 - (char *)v295) >= 0x11)
  {
    do
    {
      operator delete(*v253);
      v254 = v296;
      v253 = v295 + 1;
      v295 = v253;
      unint64_t v255 = (char *)v296 - (char *)v253;
    }
    while ((unint64_t)((char *)v296 - (char *)v253) > 0x10);
  }
  unint64_t v256 = v255 >> 3;
  if (v256 == 1)
  {
    uint64_t v257 = 512;
LABEL_368:
    uint64_t v297 = v257;
  }
  else if (v256 == 2)
  {
    uint64_t v257 = 1024;
    goto LABEL_368;
  }
  if (v253 != v254)
  {
    do
    {
      v258 = *v253++;
      operator delete(v258);
    }
    while (v253 != v254);
    if (v296 != v295) {
      v296 = (void **)((char *)v296 + (((char *)v295 - (char *)v296 + 7) & 0xFFFFFFFFFFFFFFF8));
    }
  }
  if (v294) {
    operator delete(v294);
  }
  if (v292)
  {
    v293 = v292;
    operator delete(v292);
  }
}

void sub_23CC5BDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set((uint64_t)&a20);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&a26);
  operations_research::sat::SatPresolver::~SatPresolver((operations_research::sat::SatPresolver *)&STACK[0x2C8]);
  operations_research::sat::SatPostsolver::~SatPostsolver((operations_research::sat::SatPostsolver *)&STACK[0x6F8]);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveOneConstraint(operations_research::sat::CpModelPresolver *this, int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (*(unsigned char *)(v2 + 504)) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(v2 + 48) + 56) + 8 * a2 + 8);
  if (operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations((operations_research::sat::PresolveContext **)this, a2, (operations_research::sat::ConstraintProto *)v6))
  {
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
    if (!operations_research::sat::CpModelPresolver::PresolveEnforcementLiteral(this, (operations_research::sat::ConstraintProto *)v6))goto LABEL_6; {
LABEL_9:
    }
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
    uint64_t result = 0;
    unsigned int v7 = *(_DWORD *)(v6 + 60) - 3;
    goto LABEL_10;
  }
  if (operations_research::sat::CpModelPresolver::PresolveEnforcementLiteral(this, (operations_research::sat::ConstraintProto *)v6))
  {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t result = 0;
  unsigned int v7 = *(_DWORD *)(v6 + 60) - 3;
  if (v7 <= 0x19)
  {
LABEL_10:
    switch(v7)
    {
      case 0u:
        return operations_research::sat::CpModelPresolver::PresolveBoolOr(this, (operations_research::sat::ConstraintProto *)v6);
      case 1u:
        return operations_research::sat::CpModelPresolver::PresolveBoolAnd(this, (uint64_t **)v6);
      case 2u:
        return operations_research::sat::CpModelPresolver::PresolveBoolXor(this, (operations_research::sat::ConstraintProto *)v6);
      case 4u:
        return operations_research::sat::CpModelPresolver::PresolveIntDiv(this, (operations_research::sat::ConstraintProto *)v6);
      case 6u:
        uint64_t v8 = *(void *)(v6 + 48);
        if (*(_DWORD *)(v8 + 16) == 2 && *(_DWORD *)(*(void *)(v8 + 24) + 4) == ~**(_DWORD **)(v8 + 24))
        {
          return operations_research::sat::CpModelPresolver::PresolveIntAbs(this, (operations_research::sat::ConstraintProto *)v6);
        }
        else
        {
          return operations_research::sat::CpModelPresolver::PresolveIntMax(this, (operations_research::sat::ConstraintProto *)v6);
        }
      case 7u:
        return operations_research::sat::CpModelPresolver::PresolveIntMin(this, (const operations_research::sat::IntegerArgumentProto **)v6);
      case 8u:
        return operations_research::sat::CpModelPresolver::PresolveIntProd(this, (operations_research::sat::ConstraintProto *)v6);
      case 9u:
        if (operations_research::sat::CpModelPresolver::CanonicalizeLinear(this, (operations_research::sat::ConstraintProto *)v6))
        {
          operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
          if (!operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v10))goto LABEL_36; {
        }
          }
        else if (!operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v9))
        {
LABEL_36:
          if (operations_research::sat::CpModelPresolver::PropagateDomainsInLinear(this, a2, (operations_research::sat::ConstraintProto *)v6))goto LABEL_37; {
          goto LABEL_78;
          }
        }
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
        if (operations_research::sat::CpModelPresolver::PropagateDomainsInLinear(this, a2, (operations_research::sat::ConstraintProto *)v6))
        {
LABEL_37:
          operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
          if (!operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v12))goto LABEL_38; {
          goto LABEL_79;
          }
        }
LABEL_78:
        if (!operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v11))
        {
LABEL_38:
          if (!operations_research::sat::CpModelPresolver::RemoveSingletonInLinear(this, (operations_research::sat::ConstraintProto *)v6, v13))goto LABEL_82; {
          goto LABEL_80;
          }
        }
LABEL_79:
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
        if (!operations_research::sat::CpModelPresolver::RemoveSingletonInLinear(this, (operations_research::sat::ConstraintProto *)v6, v14))goto LABEL_82; {
LABEL_80:
        }
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
        if (operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v15))operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2); {
LABEL_82:
        }
        if (operations_research::sat::CpModelPresolver::PresolveLinearOnBooleans(this, (operations_research::sat::ConstraintProto *)v6))operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2); {
        if (*(_DWORD *)(v6 + 60) == 12)
        }
        {
          int v16 = *(_DWORD *)(v6 + 16);
          operations_research::sat::CpModelPresolver::ExtractEnforcementLiteralFromLinearConstraint((operations_research::sat::PresolveContext **)this, (operations_research::sat::ConstraintProto *)v6);
          if (!*(_DWORD *)(v6 + 60))
          {
            operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
            return 1;
          }
          if (*(_DWORD *)(v6 + 16) > v16)
          {
            uint64_t result = operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v17);
            if (!result) {
              return result;
            }
            operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
          }
        }
        return 0;
      case 0xAu:
        return operations_research::sat::CpModelPresolver::PresolveAllDiff(this, (operations_research::sat::ConstraintProto *)v6);
      case 0xBu:
        return operations_research::sat::CpModelPresolver::PresolveElement(this, (operations_research::sat::ConstraintProto *)v6);
      case 0xCu:
        return operations_research::sat::CpModelPresolver::PresolveCircuit(this, (operations_research::sat::ConstraintProto *)v6);
      case 0xDu:
        return operations_research::sat::CpModelPresolver::PresolveTable(this, (operations_research::sat::ConstraintProto *)v6);
      case 0xEu:
        return operations_research::sat::CpModelPresolver::PresolveAutomaton(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x10u:
        return operations_research::sat::CpModelPresolver::PresolveInterval(this, a2, (operations_research::sat::ConstraintProto *)v6);
      case 0x11u:
        return operations_research::sat::CpModelPresolver::PresolveNoOverlap(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x13u:
        return operations_research::sat::CpModelPresolver::PresolveCumulative(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x14u:
        return operations_research::sat::CpModelPresolver::PresolveRoutes(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x17u:
        return operations_research::sat::CpModelPresolver::PresolveAtMostOne(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x18u:
        return operations_research::sat::CpModelPresolver::PresolveLinMax(this, (operations_research::sat::LinearArgumentProto **)v6);
      case 0x19u:
        return operations_research::sat::CpModelPresolver::PresolveLinMin(this, (operations_research::sat::ConstraintProto *)v6);
      default:
        return result;
    }
  }
  return result;
}

void operations_research::sat::SatPostsolver::~SatPostsolver(operations_research::sat::SatPostsolver *this)
{
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 32);
  int v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
}

void operations_research::sat::CpModelPresolver::ExpandObjective(operations_research::sat::CpModelPresolver *this, unint64_t a2)
{
  int v3 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (*((unsigned char *)v3 + 504)) {
    return;
  }
  BOOL v4 = operations_research::sat::PresolveContext::CanonicalizeObjective(v3, a2);
  uint64_t v6 = (void *)*((void *)this + 2);
  if (!v4)
  {
    HIBYTE(v230) = 0;
    LOBYTE(v229) = 0;
    operations_research::sat::PresolveContext::NotifyThatModelIsUnsat((uint64_t)v6, (uint64_t)&v229);
    if (SHIBYTE(v230) < 0) {
      operator delete((void *)v229);
    }
    return;
  }
  uint64_t v7 = v6[69];
  uint64_t v8 = v6[6];
  uint64_t v9 = *(int *)(v8 + 24);
  uint64_t v10 = *(unsigned int *)(v8 + 48);
  long long v230 = 0u;
  long long v231 = 0u;
  v228 = 0;
  unint64_t v229 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v232 = 0;
  v226 = 0;
  uint64_t v227 = 0;
  if (v9)
  {
    if ((v9 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    __n128 v11 = operator new(4 * v9);
    v226 = v11;
    v228 = (char *)&v11[v9];
    bzero(v11, 4 * v9);
    uint64_t v227 = v228;
  }
  else
  {
    __n128 v11 = 0;
  }
  if ((int)v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      uint64_t v13 = *(void *)(*(void *)(*(void *)(*((void *)this + 2) + 48) + 56) + 8 * i + 8);
      if (!*(_DWORD *)(v13 + 16) && *(_DWORD *)(v13 + 60) == 12)
      {
        uint64_t v14 = *(void *)(v13 + 48);
        if (*(_DWORD *)(v14 + 64) == 2 && **(void **)(v14 + 72) == *(void *)(*(void *)(v14 + 72) + 8))
        {
          uint64_t v15 = 0;
          unint64_t v5 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + i)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + i));
          for (unint64_t j = (v5 >> 7) ^ (v229 >> 12); ; unint64_t j = v15 + v17)
          {
            unint64_t v17 = j & v231;
            uint64_t v18 = *(void *)(v229 + v17);
            unint64_t v19 = ((v18 ^ (0x101010101010101 * (v5 & 0x7F))) - 0x101010101010101) & ~(v18 ^ (0x101010101010101
                                                                                               * (v5 & 0x7F))) & 0x8080808080808080;
            if (v19)
            {
              while (i != *(_DWORD *)(v230 + 4 * ((v17 + (__clz(__rbit64(v19)) >> 3)) & v231)))
              {
                v19 &= v19 - 1;
                if (!v19) {
                  goto LABEL_20;
                }
              }
              goto LABEL_23;
            }
LABEL_20:
            if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0) {
              break;
            }
            v15 += 8;
          }
          unint64_t v20 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v229, v5);
          *(_DWORD *)(v230 + 4 * v20) = i;
          int v21 = &operations_research::sat::_LinearConstraintProto_default_instance_;
          if (*(_DWORD *)(v13 + 60) != 12) {
            goto LABEL_24;
          }
LABEL_23:
          int v21 = *(uint64_t **)(v13 + 48);
LABEL_24:
          uint64_t v22 = *((unsigned int *)v21 + 4);
          if ((int)v22 >= 1)
          {
            uint64_t v23 = 0;
            uint64_t v24 = 4 * v22;
            do
            {
              unint64_t v26 = &operations_research::sat::_LinearConstraintProto_default_instance_;
              if (*(_DWORD *)(v13 + 60) == 12) {
                unint64_t v26 = *(uint64_t **)(v13 + 48);
              }
              int v25 = *(_DWORD *)(v26[3] + v23);
              if (~v25 > v25) {
                int v25 = ~v25;
              }
              ++v11[v25];
              v23 += 4;
            }
            while (v24 != v23);
          }
        }
      }
    }
    uint64_t v6 = (void *)*((void *)this + 2);
  }
  v224 = 0;
  uint64_t v225 = 0;
  int v223 = &v224;
  uint64_t v27 = (char *)v6[67];
  unint64_t v28 = (unsigned int *)v6[68];
  unint64_t v29 = v27;
  if (*v27 <= -2)
  {
    do
    {
      unint64_t v30 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unint64_t v29 = (void *)((char *)v29 + v30);
      v28 += 4 * v30;
    }
    while (*(char *)v29 < -1);
  }
  unint64_t v31 = &v27[v6[70]];
  while (v29 != (void *)v31)
  {
    uint64_t v32 = *v28;
    if ((v32 & 0x80000000) != 0)
    {
      int v191 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v219, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3594);
      int v192 = (void *)google::LogMessage::stream(v191);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v219);
    }
    if (v226[v32])
    {
      uint64_t v33 = v224;
      unint64_t v34 = &v224;
      uint64_t v35 = &v224;
      if (v224)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v35 = (uint64_t **)v33;
            int v36 = *((_DWORD *)v33 + 7);
            if ((int)v32 >= v36) {
              break;
            }
            uint64_t v33 = *v35;
            unint64_t v34 = v35;
            if (!*v35) {
              goto LABEL_45;
            }
          }
          if (v36 >= (int)v32) {
            break;
          }
          uint64_t v33 = v35[1];
          if (!v33)
          {
            unint64_t v34 = v35 + 1;
            goto LABEL_45;
          }
        }
      }
      else
      {
LABEL_45:
        unint64_t v37 = operator new(0x20uLL);
        v37[7] = v32;
        *(void *)unint64_t v37 = 0;
        *((void *)v37 + 1) = 0;
        *((void *)v37 + 2) = v35;
        *unint64_t v34 = (uint64_t *)v37;
        if (*v223)
        {
          int v223 = (uint64_t **)*v223;
          unint64_t v37 = *v34;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v224, (uint64_t *)v37);
        ++v225;
      }
    }
    int v38 = *((char *)v29 + 1);
    unint64_t v29 = (void *)((char *)v29 + 1);
    v28 += 4;
    if (v38 <= -2)
    {
      do
      {
        unint64_t v39 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unint64_t v29 = (void *)((char *)v29 + v39);
        v28 += 4 * v39;
      }
      while (*(char *)v29 < -1);
    }
  }
  long long v220 = 0u;
  long long v221 = 0u;
  uint64_t v218 = 0;
  unint64_t v219 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v222 = 0;
  uint64_t v216 = 0;
  int v217 = 0;
  if (!*((void *)&v230 + 1)) {
    goto LABEL_292;
  }
  int v204 = 0;
  int v202 = -1;
  do
  {
    uint64_t v40 = v225;
    if (!v225) {
      break;
    }
    while (1)
    {
      uint64_t v41 = 0;
      uint64_t v42 = (const char *)*((unsigned int *)v223 + 7);
      unint64_t v5 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v42)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + (int)v42));
      unint64_t v43 = (v5 >> 7) ^ (v219 >> 12);
      uint64_t v44 = 0x101010101010101 * (v5 & 0x7F);
      for (unint64_t k = v43; ; unint64_t k = v41 + v46)
      {
        unint64_t v46 = k & v221;
        uint64_t v47 = *(void *)(v219 + v46);
        unint64_t v48 = (v47 ^ v44) - 0x101010101010101;
        unint64_t v49 = v48 & ~(v47 ^ v44) & 0x8080808080808080;
        if (v49) {
          break;
        }
LABEL_62:
        if ((v47 & (~v47 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_65;
        }
        v41 += 8;
      }
      while (1)
      {
        unint64_t v48 = (v46 + (__clz(__rbit64(v49)) >> 3)) & v221;
        if (*(_DWORD *)(v220 + 4 * v48) == v42) {
          break;
        }
        unint64_t v48 = v49 - 1;
        v49 &= v49 - 1;
        if (!v49) {
          goto LABEL_62;
        }
      }
      if (v48 != (void)v221)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3609);
        unint64_t v196 = (void *)google::LogMessage::stream((google::LogMessage *)&v214);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)"Check failed: !processed_vars.contains(var) ", 44);
        goto LABEL_315;
      }
LABEL_65:
      if (!v226[(int)v42])
      {
        for (m = 0; ; unint64_t v43 = m + v71)
        {
          unint64_t v71 = v43 & v221;
          uint64_t v72 = *(void *)(v219 + (v43 & v221));
          unint64_t v73 = ((v72 ^ v44) - 0x101010101010101) & ~(v72 ^ v44) & 0x8080808080808080;
          if (v73) {
            break;
          }
LABEL_96:
          if ((v72 & (~v72 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v74 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v219, v5);
            *(_DWORD *)(v220 + 4 * v74) = v42;
            goto LABEL_99;
          }
          m += 8;
        }
        while (*(_DWORD *)(v220 + 4 * ((v71 + (__clz(__rbit64(v73)) >> 3)) & v221)) != v42)
        {
          v73 &= v73 - 1;
          if (!v73) {
            goto LABEL_96;
          }
        }
LABEL_99:
        unint64_t v58 = v224;
        if (!v224) {
          goto LABEL_57;
        }
        uint64_t v59 = &v224;
        uint64_t v75 = v224;
        do
        {
          uint64_t v76 = v75;
          uint64_t v77 = v59;
          int v78 = *((_DWORD *)v75 + 7);
          uint64_t v79 = v75 + 1;
          if (v78 >= (int)v42) {
            uint64_t v59 = (uint64_t **)v75;
          }
          else {
            ++v75;
          }
          uint64_t v75 = (uint64_t *)*v75;
        }
        while (v75);
        if (v59 == &v224) {
          goto LABEL_57;
        }
        if (v78 < (int)v42) {
          uint64_t v76 = (uint64_t *)v77;
        }
        if ((int)v42 < *((_DWORD *)v76 + 7)) {
          goto LABEL_57;
        }
        long long v80 = (uint64_t *)(v77 + 1);
        if (v78 >= (int)v42) {
          long long v80 = v79;
        }
        uint64_t v81 = (uint64_t *)*v80;
        uint64_t v82 = v59;
        if (*v80)
        {
          do
          {
            uint64_t v83 = (uint64_t **)v81;
            uint64_t v81 = (uint64_t *)*v81;
          }
          while (v81);
        }
        else
        {
          do
          {
            uint64_t v83 = (uint64_t **)v82[2];
            BOOL v69 = *v83 == (uint64_t *)v82;
            uint64_t v82 = v83;
          }
          while (!v69);
        }
        if (v223 == v59) {
          int v223 = v83;
        }
        uint64_t v40 = v225;
        goto LABEL_56;
      }
      uint64_t v50 = 0;
      int v51 = (void *)*((void *)this + 2);
      unint64_t v52 = v51[67];
      unint64_t v53 = (v5 >> 7) ^ (v52 >> 12);
      uint64_t v54 = v51[70];
      while (1)
      {
        unint64_t v55 = v53 & v54;
        uint64_t v56 = *(void *)(v52 + v55);
        unint64_t v57 = ((v56 ^ v44) - 0x101010101010101) & ~(v56 ^ v44) & 0x8080808080808080;
        if (v57) {
          break;
        }
LABEL_70:
        if ((v56 & (~v56 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_73;
        }
        v50 += 8;
        unint64_t v53 = v50 + v55;
      }
      while (1)
      {
        unint64_t v5 = (v55 + (__clz(__rbit64(v57)) >> 3)) & v54;
        if (*(_DWORD *)(v51[68] + 16 * v5) == v42) {
          break;
        }
        unint64_t v5 = v57 - 1;
        v57 &= v57 - 1;
        if (!v57) {
          goto LABEL_70;
        }
      }
      if (v5 != v54) {
        break;
      }
LABEL_73:
      unint64_t v58 = v224;
      if (!v224) {
        goto LABEL_57;
      }
      uint64_t v59 = &v224;
      unint64_t v60 = v224;
      do
      {
        unint64_t v61 = v60;
        unint64_t v62 = v59;
        int v63 = *((_DWORD *)v60 + 7);
        int v64 = v60 + 1;
        if (v63 >= (int)v42) {
          uint64_t v59 = (uint64_t **)v60;
        }
        else {
          ++v60;
        }
        unint64_t v60 = (uint64_t *)*v60;
      }
      while (v60);
      if (v59 == &v224) {
        goto LABEL_57;
      }
      if (v63 < (int)v42) {
        unint64_t v61 = (uint64_t *)v62;
      }
      if ((int)v42 < *((_DWORD *)v61 + 7)) {
        goto LABEL_57;
      }
      uint64_t v65 = (uint64_t *)(v62 + 1);
      if (v63 >= (int)v42) {
        uint64_t v65 = v64;
      }
      uint64_t v66 = (uint64_t *)*v65;
      unint64_t v67 = v59;
      if (*v65)
      {
        do
        {
          uint64_t v68 = (uint64_t **)v66;
          uint64_t v66 = (uint64_t *)*v66;
        }
        while (v66);
      }
      else
      {
        do
        {
          uint64_t v68 = (uint64_t **)v67[2];
          BOOL v69 = *v68 == (uint64_t *)v67;
          unint64_t v67 = v68;
        }
        while (!v69);
      }
      if (v223 == v59) {
        int v223 = v68;
      }
LABEL_56:
      uint64_t v225 = v40 - 1;
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v58, (uint64_t *)v59);
      operator delete(v59);
LABEL_57:
      uint64_t v40 = v225;
      if (!v225) {
        goto LABEL_279;
      }
    }
    if (v42 == -1) {
      break;
    }
    if ((v42 & 0x80000000) != 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3625);
      unint64_t v198 = (void *)google::LogMessage::stream((google::LogMessage *)&v214);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"Check failed: RefIsPositive(objective_var) ", 43);
LABEL_315:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v214);
    }
    uint64_t v84 = 0;
    unint64_t v85 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v42)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + (void)v42));
    for (unint64_t n = (v85 >> 7) ^ (v219 >> 12); ; unint64_t n = v84 + v87)
    {
      unint64_t v87 = n & v221;
      uint64_t v88 = *(void *)(v219 + v87);
      unint64_t v89 = ((v88 ^ (0x101010101010101 * (v85 & 0x7F))) - 0x101010101010101) & ~(v88 ^ (0x101010101010101
                                                                                          * (v85 & 0x7F))) & 0x8080808080808080;
      if (v89) {
        break;
      }
LABEL_124:
      if ((v88 & (~v88 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v90 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v219, v85);
        *(_DWORD *)(v220 + 4 * v90) = v42;
        goto LABEL_127;
      }
      v84 += 8;
    }
    while (*(_DWORD *)(v220 + 4 * ((v87 + (__clz(__rbit64(v89)) >> 3)) & v221)) != v42)
    {
      v89 &= v89 - 1;
      if (!v89) {
        goto LABEL_124;
      }
    }
LABEL_127:
    if (v224)
    {
      unint64_t v91 = (uint64_t *)&v224;
      uint64_t v92 = v224;
      do
      {
        unint64_t v93 = v92;
        uint64_t v94 = v91;
        int v95 = *((_DWORD *)v92 + 7);
        unint64_t v96 = v92 + 1;
        if (v95 >= (int)v42) {
          unint64_t v91 = v92;
        }
        else {
          ++v92;
        }
        uint64_t v92 = (uint64_t *)*v92;
      }
      while (v92);
      if (v91 != (uint64_t *)&v224)
      {
        if (v95 < (int)v42) {
          unint64_t v93 = v94;
        }
        if ((int)v42 >= *((_DWORD *)v93 + 7))
        {
          int v97 = v94 + 1;
          if (v95 >= (int)v42) {
            int v97 = v96;
          }
          int v98 = (uint64_t *)*v97;
          uint64_t v99 = v91;
          if (*v97)
          {
            do
            {
              int64_t v100 = (uint64_t **)v98;
              int v98 = (uint64_t *)*v98;
            }
            while (v98);
          }
          else
          {
            do
            {
              int64_t v100 = (uint64_t **)v99[2];
              BOOL v69 = *v100 == v99;
              uint64_t v99 = (uint64_t *)v100;
            }
            while (!v69);
          }
          if (v223 == (uint64_t **)v91) {
            int v223 = v100;
          }
          --v225;
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v224, v91);
          operator delete(v91);
        }
      }
    }
    uint64_t v101 = (char **)(*(void *)(*((void *)this + 2) + 680) + 48 * v42);
    unint64_t v102 = (int *)v101[1];
    uint64_t v103 = *v101;
    if (**v101 <= -2)
    {
      do
      {
        unint64_t v104 = (__clz(__rbit64(((*(void *)v103 >> 7) & ~*(void *)v103 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v103 += v104;
        v102 += v104;
      }
      while (*v103 < -1);
    }
    int v105 = &v101[3][(void)*v101];
    uint64_t v214 = 0;
    long long v215 = 0uLL;
    if (v103 == v105)
    {
      unint64_t v106 = 0;
    }
    else
    {
      unint64_t v106 = 0;
      unint64_t v107 = v103;
      do
      {
        int v108 = *++v107;
        if (v108 <= -2)
        {
          do
            v107 += (__clz(__rbit64(((*(void *)v107 >> 7) & ~*(void *)v107 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          while (*v107 < -1);
        }
        ++v106;
      }
      while (v107 != v105);
    }
    std::vector<int>::__init_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::const_iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::const_iterator>(&v214, v103, v102, v105, v48, v106);
    std::__sort<std::__less<int,int> &,int *>();
    int v109 = v214;
    unint64_t v5 = v215;
    if (v214 != (void *)v215)
    {
      uint64_t v203 = 0;
      uint64_t v200 = 0;
      int v201 = -1;
      unint64_t v205 = v215;
      while (2)
      {
        uint64_t v114 = 0;
        LODWORD(v210) = 0;
        LODWORD(v210) = *v109;
        unint64_t v138 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v210)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + (int)v210));
        unint64_t v115 = (v138 >> 7) ^ (v229 >> 12);
        uint64_t v139 = 0x101010101010101 * (v138 & 0x7F);
        while (1)
        {
          unint64_t v110 = v115 & v231;
          uint64_t v111 = *(void *)(v229 + v110);
          unint64_t v112 = ((v111 ^ v139) - 0x101010101010101) & ~(v111 ^ v139) & 0x8080808080808080;
          if (v112) {
            break;
          }
LABEL_161:
          if ((v111 & (~v111 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_201;
          }
          v114 += 8;
          unint64_t v115 = v114 + v110;
        }
        while (1)
        {
          unint64_t v113 = (v110 + (__clz(__rbit64(v112)) >> 3)) & v231;
          if (*(_DWORD *)(v230 + 4 * v113) == v210) {
            break;
          }
          v112 &= v112 - 1;
          if (!v112) {
            goto LABEL_161;
          }
        }
        if (v113 == (void)v231) {
          goto LABEL_201;
        }
        uint64_t v116 = *(void *)(*(void *)(*(void *)(*((void *)this + 2) + 48) + 56) + 8 * (int)v210 + 8);
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)&v229, (int *)&v210);
        uint64_t v117 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        if (*(_DWORD *)(v116 + 60) == 12) {
          uint64_t v117 = *(uint64_t **)(v116 + 48);
        }
        uint64_t v118 = *((unsigned int *)v117 + 4);
        if ((int)v118 < 1)
        {
LABEL_316:
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3667);
          int v197 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"Check failed: is_present ", 25);
LABEL_313:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
        }
        uint64_t v119 = 0;
        int v120 = v226;
        do
        {
          unint64_t v122 = &operations_research::sat::_LinearConstraintProto_default_instance_;
          if (*(_DWORD *)(v116 + 60) == 12) {
            unint64_t v122 = *(uint64_t **)(v116 + 48);
          }
          int v121 = *(_DWORD *)(v122[3] + v119);
          if (~v121 > v121) {
            int v121 = ~v121;
          }
          --v120[v121];
          v119 += 4;
        }
        while (4 * v118 != v119);
        uint64_t v123 = 0;
        uint64_t v124 = 0;
        char v125 = 0;
        do
        {
          while (1)
          {
            uint64_t v132 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (*(_DWORD *)(v116 + 60) == 12) {
              uint64_t v132 = *(uint64_t **)(v116 + 48);
            }
            int v133 = *(_DWORD *)(v132[3] + 4 * v123);
            int v134 = ~v133 <= v133 ? *(_DWORD *)(v132[3] + 4 * v123) : ~v133;
            if (v134 == v42) {
              break;
            }
            uint64_t v130 = 0;
            unint64_t v135 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v134)
                   * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                      * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                       + v134));
            unint64_t v131 = (v219 >> 12) ^ (v135 >> 7);
            uint64_t v136 = 0x101010101010101 * (v135 & 0x7F);
            while (1)
            {
              unint64_t v126 = v131 & v221;
              uint64_t v127 = *(void *)(v219 + v126);
              unint64_t v128 = ((v127 ^ v136) - 0x101010101010101) & ~(v127 ^ v136) & 0x8080808080808080;
              if (v128) {
                break;
              }
LABEL_177:
              if ((v127 & (~v127 << 6) & 0x8080808080808080) != 0) {
                goto LABEL_180;
              }
              v130 += 8;
              unint64_t v131 = v130 + v126;
            }
            while (1)
            {
              unint64_t v129 = (v126 + (__clz(__rbit64(v128)) >> 3)) & v221;
              if (*(_DWORD *)(v220 + 4 * v129) == v134) {
                break;
              }
              v128 &= v128 - 1;
              if (!v128) {
                goto LABEL_177;
              }
            }
            if (v129 != (void)v221)
            {
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3664);
              int v195 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)"Check failed: !processed_vars.contains(PositiveRef(ref)) ", 57);
              goto LABEL_313;
            }
LABEL_180:
            if (++v123 == v118) {
              goto LABEL_193;
            }
          }
          if (v125)
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3659);
            long long v193 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
            uint64_t v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"Check failed: !is_present ", 26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"Duplicate variables not supported.", 34);
            goto LABEL_313;
          }
          uint64_t v124 = *(void *)(v132[6] + 8 * v123);
          if (v133 != v42) {
            uint64_t v124 = -v124;
          }
          char v125 = 1;
          ++v123;
        }
        while (v123 != v118);
LABEL_193:
        if ((v125 & 1) == 0) {
          goto LABEL_316;
        }
        if (v124 >= 0) {
          uint64_t v137 = v124;
        }
        else {
          uint64_t v137 = -v124;
        }
        if (v137 == 1)
        {
          unint64_t v5 = v205;
          if (v203 < (int)v118)
          {
            uint64_t v200 = v124;
            int v201 = (int)v210;
            uint64_t v203 = (int)v118;
          }
        }
        else
        {
          unint64_t v5 = v205;
        }
LABEL_201:
        if (++v109 != (_DWORD *)v5) {
          continue;
        }
        break;
      }
      if (v201 == -1)
      {
        int v169 = v204;
      }
      else
      {
        uint64_t v140 = *((void *)this + 2);
        long long __p = operator new(0x30uLL);
        *(_OWORD *)unint64_t v213 = xmmword_23CE7ECB0;
        strcpy((char *)__p, "objective: expanded objective constraint.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v140, (uint64_t)&__p);
        if (SHIBYTE(v213[1]) < 0) {
          operator delete(__p);
        }
        uint64_t v141 = v200;
        if (v200 < 0) {
          uint64_t v141 = -v200;
        }
        long long __p = (void *)v141;
        LODWORD(v209[0]) = 1;
        if (v141 != 1) {
          google::MakeCheckOpString<long long,int>((int)&__p, (int)v209, "std::abs(objective_coeff_in_expanded_constraint) == 1");
        }
        uint64_t v142 = *((void *)this + 2);
        uint64_t v199 = *(void *)(*(void *)(*(void *)(v142 + 48) + 56) + 8 * v201 + 8);
        operations_research::sat::PresolveContext::SubstituteVariableInObjective(v142, (int)v42, v200, v199, (void **)&v216);
        uint64_t v144 = v216;
        for (iuint64_t i = v217; v144 != ii; ++v144)
        {
          uint64_t v149 = 0;
          uint64_t v150 = *v144;
          unint64_t v151 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v150)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v150));
          unint64_t v152 = (v151 >> 7) ^ (v219 >> 12);
          uint64_t v153 = 0x101010101010101 * (v151 & 0x7F);
          while (1)
          {
            unint64_t v154 = v152 & v221;
            uint64_t v155 = *(void *)(v219 + v154);
            unint64_t v156 = ((v155 ^ v153) - 0x101010101010101) & ~(v155 ^ v153) & 0x8080808080808080;
            if (v156) {
              break;
            }
LABEL_222:
            if ((v155 & (~v155 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_225;
            }
            v149 += 8;
            unint64_t v152 = v149 + v154;
          }
          while (1)
          {
            unint64_t v157 = (v154 + (__clz(__rbit64(v156)) >> 3)) & v221;
            if (*(_DWORD *)(v220 + 4 * v157) == v150) {
              break;
            }
            v156 &= v156 - 1;
            if (!v156) {
              goto LABEL_222;
            }
          }
          if (v157 == (void)v221)
          {
LABEL_225:
            unint64_t v158 = v224;
            uint64_t v159 = &v224;
            long long v160 = &v224;
            if (v224)
            {
              while (1)
              {
                while (1)
                {
                  long long v160 = (uint64_t **)v158;
                  int v161 = *((_DWORD *)v158 + 7);
                  if ((int)v150 >= v161) {
                    break;
                  }
                  unint64_t v158 = *v160;
                  uint64_t v159 = v160;
                  if (!*v160) {
                    goto LABEL_232;
                  }
                }
                if (v161 >= (int)v150) {
                  break;
                }
                unint64_t v158 = v160[1];
                if (!v158)
                {
                  uint64_t v159 = v160 + 1;
                  goto LABEL_232;
                }
              }
            }
            else
            {
LABEL_232:
              uint64_t v162 = operator new(0x20uLL);
              v162[7] = v150;
              *(void *)uint64_t v162 = 0;
              *((void *)v162 + 1) = 0;
              *((void *)v162 + 2) = v160;
              *uint64_t v159 = (uint64_t *)v162;
              if (*v223)
              {
                int v223 = (uint64_t **)*v223;
                uint64_t v162 = *v159;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v224, (uint64_t *)v162);
              ++v225;
            }
            continue;
          }
        }
        uint64_t v145 = *((void *)this + 2);
        if (*(void *)(*(void *)(v145 + 680) + 48 * v42 + 16) == 1)
        {
          int v146 = v204;
          if (!*(unsigned char *)(v145 + 64))
          {
            unint64_t v147 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (*(_DWORD *)(v199 + 60) == 12) {
              unint64_t v147 = *(uint64_t **)(v199 + 48);
            }
            operations_research::Domain::FromFlatSpanOfIntervals(v147[9], *((int *)v147 + 16), (unint64_t *)&__p, v143);
            if (v203 >= 1)
            {
              for (junint64_t j = 0; v203 != jj; ++jj)
              {
                unint64_t v163 = &operations_research::sat::_LinearConstraintProto_default_instance_;
                if (*(_DWORD *)(v199 + 60) == 12) {
                  unint64_t v163 = *(uint64_t **)(v199 + 48);
                }
                BOOL v164 = (const char *)*(unsigned int *)(v163[3] + 4 * jj);
                if (~v164 <= (int)v164) {
                  int v165 = *(_DWORD *)(v163[3] + 4 * jj);
                }
                else {
                  int v165 = ~v164;
                }
                if (v165 == v42) {
                  continue;
                }
                operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v164, v207);
                uint64_t v166 = &operations_research::sat::_LinearConstraintProto_default_instance_;
                if (*(_DWORD *)(v199 + 60) == 12) {
                  uint64_t v166 = *(uint64_t **)(v199 + 48);
                }
                operations_research::Domain::MultiplicationBy((operations_research::Domain *)v207, 0, -*(void *)(v166[6] + 8 * jj), v208);
                operations_research::Domain::AdditionWith((operations_research::Domain *)&__p, (const operations_research::Domain *)v208, v209, v167);
                operations_research::Domain::RelaxIfTooComplex(v209, v168, (unint64_t *)&v210);
                if (__p) {
                  operator delete(v213[0]);
                }
                long long __p = v210;
                *(_OWORD *)unint64_t v213 = *(_OWORD *)v211;
                v210 = 0;
                if (v209[0])
                {
                  operator delete((void *)v209[1]);
                  if ((v208[0] & 1) == 0)
                  {
LABEL_247:
                    if (v207[0]) {
                      goto LABEL_251;
                    }
                    continue;
                  }
                }
                else if ((v208[0] & 1) == 0)
                {
                  goto LABEL_247;
                }
                operator delete((void *)v208[1]);
                if (v207[0]) {
LABEL_251:
                }
                  operator delete((void *)v207[1]);
              }
            }
            operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&__p, v200, (unint64_t *)&v210);
            if (__p) {
              operator delete(v213[0]);
            }
            long long __p = v210;
            *(_OWORD *)unint64_t v213 = *(_OWORD *)v211;
            operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v42, (unint64_t *)&v210);
            int IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&__p, (const operations_research::Domain *)&v210);
            if (v210) {
              operator delete(v211[0]);
            }
            if (IsIncludedIn)
            {
              uint64_t v171 = *((void *)this + 2);
              v210 = operator new(0x30uLL);
              *(_OWORD *)uint64_t v211 = xmmword_23CE85CD0;
              strcpy((char *)v210, "objective: removed objective constraint.");
              operations_research::sat::PresolveContext::UpdateRuleStats(v171, (uint64_t)&v210);
              if (SHIBYTE(v211[1]) < 0) {
                operator delete(v210);
              }
              uint64_t v172 = *(void *)(*((void *)this + 2) + 56);
              uint64_t v173 = *(int **)(v172 + 56);
              if (!v173)
              {
                int v175 = *(_DWORD *)(v172 + 52);
                goto LABEL_273;
              }
              uint64_t v174 = *(int *)(v172 + 48);
              int v175 = *v173;
              if ((int)v174 < *v173)
              {
                *(_DWORD *)(v172 + 48) = v174 + 1;
                unint64_t v176 = *(operations_research::sat::ConstraintProto **)&v173[2 * v174 + 2];
                goto LABEL_275;
              }
              if (v175 == *(_DWORD *)(v172 + 52))
              {
LABEL_273:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v172 + 40), v175 + 1);
                uint64_t v173 = *(int **)(v172 + 56);
                int v175 = *v173;
              }
              *uint64_t v173 = v175 + 1;
              unint64_t v176 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v172 + 40));
              uint64_t v177 = *(void *)(v172 + 56);
              uint64_t v178 = *(int *)(v172 + 48);
              *(_DWORD *)(v172 + 48) = v178 + 1;
              *(void *)(v177 + 8 * v178 + 8) = v176;
LABEL_275:
              operations_research::sat::ConstraintProto::CopyFrom(v176, (const operations_research::sat::ConstraintProto *)v199);
              operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*(void *)(*(void *)(*((void *)this + 2) + 48) + 56) + 8 * v201 + 8));
              operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v201);
            }
            else
            {
              int v202 = v201;
            }
            if (__p) {
              operator delete(v213[0]);
            }
          }
        }
        else
        {
          int v146 = v204;
        }
        int v169 = v146 + 1;
      }
      int v204 = v169;
      int v109 = v214;
    }
    if (v109)
    {
      *(void *)&long long v215 = v109;
      operator delete(v109);
    }
  }
  while (*((void *)&v230 + 1));
LABEL_279:
  unint64_t v179 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (v204 == 1 && v7 == 1 && v202 != -1)
  {
    uint64_t v214 = operator new(0x30uLL);
    long long v215 = xmmword_23CE7E460;
    strcpy((char *)v214, "objective: removed unique objective constraint.");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v179, (uint64_t)&v214);
    if (SHIBYTE(v215) < 0) {
      operator delete(v214);
    }
    uint64_t v180 = *((void *)this + 2);
    uint64_t v181 = *(void *)(v180 + 56);
    long long v182 = *(const operations_research::sat::ConstraintProto **)(*(void *)(*(void *)(v180 + 48) + 56)
                                                               + 8 * v202
                                                               + 8);
    uint64_t v183 = *(int **)(v181 + 56);
    if (!v183)
    {
      int v185 = *(_DWORD *)(v181 + 52);
      goto LABEL_289;
    }
    uint64_t v184 = *(int *)(v181 + 48);
    int v185 = *v183;
    if ((int)v184 < *v183)
    {
      *(_DWORD *)(v181 + 48) = v184 + 1;
      uint64_t v186 = *(operations_research::sat::ConstraintProto **)&v183[2 * v184 + 2];
      goto LABEL_291;
    }
    if (v185 == *(_DWORD *)(v181 + 52))
    {
LABEL_289:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v181 + 40), v185 + 1);
      uint64_t v183 = *(int **)(v181 + 56);
      int v185 = *v183;
    }
    *uint64_t v183 = v185 + 1;
    uint64_t v186 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v181 + 40));
    uint64_t v187 = *(void *)(v181 + 56);
    uint64_t v188 = *(int *)(v181 + 48);
    *(_DWORD *)(v181 + 48) = v188 + 1;
    *(void *)(v187 + 8 * v188 + 8) = v186;
LABEL_291:
    operations_research::sat::ConstraintProto::CopyFrom(v186, v182);
    operations_research::sat::ConstraintProto::Clear(v182);
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v202);
LABEL_292:
    unint64_t v179 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  }
  BOOL v189 = operations_research::sat::PresolveContext::CanonicalizeObjective(v179, v5);
  BOOL v190 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (v189)
  {
    operations_research::sat::PresolveContext::WriteObjectiveToProto(v190);
  }
  else
  {
    HIBYTE(v215) = 0;
    LOBYTE(v214) = 0;
    operations_research::sat::PresolveContext::NotifyThatModelIsUnsat((uint64_t)v190, (uint64_t)&v214);
    if (SHIBYTE(v215) < 0) {
      operator delete(v214);
    }
  }
  if (v216)
  {
    int v217 = v216;
    operator delete(v216);
  }
  if ((void)v221)
  {
    operator delete((void *)v219);
    unint64_t v219 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v222 = 0;
    *(void *)&long long v221 = 0;
    long long v220 = 0uLL;
  }
  if (*((void *)&v221 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v221 + 1));
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v223, v224);
  if (v226) {
    operator delete(v226);
  }
  if ((void)v231)
  {
    operator delete((void *)v229);
    unint64_t v229 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v232 = 0;
    *(void *)&long long v231 = 0;
    long long v230 = 0uLL;
  }
  if (*((void *)&v231 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v231 + 1));
  }
}

void sub_23CC5DB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_23CC5DB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,char a28,void *a29,uint64_t a30,char a31,void *a32,uint64_t a33,void *a34,void *a35,int a36,__int16 a37,char a38,char a39,void *a40,void *a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v53 = *(void **)(v51 - 256);
  if (v53)
  {
    *(void *)(v51 - 248) = v53;
    operator delete(v53);
  }
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set(v51 - 232);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v51 - 184, *(void **)(v51 - 176));
  uint64_t v54 = *(void **)(v51 - 160);
  if (v54)
  {
    *(void *)(v51 - 152) = v54;
    operator delete(v54);
  }
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set(v51 - 136);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v153 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 2);
  if (*(unsigned char *)(v1 + 504)) {
    return;
  }
  uint64_t v2 = *(unsigned int *)(*(void *)(v1 + 48) + 48);
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  char v125 = 0;
  int v120 = 0;
  int v121 = 0;
  unint64_t v122 = 0;
  if ((int)v2 < 1) {
    goto LABEL_131;
  }
  int v3 = 0;
  BOOL v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v109 = 0;
  uint64_t v103 = v2;
  unint64_t v104 = this;
  do
  {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(*((void *)this + 2) + 48) + 56) + 8 * v6 + 8);
    if (*(_DWORD *)(v9 + 60) == 20)
    {
      unint64_t v105 = (unint64_t)v4;
      unint64_t v106 = (char *)v5;
      unint64_t v107 = v3;
      *(void *)unint64_t v138 = 0;
      *(void *)&v138[8] = 0;
      uint64_t v137 = 0;
      uint64_t v10 = *(void *)(v9 + 48);
      uint64_t v11 = *(int *)(v10 + 16);
      if (v11)
      {
        __n128 v12 = 0;
        uint64_t v13 = *(_DWORD **)(v10 + 24);
        uint64_t v14 = &v13[v11];
        while (1)
        {
          int v16 = 2 * *v13;
          if ((unint64_t)v12 >= *(void *)&v138[8]) {
            break;
          }
          *(_DWORD *)__n128 v12 = v16;
          uint64_t v15 = (uint64_t)(v12 + 4);
LABEL_12:
          *(void *)unint64_t v138 = v15;
          ++v13;
          __n128 v12 = (char *)v15;
          if (v13 == v14) {
            goto LABEL_40;
          }
        }
        unint64_t v17 = v137;
        int64_t v18 = v12 - v137;
        uint64_t v19 = (v12 - v137) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = *(void *)&v138[8] - (void)v137;
        if ((uint64_t)(*(void *)&v138[8] - (void)v137) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          if (v22 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = operator new(4 * v22);
          uint64_t v24 = &v23[4 * v19];
          *(_DWORD *)uint64_t v24 = v16;
          uint64_t v15 = (uint64_t)(v24 + 4);
          if (v12 == v17) {
            goto LABEL_28;
          }
LABEL_25:
          unint64_t v25 = v12 - 4 - v17;
          if (v25 < 0xBC)
          {
            unint64_t v26 = v12;
            goto LABEL_27;
          }
          if (&v23[v18 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v23[v18 - 4])
          {
            unint64_t v26 = v12;
            goto LABEL_27;
          }
          if (&v12[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4)
          {
            unint64_t v26 = v12;
            goto LABEL_27;
          }
          if ((unint64_t)(v17 - v23) < 0x20)
          {
            unint64_t v26 = v12;
            goto LABEL_27;
          }
          uint64_t v28 = (v25 >> 2) + 1;
          uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v26 = &v12[-v29];
          v24 -= v29;
          unint64_t v30 = &v23[4 * v19 - 16];
          unint64_t v31 = v12 - 16;
          uint64_t v32 = v28 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v33 = *(_OWORD *)v31;
            *(v30 - 1) = *((_OWORD *)v31 - 1);
            _OWORD *v30 = v33;
            v30 -= 2;
            v31 -= 32;
            v32 -= 8;
          }
          while (v32);
          if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_27:
              int v27 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v24 - 1) = v27;
              v24 -= 4;
            }
            while (v26 != v17);
          }
        }
        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = (char *)(4 * v19);
          *(_DWORD *)(4 * v19) = v16;
          uint64_t v15 = 4 * v19 + 4;
          if (v12 != v17) {
            goto LABEL_25;
          }
        }
LABEL_28:
        uint64_t v137 = v24;
        *(void *)unint64_t v138 = v15;
        *(void *)&v138[8] = &v23[4 * v22];
        if (v17) {
          operator delete(v17);
        }
        goto LABEL_12;
      }
LABEL_40:
      unint64_t v34 = v121;
      if ((unint64_t)v121 >= v122)
      {
        unint64_t v39 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)&v120, (uint64_t)&v137);
        uint64_t v40 = v106;
        int v3 = v107;
      }
      else
      {
        *(void *)int v121 = 0;
        *((void *)v34 + 1) = 0;
        *((void *)v34 + 2) = 0;
        uint64_t v35 = v137;
        int64_t v36 = *(void *)v138 - (void)v137;
        if (*(char **)v138 != v137)
        {
          if (v36 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v37 = (char *)operator new(*(void *)v138 - (void)v137);
          *(void *)unint64_t v34 = v37;
          *((void *)v34 + 1) = v37;
          int v38 = &v37[4 * (v36 >> 2)];
          *((void *)v34 + 2) = v38;
          memcpy(v37, v35, v36);
          *((void *)v34 + 1) = v38;
        }
        unint64_t v39 = v34 + 24;
        uint64_t v40 = v106;
        int v3 = v107;
      }
      BOOL v4 = (char *)v105;
      int v121 = v39;
      if ((unint64_t)v40 < v105)
      {
        *(_DWORD *)uint64_t v40 = v6;
        uint64_t v5 = (uint64_t)(v40 + 4);
        uint64_t v124 = v40 + 4;
        uint64_t v8 = v137;
        uint64_t v7 = *(void *)v138;
        if (!v137)
        {
LABEL_6:
          LODWORD(v109) = v109 + ((unint64_t)(v7 - (void)v8) >> 2);
          ++HIDWORD(v109);
          uint64_t v2 = v103;
          this = v104;
          goto LABEL_7;
        }
LABEL_5:
        *(void *)unint64_t v138 = v8;
        operator delete(v8);
        goto LABEL_6;
      }
      uint64_t v41 = (v40 - v3) >> 2;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v105 - (void)v3) >> 1 > v42) {
        unint64_t v42 = (uint64_t)(v105 - (void)v3) >> 1;
      }
      if (v105 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43)
      {
        if (v43 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v44 = operator new(4 * v43);
        uint64_t v45 = &v44[4 * v41];
        *uint64_t v45 = v6;
        uint64_t v5 = (uint64_t)(v45 + 1);
        if (v40 == v3)
        {
LABEL_61:
          BOOL v4 = &v44[4 * v43];
          uint64_t v123 = v45;
          uint64_t v124 = (_DWORD *)v5;
          char v125 = v4;
          if (v3) {
            operator delete(v3);
          }
          int v3 = (char *)v45;
          uint64_t v124 = (_DWORD *)v5;
          uint64_t v8 = v137;
          uint64_t v7 = *(void *)v138;
          if (!v137) {
            goto LABEL_6;
          }
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v45 = (_DWORD *)(4 * v41);
        *(_DWORD *)(4 * v41) = v6;
        uint64_t v5 = 4 * v41 + 4;
        if (v40 == v3) {
          goto LABEL_61;
        }
      }
      unint64_t v46 = v40 - 4 - v3;
      if (v46 >= 0xBC)
      {
        if (&v44[v40 - v3 - 4 - (v46 & 0xFFFFFFFFFFFFFFFCLL)] > &v44[v40 - v3 - 4])
        {
          uint64_t v47 = v40;
        }
        else if (&v40[-(v46 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v40 - 4)
        {
          uint64_t v47 = v40;
        }
        else if ((unint64_t)(v3 - v44) >= 0x20)
        {
          uint64_t v49 = (v46 >> 2) + 1;
          uint64_t v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v47 = &v40[-v50];
          uint64_t v45 = (_DWORD *)((char *)v45 - v50);
          uint64_t v51 = &v44[4 * v41 - 16];
          unint64_t v52 = v40 - 16;
          uint64_t v53 = v49 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            _OWORD *v51 = v54;
            v51 -= 2;
            v52 -= 32;
            v53 -= 8;
          }
          while (v53);
          if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v47 = v40;
        }
      }
      else
      {
        uint64_t v47 = v40;
      }
      do
      {
        int v48 = *((_DWORD *)v47 - 1);
        v47 -= 4;
        *--uint64_t v45 = v48;
      }
      while (v47 != v3);
      goto LABEL_61;
    }
LABEL_7:
    ++v6;
  }
  while (v6 != v2);
  if (HIDWORD(v109))
  {
    v113[0] = 0;
    v113[1] = 0;
    v116[0] = 0;
    v116[1] = 0;
    uint64_t v114 = 0;
    unint64_t v115 = v116;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v117 = 0;
    unint64_t v55 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)v113);
    operations_research::sat::Trail::Resize(v55, v2);
    uint64_t v56 = (operations_research::sat::BinaryImplicationGraph *)operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)v113);
    operations_research::sat::BinaryImplicationGraph::Resize(v56, v2);
    unint64_t v57 = (char **)v120;
    unint64_t v58 = v121;
    if (v120 != v121)
    {
      while (operations_research::sat::BinaryImplicationGraph::AddAtMostOne((uint64_t)v56, *v57, (v57[1] - *v57) >> 2))
      {
        v57 += 3;
        if (v57 == (char **)v58) {
          goto LABEL_79;
        }
      }
      uint64_t v99 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v137, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3794);
      int64_t v100 = (void *)google::LogMessage::stream(v99);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Check failed: graph->AddAtMostOne(clique) ", 42);
LABEL_135:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v137);
    }
LABEL_79:
    if ((operations_research::sat::BinaryImplicationGraph::DetectEquivalences(v56, 0) & 1) == 0)
    {
      uint64_t v101 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v137, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3796);
      unint64_t v102 = (void *)google::LogMessage::stream(v101);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"Check failed: graph->DetectEquivalences() ", 42);
      goto LABEL_135;
    }
    operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(v56, (uint64_t **)&v120, (uint64_t)*(double *)(*(void *)v104 + 528));
    if (v121 != v120)
    {
      uint64_t v59 = 0;
      unsigned int v108 = 0;
      unint64_t v60 = 0;
      while (1)
      {
        uint64_t v62 = *(void *)(*(void *)(*(void *)(*((void *)v104 + 2) + 48) + 56) + 8 * *((int *)v123 + v59) + 8);
        operations_research::sat::ConstraintProto::Clear((operations_research::sat::ConstraintProto *)v62);
        unint64_t v61 = v120;
        int v63 = (int **)((char *)v120 + 24 * v59);
        uint64_t v65 = *v63;
        int v64 = v63[1];
        if (*v63 != v64) {
          break;
        }
LABEL_83:
        if (0xAAAAAAAAAAAAAAABLL * ((v121 - v61) >> 3) <= ++v59) {
          goto LABEL_98;
        }
      }
      while (2)
      {
        int v66 = *v65;
        if (*v65)
        {
          int v97 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v137, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3810);
          int v98 = (void *)google::LogMessage::stream(v97);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Check failed: l.IsPositive() ", 29);
          goto LABEL_135;
        }
        if (*(_DWORD *)(v62 + 60) == 20)
        {
          unint64_t v67 = *(void *)(v62 + 48);
          uint64_t v69 = *(unsigned int *)(v67 + 16);
          uint64_t v68 = (unsigned int *)(v67 + 16);
          int v70 = v69 + 1;
          if (v69 == *(_DWORD *)(v67 + 20)) {
            goto LABEL_86;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v62);
          *(_DWORD *)(v62 + 60) = 20;
          uint64_t v71 = *(void *)(v62 + 8);
          uint64_t v72 = (google::protobuf::Arena *)(v71 & 0xFFFFFFFFFFFFFFFELL);
          if (v71) {
            uint64_t v72 = *(google::protobuf::Arena **)v72;
          }
          unint64_t v67 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v72);
          *(void *)(v62 + 48) = v67;
          uint64_t v69 = *(unsigned int *)(v67 + 16);
          uint64_t v68 = (unsigned int *)(v67 + 16);
          int v70 = v69 + 1;
          if (v69 == *(_DWORD *)(v67 + 20)) {
LABEL_86:
          }
            google::protobuf::RepeatedField<int>::Reserve(v68, v70);
        }
        *(_DWORD *)(*(void *)(v67 + 24) + 4 * v69) = v66 >> 1;
        *(_DWORD *)(v67 + 16) = v70;
        if (++v65 == v64)
        {
          ++v108;
          unint64_t v61 = v120;
          unint64_t v60 = (absl::lts_2020_02_25::numbers_internal *)(v60
                                                         + ((*((void *)v120 + 3 * v59 + 1)
                                                                         - *((void *)v120 + 3 * v59)) >> 2));
          goto LABEL_83;
        }
        continue;
      }
    }
    unint64_t v60 = 0;
    unsigned int v108 = 0;
LABEL_98:
    if (v109 != (absl::lts_2020_02_25::numbers_internal *)__PAIR64__(v108, v60))
    {
      unint64_t v73 = v104;
      if (*operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints(void)::vlocal__ >= 1
        && (operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints(void)::vlocal__ != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)&operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_presolve.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v112, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3818);
        unint64_t v74 = (void *)google::LogMessage::stream((google::LogMessage *)v112);
        uint64_t v76 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)HIDWORD(v109), v130, v75);
        *(void *)&long long v129 = v130;
        *((void *)&v129 + 1) = v76 - v130;
        int v78 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v109, v128, v77);
        unint64_t v126 = v128;
        uint64_t v127 = v78 - v128;
        uint64_t v137 = "Merged ";
        *(void *)unint64_t v138 = 7;
        *(_OWORD *)&v138[8] = v129;
        uint64_t v139 = " no-overlaps (";
        uint64_t v140 = 14;
        uint64_t v141 = v128;
        uint64_t v142 = v78 - v128;
        __n128 v143 = " intervals) into ";
        uint64_t v144 = 17;
        long long v80 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v108, v136, v79);
        int v134 = v136;
        uint64_t v135 = v80 - v136;
        uint64_t v145 = v136;
        uint64_t v146 = v80 - v136;
        unint64_t v147 = " no-overlaps (";
        uint64_t v148 = 14;
        uint64_t v82 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v60, v133, v81);
        unint64_t v131 = v133;
        uint64_t v132 = v82 - v133;
        uint64_t v149 = v133;
        uint64_t v150 = v82 - v133;
        unint64_t v151 = " intervals).";
        uint64_t v152 = 12;
        absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)&v137, 9, (char *)__p);
        if ((v111 & 0x80u) == 0) {
          uint64_t v83 = __p;
        }
        else {
          uint64_t v83 = (void **)__p[0];
        }
        if ((v111 & 0x80u) == 0) {
          uint64_t v84 = v111;
        }
        else {
          uint64_t v84 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v83, v84);
        unint64_t v73 = v104;
        if ((char)v111 < 0) {
          operator delete(__p[0]);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v112);
      }
      uint64_t v85 = *((void *)v73 + 2);
      uint64_t v137 = (char *)operator new(0x20uLL);
      *(_OWORD *)unint64_t v138 = xmmword_23CE7E3F0;
      strcpy(v137, "no_overlap: merged constraints");
      operations_research::sat::PresolveContext::UpdateRuleStats(v85, (uint64_t)&v137);
      if ((v138[15] & 0x80000000) != 0) {
        operator delete(v137);
      }
    }
    uint64_t v86 = v117;
    if (v117)
    {
      unint64_t v87 = v118;
      uint64_t v88 = v117;
      if (v118 != v117)
      {
        do
        {
          uint64_t v90 = *--v87;
          uint64_t v89 = v90;
          *unint64_t v87 = 0;
          if (v90) {
            (*(void (**)(uint64_t))(*(void *)v89 + 8))(v89);
          }
        }
        while (v87 != v86);
        uint64_t v88 = v117;
      }
      uint64_t v118 = v86;
      operator delete(v88);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v115, v116[0]);
    if (SHIBYTE(v114) < 0) {
      operator delete(v113[0]);
    }
  }
  unint64_t v91 = (char *)v120;
  if (v120)
  {
    uint64_t v92 = v121;
    unint64_t v93 = v120;
    if (v121 != v120)
    {
      uint64_t v94 = v121;
      do
      {
        unint64_t v96 = (void *)*((void *)v94 - 3);
        v94 -= 24;
        int v95 = v96;
        if (v96)
        {
          *((void *)v92 - 2) = v95;
          operator delete(v95);
        }
        uint64_t v92 = v94;
      }
      while (v94 != v91);
      unint64_t v93 = v120;
    }
    int v121 = v91;
    operator delete(v93);
  }
LABEL_131:
  if (v123) {
    operator delete(v123);
  }
}

void sub_23CC5E7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::Trail::Resize(operations_research::sat::Trail *this, int a2)
{
  int v4 = (2 * a2) & ~((2 * a2) >> 31);
  *((_DWORD *)this + 4) = v4;
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *((void *)this + 4);
  uint64_t v5 = (char *)this + 24;
  unint64_t v8 = (v4 + 63) >> 6;
  uint64_t v20 = 0;
  unint64_t v9 = (v7 - v6) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *((void *)this + 4) = v6 + 8 * v8;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v5, v8 - v9, &v20);
  }
  uint64_t v10 = *((void *)this + 15);
  unint64_t v11 = (*((void *)this + 16) - v10) >> 3;
  if (a2 <= v11)
  {
    if (a2 < v11) {
      *((void *)this + 16) = v10 + 8 * a2;
    }
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 15, a2 - v11);
  }
  uint64_t v12 = *((void *)this + 9);
  unint64_t v13 = (*((void *)this + 10) - v12) >> 2;
  if (a2 <= v13)
  {
    if (a2 < v13) {
      *((void *)this + 10) = v12 + 4 * a2;
    }
  }
  else
  {
    std::vector<operations_research::sat::Literal>::__append((uint64_t)this + 72, a2 - v13);
  }
  uint64_t v14 = *((void *)this + 28);
  unint64_t v15 = (*((void *)this + 29) - v14) >> 4;
  if (a2 <= v15)
  {
    if (a2 < v15) {
      *((void *)this + 29) = v14 + 16 * a2;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 28, a2 - v15);
  }
  uint64_t v16 = *((void *)this + 31);
  unint64_t v17 = (*((void *)this + 32) - v16) >> 2;
  if (a2 <= v17)
  {
    if (a2 < v17) {
      *((void *)this + 32) = v16 + 4 * a2;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 248), a2 - v17);
  }
  uint64_t v18 = *((void *)this + 19);
  unint64_t v19 = (*((void *)this + 20) - v18) >> 2;
  if (a2 <= v19)
  {
    if (a2 < v19) {
      *((void *)this + 20) = v18 + 4 * a2;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 152), a2 - v19);
  }
}

void operations_research::sat::CpModelPresolver::TransformIntoMaxCliques(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v1 = (char **)*((void *)this + 2);
  if (*((unsigned char *)v1 + 504)) {
    return;
  }
  uint64_t v2 = (char ***)this;
  uint64_t v3 = *((unsigned int *)v1[6] + 12);
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  unint64_t v120 = 0;
  if ((int)v3 < 1)
  {
    uint64_t v49 = 0;
    int v48 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v104 = v3;
    do
    {
      uint64_t v5 = *(void *)(*((void *)v2[2][6] + 7) + 8 * v4 + 8);
      int v6 = *(_DWORD *)(v5 + 60);
      if (v6 == 4)
      {
        if (*(_DWORD *)(v5 + 16) == 1)
        {
          unint64_t v31 = *(operations_research::sat::ConstraintProto **)(*((void *)v2[2][6] + 7) + 8 * v4 + 8);
          uint64_t v32 = *(void *)(v5 + 48);
          uint64_t v33 = *(int *)(v32 + 16);
          if (v33)
          {
            unint64_t v34 = *(int **)(v32 + 24);
            int v35 = **((_DWORD **)v31 + 3);
            if (v35 >= 0) {
              uint64_t v36 = (2 * v35);
            }
            else {
              uint64_t v36 = (2 * ~v35) | 1u;
            }
            uint64_t v37 = 4 * v33;
            do
            {
              int v38 = *v34;
              unint64_t v39 = operator new(8uLL);
              int v40 = (2 * ~v38) | 1;
              if (v38 >= 0) {
                int v40 = 2 * v38;
              }
              __p[0] = v39;
              *unint64_t v39 = v36 | ((unint64_t)(v40 ^ 1u) << 32);
              __p[1] = v39 + 1;
              unint64_t v112 = (char *)(v39 + 1);
              uint64_t v41 = v119;
              if ((unint64_t)v119 < v120)
              {
                uint64_t *v119 = 0;
                v41[1] = 0;
                v41[2] = 0;
                *(_OWORD *)uint64_t v41 = *(_OWORD *)__p;
                v41[2] = (uint64_t)v112;
                uint64_t v119 = v41 + 3;
              }
              else
              {
                uint64_t v119 = (uint64_t *)std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)&v118, (uint64_t)__p);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              ++v34;
              v37 -= 4;
            }
            while (v37);
          }
          operations_research::sat::ConstraintProto::Clear(v31);
          operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v2[2], v4);
        }
      }
      else if (v6 == 26)
      {
        __p[1] = 0;
        unint64_t v112 = 0;
        __p[0] = 0;
        unint64_t v107 = (operations_research::sat::ConstraintProto *)v5;
        uint64_t v7 = *(void *)(v5 + 48);
        uint64_t v8 = *(int *)(v7 + 16);
        if (v8)
        {
          unint64_t v9 = 0;
          uint64_t v10 = *(int **)(v7 + 24);
          unint64_t v11 = &v10[v8];
          do
          {
            if (*v10 >= 0) {
              int v13 = 2 * *v10;
            }
            else {
              int v13 = (2 * ~*v10) | 1;
            }
            if (v9 < v112)
            {
              *(_DWORD *)unint64_t v9 = v13;
              uint64_t v12 = v9 + 4;
            }
            else
            {
              uint64_t v14 = (char *)__p[0];
              int64_t v15 = v9 - (char *)__p[0];
              uint64_t v16 = (v9 - (char *)__p[0]) >> 2;
              unint64_t v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v18 = v112 - (char *)__p[0];
              if ((v112 - (char *)__p[0]) >> 1 > v17) {
                unint64_t v17 = v18 >> 1;
              }
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v19 = v17;
              }
              if (v19)
              {
                if (v19 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v20 = operator new(4 * v19);
                uint64_t v21 = (int *)&v20[4 * v16];
                int *v21 = v13;
                uint64_t v12 = v21 + 1;
                if (v9 != v14)
                {
LABEL_24:
                  unint64_t v22 = v9 - 4 - v14;
                  if (v22 < 0xBC
                    || &v20[v15 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v15 - 4]
                    || &v9[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4
                    || (unint64_t)(v9 - v20 - v15) < 0x20)
                  {
                    uint64_t v23 = v9;
                  }
                  else
                  {
                    uint64_t v25 = (v22 >> 2) + 1;
                    uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
                    uint64_t v23 = &v9[-v26];
                    uint64_t v21 = (int *)((char *)v21 - v26);
                    int v27 = &v20[4 * v16 - 16];
                    uint64_t v28 = v9 - 16;
                    uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v30 = *(_OWORD *)v28;
                      *(v27 - 1) = *((_OWORD *)v28 - 1);
                      *int v27 = v30;
                      v27 -= 2;
                      v28 -= 32;
                      v29 -= 8;
                    }
                    while (v29);
                    if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_27:
                      __p[0] = v21;
                      __p[1] = v12;
                      unint64_t v112 = &v20[4 * v19];
                      if (!v14) {
                        goto LABEL_10;
                      }
LABEL_31:
                      operator delete(v14);
                      goto LABEL_10;
                    }
                  }
                  do
                  {
                    int v24 = *((_DWORD *)v23 - 1);
                    v23 -= 4;
                    *--uint64_t v21 = v24;
                  }
                  while (v23 != v14);
                  goto LABEL_27;
                }
              }
              else
              {
                uint64_t v20 = 0;
                uint64_t v21 = (int *)(4 * v16);
                *(_DWORD *)(4 * v16) = v13;
                uint64_t v12 = (void *)(4 * v16 + 4);
                if (v9 != v14) {
                  goto LABEL_24;
                }
              }
              __p[0] = v21;
              __p[1] = v12;
              unint64_t v112 = &v20[4 * v19];
              if (v14) {
                goto LABEL_31;
              }
            }
LABEL_10:
            __p[1] = v12;
            ++v10;
            unint64_t v9 = (char *)v12;
          }
          while (v10 != v11);
        }
        unint64_t v42 = v119;
        if ((unint64_t)v119 >= v120)
        {
          uint64_t v47 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)&v118, (uint64_t)__p);
          uint64_t v3 = v104;
          uint64_t v2 = (char ***)this;
        }
        else
        {
          uint64_t *v119 = 0;
          v42[1] = 0;
          v42[2] = 0;
          unint64_t v43 = __p[0];
          int64_t v44 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] != __p[0])
          {
            if (v44 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v45 = (char *)operator new((char *)__p[1] - (char *)__p[0]);
            *unint64_t v42 = (uint64_t)v45;
            v42[1] = (uint64_t)v45;
            unint64_t v46 = &v45[4 * (v44 >> 2)];
            v42[2] = (uint64_t)v46;
            memcpy(v45, v43, v44);
            v42[1] = (uint64_t)v46;
          }
          uint64_t v47 = (char *)(v42 + 3);
          uint64_t v3 = v104;
          uint64_t v2 = (char ***)this;
        }
        uint64_t v119 = (uint64_t *)v47;
        operations_research::sat::ConstraintProto::Clear(v107);
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v2[2], v4);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v4;
    }
    while (v4 != v3);
    uint64_t v49 = v118;
    int v48 = v119;
    uint64_t v1 = v2[2];
  }
  __p[0] = 0;
  __p[1] = 0;
  v114[0] = 0;
  v114[1] = 0;
  unint64_t v112 = 0;
  unint64_t v113 = v114;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  unint64_t v115 = 0;
  uint64_t v50 = *((unsigned int *)v1[6] + 6);
  uint64_t v51 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)__p);
  operations_research::sat::Trail::Resize(v51, v50);
  unint64_t v52 = (operations_research::sat::BinaryImplicationGraph *)operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)__p);
  operations_research::sat::BinaryImplicationGraph::Resize(v52, v50);
  uint64_t v53 = v118;
  long long v54 = v119;
  if (v118 != v119)
  {
    while (operations_research::sat::BinaryImplicationGraph::AddAtMostOne((uint64_t)v52, (char *)*v53, (v53[1] - *v53) >> 2))
    {
      v53 += 3;
      if (v53 == v54) {
        goto LABEL_66;
      }
    }
    goto LABEL_111;
  }
LABEL_66:
  if (operations_research::sat::BinaryImplicationGraph::DetectEquivalences(v52, 0))
  {
    operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(v52, &v118, (uint64_t)*((double *)*v2 + 67));
    if ((int)v50 >= 1)
    {
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 2 * v50;
      do
      {
        uint64_t v59 = *((void *)v52 + 71);
        if ((int)v55 < (int)((unint64_t)(*((void *)v52 + 72) - v59) >> 2))
        {
          uint64_t v60 = *(unsigned int *)(v59 + (v57 >> 30));
          if (v60 != -1 && v55 != v60) {
            operations_research::sat::PresolveContext::StoreBooleanEqualityRelation((uint64_t)v2[2], v56, (const char *)(-(v60 & 1) ^ ((int)v60 >> 1)));
          }
        }
        v57 += 0x200000000;
        uint64_t v56 = (const char *)(v56 + 1);
        v55 += 2;
      }
      while (v58 != v55);
    }
    unint64_t v102 = v49;
    uint64_t v103 = v48;
    uint64_t v62 = v118;
    unint64_t v105 = v119;
    if (v118 == v119)
    {
      int v63 = 0;
LABEL_114:
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      if (v63 != -1431655765 * ((unint64_t)((char *)v103 - (char *)v102) >> 3))
      {
        uint64_t v87 = *((void *)this + 2);
        int v109 = operator new(0x30uLL);
        long long v110 = xmmword_23CE7ECB0;
        strcpy((char *)v109, "at_most_one: transformed into max clique.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v87, (uint64_t)&v109);
        if (SHIBYTE(v110) < 0) {
          operator delete(v109);
        }
      }
      if (**(unsigned char **)this)
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v109, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3914);
        uint64_t v88 = (void *)google::LogMessage::stream((google::LogMessage *)&v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Merged ", 7);
        uint64_t v89 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)" into ", 6);
        uint64_t v90 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)" cliques.", 9);
        google::LogMessage::~LogMessage((google::LogMessage *)&v109);
      }
      goto LABEL_119;
    }
    int v63 = 0;
    while (1)
    {
      uint64_t v65 = (int *)*v62;
      int v64 = (int *)v62[1];
      if ((int *)*v62 != v64) {
        break;
      }
LABEL_80:
      v62 += 3;
      if (v62 == v105) {
        goto LABEL_114;
      }
    }
    uint64_t v66 = *(void *)(*((void *)this + 2) + 48);
    unint64_t v67 = *(int **)(v66 + 56);
    if (v67)
    {
      uint64_t v68 = *(int *)(v66 + 48);
      int v69 = *v67;
      if ((int)v68 < *v67)
      {
        *(_DWORD *)(v66 + 48) = v68 + 1;
        unint64_t v70 = *(void *)&v67[2 * v68 + 2];
LABEL_89:
        int v108 = v63 + 1;
        while (1)
        {
          if (v65 == v64)
          {
            int v63 = v108;
            goto LABEL_80;
          }
          int v75 = *v65;
          int v76 = *(_DWORD *)(v70 + 60);
          if ((*v65 & 1) == 0)
          {
            if (v76 == 26)
            {
              unint64_t v77 = *(void *)(v70 + 48);
              uint64_t v79 = *(unsigned int *)(v77 + 16);
              int v78 = (unsigned int *)(v77 + 16);
              int v80 = v79 + 1;
              if (v79 == *(_DWORD *)(v77 + 20)) {
                goto LABEL_105;
              }
            }
            else
            {
              operations_research::sat::ConstraintProto::clear_constraint(v70);
              *(_DWORD *)(v70 + 60) = 26;
              uint64_t v82 = *(void *)(v70 + 8);
              uint64_t v83 = (google::protobuf::Arena *)(v82 & 0xFFFFFFFFFFFFFFFELL);
              if (v82) {
                uint64_t v83 = *(google::protobuf::Arena **)v83;
              }
              unint64_t v77 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v83);
              *(void *)(v70 + 48) = v77;
              uint64_t v79 = *(unsigned int *)(v77 + 16);
              int v78 = (unsigned int *)(v77 + 16);
              int v80 = v79 + 1;
              if (v79 == *(_DWORD *)(v77 + 20)) {
LABEL_105:
              }
                google::protobuf::RepeatedField<int>::Reserve(v78, v80);
            }
            uint64_t v73 = *(void *)(v77 + 24);
            int v74 = v75 >> 1;
            goto LABEL_91;
          }
          if (v76 == 26)
          {
            unint64_t v77 = *(void *)(v70 + 48);
            uint64_t v79 = *(unsigned int *)(v77 + 16);
            uint64_t v81 = (unsigned int *)(v77 + 16);
            int v80 = v79 + 1;
            if (v79 != *(_DWORD *)(v77 + 20)) {
              goto LABEL_110;
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v70);
            *(_DWORD *)(v70 + 60) = 26;
            uint64_t v84 = *(void *)(v70 + 8);
            uint64_t v85 = (google::protobuf::Arena *)(v84 & 0xFFFFFFFFFFFFFFFELL);
            if (v84) {
              uint64_t v85 = *(google::protobuf::Arena **)v85;
            }
            unint64_t v77 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v85);
            *(void *)(v70 + 48) = v77;
            uint64_t v79 = *(unsigned int *)(v77 + 16);
            uint64_t v81 = (unsigned int *)(v77 + 16);
            int v80 = v79 + 1;
            if (v79 != *(_DWORD *)(v77 + 20)) {
              goto LABEL_110;
            }
          }
          google::protobuf::RepeatedField<int>::Reserve(v81, v80);
LABEL_110:
          uint64_t v73 = *(void *)(v77 + 24);
          int v74 = ~(v75 >> 1);
LABEL_91:
          *(_DWORD *)(v73 + 4 * v79) = v74;
          *(_DWORD *)(v77 + 16) = v80;
          ++v65;
        }
      }
      if (v69 != *(_DWORD *)(v66 + 52))
      {
LABEL_88:
        *unint64_t v67 = v69 + 1;
        unint64_t v70 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v66 + 40));
        uint64_t v71 = *(void *)(v66 + 56);
        uint64_t v72 = *(int *)(v66 + 48);
        *(_DWORD *)(v66 + 48) = v72 + 1;
        *(void *)(v71 + 8 * v72 + 8) = v70;
        uint64_t v65 = (int *)*v62;
        int v64 = (int *)v62[1];
        goto LABEL_89;
      }
    }
    else
    {
      int v69 = *(_DWORD *)(v66 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v66 + 40), v69 + 1);
    unint64_t v67 = *(int **)(v66 + 56);
    int v69 = *v67;
    goto LABEL_88;
  }
LABEL_111:
  uint64_t v86 = (uint64_t)v2[2];
  HIBYTE(v110) = 0;
  LOBYTE(v109) = 0;
  operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v86, (uint64_t)&v109);
  if (SHIBYTE(v110) < 0) {
    operator delete(v109);
  }
LABEL_119:
  unint64_t v91 = v115;
  if (v115)
  {
    uint64_t v92 = v116;
    unint64_t v93 = v115;
    if (v116 != v115)
    {
      do
      {
        uint64_t v95 = *--v92;
        uint64_t v94 = v95;
        *uint64_t v92 = 0;
        if (v95) {
          (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
        }
      }
      while (v92 != v91);
      unint64_t v93 = v115;
    }
    uint64_t v116 = v91;
    operator delete(v93);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v113, v114[0]);
  if (SHIBYTE(v112) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v96 = v118;
  if (v118)
  {
    int v97 = v119;
    int v98 = v118;
    if (v119 != v118)
    {
      uint64_t v99 = v119;
      do
      {
        uint64_t v101 = (void *)*(v99 - 3);
        v99 -= 3;
        int64_t v100 = v101;
        if (v101)
        {
          *(v97 - 2) = (uint64_t)v100;
          operator delete(v100);
        }
        int v97 = v99;
      }
      while (v99 != v96);
      int v98 = v118;
    }
    uint64_t v119 = v96;
    operator delete(v98);
  }
}

void sub_23CC5F384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  operations_research::sat::Model::~Model((operations_research::sat::Model *)&a20);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v21 - 112));
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::ProcessSetPPCSubset(uint64_t a1, int a2, int a3, unsigned int **a4, void *a5, uint64_t *a6)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v6 + 504)) {
    return 0;
  }
  uint64_t v8 = *a6;
  unint64_t v9 = (unint64_t)a2 >> 6;
  uint64_t v10 = *(void *)(*a6 + 8 * v9);
  if ((v10 & (1 << a2)) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4029);
    uint64_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: !(*marked_for_removal)[c1] ", 41);
    goto LABEL_24;
  }
  unint64_t v11 = (unint64_t)a3 >> 6;
  uint64_t v12 = *(void *)(v8 + 8 * v11);
  if ((v12 & (1 << a3)) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4030);
    uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: !(*marked_for_removal)[c2] ", 41);
LABEL_24:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
  }
  uint64_t v14 = *(void *)(*(void *)(v6 + 48) + 56) + 8;
  int v15 = *(_DWORD *)(*(void *)(v14 + 8 * *(int *)(*a5 + 4 * a2)) + 60);
  int v16 = *(_DWORD *)(*(void *)(v14 + 8 * *(int *)(*a5 + 4 * a3)) + 60);
  if (v15 != 3)
  {
    if (v15 != v16) {
      return 0;
    }
    LODWORD(__p) = *(_DWORD *)(*(void *)(v14 + 8 * *(int *)(*a5 + 4 * a2)) + 60);
    int v22 = 26;
    if (v15 != 26) {
      google::MakeCheckOpString<operations_research::sat::ConstraintProto::ConstraintCase,operations_research::sat::ConstraintProto::ConstraintCase>((int)&__p, (int)&v22, "ct1->constraint_case() == ConstraintProto::ConstraintCase::kAtMostOne");
    }
    *(void *)(v8 + 8 * v9) = v10 | (1 << a2);
    long long __p = operator new(0x28uLL);
    long long v24 = xmmword_23CE7EC80;
    strcpy((char *)__p, "setppc: removed dominated constraints");
    operations_research::sat::PresolveContext::UpdateRuleStats(v6, (uint64_t)&__p);
LABEL_19:
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    return 0;
  }
  if (v16 == 3)
  {
    *(void *)(v8 + 8 * v11) = v12 | (1 << a3);
    long long __p = operator new(0x28uLL);
    long long v24 = xmmword_23CE7EC80;
    strcpy((char *)__p, "setppc: removed dominated constraints");
    operations_research::sat::PresolveContext::UpdateRuleStats(v6, (uint64_t)&__p);
    goto LABEL_19;
  }
  if (v16 != 26) {
    return 0;
  }
  unint64_t v17 = *a4;
  uint64_t v18 = a4[1];
  if (*a4 != v18)
  {
    while (operations_research::sat::PresolveContext::SetLiteralToFalse(*(operations_research::sat::PresolveContext **)(a1 + 16), *v17))
    {
      uint64_t v19 = *(void *)(a1 + 16);
      long long __p = operator new(0x19uLL);
      long long v24 = xmmword_23CE7EB30;
      strcpy((char *)__p, "setppc: fixed variables");
      operations_research::sat::PresolveContext::UpdateRuleStats(v19, (uint64_t)&__p);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p);
      }
      ++v17;
      uint64_t result = 1;
      if (v17 == v18) {
        return result;
      }
    }
  }
  return 1;
}

void sub_23CC5F76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC5F774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC5F798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC5F7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CpModelPresolver::ProcessSetPPC(int64_t this)
{
  int v244 = (char ***)this;
  uint64_t v1 = *(unsigned int *)(*(void *)(*(void *)(this + 16) + 48) + 48);
  v270 = 0;
  uint64_t v271 = 0;
  unint64_t v272 = 0;
  uint64_t v267 = 0;
  v268 = 0;
  unint64_t v269 = 0;
  int v264 = 0;
  v265 = 0;
  uint64_t v266 = 0;
  uint64_t v261 = 0;
  unint64_t v262 = 0;
  uint64_t v263 = 0;
  v258 = 0;
  unint64_t v259 = 0;
  uint64_t v260 = 0;
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    uint64_t v240 = v1;
    while (1)
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)(this + 16) + 48) + 56) + 8 * v2 + 8);
      int v5 = *(_DWORD *)(v4 + 60);
      if (v5 != 26 && v5 != 3) {
        goto LABEL_4;
      }
      uint64_t v242 = v2;
      if (operations_research::sat::CpModelPresolver::PresolveOneConstraint((operations_research::sat::CpModelPresolver *)this, v2))operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v244[2], v242); {
      if (*((unsigned char *)v244[2] + 504))
      }
      {
        char v216 = 0;
        goto LABEL_311;
      }
      int v7 = *(_DWORD *)(v4 + 60);
      if (v7 == 3) {
        break;
      }
      if (v7 == 26)
      {
        int v247 = v3;
        memset(__p, 0, sizeof(__p));
        uint64_t v8 = *(void *)(v4 + 48);
        uint64_t v9 = *(int *)(v8 + 16);
        if (v9)
        {
          uint64_t v10 = 0;
          unint64_t v11 = 0;
          uint64_t v12 = 0;
          int v13 = *(int **)(v8 + 24);
          uint64_t v14 = &v13[v9];
          do
          {
            while (1)
            {
              int v15 = *v13;
              if (v12 >= (_DWORD *)v11) {
                break;
              }
              *v12++ = v15;
              __p[1] = v12;
              if (++v13 == v14) {
                goto LABEL_79;
              }
            }
            uint64_t v16 = ((char *)v12 - v10) >> 2;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if ((v11 - v10) >> 1 > v17) {
              unint64_t v17 = (v11 - v10) >> 1;
            }
            if ((unint64_t)(v11 - v10) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v17;
            }
            if (v18)
            {
              if (v18 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v19 = operator new(4 * v18);
              uint64_t v20 = &v19[4 * v16];
              _DWORD *v20 = v15;
              uint64_t v21 = v20 + 1;
              if (v12 == (_DWORD *)v10) {
                goto LABEL_33;
              }
            }
            else
            {
              uint64_t v19 = 0;
              uint64_t v20 = (_DWORD *)(4 * v16);
              *(_DWORD *)(4 * v16) = v15;
              uint64_t v21 = (void *)(4 * v16 + 4);
              if (v12 == (_DWORD *)v10) {
                goto LABEL_33;
              }
            }
            unint64_t v22 = (char *)(v12 - 1) - v10;
            if (v22 >= 0xBC)
            {
              if (&v19[(char *)v12 - v10 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[(char *)v12 - v10 - 4])
              {
                uint64_t v23 = v12;
              }
              else if ((_DWORD *)((char *)v12 - (v22 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v12 - 1)
              {
                uint64_t v23 = v12;
              }
              else if ((unint64_t)(v10 - v19) >= 0x20)
              {
                uint64_t v25 = (v22 >> 2) + 1;
                uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v23 = &v12[v26 / 0xFFFFFFFFFFFFFFFCLL];
                uint64_t v20 = (_DWORD *)((char *)v20 - v26);
                int v27 = &v19[4 * v16 - 16];
                uint64_t v28 = (long long *)(v12 - 4);
                uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v30 = *v28;
                  *(v27 - 1) = *(v28 - 1);
                  *int v27 = v30;
                  v27 -= 2;
                  v28 -= 2;
                  v29 -= 8;
                }
                while (v29);
                if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_33;
                }
              }
              else
              {
                uint64_t v23 = v12;
              }
            }
            else
            {
              uint64_t v23 = v12;
            }
            do
            {
              int v24 = *--v23;
              *--uint64_t v20 = v24;
            }
            while (v23 != (_DWORD *)v10);
LABEL_33:
            unint64_t v11 = &v19[4 * v18];
            __p[0] = v20;
            __p[2] = v11;
            if (v10) {
              operator delete(v10);
            }
            uint64_t v10 = v20;
            __p[1] = v21;
            ++v13;
            uint64_t v12 = v21;
          }
          while (v13 != v14);
        }
LABEL_79:
        std::__sort<std::__less<int,int> &,int *>();
        long long v54 = v268;
        if ((unint64_t)v268 >= v269)
        {
          uint64_t v55 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>(&v267, (uint64_t)__p);
          v268 = v55;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
            uint64_t v55 = v268;
          }
        }
        else
        {
          *(void *)v268 = 0;
          *((void *)v54 + 1) = 0;
          *((void *)v54 + 2) = 0;
          *(_OWORD *)long long v54 = *(_OWORD *)__p;
          *((void **)v54 + 2) = __p[2];
          uint64_t v55 = v54 + 24;
          v268 = v54 + 24;
        }
        uint64_t v56 = (int *)*((void *)v55 - 3);
        unint64_t v245 = (int *)*((void *)v55 - 2);
        if (v56 != v245)
        {
          uint64_t v57 = 0;
          while (1)
          {
            int v60 = *v56;
            if (~*v56 > *v56) {
              int v60 = ~v60;
            }
            LOBYTE(v61) = v60 & 0x3F;
            if (v60 <= 0) {
              int v61 = -(-v60 & 0x3F);
            }
            char v249 = v61;
            uint64_t v62 = v60;
            int v63 = v264;
            int v64 = v265;
            unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((v265 - v264) >> 3);
            if (v65 <= v60)
            {
              unint64_t v81 = v60 + 1;
              unint64_t v82 = v62 + 1 - v65;
              if (v62 + 1 <= v65)
              {
                if (v62 + 1 < v65)
                {
                  uint64_t v95 = &v264[24 * v81];
                  if (v265 != v95)
                  {
                    unint64_t v96 = v265;
                    do
                    {
                      int v98 = (void *)*((void *)v96 - 3);
                      v96 -= 24;
                      int v97 = v98;
                      if (v98)
                      {
                        *((void *)v64 - 2) = v97;
                        operator delete(v97);
                      }
                      int v64 = v96;
                    }
                    while (v96 != v95);
                  }
                  v265 = v95;
                }
              }
              else
              {
                if (0xAAAAAAAAAAAAAAABLL * ((v266 - v265) >> 3) >= v82)
                {
                  bzero(v265, 24 * ((24 * v82 - 24) / 0x18) + 24);
                  v265 = &v64[24 * ((24 * v82 - 24) / 0x18) + 24];
                  goto LABEL_92;
                }
                if ((int)v62 <= -2) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((v266 - v264) >> 3) > v81) {
                  unint64_t v81 = 0x5555555555555556 * ((v266 - v264) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v266 - v264) >> 3) >= 0x555555555555555) {
                  unint64_t v83 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v83 = v81;
                }
                if (v83 > 0xAAAAAAAAAAAAAAALL) {
LABEL_335:
                }
                  std::__throw_bad_array_new_length[abi:ne180100]();
                uint64_t v84 = (char *)operator new(24 * v83);
                uint64_t v85 = &v84[24 * v65];
                uint64_t v86 = &v84[24 * v83];
                size_t v87 = 24 * ((24 * v82 - 24) / 0x18) + 24;
                bzero(v85, v87);
                uint64_t v88 = &v85[v87];
                if (v64 == v63)
                {
                  int v264 = v85;
                  v265 = &v85[v87];
                  uint64_t v266 = v86;
                  goto LABEL_139;
                }
                do
                {
                  uint64_t v89 = v85;
                  *((void *)v85 - 2) = 0;
                  *((void *)v85 - 1) = 0;
                  long long v90 = *(_OWORD *)(v64 - 24);
                  v64 -= 24;
                  *(_OWORD *)(v85 - 24) = v90;
                  v85 -= 24;
                  *((void *)v89 - 1) = *((void *)v64 + 2);
                  *(void *)int v64 = 0;
                  *((void *)v64 + 1) = 0;
                  *((void *)v64 + 2) = 0;
                }
                while (v64 != v63);
                int v64 = v264;
                unint64_t v91 = v265;
                int v264 = v85;
                v265 = v88;
                uint64_t v266 = v86;
                if (v91 != v64)
                {
                  uint64_t v92 = v91;
                  do
                  {
                    uint64_t v94 = (void *)*((void *)v92 - 3);
                    v92 -= 24;
                    unint64_t v93 = v94;
                    if (v94)
                    {
                      *((void *)v91 - 2) = v93;
                      operator delete(v93);
                    }
                    unint64_t v91 = v92;
                  }
                  while (v92 != v64);
LABEL_139:
                  if (!v64) {
                    goto LABEL_92;
                  }
LABEL_140:
                  operator delete(v64);
                  goto LABEL_92;
                }
                if (v64) {
                  goto LABEL_140;
                }
              }
            }
LABEL_92:
            uint64_t v66 = &v264[24 * (int)v62];
            uint64_t v68 = (uint64_t *)(v66 + 8);
            unint64_t v67 = (char *)*((void *)v66 + 1);
            unint64_t v69 = *((void *)v66 + 2);
            if ((unint64_t)v67 >= v69)
            {
              uint64_t v70 = v57;
              uint64_t v71 = *(char **)v66;
              uint64_t v72 = (uint64_t)&v67[-*(void *)v66];
              uint64_t v73 = v72 >> 2;
              unint64_t v74 = (v72 >> 2) + 1;
              if (v74 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v75 = v69 - (void)v71;
              if (v75 >> 1 > v74) {
                unint64_t v74 = v75 >> 1;
              }
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v74;
              }
              if (v76)
              {
                if (v76 >> 62) {
                  goto LABEL_335;
                }
                unint64_t v77 = v76;
                int v78 = operator new(4 * v76);
                unint64_t v76 = v77;
                uint64_t v79 = (int *)&v78[4 * v73];
                *uint64_t v79 = v247;
                uint64_t v58 = (uint64_t)(v79 + 1);
                if (v67 != v71)
                {
LABEL_102:
                  unint64_t v80 = v67 - 4 - v71;
                  if (v80 < 0x2C)
                  {
                    uint64_t v57 = v70;
                    char v59 = v249;
                    goto LABEL_132;
                  }
                  unint64_t v99 = v67 - &v78[v72];
                  uint64_t v57 = v70;
                  char v59 = v249;
                  if (v99 < 0x20) {
                    goto LABEL_347;
                  }
                  uint64_t v100 = (v80 >> 2) + 1;
                  uint64_t v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
                  unint64_t v102 = &v67[-v101];
                  uint64_t v79 = (int *)((char *)v79 - v101);
                  uint64_t v103 = &v78[4 * v73 - 16];
                  uint64_t v104 = v67 - 16;
                  uint64_t v105 = v100 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v106 = *(_OWORD *)v104;
                    *(v103 - 1) = *((_OWORD *)v104 - 1);
                    *uint64_t v103 = v106;
                    v103 -= 2;
                    v104 -= 32;
                    v105 -= 8;
                  }
                  while (v105);
                  unint64_t v67 = v102;
                  if (v100 != (v100 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_347:
                    do
                    {
LABEL_132:
                      int v107 = *((_DWORD *)v67 - 1);
                      v67 -= 4;
                      *--uint64_t v79 = v107;
                    }
                    while (v67 != v71);
                  }
LABEL_133:
                  *(void *)uint64_t v66 = v79;
                  *uint64_t v68 = v58;
                  *((void *)v66 + 2) = &v78[4 * v76];
                  if (v71) {
                    operator delete(v71);
                  }
                  goto LABEL_86;
                }
              }
              else
              {
                int v78 = 0;
                uint64_t v79 = (int *)(4 * v73);
                *(_DWORD *)(4 * v73) = v247;
                uint64_t v58 = 4 * v73 + 4;
                if (v67 != v71) {
                  goto LABEL_102;
                }
              }
              uint64_t v57 = v70;
              char v59 = v249;
              goto LABEL_133;
            }
            *(_DWORD *)unint64_t v67 = v247;
            uint64_t v58 = (uint64_t)(v67 + 4);
            char v59 = v249;
LABEL_86:
            v57 |= 1 << v59;
            *uint64_t v68 = v58;
            if (++v56 == v245) {
              goto LABEL_144;
            }
          }
        }
        uint64_t v57 = 0;
LABEL_144:
        int v108 = v271;
        if (v271 < v272)
        {
          *(void *)uint64_t v271 = v57;
          uint64_t v109 = (uint64_t)(v108 + 8);
          goto LABEL_165;
        }
        long long v110 = v270;
        uint64_t v111 = (v271 - v270) >> 3;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v113 = v272 - v270;
        if ((v272 - v270) >> 2 > v112) {
          unint64_t v112 = v113 >> 2;
        }
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v114 = v112;
        }
        if (v114)
        {
          if (v114 >> 61) {
            goto LABEL_341;
          }
          unint64_t v115 = operator new(8 * v114);
          uint64_t v116 = &v115[8 * v111];
          *(void *)uint64_t v116 = v57;
          uint64_t v109 = (uint64_t)(v116 + 8);
          if (v108 == v110) {
            goto LABEL_163;
          }
LABEL_157:
          unint64_t v117 = v108 - 8 - v110;
          if (v117 < 0x58) {
            goto LABEL_348;
          }
          if ((unint64_t)(v110 - v115) < 0x20) {
            goto LABEL_348;
          }
          uint64_t v118 = (v117 >> 3) + 1;
          uint64_t v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v120 = &v108[-v119];
          v116 -= v119;
          int v121 = &v115[8 * v111 - 16];
          unint64_t v122 = (long long *)(v108 - 16);
          uint64_t v123 = v118 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v124 = *v122;
            *(v121 - 1) = *(v122 - 1);
            _OWORD *v121 = v124;
            v121 -= 2;
            v122 -= 2;
            v123 -= 4;
          }
          while (v123);
          int v108 = v120;
          if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_348:
            do
            {
              uint64_t v125 = *((void *)v108 - 1);
              v108 -= 8;
              *((void *)v116 - 1) = v125;
              v116 -= 8;
            }
            while (v108 != v110);
          }
        }
        else
        {
          unint64_t v115 = 0;
          uint64_t v116 = (char *)(8 * v111);
          *(void *)(8 * v111) = v57;
          uint64_t v109 = 8 * v111 + 8;
          if (v108 != v110) {
            goto LABEL_157;
          }
        }
LABEL_163:
        v270 = v116;
        unint64_t v272 = &v115[8 * v114];
        if (v110) {
          operator delete(v110);
        }
LABEL_165:
        uint64_t v271 = (char *)v109;
        unint64_t v126 = v262;
        if (v262 == v263 << 6)
        {
          if ((uint64_t)(v262 + 1) < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v127 = v263 << 7;
          if (v263 << 7 <= (v262 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v127 = (v262 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v262 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v128 = v127;
          }
          else {
            unint64_t v128 = 0x7FFFFFFFFFFFFFFFLL;
          }
          std::vector<BOOL>::reserve((uint64_t)&v261, v128);
          unint64_t v126 = v262;
        }
        unint64_t v262 = v126 + 1;
        *(void *)((char *)v261 + ((v126 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v126);
        long long v129 = v259;
        if (v259 < v260)
        {
          uint64_t v1 = v240;
          uint64_t v2 = v242;
          *(_DWORD *)unint64_t v259 = v242;
          uint64_t v130 = (uint64_t)(v129 + 4);
          int v131 = v247;
LABEL_195:
          unint64_t v259 = (char *)v130;
          int v3 = v131 + 1;
          this = (int64_t)v244;
          goto LABEL_4;
        }
        uint64_t v132 = (char *)v258;
        uint64_t v133 = (v259 - (char *)v258) >> 2;
        unint64_t v134 = v133 + 1;
        if ((unint64_t)(v133 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v135 = v260 - (char *)v258;
        if ((v260 - (char *)v258) >> 1 > v134) {
          unint64_t v134 = v135 >> 1;
        }
        if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v136 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v136 = v134;
        }
        if (v136)
        {
          if (v136 >> 62) {
LABEL_341:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v137 = operator new(4 * v136);
          unint64_t v138 = (int *)&v137[4 * v133];
          *unint64_t v138 = v242;
          uint64_t v130 = (uint64_t)(v138 + 1);
          if (v129 == v132) {
            goto LABEL_192;
          }
LABEL_186:
          unint64_t v139 = v129 - 4 - v132;
          if (v139 < 0x2C) {
            goto LABEL_349;
          }
          if ((unint64_t)(v132 - v137) < 0x20) {
            goto LABEL_349;
          }
          uint64_t v140 = (v139 >> 2) + 1;
          uint64_t v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v142 = &v129[-v141];
          unint64_t v138 = (int *)((char *)v138 - v141);
          __n128 v143 = &v137[4 * v133 - 16];
          uint64_t v144 = (long long *)(v129 - 16);
          uint64_t v145 = v140 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v146 = *v144;
            *(v143 - 1) = *(v144 - 1);
            *__n128 v143 = v146;
            v143 -= 2;
            v144 -= 2;
            v145 -= 8;
          }
          while (v145);
          long long v129 = v142;
          if (v140 != (v140 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_349:
            do
            {
              int v147 = *((_DWORD *)v129 - 1);
              v129 -= 4;
              *--unint64_t v138 = v147;
            }
            while (v129 != v132);
          }
        }
        else
        {
          uint64_t v137 = 0;
          unint64_t v138 = (int *)(4 * v133);
          *(_DWORD *)(4 * v133) = v242;
          uint64_t v130 = 4 * v133 + 4;
          if (v129 != v132) {
            goto LABEL_186;
          }
        }
LABEL_192:
        v258 = v138;
        uint64_t v260 = &v137[4 * v136];
        if (v132) {
          operator delete(v132);
        }
        int v131 = v247;
        uint64_t v1 = v240;
        uint64_t v2 = v242;
        goto LABEL_195;
      }
      uint64_t v2 = v242;
      this = (int64_t)v244;
LABEL_4:
      if (++v2 == v1) {
        goto LABEL_197;
      }
    }
    int v247 = v3;
    memset(__p, 0, sizeof(__p));
    uint64_t v31 = *(void *)(v4 + 48);
    uint64_t v32 = *(int *)(v31 + 16);
    if (!v32) {
      goto LABEL_79;
    }
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    int v35 = 0;
    uint64_t v36 = *(int **)(v31 + 24);
    uint64_t v37 = &v36[v32];
    while (1)
    {
      while (1)
      {
        int v38 = *v36;
        if (v35 >= (_DWORD *)v34) {
          break;
        }
        *v35++ = v38;
        __p[1] = v35;
        if (++v36 == v37) {
          goto LABEL_79;
        }
      }
      uint64_t v39 = ((char *)v35 - v33) >> 2;
      unint64_t v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v34 - v33) >> 1 > v40) {
        unint64_t v40 = (v34 - v33) >> 1;
      }
      if ((unint64_t)(v34 - v33) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v41)
      {
        if (v41 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v42 = operator new(4 * v41);
        unint64_t v43 = &v42[4 * v39];
        _DWORD *v43 = v38;
        int64_t v44 = v43 + 1;
        if (v35 == (_DWORD *)v33) {
          goto LABEL_65;
        }
      }
      else
      {
        unint64_t v42 = 0;
        unint64_t v43 = (_DWORD *)(4 * v39);
        *(_DWORD *)(4 * v39) = v38;
        int64_t v44 = (void *)(4 * v39 + 4);
        if (v35 == (_DWORD *)v33) {
          goto LABEL_65;
        }
      }
      unint64_t v45 = (char *)(v35 - 1) - v33;
      if (v45 >= 0xBC)
      {
        if (&v42[(char *)v35 - v33 - 4 - (v45 & 0xFFFFFFFFFFFFFFFCLL)] > &v42[(char *)v35 - v33 - 4])
        {
          unint64_t v46 = v35;
        }
        else if ((_DWORD *)((char *)v35 - (v45 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v35 - 1)
        {
          unint64_t v46 = v35;
        }
        else if ((unint64_t)(v33 - v42) >= 0x20)
        {
          uint64_t v48 = (v45 >> 2) + 1;
          uint64_t v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v46 = &v35[v49 / 0xFFFFFFFFFFFFFFFCLL];
          unint64_t v43 = (_DWORD *)((char *)v43 - v49);
          uint64_t v50 = &v42[4 * v39 - 16];
          uint64_t v51 = (long long *)(v35 - 4);
          uint64_t v52 = v48 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v53 = *v51;
            *(v50 - 1) = *(v51 - 1);
            *uint64_t v50 = v53;
            v50 -= 2;
            v51 -= 2;
            v52 -= 8;
          }
          while (v52);
          if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_65;
          }
        }
        else
        {
          unint64_t v46 = v35;
        }
      }
      else
      {
        unint64_t v46 = v35;
      }
      do
      {
        int v47 = *--v46;
        *--unint64_t v43 = v47;
      }
      while (v46 != (_DWORD *)v33);
LABEL_65:
      unint64_t v34 = &v42[4 * v41];
      __p[0] = v43;
      __p[2] = v34;
      if (v33) {
        operator delete(v33);
      }
      uint64_t v33 = v43;
      __p[1] = v44;
      ++v36;
      int v35 = v44;
      if (v36 == v37) {
        goto LABEL_79;
      }
    }
  }
  int v3 = 0;
LABEL_197:
  if (*operations_research::sat::CpModelPresolver::ProcessSetPPC(void)::vlocal__ >= 1)
  {
    if (operations_research::sat::CpModelPresolver::ProcessSetPPC(void)::vlocal__ != &google::kLogSiteUninitialized
      || (this = google::InitVLOG3__((google *)&operations_research::sat::CpModelPresolver::ProcessSetPPC(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_presolve.cc", (const char *)1), this))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4123);
      uint64_t v148 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"#setppc constraints: ", 21);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)__p);
    }
  }
  int v248 = v3;
  __p[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)&__p[1] = 0u;
  long long v256 = 0u;
  uint64_t v257 = 0;
  uint64_t v149 = v264;
  long long v231 = v265;
  if (v264 == v265)
  {
LABEL_296:
    if (v248 < 1)
    {
LABEL_301:
      char v216 = 0;
      if (!(void)v256) {
        goto LABEL_309;
      }
    }
    else
    {
      unint64_t v215 = 0;
      char v216 = 0;
      do
      {
        if ((*(void *)((char *)v261 + ((v215 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v215))
        {
          int v217 = v258;
          operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*((void *)v244[2][6] + 7) + 8 * v258[v215] + 8));
          operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v244[2], v217[v215]);
          char v216 = 1;
        }
        ++v215;
      }
      while (v248 != v215);
LABEL_307:
      if (!(void)v256) {
        goto LABEL_309;
      }
    }
LABEL_308:
    operator delete(__p[0]);
    __p[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v257 = 0;
    __p[2] = 0;
    *(void *)&long long v256 = 0;
    __p[1] = 0;
    goto LABEL_309;
  }
  while (*((void *)v149 + 1) == *(void *)v149)
  {
LABEL_203:
    v149 += 24;
    if (v149 == v231) {
      goto LABEL_296;
    }
  }
  unint64_t v150 = 0;
  unint64_t v151 = 1;
  while (1)
  {
    unint64_t v156 = (*v244)[73];
    if (v156)
    {
      unint64_t v157 = (unsigned __int8 *)*((void *)v156 + 15);
      if (v157)
      {
        unsigned __int8 v158 = atomic_load(v157);
        if (v158) {
          goto LABEL_301;
        }
      }
      if (fmax(*((double *)v156 + 13) - *((double *)v156 + 14), 0.0) <= 0.0) {
        goto LABEL_301;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
      uint64_t v160 = *((void *)v156 + 3) <= CurrentTimeNanos - *((void *)v156 + 1)
           ? CurrentTimeNanos - *((void *)v156 + 1)
           : *((void *)v156 + 3);
      operations_research::RunningMax<long long>::Add((int *)v156 + 8, v160);
      *((void *)v156 + 1) = CurrentTimeNanos;
      if (*(void *)(*((void *)v156 + 5) + 8 * *((int *)v156 + 17)) + CurrentTimeNanos >= *((void *)v156 + 2)) {
        break;
      }
    }
LABEL_208:
    uint64_t v153 = *(void *)v149;
    uint64_t v154 = *((void *)v149 + 1);
    uint64_t v155 = *(unsigned int *)(*(void *)v149 + 4 * v150++);
    if (((1 << v155) & v261[(unint64_t)(int)v155 >> 6]) == 0 && v150 < (v154 - v153) >> 2)
    {
      uint64_t v246 = 1 << v155;
      unint64_t v250 = (unint64_t)(int)v155 >> 6;
      unint64_t v235 = v150;
      unint64_t v241 = (std::vector<int>::pointer *)&v267[24 * (int)v155];
      uint64_t v232 = *(void *)(*((void *)v244[2][6] + 7) + 8 * v258[(int)v155] + 8);
      uint64_t v243 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v155)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v155));
      uint64_t v238 = (int)v155;
      int v239 = (const std::vector<int>::value_type **)(v241 + 1);
      unint64_t v234 = v151;
      uint64_t v236 = v155;
      while (1)
      {
        uint64_t v162 = *(unsigned int *)(v153 + 4 * v151);
        unint64_t v163 = (unint64_t)(int)v162 >> 6;
        if (((1 << v162) & v261[v163]) != 0) {
          goto LABEL_224;
        }
        if ((v261[v250] & v246) != 0)
        {
LABEL_295:
          unint64_t v151 = v234;
          unint64_t v150 = v235;
          break;
        }
        if (v155 == v162) {
          goto LABEL_224;
        }
        LODWORD(v254.__begin_) = v155;
        LODWORD(v251) = v162;
        if ((int)v155 >= (int)v162) {
          google::MakeCheckOpString<int,int>((int)&v254, (int)&v251, "c1 < c2");
        }
        uint64_t v164 = 0;
        unint64_t v165 = (((unint64_t)(v243 + v162) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v243 + v162));
        unint64_t v166 = (v165 >> 7) ^ ((unint64_t)__p[0] >> 12);
        uint64_t v167 = 0x101010101010101 * (v165 & 0x7F);
        for (unint64_t i = v166; ; unint64_t i = v164 + v169)
        {
          unint64_t v169 = i & v256;
          uint64_t v170 = *(void *)((char *)__p[0] + v169);
          unint64_t v171 = ((v170 ^ v167) - 0x101010101010101) & ~(v170 ^ v167) & 0x8080808080808080;
          if (v171) {
            break;
          }
LABEL_237:
          if ((v170 & (~v170 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_240;
          }
          v164 += 8;
        }
        while (1)
        {
          unint64_t v172 = (v169 + (__clz(__rbit64(v171)) >> 3)) & v256;
          uint64_t v173 = (int *)((char *)__p[1] + 8 * v172);
          int v174 = *v173;
          this = v173[1];
          if (v174 == v155 && this == v162) {
            break;
          }
          v171 &= v171 - 1;
          if (!v171) {
            goto LABEL_237;
          }
        }
        if (v172 != (void)v256) {
          goto LABEL_224;
        }
LABEL_240:
        for (j = 0; ; unint64_t v166 = j + v177)
        {
          unint64_t v177 = v166 & v256;
          uint64_t v178 = *(void *)((char *)__p[0] + v177);
          unint64_t v179 = ((v178 ^ v167) - 0x101010101010101) & ~(v178 ^ v167) & 0x8080808080808080;
          if (v179) {
            break;
          }
LABEL_247:
          if ((v178 & (~v178 << 6) & 0x8080808080808080) != 0)
          {
            this = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::prepare_insert((uint64_t *)__p, v165);
            *((void *)__p[1] + this) = v155 | (v162 << 32);
            goto LABEL_250;
          }
          j += 8;
        }
        while (1)
        {
          uint64_t v180 = (int *)((char *)__p[1] + 8 * ((v177 + (__clz(__rbit64(v179)) >> 3)) & v256));
          int v182 = *v180;
          int v181 = v180[1];
          if (v182 == v155 && v181 == v162) {
            break;
          }
          v179 &= v179 - 1;
          if (!v179) {
            goto LABEL_247;
          }
        }
LABEL_250:
        if ((unint64_t)__p[2] >> 4 > 0xC34)
        {
          char v216 = 0;
          goto LABEL_307;
        }
        uint64_t v184 = *(void *)&v270[8 * v238];
        uint64_t v185 = *(void *)&v270[8 * (int)v162];
        uint64_t v186 = v184 & ~v185;
        uint64_t v187 = v185 & ~v184;
        if (v186) {
          BOOL v188 = v187 == 0;
        }
        else {
          BOOL v188 = 1;
        }
        if (!v188) {
          goto LABEL_224;
        }
        BOOL v189 = &v267[24 * (int)v162];
        uint64_t v233 = *(void *)(*((void *)v244[2][6] + 7) + 8 * v258[(int)v162] + 8);
        memset(&v254, 0, sizeof(v254));
        begiunint64_t n = *v241;
        int v191 = *v239;
        int v192 = *(void **)v189;
        uint64_t v237 = (void **)v189;
        int v195 = (void *)*((void *)v189 + 1);
        long long v193 = (void **)(v189 + 8);
        uint64_t v194 = v195;
        v253.__begin_ = *v241;
        uint64_t v251 = v192;
        v274[0] = 0;
        while (begin != v191)
        {
          uint64_t v200 = (char *)v251;
          if (v251 == v194)
          {
            if (begin != v191)
            {
              v201.__i_ = (std::__wrap_iter<const int *>::iterator_type)v274[0];
              do
                v201.__i_ = std::vector<int>::insert(&v254, v201, begin++).__i_ + 1;
              while (begin != v191);
            }
            break;
          }
          if (*begin < *(_DWORD *)v251)
          {
            v196.__i_ = (std::__wrap_iter<const int *>::iterator_type)v274[0];
            v197.__i_ = std::vector<int>::insert(&v254, v196, begin).__i_;
            unint64_t v198 = &v253;
            uint64_t v199 = (std::vector<int> *)v274;
            uint64_t v200 = (char *)begin;
            begiunint64_t n = v197.__i_;
LABEL_258:
            v199->__begin_ = (std::vector<int>::pointer)(begin + 1);
            goto LABEL_259;
          }
          unint64_t v198 = (std::vector<int> *)&v251;
          if (*(_DWORD *)v251 >= *begin)
          {
            uint64_t v199 = &v253;
            goto LABEL_258;
          }
LABEL_259:
          v198->__begin_ = (std::vector<int>::pointer)(v200 + 4);
          begiunint64_t n = v253.__begin_;
        }
        memset(&v253, 0, sizeof(v253));
        uint64_t v203 = *v193;
        std::vector<int>::pointer v204 = *v241;
        unint64_t v205 = *v239;
        uint64_t v251 = *v237;
        int v202 = (const std::vector<int>::value_type *)v251;
        v273 = 0;
        v274[0] = v204;
        if (v251 == v203) {
          goto LABEL_280;
        }
        while (2)
        {
          uint64_t v206 = (const std::vector<int>::value_type *)v274[0];
          if ((const std::vector<int>::value_type *)v274[0] != v205)
          {
            if (*v202 < *(_DWORD *)v274[0])
            {
              v207.__i_ = v273;
              v208.__i_ = std::vector<int>::insert(&v253, v207, v202).__i_;
              unint64_t v209 = &v251;
              v210 = (void **)&v273;
              uint64_t v206 = v202;
              int v202 = v208.__i_;
              goto LABEL_270;
            }
            unint64_t v209 = (void **)v274;
            if (*(_DWORD *)v274[0] >= *v202)
            {
              v210 = &v251;
LABEL_270:
              void *v210 = (void *)(v202 + 1);
            }
            *unint64_t v209 = (void *)(v206 + 1);
            int v202 = (const std::vector<int>::value_type *)v251;
            if (v251 == v203) {
              goto LABEL_280;
            }
            continue;
          }
          break;
        }
        if (v202 != v203)
        {
          v211.__i_ = v273;
          do
            v211.__i_ = std::vector<int>::insert(&v253, v211, v202++).__i_ + 1;
          while (v202 != v203);
        }
LABEL_280:
        int v212 = v253.__begin_;
        if (v254.__begin_ == v254.__end_)
        {
          uint64_t v155 = v236;
          if (v253.__begin_ == v253.__end_)
          {
            if (*(_DWORD *)(v232 + 60) == *(_DWORD *)(v233 + 60))
            {
              v261[v163] |= 1 << v162;
              uint64_t v214 = (uint64_t)v244[2];
              uint64_t v251 = operator new(0x28uLL);
              long long v252 = xmmword_23CE7EC80;
              strcpy((char *)v251, "setppc: removed redundant constraints");
              operations_research::sat::PresolveContext::UpdateRuleStats(v214, (uint64_t)&v251);
              if (SHIBYTE(v252) < 0) {
                operator delete(v251);
              }
            }
          }
          else if (operations_research::sat::CpModelPresolver::ProcessSetPPCSubset((uint64_t)v244, v236, v162, (unsigned int **)&v253, &v258, (uint64_t *)&v261))
          {
            goto LABEL_286;
          }
LABEL_290:
          int v212 = v253.__begin_;
        }
        else
        {
          uint64_t v155 = v236;
          if (v253.__begin_ == v253.__end_)
          {
            if (operations_research::sat::CpModelPresolver::ProcessSetPPCSubset((uint64_t)v244, v162, v236, (unsigned int **)&v254, &v258, (uint64_t *)&v261))
            {
LABEL_286:
              unint64_t v213 = v258;
              operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v244[2], v258[v238]);
              operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v244[2], v213[(int)v162]);
            }
            goto LABEL_290;
          }
        }
        if (v212)
        {
          v253.__end_ = v212;
          operator delete(v212);
        }
        this = (int64_t)v254.__begin_;
        if (v254.__begin_)
        {
          v254.__end_ = v254.__begin_;
          operator delete(v254.__begin_);
        }
LABEL_224:
        ++v151;
        uint64_t v153 = *(void *)v149;
        uint64_t v154 = *((void *)v149 + 1);
        if (v151 >= (v154 - *(void *)v149) >> 2) {
          goto LABEL_295;
        }
      }
    }
    ++v151;
    if (v150 >= (v154 - v153) >> 2) {
      goto LABEL_203;
    }
  }
  if (!FLAGS_time_limit_use_usertime) {
    goto LABEL_304;
  }
  double v161 = *((double *)v156 + 12);
  if (!v156[72])
  {
    double v152 = v161 + (double)*((uint64_t *)v156 + 11) * -0.000000001;
    if (v152 <= 0.0001) {
      goto LABEL_304;
    }
    goto LABEL_207;
  }
  this = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  double v152 = v161 + (double)(this - *((void *)v156 + 10) + *((void *)v156 + 11)) * -0.000000001;
  if (v152 > 0.0001)
  {
LABEL_207:
    *((void *)v156 + 2) = *((void *)v156 + 1) + (uint64_t)(v152 * 1000000000.0);
    goto LABEL_208;
  }
LABEL_304:
  char v216 = 0;
  *((void *)v156 + 2) = 0;
  if ((void)v256) {
    goto LABEL_308;
  }
LABEL_309:
  if (*((void *)&v256 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v256 + 1));
  }
LABEL_311:
  if (v258) {
    operator delete(v258);
  }
  if (v261) {
    operator delete(v261);
  }
  uint64_t v218 = v264;
  if (v264)
  {
    unint64_t v219 = v265;
    long long v220 = v264;
    if (v265 != v264)
    {
      long long v221 = v265;
      do
      {
        int v223 = (void *)*((void *)v221 - 3);
        v221 -= 24;
        uint64_t v222 = v223;
        if (v223)
        {
          *((void *)v219 - 2) = v222;
          operator delete(v222);
        }
        unint64_t v219 = v221;
      }
      while (v221 != v218);
      long long v220 = v264;
    }
    v265 = v218;
    operator delete(v220);
  }
  v224 = v267;
  if (v267)
  {
    uint64_t v225 = v268;
    v226 = v267;
    if (v268 != v267)
    {
      uint64_t v227 = v268;
      do
      {
        unint64_t v229 = (void *)*((void *)v227 - 3);
        v227 -= 24;
        v228 = v229;
        if (v229)
        {
          *((void *)v225 - 2) = v228;
          operator delete(v228);
        }
        uint64_t v225 = v227;
      }
      while (v227 != v224);
      v226 = v267;
    }
    v268 = v224;
    operator delete(v226);
  }
  if (v270) {
    operator delete(v270);
  }
  return v216 & 1;
}

void sub_23CC60DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_23CC60DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  absl::lts_2020_02_25::flat_hash_set<std::pair<int,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~flat_hash_set((uint64_t)&a40);
  unint64_t v43 = *(void **)(v41 - 256);
  if (v43)
  {
    *(void *)(v41 - 248) = v43;
    operator delete(v43);
    int64_t v44 = *(void **)(v41 - 232);
    if (!v44)
    {
LABEL_3:
      std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v41 - 208));
      std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v41 - 184));
      unint64_t v45 = *(void **)(v41 - 160);
      if (!v45) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v44 = *(void **)(v41 - 232);
    if (!v44) {
      goto LABEL_3;
    }
  }
  operator delete(v44);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v41 - 208));
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v41 - 184));
  unint64_t v45 = *(void **)(v41 - 160);
  if (!v45) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  *(void *)(v41 - 152) = v45;
  operator delete(v45);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<std::pair<int,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~flat_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void operations_research::sat::CpModelPresolver::TryToSimplifyDomain(operations_research::sat::PresolveContext **this, const char *a2)
{
  if ((a2 & 0x80000000) != 0)
  {
    long long v53 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v68, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4216);
    long long v54 = (void *)google::LogMessage::stream(v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
    goto LABEL_81;
  }
  if (!operations_research::sat::PresolveContext::ConstraintVariableGraphIsUpToDate(this[2]))
  {
    uint64_t v55 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v68, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4217);
    uint64_t v56 = (void *)google::LogMessage::stream(v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Check failed: context_->ConstraintVariableGraphIsUpToDate() ", 60);
LABEL_81:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v68);
  }
  uint64_t v4 = this[2];
  if (!*((unsigned char *)v4 + 504)
    && !operations_research::sat::PresolveContext::IsFixed(v4, a2)
    && !operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(this[2], (int)a2))
  {
    operations_research::sat::PresolveContext::GetAffineRelation(this[2], (int)a2, (uint64_t)v68);
    if (v68[0] == a2)
    {
      if (operations_research::sat::PresolveContext::VariableIsOnlyUsedInEncoding(this[2], (int)a2))
      {
        uint64_t v5 = (uint64_t)this[2];
        long long __p = operator new(0x28uLL);
        *(_OWORD *)unint64_t v67 = xmmword_23CE85CF0;
        strcpy((char *)__p, "TODO variables: only used in encoding.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v5, (uint64_t)&__p);
        if (SHIBYTE(v67[1]) < 0) {
          operator delete(__p);
        }
      }
      operations_research::sat::PresolveContext::DomainOf(this[2], a2, (unint64_t *)&__p);
      if (operations_research::Domain::Size((operations_research::Domain *)&__p) == 2
        && (operations_research::Domain::Min((operations_research::Domain *)&__p, v6)
         || operations_research::Domain::Max((operations_research::Domain *)&__p, v7) != 1))
      {
        operations_research::sat::PresolveContext::CanonicalizeDomainOfSizeTwo(this[2], a2);
      }
      else
      {
        unint64_t v8 = (unint64_t)__p;
        if (operations_research::Domain::Size((operations_research::Domain *)&__p) == (int)(v8 >> 1))
        {
          uint64_t v10 = operations_research::Domain::Min((operations_research::Domain *)&__p, v9);
          uint64_t v11 = v10;
          uint64_t v58 = v10;
          unint64_t v12 = (unint64_t)__p;
          int v13 = (char *)v67[0] + 16;
          if ((__p & 1) == 0) {
            int v13 = v68;
          }
          uint64_t v14 = *v13 - v10;
          if ((int)((unint64_t)__p >> 1) >= 3)
          {
            uint64_t v15 = 2;
            while (1)
            {
              BOOL v16 = (v12 & 1) == 0;
              unint64_t v17 = v67;
              if (!v16) {
                unint64_t v17 = (void **)v67[0];
              }
              unint64_t v18 = &v17[2 * v15];
              uint64_t v20 = *v18;
              uint64_t v19 = v18[1];
              uint64_t v62 = v20;
              unint64_t v65 = v19;
              if (v20 != v19) {
                google::MakeCheckOpString<long long,long long>((int)&v62, (int)&v65, "i.start == i.end");
              }
              LODWORD(v65) = 0;
              uint64_t v21 = (uint64_t)v20 - v10;
              uint64_t v62 = (void *)v21;
              if (v21 < 0) {
                google::MakeCheckOpString<long long,int>((int)&v62, (int)&v65, "shifted_value >= 0");
              }
              if (v21)
              {
                uint64_t v22 = v14;
                do
                {
                  uint64_t v14 = v21;
                  uint64_t v21 = v22 % v21;
                  uint64_t v22 = v14;
                }
                while (v21);
              }
              if (v14 == 1) {
                goto LABEL_31;
              }
              ++v15;
              unint64_t v12 = (unint64_t)__p;
              if (v15 >= (int)((unint64_t)__p >> 1)) {
                goto LABEL_35;
              }
            }
          }
          if (v14 != 1)
          {
LABEL_35:
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            int v64 = 0;
            if ((int)(v12 >> 1) >= 1)
            {
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              do
              {
                BOOL v16 = (v12 & 1) == 0;
                uint64_t v26 = v67;
                if (!v16) {
                  uint64_t v26 = (void **)v67[0];
                }
                int v27 = (unint64_t *)&v26[2 * v24];
                unint64_t v29 = *v27;
                unint64_t v28 = v27[1];
                v60[0] = v29;
                unint64_t v61 = v28;
                if (v29 != v28) {
                  google::MakeCheckOpString<long long,long long>((int)v60, (int)&v61, "i.start == i.end");
                }
                uint64_t v30 = (uint64_t)(v29 - v11) / v14;
                if (v23 < v64)
                {
                  *(void *)uint64_t v23 = v30;
                  uint64_t v25 = (uint64_t)(v23 + 8);
                }
                else
                {
                  uint64_t v31 = (char *)v62;
                  int64_t v32 = v23 - (unsigned char *)v62;
                  uint64_t v33 = (v23 - (unsigned char *)v62) >> 3;
                  unint64_t v34 = v33 + 1;
                  if ((unint64_t)(v33 + 1) >> 61) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v35 = v64 - (unsigned char *)v62;
                  if ((v64 - (unsigned char *)v62) >> 2 > v34) {
                    unint64_t v34 = v35 >> 2;
                  }
                  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v36 = v34;
                  }
                  if (v36)
                  {
                    if (v36 >> 61) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    unint64_t v37 = v36;
                    int v38 = operator new(8 * v36);
                    unint64_t v36 = v37;
                    uint64_t v39 = (uint64_t *)&v38[8 * v33];
                    *uint64_t v39 = v30;
                    uint64_t v25 = (uint64_t)(v39 + 1);
                    if (v23 != v31)
                    {
LABEL_52:
                      unint64_t v40 = v23 - 8 - v31;
                      if (v40 < 0x168
                        || &v38[v32 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v38[v32 - 8]
                        || &v23[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v23 - 8
                        || (unint64_t)(v23 - v38 - v32) < 0x20)
                      {
                        uint64_t v41 = v23;
                        uint64_t v11 = v58;
                      }
                      else
                      {
                        uint64_t v43 = (v40 >> 3) + 1;
                        uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
                        uint64_t v41 = &v23[-v44];
                        uint64_t v39 = (uint64_t *)((char *)v39 - v44);
                        unint64_t v45 = &v38[8 * v33 - 16];
                        unint64_t v46 = v23 - 16;
                        uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
                        uint64_t v11 = v58;
                        do
                        {
                          long long v48 = *(_OWORD *)v46;
                          *(v45 - 1) = *((_OWORD *)v46 - 1);
                          *unint64_t v45 = v48;
                          v45 -= 2;
                          v46 -= 32;
                          v47 -= 4;
                        }
                        while (v47);
                        if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_55:
                          uint64_t v62 = v39;
                          uint64_t v63 = v25;
                          int v64 = &v38[8 * v36];
                          if (!v31) {
                            goto LABEL_38;
                          }
LABEL_59:
                          operator delete(v31);
                          goto LABEL_38;
                        }
                      }
                      do
                      {
                        uint64_t v42 = *((void *)v41 - 1);
                        v41 -= 8;
                        *--uint64_t v39 = v42;
                      }
                      while (v41 != v31);
                      goto LABEL_55;
                    }
                  }
                  else
                  {
                    int v38 = 0;
                    uint64_t v39 = (uint64_t *)(8 * v33);
                    *(void *)(8 * v33) = v30;
                    uint64_t v25 = 8 * v33 + 8;
                    if (v23 != v31) {
                      goto LABEL_52;
                    }
                  }
                  uint64_t v11 = v58;
                  uint64_t v62 = v39;
                  uint64_t v63 = v25;
                  int v64 = &v38[8 * v36];
                  if (v31) {
                    goto LABEL_59;
                  }
                }
LABEL_38:
                uint64_t v63 = v25;
                ++v24;
                LOBYTE(v12) = (_BYTE)__p;
                uint64_t v23 = (char *)v25;
              }
              while (v24 < (int)((unint64_t)__p >> 1));
            }
            uint64_t v49 = this[2];
            std::vector<long long>::vector(v59, (uint64_t)&v62);
            operations_research::Domain::FromValues((int64_t **)v59, v60);
            uint64_t v50 = (const char *)operations_research::sat::PresolveContext::NewIntVar(v49, (const operations_research::Domain *)v60);
            if (v60[0]) {
              operator delete((void *)v60[1]);
            }
            if (v59[0])
            {
              v59[1] = v59[0];
              operator delete(v59[0]);
            }
            if (v62)
            {
              uint64_t v63 = (uint64_t)v62;
              operator delete(v62);
            }
            uint64_t v51 = this[2];
            if (!*((unsigned char *)v51 + 504))
            {
              if (!operations_research::sat::PresolveContext::StoreAffineRelation(v51, a2, v50, v14, v11))
              {
                google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4271);
                uint64_t v57 = (void *)google::LogMessage::stream((google::LogMessage *)&v62);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: context_->StoreAffineRelation(var, new_var_index, gcd, var_min) ", 78);
                google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v62);
              }
              uint64_t v52 = (uint64_t)this[2];
              std::string::basic_string[abi:ne180100]<0>(&v62, "variables: canonicalize affine domain");
              operations_research::sat::PresolveContext::UpdateRuleStats(v52, (uint64_t)&v62);
              if (SHIBYTE(v64) < 0) {
                operator delete(v62);
              }
              operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(this[2]);
            }
          }
        }
      }
LABEL_31:
      if (__p) {
        operator delete(v67[0]);
      }
    }
  }
}

void sub_23CC61620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC61628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC61630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC61638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,int a27,__int16 a28,char a29,char a30)
{
  if (a25) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC61750()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 112));
}

void sub_23CC61758()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 112));
}

void operations_research::sat::CpModelPresolver::EncodeAllAffineRelations(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v2 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
  if (*(int *)(*((void *)v2 + 6) + 24) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      if (!operations_research::sat::PresolveContext::IsFixed(v2, v4))
      {
        operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), (int)v4, (uint64_t)&v33);
        if (v4 != v33)
        {
          uint64_t v5 = *((void *)this + 2);
          if (*(unsigned char *)(v5 + 64))
          {
            uint64_t v6 = *(void *)(v5 + 48);
            int v7 = *(int **)(v6 + 56);
            if (!v7) {
              goto LABEL_20;
            }
            goto LABEL_9;
          }
          if (!operations_research::sat::PresolveContext::VariableIsNotUsedAnymore((operations_research::sat::PresolveContext *)v5, (int)v4))
          {
            if (!operations_research::sat::CpModelPresolver::PresolveAffineRelationIfAny((operations_research::sat::PresolveContext **)this, v4))
            {
              operations_research::sat::PresolveContext::RemoveAllVariablesFromAffineRelationConstraint(*((void *)this + 2));
              if (**(unsigned char **)this) {
                BOOL v32 = v3 < 1;
              }
              else {
                BOOL v32 = 1;
              }
              if (!v32) {
                goto LABEL_41;
              }
              return;
            }
            if (!operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(*((operations_research::sat::PresolveContext **)this + 2), (int)v4)&& !operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v4))
            {
              break;
            }
          }
        }
      }
LABEL_4:
      uint64_t v4 = (const char *)(v4 + 1);
      uint64_t v2 = (operations_research::sat::PresolveContext *)*((void *)this + 2);
      if ((int)v4 >= *(_DWORD *)(*((void *)v2 + 6) + 24)) {
        goto LABEL_37;
      }
    }
    uint64_t v6 = *(void *)(*((void *)this + 2) + 48);
    int v7 = *(int **)(v6 + 56);
    if (!v7)
    {
LABEL_20:
      int v9 = *(_DWORD *)(v6 + 52);
      goto LABEL_22;
    }
LABEL_9:
    uint64_t v8 = *(int *)(v6 + 48);
    int v9 = *v7;
    if ((int)v8 >= *v7)
    {
      if (v9 == *(_DWORD *)(v6 + 52))
      {
LABEL_22:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v6 + 40), v9 + 1);
        int v7 = *(int **)(v6 + 56);
        int v9 = *v7;
      }
      int *v7 = v9 + 1;
      unint64_t v10 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v6 + 40));
      uint64_t v18 = *(void *)(v6 + 56);
      uint64_t v19 = *(int *)(v6 + 48);
      *(_DWORD *)(v6 + 48) = v19 + 1;
      *(void *)(v18 + 8 * v19 + 8) = v10;
      if (*(_DWORD *)(v10 + 60) != 12)
      {
LABEL_11:
        operations_research::sat::ConstraintProto::clear_constraint(v10);
        *(_DWORD *)(v10 + 60) = 12;
        uint64_t v11 = *(void *)(v10 + 8);
        unint64_t v12 = (google::protobuf::Arena *)(v11 & 0xFFFFFFFFFFFFFFFELL);
        if (v11) {
          unint64_t v12 = *(google::protobuf::Arena **)v12;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v12);
        uint64_t v14 = v13;
        *(void *)(v10 + 48) = v13;
        uint64_t v16 = *(unsigned int *)(v13 + 16);
        uint64_t v15 = (unsigned int *)(v13 + 16);
        unsigned int v17 = v16 + 1;
        if (v16 != *(_DWORD *)(v13 + 20)) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
    else
    {
      *(_DWORD *)(v6 + 48) = v8 + 1;
      unint64_t v10 = *(void *)&v7[2 * v8 + 2];
      if (*(_DWORD *)(v10 + 60) != 12) {
        goto LABEL_11;
      }
    }
    uint64_t v14 = *(void *)(v10 + 48);
    uint64_t v16 = *(unsigned int *)(v14 + 16);
    uint64_t v15 = (unsigned int *)(v14 + 16);
    unsigned int v17 = v16 + 1;
    if (v16 != *(_DWORD *)(v14 + 20))
    {
LABEL_26:
      *(_DWORD *)(*(void *)(v14 + 24) + 4 * v16) = v4;
      uint64_t v20 = *(unsigned int *)(v14 + 40);
      *(_DWORD *)(v14 + 16) = v17;
      if (v20 == *(_DWORD *)(v14 + 44))
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v14 + 40), v20 + 1);
        unsigned int v17 = *v15;
      }
      *(void *)(*(void *)(v14 + 48) + 8 * v20) = 1;
      *(_DWORD *)(v14 + 40) = v20 + 1;
      int v21 = v33;
      if (v17 == *(_DWORD *)(v14 + 20)) {
        google::protobuf::RepeatedField<int>::Reserve(v15, v17 + 1);
      }
      *(_DWORD *)(*(void *)(v14 + 24) + 4 * v17) = v21;
      *(_DWORD *)(v14 + 16) = v17 + 1;
      uint64_t v22 = v34;
      uint64_t v23 = *(unsigned int *)(v14 + 40);
      if (v23 == *(_DWORD *)(v14 + 44)) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v14 + 40), v23 + 1);
      }
      uint64_t v24 = *(unsigned int *)(v14 + 64);
      *(void *)(*(void *)(v14 + 48) + 8 * v23) = -v22;
      *(_DWORD *)(v14 + 40) = v23 + 1;
      uint64_t v25 = v35;
      int v26 = *(_DWORD *)(v14 + 68);
      unsigned int v27 = v24 + 1;
      if (v24 == v26)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v14 + 64), v24 + 1);
        int v26 = *(_DWORD *)(v14 + 68);
      }
      uint64_t v28 = *(void *)(v14 + 72);
      *(void *)(v28 + 8 * v24) = v25;
      *(_DWORD *)(v14 + 64) = v27;
      uint64_t v29 = v35;
      if (v27 == v26)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v14 + 64), v24 + 2);
        uint64_t v28 = *(void *)(v14 + 72);
      }
      ++v3;
      *(void *)(v28 + 8 * v27) = v29;
      *(_DWORD *)(v14 + 64) = v24 + 2;
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      goto LABEL_4;
    }
LABEL_25:
    google::protobuf::RepeatedField<int>::Reserve(v15, v17);
    goto LABEL_26;
  }
  uint64_t v3 = 0;
LABEL_37:
  operations_research::sat::PresolveContext::RemoveAllVariablesFromAffineRelationConstraint((uint64_t)v2);
  if (**(unsigned char **)this) {
    BOOL v30 = v3 < 1;
  }
  else {
    BOOL v30 = 1;
  }
  if (!v30)
  {
LABEL_41:
    google::LogMessage::LogMessage((google::LogMessage *)&v33, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4312);
    google::LogMessage::stream((google::LogMessage *)&v33);
    uint64_t v31 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" affine relations still in the model.", 37);
    google::LogMessage::~LogMessage((google::LogMessage *)&v33);
  }
}

void sub_23CC61AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveAffineRelationIfAny(operations_research::sat::PresolveContext **this, const char *a2)
{
  if (operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(this[2], (int)a2)) {
    return 1;
  }
  operations_research::sat::PresolveContext::GetAffineRelation(this[2], (int)a2, (uint64_t)&v43);
  if (v43 == a2) {
    return 1;
  }
  uint64_t result = operations_research::sat::PresolveContext::PropagateAffineRelation(this[2], (int)a2);
  if (!result) {
    return result;
  }
  if (operations_research::sat::PresolveContext::IsFixed(this[2], a2)) {
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = this[2];
  int v7 = (void *)(*((void *)v6 + 85) + 48 * (int)a2);
  unint64_t v8 = ((((unint64_t)&off_264E82C18 + 6) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 6));
  unint64_t v9 = (v8 >> 7) ^ (*v7 >> 12);
  uint64_t v10 = v7[3];
  uint64_t v11 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    uint64_t v12 = v9 & v10;
    uint64_t v13 = *(void *)(*v7 + v12);
    unint64_t v14 = ((v13 ^ v11) - 0x101010101010101) & ~(v13 ^ v11) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_9:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_17;
    }
    v5 += 8;
    unint64_t v9 = v5 + v12;
  }
  while (1)
  {
    unint64_t v15 = (v12 + (__clz(__rbit64(v14)) >> 3)) & v10;
    if (*(_DWORD *)(v7[1] + 4 * v15) == -2) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_9;
    }
  }
  if (v15 == v10)
  {
LABEL_17:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v42, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4331);
    int v21 = (void *)google::LogMessage::stream((google::LogMessage *)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: context_->VarToConstraints(var).contains(kAffineRelationConstraint) ", 82);
    goto LABEL_18;
  }
  if (operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(v6, v43))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v42, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4332);
    uint64_t v41 = (void *)google::LogMessage::stream((google::LogMessage *)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: !context_->VariableIsNotUsedAnymore(r.representative) ", 68);
LABEL_18:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v42);
  }
  if (operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(this[2], (int)a2))
  {
    uint64_t v16 = *((void *)this[2] + 7);
    unsigned int v17 = *(int **)(v16 + 56);
    if (v17)
    {
      uint64_t v18 = *(int *)(v16 + 48);
      int v19 = *v17;
      if ((int)v18 < *v17)
      {
        *(_DWORD *)(v16 + 48) = v18 + 1;
        unint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_23:
        if (*(_DWORD *)(v20 + 60) == 12)
        {
          uint64_t v24 = *(void *)(v20 + 48);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v20);
          *(_DWORD *)(v20 + 60) = 12;
          uint64_t v25 = *(void *)(v20 + 8);
          int v26 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
          if (v25) {
            int v26 = *(google::protobuf::Arena **)v26;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v26);
          uint64_t v24 = v27;
          *(void *)(v20 + 48) = v27;
        }
        uint64_t v28 = *(unsigned int *)(v24 + 16);
        unsigned int v29 = v28 + 1;
        if (v28 == *(_DWORD *)(v24 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v24 + 16), v28 + 1);
        }
        *(_DWORD *)(*(void *)(v24 + 24) + 4 * v28) = a2;
        uint64_t v30 = *(unsigned int *)(v24 + 40);
        *(_DWORD *)(v24 + 16) = v29;
        if (v30 == *(_DWORD *)(v24 + 44))
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 40), v30 + 1);
          unsigned int v29 = *(_DWORD *)(v24 + 16);
        }
        *(void *)(*(void *)(v24 + 48) + 8 * v30) = 1;
        *(_DWORD *)(v24 + 40) = v30 + 1;
        int v31 = v43;
        if (v29 == *(_DWORD *)(v24 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v24 + 16), v29 + 1);
        }
        *(_DWORD *)(*(void *)(v24 + 24) + 4 * v29) = v31;
        *(_DWORD *)(v24 + 16) = v29 + 1;
        uint64_t v32 = -v44;
        uint64_t v33 = *(unsigned int *)(v24 + 40);
        if (v33 == *(_DWORD *)(v24 + 44)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 40), v33 + 1);
        }
        uint64_t v34 = *(unsigned int *)(v24 + 64);
        *(void *)(*(void *)(v24 + 48) + 8 * v33) = v32;
        *(_DWORD *)(v24 + 40) = v33 + 1;
        uint64_t v35 = v45;
        int v36 = *(_DWORD *)(v24 + 68);
        unsigned int v37 = v34 + 1;
        if (v34 == v36)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 64), v34 + 1);
          int v36 = *(_DWORD *)(v24 + 68);
        }
        uint64_t v38 = *(void *)(v24 + 72);
        *(void *)(v38 + 8 * v34) = v35;
        *(_DWORD *)(v24 + 64) = v37;
        uint64_t v39 = v45;
        int v40 = v34 + 2;
        if (v37 == v36)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 64), v40);
          uint64_t v38 = *(void *)(v24 + 72);
        }
        *(void *)(v38 + 8 * v37) = v39;
        *(_DWORD *)(v24 + 64) = v40;
        operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(this[2], a2);
        return 1;
      }
      if (v19 != *(_DWORD *)(v16 + 52))
      {
LABEL_22:
        *unsigned int v17 = v19 + 1;
        unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v16 + 40));
        uint64_t v22 = *(void *)(v16 + 56);
        uint64_t v23 = *(int *)(v16 + 48);
        *(_DWORD *)(v16 + 48) = v23 + 1;
        *(void *)(v22 + 8 * v23 + 8) = v20;
        goto LABEL_23;
      }
    }
    else
    {
      int v19 = *(_DWORD *)(v16 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v16 + 40), v19 + 1);
    unsigned int v17 = *(int **)(v16 + 56);
    int v19 = *v17;
    goto LABEL_22;
  }
  return 1;
}

void sub_23CC61ED8(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC61EE0(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::CpModelPresolver::PresolveToFixPoint(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (*(unsigned char *)(v1 + 504)) {
    return;
  }
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *(unsigned int *)(*(void *)this + 176);
  if ((int)v4 <= 0) {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v143 = v4;
  long long v156 = 0u;
  long long v157 = 0u;
  unint64_t v154 = 0;
  uint64_t v155 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v158 = 0;
  uint64_t v5 = *(void *)(v3 + 584);
  unint64_t v6 = *(int *)(*(void *)(v1 + 48) + 48);
  double v152 = 0;
  unint64_t v153 = 0;
  if (!v6)
  {
    long long v150 = 0uLL;
    unsigned long long v151 = 0uLL;
    *(_OWORD *)uint64_t v149 = 0uLL;
LABEL_20:
    uint64_t v16 = 0;
    unint64_t v9 = 0;
    uint64_t v11 = 0;
    uint64_t v8 = 0;
LABEL_21:
    unsigned int v17 = 0;
    int v19 = 0;
    uint64_t v18 = &v11[8 * ((v8 + v9) >> 10)];
    long long __p = this;
    goto LABEL_23;
  }
  if ((v6 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  double v152 = operator new(8 * (((v6 - 1) >> 6) + 1));
  unint64_t v153 = 0;
  unint64_t v154 = ((v6 - 1) >> 6) + 1;
  std::vector<BOOL>::__construct_at_end[abi:ne180100](&v152, v6, 0);
  unint64_t v7 = v153;
  long long v150 = 0u;
  unsigned long long v151 = 0u;
  *(_OWORD *)uint64_t v149 = 0u;
  if (!v153) {
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  do
  {
    if (*(_DWORD *)(*(void *)(*(void *)(*(void *)(*((void *)this + 2) + 48) + 56) + 8 * v12 + 8) + 60))
    {
      *(void *)((char *)v152 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (v11 == v10) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = ((v11 - v10) << 7) - 1;
      }
      uint64_t v14 = *((void *)&v151 + 1);
      unint64_t v9 = v151;
      unint64_t v15 = *((void *)&v151 + 1) + v151;
      if (v13 == *((void *)&v151 + 1) + (void)v151)
      {
        std::deque<int>::__add_back_capacity((uint64_t)v149);
        uint64_t v10 = (char *)v149[1];
        uint64_t v11 = (unsigned char *)v150;
        uint64_t v14 = *((void *)&v151 + 1);
        unint64_t v9 = v151;
        unint64_t v15 = v151 + *((void *)&v151 + 1);
      }
      *(_DWORD *)(*(void *)&v10[(v15 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v15 & 0x3FF)) = v12;
      uint64_t v8 = v14 + 1;
      *((void *)&v151 + 1) = v8;
      unint64_t v7 = v153;
    }
    ++v12;
  }
  while (v7 > v12);
  uint64_t v16 = &v10[8 * (v9 >> 10)];
  if (v11 == v10) {
    goto LABEL_21;
  }
  unsigned int v17 = (int *)(*(void *)v16 + 4 * (v9 & 0x3FF));
  uint64_t v18 = &v10[8 * ((v8 + v9) >> 10)];
  int v19 = (int *)(*(void *)v18 + 4 * (((_WORD)v8 + (_WORD)v9) & 0x3FF));
  long long __p = this;
  if (v19 != v17)
  {
    uint64_t v20 = (((uint64_t)v19 - *(void *)v18) >> 2) + ((v18 - v16) << 7);
    uint64_t v21 = ((uint64_t)v17 - *(void *)v16) >> 2;
    if (v20 != v21)
    {
      std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>((unint64_t)v16, v17, v18, v19, (uint64_t *)&__p, 2 * (63 - __clz(v20 - v21)), 1);
      if (!*((void *)&v151 + 1)) {
        goto LABEL_146;
      }
      goto LABEL_26;
    }
  }
LABEL_23:
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>((unint64_t)v16, v17, v18, v19, (uint64_t *)&__p, 0, 1);
  if (*((void *)&v151 + 1))
  {
LABEL_26:
    uint64_t v142 = (int *)(v5 + 32);
    uint64_t v23 = *((void *)this + 2);
    do
    {
      if (*(unsigned char *)(v23 + 504)) {
        break;
      }
      if (v5)
      {
        uint64_t v24 = *(unsigned __int8 **)(v5 + 120);
        if (v24)
        {
          unsigned __int8 v25 = atomic_load(v24);
          if (v25) {
            break;
          }
        }
        if (fmax(*(double *)(v5 + 104) - *(double *)(v5 + 112), 0.0) <= 0.0) {
          break;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)updated);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = CurrentTimeNanos;
        uint64_t v28 = *(void *)(v5 + 24) <= CurrentTimeNanos - *(void *)(v5 + 8)
            ? CurrentTimeNanos - *(void *)(v5 + 8)
            : *(void *)(v5 + 24);
        operations_research::RunningMax<long long>::Add(v142, v28);
        *(void *)(v5 + 8) = v27;
        if (*(void *)(*(void *)(v5 + 40) + 8 * *(int *)(v5 + 68)) + v27 >= *(void *)(v5 + 16))
        {
          if (!FLAGS_time_limit_use_usertime) {
            goto LABEL_145;
          }
          double v29 = *(double *)(v5 + 96);
          if (*(unsigned char *)(v5 + 72))
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep updated = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)updated);
            double v30 = v29 + (double)(updated - *(void *)(v5 + 80) + *(void *)(v5 + 88)) * -0.000000001;
            if (v30 <= 0.0001) {
              goto LABEL_145;
            }
          }
          else
          {
            double v30 = v29 + (double)*(uint64_t *)(v5 + 88) * -0.000000001;
            if (v30 <= 0.0001)
            {
LABEL_145:
              *(void *)(v5 + 16) = 0;
              break;
            }
          }
          *(void *)(v5 + 16) = *(void *)(v5 + 8) + (uint64_t)(v30 * 1000000000.0);
        }
      }
      if (*(void *)(*((void *)this + 2) + 120) > v143) {
        break;
      }
      while (*((void *)&v151 + 1) && !*(unsigned char *)(*((void *)this + 2) + 504))
      {
        if (v5)
        {
          int v31 = *(unsigned __int8 **)(v5 + 120);
          if (v31)
          {
            unsigned __int8 v32 = atomic_load(v31);
            if (v32) {
              break;
            }
          }
          if (fmax(*(double *)(v5 + 104) - *(double *)(v5 + 112), 0.0) <= 0.0) {
            break;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v33 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)updated);
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v34 = v33;
          uint64_t v35 = *(void *)(v5 + 24) <= v33 - *(void *)(v5 + 8) ? v33 - *(void *)(v5 + 8) : *(void *)(v5 + 24);
          operations_research::RunningMax<long long>::Add(v142, v35);
          *(void *)(v5 + 8) = v34;
          if (*(void *)(*(void *)(v5 + 40) + 8 * *(int *)(v5 + 68)) + v34 >= *(void *)(v5 + 16))
          {
            if (!FLAGS_time_limit_use_usertime) {
              goto LABEL_75;
            }
            double v37 = *(double *)(v5 + 96);
            if (*(unsigned char *)(v5 + 72))
            {
              double v38 = v37
                  + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v36) - *(void *)(v5 + 80) + *(void *)(v5 + 88))
                  * -0.000000001;
              if (v38 <= 0.0001) {
                goto LABEL_75;
              }
            }
            else
            {
              double v38 = v37 + (double)*(uint64_t *)(v5 + 88) * -0.000000001;
              if (v38 <= 0.0001)
              {
LABEL_75:
                *(void *)(v5 + 16) = 0;
                break;
              }
            }
            *(void *)(v5 + 16) = *(void *)(v5 + 8) + (uint64_t)(v38 * 1000000000.0);
          }
        }
        uint64_t v39 = *((void *)this + 2);
        if (*(void *)(v39 + 120) > v143) {
          break;
        }
        int v40 = (void **)v149[1];
        unint64_t v41 = *(int *)(*(void *)((char *)v149[1] + (((unint64_t)v151 >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * (v151 & 0x3FF));
        *(void *)((char *)v152 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v41);
        unint64_t v42 = v151 + 1;
        unsigned long long v151 = __PAIR128__(*((unint64_t *)&v151 + 1), (uint64_t)v151 + 1) + __PAIR128__(-1, 0);
        if (v42 >= 0x800)
        {
          operator delete(*v40);
          v149[1] = (char *)v149[1] + 8;
          *(void *)&unsigned long long v151 = v151 - 1024;
          uint64_t v39 = *((void *)this + 2);
        }
        int v43 = *(_DWORD *)(*(void *)(v39 + 48) + 48);
        int v44 = operations_research::sat::CpModelPresolver::PresolveOneConstraint(this, v41);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep updated = *((void *)this + 2);
        if (*(unsigned char *)(updated + 504) && **(unsigned char **)this)
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v144, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4404);
          uint64_t v45 = (void *)google::LogMessage::stream((google::LogMessage *)&v144);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Unsat after presolving constraint #", 35);
          unint64_t v46 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" (warning, dump might be inconsistent): ", 40);
          google::protobuf::Message::ShortDebugString(&__p);
        }
        unint64_t v47 = *(int *)(*(void *)(updated + 48) + 48);
        if ((int)v47 > v43)
        {
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)updated);
          std::vector<BOOL>::resize((uint64_t)&v152, v47, 1uLL);
          long long v48 = (char *)v149[1];
          uint64_t v49 = (unsigned char *)v150;
          uint64_t v51 = *((void *)&v151 + 1);
          uint64_t v50 = v151;
          do
          {
            if (v49 == v48) {
              uint64_t v52 = 0;
            }
            else {
              uint64_t v52 = ((v49 - v48) << 7) - 1;
            }
            unint64_t v53 = v51 + v50;
            if (v52 == v51 + v50)
            {
              std::deque<int>::__add_back_capacity((uint64_t)v149);
              long long v48 = (char *)v149[1];
              uint64_t v49 = (unsigned char *)v150;
              uint64_t v51 = *((void *)&v151 + 1);
              uint64_t v50 = v151;
              unint64_t v53 = v151 + *((void *)&v151 + 1);
            }
            *(_DWORD *)(*(void *)&v48[(v53 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v53 & 0x3FF)) = v43;
            *((void *)&v151 + 1) = ++v51;
            ++v43;
          }
          while (v47 != v43);
        }
        if (v44) {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep updated = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v41);
        }
      }
      uint64_t v54 = *((void *)this + 2);
      int v55 = *(_DWORD *)(*(void *)(v54 + 48) + 24);
      if (v55 >= 1)
      {
        uint64_t v56 = 0;
        do
        {
          if (*(unsigned char *)(*((void *)this + 2) + 504)
            || !operations_research::sat::CpModelPresolver::PresolveAffineRelationIfAny((operations_research::sat::PresolveContext **)this, v56))
          {
            goto LABEL_184;
          }
          operations_research::sat::CpModelPresolver::TryToSimplifyDomain((operations_research::sat::PresolveContext **)this, v56);
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                       + 2));
          uint64_t v56 = (const char *)(v56 + 1);
        }
        while (v55 != v56);
        uint64_t v54 = *((void *)this + 2);
      }
      if (*(unsigned char *)(v54 + 504)) {
        goto LABEL_184;
      }
      std::vector<BOOL>::resize((uint64_t)&v152, *(int *)(*(void *)(v54 + 48) + 48), 0);
      uint64_t v57 = (void *)*((void *)this + 2);
      uint64_t v58 = (const char **)v57[38];
      char v59 = (const char **)v57[39];
      if (v58 != v59)
      {
        while (1)
        {
          unint64_t v61 = *v58;
          if (!operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(*((operations_research::sat::PresolveContext **)this + 2), (int)*v58))break; {
LABEL_86:
          }
          if (++v58 == v59)
          {
            uint64_t v60 = *(unsigned int *)(*(void *)(*((void *)this + 2) + 48) + 24);
            if ((int)v60 >= 1) {
              goto LABEL_107;
            }
            goto LABEL_133;
          }
        }
        if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v61))
        {
          operations_research::sat::PresolveContext::ExploitFixedDomain(*((operations_research::sat::PresolveContext **)this + 2), v61);
        }
        uint64_t v62 = (char **)(*(void *)(*((void *)this + 2) + 680) + 48 * (int)v61);
        uint64_t v63 = v62[1];
        int v64 = *v62;
        if (**v62 <= -2)
        {
          do
          {
            unint64_t v65 = (__clz(__rbit64(((*v64 >> 7) & ~*v64 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            int v64 = (void *)((char *)v64 + v65);
            v63 += 4 * v65;
          }
          while (*(char *)v64 < -1);
        }
        uint64_t v66 = &v62[3][(void)*v62];
        while (1)
        {
LABEL_93:
          if (v64 == (void *)v66) {
            goto LABEL_86;
          }
          unint64_t v67 = *(unsigned int *)v63;
          if ((v67 & 0x80000000) != 0) {
            break;
          }
          uint64_t v68 = *((void *)v152 + (v67 >> 6));
          if ((v68 & (1 << v67)) != 0) {
            break;
          }
          uint64_t v71 = (char *)v149[1];
          uint64_t v72 = (char *)v150;
          unint64_t v73 = (((void)v150 - (unint64_t)v149[1]) << 7) - 1;
          *((void *)v152 + (v67 >> 6)) = v68 | (1 << v67);
          if (v72 == v71) {
            unint64_t v74 = 0;
          }
          else {
            unint64_t v74 = v73;
          }
          uint64_t v75 = *((void *)&v151 + 1);
          unint64_t v76 = *((void *)&v151 + 1) + v151;
          if (v74 == *((void *)&v151 + 1) + (void)v151)
          {
            std::deque<int>::__add_back_capacity((uint64_t)v149);
            uint64_t v75 = *((void *)&v151 + 1);
            uint64_t v71 = (char *)v149[1];
            unint64_t v76 = v151 + *((void *)&v151 + 1);
          }
          *(_DWORD *)(*(void *)&v71[(v76 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v76 & 0x3FF)) = v67;
          *((void *)&v151 + 1) = v75 + 1;
          int v77 = *((char *)v64 + 1);
          int v64 = (void *)((char *)v64 + 1);
          v63 += 4;
          if (v77 <= -2) {
            goto LABEL_97;
          }
        }
        int v69 = *((char *)v64 + 1);
        int v64 = (void *)((char *)v64 + 1);
        v63 += 4;
        if (v69 > -2) {
          goto LABEL_93;
        }
        do
        {
LABEL_97:
          unint64_t v70 = (__clz(__rbit64(((*v64 >> 7) & ~*v64 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          int v64 = (void *)((char *)v64 + v70);
          v63 += 4 * v70;
        }
        while (*(char *)v64 < -1);
        goto LABEL_93;
      }
      uint64_t v60 = *(unsigned int *)(v57[6] + 24);
      if ((int)v60 >= 1)
      {
LABEL_107:
        for (uint64_t i = 0; i != v60; ++i)
        {
          uint64_t v79 = *(void *)(*((void *)this + 2) + 680) + 48 * i;
          if (*(void *)(v79 + 16) == 1)
          {
            unint64_t v81 = *(void **)v79;
            unint64_t v80 = *(unsigned int **)(v79 + 8);
            if (*(char *)v81 <= -2)
            {
              do
              {
                unint64_t v82 = (__clz(__rbit64(((*v81 >> 7) & ~*v81 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                unint64_t v81 = (void *)((char *)v81 + v82);
                v80 += v82;
              }
              while (*(char *)v81 < -1);
            }
            unint64_t v83 = *v80;
            if ((v83 & 0x80000000) == 0)
            {
              unint64_t v84 = v83 >> 6;
              uint64_t v85 = 1 << v83;
              if ((*((void *)v152 + (v83 >> 6)) & (1 << v83)) == 0)
              {
                uint64_t v86 = 0;
                unint64_t v87 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + i)
                       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                           + i)))
                    + v83;
                unint64_t v88 = ((v87 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v87);
                unint64_t v89 = (v88 >> 7) ^ ((unint64_t)v155 >> 12);
                uint64_t v90 = 0x101010101010101 * (v88 & 0x7F);
                while (1)
                {
                  unint64_t v91 = v89 & v157;
                  uint64_t v92 = *(void *)((char *)v155 + v91);
                  unint64_t v93 = ((v92 ^ v90) - 0x101010101010101) & ~(v92 ^ v90) & 0x8080808080808080;
                  if (v93) {
                    break;
                  }
LABEL_122:
                  if ((v92 & (~v92 << 6) & 0x8080808080808080) != 0) {
                    goto LABEL_125;
                  }
                  v86 += 8;
                  unint64_t v89 = v86 + v91;
                }
                while (1)
                {
                  unint64_t v94 = (v91 + (__clz(__rbit64(v93)) >> 3)) & v157;
                  uint64_t v95 = (unsigned int *)(v156 + 8 * v94);
                  uint64_t v96 = *v95;
                  unsigned int v97 = v95[1];
                  if (i == v96 && v97 == v83) {
                    break;
                  }
                  v93 &= v93 - 1;
                  if (!v93) {
                    goto LABEL_122;
                  }
                }
                if (v94 == (void)v157)
                {
LABEL_125:
                  long long __p = (void *)__PAIR64__(v83, i);
                  unint64_t v99 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::find_or_prepare_insert<std::pair<int,int>>((uint64_t *)&v155, (unsigned int *)&__p);
                  if (v100) {
                    *(void *)(v156 + 8 * v99) = __p;
                  }
                  uint64_t v101 = *((void *)v152 + v84);
                  if ((v101 & v85) == 0)
                  {
                    unint64_t v102 = (char *)v149[1];
                    uint64_t v103 = (char *)v150;
                    unint64_t v104 = (((void)v150 - (unint64_t)v149[1]) << 7) - 1;
                    *((void *)v152 + v84) = v101 | v85;
                    if (v103 == v102) {
                      unint64_t v105 = 0;
                    }
                    else {
                      unint64_t v105 = v104;
                    }
                    uint64_t v106 = *((void *)&v151 + 1);
                    unint64_t v107 = *((void *)&v151 + 1) + v151;
                    if (v105 == *((void *)&v151 + 1) + (void)v151)
                    {
                      std::deque<int>::__add_back_capacity((uint64_t)v149);
                      uint64_t v106 = *((void *)&v151 + 1);
                      unint64_t v102 = (char *)v149[1];
                      unint64_t v107 = v151 + *((void *)&v151 + 1);
                    }
                    *(_DWORD *)(*(void *)&v102[(v107 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v107 & 0x3FF)) = v83;
                    *((void *)&v151 + 1) = v106 + 1;
                  }
                  continue;
                }
              }
            }
          }
        }
      }
LABEL_133:
      int v108 = (char **)((char *)v149[1] + 8 * ((unint64_t)v151 >> 10));
      if ((void *)v150 == v149[1])
      {
        uint64_t v109 = 0;
        uint64_t v111 = 0;
        long long v110 = (int **)((char *)v149[1] + 8 * ((*((void *)&v151 + 1) + (void)v151) >> 10));
      }
      else
      {
        uint64_t v109 = (int *)&(*v108)[4 * (v151 & 0x3FF)];
        long long v110 = (int **)((char *)v149[1] + 8 * ((*((void *)&v151 + 1) + (void)v151) >> 10));
        uint64_t v111 = &(*v110)[(*((void *)&v151 + 1) + v151) & 0x3FF];
        if (v111 != v109)
        {
          uint64_t v112 = ((4 * ((WORD4(v151) + (_WORD)v151) & 0x3FF)) >> 2) + (((char *)v110 - (char *)v108) << 7);
          uint64_t v113 = (uint64_t)(4 * (v151 & 0x3FF)) >> 2;
          if (v112 != v113)
          {
            unint64_t v114 = 63 - __clz(v112 - v113);
            goto LABEL_140;
          }
        }
      }
      unint64_t v114 = 0;
LABEL_140:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(v108, v109, v110, v111, (uint64_t)&__p, 2 * v114, 1);
      uint64_t v23 = *((void *)this + 2);
      unint64_t v115 = *(unint64_t **)(v23 + 304);
      uint64_t v116 = *(unint64_t **)(v23 + 312);
      if (v115 != v116)
      {
        uint64_t v117 = *(void *)(v23 + 256);
        uint64_t v118 = *(unint64_t **)(v23 + 304);
        do
        {
          unint64_t v119 = *v118++;
          *(void *)(v117 + ((v119 >> 3) & 0x1FFFFFFFFFFFFFF8)) = 0;
        }
        while (v118 != v116);
      }
      *(void *)(v23 + 312) = v115;
    }
    while (*((void *)&v151 + 1));
  }
LABEL_146:
  uint64_t v120 = *((void *)this + 2);
  if (*(unsigned char *)(v120 + 504)) {
    goto LABEL_184;
  }
  uint64_t v121 = *(unsigned int *)(*(void *)(v120 + 48) + 48);
  if ((int)v121 < 1)
  {
LABEL_183:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(v120 + 352, *(_DWORD *)(v120 + 352));
    goto LABEL_184;
  }
  uint64_t v122 = 0;
  while (1)
  {
    uint64_t v123 = *((void *)this + 2);
    uint64_t v124 = *(void *)(*(void *)(*(void *)(v123 + 48) + 56) + 8 * v122 + 8);
    int v125 = *(_DWORD *)(v124 + 60);
    if (v125 == 3) {
      break;
    }
    if (v125 == 20)
    {
      if ((operations_research::sat::CpModelPresolver::PresolveNoOverlap(this, (operations_research::sat::ConstraintProto *)v124) & 1) == 0)goto LABEL_150; {
    }
      }
    else if (v125 != 22 {
           || !operations_research::sat::CpModelPresolver::PresolveCumulative(this, (operations_research::sat::ConstraintProto *)v124))
    }
    {
      goto LABEL_150;
    }
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v122);
LABEL_150:
    if (++v122 == v121)
    {
      uint64_t v120 = *((void *)this + 2);
      goto LABEL_183;
    }
  }
  operations_research::sat::DomainDeductions::ProcessClause((uint64_t *)(v123 + 328), *(int **)(*(void *)(v124 + 48) + 24), *(int *)(*(void *)(v124 + 48) + 16), (uint64_t *)&__p);
  unint64_t v126 = (void **)__p;
  unint64_t v127 = v148;
  if (__p == v148)
  {
LABEL_166:
    if (v126)
    {
      int v131 = v148;
      uint64_t v132 = v126;
      if (v148 != v126)
      {
        do
        {
          if (*(unsigned char *)(v131 - 3)) {
            operator delete(*(v131 - 2));
          }
          v131 -= 4;
        }
        while (v131 != v126);
        uint64_t v132 = __p;
      }
      uint64_t v148 = v126;
      operator delete(v132);
    }
    goto LABEL_150;
  }
  while (1)
  {
    BOOL v146 = 0;
    unsigned int v129 = *(_DWORD *)v126;
    unint64_t v128 = (const operations_research::Domain *)(v126 + 1);
    if ((operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v129, v128, &v146) & 1) == 0)break; {
    if (v146)
    }
    {
      uint64_t v130 = *((void *)this + 2);
      uint64_t v144 = operator new(0x28uLL);
      long long v145 = xmmword_23CE7ECE0;
      strcpy((char *)v144, "deductions: reduced variable domain");
      operations_research::sat::PresolveContext::UpdateRuleStats(v130, (uint64_t)&v144);
      if (SHIBYTE(v145) < 0) {
        operator delete(v144);
      }
    }
    unint64_t v126 = (void **)((char *)v128 + 24);
    if (v126 == v127)
    {
      unint64_t v126 = (void **)__p;
      goto LABEL_166;
    }
  }
  uint64_t v133 = (void **)__p;
  if (__p)
  {
    unint64_t v134 = v148;
    uint64_t v135 = __p;
    if (v148 != __p)
    {
      do
      {
        if (*(unsigned char *)(v134 - 3)) {
          operator delete(*(v134 - 2));
        }
        v134 -= 4;
      }
      while (v134 != v133);
      uint64_t v135 = __p;
    }
    uint64_t v148 = v133;
    operator delete(v135);
  }
LABEL_184:
  unint64_t v136 = (void **)v149[1];
  uint64_t v137 = (void **)v150;
  *((void *)&v151 + 1) = 0;
  unint64_t v138 = v150 - (unint64_t)v149[1];
  if ((unint64_t)v150 - (unint64_t)v149[1] >= 0x11)
  {
    do
    {
      operator delete(*v136);
      uint64_t v137 = (void **)v150;
      unint64_t v136 = (void **)((char *)v149[1] + 8);
      v149[1] = v136;
      unint64_t v138 = v150 - (void)v136;
    }
    while ((void)v150 - (void)v136 > 0x10uLL);
  }
  unint64_t v139 = v138 >> 3;
  if (v139 == 1)
  {
    uint64_t v140 = 512;
LABEL_190:
    *(void *)&unsigned long long v151 = v140;
  }
  else if (v139 == 2)
  {
    uint64_t v140 = 1024;
    goto LABEL_190;
  }
  if (v136 != v137)
  {
    do
    {
      uint64_t v141 = *v136++;
      operator delete(v141);
    }
    while (v136 != v137);
    if ((void *)v150 != v149[1]) {
      *(void *)&long long v150 = v150 + (((unint64_t)v149[1] - v150 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (v149[0]) {
    operator delete(v149[0]);
  }
  if (v152) {
    operator delete(v152);
  }
  if ((void)v157)
  {
    operator delete(v155);
    uint64_t v155 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v158 = 0;
    *(void *)&long long v157 = 0;
    long long v156 = 0uLL;
  }
  if (*((void *)&v157 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v157 + 1));
  }
}

void sub_23CC62DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  absl::lts_2020_02_25::flat_hash_set<std::pair<int,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~flat_hash_set((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<int,operations_research::Domain>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(unsigned char *)(v3 - 3)) {
          operator delete(*(v3 - 2));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::LogInfoFromContext(operations_research::sat *this, const operations_research::sat::PresolveContext *a2)
{
  google::LogMessage::LogMessage((google::LogMessage *)&v32, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4543);
  uint64_t v3 = (void *)google::LogMessage::stream((google::LogMessage *)&v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"- ", 2);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" affine relations were detected.", 32);
  google::LogMessage::~LogMessage((google::LogMessage *)&v32);
  google::LogMessage::LogMessage((google::LogMessage *)&v32, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4545);
  uint64_t v5 = (void *)google::LogMessage::stream((google::LogMessage *)&v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"- ", 2);
  unint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" variable equivalence relations were detected.", 46);
  google::LogMessage::~LogMessage((google::LogMessage *)&v32);
  unint64_t v7 = (char *)*((void *)this + 9);
  uint64_t v8 = (const void **)*((void *)this + 10);
  unint64_t v9 = v7;
  if (*v7 <= -2)
  {
    do
    {
      unint64_t v10 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unint64_t v9 = (void *)((char *)v9 + v10);
      v8 += 4 * v10;
    }
    while (*(char *)v9 < -1);
  }
  uint64_t v11 = &v7[*((void *)this + 12)];
  v33[0] = 0;
  v33[1] = 0;
  unsigned __int8 v32 = v33;
  if (v9 != (void *)v11)
  {
    do
    {
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t **)&v32, (uint64_t *)v33, v8, (uint64_t)v8);
      int v12 = *((char *)v9 + 1);
      unint64_t v9 = (void *)((char *)v9 + 1);
      v8 += 4;
      if (v12 <= -2)
      {
        do
        {
          unint64_t v13 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v9 = (void *)((char *)v9 + v13);
          v8 += 4 * v13;
        }
        while (*(char *)v9 < -1);
      }
    }
    while (v9 != (void *)v11);
    uint64_t v14 = (uint64_t *)v32;
    if (v32 != v33)
    {
      do
      {
        if (*((_DWORD *)v14 + 14) == 1)
        {
          google::LogMessage::LogMessage((google::LogMessage *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4551);
          unint64_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v31);
          uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"- rule '", 8);
          int v17 = *((char *)v14 + 55);
          if (v17 >= 0) {
            uint64_t v18 = (uint64_t)(v14 + 4);
          }
          else {
            uint64_t v18 = v14[4];
          }
          if (v17 >= 0) {
            uint64_t v19 = *((unsigned __int8 *)v14 + 55);
          }
          else {
            uint64_t v19 = v14[5];
          }
          uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' was applied 1 time.", 21);
        }
        else
        {
          google::LogMessage::LogMessage((google::LogMessage *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4553);
          uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)v31);
          uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"- rule '", 8);
          int v23 = *((char *)v14 + 55);
          if (v23 >= 0) {
            uint64_t v24 = (uint64_t)(v14 + 4);
          }
          else {
            uint64_t v24 = v14[4];
          }
          if (v23 >= 0) {
            uint64_t v25 = *((unsigned __int8 *)v14 + 55);
          }
          else {
            uint64_t v25 = v14[5];
          }
          int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"' was applied ", 14);
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" times.", 7);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v31);
        uint64_t v28 = (char *)v14[1];
        if (v28)
        {
          do
          {
            double v29 = (char **)v28;
            uint64_t v28 = *(char **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            double v29 = (char **)v14[2];
            BOOL v30 = *v29 == (char *)v14;
            uint64_t v14 = (uint64_t *)v29;
          }
          while (!v30);
        }
        uint64_t v14 = (uint64_t *)v29;
      }
      while (v29 != v33);
    }
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v32, v33[0]);
}

void sub_23CC63230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CC63244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CC63258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_23CC63278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, char *a13)
{
}

BOOL operations_research::sat::PresolveCpModel(unsigned __int8 *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  operations_research::sat::CpModelPresolver::CpModelPresolver((uint64_t)v6, a1, a2, a3, a4);
  BOOL v4 = operations_research::sat::CpModelPresolver::Presolve(v6);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v4;
}

void sub_23CC632F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::CpModelPresolver::Presolve(char **this)
{
  uint64_t v195 = *MEMORY[0x263EF8340];
  uint64_t v2 = *this;
  char v3 = **this;
  BOOL v4 = this[2];
  v4[65] = v3;
  if (v2[402])
  {
    uint64_t v5 = *((void *)v4 + 6);
    if (*(int *)(v5 + 48) >= 1)
    {
      uint64_t v6 = 0;
      while (2)
      {
        unint64_t v7 = *(operations_research::sat::ConstraintProto **)(*(void *)(v5 + 56) + 8 * v6 + 8);
        operations_research::sat::CpModelPresolver::PresolveEnforcementLiteral((operations_research::sat::CpModelPresolver *)this, v7);
        switch(*((_DWORD *)v7 + 15))
        {
          case 3:
            operations_research::sat::CpModelPresolver::PresolveBoolOr((operations_research::sat::CpModelPresolver *)this, v7);
            BOOL v4 = this[2];
            if (!v4[504]) {
              goto LABEL_11;
            }
            break;
          case 4:
            operations_research::sat::CpModelPresolver::PresolveBoolAnd((operations_research::sat::CpModelPresolver *)this, (uint64_t **)v7);
            goto LABEL_10;
          case 0xC:
            operations_research::sat::CpModelPresolver::CanonicalizeLinear((operations_research::sat::CpModelPresolver *)this, v7);
            BOOL v4 = this[2];
            if (v4[504]) {
              break;
            }
            goto LABEL_11;
          case 0x1A:
            operations_research::sat::CpModelPresolver::PresolveAtMostOne((operations_research::sat::CpModelPresolver *)this, v7);
            BOOL v4 = this[2];
            if (v4[504]) {
              break;
            }
            goto LABEL_11;
          default:
LABEL_10:
            BOOL v4 = this[2];
            if (v4[504]) {
              break;
            }
LABEL_11:
            ++v6;
            uint64_t v5 = *((void *)v4 + 6);
            if (v6 >= *(int *)(v5 + 48)) {
              break;
            }
            continue;
        }
        break;
      }
    }
    operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v4);
    operations_research::sat::PresolveContext::RegisterVariablesUsedInAssumptions((unint64_t)this[2]);
    uint64_t v9 = (uint64_t)this[2];
    if (*((int *)*this + 131) >= 1)
    {
      int v10 = 0;
      while (1)
      {
        HIBYTE(v193[2]) = 19;
        strcpy((char *)v193, "presolve: iteration");
        operations_research::sat::PresolveContext::UpdateRuleStats(v9, (uint64_t)v193);
        if (SHIBYTE(v193[2]) < 0)
        {
          operator delete((void *)v193[0]);
          uint64_t v18 = this[2];
          uint64_t v12 = *((void *)v18 + 15);
          uint64_t v13 = *((void *)v18 + 6);
          uint64_t v14 = *(unsigned int *)(v13 + 48);
          if ((int)v14 < 1)
          {
LABEL_21:
            int v17 = 0;
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v11 = this[2];
          uint64_t v12 = *((void *)v11 + 15);
          uint64_t v13 = *((void *)v11 + 6);
          uint64_t v14 = *(unsigned int *)(v13 + 48);
          if ((int)v14 < 1) {
            goto LABEL_21;
          }
        }
        uint64_t v15 = *(void *)(v13 + 56);
        if (v14 == 1) {
          break;
        }
        int v19 = 0;
        int v20 = 0;
        uint64_t v16 = v14 & 0xFFFFFFFE;
        uint64_t v21 = v15 + 16;
        uint64_t v22 = v16;
        do
        {
          if (*(_DWORD *)(*(void *)(v21 - 8) + 60)) {
            ++v19;
          }
          if (*(_DWORD *)(*(void *)v21 + 60)) {
            ++v20;
          }
          v21 += 16;
          v22 -= 2;
        }
        while (v22);
        int v17 = v20 + v19;
        if (v16 != v14) {
          goto LABEL_29;
        }
LABEL_33:
        operations_research::sat::CpModelPresolver::PresolveToFixPoint((operations_research::sat::CpModelPresolver *)this);
        int v26 = *this;
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = (const operations_research::sat::SatParameters *)(*this + 8);
        v185[0] = **this;
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v186, v27);
        v186[72] = *((void *)v26 + 73);
        operations_research::sat::ExpandCpModel(v185, (operations_research::sat::PresolveContext *)this[2], v28);
        operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v186);
        if (*((int *)*this + 109) <= 0) {
          goto LABEL_49;
        }
        uint64_t v31 = *((void *)*this + 73);
        if (!v31) {
          goto LABEL_48;
        }
        unsigned __int8 v32 = *(unsigned __int8 **)(v31 + 120);
        if (!v32 || (unsigned __int8 v33 = atomic_load(v32), (v33 & 1) == 0))
        {
          v30.n128_f64[0] = fmax(*(double *)(v31 + 104) - *(double *)(v31 + 112), 0.0);
          if (v30.n128_f64[0] > 0.0)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
            if (*(void *)(v31 + 24) <= CurrentTimeNanos - *(void *)(v31 + 8)) {
              uint64_t v35 = CurrentTimeNanos - *(void *)(v31 + 8);
            }
            else {
              uint64_t v35 = *(void *)(v31 + 24);
            }
            operations_research::RunningMax<long long>::Add((int *)(v31 + 32), v35);
            *(void *)(v31 + 8) = CurrentTimeNanos;
            if (*(void *)(*(void *)(v31 + 40) + 8 * *(int *)(v31 + 68)) + CurrentTimeNanos >= *(void *)(v31 + 16))
            {
              if (!FLAGS_time_limit_use_usertime) {
                goto LABEL_45;
              }
              double v36 = *(double *)(v31 + 96);
              if (*(unsigned char *)(v31 + 72))
              {
                std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v29 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
                v30.n128_f64[0] = v36 + (double)(v29 - *(void *)(v31 + 80) + *(void *)(v31 + 88)) * -0.000000001;
                if (v30.n128_f64[0] <= 0.0001) {
                  goto LABEL_45;
                }
              }
              else
              {
                v30.n128_f64[0] = v36 + (double)*(uint64_t *)(v31 + 88) * -0.000000001;
                if (v30.n128_f64[0] <= 0.0001)
                {
LABEL_45:
                  *(void *)(v31 + 16) = 0;
                  goto LABEL_49;
                }
              }
              *(void *)(v31 + 16) = *(void *)(v31 + 8) + (uint64_t)(v30.n128_f64[0] * 1000000000.0);
            }
LABEL_48:
            operations_research::sat::CpModelPresolver::Probe((operations_research::sat::CpModelPresolver *)this);
            operations_research::sat::CpModelPresolver::PresolveToFixPoint((operations_research::sat::CpModelPresolver *)this);
          }
        }
LABEL_49:
        if (!(*this)[403]) {
          goto LABEL_65;
        }
        uint64_t v37 = *((void *)*this + 73);
        if (v37)
        {
          double v38 = *(unsigned __int8 **)(v37 + 120);
          if (v38)
          {
            unsigned __int8 v39 = atomic_load(v38);
            if (v39) {
              goto LABEL_65;
            }
          }
          v30.n128_f64[0] = fmax(*(double *)(v37 + 104) - *(double *)(v37 + 112), 0.0);
          if (v30.n128_f64[0] <= 0.0) {
            goto LABEL_65;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
          uint64_t v41 = *(void *)(v37 + 24) <= v40 - *(void *)(v37 + 8) ? v40 - *(void *)(v37 + 8) : *(void *)(v37 + 24);
          operations_research::RunningMax<long long>::Add((int *)(v37 + 32), v41);
          *(void *)(v37 + 8) = v40;
          if (*(void *)(*(void *)(v37 + 40) + 8 * *(int *)(v37 + 68)) + v40 >= *(void *)(v37 + 16))
          {
            if (!FLAGS_time_limit_use_usertime) {
              goto LABEL_61;
            }
            double v42 = *(double *)(v37 + 96);
            if (*(unsigned char *)(v37 + 72))
            {
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v29 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
              v30.n128_f64[0] = v42 + (double)(v29 - *(void *)(v37 + 80) + *(void *)(v37 + 88)) * -0.000000001;
              if (v30.n128_f64[0] <= 0.0001) {
                goto LABEL_61;
              }
            }
            else
            {
              v30.n128_f64[0] = v42 + (double)*(uint64_t *)(v37 + 88) * -0.000000001;
              if (v30.n128_f64[0] <= 0.0001)
              {
LABEL_61:
                *(void *)(v37 + 16) = 0;
                goto LABEL_65;
              }
            }
            *(void *)(v37 + 16) = *(void *)(v37 + 8) + (uint64_t)(v30.n128_f64[0] * 1000000000.0);
          }
        }
        operations_research::sat::CpModelPresolver::PresolvePureSatPart((operations_research::sat::CpModelPresolver *)this);
LABEL_65:
        if (!v10)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v29 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this[2];
          if (!*(unsigned char *)(v29 + 504))
          {
            uint64_t v43 = *(unsigned int *)(*(void *)(v29 + 48) + 48);
            if ((int)v43 >= 1)
            {
              uint64_t v44 = 0;
              uint64_t v45 = 8 * v43;
              do
              {
                unint64_t v46 = *(operations_research::sat::ConstraintProto **)(*(void *)(*((void *)this[2] + 6) + 56)
                                                                    + v44
                                                                    + 8);
                if (*((_DWORD *)v46 + 15) == 12) {
                  operations_research::sat::CpModelPresolver::ExtractAtMostOneFromLinear((operations_research::sat::CpModelPresolver *)this, v46, v30);
                }
                v44 += 8;
              }
              while (v45 != v44);
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v29 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this[2];
            }
            operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v29);
          }
        }
        if (!v10) {
          operations_research::sat::CpModelPresolver::TransformIntoMaxCliques((operations_research::sat::CpModelPresolver *)this);
        }
        uint64_t v47 = *((void *)*this + 73);
        if (v47)
        {
          long long v48 = *(unsigned __int8 **)(v47 + 120);
          if (v48)
          {
            unsigned __int8 v49 = atomic_load(v48);
            if (v49) {
              goto LABEL_91;
            }
          }
          if (fmax(*(double *)(v47 + 104) - *(double *)(v47 + 112), 0.0) <= 0.0) {
            goto LABEL_91;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v50 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
          uint64_t v51 = *(void *)(v47 + 24) <= v50 - *(void *)(v47 + 8) ? v50 - *(void *)(v47 + 8) : *(void *)(v47 + 24);
          operations_research::RunningMax<long long>::Add((int *)(v47 + 32), v51);
          *(void *)(v47 + 8) = v50;
          if (*(void *)(*(void *)(v47 + 40) + 8 * *(int *)(v47 + 68)) + v50 >= *(void *)(v47 + 16))
          {
            if (!FLAGS_time_limit_use_usertime) {
              goto LABEL_87;
            }
            double v53 = *(double *)(v47 + 96);
            if (*(unsigned char *)(v47 + 72))
            {
              double v54 = v53
                  + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v52)
                           - *(void *)(v47 + 80)
                           + *(void *)(v47 + 88))
                  * -0.000000001;
              if (v54 <= 0.0001) {
                goto LABEL_87;
              }
            }
            else
            {
              double v54 = v53 + (double)*(uint64_t *)(v47 + 88) * -0.000000001;
              if (v54 <= 0.0001)
              {
LABEL_87:
                *(void *)(v47 + 16) = 0;
                goto LABEL_91;
              }
            }
            *(void *)(v47 + 16) = *(void *)(v47 + 8) + (uint64_t)(v54 * 1000000000.0);
          }
        }
        operations_research::sat::CpModelPresolver::ProcessSetPPC((int64_t)this);
        operations_research::sat::CpModelPresolver::ExtractBoolAnd((operations_research::sat::CpModelPresolver *)this);
        operations_research::sat::CpModelPresolver::PresolveToFixPoint((operations_research::sat::CpModelPresolver *)this);
LABEL_91:
        uint64_t v9 = (uint64_t)this[2];
        if ((double)(*(_DWORD *)(*(void *)(v9 + 48) + 24) + v17) * 0.8 <= (double)(*(void *)(v9 + 120) - v12)
          && ++v10 < *((_DWORD *)*this + 131))
        {
          continue;
        }
        goto LABEL_93;
      }
      uint64_t v16 = 0;
      int v17 = 0;
LABEL_29:
      int v23 = (uint64_t *)(v15 + 8 * v16 + 8);
      uint64_t v24 = v14 - v16;
      do
      {
        uint64_t v25 = *v23++;
        if (*(_DWORD *)(v25 + 60)) {
          ++v17;
        }
        --v24;
      }
      while (v24);
      goto LABEL_33;
    }
LABEL_93:
    if (*(unsigned char *)(v9 + 504))
    {
      uint64_t v55 = *(void *)(v9 + 48);
      if ((_UNKNOWN *)v55 == &operations_research::sat::_CpModelProto_default_instance_) {
        goto LABEL_102;
      }
    }
    else
    {
      operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints((operations_research::sat::CpModelPresolver *)this);
      uint64_t v9 = (uint64_t)this[2];
      uint64_t v55 = *(void *)(v9 + 48);
      if ((_UNKNOWN *)v55 == &operations_research::sat::_CpModelProto_default_instance_) {
        goto LABEL_102;
      }
    }
    if (*(void *)(v55 + 120) && !*(unsigned char *)(v9 + 504))
    {
      operations_research::sat::CpModelPresolver::ExpandObjective((operations_research::sat::CpModelPresolver *)this, v8);
      uint64_t v9 = (uint64_t)this[2];
      if (*(unsigned char *)(v9 + 504))
      {
LABEL_104:
        operations_research::sat::FindDuplicateConstraints(*(operations_research::sat **)(v9 + 48), (char **)&v183);
        uint64_t v62 = (int *)v183;
        uint64_t v63 = v184;
        if (v183 != v184)
        {
          do
          {
            uint64_t v64 = *v62;
            unint64_t v65 = *(operations_research::sat::ConstraintProto **)(*(void *)(*((void *)this[2] + 6) + 56)
                                                                + 8 * v64
                                                                + 8);
            if (*((_DWORD *)v65 + 15) != 19)
            {
              operations_research::sat::ConstraintProto::Clear(v65);
              operations_research::sat::PresolveContext::UpdateConstraintVariableUsage((char **)this[2], v64);
              uint64_t v66 = (uint64_t)this[2];
              v193[0] = (unint64_t)operator new(0x20uLL);
              *(_OWORD *)&v193[1] = xmmword_23CE7FBE0;
              strcpy((char *)v193[0], "removed duplicate constraints");
              operations_research::sat::PresolveContext::UpdateRuleStats(v66, (uint64_t)v193);
              if (SHIBYTE(v193[2]) < 0) {
                operator delete((void *)v193[0]);
              }
            }
            ++v62;
          }
          while (v62 != v63);
        }
        unint64_t v67 = this[2];
        if (v67[504])
        {
          if (**this)
          {
            operations_research::sat::LogInfoFromContext((operations_research::sat *)v67, v61);
            unint64_t v67 = this[2];
          }
          operations_research::sat::CpModelProto::Clear(*((operations_research::sat::CpModelProto **)v67 + 6));
          uint64_t v68 = *((void *)this[2] + 6);
          int v69 = *(int **)(v68 + 56);
          if (v69)
          {
            uint64_t v70 = *(int *)(v68 + 48);
            int v71 = *v69;
            if ((int)v70 < *v69)
            {
              *(_DWORD *)(v68 + 48) = v70 + 1;
              unint64_t v72 = *(void *)&v69[2 * v70 + 2];
              if (*(_DWORD *)(v72 + 60) == 3) {
                goto LABEL_223;
              }
              goto LABEL_220;
            }
            if (v71 != *(_DWORD *)(v68 + 52))
            {
LABEL_219:
              *int v69 = v71 + 1;
              unint64_t v72 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v68 + 40));
              uint64_t v156 = *(void *)(v68 + 56);
              uint64_t v157 = *(int *)(v68 + 48);
              *(_DWORD *)(v68 + 48) = v157 + 1;
              *(void *)(v156 + 8 * v157 + 8) = v72;
              if (*(_DWORD *)(v72 + 60) == 3)
              {
LABEL_223:
                BOOL v60 = 1;
LABEL_258:
                if (v183)
                {
                  uint64_t v184 = (int *)v183;
                  operator delete(v183);
                }
                return v60;
              }
LABEL_220:
              operations_research::sat::ConstraintProto::clear_constraint(v72);
              *(_DWORD *)(v72 + 60) = 3;
              uint64_t v158 = *(void *)(v72 + 8);
              uint64_t v159 = (google::protobuf::Arena *)(v158 & 0xFFFFFFFFFFFFFFFELL);
              if (v158) {
                uint64_t v159 = *(google::protobuf::Arena **)v159;
              }
              *(void *)(v72 + 48) = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v159);
              goto LABEL_223;
            }
          }
          else
          {
            int v71 = *(_DWORD *)(v68 + 52);
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v68 + 40), v71 + 1);
          int v69 = *(int **)(v68 + 56);
          int v71 = *v69;
          goto LABEL_219;
        }
        unint64_t v179 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        long long v180 = 0u;
        long long v181 = 0u;
        uint64_t v182 = 0;
        uint64_t v73 = *((void *)v67 + 6);
        uint64_t v74 = *(void *)(v73 + 80);
        uint64_t v75 = (const operations_research::sat::DecisionStrategyProto **)(v74 + 8);
        if (!v74) {
          uint64_t v75 = 0;
        }
        uint64_t v76 = *(int *)(v73 + 72);
        if (v76)
        {
          unint64_t v171 = &v75[v76];
          int v77 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
          do
          {
            uint64_t v173 = v75;
            int v78 = *v75;
            operations_research::sat::DecisionStrategyProto::DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)v193, *v75);
            *((_DWORD *)v78 + 4) = 0;
            int v174 = (unsigned int *)((char *)v78 + 16);
            if (LODWORD(v193[2]))
            {
              uint64_t v79 = v194;
              unint64_t v80 = &v194[SLODWORD(v193[2])];
              unint64_t v172 = (unsigned int *)((char *)v78 + 40);
              do
              {
                int v81 = *v79;
                if (~*v79 <= *v79) {
                  unint64_t v82 = v81;
                }
                else {
                  unint64_t v82 = ~v81;
                }
                if (!operations_research::sat::PresolveContext::IsFixed((operations_research::sat::PresolveContext *)this[2], (const char *)v82))
                {
                  uint64_t v83 = 0;
                  unint64_t v84 = ((((unint64_t)v77 + (int)v82) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)v77 + (int)v82));
                  unint64_t v85 = (v84 >> 7) ^ ((unint64_t)v179 >> 12);
                  uint64_t v86 = 0x101010101010101 * (v84 & 0x7F);
                  for (unint64_t i = v85; ; unint64_t i = v83 + v88)
                  {
                    unint64_t v88 = i & v181;
                    uint64_t v89 = *(void *)((char *)v179 + v88);
                    unint64_t v90 = ((v89 ^ v86) - 0x101010101010101) & ~(v89 ^ v86) & 0x8080808080808080;
                    if (v90) {
                      break;
                    }
LABEL_134:
                    if ((v89 & (~v89 << 6) & 0x8080808080808080) != 0) {
                      goto LABEL_137;
                    }
                    v83 += 8;
                  }
                  while (1)
                  {
                    unint64_t v91 = (v88 + (__clz(__rbit64(v90)) >> 3)) & v181;
                    if (*(_DWORD *)(v180 + 4 * v91) == v82) {
                      break;
                    }
                    v90 &= v90 - 1;
                    if (!v90) {
                      goto LABEL_134;
                    }
                  }
                  if (v91 == (void)v181)
                  {
LABEL_137:
                    for (j = 0; ; unint64_t v85 = j + v93)
                    {
                      unint64_t v93 = v85 & v181;
                      uint64_t v94 = *(void *)((char *)v179 + v93);
                      unint64_t v95 = ((v94 ^ v86) - 0x101010101010101) & ~(v94 ^ v86) & 0x8080808080808080;
                      if (v95) {
                        break;
                      }
LABEL_141:
                      if ((v94 & (~v94 << 6) & 0x8080808080808080) != 0)
                      {
                        unint64_t v96 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v179, v84);
                        *(_DWORD *)(v180 + 4 * v96) = v82;
                        goto LABEL_144;
                      }
                      j += 8;
                    }
                    while (*(_DWORD *)(v180 + 4 * ((v93 + (__clz(__rbit64(v95)) >> 3)) & v181)) != v82)
                    {
                      v95 &= v95 - 1;
                      if (!v95) {
                        goto LABEL_141;
                      }
                    }
LABEL_144:
                    unsigned int v97 = (operations_research::sat::PresolveContext *)this[2];
                    if (*(void *)(*((void *)v97 + 85) + 48 * (int)v82 + 16))
                    {
                      uint64_t v98 = *((unsigned int *)v78 + 4);
                      if (v98 == *((_DWORD *)v78 + 5)) {
                        google::protobuf::RepeatedField<int>::Reserve(v174, v98 + 1);
                      }
                      *(_DWORD *)(*((void *)v78 + 3) + 4 * v98) = v81;
                      *((_DWORD *)v78 + 4) = v98 + 1;
                      goto LABEL_125;
                    }
                    operations_research::sat::PresolveContext::GetAffineRelation(v97, v82, (uint64_t)&v190);
                    int v99 = (int)v190;
                    if (*(void *)(*((void *)this[2] + 85) + 48 * (int)v190 + 16))
                    {
                      char v100 = v77;
                      BOOL v101 = v191 > 0;
                      BOOL v102 = v81 >= 0;
                      uint64_t v103 = *((unsigned int *)v78 + 4);
                      if (v103 == *((_DWORD *)v78 + 5)) {
                        google::protobuf::RepeatedField<int>::Reserve(v174, v103 + 1);
                      }
                      int v104 = v99 ^ ((v102 ^ v101) << 31 >> 31);
                      *(_DWORD *)(*((void *)v78 + 3) + 4 * v103) = v104;
                      *((_DWORD *)v78 + 4) = v103 + 1;
                      int v77 = v100;
                      if (*((_DWORD *)v78 + 16))
                      {
                        unint64_t v105 = (int *)*((void *)v78 + 7);
                        if (v105)
                        {
                          uint64_t v106 = *((int *)v78 + 12);
                          int v107 = *v105;
                          if ((int)v106 < *v105)
                          {
                            *((_DWORD *)v78 + 12) = v106 + 1;
                            int v108 = *(void **)&v105[2 * v106 + 2];
LABEL_158:
                            *((_DWORD *)v108 + 8) = v104;
                            uint64_t v111 = v191;
                            if (v191 < 0) {
                              uint64_t v111 = -v191;
                            }
                            v108[2] = v192[0];
                            v108[3] = v111;
                            goto LABEL_125;
                          }
                          if (v107 == *((_DWORD *)v78 + 13))
                          {
LABEL_156:
                            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v172, v107 + 1);
                            unint64_t v105 = (int *)*((void *)v78 + 7);
                            int v107 = *v105;
                          }
                          int *v105 = v107 + 1;
                          int v108 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(*(google::protobuf::Arena **)v172);
                          uint64_t v109 = *((void *)v78 + 7);
                          uint64_t v110 = *((int *)v78 + 12);
                          *((_DWORD *)v78 + 12) = v110 + 1;
                          *(void *)(v109 + 8 * v110 + 8) = v108;
                          goto LABEL_158;
                        }
                        int v107 = *((_DWORD *)v78 + 13);
                        goto LABEL_156;
                      }
                    }
                  }
                }
LABEL_125:
                ++v79;
              }
              while (v79 != v80);
            }
            operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)v193);
            uint64_t v75 = v173 + 1;
          }
          while (v173 + 1 != v171);
          unint64_t v67 = this[2];
          uint64_t v73 = *((void *)v67 + 6);
        }
        if (*(int *)(v73 + 24) >= 1)
        {
          uint64_t v112 = 0;
          do
          {
            operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v67, v112, v193);
            uint64_t v113 = *(void *)(*(void *)(*((void *)this[2] + 6) + 32) + 8 * (void)v112 + 8);
            *(_DWORD *)(v113 + 16) = 0;
            unint64_t v114 = (unsigned int *)(v113 + 16);
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v113 + 16), v193[0] >> 1);
            uint64_t v115 = v193[0] & 1;
            if (v193[0]) {
              uint64_t v116 = (unint64_t *)v193[1];
            }
            else {
              uint64_t v116 = &v193[1];
            }
            if (v193[0] >= 2)
            {
              uint64_t v117 = &v116[2 * (v193[0] >> 1)];
              unsigned int v118 = *(_DWORD *)(v113 + 16);
              do
              {
                unint64_t v119 = *v116;
                int v120 = *(_DWORD *)(v113 + 20);
                unsigned int v121 = v118 + 1;
                if (v118 == v120)
                {
                  google::protobuf::RepeatedField<long long>::Reserve(v114, v118 + 1);
                  int v120 = *(_DWORD *)(v113 + 20);
                }
                uint64_t v122 = *(void *)(v113 + 24);
                *(void *)(v122 + 8 * v118) = v119;
                *(_DWORD *)(v113 + 16) = v121;
                unint64_t v123 = v116[1];
                v118 += 2;
                if (v121 == v120)
                {
                  google::protobuf::RepeatedField<long long>::Reserve(v114, v118);
                  uint64_t v122 = *(void *)(v113 + 24);
                }
                *(void *)(v122 + 8 * v121) = v123;
                *unint64_t v114 = v118;
                v116 += 2;
              }
              while (v116 != v117);
              uint64_t v115 = v193[0] & 1;
            }
            if (v115) {
              operator delete((void *)v193[1]);
            }
            ++v112;
            unint64_t v67 = this[2];
            uint64_t v73 = *((void *)v67 + 6);
          }
          while ((uint64_t)v112 < *(int *)(v73 + 24));
        }
        google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(*((void *)v67 + 7) + 16, v73 + 16);
        *((void *)this[1] + 1) = *(void *)this[1];
        int v125 = this[2];
        uint64_t v126 = *(int *)(*((void *)v125 + 6) + 24);
        unint64_t v177 = 0;
        uint64_t v178 = 0;
        unint64_t v176 = 0;
        if (v126)
        {
          if ((v126 & 0x80000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v176 = operator new(4 * v126);
          uint64_t v178 = (char *)v176 + 4 * v126;
          memset(v176, 255, 4 * v126);
          unint64_t v177 = v178;
          if (*(int *)(*((void *)v125 + 6) + 24) >= 1)
          {
            uint64_t v127 = 0;
            while (1)
            {
              if (operations_research::sat::PresolveContext::VariableIsNotUsedAnymore((operations_research::sat::PresolveContext *)v125, v127))
              {
                int v125 = this[2];
                if (!v125[64]) {
                  goto LABEL_185;
                }
              }
              unsigned int v129 = this[1];
              uint64_t v130 = *(char **)v129;
              int v131 = (char *)*((void *)v129 + 1);
              uint64_t v132 = (uint64_t)&v131[-*(void *)v129];
              uint64_t v133 = v132 >> 2;
              *((_DWORD *)v176 + v127) = v132 >> 2;
              unint64_t v134 = *((void *)v129 + 2);
              if ((unint64_t)v131 >= v134) {
                break;
              }
              *(_DWORD *)int v131 = v127;
              uint64_t v128 = (uint64_t)(v131 + 4);
LABEL_184:
              *((void *)v129 + 1) = v128;
              int v125 = this[2];
LABEL_185:
              if (++v127 >= *(int *)(*((void *)v125 + 6) + 24)) {
                goto LABEL_208;
              }
            }
            unint64_t v135 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v136 = v134 - (void)v130;
            if (v136 >> 1 > v135) {
              unint64_t v135 = v136 >> 1;
            }
            if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v137 = v135;
            }
            if (v137)
            {
              if (v137 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v138 = operator new(4 * v137);
              unint64_t v139 = &v138[4 * v133];
              *unint64_t v139 = v127;
              uint64_t v128 = (uint64_t)(v139 + 1);
              if (v131 == v130) {
                goto LABEL_206;
              }
            }
            else
            {
              unint64_t v138 = 0;
              unint64_t v139 = (_DWORD *)(4 * v133);
              *(_DWORD *)(4 * v133) = v127;
              uint64_t v128 = 4 * v133 + 4;
              if (v131 == v130)
              {
LABEL_206:
                *(void *)unsigned int v129 = v139;
                *((void *)v129 + 1) = v128;
                *((void *)v129 + 2) = &v138[4 * v137];
                if (v130) {
                  operator delete(v130);
                }
                goto LABEL_184;
              }
            }
            unint64_t v140 = v131 - 4 - v130;
            if (v140 < 0x2C) {
              goto LABEL_266;
            }
            if (v131 - v138 - (v132 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
              goto LABEL_266;
            }
            uint64_t v141 = (v140 >> 2) + 1;
            uint64_t v142 = 4 * (v141 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v143 = &v131[-v142];
            unint64_t v139 = (_DWORD *)((char *)v139 - v142);
            uint64_t v144 = &v138[4 * v133 - 16];
            long long v145 = v131 - 16;
            uint64_t v146 = v141 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v147 = *(_OWORD *)v145;
              *(v144 - 1) = *((_OWORD *)v145 - 1);
              *uint64_t v144 = v147;
              v144 -= 2;
              v145 -= 32;
              v146 -= 8;
            }
            while (v146);
            int v131 = v143;
            if (v141 != (v141 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_266:
              do
              {
                int v148 = *((_DWORD *)v131 - 1);
                v131 -= 4;
                *--unint64_t v139 = v148;
              }
              while (v131 != v130);
            }
            goto LABEL_206;
          }
        }
LABEL_208:
        operations_research::sat::ApplyVariableMapping((uint64_t *)&v176, (operations_research::sat::PresolveContext *)v125, v124);
        operations_research::sat::CpModelPresolver::RemoveEmptyConstraints((operations_research::sat::CpModelPresolver *)this);
        uint64_t v151 = (uint64_t)this[2];
        double v152 = (absl::lts_2020_02_25::numbers_internal *)*(unsigned int *)(v151 + 472);
        if ((int)v152 >= 1)
        {
          v193[0] = (unint64_t)"deductions: ";
          v193[1] = 12;
          unint64_t v153 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v152, v192, v150);
          BOOL v190 = v192;
          uint64_t v191 = v153 - (unsigned char *)v192;
          v189[0] = " stored";
          v189[1] = 7;
          absl::lts_2020_02_25::StrCat((uint64_t)v193, (uint64_t)&v190, (uint64_t)v189, &__p);
          operations_research::sat::PresolveContext::UpdateRuleStats(v151, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v151 = (uint64_t)this[2];
        }
        if (**this)
        {
          operations_research::sat::LogInfoFromContext((operations_research::sat *)v151, v149);
          uint64_t v151 = (uint64_t)this[2];
        }
        operations_research::sat::ValidateCpModel(*(operations_research::sat **)(v151 + 48), (int64_t)v150, (unint64_t)v193);
        char v155 = HIBYTE(v193[2]);
        if (SHIBYTE(v193[2]) < 0)
        {
          if (!v193[1])
          {
            operator delete((void *)v193[0]);
LABEL_239:
            operations_research::sat::ValidateCpModel(*((operations_research::sat **)this[2] + 7), v154, (unint64_t)v193);
            unint64_t v164 = HIBYTE(v193[2]);
            char v165 = HIBYTE(v193[2]);
            if ((v193[2] & 0x8000000000000000) != 0) {
              unint64_t v164 = v193[1];
            }
            BOOL v60 = v164 == 0;
            if (v164 && **this)
            {
              google::LogMessage::LogMessage((google::LogMessage *)&v190, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4890);
              unint64_t v166 = (void *)google::LogMessage::stream((google::LogMessage *)&v190);
              uint64_t v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"Error while validating mapping_model model: ", 44);
              if ((v193[2] & 0x8000000000000000) == 0) {
                unint64_t v168 = v193;
              }
              else {
                unint64_t v168 = (unint64_t *)v193[0];
              }
              if ((v193[2] & 0x8000000000000000) == 0) {
                uint64_t v169 = HIBYTE(v193[2]);
              }
              else {
                uint64_t v169 = v193[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)v168, v169);
              google::LogMessage::~LogMessage((google::LogMessage *)&v190);
              char v165 = HIBYTE(v193[2]);
            }
            if (v165 < 0) {
              operator delete((void *)v193[0]);
            }
LABEL_252:
            if (v176)
            {
              unint64_t v177 = v176;
              operator delete(v176);
            }
            if ((void)v181)
            {
              operator delete(v179);
              unint64_t v179 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              uint64_t v182 = 0;
              *(void *)&long long v181 = 0;
              long long v180 = 0uLL;
            }
            if (*((void *)&v181 + 1)) {
              absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v181 + 1));
            }
            goto LABEL_258;
          }
        }
        else if (!HIBYTE(v193[2]))
        {
          goto LABEL_239;
        }
        if (**this)
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v190, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4881);
          uint64_t v160 = (void *)google::LogMessage::stream((google::LogMessage *)&v190);
          double v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"Error while validating postsolved model: ", 41);
          if ((v193[2] & 0x8000000000000000) == 0) {
            uint64_t v162 = v193;
          }
          else {
            uint64_t v162 = (unint64_t *)v193[0];
          }
          if ((v193[2] & 0x8000000000000000) == 0) {
            uint64_t v163 = HIBYTE(v193[2]);
          }
          else {
            uint64_t v163 = v193[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)v162, v163);
          google::LogMessage::~LogMessage((google::LogMessage *)&v190);
          char v155 = HIBYTE(v193[2]);
        }
        if (v155 < 0) {
          operator delete((void *)v193[0]);
        }
        BOOL v60 = 0;
        goto LABEL_252;
      }
LABEL_103:
      operations_research::sat::CpModelPresolver::EncodeAllAffineRelations((operations_research::sat::CpModelPresolver *)this);
      uint64_t v9 = (uint64_t)this[2];
      goto LABEL_104;
    }
LABEL_102:
    if (*(unsigned char *)(v9 + 504)) {
      goto LABEL_104;
    }
    goto LABEL_103;
  }
  operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v4);
  uint64_t v56 = *this;
  uint64_t v57 = (const operations_research::sat::SatParameters *)(*this + 8);
  v187[0] = **this;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v188, v57);
  v188[72] = *((void *)v56 + 73);
  operations_research::sat::ExpandCpModel(v187, (operations_research::sat::PresolveContext *)this[2], v58);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v188);
  if (**this) {
    operations_research::sat::LogInfoFromContext((operations_research::sat *)this[2], v59);
  }
  return 1;
}

void sub_23CC64588(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::CpModelPresolver(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (a2[137] | a2[138]) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a2[402] == 0;
  }
  char v7 = v6;
  *(unsigned char *)(a3 + 64) = v7;
  uint64_t v8 = *(void *)(a3 + 48);
  uint64_t v9 = *(void *)(v8 + 80);
  if (v9) {
    int v10 = (const operations_research::sat::DecisionStrategyProto **)(v9 + 8);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = *(int *)(v8 + 72);
  if (v11)
  {
    uint64_t v12 = 8 * v11;
    while (1)
    {
      uint64_t v13 = *v10;
      uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 56);
      uint64_t v15 = *(int **)(v14 + 80);
      if (!v15) {
        break;
      }
      uint64_t v16 = *(int *)(v14 + 72);
      int v17 = *v15;
      if ((int)v16 >= *v15)
      {
        if (v17 == *(_DWORD *)(v14 + 76))
        {
LABEL_17:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v14 + 64), v17 + 1);
          uint64_t v15 = *(int **)(v14 + 80);
          int v17 = *v15;
        }
        int *v15 = v17 + 1;
        unint64_t v18 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(*(google::protobuf::Arena **)(v14 + 64));
        uint64_t v19 = *(void *)(v14 + 80);
        uint64_t v20 = *(int *)(v14 + 72);
        *(_DWORD *)(v14 + 72) = v20 + 1;
        *(void *)(v19 + 8 * v20 + 8) = v18;
        goto LABEL_19;
      }
      *(_DWORD *)(v14 + 72) = v16 + 1;
      unint64_t v18 = *(void *)&v15[2 * v16 + 2];
LABEL_19:
      operations_research::sat::DecisionStrategyProto::CopyFrom(v18, v13);
      ++v10;
      v12 -= 8;
      if (!v12)
      {
        a3 = *(void *)(a1 + 16);
        goto LABEL_21;
      }
    }
    int v17 = *(_DWORD *)(v14 + 76);
    goto LABEL_17;
  }
LABEL_21:
  operations_research::sat::PresolveContext::InitializeNewDomains((operations_research::sat::PresolveContext *)a3, a5);
  operations_research::sat::PresolveContext::ReadObjectiveFromProto(*(operations_research::sat::PresolveContext **)(a1 + 16), v21);
  if (!operations_research::sat::PresolveContext::CanonicalizeObjective(*(operations_research::sat::PresolveContext **)(a1 + 16), v22))
  {
    uint64_t v23 = *(void *)(a1 + 16);
    char v26 = 0;
    LOBYTE(__p) = 0;
    operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v23, (uint64_t)&__p);
    if (v26 < 0) {
      operator delete(__p);
    }
  }
  return a1;
}

void sub_23CC648D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    unint64_t v18 = *v16;
    if (!*v16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v18 = *v16;
    if (!*v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v15 + 32) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::PresolveContext::RegisterVariablesUsedInAssumptions(unint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  uint64_t v2 = *(int *)(v1 + 88);
  if (v2)
  {
    unint64_t v3 = this;
    BOOL v4 = *(int **)(v1 + 96);
    uint64_t v5 = &v4[v2];
    unint64_t v6 = ((((unint64_t)&off_264E82C18 + 5) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 5));
    do
    {
      uint64_t v10 = 0;
      int v12 = *v4;
      if (~*v4 > *v4) {
        int v12 = ~v12;
      }
      uint64_t v13 = (void *)(*(void *)(v3 + 680) + 48 * v12);
      unint64_t v11 = (v6 >> 7) ^ (*v13 >> 12);
      uint64_t v14 = v13[3];
      while (1)
      {
        uint64_t v7 = v11 & v14;
        uint64_t v8 = *(void *)(*v13 + v7);
        unint64_t v9 = ((v8 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v8 ^ (0x101010101010101
                                                                                        * (v6 & 0x7F))) & 0x8080808080808080;
        if (v9) {
          break;
        }
LABEL_6:
        if ((v8 & (~v8 << 6) & 0x8080808080808080) != 0)
        {
          this = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*(void *)(v3 + 680) + 48 * v12), ((((unint64_t)&off_264E82C18 + 5) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 5)));
          *(_DWORD *)(v13[1] + 4 * this) = -3;
          goto LABEL_9;
        }
        v10 += 8;
        unint64_t v11 = v10 + v7;
      }
      while (*(_DWORD *)(v13[1] + 4 * ((v7 + (__clz(__rbit64(v9)) >> 3)) & v14)) != -3)
      {
        v9 &= v9 - 1;
        if (!v9) {
          goto LABEL_6;
        }
      }
LABEL_9:
      ++v4;
    }
    while (v4 != v5);
  }
  return this;
}

void operations_research::sat::FindDuplicateConstraints(operations_research::sat *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v62 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v63 = 0u;
  long long v64 = 0u;
  uint64_t v65 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v61 = 0;
  uint64_t v3 = *((unsigned int *)this + 12);
  if ((int)v3 < 1) {
    goto LABEL_77;
  }
  uint64_t v5 = a2;
  unint64_t v6 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
  do
  {
    uint64_t v10 = *(google::protobuf::MessageLite **)(*((void *)this + 7) + 8 * v7 + 8);
    if (!*((_DWORD *)v10 + 15)) {
      goto LABEL_5;
    }
    google::protobuf::MessageLite::SerializeAsString(v10, (uint64_t)v58);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v61 = v59;
    *(_OWORD *)std::string __p = *(_OWORD *)v58;
    if (v59 >= 0) {
      unint64_t v11 = (uint64_t *)__p;
    }
    else {
      unint64_t v11 = (uint64_t *)v58[0];
    }
    if (v59 >= 0) {
      int v12 = (void *)HIBYTE(v59);
    }
    else {
      int v12 = v58[1];
    }
    unint64_t v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v58, v11, (unint64_t)v12);
    unint64_t v14 = v13;
    uint64_t v15 = 0;
    unint64_t v16 = ((((unint64_t)v8 + v13) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                            * ((void)v8 + v13));
    for (unint64_t i = (v16 >> 7) ^ ((unint64_t)v62 >> 12); ; unint64_t i = v15 + v18)
    {
      unint64_t v18 = i & v64;
      uint64_t v19 = *(void *)((char *)v62 + v18);
      unint64_t v20 = ((v19 ^ (0x101010101010101 * (v16 & 0x7F))) - 0x101010101010101) & ~(v19 ^ (0x101010101010101
                                                                                          * (v16 & 0x7F))) & 0x8080808080808080;
      if (v20) {
        break;
      }
LABEL_19:
      if ((v19 & (~v19 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v35 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)&v62, v16);
        uint64_t v36 = v63 + 16 * v35;
        *(void *)uint64_t v36 = v14;
        *(_DWORD *)(v36 + 8) = v7;
        goto LABEL_5;
      }
      v15 += 8;
    }
    while (1)
    {
      unint64_t v21 = (v18 + (__clz(__rbit64(v20)) >> 3)) & v64;
      if (*(void *)(v63 + 16 * v21) == v13) {
        break;
      }
      v20 &= v20 - 1;
      if (!v20) {
        goto LABEL_19;
      }
    }
    google::protobuf::MessageLite::SerializeAsString(*(google::protobuf::MessageLite **)(*((void *)this + 7) + 8 * *(int *)(v63 + 16 * v21 + 8) + 8), (uint64_t)v58);
    if (v61 >= 0) {
      unint64_t v22 = (void *)HIBYTE(v61);
    }
    else {
      unint64_t v22 = __p[1];
    }
    uint64_t v23 = (void *)HIBYTE(v59);
    int v24 = SHIBYTE(v59);
    if (v59 < 0) {
      uint64_t v23 = v58[1];
    }
    if (v22 != v23)
    {
      BOOL v34 = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_47;
    }
    if (v59 >= 0) {
      uint64_t v25 = v58;
    }
    else {
      uint64_t v25 = (void **)v58[0];
    }
    if (v61 < 0)
    {
      BOOL v34 = memcmp(__p[0], v25, (size_t)__p[1]) == 0;
      goto LABEL_43;
    }
    if (HIBYTE(v61))
    {
      uint64_t v26 = HIBYTE(v61) - 1;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = __p;
      do
      {
        int v29 = *(unsigned __int8 *)v27;
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = (void **)((char *)v27 + 1);
        int v28 = v29;
        int v31 = *(unsigned __int8 *)v25;
        uint64_t v25 = (void **)((char *)v25 + 1);
        int v30 = v31;
        BOOL v33 = v26-- != 0;
        BOOL v34 = v28 == v30;
      }
      while (v28 == v30 && v33);
LABEL_43:
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_47;
    }
    BOOL v34 = 1;
    if ((SHIBYTE(v59) & 0x80000000) == 0)
    {
LABEL_44:
      if (v34) {
        goto LABEL_48;
      }
      goto LABEL_5;
    }
LABEL_47:
    operator delete(v58[0]);
    if (v34)
    {
LABEL_48:
      if (v57 >= v56)
      {
        uint64_t v37 = v3;
        double v38 = v8;
        int64_t v39 = v57 - v6;
        uint64_t v40 = (v57 - v6) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v56 - v6) >> 1 > v41) {
          unint64_t v41 = (v56 - v6) >> 1;
        }
        if ((unint64_t)(v56 - v6) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          if (v42 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v43 = (char *)operator new(4 * v42);
          uint64_t v44 = &v43[4 * v40];
          *(_DWORD *)uint64_t v44 = v7;
          uint64_t v9 = (uint64_t)(v44 + 4);
          uint64_t v45 = v57;
          if (v57 != v6)
          {
LABEL_58:
            unint64_t v46 = v45 - 4 - v6;
            if (v46 < 0xBC)
            {
              uint64_t v47 = v45;
              goto LABEL_66;
            }
            if (&v43[v39 - 4 - (v46 & 0xFFFFFFFFFFFFFFFCLL)] <= &v43[v39 - 4]
              && &v45[-(v46 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v45 - 4
              && (unint64_t)(v45 - &v43[v39]) >= 0x20)
            {
              uint64_t v49 = (v46 >> 2) + 1;
              uint64_t v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v47 = &v57[-v50];
              v44 -= v50;
              uint64_t v51 = &v43[4 * v40 - 16];
              uint64_t v52 = v57 - 16;
              uint64_t v53 = v49 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v8 = v38;
              do
              {
                long long v54 = *(_OWORD *)v52;
                *((_OWORD *)v51 - 1) = *((_OWORD *)v52 - 1);
                *(_OWORD *)uint64_t v51 = v54;
                v51 -= 32;
                v52 -= 32;
                v53 -= 8;
              }
              while (v53);
              uint64_t v5 = a2;
              uint64_t v3 = v37;
              if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_67;
              }
            }
            else
            {
              uint64_t v47 = v57;
LABEL_66:
              uint64_t v5 = a2;
              uint64_t v8 = v38;
              uint64_t v3 = v37;
              do
              {
LABEL_67:
                int v48 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v44 - 1) = v48;
                v44 -= 4;
              }
              while (v47 != v6);
            }
LABEL_68:
            *uint64_t v5 = v44;
            v5[1] = (char *)v9;
            uint64_t v56 = &v43[4 * v42];
            v5[2] = v56;
            if (v6) {
              operator delete(v6);
            }
            unint64_t v6 = v44;
LABEL_4:
            v5[1] = (char *)v9;
            uint64_t v57 = (char *)v9;
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v43 = 0;
          uint64_t v44 = (char *)(4 * v40);
          *(_DWORD *)(4 * v40) = v7;
          uint64_t v9 = 4 * v40 + 4;
          uint64_t v45 = v57;
          if (v57 != v6) {
            goto LABEL_58;
          }
        }
        uint64_t v5 = a2;
        uint64_t v8 = v38;
        uint64_t v3 = v37;
        goto LABEL_68;
      }
      *(_DWORD *)uint64_t v57 = v7;
      uint64_t v9 = (uint64_t)(v57 + 4);
      goto LABEL_4;
    }
LABEL_5:
    ++v7;
  }
  while (v7 != v3);
  if (SHIBYTE(v61) < 0) {
    operator delete(__p[0]);
  }
LABEL_77:
  if ((void)v64)
  {
    operator delete(v62);
    uint64_t v62 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v65 = 0;
    *(void *)&long long v64 = 0;
    long long v63 = 0uLL;
  }
  if (*((void *)&v64 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v64 + 1));
  }
}

void sub_23CC64F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~flat_hash_map((uint64_t)&a22);
    uint64_t v23 = *(void **)a9;
    if (!*(void *)a9) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~flat_hash_map((uint64_t)&a22);
    uint64_t v23 = *(void **)a9;
    if (!*(void *)a9) {
      goto LABEL_3;
    }
  }
  *(void *)(a9 + 8) = v23;
  operator delete(v23);
  _Unwind_Resume(a1);
}

void operations_research::sat::ApplyVariableMapping(uint64_t *a1, operations_research::sat::PresolveContext *a2, google::protobuf::Message *a3)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 6);
  uint64_t v5 = *(void *)(v4 + 56);
  if (v5) {
    unint64_t v6 = (operations_research::sat::ConstraintProto **)(v5 + 8);
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(v4 + 48);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      uint64_t v9 = *v6;
      BOOL v102 = (void (**)(void **))&unk_26F0C1190;
      uint64_t v103 = (uint64_t)a1;
      unint64_t v105 = (void **)&v102;
      operations_research::sat::ApplyToAllVariableIndices((uint64_t)&v102, v9);
      if (v105 == (void **)&v102)
      {
        v102[4]((void **)&v102);
      }
      else if (v105)
      {
        (*((void (**)(void **))*v105 + 5))(v105);
      }
      BOOL v102 = (void (**)(void **))&unk_26F0C1190;
      uint64_t v103 = (uint64_t)a1;
      unint64_t v105 = (void **)&v102;
      operations_research::sat::ApplyToAllLiteralIndices((uint64_t)&v102, (uint64_t)v9);
      if (v105 == (void **)&v102)
      {
        v102[4]((void **)&v102);
      }
      else if (v105)
      {
        (*((void (**)(void **))*v105 + 5))(v105);
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v96 = v4;
  if ((_UNKNOWN *)v4 != &operations_research::sat::_CpModelProto_default_instance_)
  {
    uint64_t v10 = *(void *)(v4 + 120);
    if (v10)
    {
      uint64_t v11 = *(int *)(v10 + 16);
      if (v11)
      {
        int v12 = *(int **)(v10 + 24);
        uint64_t v13 = 4 * v11;
        do
        {
          int v14 = *v12;
          if (~*v12 <= *v12) {
            int v15 = *v12;
          }
          else {
            int v15 = ~v14;
          }
          int v16 = *(_DWORD *)(*a1 + 4 * v15);
          LODWORD(v102) = v16;
          LODWORD(__p) = 0;
          if (v16 < 0) {
            google::MakeCheckOpString<int,int>((int)&v102, (int)&__p, "image >= 0");
          }
          *v12++ = v16 ^ (v14 >> 31);
          v13 -= 4;
        }
        while (v13);
      }
    }
  }
  uint64_t v17 = *(int *)(v4 + 88);
  if (v17)
  {
    unint64_t v18 = *(int **)(v4 + 96);
    uint64_t v19 = 4 * v17;
    do
    {
      int v20 = *v18;
      if (~*v18 <= *v18) {
        int v21 = *v18;
      }
      else {
        int v21 = ~v20;
      }
      int v22 = *(_DWORD *)(*a1 + 4 * v21);
      LODWORD(v102) = v22;
      LODWORD(__p) = 0;
      if (v22 < 0) {
        google::MakeCheckOpString<int,int>((int)&v102, (int)&__p, "image >= 0");
      }
      *v18++ = v22 ^ (v20 >> 31);
      v19 -= 4;
    }
    while (v19);
  }
  uint64_t v23 = *(void *)(v4 + 80);
  if (v23) {
    int v24 = (const operations_research::sat::DecisionStrategyProto **)(v23 + 8);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = *(int *)(v4 + 72);
  if (v25)
  {
    unsigned int v97 = &v24[v25];
    while (1)
    {
      uint64_t v26 = *v24;
      operations_research::sat::DecisionStrategyProto::DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)&v102, *v24);
      *((_DWORD *)v26 + 4) = 0;
      if (v104)
      {
        unsigned int v27 = 0;
        int v28 = (int *)v105;
        uint64_t v29 = 4 * (int)v104;
        do
        {
          int v30 = *v28;
          if (~*v28 <= *v28) {
            int v31 = *v28;
          }
          else {
            int v31 = ~v30;
          }
          int v32 = *(_DWORD *)(*a1 + 4 * v31);
          if ((v32 & 0x80000000) == 0)
          {
            if (v27 == *((_DWORD *)v26 + 5)) {
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v26 + 4, v27 + 1);
            }
            *(_DWORD *)(*((void *)v26 + 3) + 4 * v27) = v32 ^ (v30 >> 31);
            *((_DWORD *)v26 + 4) = ++v27;
          }
          ++v28;
          v29 -= 4;
        }
        while (v29);
      }
      uint64_t v33 = *((unsigned int *)v26 + 12);
      if ((int)v33 >= 1)
      {
        BOOL v34 = (operations_research::sat::DecisionStrategyProto_AffineTransformation **)(*((void *)v26 + 7) + 8);
        do
        {
          operations_research::sat::DecisionStrategyProto_AffineTransformation::Clear(*v34++);
          --v33;
        }
        while (v33);
        *((_DWORD *)v26 + 12) = 0;
      }
      uint64_t v35 = v107 ? v107 + 8 : 0;
      if (v106) {
        break;
      }
LABEL_40:
      operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)&v102);
      if (++v24 == v97) {
        goto LABEL_73;
      }
    }
    uint64_t v36 = 8 * v106;
    while (1)
    {
      uint64_t v37 = *(const operations_research::sat::DecisionStrategyProto_AffineTransformation **)v35;
      int v38 = *(_DWORD *)(*(void *)v35 + 32);
      if (~v38 <= v38) {
        int v39 = *(_DWORD *)(*(void *)v35 + 32);
      }
      else {
        int v39 = ~v38;
      }
      int v40 = *(_DWORD *)(*a1 + 4 * v39);
      if (v40 < 0) {
        goto LABEL_60;
      }
      unint64_t v41 = (int *)*((void *)v26 + 7);
      if (!v41) {
        break;
      }
      uint64_t v42 = *((int *)v26 + 12);
      int v43 = *v41;
      if ((int)v42 >= *v41)
      {
        if (v43 == *((_DWORD *)v26 + 13))
        {
LABEL_70:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v26 + 10, v43 + 1);
          unint64_t v41 = (int *)*((void *)v26 + 7);
          int v43 = *v41;
        }
        int *v41 = v43 + 1;
        uint64_t v44 = (operations_research::sat::DecisionStrategyProto_AffineTransformation *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(*((google::protobuf::Arena **)v26 + 5));
        uint64_t v45 = *((void *)v26 + 7);
        uint64_t v46 = *((int *)v26 + 12);
        *((_DWORD *)v26 + 12) = v46 + 1;
        *(void *)(v45 + 8 * v46 + 8) = v44;
        goto LABEL_72;
      }
      *((_DWORD *)v26 + 12) = v42 + 1;
      uint64_t v44 = *(operations_research::sat::DecisionStrategyProto_AffineTransformation **)&v41[2 * v42 + 2];
LABEL_72:
      operations_research::sat::DecisionStrategyProto_AffineTransformation::CopyFrom(v44, v37);
      *((_DWORD *)v44 + 8) = v40 ^ (v38 >> 31);
LABEL_60:
      v35 += 8;
      v36 -= 8;
      if (!v36) {
        goto LABEL_40;
      }
    }
    int v43 = *((_DWORD *)v26 + 13);
    goto LABEL_70;
  }
LABEL_73:
  uint64_t v47 = v96;
  if ((_UNKNOWN *)v96 != &operations_research::sat::_CpModelProto_default_instance_)
  {
    uint64_t v48 = *(void *)(v96 + 128);
    if (v48)
    {
      if (*(int *)(v48 + 16) >= 1)
      {
        uint64_t v49 = 0;
        int v50 = 0;
        do
        {
          uint64_t v52 = *(void *)(*(void *)(v48 + 48) + 8 * v49);
          operations_research::sat::PresolveContext::GetAffineRelation(a2, *(_DWORD *)(*(void *)(v48 + 24) + 4 * v49), (uint64_t)&v102);
          int v53 = *(_DWORD *)(*a1 + 4 * (int)v102);
          if ((v53 & 0x80000000) == 0)
          {
            uint64_t v54 = (v52 - v104) / v103;
            *(_DWORD *)(*(void *)(v48 + 24) + 4 * v50) = v53;
            *(void *)(*(void *)(v48 + 48) + 8 * v50++) = v54;
          }
          uint64_t v47 = v96;
          ++v49;
          uint64_t v51 = *(int *)(v48 + 16);
        }
        while (v49 < v51);
        if (v50 > 0)
        {
          if ((int)v51 >= 1) {
            *(_DWORD *)(v48 + 16) = v50;
          }
          if (*(int *)(v48 + 40) >= 1) {
            *(_DWORD *)(v48 + 40) = v50;
          }
          goto LABEL_85;
        }
      }
      uint64_t v70 = *(void *)(v47 + 8);
      int v71 = (void *)(v70 & 0xFFFFFFFFFFFFFFFELL);
      if (v70)
      {
        if (*v71) {
          goto LABEL_110;
        }
      }
      else if (v71)
      {
        goto LABEL_110;
      }
      unint64_t v72 = *(operations_research::sat::PartialVariableAssignment **)(v47 + 128);
      if (v72)
      {
        operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v72);
        MEMORY[0x23ECF2BC0]();
      }
LABEL_110:
      *(void *)(v47 + 128) = 0;
      std::string __p = 0;
      int v99 = 0;
      uint64_t v100 = 0;
      uint64_t v55 = *a1;
      if (a1[1] != *a1) {
        goto LABEL_86;
      }
      goto LABEL_111;
    }
  }
LABEL_85:
  std::string __p = 0;
  int v99 = 0;
  uint64_t v100 = 0;
  uint64_t v55 = *a1;
  if (a1[1] != *a1)
  {
LABEL_86:
    for (unint64_t i = 0; i < (a1[1] - *a1) >> 2; ++i)
    {
      unint64_t v57 = *(unsigned int *)(v55 + 4 * i);
      if ((v57 & 0x80000000) != 0) {
        goto LABEL_88;
      }
      __n128 v58 = (char *)__p;
      if (0x6DB6DB6DB6DB6DB7 * ((v99 - (unsigned char *)__p) >> 3) <= v57)
      {
        operations_research::sat::IntegerVariableProto::IntegerVariableProto((operations_research::sat::IntegerVariableProto *)&v102, 0);
        unint64_t v59 = (v57 + 1);
        BOOL v60 = v99;
        unint64_t v61 = 0x6DB6DB6DB6DB6DB7 * ((v99 - (unsigned char *)__p) >> 3);
        if (v59 <= v61)
        {
          if (v59 < v61)
          {
            uint64_t v62 = (char *)__p + 56 * v59;
            if (v99 != v62)
            {
              do
                operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(v60 - 56));
              while (v60 != v62);
            }
            int v99 = v62;
          }
        }
        else
        {
          std::vector<operations_research::sat::IntegerVariableProto>::__append((uint64_t *)&__p, v59 - v61, (operations_research::sat::IntegerVariableProto *)&v102);
        }
        operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)&v102);
        __n128 v58 = (char *)__p;
      }
      long long v63 = (google::protobuf::internal *)&v58[56 * v57];
      long long v64 = *(google::protobuf::Message **)(*(void *)(v47 + 32) + 8 * i + 8);
      if (v64 == v63) {
        goto LABEL_88;
      }
      uint64_t v65 = *((void *)v63 + 1);
      uint64_t v66 = (void *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if (v65)
      {
        uint64_t v66 = (void *)*v66;
        uint64_t v69 = *((void *)v64 + 1);
        uint64_t v68 = (void *)(v69 & 0xFFFFFFFFFFFFFFFELL);
        if ((v69 & 1) == 0)
        {
LABEL_101:
          if (v66 != v68) {
            goto LABEL_102;
          }
          goto LABEL_87;
        }
      }
      else
      {
        uint64_t v67 = *((void *)v64 + 1);
        uint64_t v68 = (void *)(v67 & 0xFFFFFFFFFFFFFFFELL);
        if ((v67 & 1) == 0) {
          goto LABEL_101;
        }
      }
      if (v66 != (void *)*v68)
      {
LABEL_102:
        google::protobuf::internal::GenericSwap(v63, v64, a3);
        goto LABEL_88;
      }
LABEL_87:
      operations_research::sat::IntegerVariableProto::InternalSwap((__n128 *)v63, (__n128 *)v64);
LABEL_88:
      uint64_t v55 = *a1;
    }
  }
LABEL_111:
  uint64_t v73 = *(unsigned int *)(v47 + 24);
  if ((int)v73 >= 1)
  {
    uint64_t v74 = (operations_research::sat::IntegerVariableProto **)(*(void *)(v47 + 32) + 8);
    do
    {
      operations_research::sat::IntegerVariableProto::Clear(*v74++);
      --v73;
    }
    while (v73);
    *(_DWORD *)(v47 + 24) = 0;
  }
  uint64_t v75 = (google::protobuf::Message *)__p;
  uint64_t v76 = (google::protobuf::Message *)v99;
  if (__p != v99)
  {
    while (1)
    {
      int v77 = *(int **)(v47 + 32);
      if (!v77) {
        break;
      }
      uint64_t v78 = *(int *)(v47 + 24);
      int v79 = *v77;
      if ((int)v78 < *v77)
      {
        *(_DWORD *)(v47 + 24) = v78 + 1;
        unint64_t v80 = *(google::protobuf::internal **)&v77[2 * v78 + 2];
        if (v75 == v80) {
          goto LABEL_118;
        }
        goto LABEL_127;
      }
      if (v79 == *(_DWORD *)(v47 + 28)) {
        goto LABEL_125;
      }
LABEL_126:
      *int v77 = v79 + 1;
      unint64_t v80 = (google::protobuf::internal *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v47 + 16));
      uint64_t v81 = *(void *)(v47 + 32);
      uint64_t v82 = *(int *)(v47 + 24);
      *(_DWORD *)(v47 + 24) = v82 + 1;
      *(void *)(v81 + 8 * v82 + 8) = v80;
      if (v75 == v80) {
        goto LABEL_118;
      }
LABEL_127:
      uint64_t v83 = *((void *)v80 + 1);
      unint64_t v84 = (void *)(v83 & 0xFFFFFFFFFFFFFFFELL);
      if (v83)
      {
        unint64_t v84 = (void *)*v84;
        uint64_t v87 = *((void *)v75 + 1);
        uint64_t v86 = (void *)(v87 & 0xFFFFFFFFFFFFFFFELL);
        if (v87)
        {
LABEL_132:
          if (v84 != (void *)*v86)
          {
LABEL_130:
            google::protobuf::internal::GenericSwap(v80, v75, a3);
            goto LABEL_118;
          }
          goto LABEL_117;
        }
      }
      else
      {
        uint64_t v85 = *((void *)v75 + 1);
        uint64_t v86 = (void *)(v85 & 0xFFFFFFFFFFFFFFFELL);
        if (v85) {
          goto LABEL_132;
        }
      }
      if (v84 != v86) {
        goto LABEL_130;
      }
LABEL_117:
      operations_research::sat::IntegerVariableProto::InternalSwap((__n128 *)v80, (__n128 *)v75);
LABEL_118:
      uint64_t v75 = (google::protobuf::Message *)((char *)v75 + 56);
      if (v75 == v76)
      {
        LODWORD(v73) = *(_DWORD *)(v47 + 24);
        goto LABEL_135;
      }
    }
    int v79 = *(_DWORD *)(v47 + 28);
LABEL_125:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v47 + 16), v79 + 1);
    int v77 = *(int **)(v47 + 32);
    int v79 = *v77;
    goto LABEL_126;
  }
LABEL_135:
  uint64_t v88 = *(void *)(v47 + 32);
  if (v88) {
    uint64_t v89 = v88 + 8;
  }
  else {
    uint64_t v89 = 0;
  }
  if (v73)
  {
    uint64_t v90 = 8 * (int)v73;
    do
    {
      int v91 = *(_DWORD *)(*(void *)v89 + 16);
      int v101 = 0;
      LODWORD(v102) = v91;
      if (v91 < 1) {
        google::MakeCheckOpString<int,int>((int)&v102, (int)&v101, "v.domain_size() > 0");
      }
      v89 += 8;
      v90 -= 8;
    }
    while (v90);
  }
  uint64_t v92 = (char *)__p;
  if (__p)
  {
    unint64_t v93 = v99;
    uint64_t v94 = __p;
    if (v99 != __p)
    {
      do
        operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(v93 - 56));
      while (v93 != v92);
      uint64_t v94 = __p;
    }
    int v99 = v92;
    operator delete(v94);
  }
}

void sub_23CC658DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC658E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC658EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC658F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_23CC65908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_23CC6591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  unint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)va1);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_23CC65938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_23CC6594C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_23CC65960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_23CC65974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::function<void ()(int *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC65988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::function<void ()(int *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC659A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_23CC659B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)va);
  _Unwind_Resume(a1);
}

void sub_23CC659C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)va);
  _Unwind_Resume(a1);
}

void sub_23CC659DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)va);
  _Unwind_Resume(a1);
}

void **std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(v3 - 56));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Assign<absl::lts_2020_02_25::inlined_vector_internal::IteratorValueAdapter<std::allocator<operations_research::ClosedInterval>,operations_research::ClosedInterval const*>>(unint64_t *a1, long long *a2, unint64_t a3)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = *a1;
  if (*a1)
  {
    uint64_t v7 = (_OWORD *)a1[1];
    unint64_t v8 = a1[2];
    if (v8 >= a3) {
      goto LABEL_3;
    }
LABEL_14:
    if (2 * v8 <= a3) {
      unint64_t v15 = a3;
    }
    else {
      unint64_t v15 = 2 * v8;
    }
    if (v15 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v17 = operator new(16 * v15);
    unint64_t v11 = a3;
    int v16 = v17;
    goto LABEL_19;
  }
  unint64_t v8 = 1;
  if (a3 > 1) {
    goto LABEL_14;
  }
LABEL_3:
  unint64_t v9 = v6 >> 1;
  BOOL v10 = a3 >= v6 >> 1;
  unint64_t v11 = a3 - (v6 >> 1);
  if (!v10) {
    unint64_t v11 = 0;
  }
  if (v9 >= a3) {
    unint64_t v12 = a3;
  }
  else {
    unint64_t v12 = v9;
  }
  if (v12)
  {
    uint64_t v13 = v7;
    do
    {
      long long v14 = *a2++;
      *v13++ = v14;
      --v12;
    }
    while (v12);
  }
  if (v9 >= a3)
  {
    unint64_t v19 = *a1;
    goto LABEL_25;
  }
  unint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = &v7[v9];
  do
  {
LABEL_19:
    long long v18 = *a2++;
    *v17++ = v18;
    --v11;
  }
  while (v11);
  unint64_t v19 = *a1;
  if (v16)
  {
    if (v19)
    {
      operator delete((void *)a1[1]);
      unint64_t v19 = *a1;
    }
    a1[1] = (unint64_t)v16;
    a1[2] = v15;
    LOBYTE(v19) = v19 | 1;
  }
LABEL_25:
  *a1 = v19 & 1 | (2 * a3);
}

operations_research::sat::SatPresolver *operations_research::sat::SatPresolver::SatPresolver(operations_research::sat::SatPresolver *this, operations_research::sat::SatPostsolver *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 17) = (char *)this + 144;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 19) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = a2;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 118) = 0;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatPresolver *)((char *)this + 480), 0);
  *((_OWORD *)this + 66) = 0u;
  return this;
}

void sub_23CC65C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  BOOL v34 = v16;
  uint64_t v23 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 456) = v23;
    operator delete(v23);
    int v24 = *(void **)(v12 + 416);
    if (!v24)
    {
LABEL_3:
      std::vector<std::vector<int>>::~vector[abi:ne180100](v34);
      uint64_t v25 = *(void **)(v12 + 352);
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    int v24 = *(void **)(v12 + 416);
    if (!v24) {
      goto LABEL_3;
    }
  }
  *(void *)(v12 + 424) = v24;
  operator delete(v24);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v34);
  uint64_t v25 = *(void **)(v12 + 352);
  if (!v25)
  {
LABEL_4:
    std::vector<std::vector<int>>::~vector[abi:ne180100](v18);
    std::deque<int>::~deque[abi:ne180100](v17);
    uint64_t v26 = *(void **)(v12 + 256);
    if (!v26) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v12 + 360) = v25;
  operator delete(v25);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v18);
  std::deque<int>::~deque[abi:ne180100](v17);
  uint64_t v26 = *(void **)(v12 + 256);
  if (!v26)
  {
LABEL_5:
    unsigned int v27 = *(void **)(v12 + 232);
    if (!v27) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v26);
  unsigned int v27 = *(void **)(v12 + 232);
  if (!v27)
  {
LABEL_6:
    int v28 = *(void **)(v12 + 208);
    if (!v28) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  *(void *)(v12 + 240) = v27;
  operator delete(v27);
  int v28 = *(void **)(v12 + 208);
  if (!v28)
  {
LABEL_7:
    uint64_t v29 = *(void **)(v12 + 184);
    if (!v29) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(void *)(v12 + 216) = v28;
  operator delete(v28);
  uint64_t v29 = *(void **)(v12 + 184);
  if (!v29)
  {
LABEL_8:
    int v30 = *v15;
    if (!*v15) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(void *)(v12 + 192) = v29;
  operator delete(v29);
  int v30 = *v15;
  if (!*v15)
  {
LABEL_9:
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v14, *v21);
    int v31 = *v20;
    if (!*v20) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  *(void *)(v12 + 168) = v30;
  operator delete(v30);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v14, *v21);
  int v31 = *v20;
  if (!*v20)
  {
LABEL_10:
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::~deque[abi:ne180100](a12);
    int v32 = *v19;
    if (!*v19) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  *(void *)(v12 + 120) = v31;
  operator delete(v31);
  std::deque<operations_research::sat::SatPresolver::BvaPqElement>::~deque[abi:ne180100](a12);
  int v32 = *v19;
  if (!*v19)
  {
LABEL_11:
    uint64_t v33 = *(void **)v12;
    if (!*(void *)v12) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  *(void *)(v12 + 40) = v32;
  operator delete(v32);
  uint64_t v33 = *(void **)v12;
  if (!*(void *)v12) {
LABEL_12:
  }
    _Unwind_Resume(a1);
LABEL_23:
  *(void *)(v12 + 8) = v33;
  operator delete(v33);
  _Unwind_Resume(a1);
}

uint64_t std::deque<operations_research::sat::SatPresolver::BvaPqElement>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 256;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void operations_research::sat::SatPresolver::~SatPresolver(operations_research::sat::SatPresolver *this)
{
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatPresolver *)((char *)this + 480));
  uint64_t v2 = (void *)*((void *)this + 56);
  if (v2)
  {
    *((void *)this + 57) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 52);
  if (v3)
  {
    *((void *)this + 53) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 49);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 50);
    uint64_t v6 = (void *)*((void *)this + 49);
    if (v5 != v4)
    {
      uint64_t v7 = *((void *)this + 50);
      do
      {
        uint64_t v9 = *(void **)(v7 - 24);
        v7 -= 24;
        uint64_t v8 = v9;
        if (v9)
        {
          *(void *)(v5 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      uint64_t v6 = (void *)*((void *)this + 49);
    }
    *((void *)this + 50) = v4;
    operator delete(v6);
  }
  BOOL v10 = (void *)*((void *)this + 44);
  if (v10)
  {
    *((void *)this + 45) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *((void *)this + 41);
  if (v11)
  {
    uint64_t v12 = *((void *)this + 42);
    uint64_t v13 = (void *)*((void *)this + 41);
    if (v12 != v11)
    {
      uint64_t v14 = *((void *)this + 42);
      do
      {
        int v16 = *(void **)(v14 - 24);
        v14 -= 24;
        unint64_t v15 = v16;
        if (v16)
        {
          *(void *)(v12 - 16) = v15;
          operator delete(v15);
        }
        uint64_t v12 = v14;
      }
      while (v14 != v11);
      uint64_t v13 = (void *)*((void *)this + 41);
    }
    *((void *)this + 42) = v11;
    operator delete(v13);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 280);
  uint64_t v17 = (void *)*((void *)this + 32);
  if (v17) {
    operator delete(v17);
  }
  long long v18 = (void *)*((void *)this + 29);
  if (v18)
  {
    *((void *)this + 30) = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)*((void *)this + 26);
  if (v19)
  {
    *((void *)this + 27) = v19;
    operator delete(v19);
  }
  int v20 = (void *)*((void *)this + 23);
  if (v20)
  {
    *((void *)this + 24) = v20;
    operator delete(v20);
  }
  int v21 = (void *)*((void *)this + 20);
  if (v21)
  {
    *((void *)this + 21) = v21;
    operator delete(v21);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 136, *((void **)this + 18));
  int v22 = (void *)*((void *)this + 14);
  if (v22)
  {
    *((void *)this + 15) = v22;
    operator delete(v22);
  }
  std::deque<operations_research::sat::SatPresolver::BvaPqElement>::~deque[abi:ne180100]((uint64_t)this + 56);
  uint64_t v23 = (void *)*((void *)this + 4);
  if (v23)
  {
    *((void *)this + 5) = v23;
    operator delete(v23);
  }
  int v24 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v24;
    operator delete(v24);
  }
}

void std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    unint64_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    int v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::deque<int>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        BOOL v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            uint64_t v74 = &v34[8 * v32];
            int v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              int v40 = &v35[v76];
              v7 += v76;
              int v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            int v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)int v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      int v91 = operator new(0x1000uLL);
      std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v91);
      return;
    }
    int v91 = operator new(0x1000uLL);
    std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v91);
    unint64_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        BOOL v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            uint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              uint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *uint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1000uLL);
  unsigned int v27 = &v25[8 * v21];
  int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      unsigned int v27 = &v49[8 * (v48 >> 2)];
      int v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)unsigned int v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unsigned int v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          int v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            long long v64 = &v53[v68];
            uint64_t v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            uint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)uint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)long long v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          int v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          int v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        int v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      unsigned int v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unsigned int v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_23CC666BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_23CC666D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CC666EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CC66704(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F0C1000;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C1000;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::operator()(uint64_t result, int **a2)
{
  int v2 = *(_DWORD *)(**(void **)(result + 8) + 4 * **a2);
  **a2 = v2;
  int v3 = -1;
  LODWORD(v4) = v2;
  if (v2 == -1) {
    google::MakeCheckOpString<int,int>((int)&v3, (int)&v4, "-1 != *ref");
  }
  return result;
}

void sub_23CC66834(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16CpModelPresolver22RemoveEmptyConstraintsEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat16CpModelPresolver22RemoveEmptyConstraintsEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16CpModelPresolver22RemoveEmptyConstraintsEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16CpModelPresolver22RemoveEmptyConstraintsEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_26F0C1090;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1090;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::operator()(uint64_t a1, int **a2)
{
  unint64_t v3 = *a2;
  uint64_t result = operations_research::sat::PresolveContext::GetVariableRepresentative(*(operations_research::sat::PresolveContext **)(*(void *)(a1 + 16) + 16), **a2);
  if (result != *v3)
  {
    **(unsigned char **)(a1 + 8) = 1;
    int *v3 = result;
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15Const"
                                "raintProtoEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_26F0C1110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const char *std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::operator()(uint64_t a1, unsigned int **a2)
{
  unint64_t v3 = *a2;
  __n128 result = operations_research::sat::PresolveContext::GetLiteralRepresentative(*(operations_research::sat::PresolveContext **)(*(void *)(a1 + 16) + 16), (const char *)**a2);
  if (result != *v3)
  {
    **(unsigned char **)(a1 + 8) = 1;
    _DWORD *v3 = result;
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15Const"
                                "raintProtoEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::target_type()
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = a2 - 4;
  uint64_t v68 = a2 - 12;
  uint64_t v69 = a2 - 8;
  unint64_t v12 = v10;
  uint64_t v70 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = (uint64_t)a2 - v12;
    unint64_t v15 = v14 >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v28 = *(a2 - 4);
          int v29 = *(_DWORD *)v10;
          if (v28 >= *(_DWORD *)v10)
          {
            if (v29 < v28) {
              return result;
            }
            uint64_t v31 = *((void *)a2 - 1);
            uint64_t v30 = *(void *)(v10 + 8);
            if (v31 >= v30) {
              return result;
            }
          }
          else
          {
            uint64_t v30 = *(void *)(v10 + 8);
            uint64_t v31 = *((void *)a2 - 1);
          }
          *(_DWORD *)uint64_t v10 = v28;
          *(a2 - 4) = v29;
          *(void *)(v10 + 8) = v31;
          *((void *)a2 - 1) = v30;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)v10, (int *)(v10 + 16), v11);
        case 4uLL:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)v10, (int *)(v10 + 16), (int *)(v10 + 32));
          int v32 = *(a2 - 4);
          int v33 = *(_DWORD *)(v10 + 32);
          if (v32 >= v33)
          {
            if (v33 < v32) {
              return result;
            }
            uint64_t v35 = *((void *)a2 - 1);
            uint64_t v34 = *(void *)(v10 + 40);
            if (v35 >= v34) {
              return result;
            }
          }
          else
          {
            uint64_t v34 = *(void *)(v10 + 40);
            uint64_t v35 = *((void *)a2 - 1);
          }
          *(_DWORD *)(v10 + 32) = v32;
          *(a2 - 4) = v33;
          *(void *)(v10 + 40) = v35;
          *((void *)a2 - 1) = v34;
          int v36 = *(_DWORD *)(v10 + 32);
          int v37 = *(_DWORD *)(v10 + 16);
          if (v36 >= v37)
          {
            if (v37 < v36) {
              return result;
            }
            uint64_t v39 = *(void *)(v10 + 40);
            uint64_t v38 = *(void *)(v10 + 24);
            if (v39 >= v38) {
              return result;
            }
          }
          else
          {
            uint64_t v38 = *(void *)(v10 + 24);
            uint64_t v39 = *(void *)(v10 + 40);
          }
          *(_DWORD *)(v10 + 16) = v36;
          *(_DWORD *)(v10 + 32) = v37;
          *(void *)(v10 + 24) = v39;
          *(void *)(v10 + 40) = v38;
          int v40 = *(_DWORD *)v10;
          if (v36 >= *(_DWORD *)v10)
          {
            if (v40 < v36) {
              return result;
            }
            uint64_t v41 = *(void *)(v10 + 8);
            if (v39 >= v41) {
              return result;
            }
          }
          else
          {
            uint64_t v41 = *(void *)(v10 + 8);
          }
          *(_DWORD *)uint64_t v10 = v36;
          *(_DWORD *)(v10 + 16) = v40;
          *(void *)(v10 + 8) = v39;
          *(void *)(v10 + 24) = v41;
          return result;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v10, v10 + 16, v10 + 32, v10 + 48, v11);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if ((int *)v10 != a2)
      {
        unint64_t v57 = (v15 - 2) >> 1;
        unint64_t v58 = v57 + 1;
        unint64_t v59 = (int *)(v10 + 16 * v57);
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v10, a3, v14 >> 4, v59);
          v59 -= 4;
          --v58;
        }
        while (v58);
        unint64_t v60 = (unint64_t)v14 >> 4;
        do
        {
          __n128 result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<int,long long> *>((int *)v10, (uint64_t)a2, a3, v60);
          a2 -= 4;
        }
        while (v60-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    uint64_t v18 = (int *)(v10 + 16 * (v15 >> 1));
    if ((unint64_t)v14 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v18, (int *)v10, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)v10, v18, v11);
      uint64_t v19 = a5;
      uint64_t v20 = v11;
      uint64_t v21 = v10 + 16 * v17;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)(v10 + 16), (int *)(v21 - 16), v69);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)(v10 + 32), (int *)(v10 + 16 + 16 * v17), v68);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)(v21 - 16), v18, (int *)(v10 + 16 + 16 * v17));
      int v22 = *(_DWORD *)v10;
      *(_DWORD *)uint64_t v10 = *v18;
      *uint64_t v18 = v22;
      uint64_t v23 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = *(void *)(v21 + 8);
      *(void *)(v21 + 8) = v23;
      uint64_t v11 = v20;
      a5 = v19;
      a2 = v70;
      if (a5) {
        goto LABEL_15;
      }
    }
    int v24 = *(_DWORD *)(v10 - 16);
    if (v24 >= *(_DWORD *)v10 && (*(_DWORD *)v10 < v24 || *(void *)(v10 - 8) >= *(void *)(v10 + 8)))
    {
      __n128 result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,long long> *,std::__less<void,void> &>((int *)v10, a2);
      unint64_t v12 = result;
LABEL_20:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,long long> *,std::__less<void,void> &>((int *)v10, (unint64_t)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v10, v25);
    unint64_t v12 = v25 + 16;
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v25 + 16, (uint64_t)a2);
    if (result)
    {
      a4 = -v16;
      a2 = (int *)v25;
      if (v27) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v27)
    {
LABEL_18:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(v10, v25, a3, -v16, a5 & 1);
      unint64_t v12 = v25 + 16;
      goto LABEL_20;
    }
  }
  unint64_t v42 = (int *)(v10 + 16);
  BOOL v44 = (int *)v10 == a2 || v42 == a2;
  if (a5)
  {
    if (v44) {
      return result;
    }
    uint64_t v45 = 0;
    uint64_t v46 = v10;
LABEL_50:
    uint64_t v47 = v46;
    uint64_t v46 = (uint64_t)v42;
    int v48 = *(_DWORD *)(v47 + 16);
    int v49 = *(_DWORD *)v47;
    if (v48 >= *(_DWORD *)v47)
    {
      if (v49 < v48) {
        goto LABEL_49;
      }
      uint64_t v50 = *(void *)(v47 + 24);
      uint64_t v51 = *(void *)(v47 + 8);
      if (v50 >= v51) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v50 = *(void *)(v47 + 24);
      uint64_t v51 = *(void *)(v47 + 8);
    }
    *(_DWORD *)(v47 + 16) = v49;
    *(void *)(v46 + 8) = v51;
    uint64_t v52 = v10;
    if (v47 == v10) {
      goto LABEL_48;
    }
    uint64_t v53 = v45;
    while (1)
    {
      int v56 = *(_DWORD *)(v10 + v53 - 16);
      if (v48 >= v56)
      {
        if (v56 < v48)
        {
          uint64_t v52 = v10 + v53;
          goto LABEL_48;
        }
        uint64_t v54 = *(void *)(v10 + v53 - 8);
        if (v50 >= v54)
        {
          uint64_t v52 = v47;
LABEL_48:
          *(_DWORD *)uint64_t v52 = v48;
          *(void *)(v52 + 8) = v50;
LABEL_49:
          unint64_t v42 = (int *)(v46 + 16);
          v45 += 16;
          if ((int *)(v46 + 16) == a2) {
            return result;
          }
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v54 = *(void *)(v10 + v53 - 8);
      }
      v47 -= 16;
      uint64_t v55 = v10 + v53;
      *(_DWORD *)uint64_t v55 = v56;
      *(void *)(v55 + 8) = v54;
      v53 -= 16;
      if (!v53)
      {
        uint64_t v52 = v10;
        goto LABEL_48;
      }
    }
  }
  if (!v44)
  {
    for (uint64_t i = v10 + 8; ; i += 16)
    {
      uint64_t v63 = v10;
      uint64_t v10 = (uint64_t)v42;
      int v64 = *(_DWORD *)(v63 + 16);
      int v65 = *(_DWORD *)v63;
      if (v64 < *(_DWORD *)v63) {
        break;
      }
      if (v65 >= v64)
      {
        uint64_t v66 = *(void *)(v63 + 24);
        if (v66 < *(void *)(v63 + 8)) {
          goto LABEL_84;
        }
      }
LABEL_79:
      unint64_t v42 = (int *)(v10 + 16);
      if ((int *)(v10 + 16) == a2) {
        return result;
      }
    }
    uint64_t v66 = *(void *)(v63 + 24);
LABEL_84:
    for (uint64_t j = i; ; j -= 16)
    {
      *(_DWORD *)(j + 8) = v65;
      *(void *)(j + 16) = *(void *)j;
      int v65 = *(_DWORD *)(j - 24);
      if (v64 >= v65 && (v65 < v64 || v66 >= *(void *)(j - 16))) {
        break;
      }
    }
    *(_DWORD *)(j - 8) = v64;
    *(void *)uint64_t j = v66;
    goto LABEL_79;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  if (*a2 < *a1 || v4 >= v3 && *((void *)a2 + 1) < *((void *)a1 + 1))
  {
    int v5 = *a3;
    if (*a3 < v3)
    {
      uint64_t v6 = *((void *)a3 + 1);
LABEL_16:
      *a1 = v5;
      *a3 = v4;
      uint64_t v16 = *((void *)a1 + 1);
      *((void *)a1 + 1) = v6;
      *((void *)a3 + 1) = v16;
      return 1;
    }
    if (v3 >= v5)
    {
      uint64_t v6 = *((void *)a3 + 1);
      uint64_t v10 = *((void *)a2 + 1);
      if (v6 < v10) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v10 = *((void *)a2 + 1);
    }
    *a1 = v3;
    *a2 = v4;
    uint64_t v17 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v10;
    *((void *)a2 + 1) = v17;
    int v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      uint64_t v19 = *((void *)a3 + 1);
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      uint64_t v19 = *((void *)a3 + 1);
    }
    *a2 = v18;
    *a3 = v4;
    *((void *)a2 + 1) = v19;
    uint64_t result = 2;
    *((void *)a3 + 1) = v17;
    return result;
  }
  int v7 = *a3;
  if (*a3 >= v3)
  {
    if (v3 < v7) {
      return 0;
    }
    uint64_t v9 = *((void *)a3 + 1);
    uint64_t v8 = *((void *)a2 + 1);
    if (v9 >= v8) {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = *((void *)a2 + 1);
    uint64_t v9 = *((void *)a3 + 1);
  }
  *a2 = v7;
  *a3 = v3;
  *((void *)a2 + 1) = v9;
  *((void *)a3 + 1) = v8;
  int v11 = *a2;
  int v12 = *a1;
  if (*a2 < *a1)
  {
    uint64_t v13 = *((void *)a1 + 1);
    uint64_t v14 = *((void *)a2 + 1);
LABEL_14:
    *a1 = v11;
    *a2 = v12;
    *((void *)a1 + 1) = v14;
    uint64_t result = 2;
    *((void *)a2 + 1) = v13;
    return result;
  }
  if (v12 >= v11)
  {
    uint64_t v14 = *((void *)a2 + 1);
    uint64_t v13 = *((void *)a1 + 1);
    if (v14 < v13) {
      goto LABEL_14;
    }
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,long long> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  int v4 = *(a2 - 4);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((void *)a2 - 1)))
  {
    for (uint64_t i = a1 + 4; i < a2 && v2 >= *i && (*i < v2 || v3 >= *((void *)i + 1)); i += 4)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      int v7 = i[4];
      i += 4;
      int v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((void *)i + 1)));
  }
  if (i < a2)
  {
    for (a2 -= 4; v2 < v4 || v4 >= v2 && v3 < *((void *)a2 + 1); a2 -= 4)
    {
      int v8 = *(a2 - 4);
      int v4 = v8;
    }
  }
  if (i < a2)
  {
    int v9 = *i;
    int v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      int v11 = i[4];
      i += 4;
      int v9 = v11;
      uint64_t v12 = *((void *)i - 1);
      *((void *)i - 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((void *)i + 1)))
      {
        int v13 = i[4];
        i += 4;
        int v9 = v13;
      }
      do
      {
        do
        {
          int v14 = *(a2 - 4);
          a2 -= 4;
          int v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *((void *)a2 + 1));
    }
    while (i < a2);
  }
  if (i - 4 != a1)
  {
    *a1 = *(i - 4);
    *((void *)a1 + 1) = *((void *)i - 1);
  }
  *(i - 4) = v2;
  *((void *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,long long> *,std::__less<void,void> &>(int *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  while (1)
  {
    int v5 = a1[v2 + 4];
    if (v5 >= v3 && (v3 < v5 || *(void *)&a1[v2 + 6] >= v4)) {
      break;
    }
    v2 += 4;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 4];
  if (v2 * 4)
  {
    do
    {
      int v8 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
      int v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(void *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        int v10 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (*(void *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = v6;
  }
  else
  {
    int v12 = *(_DWORD *)a2;
    unint64_t v13 = v6;
    unint64_t v14 = a2;
    do
    {
      *(_DWORD *)unint64_t v13 = v12;
      *(_DWORD *)unint64_t v14 = v5;
      uint64_t v15 = *(void *)(v13 + 8);
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      *(void *)(v14 + 8) = v15;
      do
      {
        do
        {
          int v16 = *(_DWORD *)(v13 + 16);
          v13 += 16;
          int v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(void *)(v13 + 8) < v4);
      do
      {
        int v17 = *(_DWORD *)(v14 - 16);
        v14 -= 16;
        int v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(void *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if ((int *)(v13 - 16) != a1)
  {
    *a1 = *(_DWORD *)(v13 - 16);
    *((void *)a1 + 1) = *(void *)(v13 - 8);
  }
  *(_DWORD *)(v13 - 16) = v3;
  *(void *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v19 = *(_DWORD *)(a2 - 16);
      int v20 = *(_DWORD *)a1;
      if (v19 < *(_DWORD *)a1)
      {
        uint64_t v21 = *(void *)(a1 + 8);
        uint64_t v22 = *(void *)(a2 - 8);
LABEL_24:
        *(_DWORD *)a1 = v19;
        *(_DWORD *)(a2 - 16) = v20;
        *(void *)(a1 + 8) = v22;
        *(void *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        uint64_t v22 = *(void *)(a2 - 8);
        uint64_t v21 = *(void *)(a1 + 8);
        if (v22 < v21) {
          goto LABEL_24;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      int v23 = *(_DWORD *)(a2 - 16);
      int v24 = *(_DWORD *)(a1 + 32);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        uint64_t v26 = *(void *)(a2 - 8);
        uint64_t v25 = *(void *)(a1 + 40);
        if (v26 >= v25) {
          return 1;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(a1 + 40);
        uint64_t v26 = *(void *)(a2 - 8);
      }
      *(_DWORD *)(a1 + 32) = v23;
      *(_DWORD *)(a2 - 16) = v24;
      *(void *)(a1 + 40) = v26;
      *(void *)(a2 - 8) = v25;
      int v27 = *(_DWORD *)(a1 + 32);
      int v28 = *(_DWORD *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        uint64_t v30 = *(void *)(a1 + 40);
        uint64_t v29 = *(void *)(a1 + 24);
        if (v30 >= v29) {
          return 1;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(a1 + 24);
        uint64_t v30 = *(void *)(a1 + 40);
      }
      *(_DWORD *)(a1 + 16) = v27;
      *(_DWORD *)(a1 + 32) = v28;
      *(void *)(a1 + 24) = v30;
      *(void *)(a1 + 40) = v29;
      int v31 = *(_DWORD *)a1;
      if (v27 < *(_DWORD *)a1)
      {
        uint64_t v32 = *(void *)(a1 + 8);
LABEL_46:
        *(_DWORD *)a1 = v27;
        *(_DWORD *)(a1 + 16) = v31;
        *(void *)(a1 + 8) = v30;
        BOOL result = 1;
        *(void *)(a1 + 24) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        uint64_t v32 = *(void *)(a1 + 8);
        if (v30 < v32) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(a1, a1 + 16, a1 + 32, a1 + 48, (int *)(a2 - 16));
      return 1;
    default:
      uint64_t v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      uint64_t v7 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        int v11 = *(_DWORD *)v7;
        int v12 = *(_DWORD *)v6;
        if (*(_DWORD *)v7 >= *(_DWORD *)v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          uint64_t v13 = *(void *)(v7 + 8);
          uint64_t v14 = *(void *)(v6 + 8);
          if (v13 >= v14) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v13 = *(void *)(v7 + 8);
          uint64_t v14 = *(void *)(v6 + 8);
        }
        *(_DWORD *)uint64_t v7 = v12;
        *(void *)(v7 + 8) = v14;
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          uint64_t v17 = a1 + v15;
          int v18 = *(_DWORD *)(a1 + v15 + 16);
          if (v11 < v18)
          {
            uint64_t v16 = *(void *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(_DWORD *)(v17 + 32) = v18;
            *(void *)(a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          uint64_t v16 = *(void *)(a1 + v15 + 24);
          if (v13 >= v16)
          {
            uint64_t v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *(_DWORD *)uint64_t v10 = v11;
        *(void *)(v10 + 8) = v13;
        if (++v9 == 8) {
          return v7 + 16 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)a1, (int *)a2, (int *)a3);
  int v11 = *(_DWORD *)a4;
  int v12 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v12 < v11) {
      goto LABEL_16;
    }
    uint64_t v14 = *(void *)(a4 + 8);
    uint64_t v13 = *(void *)(a3 + 8);
    if (v14 >= v13) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a3 + 8);
    uint64_t v14 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v11;
  *(_DWORD *)a4 = v12;
  *(void *)(a3 + 8) = v14;
  *(void *)(a4 + 8) = v13;
  int v15 = *(_DWORD *)a3;
  int v16 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v16 < v15) {
      goto LABEL_16;
    }
    uint64_t v18 = *(void *)(a3 + 8);
    uint64_t v17 = *(void *)(a2 + 8);
    if (v18 >= v17) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v17 = *(void *)(a2 + 8);
    uint64_t v18 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v15;
  *(_DWORD *)a3 = v16;
  *(void *)(a2 + 8) = v18;
  *(void *)(a3 + 8) = v17;
  int v19 = *(_DWORD *)a2;
  int v20 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    uint64_t v21 = *(void *)(a1 + 8);
    uint64_t v22 = *(void *)(a2 + 8);
LABEL_7:
    *(_DWORD *)a1 = v19;
    *(_DWORD *)a2 = v20;
    *(void *)(a1 + 8) = v22;
    *(void *)(a2 + 8) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    uint64_t v22 = *(void *)(a2 + 8);
    uint64_t v21 = *(void *)(a1 + 8);
    if (v22 < v21) {
      goto LABEL_7;
    }
  }
LABEL_16:
  int v23 = *a5;
  int v24 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v24 < v23) {
      return result;
    }
    uint64_t v26 = *((void *)a5 + 1);
    uint64_t v25 = *(void *)(a4 + 8);
    if (v26 >= v25) {
      return result;
    }
  }
  else
  {
    uint64_t v25 = *(void *)(a4 + 8);
    uint64_t v26 = *((void *)a5 + 1);
  }
  *(_DWORD *)a4 = v23;
  *a5 = v24;
  *(void *)(a4 + 8) = v26;
  *((void *)a5 + 1) = v25;
  int v27 = *(_DWORD *)a4;
  int v28 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v28 < v27) {
      return result;
    }
    uint64_t v30 = *(void *)(a4 + 8);
    uint64_t v29 = *(void *)(a3 + 8);
    if (v30 >= v29) {
      return result;
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a3 + 8);
    uint64_t v30 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v27;
  *(_DWORD *)a4 = v28;
  *(void *)(a3 + 8) = v30;
  *(void *)(a4 + 8) = v29;
  int v31 = *(_DWORD *)a3;
  int v32 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v32 < v31) {
      return result;
    }
    uint64_t v34 = *(void *)(a3 + 8);
    uint64_t v33 = *(void *)(a2 + 8);
    if (v34 >= v33) {
      return result;
    }
  }
  else
  {
    uint64_t v33 = *(void *)(a2 + 8);
    uint64_t v34 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v31;
  *(_DWORD *)a3 = v32;
  *(void *)(a2 + 8) = v34;
  *(void *)(a3 + 8) = v33;
  int v35 = *(_DWORD *)a2;
  int v36 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    uint64_t v37 = *(void *)(a1 + 8);
    uint64_t v38 = *(void *)(a2 + 8);
LABEL_24:
    *(_DWORD *)a1 = v35;
    *(_DWORD *)a2 = v36;
    *(void *)(a1 + 8) = v38;
    *(void *)(a2 + 8) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    uint64_t v38 = *(void *)(a2 + 8);
    uint64_t v37 = *(void *)(a1 + 8);
    if (v38 < v37) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (int *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[4];
        if (*v8 < v10 || v10 >= *v8 && *(void *)(result + 16 * v7 + 8) < *((void *)v8 + 3))
        {
          v8 += 4;
          uint64_t v7 = v9;
        }
      }
      int v11 = *v8;
      int v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          uint64_t v14 = *((void *)v8 + 1);
          uint64_t v13 = *((void *)a4 + 1);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          uint64_t v13 = *((void *)a4 + 1);
          uint64_t v14 = *((void *)v8 + 1);
        }
        *a4 = v11;
        *((void *)a4 + 1) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            int v15 = (int *)(result + 16 * v7);
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              int v18 = v15[4];
              if (*v15 < v18 || v18 >= *v15 && *(void *)(result + 16 * v7 + 8) < *((void *)v15 + 3))
              {
                v15 += 4;
                uint64_t v7 = v17;
              }
            }
            int v19 = *v15;
            if (*v15 < v12) {
              break;
            }
            uint64_t v20 = *((void *)v15 + 1);
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            int *v8 = v19;
            *((void *)v8 + 1) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        int v15 = v8;
LABEL_14:
        int *v15 = v12;
        *((void *)v15 + 1) = v13;
      }
    }
  }
  return result;
}

int *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<int,long long> *>(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    int v5 = *result;
    uint64_t v6 = *((void *)result + 1);
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 4 * v4 + 4;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        int v12 = v7[4];
        if (*v7 < v12 || v12 >= *v7 && *(void *)&v8[4 * v9 + 2] < *((void *)v7 + 3))
        {
          v7 += 4;
          uint64_t v4 = v11;
        }
      }
      int *v8 = *v7;
      *((void *)v8 + 1) = *((void *)v7 + 1);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (int *)(a2 - 16))
    {
      int *v7 = v5;
      *((void *)v7 + 1) = v6;
      return result;
    }
    int *v7 = *(_DWORD *)(a2 - 16);
    *((void *)v7 + 1) = *(void *)(a2 - 8);
    *(_DWORD *)(a2 - 16) = v5;
    *(void *)(a2 - 8) = v6;
    uint64_t v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      unint64_t v14 = ((unint64_t)v13 >> 4) - 2;
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = &result[4 * (v14 >> 1)];
      int v17 = *v16;
      int v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17) {
          return result;
        }
        uint64_t v20 = *(void *)&result[4 * v15 + 2];
        uint64_t v19 = *((void *)v7 + 1);
        if (v20 >= v19) {
          return result;
        }
      }
      else
      {
        uint64_t v19 = *((void *)v7 + 1);
        uint64_t v20 = *((void *)v16 + 1);
      }
      int *v7 = v17;
      *((void *)v7 + 1) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v23 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          uint64_t v21 = &result[4 * v15];
          int v24 = *v21;
          if (*v21 < v18)
          {
            uint64_t v22 = *((void *)v21 + 1);
          }
          else
          {
            if (v18 < v24) {
              break;
            }
            uint64_t v22 = *(void *)&result[4 * v15 + 2];
            if (v22 >= v19) {
              break;
            }
          }
          int *v16 = v24;
          *((void *)v16 + 1) = v22;
          uint64_t v16 = &result[4 * v15];
          if (v23 <= 1) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v21 = v16;
LABEL_19:
      int *v21 = v18;
      *((void *)v21 + 1) = v19;
    }
  }
  return result;
}

void std::vector<operations_research::Domain>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v6 = (void *)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3) >= a2)
  {
    if (!a2)
    {
LABEL_32:
      a1[1] = (uint64_t)v6;
      return;
    }
    int v12 = &v6[3 * a2];
    unint64_t v13 = 24 * a2 - 24;
    if (v13 >= 0x18)
    {
      unint64_t v29 = v13 / 0x18 + 1;
      unint64_t v14 = &v6[3 * (v29 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v30 = v29 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *uint64_t v6 = 0;
        v6[3] = 0;
        v6 += 6;
        v30 -= 2;
      }
      while (v30);
      if (v29 == (v29 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v14 = (void *)a1[1];
    }
    do
    {
      *unint64_t v14 = 0;
      v14 += 3;
    }
    while (v14 != v12);
LABEL_31:
    uint64_t v6 = v12;
    goto LABEL_32;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
  unint64_t v8 = v7 + a2;
  if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(24 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v15 = (uint64_t)&v11[24 * v7];
  uint64_t v16 = &v11[24 * v10];
  uint64_t v17 = 24 * a2;
  int v18 = (void *)(v15 + 24 * a2);
  unint64_t v19 = v17 - 24;
  uint64_t v20 = (void *)v15;
  if (v19 < 0x18) {
    goto LABEL_38;
  }
  unint64_t v21 = v19 / 0x18 + 1;
  uint64_t v20 = (void *)(v15 + 24 * (v21 & 0x1FFFFFFFFFFFFFFELL));
  uint64_t v22 = v21 & 0x1FFFFFFFFFFFFFFELL;
  unint64_t v23 = (void *)v15;
  do
  {
    *unint64_t v23 = 0;
    v23[3] = 0;
    v23 += 6;
    v22 -= 2;
  }
  while (v22);
  if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_38:
    do
    {
      void *v20 = 0;
      v20 += 3;
    }
    while (v20 != v18);
  }
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>(v5, (uint64_t)v6, (uint64_t)v6, *a1, *a1, v15, v15);
  uint64_t v25 = (void **)*a1;
  int v24 = (void **)a1[1];
  *a1 = v26;
  a1[1] = (uint64_t)v18;
  a1[2] = (uint64_t)v16;
  if (v24 != v25)
  {
    int v27 = v24;
    do
    {
      char v28 = *((unsigned char *)v27 - 24);
      v27 -= 3;
      if (v28) {
        operator delete(*(v24 - 2));
      }
      int v24 = v27;
    }
    while (v27 != v25);
  }
  if (v25) {
    operator delete(v25);
  }
}

void sub_23CC68010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<operations_research::Domain>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  int v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[24 * v5];
  uint64_t v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  int v12 = (char **)(v10 + 8);
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = 0;
  unint64_t v13 = *(const void **)a2;
  int64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v14)
  {
    if (v14 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)unint64_t v10 = v15;
    *int v12 = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *((void *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *int v12 = v16;
  }
  uint64_t v17 = v10 + 24;
  uint64_t v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      int v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v20 = *a1;
    int v3 = a1[1];
    uint64_t v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      unint64_t v21 = v3;
      do
      {
        unint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v3 - 2) = v22;
          operator delete(v22);
        }
        int v3 = v21;
      }
      while (v21 != v20);
      int v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_23CC68210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *,false>(uint64_t result, char **a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (uint64_t *)result;
  while (2)
  {
    uint64_t v11 = (uint64_t *)(a2 - 3);
    int v12 = v10;
    while (1)
    {
      while (1)
      {
        unint64_t v10 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
        if (!(!v6 & v5))
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              uint64_t v30 = *v12;
              uint64_t v31 = v12[1];
              if (*v12 == v31) {
                return result;
              }
              uint64_t v32 = 0;
              uint64_t v33 = (uint64_t)*(a2 - 3);
              break;
            case 3uLL:
              return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v12, v12 + 3, v11);
            case 4uLL:
              return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v12, v12 + 3, v12 + 6, v11);
            case 5uLL:
              return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v12, v12 + 3, v12 + 6, v12 + 9, v11);
            default:
              JUMPOUT(0);
          }
          while ((char *)(v33 + v32) != *(a2 - 2))
          {
            uint64_t v34 = *(void *)(v33 + v32);
            uint64_t v35 = *(void *)(v30 + v32);
            if (v34 < v35) {
              break;
            }
            v32 += 8;
            if (v35 < v34 || v32 + v30 == v31) {
              return result;
            }
          }
          *int v12 = v33;
          *(a2 - 3) = (char *)v30;
          int v65 = (char *)v12[1];
          v12[1] = (uint64_t)*(a2 - 2);
          *(a2 - 2) = v65;
          uint64_t v66 = (char *)v12[2];
          v12[2] = (uint64_t)*(a2 - 1);
          *(a2 - 1) = v66;
          return result;
        }
        if (v13 <= 575)
        {
          uint64_t v37 = v12 + 3;
          BOOL v39 = v12 == (uint64_t *)a2 || v37 == (uint64_t *)a2;
          if (a5)
          {
            if (!v39)
            {
              int v40 = v12;
              do
              {
                uint64_t v67 = v40;
                int v40 = v37;
                uint64_t v69 = *v67;
                uint64_t v68 = v67[1];
                if (*v67 != v68)
                {
                  uint64_t v70 = 0;
                  uint64_t v71 = v67[4];
                  uint64_t v72 = *v40;
                  while (v72 + v70 != v71)
                  {
                    uint64_t v73 = *(void *)(v72 + v70);
                    uint64_t v74 = *(void *)(v69 + v70);
                    if (v73 < v74) {
                      break;
                    }
                    v70 += 8;
                    if (v74 < v73 || v70 + v69 == v68) {
                      goto LABEL_91;
                    }
                  }
                  uint64_t v76 = v67[5];
                  v40[1] = 0;
                  v40[2] = 0;
                  uint64_t *v40 = 0;
                  uint64_t v77 = v67[1];
                  v67[3] = v69;
                  v40[1] = v77;
                  v40[2] = v67[2];
                  *uint64_t v67 = 0;
                  v67[1] = 0;
                  v67[2] = 0;
                  uint64_t v78 = v12;
                  if (v67 != v12)
                  {
                    while (1)
                    {
                      uint64_t v78 = v67;
                      uint64_t v79 = *(v67 - 3);
                      uint64_t v80 = *(v67 - 2);
                      v67 -= 3;
                      if (v79 == v80) {
                        break;
                      }
                      uint64_t v81 = 0;
                      while (v72 + v81 != v71)
                      {
                        uint64_t v82 = *(void *)(v72 + v81);
                        uint64_t result = *(void *)(v79 + v81);
                        if (v82 < result) {
                          break;
                        }
                        v81 += 8;
                        if (result < v82 || v81 + v79 == v80) {
                          goto LABEL_90;
                        }
                      }
                      *uint64_t v78 = v79;
                      v78[1] = v80;
                      v78[2] = *(v78 - 1);
                      *uint64_t v67 = 0;
                      v67[1] = 0;
                      v67[2] = 0;
                      if (v67 == v12)
                      {
                        uint64_t v78 = v12;
                        break;
                      }
                    }
                  }
LABEL_90:
                  *uint64_t v78 = v72;
                  v78[1] = v71;
                  v78[2] = v76;
                }
LABEL_91:
                uint64_t v37 = v40 + 3;
              }
              while (v40 + 3 != (uint64_t *)a2);
            }
          }
          else if (!v39)
          {
            do
            {
              uint64_t v46 = v10;
              unint64_t v10 = v37;
              uint64_t v48 = *v46;
              uint64_t v47 = v46[1];
              if (*v46 != v47)
              {
                uint64_t v49 = 0;
                uint64_t v50 = v46[4];
                uint64_t v51 = *v10;
                while (v51 + v49 != v50)
                {
                  uint64_t v52 = *(void *)(v51 + v49);
                  uint64_t v53 = *(void *)(v48 + v49);
                  if (v52 < v53) {
                    break;
                  }
                  v49 += 8;
                  if (v53 < v52 || v49 + v48 == v47) {
                    goto LABEL_65;
                  }
                }
                uint64_t v55 = v46[5];
                v10[1] = 0;
                v10[2] = 0;
                uint64_t *v10 = 0;
                uint64_t v56 = v46[1];
                uint64_t *v10 = v48;
                v10[1] = v56;
                v10[2] = v46[2];
LABEL_78:
                *uint64_t v46 = 0;
                v46[1] = 0;
                v46[2] = 0;
                uint64_t v58 = *(v46 - 3);
                uint64_t v59 = *(v46 - 2);
                if (v58 != v59)
                {
                  uint64_t v60 = 0;
                  unint64_t v61 = v46;
                  v46 -= 3;
                  do
                  {
                    if (v51 + v60 == v50 || (uint64_t v62 = *(void *)(v51 + v60), v63 = *(void *)(v58 + v60), v62 < v63))
                    {
                      uint64_t v57 = v46[1];
                      *unint64_t v61 = v58;
                      v61[1] = v57;
                      v61[2] = v46[2];
                      goto LABEL_78;
                    }
                    v60 += 8;
                    uint64_t result = v60 + v58;
                  }
                  while (v63 >= v62 && result != v59);
                  uint64_t v46 = v61;
                }
                *uint64_t v46 = v51;
                v46[1] = v50;
                v46[2] = v55;
              }
LABEL_65:
              uint64_t v37 = v10 + 3;
            }
            while (v10 + 3 != (uint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != (uint64_t *)a2)
          {
            unint64_t v41 = (v14 - 2) >> 1;
            unint64_t v42 = v41 + 1;
            unint64_t v43 = &v12[3 * v41];
            do
            {
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>((uint64_t)v12, a3, v14, v43);
              v43 -= 3;
              --v42;
            }
            while (v42);
            unint64_t v44 = v13 / 0x18uLL;
            do
            {
              uint64_t result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::vector<long long> *>((char *)v12, (uint64_t)a2, a3, v44);
              a2 -= 3;
            }
            while (v44-- > 2);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = &v10[3 * (v14 >> 1)];
        if ((unint64_t)v13 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v16, v10, v11);
          --a4;
          if (a5) {
            goto LABEL_11;
          }
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v10, v16, v11);
          uint64_t v17 = v11;
          int v18 = &v10[3 * v15];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v10 + 3, v18 - 3, (uint64_t *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v10 + 6, &v10[3 * v15 + 3], (uint64_t *)a2 - 9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v18 - 3, v16, &v10[3 * v15 + 3]);
          long long v19 = *(_OWORD *)v10;
          *(_OWORD *)unint64_t v10 = *(_OWORD *)v16;
          *(_OWORD *)uint64_t v16 = v19;
          uint64_t v20 = v10[2];
          v10[2] = v18[2];
          v18[2] = v20;
          uint64_t v11 = v17;
          --a4;
          if (a5) {
            goto LABEL_11;
          }
        }
        uint64_t v24 = v10[1];
        if (*v10 != v24) {
          break;
        }
LABEL_24:
        uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<long long> *,std::__less<void,void> &>((uint64_t)v10, (unint64_t)a2);
        int v12 = (uint64_t *)result;
        a5 = 0;
      }
      uint64_t v25 = (uint64_t *)*(v10 - 3);
      uint64_t v26 = *v10 + 8;
      while (v25 != (uint64_t *)*(v10 - 2))
      {
        uint64_t v27 = *v25;
        uint64_t v28 = *(void *)(v26 - 8);
        if (*v25 < v28) {
          break;
        }
        ++v25;
        BOOL v29 = v28 < v27 || v26 == v24;
        v26 += 8;
        if (v29) {
          goto LABEL_24;
        }
      }
LABEL_11:
      unint64_t v21 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<long long> *,std::__less<void,void> &>((char **)v10, a2);
      if ((v22 & 1) == 0) {
        goto LABEL_14;
      }
      BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v10, v21);
      int v12 = v21 + 3;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v21 + 3, (uint64_t *)a2);
      if (result) {
        break;
      }
      if (!v23)
      {
LABEL_14:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *,false>(v10, v21, a3, a4, a5 & 1);
        a5 = 0;
        int v12 = v21 + 3;
      }
    }
    a2 = (char **)v21;
    if (!v23) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a1 == v4)
  {
LABEL_10:
    if (v5 == v6) {
      return 0;
    }
    uint64_t v11 = 0;
    uint64_t v12 = *a3;
    while (v12 + v11 != a3[1])
    {
      uint64_t v13 = *(void *)(v12 + v11);
      uint64_t v14 = *(void *)(v5 + v11);
      if (v13 < v14) {
        break;
      }
      v11 += 8;
      if (v14 < v13 || v11 + v5 == v6) {
        return 0;
      }
    }
    *a2 = v12;
    *a3 = v5;
    uint64_t v32 = a2[1];
    a2[1] = a3[1];
    a3[1] = v32;
    uint64_t v34 = a2 + 2;
    uint64_t v33 = a2[2];
    a2[2] = a3[2];
    a3[2] = v33;
    uint64_t v35 = *a1;
    uint64_t v36 = a1[1];
    if (*a1 != v36)
    {
      uint64_t v37 = 0;
      uint64_t v38 = *a2;
      while (v38 + v37 != a2[1])
      {
        uint64_t v39 = *(void *)(v38 + v37);
        uint64_t v40 = *(void *)(v35 + v37);
        if (v39 < v40) {
          break;
        }
        v37 += 8;
        if (v40 < v39 || v37 + v35 == v36) {
          return 1;
        }
      }
      *a1 = v38;
      *a2 = v35;
      uint64_t v47 = a1[1];
      a1[1] = a2[1];
      a2[1] = v47;
      uint64_t v48 = a1 + 2;
      uint64_t result = 2;
      uint64_t v49 = *v48;
      uint64_t *v48 = *v34;
      *uint64_t v34 = v49;
      return result;
    }
    return 1;
  }
  uint64_t v7 = 0;
  while (v5 + v7 != v6)
  {
    uint64_t v8 = *(void *)(v5 + v7);
    uint64_t v9 = *(void *)(v3 + v7);
    if (v8 < v9) {
      break;
    }
    v7 += 8;
    if (v9 < v8 || v7 + v3 == v4) {
      goto LABEL_10;
    }
  }
  if (v5 == v6)
  {
LABEL_29:
    *a1 = v5;
    *a2 = v3;
    uint64_t v22 = a1[1];
    a1[1] = a2[1];
    a2[1] = v22;
    BOOL v23 = a2 + 2;
    uint64_t v24 = a1[2];
    a1[2] = a2[2];
    a2[2] = v24;
    uint64_t v25 = *a2;
    uint64_t v26 = a2[1];
    if (*a2 != v26)
    {
      uint64_t v27 = 0;
      uint64_t v28 = *a3;
      while (v28 + v27 != a3[1])
      {
        uint64_t v29 = *(void *)(v28 + v27);
        uint64_t v30 = *(void *)(v25 + v27);
        if (v29 < v30) {
          break;
        }
        v27 += 8;
        if (v30 < v29 || v27 + v25 == v26) {
          return 1;
        }
      }
      *a2 = v28;
      *a3 = v25;
      uint64_t v45 = a2[1];
      a2[1] = a3[1];
      a3[1] = v45;
      uint64_t result = 2;
      uint64_t v46 = *v23;
      *BOOL v23 = a3[2];
      a3[2] = v46;
      return result;
    }
    return 1;
  }
  uint64_t v17 = 0;
  uint64_t v18 = *a3;
  while (v18 + v17 != a3[1])
  {
    uint64_t v19 = *(void *)(v18 + v17);
    uint64_t v20 = *(void *)(v5 + v17);
    if (v19 < v20) {
      break;
    }
    v17 += 8;
    if (v20 < v19 || v17 + v5 == v6) {
      goto LABEL_29;
    }
  }
  *a1 = v18;
  *a3 = v3;
  uint64_t v42 = a1[1];
  a1[1] = a3[1];
  a3[1] = v42;
  unint64_t v43 = a1 + 2;
  uint64_t result = 1;
  uint64_t v44 = *v43;
  uint64_t *v43 = a3[2];
  a3[2] = v44;
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<long long> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  long long v4 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v6 = *(void *)(a2 - 24);
  uint64_t v5 = *(void *)(a2 - 16);
  if (v6 == v5)
  {
LABEL_10:
    uint64_t v12 = (uint64_t *)(a1 + 24);
    if (a1 + 24 < a2)
    {
      uint64_t v13 = (uint64_t *)a1;
      while (1)
      {
        uint64_t v22 = v13[3];
        uint64_t v21 = v13[4];
        uint64_t v13 = v12;
        if (v22 != v21) {
          break;
        }
LABEL_23:
        v12 += 3;
        if ((unint64_t)(v13 + 3) >= a2) {
          goto LABEL_34;
        }
      }
      uint64_t v23 = v22 + 8;
      uint64_t v24 = v3;
      while (v24 != (uint64_t *)v4)
      {
        uint64_t v25 = *v24;
        uint64_t v26 = *(void *)(v23 - 8);
        if (*v24 < v26)
        {
          if ((unint64_t)v12 < a2) {
            uint64_t v28 = (uint64_t *)(a2 - 24);
          }
          else {
            uint64_t v28 = (uint64_t *)a2;
          }
          if ((unint64_t)v12 < a2) {
            goto LABEL_38;
          }
          goto LABEL_49;
        }
        ++v24;
        BOOL v27 = v26 < v25 || v23 == v21;
        v23 += 8;
        if (v27) {
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = v6 + 8;
    uint64_t v8 = v3;
    while (v8 != (uint64_t *)v4)
    {
      uint64_t v9 = *v8;
      uint64_t v10 = *(void *)(v7 - 8);
      if (*v8 < v10) {
        break;
      }
      ++v8;
      BOOL v11 = v10 < v9 || v7 == v5;
      v7 += 8;
      if (v11) {
        goto LABEL_10;
      }
    }
    uint64_t v12 = (uint64_t *)a1;
    do
    {
LABEL_13:
      uint64_t v15 = v12[3];
      uint64_t v14 = v12[4];
      v12 += 3;
    }
    while (v15 == v14);
    uint64_t v16 = v15 + 8;
    uint64_t v17 = v3;
    while (v17 != (uint64_t *)v4)
    {
      uint64_t v18 = *v17;
      uint64_t v19 = *(void *)(v16 - 8);
      if (*v17 < v19) {
        break;
      }
      ++v17;
      BOOL v20 = v19 < v18 || v16 == v14;
      v16 += 8;
      if (v20) {
        goto LABEL_13;
      }
    }
  }
LABEL_34:
  if ((unint64_t)v12 < a2) {
    uint64_t v28 = (uint64_t *)(a2 - 24);
  }
  else {
    uint64_t v28 = (uint64_t *)a2;
  }
  if ((unint64_t)v12 < a2)
  {
LABEL_38:
    if (v6 != v5)
    {
      uint64_t v28 = (uint64_t *)(a2 - 24);
      do
      {
        uint64_t v29 = v6 + 8;
        uint64_t v30 = v3;
        while (v30 != (uint64_t *)v4)
        {
          uint64_t v31 = *v30;
          uint64_t v32 = *(void *)(v29 - 8);
          if (*v30 < v32) {
            break;
          }
          ++v30;
          BOOL v33 = v32 < v31 || v29 == v5;
          v29 += 8;
          if (v33) {
            goto LABEL_49;
          }
        }
        uint64_t v6 = *(v28 - 3);
        uint64_t v5 = *(v28 - 2);
        v28 -= 3;
      }
      while (v6 != v5);
    }
  }
LABEL_49:
  if (v12 < v28)
  {
    uint64_t v34 = *v12;
    uint64_t v35 = *v28;
    do
    {
      *uint64_t v12 = v35;
      uint64_t *v28 = v34;
      uint64_t v36 = v12[1];
      v12[1] = v28[1];
      v28[1] = v36;
      uint64_t v37 = v12[2];
      v12[2] = v28[2];
      v28[2] = v37;
      do
      {
LABEL_53:
        uint64_t v34 = v12[3];
        uint64_t v38 = v12[4];
        v12 += 3;
      }
      while (v34 == v38);
      uint64_t v39 = 0;
      while (&v3[v39] != (uint64_t *)v4)
      {
        uint64_t v40 = v3[v39];
        uint64_t v41 = *(void *)(v34 + v39 * 8);
        if (v40 < v41) {
          break;
        }
        ++v39;
        if (v41 < v40 || v39 * 8 + v34 == v38) {
          goto LABEL_53;
        }
      }
      while (1)
      {
        uint64_t v35 = *(v28 - 3);
        uint64_t v47 = *(v28 - 2);
        v28 -= 3;
        if (v35 == v47) {
          break;
        }
        uint64_t v43 = 0;
        while (&v3[v43] != (uint64_t *)v4)
        {
          uint64_t v44 = v3[v43];
          uint64_t v45 = *(void *)(v35 + v43 * 8);
          if (v44 < v45) {
            break;
          }
          ++v43;
          if (v45 < v44 || v43 * 8 + v35 == v47) {
            goto LABEL_51;
          }
        }
      }
LABEL_51:
      ;
    }
    while (v12 < v28);
  }
  uint64_t v48 = *(uint64_t **)a1;
  if (v12 - 3 == (uint64_t *)a1)
  {
    if (v48)
    {
      *(v12 - 2) = (uint64_t)v48;
      long long v51 = v4;
      operator delete(v48);
      long long v4 = v51;
    }
  }
  else
  {
    if (v48)
    {
      *(void *)(a1 + 8) = v48;
      long long v50 = v4;
      operator delete(v48);
      long long v4 = v50;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)(v12 - 3);
    *(void *)(a1 + 16) = *(v12 - 1);
  }
  *(v12 - 3) = (uint64_t)v3;
  *((_OWORD *)v12 - 1) = v4;
  return v12;
}

char **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<long long> *,std::__less<void,void> &>(char **a1, char **a2)
{
  uint64_t v2 = a2;
  long long v4 = *a1;
  long long v5 = *(_OWORD *)(a1 + 1);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v6 = a1 + 3;
  if (v4 == (char *)v5)
  {
    if (v6 >= a2)
    {
      uint64_t v8 = a1 + 3;
      uint64_t v42 = a1;
      uint64_t v43 = *a1;
      if (v6 - 3 == a1) {
        goto LABEL_64;
      }
      goto LABEL_60;
    }
    goto LABEL_23;
  }
  uint64_t v7 = a1;
LABEL_4:
  uint64_t v8 = v6;
  uint64_t v9 = (uint64_t *)v7[3];
  uint64_t v10 = v4 + 8;
  do
  {
    if (v9 == (uint64_t *)v7[4] || (uint64_t v11 = *v9, v12 = *((void *)v10 - 1), *v9 < v12))
    {
      v6 += 3;
      uint64_t v7 = v8;
      goto LABEL_4;
    }
    ++v9;
    BOOL v13 = v12 < v11 || v10 == (char *)v5;
    v10 += 8;
  }
  while (!v13);
  if (v7 != a1)
  {
LABEL_13:
    uint64_t v14 = (uint64_t *)*(v2 - 3);
    uint64_t v15 = (uint64_t *)*(v2 - 2);
    v2 -= 3;
    uint64_t v16 = v4 + 8;
    while (v14 != v15)
    {
      uint64_t v17 = *v14;
      uint64_t v18 = *((void *)v16 - 1);
      if (*v14 < v18) {
        break;
      }
      ++v14;
      BOOL v19 = v18 < v17 || v16 == (char *)v5;
      v16 += 8;
      if (v19) {
        goto LABEL_13;
      }
    }
    goto LABEL_36;
  }
  if (v6 >= a2) {
    goto LABEL_36;
  }
  if (v4 == (char *)v5)
  {
    do
LABEL_23:
      v2 -= 3;
    while (v6 < v2);
    uint64_t v8 = v6;
    goto LABEL_36;
  }
LABEL_27:
  BOOL v20 = (uint64_t *)*(v2 - 3);
  uint64_t v21 = (uint64_t *)*(v2 - 2);
  v2 -= 3;
  uint64_t v22 = v4 + 8;
  while (v20 != v21)
  {
    uint64_t v23 = *v20;
    uint64_t v24 = *((void *)v22 - 1);
    if (*v20 < v24) {
      break;
    }
    ++v20;
    BOOL v25 = v24 < v23 || v22 == (char *)v5;
    v22 += 8;
    if (v25)
    {
      if (v6 < v2) {
        goto LABEL_27;
      }
      break;
    }
  }
LABEL_36:
  if (v8 >= v2)
  {
    uint64_t v42 = v8 - 3;
    uint64_t v43 = *a1;
    if (v8 - 3 == a1) {
      goto LABEL_64;
    }
LABEL_60:
    if (v43)
    {
      a1[1] = v43;
      long long v45 = v5;
      operator delete(v43);
      long long v5 = v45;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)(v8 - 3);
    a1[2] = *(v8 - 1);
    goto LABEL_66;
  }
  uint64_t v26 = *v8;
  BOOL v27 = *v2;
  uint64_t v28 = v8;
  uint64_t v29 = v2;
  do
  {
    uint64_t *v28 = v27;
    char *v29 = v26;
    uint64_t v30 = v28[1];
    v28[1] = v29[1];
    v29[1] = v30;
    uint64_t v31 = v28[2];
    v28[2] = v29[2];
    v29[2] = v31;
LABEL_40:
    uint64_t v32 = 0;
    uint64_t v26 = v28[3];
    BOOL v33 = v28[4];
    v28 += 3;
    do
    {
      if (&v26[v32] == v33) {
        goto LABEL_40;
      }
      uint64_t v34 = *(void *)&v26[v32];
      uint64_t v35 = *(void *)&v4[v32];
      if (v34 < v35) {
        goto LABEL_40;
      }
      v32 += 8;
    }
    while (v35 >= v34 && &v4[v32] != (char *)v5);
LABEL_48:
    uint64_t v37 = 0;
    BOOL v27 = *(v29 - 3);
    uint64_t v38 = (uint64_t)*(v29 - 2);
    v29 -= 3;
    while (&v27[v37] != (char *)v38)
    {
      uint64_t v39 = *(void *)&v27[v37];
      uint64_t v40 = *(void *)&v4[v37];
      if (v39 < v40) {
        break;
      }
      v37 += 8;
      if (v40 < v39 || &v4[v37] == (char *)v5) {
        goto LABEL_48;
      }
    }
  }
  while (v28 < v29);
  uint64_t v8 = v28;
  uint64_t v42 = v28 - 3;
  uint64_t v43 = *a1;
  if (v28 - 3 != a1) {
    goto LABEL_60;
  }
LABEL_64:
  if (v43)
  {
    *(v8 - 2) = v43;
    long long v46 = v5;
    operator delete(v43);
    long long v5 = v46;
  }
LABEL_66:
  *(v8 - 3) = v4;
  *((_OWORD *)v8 - 1) = v5;
  return v42;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v9 = *a1;
      uint64_t v10 = a1[1];
      if (*a1 != v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(a2 - 3);
        while (v12 + v11 != *(a2 - 2))
        {
          uint64_t v13 = *(void *)(v12 + v11);
          uint64_t v14 = *(void *)(v9 + v11);
          if (v13 < v14) {
            break;
          }
          v11 += 8;
          if (v14 < v13 || v11 + v9 == v10) {
            return result;
          }
        }
        *a1 = v12;
        *(a2 - 3) = v9;
        uint64_t v16 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v16;
        uint64_t v17 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v17;
        BOOL result = 1;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a1 + 3, a2 - 3);
      BOOL result = 1;
      break;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      BOOL result = 1;
      break;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      BOOL result = 1;
      break;
    default:
      uint64_t v6 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a1 + 3, a1 + 6);
      uint64_t v7 = a1 + 9;
      if (a1 + 9 == a2)
      {
LABEL_45:
        BOOL result = 1;
      }
      else
      {
        int v8 = 0;
        while (1)
        {
          uint64_t v20 = *v6;
          uint64_t v19 = v6[1];
          if (*v6 != v19)
          {
            uint64_t v21 = 0;
            uint64_t v23 = *v7;
            uint64_t v22 = v7[1];
            while (v23 + v21 != v22)
            {
              uint64_t v24 = *(void *)(v23 + v21);
              uint64_t v25 = *(void *)(v20 + v21);
              if (v24 < v25) {
                break;
              }
              v21 += 8;
              if (v25 < v24 || v21 + v20 == v19) {
                goto LABEL_21;
              }
            }
            uint64_t v27 = v7[2];
            uint64_t *v7 = 0;
            v7[1] = 0;
            v7[2] = 0;
            uint64_t v28 = v6[1];
            uint64_t *v7 = v20;
            v7[1] = v28;
            v7[2] = v6[2];
            *uint64_t v6 = 0;
            v6[1] = 0;
            void v6[2] = 0;
            uint64_t v18 = a1;
            if (v6 != a1)
            {
              while (1)
              {
                uint64_t v18 = v6;
                uint64_t v29 = *(v6 - 3);
                uint64_t v30 = *(v6 - 2);
                v6 -= 3;
                if (v29 == v30) {
                  break;
                }
                uint64_t v31 = 0;
                while (v23 + v31 != v22)
                {
                  uint64_t v32 = *(void *)(v23 + v31);
                  uint64_t v33 = *(void *)(v29 + v31);
                  if (v32 < v33) {
                    break;
                  }
                  v31 += 8;
                  if (v33 < v32 || v31 + v29 == v30) {
                    goto LABEL_20;
                  }
                }
                *uint64_t v18 = v29;
                *(_OWORD *)(v18 + 1) = *((_OWORD *)v18 - 1);
                *uint64_t v6 = 0;
                v6[1] = 0;
                void v6[2] = 0;
                if (v6 == a1)
                {
                  uint64_t v18 = a1;
                  break;
                }
              }
            }
LABEL_20:
            *uint64_t v18 = v23;
            v18[1] = v22;
            v18[2] = v27;
            if (++v8 == 8) {
              break;
            }
          }
LABEL_21:
          uint64_t v6 = v7;
          v7 += 3;
          if (v7 == a2) {
            goto LABEL_45;
          }
        }
        BOOL result = v7 + 3 == a2;
      }
      break;
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a2, a3);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    while (v12 + v11 != a4[1])
    {
      uint64_t v13 = *(void *)(v12 + v11);
      uint64_t v14 = *(void *)(v9 + v11);
      if (v13 < v14) {
        break;
      }
      v11 += 8;
      if (v14 < v13 || v11 + v9 == v10) {
        return result;
      }
    }
    *a3 = v12;
    *a4 = v9;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = a3[2];
    a3[2] = a4[2];
    a4[2] = v17;
    uint64_t v18 = *a2;
    uint64_t v19 = a2[1];
    if (*a2 != v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      while (v21 + v20 != a3[1])
      {
        uint64_t v22 = *(void *)(v21 + v20);
        uint64_t v23 = *(void *)(v18 + v20);
        if (v22 < v23) {
          break;
        }
        v20 += 8;
        if (v23 < v22 || v20 + v18 == v19) {
          return result;
        }
      }
      *a2 = v21;
      *a3 = v18;
      uint64_t v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      uint64_t v26 = a2[2];
      a2[2] = a3[2];
      a3[2] = v26;
      uint64_t v27 = *a1;
      uint64_t v28 = a1[1];
      if (*a1 != v28)
      {
        uint64_t v29 = 0;
        uint64_t v30 = *a2;
        while (v30 + v29 != a2[1])
        {
          uint64_t v31 = *(void *)(v30 + v29);
          uint64_t v32 = *(void *)(v27 + v29);
          if (v31 < v32) {
            break;
          }
          v29 += 8;
          if (v32 < v31 || v29 + v27 == v28) {
            return result;
          }
        }
        *a1 = v30;
        *a2 = v27;
        uint64_t v34 = a1[1];
        a1[1] = a2[1];
        a2[1] = v34;
        uint64_t v35 = a1[2];
        a1[2] = a2[2];
        a2[2] = v35;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  if (*a4 != v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a5;
    while (v14 + v13 != a5[1])
    {
      uint64_t v15 = *(void *)(v14 + v13);
      uint64_t v16 = *(void *)(v11 + v13);
      if (v15 < v16) {
        break;
      }
      v13 += 8;
      if (v16 < v15 || v13 + v11 == v12) {
        return result;
      }
    }
    *a4 = v14;
    *a5 = v11;
    uint64_t v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    uint64_t v19 = a4[2];
    a4[2] = a5[2];
    a5[2] = v19;
    uint64_t v20 = *a3;
    uint64_t v21 = a3[1];
    if (*a3 != v21)
    {
      uint64_t v22 = 0;
      uint64_t v23 = *a4;
      while (v23 + v22 != a4[1])
      {
        uint64_t v24 = *(void *)(v23 + v22);
        uint64_t v25 = *(void *)(v20 + v22);
        if (v24 < v25) {
          break;
        }
        v22 += 8;
        if (v25 < v24 || v22 + v20 == v21) {
          return result;
        }
      }
      *a3 = v23;
      *a4 = v20;
      uint64_t v27 = a3[1];
      a3[1] = a4[1];
      a4[1] = v27;
      uint64_t v28 = a3[2];
      a3[2] = a4[2];
      a4[2] = v28;
      uint64_t v29 = *a2;
      uint64_t v30 = a2[1];
      if (*a2 != v30)
      {
        uint64_t v31 = 0;
        uint64_t v32 = *a3;
        while (v32 + v31 != a3[1])
        {
          uint64_t v33 = *(void *)(v32 + v31);
          uint64_t v34 = *(void *)(v29 + v31);
          if (v33 < v34) {
            break;
          }
          v31 += 8;
          if (v34 < v33 || v31 + v29 == v30) {
            return result;
          }
        }
        *a2 = v32;
        *a3 = v29;
        uint64_t v36 = a2[1];
        a2[1] = a3[1];
        a3[1] = v36;
        uint64_t v37 = a2[2];
        a2[2] = a3[2];
        a3[2] = v37;
        uint64_t v38 = *a1;
        uint64_t v39 = a1[1];
        if (*a1 != v39)
        {
          uint64_t v40 = 0;
          uint64_t v41 = *a2;
          while (v41 + v40 != a2[1])
          {
            uint64_t v42 = *(void *)(v41 + v40);
            uint64_t v43 = *(void *)(v38 + v40);
            if (v42 < v43) {
              break;
            }
            v40 += 8;
            if (v43 < v42 || v40 + v38 == v39) {
              return result;
            }
          }
          *a1 = v41;
          *a2 = v38;
          uint64_t v45 = a1[1];
          a1[1] = a2[1];
          a2[1] = v45;
          uint64_t v46 = a1[2];
          a1[2] = a2[2];
          a2[2] = v46;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      uint64_t v6 = result + 24 * v5;
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3)
      {
        uint64_t v8 = *(void *)(v6 + 24);
        uint64_t v7 = *(void *)(v6 + 32);
        if (v8 != v7)
        {
          uint64_t v9 = *(uint64_t **)v6;
          uint64_t v10 = v8 + 8;
          while (v9 != *(uint64_t **)(result + 24 * v5 + 8))
          {
            uint64_t v11 = *v9;
            uint64_t v12 = *(void *)(v10 - 8);
            if (*v9 < v12) {
              break;
            }
            ++v9;
            BOOL v13 = v12 < v11 || v10 == v7;
            v10 += 8;
            if (v13) {
              goto LABEL_15;
            }
          }
          v6 += 24;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
LABEL_15:
      uint64_t v14 = *a4;
      uint64_t v15 = a4[1];
      if (*a4 == v15)
      {
        uint64_t v21 = a4[2];
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        *(_OWORD *)a4 = *(_OWORD *)v6;
        a4[2] = *(void *)(v6 + 16);
        *(void *)uint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        for (*(void *)(v6 + 16) = 0; v4 >= v5; *(void *)(v6 + 16) = 0)
        {
          uint64_t v37 = v6;
          uint64_t v38 = 2 * v5;
          uint64_t v5 = (2 * v5) | 1;
          uint64_t v6 = result + 24 * v5;
          uint64_t v39 = v38 + 2;
          if (v39 < a3)
          {
            uint64_t v41 = *(void *)(v6 + 24);
            uint64_t v40 = *(void *)(v6 + 32);
            if (v41 != v40)
            {
              uint64_t v42 = *(uint64_t **)v6;
              uint64_t v43 = v41 + 8;
              while (v42 != *(uint64_t **)(result + 24 * v5 + 8))
              {
                uint64_t v44 = *v42;
                uint64_t v45 = *(void *)(v43 - 8);
                if (*v42 < v45) {
                  break;
                }
                ++v42;
                BOOL v46 = v45 < v44 || v43 == v40;
                v43 += 8;
                if (v46) {
                  goto LABEL_52;
                }
              }
              v6 += 24;
              uint64_t v5 = v39;
            }
          }
LABEL_52:
          *(_OWORD *)uint64_t v37 = *(_OWORD *)v6;
          *(void *)(v37 + 16) = *(void *)(v6 + 16);
          *(void *)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
LABEL_48:
        *(void *)uint64_t v6 = v14;
        *(void *)(v6 + 8) = v15;
        *(void *)(v6 + 16) = v21;
      }
      else
      {
        uint64_t v16 = *(uint64_t **)v6;
        uint64_t v17 = v14 + 8;
        while (v16 != *(uint64_t **)(v6 + 8))
        {
          uint64_t v18 = *v16;
          uint64_t v19 = *(void *)(v17 - 8);
          if (*v16 < v19) {
            break;
          }
          ++v16;
          BOOL v20 = v19 < v18 || v17 == v15;
          v17 += 8;
          if (v20)
          {
            uint64_t v21 = a4[2];
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
            *(_OWORD *)a4 = *(_OWORD *)v6;
            a4[2] = *(void *)(v6 + 16);
            *(void *)uint64_t v6 = 0;
            *(void *)(v6 + 8) = 0;
            *(void *)(v6 + 16) = 0;
            if (v4 >= v5)
            {
LABEL_25:
              uint64_t v22 = 2 * v5;
              uint64_t v5 = (2 * v5) | 1;
              uint64_t v23 = result + 24 * v5;
              uint64_t v24 = v22 + 2;
              if (v24 < a3)
              {
                uint64_t v26 = *(void *)(v23 + 24);
                uint64_t v25 = *(void *)(v23 + 32);
                if (v26 != v25)
                {
                  uint64_t v27 = *(uint64_t **)v23;
                  uint64_t v28 = v26 + 8;
                  while (v27 != *(uint64_t **)(result + 24 * v5 + 8))
                  {
                    uint64_t v29 = *v27;
                    uint64_t v30 = *(void *)(v28 - 8);
                    if (*v27 < v30) {
                      break;
                    }
                    ++v27;
                    BOOL v31 = v30 < v29 || v28 == v25;
                    v28 += 8;
                    if (v31) {
                      goto LABEL_37;
                    }
                  }
                  v23 += 24;
                  uint64_t v5 = v24;
                }
              }
LABEL_37:
              uint64_t v32 = *(uint64_t **)v23;
              uint64_t v33 = v14 + 8;
              while (v32 != *(uint64_t **)(v23 + 8))
              {
                uint64_t v34 = *v32;
                uint64_t v35 = *(void *)(v33 - 8);
                if (*v32 < v35) {
                  break;
                }
                ++v32;
                BOOL v36 = v35 < v34 || v33 == v15;
                v33 += 8;
                if (v36)
                {
                  *(_OWORD *)uint64_t v6 = *(_OWORD *)v23;
                  *(void *)(v6 + 16) = *(void *)(v23 + 16);
                  *(void *)uint64_t v23 = 0;
                  *(void *)(v23 + 8) = 0;
                  *(void *)(v23 + 16) = 0;
                  uint64_t v6 = v23;
                  if (v4 >= v5) {
                    goto LABEL_25;
                  }
                  uint64_t v6 = v23;
                  goto LABEL_48;
                }
              }
            }
            goto LABEL_48;
          }
        }
      }
    }
  }
  return result;
}

char *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::vector<long long> *>(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)result;
    uint64_t v6 = *((void *)result + 1);
    uint64_t v7 = *((void *)result + 2);
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 0;
    uint64_t v8 = result;
    *(void *)uint64_t result = 0;
    do
    {
      uint64_t v9 = v8;
      uint64_t v10 = v4 + 1;
      v8 += 24 * v4 + 24;
      uint64_t v11 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v12 = v11 + 2;
      if (v12 < a4)
      {
        uint64_t v14 = *((void *)v8 + 3);
        uint64_t v13 = *((void *)v8 + 4);
        if (v14 != v13)
        {
          uint64_t v15 = *(uint64_t **)&v9[24 * v10 + 8];
          uint64_t v16 = *(uint64_t **)v8;
          uint64_t v17 = v14 + 8;
          while (v16 != v15)
          {
            uint64_t v18 = *v16;
            uint64_t v19 = *(void *)(v17 - 8);
            if (*v16 < v19) {
              break;
            }
            ++v16;
            BOOL v20 = v19 < v18 || v17 == v13;
            v17 += 8;
            if (v20) {
              goto LABEL_4;
            }
          }
          v8 += 24;
          uint64_t v4 = v12;
        }
      }
LABEL_4:
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
      *((void *)v9 + 2) = *((void *)v8 + 2);
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v8 == (char *)(a2 - 24))
    {
      *(void *)uint64_t v8 = v5;
      *((void *)v8 + 1) = v6;
      *((void *)v8 + 2) = v7;
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 - 24);
      *((void *)v8 + 2) = *(void *)(a2 - 8);
      *(void *)(a2 - 24) = v5;
      *(void *)(a2 - 16) = v6;
      *(void *)(a2 - 8) = v7;
      uint64_t v21 = v8 - result + 24;
      if (v21 >= 25)
      {
        uint64_t v22 = *(uint64_t **)v8;
        uint64_t v23 = (uint64_t *)*((void *)v8 + 1);
        if (*(uint64_t **)v8 != v23)
        {
          uint64_t v24 = 0;
          unint64_t v25 = v21 / 0x18uLL - 2;
          unint64_t v26 = v25 >> 1;
          uint64_t v27 = &result[24 * (v25 >> 1)];
          uint64_t v28 = *(void *)v27;
          while (v28 + v24 * 8 != *((void *)v27 + 1))
          {
            uint64_t v29 = *(void *)(v28 + v24 * 8);
            uint64_t v30 = v22[v24];
            if (v29 < v30) {
              break;
            }
            ++v24;
            if (v30 < v29 || &v22[v24] == v23) {
              return result;
            }
          }
          uint64_t v32 = *((void *)v8 + 2);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          *((void *)v8 + 2) = 0;
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v27;
          *((void *)v8 + 2) = *(void *)&result[24 * v26 + 16];
          *(void *)uint64_t v27 = 0;
          *((void *)v27 + 1) = 0;
          *((void *)v27 + 2) = 0;
          if (v25 >= 2)
          {
LABEL_32:
            uint64_t v33 = 0;
            uint64_t v34 = v27;
            unint64_t v35 = v26 - 1;
            unint64_t v26 = (v26 - 1) >> 1;
            uint64_t v27 = &result[24 * v26];
            uint64_t v36 = *(void *)v27;
            uint64_t v37 = *((void *)v27 + 1);
            do
            {
              if (v36 + v33 * 8 == v37 || (uint64_t v38 = *(void *)(v36 + v33 * 8), v39 = v22[v33], v38 < v39))
              {
                *(void *)uint64_t v34 = v36;
                *((void *)v34 + 1) = v37;
                *((void *)v34 + 2) = *(void *)&result[24 * v26 + 16];
                *(void *)uint64_t v27 = 0;
                *((void *)v27 + 1) = 0;
                *((void *)v27 + 2) = 0;
                if (v35 < 2) {
                  goto LABEL_41;
                }
                goto LABEL_32;
              }
              ++v33;
            }
            while (v39 >= v38 && &v22[v33] != v23);
            uint64_t v27 = v34;
          }
LABEL_41:
          *(void *)uint64_t v27 = v22;
          *((void *)v27 + 1) = v23;
          *((void *)v27 + 2) = v32;
        }
      }
    }
  }
  return result;
}

const void **std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>,std::__equal_to &>(const void **a1, const void **a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 3;
  if (a1 + 3 == a2) {
    return a2;
  }
  uint64_t v5 = *a1;
  while (1)
  {
    size_t v6 = (unsigned char *)*(v4 - 2) - v5;
    uint64_t v7 = *v4;
    if (v6 == (unsigned char *)v4[1] - (unsigned char *)*v4 && !memcmp(v5, *v4, v6)) {
      break;
    }
    v4 += 3;
    v3 += 3;
    uint64_t v5 = v7;
    if (v4 == a2) {
      return a2;
    }
  }
  uint64_t v8 = v4 - 3;
  if (v4 - 3 != a2)
  {
    uint64_t v9 = v4 + 3;
    if (v9 == a2)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        while (1)
        {
          size_t v11 = (unsigned char *)v8[1] - (unsigned char *)*v8;
          uint64_t v12 = *v9;
          uint64_t v13 = v9[1];
          if (v11 != v13 - (unsigned char *)*v9 || memcmp(*v8, *v9, v11)) {
            break;
          }
          uint64_t v10 = v8;
          v9 += 3;
          if (v9 == a2) {
            return v10 + 3;
          }
        }
        uint64_t v10 = v8 + 3;
        uint64_t v14 = (void *)v8[3];
        if (v14)
        {
          v8[4] = v14;
          operator delete(v14);
          char *v10 = 0;
          v8[4] = 0;
          v8[5] = 0;
          uint64_t v12 = *v9;
          uint64_t v13 = v9[1];
        }
        v8[3] = v12;
        v8[4] = v13;
        v8[5] = v9[2];
        char *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        v8 += 3;
        v9 += 3;
      }
      while (v9 != a2);
    }
    return v10 + 3;
  }
  return v3;
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator>(uint64_t a1, void *a2, uint64_t *a3, void *a4, int a5, size_t __sz)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(char **)a1;
  if (__sz <= (v11 - *(void *)a1) >> 3)
  {
    uint64_t v19 = (void *)(a1 + 8);
    uint64_t result = *(char **)(a1 + 8);
    uint64_t v20 = (result - v12) >> 3;
    if (v20 >= __sz)
    {
      if (a2 == a4)
      {
        uint64_t v27 = v12;
      }
      else
      {
        uint64_t v27 = v12;
        do
        {
          uint64_t v28 = *v8++;
          *(void *)uint64_t v27 = v28;
          LODWORD(v28) = *((char *)v9 + 1);
          uint64_t v9 = (void *)((char *)v9 + 1);
          if ((int)v28 <= -2)
          {
            do
            {
              unint64_t v29 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              uint64_t v9 = (void *)((char *)v9 + v29);
              v8 += v29;
            }
            while (*(char *)v9 < -1);
          }
          v27 += 8;
        }
        while (v9 != a4);
      }
      int64_t v26 = v27 - v12;
      uint64_t result = v12;
    }
    else
    {
      if (result - v12 < 1)
      {
        uint64_t v22 = a2;
        uint64_t v21 = a3;
      }
      else
      {
        uint64_t v21 = a3;
        uint64_t v22 = a2;
        do
        {
          int v24 = *((char *)v22 + 1);
          uint64_t v22 = (void *)((char *)v22 + 1);
          ++v21;
          if (v24 <= -2)
          {
            do
            {
              unint64_t v25 = (__clz(__rbit64(((*v22 >> 7) & ~*v22 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              uint64_t v22 = (void *)((char *)v22 + v25);
              v21 += v25;
            }
            while (*(char *)v22 < -1);
          }
        }
        while (v20-- > 1);
        if (v22 == a2)
        {
          uint64_t v22 = a2;
        }
        else
        {
          do
          {
            uint64_t v30 = *v8++;
            *(void *)uint64_t v12 = v30;
            LODWORD(v30) = *((char *)v9 + 1);
            uint64_t v9 = (void *)((char *)v9 + 1);
            if ((int)v30 <= -2)
            {
              do
              {
                unint64_t v31 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                uint64_t v9 = (void *)((char *)v9 + v31);
                v8 += v31;
              }
              while (*(char *)v9 < -1);
            }
            v12 += 8;
          }
          while (v9 != v22);
        }
      }
      uint64_t v32 = result;
      while (v22 != a4)
      {
        uint64_t v33 = *v21++;
        *(void *)uint64_t v32 = v33;
        LODWORD(v33) = *((char *)v22 + 1);
        uint64_t v22 = (void *)((char *)v22 + 1);
        if ((int)v33 <= -2)
        {
          do
          {
            unint64_t v34 = (__clz(__rbit64(((*v22 >> 7) & ~*v22 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v22 = (void *)((char *)v22 + v34);
            v21 += v34;
          }
          while (*(char *)v22 < -1);
        }
        v32 += 8;
      }
      int64_t v26 = v32 - result;
    }
  }
  else
  {
    if (v12)
    {
      *(void *)(a1 + 8) = v12;
      operator delete(v12);
      uint64_t v11 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 61) {
      goto LABEL_47;
    }
    unint64_t v13 = v11 >> 2;
    if (v11 >> 2 <= __sz) {
      unint64_t v13 = __sz;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v13 >> 61) {
LABEL_47:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v14 = 8 * v13;
    uint64_t result = (char *)operator new(8 * v13);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v14];
    uint64_t v16 = result;
    if (v9 != a4)
    {
      uint64_t v16 = result;
      do
      {
        uint64_t v17 = *v8++;
        *(void *)uint64_t v16 = v17;
        LODWORD(v17) = *((char *)v9 + 1);
        uint64_t v9 = (void *)((char *)v9 + 1);
        if ((int)v17 <= -2)
        {
          do
          {
            unint64_t v18 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v9 = (void *)((char *)v9 + v18);
            v8 += v18;
          }
          while (*(char *)v9 < -1);
        }
        v16 += 8;
      }
      while (v9 != a4);
    }
    int64_t v26 = v16 - result;
    uint64_t v19 = (void *)(a1 + 8);
  }
  *uint64_t v19 = &result[v26];
  return result;
}

char **std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &>(char ***a1, char ***a2, char ***a3, char ***a4, char ***a5)
{
  size_t v6 = *a1;
  uint64_t v7 = *a2;
  if (*a1 == *a2) {
    return v6;
  }
  uint64_t v10 = *a3;
  if (*a3 != *a4)
  {
    while (1)
    {
      unint64_t v13 = (uint64_t *)*v10;
      uint64_t v14 = (uint64_t *)v10[1];
      uint64_t v15 = *v6;
      uint64_t v16 = v6[1];
      if (*v10 != (char *)v14) {
        break;
      }
LABEL_12:
      if (v15 == v16)
      {
LABEL_21:
        unint64_t v25 = a3;
        goto LABEL_24;
      }
      uint64_t v21 = v15 + 8;
      while (v13 != v14)
      {
        uint64_t v22 = *v13;
        uint64_t v23 = *((void *)v21 - 1);
        if (*v13 < v23) {
          break;
        }
        ++v13;
        BOOL v24 = v23 < v22 || v21 == v16;
        v21 += 8;
        if (v24) {
          goto LABEL_21;
        }
      }
      *a3 = v10 + 3;
      size_t v6 = *a1;
      uint64_t v7 = *a2;
      if (*a1 == *a2) {
        return v6;
      }
LABEL_27:
      uint64_t v10 = *a3;
      if (*a3 == *a4) {
        goto LABEL_28;
      }
    }
    uint64_t v17 = 0;
    while (&v15[v17 * 8] != v16)
    {
      uint64_t v18 = *(void *)&v15[v17 * 8];
      uint64_t v19 = v13[v17];
      if (v18 < v19) {
        break;
      }
      ++v17;
      if (v19 < v18 || &v13[v17] == v14) {
        goto LABEL_12;
      }
    }
    unint64_t v25 = a5;
    if (*a5 != v6)
    {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(*a5, v15, v16, (v16 - v15) >> 3);
      size_t v6 = *a1;
      unint64_t v25 = a5;
    }
LABEL_24:
    *a1 = v6 + 3;
    *v25 += 3;
    size_t v6 = *a1;
    uint64_t v7 = *a2;
    if (*a1 == *a2) {
      return v6;
    }
    goto LABEL_27;
  }
LABEL_28:
  int64_t v26 = *a5;
  if (v6 == v7) {
    return v6;
  }
  uint64_t v27 = 0;
  do
  {
    if (v6 != v26) {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&v26[v27], v6[v27], v6[v27 + 1], (v6[v27 + 1] - v6[v27]) >> 3);
    }
    v27 += 3;
  }
  while (&v6[v27] != v7);
  return v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  v295 = (int *)result;
LABEL_2:
  v285 = a2 - 1;
  int v281 = a2 - 3;
  char v282 = a2 - 2;
  uint64_t v10 = v295;
  v290 = a2;
  while (1)
  {
    v295 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v141 = *v295;
          uint64_t v142 = *a3;
          uint64_t v143 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v144 = *(void *)(*(void *)(*((void *)v143 + 6) + 56) + 8 * *(a2 - 1) + 8);
          if (*(_DWORD *)(v144 + 60) == 19) {
            long long v145 = *(uint64_t **)(v144 + 48);
          }
          else {
            long long v145 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          }
          uint64_t v257 = operations_research::sat::PresolveContext::MinOf(v143, (const char *)*((unsigned int *)v145 + 4));
          v258 = *(operations_research::sat::PresolveContext **)(v142 + 16);
          uint64_t v259 = *(void *)(*(void *)(*((void *)v258 + 6) + 56) + 8 * v141 + 8);
          if (*(_DWORD *)(v259 + 60) == 19)
          {
            uint64_t result = operations_research::sat::PresolveContext::MinOf(v258, (const char *)*(unsigned int *)(*(void *)(v259 + 48) + 16));
            if (v257 >= result) {
              return result;
            }
          }
          else
          {
            uint64_t result = operations_research::sat::PresolveContext::MinOf(v258, (const char *)dword_26AEE1BD8);
            if (v257 >= result) {
              return result;
            }
          }
          int v280 = *v295;
          int *v295 = *(a2 - 1);
          *(a2 - 1) = v280;
          break;
        case 3:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v295, v295 + 1, v285, a3);
        case 4:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v295, v295 + 1, v295 + 2, v285, a3);
        case 5:
          return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,0>(v295, v295 + 1, v295 + 2, v295 + 3, v285, a3);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 95)
    {
      uint64_t v146 = v295 + 1;
      BOOL v148 = v295 == a2 || v146 == a2;
      if (a5)
      {
        if (v148) {
          return result;
        }
        uint64_t v149 = 0;
        long long v150 = v295;
        while (2)
        {
          double v152 = v146;
          uint64_t v153 = *a3;
          int64_t v154 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v155 = *(void *)(*(void *)(*((void *)v154 + 6) + 56) + 8 * v150[1] + 8);
          uint64_t v156 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v155 + 60) == 19) {
            uint64_t v156 = *(uint64_t **)(v155 + 48);
          }
          uint64_t v157 = *v150;
          uint64_t v158 = operations_research::sat::PresolveContext::MinOf(v154, (const char *)*((unsigned int *)v156 + 4));
          uint64_t v159 = *(operations_research::sat::PresolveContext **)(v153 + 16);
          uint64_t v160 = *(void *)(*(void *)(*((void *)v159 + 6) + 56) + 8 * v157 + 8);
          if (*(_DWORD *)(v160 + 60) == 19)
          {
            uint64_t result = operations_research::sat::PresolveContext::MinOf(v159, (const char *)*(unsigned int *)(*(void *)(v160 + 48) + 16));
            if (v158 < result) {
              goto LABEL_132;
            }
          }
          else
          {
            uint64_t result = operations_research::sat::PresolveContext::MinOf(v159, (const char *)dword_26AEE1BD8);
            if (v158 < result)
            {
LABEL_132:
              int v161 = *v152;
              uint64_t v162 = v149;
              do
              {
                *(int *)((char *)v295 + v162 + 4) = *(int *)((char *)v295 + v162);
                if (!v162)
                {
                  uint64_t v151 = v295;
                  goto LABEL_123;
                }
                uint64_t v163 = *a3;
                unint64_t v164 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                uint64_t v165 = *(void *)(*(void *)(*((void *)v164 + 6) + 56) + 8 * v161 + 8);
                unint64_t v166 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                if (*(_DWORD *)(v165 + 60) == 19) {
                  unint64_t v166 = *(uint64_t **)(v165 + 48);
                }
                uint64_t v167 = *(int *)((char *)v295 + v162 - 4);
                uint64_t v168 = operations_research::sat::PresolveContext::MinOf(v164, (const char *)*((unsigned int *)v166 + 4));
                uint64_t v169 = *(operations_research::sat::PresolveContext **)(v163 + 16);
                uint64_t v170 = *(void *)(*(void *)(*((void *)v169 + 6) + 56) + 8 * v167 + 8);
                unint64_t v171 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                if (*(_DWORD *)(v170 + 60) == 19) {
                  unint64_t v171 = *(uint64_t **)(v170 + 48);
                }
                uint64_t result = operations_research::sat::PresolveContext::MinOf(v169, (const char *)*((unsigned int *)v171 + 4));
                v162 -= 4;
              }
              while (v168 < result);
              uint64_t v151 = (int *)((char *)v295 + v162 + 4);
LABEL_123:
              *uint64_t v151 = v161;
              a2 = v290;
            }
          }
          uint64_t v146 = v152 + 1;
          v149 += 4;
          long long v150 = v152;
          if (v152 + 1 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v148) {
        return result;
      }
      while (2)
      {
        uint64_t v260 = v146;
        uint64_t v261 = *a3;
        unint64_t v262 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
        uint64_t v263 = *(void *)(*(void *)(*((void *)v262 + 6) + 56) + 8 * v295[1] + 8);
        int v264 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v263 + 60) == 19) {
          int v264 = *(uint64_t **)(v263 + 48);
        }
        uint64_t v265 = *v295;
        uint64_t v266 = operations_research::sat::PresolveContext::MinOf(v262, (const char *)*((unsigned int *)v264 + 4));
        uint64_t v267 = *(operations_research::sat::PresolveContext **)(v261 + 16);
        uint64_t v268 = *(void *)(*(void *)(*((void *)v267 + 6) + 56) + 8 * v265 + 8);
        if (*(_DWORD *)(v268 + 60) == 19)
        {
          uint64_t result = operations_research::sat::PresolveContext::MinOf(v267, (const char *)*(unsigned int *)(*(void *)(v268 + 48) + 16));
          if (v266 < result) {
            goto LABEL_219;
          }
        }
        else
        {
          uint64_t result = operations_research::sat::PresolveContext::MinOf(v267, (const char *)dword_26AEE1BD8);
          if (v266 < result)
          {
LABEL_219:
            int v269 = *v260;
            v270 = v260;
            do
            {
              int *v270 = *(v270 - 1);
              uint64_t v271 = *a3;
              unint64_t v272 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              uint64_t v273 = *(void *)(*(void *)(*((void *)v272 + 6) + 56) + 8 * v269 + 8);
              v274 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v273 + 60) == 19) {
                v274 = *(uint64_t **)(v273 + 48);
              }
              uint64_t v275 = *(v270 - 2);
              uint64_t v276 = operations_research::sat::PresolveContext::MinOf(v272, (const char *)*((unsigned int *)v274 + 4));
              long long v277 = *(operations_research::sat::PresolveContext **)(v271 + 16);
              uint64_t v278 = *(void *)(*(void *)(*((void *)v277 + 6) + 56) + 8 * v275 + 8);
              uint64_t v279 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v278 + 60) == 19) {
                uint64_t v279 = *(uint64_t **)(v278 + 48);
              }
              uint64_t result = operations_research::sat::PresolveContext::MinOf(v277, (const char *)*((unsigned int *)v279 + 4));
              --v270;
            }
            while (v276 < result);
            int *v270 = v269;
            a2 = v290;
          }
        }
        uint64_t v146 = v260 + 1;
        v295 = v260;
        if (v260 + 1 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a4) {
      break;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = &v295[(unint64_t)v12 >> 1];
    if ((unint64_t)v11 < 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v14, v295, v285, a3);
      --a4;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v295, v14, v285, a3);
      uint64_t v15 = v13;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v295 + 1, &v295[v15 - 1], v282, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v295 + 2, &v295[v15 + 1], v281, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(&v295[v15 - 1], v14, &v295[v15 + 1], a3);
      int v16 = *v295;
      int *v295 = v295[v15];
      v295[v15] = v16;
      --a4;
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v17 = *a3;
    uint64_t v18 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
    uint64_t v19 = *(void *)(*(void *)(*((void *)v18 + 6) + 56) + 8 * *(v295 - 1) + 8);
    uint64_t v20 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v19 + 60) == 19) {
      uint64_t v20 = *(uint64_t **)(v19 + 48);
    }
    uint64_t v21 = *v295;
    uint64_t v22 = operations_research::sat::PresolveContext::MinOf(v18, (const char *)*((unsigned int *)v20 + 4));
    uint64_t v23 = *(operations_research::sat::PresolveContext **)(v17 + 16);
    uint64_t v24 = *(void *)(*(void *)(*((void *)v23 + 6) + 56) + 8 * v21 + 8);
    unint64_t v25 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v24 + 60) == 19) {
      unint64_t v25 = *(uint64_t **)(v24 + 48);
    }
    if (v22 >= operations_research::sat::PresolveContext::MinOf(v23, (const char *)*((unsigned int *)v25 + 4)))
    {
      int v80 = *v295;
      uint64_t v81 = *a3;
      uint64_t v82 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
      uint64_t v83 = *(void *)(*(void *)(*((void *)v82 + 6) + 56) + 8 * *v295 + 8);
      uint64_t v84 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      if (*(_DWORD *)(v83 + 60) == 19) {
        uint64_t v84 = *(uint64_t **)(v83 + 48);
      }
      uint64_t v85 = *v285;
      uint64_t v86 = operations_research::sat::PresolveContext::MinOf(v82, (const char *)*((unsigned int *)v84 + 4));
      uint64_t v87 = *(operations_research::sat::PresolveContext **)(v81 + 16);
      uint64_t v88 = *(void *)(*(void *)(*((void *)v87 + 6) + 56) + 8 * v85 + 8);
      uint64_t v89 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      if (*(_DWORD *)(v88 + 60) == 19) {
        uint64_t v89 = *(uint64_t **)(v88 + 48);
      }
      uint64_t result = operations_research::sat::PresolveContext::MinOf(v87, (const char *)*((unsigned int *)v89 + 4));
      if (v86 >= result)
      {
        int v99 = v295 + 1;
        do
        {
          uint64_t v10 = v99;
          if (v99 >= v290) {
            break;
          }
          uint64_t v100 = *a3;
          int v101 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v102 = *(void *)(*(void *)(*((void *)v101 + 6) + 56) + 8 * v80 + 8);
          uint64_t v103 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v102 + 60) == 19) {
            uint64_t v103 = *(uint64_t **)(v102 + 48);
          }
          uint64_t v104 = *v10;
          uint64_t v105 = operations_research::sat::PresolveContext::MinOf(v101, (const char *)*((unsigned int *)v103 + 4));
          int v106 = *(operations_research::sat::PresolveContext **)(v100 + 16);
          uint64_t v107 = *(void *)(*(void *)(*((void *)v106 + 6) + 56) + 8 * v104 + 8);
          uint64_t v108 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v107 + 60) == 19) {
            uint64_t v108 = *(uint64_t **)(v107 + 48);
          }
          uint64_t result = operations_research::sat::PresolveContext::MinOf(v106, (const char *)*((unsigned int *)v108 + 4));
          int v99 = v10 + 1;
        }
        while (v105 >= result);
      }
      else
      {
        uint64_t v10 = v295;
        do
        {
          uint64_t v90 = *a3;
          int v91 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v92 = *(void *)(*(void *)(*((void *)v91 + 6) + 56) + 8 * v80 + 8);
          unint64_t v93 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v92 + 60) == 19) {
            unint64_t v93 = *(uint64_t **)(v92 + 48);
          }
          uint64_t v94 = v10[1];
          ++v10;
          uint64_t v95 = operations_research::sat::PresolveContext::MinOf(v91, (const char *)*((unsigned int *)v93 + 4));
          uint64_t v96 = *(operations_research::sat::PresolveContext **)(v90 + 16);
          uint64_t v97 = *(void *)(*(void *)(*((void *)v96 + 6) + 56) + 8 * v94 + 8);
          uint64_t v98 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v97 + 60) == 19) {
            uint64_t v98 = *(uint64_t **)(v97 + 48);
          }
          uint64_t result = operations_research::sat::PresolveContext::MinOf(v96, (const char *)*((unsigned int *)v98 + 4));
        }
        while (v95 >= result);
      }
      uint64_t v109 = v290;
      if (v10 < v290)
      {
        uint64_t v109 = v290;
        do
        {
          uint64_t v110 = *a3;
          uint64_t v111 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v112 = *(void *)(*(void *)(*((void *)v111 + 6) + 56) + 8 * v80 + 8);
          uint64_t v113 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v112 + 60) == 19) {
            uint64_t v113 = *(uint64_t **)(v112 + 48);
          }
          uint64_t v114 = *--v109;
          uint64_t v115 = operations_research::sat::PresolveContext::MinOf(v111, (const char *)*((unsigned int *)v113 + 4));
          uint64_t v116 = *(operations_research::sat::PresolveContext **)(v110 + 16);
          uint64_t v117 = *(void *)(*(void *)(*((void *)v116 + 6) + 56) + 8 * v114 + 8);
          unsigned int v118 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v117 + 60) == 19) {
            unsigned int v118 = *(uint64_t **)(v117 + 48);
          }
          uint64_t result = operations_research::sat::PresolveContext::MinOf(v116, (const char *)*((unsigned int *)v118 + 4));
        }
        while (v115 < result);
      }
      while (v10 < v109)
      {
        int v119 = *v10;
        int *v10 = *v109;
        *uint64_t v109 = v119;
        do
        {
          uint64_t v121 = v10[1];
          ++v10;
          uint64_t v120 = v121;
          uint64_t v122 = *a3;
          unint64_t v123 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v124 = *(void *)(*(void *)(*((void *)v123 + 6) + 56) + 8 * v80 + 8);
          int v125 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v124 + 60) == 19) {
            int v125 = *(uint64_t **)(v124 + 48);
          }
          uint64_t v126 = operations_research::sat::PresolveContext::MinOf(v123, (const char *)*((unsigned int *)v125 + 4));
          uint64_t v127 = *(operations_research::sat::PresolveContext **)(v122 + 16);
          uint64_t v128 = *(void *)(*(void *)(*((void *)v127 + 6) + 56) + 8 * v120 + 8);
          unsigned int v129 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v128 + 60) == 19) {
            unsigned int v129 = *(uint64_t **)(v128 + 48);
          }
        }
        while (v126 >= operations_research::sat::PresolveContext::MinOf(v127, (const char *)*((unsigned int *)v129 + 4)));
        do
        {
          uint64_t v131 = *--v109;
          uint64_t v130 = v131;
          uint64_t v132 = *a3;
          uint64_t v133 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v134 = *(void *)(*(void *)(*((void *)v133 + 6) + 56) + 8 * v80 + 8);
          unint64_t v135 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v134 + 60) == 19) {
            unint64_t v135 = *(uint64_t **)(v134 + 48);
          }
          uint64_t v136 = operations_research::sat::PresolveContext::MinOf(v133, (const char *)*((unsigned int *)v135 + 4));
          unint64_t v137 = *(operations_research::sat::PresolveContext **)(v132 + 16);
          uint64_t v138 = *(void *)(*(void *)(*((void *)v137 + 6) + 56) + 8 * v130 + 8);
          unint64_t v139 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v138 + 60) == 19) {
            unint64_t v139 = *(uint64_t **)(v138 + 48);
          }
          uint64_t result = operations_research::sat::PresolveContext::MinOf(v137, (const char *)*((unsigned int *)v139 + 4));
        }
        while (v136 < result);
      }
      unint64_t v140 = v10 - 1;
      BOOL v5 = v10 - 1 >= v295;
      BOOL v6 = v10 - 1 == v295;
      if (v10 - 1 != v295) {
        int *v295 = *v140;
      }
      a5 = 0;
      *unint64_t v140 = v80;
      a2 = v290;
    }
    else
    {
LABEL_16:
      uint64_t v26 = 0;
      int v27 = *v295;
      do
      {
        uint64_t v28 = *a3;
        unint64_t v29 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
        uint64_t v30 = *(void *)(*(void *)(*((void *)v29 + 6) + 56) + 8 * v295[v26 + 1] + 8);
        unint64_t v31 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v30 + 60) == 19) {
          unint64_t v31 = *(uint64_t **)(v30 + 48);
        }
        uint64_t v32 = operations_research::sat::PresolveContext::MinOf(v29, (const char *)*((unsigned int *)v31 + 4));
        uint64_t v33 = *(operations_research::sat::PresolveContext **)(v28 + 16);
        uint64_t v34 = *(void *)(*(void *)(*((void *)v33 + 6) + 56) + 8 * v27 + 8);
        unint64_t v35 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v34 + 60) == 19) {
          unint64_t v35 = *(uint64_t **)(v34 + 48);
        }
        ++v26;
      }
      while (v32 < operations_research::sat::PresolveContext::MinOf(v33, (const char *)*((unsigned int *)v35 + 4)));
      uint64_t v292 = a4;
      uint64_t v36 = &v295[v26];
      uint64_t v37 = v290;
      if (v26 == 1)
      {
        uint64_t v37 = v290;
        do
        {
          if (v36 >= v37) {
            break;
          }
          uint64_t v47 = *--v37;
          uint64_t v48 = *a3;
          uint64_t v49 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v50 = *(void *)(*(void *)(*((void *)v49 + 6) + 56) + 8 * v47 + 8);
          long long v51 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v50 + 60) == 19) {
            long long v51 = *(uint64_t **)(v50 + 48);
          }
          uint64_t v52 = operations_research::sat::PresolveContext::MinOf(v49, (const char *)*((unsigned int *)v51 + 4));
          uint64_t v53 = *(operations_research::sat::PresolveContext **)(v48 + 16);
          uint64_t v54 = *(void *)(*(void *)(*((void *)v53 + 6) + 56) + 8 * v27 + 8);
          uint64_t v55 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v54 + 60) == 19) {
            uint64_t v55 = *(uint64_t **)(v54 + 48);
          }
        }
        while (v52 >= operations_research::sat::PresolveContext::MinOf(v53, (const char *)*((unsigned int *)v55 + 4)));
      }
      else
      {
        do
        {
          uint64_t v38 = *--v37;
          uint64_t v39 = *a3;
          uint64_t v40 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v41 = *(void *)(*(void *)(*((void *)v40 + 6) + 56) + 8 * v38 + 8);
          uint64_t v42 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v41 + 60) == 19) {
            uint64_t v42 = *(uint64_t **)(v41 + 48);
          }
          uint64_t v43 = operations_research::sat::PresolveContext::MinOf(v40, (const char *)*((unsigned int *)v42 + 4));
          uint64_t v44 = *(operations_research::sat::PresolveContext **)(v39 + 16);
          uint64_t v45 = *(void *)(*(void *)(*((void *)v44 + 6) + 56) + 8 * v27 + 8);
          BOOL v46 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v45 + 60) == 19) {
            BOOL v46 = *(uint64_t **)(v45 + 48);
          }
        }
        while (v43 >= operations_research::sat::PresolveContext::MinOf(v44, (const char *)*((unsigned int *)v46 + 4)));
      }
      if (v36 >= v37)
      {
        uint64_t v77 = v36 - 1;
        uint64_t v78 = v295;
        if (v36 - 1 != v295) {
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v56 = v36;
        uint64_t v57 = v37;
        do
        {
          int v58 = *v56;
          *uint64_t v56 = *v57;
          *uint64_t v57 = v58;
          do
          {
            uint64_t v59 = v56[1];
            ++v56;
            uint64_t v60 = *a3;
            unint64_t v61 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
            uint64_t v62 = *(void *)(*(void *)(*((void *)v61 + 6) + 56) + 8 * v59 + 8);
            uint64_t v63 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v62 + 60) == 19) {
              uint64_t v63 = *(uint64_t **)(v62 + 48);
            }
            uint64_t v64 = operations_research::sat::PresolveContext::MinOf(v61, (const char *)*((unsigned int *)v63 + 4));
            int v65 = *(operations_research::sat::PresolveContext **)(v60 + 16);
            uint64_t v66 = *(void *)(*(void *)(*((void *)v65 + 6) + 56) + 8 * v27 + 8);
            uint64_t v67 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v66 + 60) == 19) {
              uint64_t v67 = *(uint64_t **)(v66 + 48);
            }
          }
          while (v64 < operations_research::sat::PresolveContext::MinOf(v65, (const char *)*((unsigned int *)v67 + 4)));
          do
          {
            uint64_t v68 = *--v57;
            uint64_t v69 = *a3;
            uint64_t v70 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
            uint64_t v71 = *(void *)(*(void *)(*((void *)v70 + 6) + 56) + 8 * v68 + 8);
            uint64_t v72 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v71 + 60) == 19) {
              uint64_t v72 = *(uint64_t **)(v71 + 48);
            }
            uint64_t v73 = operations_research::sat::PresolveContext::MinOf(v70, (const char *)*((unsigned int *)v72 + 4));
            uint64_t v74 = *(operations_research::sat::PresolveContext **)(v69 + 16);
            uint64_t v75 = *(void *)(*(void *)(*((void *)v74 + 6) + 56) + 8 * v27 + 8);
            uint64_t v76 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v75 + 60) == 19) {
              uint64_t v76 = *(uint64_t **)(v75 + 48);
            }
          }
          while (v73 >= operations_research::sat::PresolveContext::MinOf(v74, (const char *)*((unsigned int *)v76 + 4)));
        }
        while (v56 < v57);
        uint64_t v77 = v56 - 1;
        uint64_t v78 = v295;
        if (v56 - 1 != v295) {
LABEL_52:
        }
          *uint64_t v78 = *v77;
      }
      *uint64_t v77 = v27;
      BOOL v5 = v36 >= v37;
      a2 = v290;
      a4 = v292;
      if (!v5) {
        goto LABEL_57;
      }
      BOOL v79 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v295, v77, a3);
      uint64_t v10 = v77 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v77 + 1, v290, a3);
      if (result)
      {
        a2 = v77;
        if (v79) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v79)
      {
LABEL_57:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,false>(v295, v77, a3, v292, a5 & 1);
        a5 = 0;
        uint64_t v10 = v77 + 1;
      }
    }
  }
  if (v295 != a2)
  {
    unint64_t v283 = v11;
    uint64_t v284 = v12;
    int64_t v172 = (unint64_t)(v12 - 2) >> 1;
    int64_t v173 = v172;
    do
    {
      int64_t v174 = v173;
      if (v172 >= v173)
      {
        uint64_t v175 = (2 * v173) | 1;
        unint64_t v176 = &v295[v175];
        uint64_t v177 = 2 * v173 + 2;
        int64_t v288 = v173;
        if (v177 < v12)
        {
          uint64_t v178 = *a3;
          unint64_t v179 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v180 = *(void *)(*(void *)(*((void *)v179 + 6) + 56) + 8 * *v176 + 8);
          long long v181 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          uint64_t v182 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v180 + 60) == 19) {
            uint64_t v182 = *(uint64_t **)(v180 + 48);
          }
          uint64_t v183 = v176[1];
          ++v176;
          uint64_t v293 = operations_research::sat::PresolveContext::MinOf(v179, (const char *)*((unsigned int *)v182 + 4));
          uint64_t v184 = *(operations_research::sat::PresolveContext **)(v178 + 16);
          uint64_t v185 = *(void *)(*(void *)(*((void *)v184 + 6) + 56) + 8 * v183 + 8);
          if (*(_DWORD *)(v185 + 60) == 19) {
            long long v181 = *(uint64_t **)(v185 + 48);
          }
          a2 = v290;
          if (v293 < operations_research::sat::PresolveContext::MinOf(v184, (const char *)*((unsigned int *)v181 + 4))) {
            uint64_t v175 = v177;
          }
          else {
            unint64_t v176 = &v295[v175];
          }
          int64_t v174 = v288;
        }
        uint64_t v186 = &v295[v174];
        uint64_t v187 = *v186;
        uint64_t v188 = *a3;
        BOOL v189 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
        uint64_t v190 = *(void *)(*(void *)(*((void *)v189 + 6) + 56) + 8 * *v176 + 8);
        uint64_t v191 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v190 + 60) == 19) {
          uint64_t v191 = *(uint64_t **)(v190 + 48);
        }
        uint64_t v192 = operations_research::sat::PresolveContext::MinOf(v189, (const char *)*((unsigned int *)v191 + 4));
        long long v193 = *(operations_research::sat::PresolveContext **)(v188 + 16);
        uint64_t v194 = *(void *)(*(void *)(*((void *)v193 + 6) + 56) + 8 * v187 + 8);
        uint64_t v195 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v194 + 60) == 19) {
          uint64_t v195 = *(uint64_t **)(v194 + 48);
        }
        uint64_t result = operations_research::sat::PresolveContext::MinOf(v193, (const char *)*((unsigned int *)v195 + 4));
        int64_t v174 = v288;
        if (v192 >= result)
        {
          int v286 = *v186;
          do
          {
            std::vector<int>::const_iterator v196 = v176;
            *uint64_t v186 = *v176;
            if (v172 < v175) {
              break;
            }
            uint64_t v197 = (2 * v175) | 1;
            unint64_t v176 = &v295[v197];
            if (2 * v175 + 2 < v12)
            {
              uint64_t v198 = *a3;
              uint64_t v199 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              uint64_t v200 = *(void *)(*(void *)(*((void *)v199 + 6) + 56) + 8 * *v176 + 8);
              std::vector<int>::const_iterator v201 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v200 + 60) == 19) {
                std::vector<int>::const_iterator v201 = *(uint64_t **)(v200 + 48);
              }
              uint64_t v202 = v176[1];
              ++v176;
              uint64_t v203 = operations_research::sat::PresolveContext::MinOf(v199, (const char *)*((unsigned int *)v201 + 4));
              std::vector<int>::pointer v204 = *(operations_research::sat::PresolveContext **)(v198 + 16);
              uint64_t v205 = *(void *)(*(void *)(*((void *)v204 + 6) + 56) + 8 * v202 + 8);
              uint64_t v206 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v205 + 60) == 19) {
                uint64_t v206 = *(uint64_t **)(v205 + 48);
              }
              if (v203 < operations_research::sat::PresolveContext::MinOf(v204, (const char *)*((unsigned int *)v206 + 4)))
              {
                uint64_t v175 = 2 * v175 + 2;
              }
              else
              {
                unint64_t v176 = &v295[v197];
                uint64_t v175 = (2 * v175) | 1;
              }
              uint64_t v12 = v284;
            }
            else
            {
              uint64_t v175 = (2 * v175) | 1;
            }
            uint64_t v207 = *a3;
            std::vector<int>::iterator v208 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
            uint64_t v209 = *(void *)(*(void *)(*((void *)v208 + 6) + 56) + 8 * *v176 + 8);
            v210 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v209 + 60) == 19) {
              v210 = *(uint64_t **)(v209 + 48);
            }
            uint64_t v211 = operations_research::sat::PresolveContext::MinOf(v208, (const char *)*((unsigned int *)v210 + 4));
            int v212 = *(operations_research::sat::PresolveContext **)(v207 + 16);
            uint64_t v213 = *(void *)(*(void *)(*((void *)v212 + 6) + 56) + 8 * v286 + 8);
            uint64_t v214 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v213 + 60) == 19) {
              uint64_t v214 = *(uint64_t **)(v213 + 48);
            }
            uint64_t result = operations_research::sat::PresolveContext::MinOf(v212, (const char *)*((unsigned int *)v214 + 4));
            uint64_t v186 = v196;
          }
          while (v211 >= result);
          int64_t v174 = v288;
          *std::vector<int>::const_iterator v196 = v286;
          a2 = v290;
        }
      }
      int64_t v173 = v174 - 1;
    }
    while (v174);
    uint64_t v215 = v283 >> 2;
    do
    {
      uint64_t v218 = 0;
      unint64_t v219 = v295;
      int v289 = *v295;
      int64_t v220 = (unint64_t)(v215 - 2) >> 1;
      v291 = a2;
      do
      {
        long long v221 = &v219[v218 + 1];
        uint64_t v222 = (2 * v218) | 1;
        uint64_t v223 = 2 * v218 + 2;
        if (v223 < v215)
        {
          uint64_t v224 = *a3;
          uint64_t v225 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v226 = *(void *)(*(void *)(*((void *)v225 + 6) + 56) + 8 * *v221 + 8);
          uint64_t v227 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v226 + 60) == 19) {
            uint64_t v227 = *(uint64_t **)(v226 + 48);
          }
          uint64_t v228 = v221[1];
          uint64_t v229 = operations_research::sat::PresolveContext::MinOf(v225, (const char *)*((unsigned int *)v227 + 4));
          long long v230 = *(operations_research::sat::PresolveContext **)(v224 + 16);
          uint64_t v231 = *(void *)(*(void *)(*((void *)v230 + 6) + 56) + 8 * v228 + 8);
          uint64_t v232 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v231 + 60) == 19) {
            uint64_t v232 = *(uint64_t **)(v231 + 48);
          }
          uint64_t result = operations_research::sat::PresolveContext::MinOf(v230, (const char *)*((unsigned int *)v232 + 4));
          if (v229 < result)
          {
            ++v221;
            uint64_t v222 = v223;
          }
          int64_t v220 = (unint64_t)(v215 - 2) >> 1;
        }
        *unint64_t v219 = *v221;
        unint64_t v219 = v221;
        uint64_t v218 = v222;
      }
      while (v222 <= v220);
      uint64_t v233 = v291 - 1;
      if (v221 == v291 - 1)
      {
        char v216 = v291 - 1;
        int *v221 = v289;
      }
      else
      {
        int *v221 = *v233;
        char v216 = v291 - 1;
        int *v233 = v289;
        uint64_t v234 = (char *)v221 - (char *)v295 + 4;
        if (v234 >= 5)
        {
          unint64_t v235 = (((unint64_t)v234 >> 2) - 2) >> 1;
          uint64_t v236 = &v295[v235];
          uint64_t v237 = *a3;
          uint64_t v238 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          uint64_t v239 = *(void *)(*(void *)(*((void *)v238 + 6) + 56) + 8 * *v236 + 8);
          uint64_t v240 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v239 + 60) == 19) {
            uint64_t v240 = *(uint64_t **)(v239 + 48);
          }
          uint64_t v241 = *v221;
          uint64_t v242 = operations_research::sat::PresolveContext::MinOf(v238, (const char *)*((unsigned int *)v240 + 4));
          uint64_t v243 = *(operations_research::sat::PresolveContext **)(v237 + 16);
          uint64_t v244 = *(void *)(*(void *)(*((void *)v243 + 6) + 56) + 8 * v241 + 8);
          unint64_t v245 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v244 + 60) == 19) {
            unint64_t v245 = *(uint64_t **)(v244 + 48);
          }
          uint64_t result = operations_research::sat::PresolveContext::MinOf(v243, (const char *)*((unsigned int *)v245 + 4));
          if (v242 < result)
          {
            uint64_t v294 = v215;
            int v246 = *v221;
            uint64_t v247 = *v221;
            do
            {
              int v248 = v236;
              int *v221 = *v236;
              if (!v235) {
                break;
              }
              unint64_t v235 = (v235 - 1) >> 1;
              uint64_t v236 = &v295[v235];
              uint64_t v249 = *a3;
              unint64_t v250 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              uint64_t v251 = *(void *)(*(void *)(*((void *)v250 + 6) + 56) + 8 * *v236 + 8);
              long long v252 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v251 + 60) == 19) {
                long long v252 = *(uint64_t **)(v251 + 48);
              }
              uint64_t v253 = operations_research::sat::PresolveContext::MinOf(v250, (const char *)*((unsigned int *)v252 + 4));
              std::vector<int> v254 = *(operations_research::sat::PresolveContext **)(v249 + 16);
              uint64_t v255 = *(void *)(*(void *)(*((void *)v254 + 6) + 56) + 8 * v247 + 8);
              long long v256 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v255 + 60) == 19) {
                long long v256 = *(uint64_t **)(v255 + 48);
              }
              uint64_t result = operations_research::sat::PresolveContext::MinOf(v254, (const char *)*((unsigned int *)v256 + 4));
              long long v221 = v248;
            }
            while (v253 < result);
            *int v248 = v246;
            uint64_t v215 = v294;
          }
        }
      }
      BOOL v217 = v215-- <= 2;
      a2 = v216;
    }
    while (!v217);
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,0>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a4;
  uint64_t v13 = *a6;
  uint64_t v14 = *(operations_research::sat::PresolveContext **)(*a6 + 16);
  uint64_t v15 = *(void *)(*(void *)(*((void *)v14 + 6) + 56) + 8 * *a5 + 8);
  if (*(_DWORD *)(v15 + 60) == 19) {
    int v16 = *(uint64_t **)(v15 + 48);
  }
  else {
    int v16 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v17 = operations_research::sat::PresolveContext::MinOf(v14, (const char *)*((unsigned int *)v16 + 4));
  uint64_t v18 = *(operations_research::sat::PresolveContext **)(v13 + 16);
  uint64_t v19 = *(void *)(*(void *)(*((void *)v18 + 6) + 56) + 8 * v12 + 8);
  if (*(_DWORD *)(v19 + 60) == 19)
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v18, (const char *)*(unsigned int *)(*(void *)(v19 + 48) + 16));
    if (v17 >= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v18, (const char *)dword_26AEE1BD8);
    if (v17 >= result) {
      return result;
    }
  }
  int v21 = *a4;
  *a4 = *a5;
  *a5 = v21;
  uint64_t v22 = *a3;
  uint64_t v23 = *a6;
  uint64_t v24 = *(operations_research::sat::PresolveContext **)(*a6 + 16);
  uint64_t v25 = *(void *)(*(void *)(*((void *)v24 + 6) + 56) + 8 * *a4 + 8);
  if (*(_DWORD *)(v25 + 60) == 19) {
    uint64_t v26 = *(uint64_t **)(v25 + 48);
  }
  else {
    uint64_t v26 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v27 = operations_research::sat::PresolveContext::MinOf(v24, (const char *)*((unsigned int *)v26 + 4));
  uint64_t v28 = *(operations_research::sat::PresolveContext **)(v23 + 16);
  uint64_t v29 = *(void *)(*(void *)(*((void *)v28 + 6) + 56) + 8 * v22 + 8);
  if (*(_DWORD *)(v29 + 60) == 19)
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v28, (const char *)*(unsigned int *)(*(void *)(v29 + 48) + 16));
    if (v27 >= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v28, (const char *)dword_26AEE1BD8);
    if (v27 >= result) {
      return result;
    }
  }
  int v30 = *a3;
  *a3 = *a4;
  *a4 = v30;
  uint64_t v31 = *a2;
  uint64_t v32 = *a6;
  uint64_t v33 = *(operations_research::sat::PresolveContext **)(*a6 + 16);
  uint64_t v34 = *(void *)(*(void *)(*((void *)v33 + 6) + 56) + 8 * *a3 + 8);
  if (*(_DWORD *)(v34 + 60) == 19) {
    unint64_t v35 = *(uint64_t **)(v34 + 48);
  }
  else {
    unint64_t v35 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v36 = operations_research::sat::PresolveContext::MinOf(v33, (const char *)*((unsigned int *)v35 + 4));
  uint64_t v37 = *(operations_research::sat::PresolveContext **)(v32 + 16);
  uint64_t v38 = *(void *)(*(void *)(*((void *)v37 + 6) + 56) + 8 * v31 + 8);
  if (*(_DWORD *)(v38 + 60) == 19)
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v37, (const char *)*(unsigned int *)(*(void *)(v38 + 48) + 16));
    if (v36 >= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v37, (const char *)dword_26AEE1BD8);
    if (v36 >= result) {
      return result;
    }
  }
  int v39 = *a2;
  *a2 = *a3;
  *a3 = v39;
  uint64_t v40 = *a1;
  uint64_t v41 = *a6;
  uint64_t v42 = *(operations_research::sat::PresolveContext **)(*a6 + 16);
  uint64_t v43 = *(void *)(*(void *)(*((void *)v42 + 6) + 56) + 8 * *a2 + 8);
  if (*(_DWORD *)(v43 + 60) == 19) {
    uint64_t v44 = *(uint64_t **)(v43 + 48);
  }
  else {
    uint64_t v44 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v45 = operations_research::sat::PresolveContext::MinOf(v42, (const char *)*((unsigned int *)v44 + 4));
  BOOL v46 = *(operations_research::sat::PresolveContext **)(v41 + 16);
  uint64_t v47 = *(void *)(*(void *)(*((void *)v46 + 6) + 56) + 8 * v40 + 8);
  if (*(_DWORD *)(v47 + 60) != 19)
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v46, (const char *)dword_26AEE1BD8);
    if (v45 >= result) {
      return result;
    }
    goto LABEL_29;
  }
  uint64_t result = operations_research::sat::PresolveContext::MinOf(v46, (const char *)*(unsigned int *)(*(void *)(v47 + 48) + 16));
  if (v45 < result)
  {
LABEL_29:
    int v48 = *a1;
    *a1 = *a2;
    *a2 = v48;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *a4;
  uint64_t v10 = *(operations_research::sat::PresolveContext **)(*a4 + 16);
  uint64_t v11 = *(void *)(*(void *)(*((void *)v10 + 6) + 56) + 8 * *a2 + 8);
  if (*(_DWORD *)(v11 + 60) == 19) {
    uint64_t v12 = *(uint64_t **)(v11 + 48);
  }
  else {
    uint64_t v12 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v13 = operations_research::sat::PresolveContext::MinOf(v10, (const char *)*((unsigned int *)v12 + 4));
  uint64_t v14 = *(operations_research::sat::PresolveContext **)(v9 + 16);
  uint64_t v15 = *(void *)(*(void *)(*((void *)v14 + 6) + 56) + 8 * v8 + 8);
  if (*(_DWORD *)(v15 + 60) == 19) {
    int v16 = *(uint64_t **)(v15 + 48);
  }
  else {
    int v16 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v17 = operations_research::sat::PresolveContext::MinOf(v14, (const char *)*((unsigned int *)v16 + 4));
  uint64_t v18 = *a2;
  uint64_t v19 = *a4;
  uint64_t v20 = *(operations_research::sat::PresolveContext **)(*a4 + 16);
  uint64_t v21 = *(void *)(*(void *)(*((void *)v20 + 6) + 56) + 8 * *a3 + 8);
  int v22 = *(_DWORD *)(v21 + 60);
  if (v13 >= v17)
  {
    if (v22 == 19) {
      uint64_t v24 = *(uint64_t **)(v21 + 48);
    }
    else {
      uint64_t v24 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    }
    uint64_t v35 = operations_research::sat::PresolveContext::MinOf(v20, (const char *)*((unsigned int *)v24 + 4));
    uint64_t v36 = *(operations_research::sat::PresolveContext **)(v19 + 16);
    uint64_t v37 = *(void *)(*(void *)(*((void *)v36 + 6) + 56) + 8 * v18 + 8);
    if (*(_DWORD *)(v37 + 60) == 19)
    {
      uint64_t result = operations_research::sat::PresolveContext::MinOf(v36, (const char *)*(unsigned int *)(*(void *)(v37 + 48) + 16));
      if (v35 >= result) {
        return result;
      }
    }
    else
    {
      uint64_t result = operations_research::sat::PresolveContext::MinOf(v36, (const char *)dword_26AEE1BD8);
      if (v35 >= result) {
        return result;
      }
    }
    int v38 = *a2;
    *a2 = *a3;
    *a3 = v38;
    uint64_t v39 = *a1;
    uint64_t v40 = *a4;
    uint64_t v41 = *(operations_research::sat::PresolveContext **)(v40 + 16);
    uint64_t v42 = *(void *)(*(void *)(*((void *)v41 + 6) + 56) + 8 * *a2 + 8);
    if (*(_DWORD *)(v42 + 60) == 19) {
      uint64_t v43 = *(uint64_t **)(v42 + 48);
    }
    else {
      uint64_t v43 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    }
    uint64_t v47 = operations_research::sat::PresolveContext::MinOf(v41, (const char *)*((unsigned int *)v43 + 4));
    int v48 = *(operations_research::sat::PresolveContext **)(v40 + 16);
    uint64_t v49 = *(void *)(*(void *)(*((void *)v48 + 6) + 56) + 8 * v39 + 8);
    if (*(_DWORD *)(v49 + 60) == 19)
    {
      uint64_t result = operations_research::sat::PresolveContext::MinOf(v48, (const char *)*(unsigned int *)(*(void *)(v49 + 48) + 16));
      if (v47 >= result) {
        return result;
      }
    }
    else
    {
      uint64_t result = operations_research::sat::PresolveContext::MinOf(v48, (const char *)dword_26AEE1BD8);
      if (v47 >= result) {
        return result;
      }
    }
    int v51 = *a1;
    *a1 = *a2;
    *a2 = v51;
    return result;
  }
  if (v22 == 19) {
    uint64_t v23 = *(uint64_t **)(v21 + 48);
  }
  else {
    uint64_t v23 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v25 = operations_research::sat::PresolveContext::MinOf(v20, (const char *)*((unsigned int *)v23 + 4));
  uint64_t v26 = *(operations_research::sat::PresolveContext **)(v19 + 16);
  uint64_t v27 = *(void *)(*(void *)(*((void *)v26 + 6) + 56) + 8 * v18 + 8);
  if (*(_DWORD *)(v27 + 60) == 19)
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v26, (const char *)*(unsigned int *)(*(void *)(v27 + 48) + 16));
    int v29 = *a1;
    if (v25 >= result) {
      goto LABEL_15;
    }
LABEL_22:
    *a1 = *a3;
    *a3 = v29;
    return result;
  }
  uint64_t result = operations_research::sat::PresolveContext::MinOf(v26, (const char *)dword_26AEE1BD8);
  int v29 = *a1;
  if (v25 < result) {
    goto LABEL_22;
  }
LABEL_15:
  uint64_t v30 = v29;
  *a1 = *a2;
  *a2 = v29;
  uint64_t v31 = *a4;
  uint64_t v32 = *(operations_research::sat::PresolveContext **)(v31 + 16);
  uint64_t v33 = *(void *)(*(void *)(*((void *)v32 + 6) + 56) + 8 * *a3 + 8);
  if (*(_DWORD *)(v33 + 60) == 19) {
    uint64_t v34 = *(uint64_t **)(v33 + 48);
  }
  else {
    uint64_t v34 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v44 = operations_research::sat::PresolveContext::MinOf(v32, (const char *)*((unsigned int *)v34 + 4));
  uint64_t v45 = *(operations_research::sat::PresolveContext **)(v31 + 16);
  uint64_t v46 = *(void *)(*(void *)(*((void *)v45 + 6) + 56) + 8 * v30 + 8);
  if (*(_DWORD *)(v46 + 60) == 19)
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v45, (const char *)*(unsigned int *)(*(void *)(v46 + 48) + 16));
    if (v44 < result) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v45, (const char *)dword_26AEE1BD8);
    if (v44 < result)
    {
LABEL_35:
      int v50 = *a2;
      *a2 = *a3;
      *a3 = v50;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a1;
      uint64_t v9 = *a3;
      uint64_t v10 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
      uint64_t v11 = *(void *)(*(void *)(*((void *)v10 + 6) + 56) + 8 * *(a2 - 1) + 8);
      if (*(_DWORD *)(v11 + 60) == 19) {
        uint64_t v12 = *(uint64_t **)(v11 + 48);
      }
      else {
        uint64_t v12 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      }
      uint64_t v36 = operations_research::sat::PresolveContext::MinOf(v10, (const char *)*((unsigned int *)v12 + 4));
      uint64_t v37 = *(operations_research::sat::PresolveContext **)(v9 + 16);
      uint64_t v38 = *(void *)(*(void *)(*((void *)v37 + 6) + 56) + 8 * v8 + 8);
      if (*(_DWORD *)(v38 + 60) == 19)
      {
        if (v36 >= operations_research::sat::PresolveContext::MinOf(v37, (const char *)*(unsigned int *)(*(void *)(v38 + 48) + 16)))return 1; {
      }
        }
      else if (v36 >= operations_research::sat::PresolveContext::MinOf(v37, (const char *)dword_26AEE1BD8))
      {
        return 1;
      }
      int v39 = *a1;
      *a1 = *(v4 - 1);
      *(v4 - 1) = v39;
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v13 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v14 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      uint64_t v40 = v4;
      break;
  }
  while (1)
  {
    uint64_t v17 = *a3;
    uint64_t v18 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
    uint64_t v19 = *(void *)(*(void *)(*((void *)v18 + 6) + 56) + 8 * *v14 + 8);
    uint64_t v20 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v19 + 60) == 19) {
      uint64_t v20 = *(uint64_t **)(v19 + 48);
    }
    uint64_t v21 = *v13;
    uint64_t v22 = operations_research::sat::PresolveContext::MinOf(v18, (const char *)*((unsigned int *)v20 + 4));
    uint64_t v23 = *(operations_research::sat::PresolveContext **)(v17 + 16);
    uint64_t v24 = *(void *)(*(void *)(*((void *)v23 + 6) + 56) + 8 * v21 + 8);
    uint64_t v25 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v24 + 60) == 19) {
      uint64_t v25 = *(uint64_t **)(v24 + 48);
    }
    if (v22 < operations_research::sat::PresolveContext::MinOf(v23, (const char *)*((unsigned int *)v25 + 4))) {
      break;
    }
LABEL_21:
    uint64_t v13 = v14;
    v15 += 4;
    if (++v14 == v4) {
      return 1;
    }
  }
  int v42 = v16;
  int v41 = *v14;
  uint64_t v26 = v15;
  do
  {
    *(int *)((char *)a1 + v26 + 12) = *(int *)((char *)a1 + v26 + 8);
    if (v26 == -8)
    {
      uint64_t v4 = v40;
      *a1 = v41;
      int v16 = v42 + 1;
      if (v42 != 7) {
        goto LABEL_21;
      }
      return v14 + 1 == v4;
    }
    uint64_t v27 = *a3;
    uint64_t v28 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
    uint64_t v29 = *(void *)(*(void *)(*((void *)v28 + 6) + 56) + 8 * v41 + 8);
    uint64_t v30 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v29 + 60) == 19) {
      uint64_t v30 = *(uint64_t **)(v29 + 48);
    }
    uint64_t v31 = *(int *)((char *)a1 + v26 + 4);
    uint64_t v32 = operations_research::sat::PresolveContext::MinOf(v28, (const char *)*((unsigned int *)v30 + 4));
    uint64_t v33 = *(operations_research::sat::PresolveContext **)(v27 + 16);
    uint64_t v34 = *(void *)(*(void *)(*((void *)v33 + 6) + 56) + 8 * v31 + 8);
    uint64_t v35 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v34 + 60) == 19) {
      uint64_t v35 = *(uint64_t **)(v34 + 48);
    }
    v26 -= 4;
  }
  while (v32 < operations_research::sat::PresolveContext::MinOf(v33, (const char *)*((unsigned int *)v35 + 4)));
  uint64_t v4 = v40;
  *(int *)((char *)a1 + v26 + 12) = v41;
  int v16 = v42 + 1;
  if (v42 != 7) {
    goto LABEL_21;
  }
  return v14 + 1 == v4;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a2, a3, a5);
  uint64_t v10 = *a3;
  uint64_t v11 = *a5;
  uint64_t v12 = *(operations_research::sat::PresolveContext **)(*a5 + 16);
  uint64_t v13 = *(void *)(*(void *)(*((void *)v12 + 6) + 56) + 8 * *a4 + 8);
  if (*(_DWORD *)(v13 + 60) == 19) {
    uint64_t v14 = *(uint64_t **)(v13 + 48);
  }
  else {
    uint64_t v14 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v15 = operations_research::sat::PresolveContext::MinOf(v12, (const char *)*((unsigned int *)v14 + 4));
  int v16 = *(operations_research::sat::PresolveContext **)(v11 + 16);
  uint64_t v17 = *(void *)(*(void *)(*((void *)v16 + 6) + 56) + 8 * v10 + 8);
  if (*(_DWORD *)(v17 + 60) == 19)
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v16, (const char *)*(unsigned int *)(*(void *)(v17 + 48) + 16));
    if (v15 >= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v16, (const char *)dword_26AEE1BD8);
    if (v15 >= result) {
      return result;
    }
  }
  int v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  uint64_t v20 = *a2;
  uint64_t v21 = *a5;
  uint64_t v22 = *(operations_research::sat::PresolveContext **)(*a5 + 16);
  uint64_t v23 = *(void *)(*(void *)(*((void *)v22 + 6) + 56) + 8 * *a3 + 8);
  if (*(_DWORD *)(v23 + 60) == 19) {
    uint64_t v24 = *(uint64_t **)(v23 + 48);
  }
  else {
    uint64_t v24 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v25 = operations_research::sat::PresolveContext::MinOf(v22, (const char *)*((unsigned int *)v24 + 4));
  uint64_t v26 = *(operations_research::sat::PresolveContext **)(v21 + 16);
  uint64_t v27 = *(void *)(*(void *)(*((void *)v26 + 6) + 56) + 8 * v20 + 8);
  if (*(_DWORD *)(v27 + 60) == 19)
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v26, (const char *)*(unsigned int *)(*(void *)(v27 + 48) + 16));
    if (v25 >= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v26, (const char *)dword_26AEE1BD8);
    if (v25 >= result) {
      return result;
    }
  }
  int v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  uint64_t v29 = *a1;
  uint64_t v30 = *a5;
  uint64_t v31 = *(operations_research::sat::PresolveContext **)(*a5 + 16);
  uint64_t v32 = *(void *)(*(void *)(*((void *)v31 + 6) + 56) + 8 * *a2 + 8);
  if (*(_DWORD *)(v32 + 60) == 19) {
    uint64_t v33 = *(uint64_t **)(v32 + 48);
  }
  else {
    uint64_t v33 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  }
  uint64_t v34 = operations_research::sat::PresolveContext::MinOf(v31, (const char *)*((unsigned int *)v33 + 4));
  uint64_t v35 = *(operations_research::sat::PresolveContext **)(v30 + 16);
  uint64_t v36 = *(void *)(*(void *)(*((void *)v35 + 6) + 56) + 8 * v29 + 8);
  if (*(_DWORD *)(v36 + 60) == 19)
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v35, (const char *)*(unsigned int *)(*(void *)(v36 + 48) + 16));
    if (v34 < result) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t result = operations_research::sat::PresolveContext::MinOf(v35, (const char *)dword_26AEE1BD8);
    if (v34 < result)
    {
LABEL_22:
      int v37 = *a1;
      *a1 = *a2;
      *a2 = v37;
    }
  }
  return result;
}

void **std::set<long long>::set[abi:ne180100]<long long const*>(void **a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = (uint64_t **)std::__tree<long long>::__find_equal<long long>(a1, v4, &v13, &v12, v6);
      if (!*v7)
      {
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = *v6;
        uint64_t v9 = v13;
        uint64_t *v8 = 0;
        v8[1] = 0;
        v8[2] = v9;
        unsigned char *v7 = v8;
        uint64_t v10 = (void *)**a1;
        if (v10)
        {
          *a1 = v10;
          uint64_t v8 = *v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v8);
        a1[2] = (void *)((char *)a1[2] + 1);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_23CC6C280(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::__tree<long long>::__find_equal<long long>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  BOOL v5 = a1 + 1;
  if (a1 + 1 == a2 || (uint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v10 = (void *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        uint64_t v14 = v10;
      }
      while (v15);
    }
    uint64_t v16 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v18 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v19 = v18;
          uint64_t v20 = v18[4];
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = (void *)*v19;
          BOOL v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        BOOL v5 = v19 + 1;
        uint64_t v18 = (void *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (void *)a2[1];
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        uint64_t v13 = (void *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = (void *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            uint64_t v23 = v22;
            uint64_t v24 = v22[4];
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = (void *)*v23;
            BOOL v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          BOOL v5 = v23 + 1;
          uint64_t v22 = (void *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void *std::vector<long long>::vector<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,0>(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    BOOL v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = a2;
    do
    {
      unint64_t v8 = v6;
      uint64_t v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          uint64_t v7 = v10;
        }
        while (!v11);
      }
      ++v6;
      uint64_t v7 = v10;
    }
    while (v10 != a3);
    if (v8 >= 0x1FFFFFFFFFFFFFFFLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = operator new(8 * v6);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v6];
    do
    {
      *uint64_t v12 = v5[4];
      uint64_t v13 = (void *)v5[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v5[2];
          BOOL v11 = *v14 == (void)v5;
          BOOL v5 = v14;
        }
        while (!v11);
      }
      ++v12;
      BOOL v5 = v14;
    }
    while (v14 != a3);
    a1[1] = v12;
  }
  return a1;
}

void sub_23CC6C558(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int **operations_research::sat::SatPostsolver::Clause@<X0>(operations_research::sat::SatPostsolver *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *(int *)(v6 + 4 * a2);
  unint64_t v8 = a2 + 1;
  if (v8 >= (*((void *)this + 2) - v6) >> 2)
  {
    int v9 = *((_DWORD *)this + 18);
    unint64_t v10 = *((void *)this + 8);
    uint64_t v11 = *((void *)this + 5);
    uint64_t v12 = *((void *)this + 6);
    uint64_t v13 = (char *)(v11 + 8 * (v10 >> 10));
    if (v12 != v11)
    {
LABEL_3:
      uint64_t v14 = (char *)(*(void *)v13 + 4 * (v10 & 0x3FF));
      if (v7) {
        goto LABEL_4;
      }
LABEL_9:
      uint64_t v16 = (char **)v13;
      if (v12 == v11) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v6 + 4 * v8);
    unint64_t v10 = *((void *)this + 8);
    uint64_t v11 = *((void *)this + 5);
    uint64_t v12 = *((void *)this + 6);
    uint64_t v13 = (char *)(v11 + 8 * (v10 >> 10));
    if (v12 != v11) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = 0;
  if (!v7) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v15 = v7 + ((uint64_t)&v14[-*(void *)v13] >> 2);
  if (v15 < 1)
  {
    unint64_t v18 = 1023 - v15;
    uint64_t v16 = (char **)&v13[-8 * (v18 >> 10)];
    uint64_t v14 = &(*v16)[4 * (~(_WORD)v18 & 0x3FF)];
    if (v12 == v11) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v16 = (char **)&v13[8 * ((unint64_t)v15 >> 10)];
    uint64_t v14 = &(*v16)[4 * (v15 & 0x3FF)];
    if (v12 == v11)
    {
LABEL_13:
      uint64_t v17 = 0;
      if (!v9) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
  }
LABEL_10:
  uint64_t v17 = (char *)(*(void *)v13 + 4 * (v10 & 0x3FF));
  if (!v9)
  {
LABEL_16:
    uint64_t result = (int **)std::vector<operations_research::sat::Literal>::vector<std::__deque_iterator<operations_research::sat::Literal,operations_research::sat::Literal const*,operations_research::sat::Literal const&,operations_research::sat::Literal const* const*,long,1024l>,0>(a3, v16, v14, v13, v17);
    uint64_t v21 = *result;
    uint64_t v22 = result[1];
    uint64_t v23 = (char *)v22 - (char *)*result;
    if (v22 == *result) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v19 = ((uint64_t)&v17[-*(void *)v13] >> 2) + v9;
  if (v19 >= 1)
  {
    v13 += 8 * ((unint64_t)v19 >> 10);
    uint64_t v17 = (char *)(*(void *)v13 + 4 * (v19 & 0x3FF));
    goto LABEL_16;
  }
  uint64_t result = (int **)std::vector<operations_research::sat::Literal>::vector<std::__deque_iterator<operations_research::sat::Literal,operations_research::sat::Literal const*,operations_research::sat::Literal const&,operations_research::sat::Literal const* const*,long,1024l>,0>(a3, v16, v14, &v13[-8 * ((unint64_t)(1023 - v19) >> 10)], (char *)(*(void *)&v13[-8 * ((unint64_t)(1023 - v19) >> 10)]+ 4 * (~(1023 - (_WORD)v19) & 0x3FF)));
  uint64_t v21 = *result;
  int v28 = result[1];
  uint64_t v23 = (char *)v28 - (char *)*result;
  if (v28 == *result) {
    return result;
  }
LABEL_17:
  uint64_t v24 = 0;
  unint64_t v25 = v23 >> 2;
  int v26 = *(_DWORD *)(*((void *)this + 10) + 4 * v5);
  if (v25 <= 1) {
    unint64_t v25 = 1;
  }
  while (v21[v24] != v26)
  {
    if (v25 == ++v24) {
      return result;
    }
  }
  int v27 = *v21;
  int *v21 = v26;
  v21[v24] = v27;
  return result;
}

void *std::vector<operations_research::sat::Literal>::vector<std::__deque_iterator<operations_research::sat::Literal,operations_research::sat::Literal const*,operations_research::sat::Literal const&,operations_research::sat::Literal const* const*,long,1024l>,0>(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a5 != a3)
  {
    uint64_t v7 = a3;
    unint64_t v8 = a2;
    uint64_t v9 = ((uint64_t)&a5[-*(void *)a4] >> 2) + ((a4 - (char *)a2) << 7);
    uint64_t v10 = (a3 - *a2) >> 2;
    unint64_t v11 = v9 - v10;
    if (v9 != v10)
    {
      if (v11 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(4 * v11);
      uint64_t v13 = 0;
      *a1 = v12;
      a1[1] = v12;
      a1[2] = &v12[4 * v11];
      uint64_t v14 = *v8;
      do
      {
        int v15 = *(_DWORD *)v7;
        v7 += 4;
        *(_DWORD *)&v12[v13] = v15;
        if (v7 - v14 == 4096)
        {
          uint64_t v16 = v8[1];
          ++v8;
          uint64_t v14 = v16;
          uint64_t v7 = v16;
        }
        v13 += 4;
      }
      while (v7 != a5);
      a1[1] = &v12[v13];
    }
  }
  return a1;
}

void sub_23CC6C820(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::vector<int>::__init_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::const_iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::const_iterator>(_DWORD *result, void *a2, int *a3, void *a4, uint64_t a5, unint64_t a6)
{
  if (a6)
  {
    uint64_t v7 = result;
    if (a6 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = operator new(4 * a6);
    void *v7 = result;
    v7[1] = result;
    for (v7[2] = &result[a6]; a2 != a4; ++result)
    {
      int v11 = *a3++;
      *uint64_t result = v11;
      int v12 = *((char *)a2 + 1);
      a2 = (void *)((char *)a2 + 1);
      if (v12 <= -2)
      {
        do
        {
          unint64_t v13 = (__clz(__rbit64(((*a2 >> 7) & ~*a2 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          a2 = (void *)((char *)a2 + v13);
          a3 += v13;
        }
        while (*(char *)a2 < -1);
      }
    }
    v7[1] = result;
  }
  return result;
}

void sub_23CC6C91C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[24 * v5];
  int v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  int v12 = (char **)(v10 + 8);
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = 0;
  unint64_t v13 = *(const void **)a2;
  int64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v14)
  {
    if (v14 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v15 = (char *)operator new(v14);
    *(void *)uint64_t v10 = v15;
    *int v12 = v15;
    uint64_t v16 = &v15[4 * (v14 >> 2)];
    *((void *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *int v12 = v16;
  }
  uint64_t v17 = v10 + 24;
  unint64_t v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      unint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v20 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      uint64_t v21 = v3;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v3 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v3 = v21;
      }
      while (v21 != v20);
      uint64_t v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_23CC6CB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void google::MakeCheckOpString<operations_research::sat::ConstraintProto::ConstraintCase,operations_research::sat::ConstraintProto::ConstraintCase>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CC6CBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::find_or_prepare_insert<std::pair<int,int>>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  unint64_t v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  while (1)
  {
    unint64_t v9 = v7 & v8;
    uint64_t v10 = *(void *)(*a1 + (v7 & v8));
    unint64_t v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::prepare_insert(a1, v6);
    }
    v2 += 8;
    unint64_t v7 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    unint64_t v13 = (int *)(a1[1] + 8 * v12);
    int v15 = *v13;
    int v14 = v13[1];
    if (v15 == v3 && v14 == v4) {
      return v12;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_8;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  unint64_t v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    unint64_t v25 = a1[4];
    if (!v25) {
      return;
    }
LABEL_21:
    *((void *)v25 + 4) = v14 >> 3;
    *((void *)v25 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v18 = &v5[8 * (void)v13];
      unint64_t v19 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(unsigned int *)v18)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)v18)))
          + *((unsigned int *)v18 + 1);
      unint64_t v20 = ((v19 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v19);
      uint64_t v21 = *a1;
      uint64_t v22 = a1[3];
      unint64_t v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v23 = (v15 + v23) & (unint64_t)v22;
          unint64_t v24 = *(void *)&v21[v23] & (~*(void *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      char v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(void *)&a1[1][8 * v16] = *(void *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  unint64_t v25 = a1[4];
  if (v25) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(unsigned int *)(*(void *)(result + 8) + 8 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)(*(void *)(result + 8) + 8 * v14))))
          + *(unsigned int *)(*(void *)(result + 8) + 8 * v14 + 4);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(void *)(v25 + 8 * v18) = *(void *)(v25 + 8 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v26 = *(void *)(v25 + 8 * v14);
          *(void *)(v25 + 8 * v14) = *(void *)(v25 + 8 * v18);
          *(void *)(*(void *)(result + 8) + 8 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 40) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::const_reference __x)
{
  uint64_t v3 = (int *)__x;
  begiunint64_t n = (char *)this->__begin_;
  std::vector<int>::pointer end = this->__end_;
  int64_t v7 = (char *)__position.__i_ - (char *)this->__begin_;
  uint64_t v8 = v7 >> 2;
  int8x16_t v9 = (std::vector<int>::pointer)((char *)this->__begin_ + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  value = this->__end_cap_.__value_;
  if (end < value)
  {
    if (v9 == end)
    {
      int *v9 = *__x;
      this->__end_ = v9 + 1;
      return (std::vector<int>::iterator)v9;
    }
    int64_t v11 = (char *)end - (char *)(v9 + 1);
    uint64_t v12 = v11 >> 2;
    std::vector<int>::pointer v13 = end - 1;
    if ((unint64_t)end < 4)
    {
      std::vector<int>::pointer v19 = this->__end_;
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      unint64_t v15 = &begin[v14];
      std::vector<int>::pointer v16 = (std::vector<int>::pointer)&begin[v14 + 4];
      if (end > v16) {
        std::vector<int>::pointer v16 = this->__end_;
      }
      unint64_t v17 = (unint64_t)v16 + ~(unint64_t)begin - v14;
      if (v17 < 0x2C)
      {
        std::vector<int>::pointer v19 = this->__end_;
      }
      else
      {
        unint64_t v18 = (char *)end - v15;
        std::vector<int>::pointer v19 = this->__end_;
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = v20 & 0x7FFFFFFFFFFFFFF8;
          std::vector<int>::pointer v13 = (std::vector<int>::pointer)((char *)v13 + v21 * 4);
          std::vector<int>::pointer v19 = &end[v21];
          unint64_t v22 = end + 4;
          unint64_t v23 = (const int *)&begin[4 * v12 + 16 + 4 * v8];
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while (v13 < end);
    }
LABEL_50:
    this->__end_ = v19;
    if (end != v9 + 1) {
      memmove(&end[-v12], v9, v11);
    }
    if (v9 <= v3) {
      v3 += this->__end_ > v3;
    }
    int *v9 = *v3;
    return (std::vector<int>::iterator)v9;
  }
  unint64_t v26 = (((char *)end - begin) >> 2) + 1;
  if (v26 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v28 = (char *)value - begin;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v30 = (char *)operator new(4 * v29);
    uint64_t v31 = (int *)&v30[4 * v8];
    uint64_t v32 = (int *)&v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (int *)(4 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if (begin == (char *)__position.__i_) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v53 = (char *)operator new(4 * v52);
    uint64_t v31 = (int *)&v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v32 = (int *)&v53[4 * v52];
    if (v30)
    {
      uint64_t v54 = (int *)&v53[4 * v52];
      operator delete(v30);
      uint64_t v32 = v54;
      std::vector<int>::pointer v34 = this->__begin_;
      int *v31 = *v3;
      uint64_t v35 = (char *)(v31 + 1);
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= v33 >> 1;
  }
LABEL_28:
  std::vector<int>::pointer v34 = (std::vector<int>::pointer)begin;
  int *v31 = *v3;
  uint64_t v35 = (char *)(v31 + 1);
  uint64_t v36 = v31;
  if (begin != (char *)v9)
  {
LABEL_29:
    int v37 = &begin[v7 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v38 = v37 - (char *)v34 - 4;
    int v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_62;
    }
    int v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - (char *)v31) < 0x20) {
      goto LABEL_62;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    int v39 = &v9[v41 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v36 = &v31[v41 / 0xFFFFFFFFFFFFFFFCLL];
    int v42 = v31 - 4;
    uint64_t v43 = (const int *)&begin[4 * v8 - 16];
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *(_OWORD *)v43;
      *((_OWORD *)v42 - 1) = *((_OWORD *)v43 - 1);
      *(_OWORD *)int v42 = v45;
      v42 -= 8;
      v43 -= 8;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_62:
      do
      {
        int v46 = *--v39;
        *--uint64_t v36 = v46;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  std::vector<int>::pointer v47 = this->__end_;
  int64_t v48 = (char *)v47 - (char *)v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = (char *)v47 - (char *)v9;
    int v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
    std::vector<int>::pointer v34 = this->__begin_;
  }
  this->__begin_ = v36;
  this->__end_ = (std::vector<int>::pointer)&v35[v48];
  this->__end_cap_.__value_ = v32;
  if (v34) {
    operator delete(v34);
  }
  return (std::vector<int>::iterator)v31;
}

void sub_23CC6D678(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(unint64_t a1, int *a2, char *a3, int *a4, uint64_t *a5, uint64_t a6, char a7)
{
  BOOL v7 = a4 > a2;
  if (a4 == a2) {
    return;
  }
  uint64_t v10 = a4;
  uint64_t v12 = a2;
  while (1)
  {
    uint64_t v14 = (void)&a3[-a1] << 7;
    unint64_t v15 = *(int **)a3;
    uint64_t v16 = (uint64_t)v10 - *(void *)a3;
    uint64_t v17 = v16 >> 2;
    unint64_t v18 = *(int **)a1;
    uint64_t v19 = (uint64_t)v12 - *(void *)a1;
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = (v16 >> 2) + v14 - (v19 >> 2);
    if (!v7) {
      break;
    }
    if ((uint64_t)v21 <= 23)
    {
      uint64_t v184 = *a5;
      if (a7)
      {
        uint64_t v185 = v12 + 1;
        if ((char *)(v12 + 1) - (char *)v18 == 4096)
        {
          uint64_t v186 = *(int **)(a1 + 8);
          a1 += 8;
          unint64_t v18 = v186;
          uint64_t v185 = v186;
        }
        if (v185 == v10) {
          return;
        }
        uint64_t v187 = *(void *)(*(void *)(v184 + 16) + 656);
        while (2)
        {
          uint64_t v188 = (int **)a1;
          uint64_t v189 = (uint64_t)v185;
          if (v185 == v18)
          {
            uint64_t v188 = (int **)(a1 - 8);
            uint64_t v189 = *(void *)(a1 - 8) + 4096;
          }
          int v192 = *(_DWORD *)(v189 - 4);
          uint64_t v191 = (int *)(v189 - 4);
          int v190 = v192;
          int v193 = *v185;
          uint64_t v194 = (*(void *)(v187 + 24 * v193 + 8) - *(void *)(v187 + 24 * v193)) >> 2;
          uint64_t v195 = (*(void *)(v187 + 24 * v192 + 8) - *(void *)(v187 + 24 * v192)) >> 2;
          if ((int)v194 < (int)v195 || (v193 < v190 ? (BOOL v196 = v194 == v195) : (BOOL v196 = 0), v196))
          {
            *uint64_t v185 = v190;
            uint64_t v197 = v12;
            if (v191 != v12)
            {
              uint64_t v198 = *v188;
              uint64_t v197 = v191;
              while (1)
              {
                if (v197 == v198)
                {
                  uint64_t v199 = *--v188;
                  uint64_t v198 = v199;
                  uint64_t v200 = v199 + 1024;
                }
                else
                {
                  uint64_t v200 = v197;
                }
                int v203 = *(v200 - 1);
                uint64_t v202 = v200 - 1;
                int v201 = v203;
                uint64_t v204 = (*(void *)(v187 + 24 * v203 + 8) - *(void *)(v187 + 24 * v203)) >> 2;
                if ((int)v194 >= (int)v204 && (v193 >= v201 || v194 != v204)) {
                  break;
                }
                *uint64_t v197 = v201;
                uint64_t v197 = v202;
                if (v202 == v12)
                {
                  uint64_t v197 = v12;
                  break;
                }
              }
            }
            *uint64_t v197 = v193;
            if ((char *)++v185 - (char *)v18 == 4096)
            {
LABEL_242:
              uint64_t v206 = *(int **)(a1 + 8);
              a1 += 8;
              unint64_t v18 = v206;
              uint64_t v185 = v206;
            }
          }
          else if ((char *)++v185 - (char *)v18 == 4096)
          {
            goto LABEL_242;
          }
          if (v185 == v10) {
            return;
          }
          continue;
        }
      }
      if (v19 >= -3)
      {
        int v269 = (int **)(a1 + 8 * ((unint64_t)++v20 >> 10));
      }
      else
      {
        unint64_t v268 = 1022 - v20;
        LOWORD(v20) = ~(1022 - v20);
        int v269 = (int **)(a1 - 8 * (v268 >> 10));
      }
      v270 = *v269;
      uint64_t v271 = &(*v269)[v20 & 0x3FF];
      if (v271 == v10) {
        return;
      }
      uint64_t v272 = *(void *)(*(void *)(v184 + 16) + 656);
      while (2)
      {
        uint64_t v273 = v271 - v270;
        if ((char *)v271 - (char *)v270 >= 5)
        {
          __int16 v275 = v273 - 1;
          uint64_t v276 = &v269[(unint64_t)(v273 - 1) >> 10];
        }
        else
        {
          unint64_t v274 = 1024 - v273;
          __int16 v275 = ~(_WORD)v274;
          uint64_t v276 = &v269[-(v274 >> 10)];
        }
        long long v277 = *v276;
        uint64_t v278 = &(*v276)[v275 & 0x3FF];
        int v279 = *v271;
        int v280 = *v278;
        uint64_t v281 = (*(void *)(v272 + 24 * v279 + 8) - *(void *)(v272 + 24 * v279)) >> 2;
        uint64_t v282 = (*(void *)(v272 + 24 * v280 + 8) - *(void *)(v272 + 24 * v280)) >> 2;
        if ((int)v281 < (int)v282 || (v279 < v280 ? (BOOL v283 = v281 == v282) : (BOOL v283 = 0), v283))
        {
          uint64_t v284 = v271;
          while (1)
          {
            v285 = v278;
            *uint64_t v284 = v280;
            if (v278 == v277)
            {
              int v286 = *--v276;
              long long v277 = v286;
              uint64_t v278 = v286 + 1024;
            }
            int v287 = *--v278;
            int v280 = v287;
            uint64_t v288 = (*(void *)(v272 + 24 * v287 + 8) - *(void *)(v272 + 24 * v287)) >> 2;
            uint64_t v284 = v285;
            if ((int)v281 >= (int)v288)
            {
              BOOL v289 = v279 < v280 && v281 == v288;
              uint64_t v284 = v285;
              if (!v289) {
                break;
              }
            }
          }
          int *v285 = v279;
          if ((char *)++v271 - (char *)v270 == 4096)
          {
LABEL_353:
            v290 = v269[1];
            ++v269;
            v270 = v290;
            uint64_t v271 = v290;
          }
        }
        else if ((char *)++v271 - (char *)v270 == 4096)
        {
          goto LABEL_353;
        }
        if (v271 == v10) {
          return;
        }
        continue;
      }
    }
    if (!a6)
    {
      unint64_t v207 = (v21 - 2) >> 1;
      unint64_t v208 = 1023 - v207;
      do
      {
        uint64_t v209 = v12;
        v210 = (char *)a1;
        if (v207)
        {
          uint64_t v211 = ((uint64_t)v12 - *(void *)a1) >> 2;
          unint64_t v212 = v207 + v211;
          if ((uint64_t)(v207 + v211) >= 1)
          {
            v210 = (char *)(a1 + 8 * (v212 >> 10));
            uint64_t v209 = (int *)(*(void *)v210 + 4 * (v212 & 0x3FF));
          }
          else
          {
            v210 = (char *)(a1 - 8 * ((v208 - v211) >> 10));
            uint64_t v209 = (int *)(*(void *)v210 + 4 * (~((_WORD)v208 - (_WORD)v211) & 0x3FF));
          }
        }
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v12, *a5, v21, v210, v209);
        --v207;
        ++v208;
      }
      while (v207 != -1);
      uint64_t v213 = *(int **)a3;
      uint64_t v214 = ((uint64_t)v12 - *(void *)a1) >> 2;
      uint64_t v215 = v14 + (((uint64_t)v10 - *(void *)a3) >> 2) - v214;
      if (v215 < 2) {
        return;
      }
      while (2)
      {
        uint64_t v216 = 0;
        int v217 = *v12;
        uint64_t v218 = *a5;
        unint64_t v219 = v12;
        int64_t v220 = (uint64_t *)a1;
LABEL_255:
        long long v221 = v219;
        if (v216 == -1)
        {
          uint64_t v222 = -1;
          uint64_t v216 = 0;
          if (v215 > 0) {
            goto LABEL_262;
          }
          goto LABEL_253;
        }
        uint64_t v223 = v216 + 1 + (((uint64_t)v219 - *v220) >> 2);
        if (v223 < 1)
        {
          unint64_t v224 = 1023 - v223;
          v220 -= v224 >> 10;
          unint64_t v219 = (int *)(*v220 + 4 * (~(_WORD)v224 & 0x3FF));
          uint64_t v222 = (2 * v216) | 1;
          uint64_t v216 = 2 * v216 + 2;
          if (v216 < v215) {
            goto LABEL_262;
          }
          goto LABEL_253;
        }
        v220 += (unint64_t)v223 >> 10;
        unint64_t v219 = (int *)(*v220 + 4 * (v223 & 0x3FF));
        uint64_t v222 = (2 * v216) | 1;
        uint64_t v216 = 2 * v216 + 2;
        if (v216 >= v215) {
          goto LABEL_253;
        }
LABEL_262:
        uint64_t v225 = (uint64_t)v219 - *v220;
        uint64_t v226 = v225 >> 2;
        if (v225 >= -3) {
          uint64_t v227 = (int *)(*(uint64_t *)((char *)v220 + (((unint64_t)(v226 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
        }
                       + 4 * ((v226 + 1) & 0x3FF));
        else {
          uint64_t v227 = (int *)(v220[-((unint64_t)(1022 - v226) >> 10)] + 4 * (~(1022 - (_WORD)v226) & 0x3FF));
        }
        int v228 = *v219;
        int v229 = *v227;
        uint64_t v230 = *(void *)(*(void *)(v218 + 16) + 656);
        uint64_t v231 = (*(void *)(v230 + 24 * v228 + 8) - *(void *)(v230 + 24 * v228)) >> 2;
        uint64_t v232 = (*(void *)(v230 + 24 * v229 + 8) - *(void *)(v230 + 24 * v229)) >> 2;
        if ((int)v231 < (int)v232 || (v228 < v229 ? (BOOL v233 = v231 == v232) : (BOOL v233 = 0), v233))
        {
          if ((int *)((char *)++v219 - *v220) == (int *)4096)
          {
            uint64_t v234 = (int *)v220[1];
            ++v220;
            unint64_t v219 = v234;
          }
        }
        else
        {
LABEL_253:
          uint64_t v216 = v222;
        }
        int *v221 = *v219;
        if (v216 > (uint64_t)((unint64_t)(v215 - 2) >> 1))
        {
          if (v213 != v10)
          {
            unint64_t v235 = v10 - 1;
            if (v219 != v10 - 1) {
              goto LABEL_275;
            }
LABEL_302:
            *unint64_t v219 = v217;
            goto LABEL_303;
          }
          unint64_t v235 = (int *)(*((void *)a3 - 1) + 4092);
          if (v219 == v235) {
            goto LABEL_302;
          }
LABEL_275:
          *unint64_t v219 = *v235;
          uint64_t v236 = (uint64_t)(v219 + 1);
          uint64_t v237 = *v220;
          if (v236 - *v220 == 4096)
          {
            uint64_t v238 = v220[1];
            ++v220;
            uint64_t v237 = v238;
            uint64_t v236 = v238;
          }
          *unint64_t v235 = v217;
          if ((int *)v236 != v12)
          {
            uint64_t v239 = ((v236 - v237) >> 2) - v214 + (((void)v220 - a1) << 7);
            unint64_t v240 = v239 - 2;
            if (v239 >= 2)
            {
              unint64_t v241 = v240 >> 1;
              uint64_t v242 = v12;
              if (v240 < 2) {
                goto LABEL_282;
              }
              unint64_t v243 = v241 + v214;
              if ((uint64_t)(v241 + v214) < 1)
              {
                uint64_t v242 = (int *)(*(void *)(a1 - 8 * ((1023 - v243) >> 10)) + 4 * (~(1023 - (_WORD)v243) & 0x3FF));
                if (v237 == v236) {
                  goto LABEL_283;
                }
              }
              else
              {
                uint64_t v242 = (int *)(*(void *)(a1 + ((v243 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v243 & 0x3FF));
LABEL_282:
                if (v237 == v236) {
LABEL_283:
                }
                  uint64_t v236 = *(v220 - 1) + 4096;
              }
              int v244 = *v242;
              int v245 = *(_DWORD *)(v236 - 4);
              uint64_t v246 = *(void *)(*(void *)(*a5 + 16) + 656);
              uint64_t v247 = (*(void *)(v246 + 24 * *v242 + 8) - *(void *)(v246 + 24 * *v242)) >> 2;
              uint64_t v248 = (*(void *)(v246 + 24 * v245 + 8) - *(void *)(v246 + 24 * v245)) >> 2;
              if ((int)v247 < (int)v248 || v244 < v245 && v247 == v248)
              {
                *(_DWORD *)(v236 - 4) = v244;
                if (v240 >= 2)
                {
                  while (1)
                  {
                    unint64_t v249 = v241 - 1;
                    unint64_t v250 = (v241 - 1) >> 1;
                    uint64_t v251 = v12;
                    if (v241 >= 3)
                    {
                      unint64_t v252 = v250 + v214;
                      if ((uint64_t)(v250 + v214) >= 1) {
                        uint64_t v251 = (int *)(*(void *)(a1 + ((v252 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v252 & 0x3FF));
                      }
                      else {
                        uint64_t v251 = (int *)(*(void *)(a1 - 8 * ((1023 - v252) >> 10))
                      }
                                     + 4 * (~(1023 - (_WORD)v252) & 0x3FF));
                    }
                    int v253 = *v251;
                    uint64_t v254 = (*(void *)(v246 + 24 * v253 + 8) - *(void *)(v246 + 24 * v253)) >> 2;
                    if ((int)v254 >= (int)v248 && (v253 >= v245 || v254 != v248)) {
                      break;
                    }
                    int *v242 = v253;
                    unint64_t v241 = v250;
                    uint64_t v242 = v251;
                    if (v249 <= 1) {
                      goto LABEL_300;
                    }
                  }
                }
                uint64_t v251 = v242;
LABEL_300:
                *uint64_t v251 = v245;
              }
            }
          }
LABEL_303:
          if (v213 == v10)
          {
            long long v256 = (int *)*((void *)a3 - 1);
            a3 -= 8;
            uint64_t v213 = v256;
            uint64_t v10 = v256 + 1024;
          }
          --v10;
          BOOL v7 = v215-- <= 2;
          if (v7) {
            return;
          }
          continue;
        }
        goto LABEL_255;
      }
    }
    unint64_t v22 = v21 >> 1;
    uint64_t v23 = v20 + (v21 >> 1);
    if (v21 < 0x81)
    {
      if (v23 < 1)
      {
        unint64_t v75 = 1023 - v23;
        uint64_t v28 = (void *)(a1 - 8 * (v75 >> 10));
        unint64_t v29 = (int *)(*v28 + 4 * (~(_WORD)v75 & 0x3FF));
        if (v16 >= 5)
        {
LABEL_15:
          uint64_t v30 = &a3[8 * ((unint64_t)(v17 - 1) >> 10)];
          uint64_t v31 = (int *)(*(void *)v30 + 4 * ((v17 - 1) & 0x3FF));
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v28 = (void *)(a1 + 8 * ((unint64_t)v23 >> 10));
        unint64_t v29 = (int *)(*v28 + 4 * (v23 & 0x3FF));
        if (v16 >= 5) {
          goto LABEL_15;
        }
      }
      uint64_t v30 = &a3[-8 * ((unint64_t)(1024 - v17) >> 10)];
      uint64_t v31 = (int *)(*(void *)v30 + 4 * (~(1024 - (_WORD)v17) & 0x3FF));
LABEL_38:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)v28, v29, a1, v12, (uint64_t)v30, v31, *(void *)(*(void *)(*a5 + 16) + 656));
      --a6;
      if ((a7 & 1) == 0) {
        goto LABEL_39;
      }
LABEL_57:
      uint64_t v82 = *(void *)(*(void *)(*a5 + 16) + 656);
      uint64_t v76 = *(int **)a1;
      uint64_t v84 = (*(void *)(v82 + 24 * *v12 + 8) - *(void *)(v82 + 24 * *v12)) >> 2;
      int v81 = *v12;
LABEL_58:
      uint64_t v95 = (void *)a1;
      uint64_t v96 = v12;
      do
      {
        if ((char *)++v96 - (char *)v76 == 4096)
        {
          uint64_t v97 = (int *)v95[1];
          ++v95;
          uint64_t v76 = v97;
          uint64_t v96 = v97;
        }
        int v98 = *v96;
        uint64_t v99 = (*(void *)(v82 + 24 * v98 + 8) - *(void *)(v82 + 24 * v98)) >> 2;
      }
      while ((int)v84 > (int)v99 || v98 < v81 && v84 == v99);
      uint64_t v101 = v96 - v76;
      if ((char *)v96 - (char *)v76 < 5)
      {
        uint64_t v111 = v95[-((unint64_t)(1024 - v101) >> 10)] + 4 * (~(1024 - (_WORD)v101) & 0x3FF);
        uint64_t v103 = a3;
        uint64_t v104 = v10;
        if ((int *)v111 != v12)
        {
LABEL_68:
          uint64_t v105 = *(int **)a3;
          uint64_t v103 = a3;
          uint64_t v104 = v10;
          do
          {
            if (v104 == v105)
            {
              int v106 = (int *)*((void *)v103 - 1);
              v103 -= 8;
              uint64_t v105 = v106;
              uint64_t v104 = v106 + 1024;
            }
            int v108 = *--v104;
            int v107 = v108;
            uint64_t v109 = (*(void *)(v82 + 24 * v108 + 8) - *(void *)(v82 + 24 * v108)) >> 2;
            if ((int)v84 > (int)v109) {
              break;
            }
          }
          while (v107 >= v81 || v84 != v109);
          goto LABEL_87;
        }
      }
      else
      {
        uint64_t v102 = *(void *)((char *)v95 + (((unint64_t)(v101 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
             + 4 * ((v101 - 1) & 0x3FF);
        uint64_t v103 = a3;
        uint64_t v104 = v10;
        if ((int *)v102 != v12) {
          goto LABEL_68;
        }
      }
      do
      {
        if (v95 >= (void *)v103 && (v95 != (void *)v103 || v96 >= v104)) {
          break;
        }
        if (v104 == *(int **)v103)
        {
          uint64_t v112 = *((void *)v103 - 1);
          v103 -= 8;
          uint64_t v104 = (int *)(v112 + 4096);
        }
        int v114 = *--v104;
        int v113 = v114;
        uint64_t v115 = (*(void *)(v82 + 24 * v114 + 8) - *(void *)(v82 + 24 * v114)) >> 2;
        if ((int)v84 > (int)v115) {
          break;
        }
      }
      while (v113 >= v81 || v84 != v115);
LABEL_87:
      BOOL v117 = v95 != (void *)v103 || v96 >= v104;
      if (v95 < (void *)v103) {
        BOOL v117 = 0;
      }
      while (v95 < (void *)v103 || v95 == (void *)v103 && v96 < v104)
      {
        *uint64_t v96 = *v104;
        *uint64_t v104 = v98;
        do
        {
          if ((char *)++v96 - (char *)v76 == 4096)
          {
            unsigned int v118 = (int *)v95[1];
            ++v95;
            uint64_t v76 = v118;
            uint64_t v96 = v118;
          }
          int v98 = *v96;
          uint64_t v119 = (*(void *)(v82 + 24 * v98 + 8) - *(void *)(v82 + 24 * v98)) >> 2;
        }
        while ((int)v84 > (int)v119 || v98 < v81 && v84 == v119);
        uint64_t v121 = *(int **)v103;
        do
        {
          if (v104 == v121)
          {
            uint64_t v122 = (int *)*((void *)v103 - 1);
            v103 -= 8;
            uint64_t v121 = v122;
            uint64_t v104 = v122 + 1024;
          }
          int v124 = *--v104;
          int v123 = v124;
          uint64_t v125 = (*(void *)(v82 + 24 * v124 + 8) - *(void *)(v82 + 24 * v124)) >> 2;
          if ((int)v84 > (int)v125) {
            break;
          }
        }
        while (v123 >= v81 || v84 != v125);
      }
      uint64_t v127 = (char *)v96 - (char *)v76;
      uint64_t v128 = v96 - v76;
      if (v127 >= 5)
      {
        unint64_t v129 = v128 - 1;
        unint64_t v130 = (unint64_t)&v95[v129 >> 10];
        uint64_t v131 = (int *)(*(void *)v130 + 4 * (v129 & 0x3FF));
        if (v131 == v12) {
          goto LABEL_121;
        }
LABEL_120:
        *uint64_t v12 = *v131;
        goto LABEL_121;
      }
      unint64_t v132 = 1024 - v128;
      unint64_t v130 = (unint64_t)&v95[-(v132 >> 10)];
      uint64_t v131 = (int *)(*(void *)v130 + 4 * (~(_WORD)v132 & 0x3FF));
      if (v131 != v12) {
        goto LABEL_120;
      }
LABEL_121:
      *uint64_t v131 = v81;
      if (!v117) {
        goto LABEL_129;
      }
      int v133 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v12, (char *)v130, v131, (uint64_t)a5);
      uint64_t v134 = (uint64_t)v131 - *(void *)v130;
      uint64_t v135 = v134 >> 2;
      if (v134 < -3)
      {
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v130 - 8 * ((unint64_t)(1022 - v135) >> 10)), (int *)(*(void *)(v130 - 8 * ((unint64_t)(1022 - v135) >> 10))+ 4 * (~(1022 - (_WORD)v135) & 0x3FF)), a3, v10, (uint64_t)a5))goto LABEL_126; {
LABEL_3:
        }
        a3 = (char *)v130;
        uint64_t v10 = v131;
        if (v133) {
          return;
        }
        BOOL v7 = v131 > v12;
        if (v131 == v12) {
          return;
        }
      }
      else
      {
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v130 + 8 * ((unint64_t)(v135 + 1) >> 10)), (int *)(*(void *)(v130 + 8 * ((unint64_t)(v135 + 1) >> 10))+ 4 * ((v135 + 1) & 0x3FF)), a3, v10, (uint64_t)a5))goto LABEL_3; {
LABEL_126:
        }
        if (v133)
        {
          uint64_t v136 = v131 + 1;
          if ((int *)((char *)v131 - *(void *)v130 + 4) != (int *)4096) {
            goto LABEL_132;
          }
          goto LABEL_131;
        }
LABEL_129:
        std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(a1, v12, v130, v131, a5, a6, a7 & 1);
        unint64_t v137 = v131 + 1;
        if ((int *)((char *)v131 - *(void *)v130 + 4) == (int *)4096)
        {
          a7 = 0;
LABEL_131:
          uint64_t v138 = *(int **)(v130 + 8);
          v130 += 8;
          uint64_t v136 = v138;
LABEL_132:
          a1 = v130;
          uint64_t v12 = v136;
          BOOL v7 = v10 > v136;
          if (v10 == v136) {
            return;
          }
        }
        else
        {
          a7 = 0;
          a1 = v130;
          uint64_t v12 = v131 + 1;
          BOOL v7 = v10 > v137;
          if (v10 == v137) {
            return;
          }
        }
      }
    }
    else
    {
      if (v23 < 1)
      {
        unint64_t v32 = 1023 - v23;
        uint64_t v24 = (void *)(a1 - 8 * (v32 >> 10));
        long long v25 = (int *)(*v24 + 4 * (~(_WORD)v32 & 0x3FF));
        if (v16 >= 5)
        {
LABEL_12:
          unint64_t v26 = &a3[8 * ((unint64_t)(v17 - 1) >> 10)];
          uint64_t v27 = (int *)(*(void *)v26 + 4 * ((v17 - 1) & 0x3FF));
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v24 = (void *)(a1 + 8 * ((unint64_t)v23 >> 10));
        long long v25 = (int *)(*v24 + 4 * (v23 & 0x3FF));
        if (v16 >= 5) {
          goto LABEL_12;
        }
      }
      unint64_t v26 = &a3[-8 * ((unint64_t)(1024 - v17) >> 10)];
      uint64_t v27 = (int *)(*(void *)v26 + 4 * (~(1024 - (_WORD)v17) & 0x3FF));
LABEL_18:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, v12, (uint64_t)v24, v25, (uint64_t)v26, v27, *(void *)(*(void *)(*a5 + 16) + 656));
      uint64_t v33 = (uint64_t)v12 - *(void *)a1;
      uint64_t v34 = v33 >> 2;
      if (v33 < -3)
      {
        uint64_t v35 = (void *)(a1 - 8 * ((unint64_t)(1022 - v34) >> 10));
        uint64_t v36 = (int *)(*v35 + 4 * (~(1022 - (_WORD)v34) & 0x3FF));
        unint64_t v37 = v22 - 1;
        uint64_t v38 = v34 + v22 - 1;
        if (v38 < 1)
        {
LABEL_20:
          unint64_t v39 = 1023 - v38;
          uint64_t v40 = (void *)(a1 - 8 * (v39 >> 10));
          uint64_t v41 = (int *)(*v40 + 4 * (~(_WORD)v39 & 0x3FF));
          uint64_t v42 = (uint64_t)v10 - *(void *)a3;
          uint64_t v43 = v42 >> 2;
          if (v42 < 9) {
            goto LABEL_21;
          }
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v35 = (void *)(a1 + 8 * ((unint64_t)(v34 + 1) >> 10));
        uint64_t v36 = (int *)(*v35 + 4 * ((v34 + 1) & 0x3FF));
        unint64_t v37 = v22 - 1;
        uint64_t v38 = v34 + v22 - 1;
        if (v38 < 1) {
          goto LABEL_20;
        }
      }
      uint64_t v40 = (void *)(a1 + 8 * ((unint64_t)v38 >> 10));
      uint64_t v41 = (int *)(*v40 + 4 * (v38 & 0x3FF));
      uint64_t v47 = (uint64_t)v10 - *(void *)a3;
      uint64_t v43 = v47 >> 2;
      if (v47 < 9)
      {
LABEL_21:
        unint64_t v44 = 1025 - v43;
        long long v45 = &a3[-8 * (v44 >> 10)];
        int v46 = (int *)(*(void *)v45 + 4 * (~(_WORD)v44 & 0x3FF));
        goto LABEL_25;
      }
LABEL_24:
      unint64_t v48 = v43 - 2;
      long long v45 = &a3[8 * (v48 >> 10)];
      int v46 = (int *)(*(void *)v45 + 4 * (v48 & 0x3FF));
LABEL_25:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)v35, v36, (uint64_t)v40, v41, (uint64_t)v45, v46, *(void *)(*(void *)(*a5 + 16) + 656));
      uint64_t v49 = (uint64_t)v12 - *(void *)a1;
      uint64_t v50 = v49 >> 2;
      if (v49 < -7)
      {
        int v51 = (void *)(a1 - 8 * ((unint64_t)(1021 - v50) >> 10));
        unint64_t v52 = (int *)(*v51 + 4 * (~(1021 - (_WORD)v50) & 0x3FF));
        unint64_t v53 = v22 + 1;
        uint64_t v54 = v50 + v22 + 1;
        if (v54 < 1)
        {
LABEL_27:
          unint64_t v55 = 1023 - v54;
          uint64_t v56 = (void *)(a1 - 8 * (v55 >> 10));
          uint64_t v57 = (int *)(*v56 + 4 * (~(_WORD)v55 & 0x3FF));
          uint64_t v58 = (uint64_t)v10 - *(void *)a3;
          uint64_t v59 = v58 >> 2;
          if (v58 < 13) {
            goto LABEL_28;
          }
          goto LABEL_31;
        }
      }
      else
      {
        int v51 = (void *)(a1 + 8 * ((unint64_t)(v50 + 2) >> 10));
        unint64_t v52 = (int *)(*v51 + 4 * ((v50 + 2) & 0x3FF));
        unint64_t v53 = v22 + 1;
        uint64_t v54 = v50 + v22 + 1;
        if (v54 < 1) {
          goto LABEL_27;
        }
      }
      uint64_t v56 = (void *)(a1 + 8 * ((unint64_t)v54 >> 10));
      uint64_t v57 = (int *)(*v56 + 4 * (v54 & 0x3FF));
      uint64_t v63 = (uint64_t)v10 - *(void *)a3;
      uint64_t v59 = v63 >> 2;
      if (v63 < 13)
      {
LABEL_28:
        unint64_t v60 = 1026 - v59;
        unint64_t v61 = &a3[-8 * (v60 >> 10)];
        uint64_t v62 = (int *)(*(void *)v61 + 4 * (~(_WORD)v60 & 0x3FF));
        goto LABEL_32;
      }
LABEL_31:
      unint64_t v64 = v59 - 3;
      unint64_t v61 = &a3[8 * (v64 >> 10)];
      uint64_t v62 = (int *)(*(void *)v61 + 4 * (v64 & 0x3FF));
LABEL_32:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)v51, v52, (uint64_t)v56, v57, (uint64_t)v61, v62, *(void *)(*(void *)(*a5 + 16) + 656));
      uint64_t v65 = ((uint64_t)v12 - *(void *)a1) >> 2;
      unint64_t v66 = v65 + v37;
      if ((uint64_t)(v65 + v37) < 1)
      {
        unint64_t v89 = 1023 - v66;
        uint64_t v67 = (void *)(a1 - 8 * (v89 >> 10));
        uint64_t v68 = (int *)(*v67 + 4 * (~(_WORD)v89 & 0x3FF));
        unint64_t v69 = v65 + v22;
        if ((uint64_t)(v65 + v22) >= 1)
        {
LABEL_34:
          uint64_t v70 = (void *)(a1 + 8 * (v69 >> 10));
          uint64_t v71 = (int *)(*v70 + 4 * (v69 & 0x3FF));
          uint64_t v72 = v65 + v53;
          if (v72 >= 1) {
            goto LABEL_35;
          }
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v67 = (void *)(a1 + 8 * (v66 >> 10));
        uint64_t v68 = (int *)(*v67 + 4 * (v66 & 0x3FF));
        unint64_t v69 = v65 + v22;
        if ((uint64_t)(v65 + v22) >= 1) {
          goto LABEL_34;
        }
      }
      unint64_t v90 = 1023 - v69;
      uint64_t v70 = (void *)(a1 - 8 * (v90 >> 10));
      uint64_t v71 = (int *)(*v70 + 4 * (~(_WORD)v90 & 0x3FF));
      uint64_t v72 = v65 + v53;
      if (v72 >= 1)
      {
LABEL_35:
        uint64_t v73 = (void *)(a1 + 8 * ((unint64_t)v72 >> 10));
        uint64_t v74 = (int *)(*v73 + 4 * (v72 & 0x3FF));
        goto LABEL_53;
      }
LABEL_52:
      unint64_t v91 = 1023 - v72;
      uint64_t v73 = (void *)(a1 - 8 * (v91 >> 10));
      uint64_t v74 = (int *)(*v73 + 4 * (~(_WORD)v91 & 0x3FF));
LABEL_53:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)v67, v68, (uint64_t)v70, v71, (uint64_t)v73, v74, *(void *)(*(void *)(*a5 + 16) + 656));
      uint64_t v92 = v22 + (((uint64_t)v12 - *(void *)a1) >> 2);
      if (v92 < 1) {
        unint64_t v93 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1023 - v92) >> 10)) + 4
      }
                                                                                   * (~(1023 - (_WORD)v92) & 0x3FF));
      else {
        unint64_t v93 = (int *)(*(void *)(a1 + (((unint64_t)v92 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v92 & 0x3FF));
      }
      int v94 = *v12;
      *uint64_t v12 = *v93;
      *unint64_t v93 = v94;
      --a6;
      if (a7) {
        goto LABEL_57;
      }
LABEL_39:
      uint64_t v76 = *(int **)a1;
      uint64_t v77 = (uint64_t)v12 - *(void *)a1;
      uint64_t v78 = v77 >> 2;
      if (v77 >= 5) {
        BOOL v79 = (int *)(*(void *)(a1 + (((unint64_t)(v78 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
      }
                    + 4 * ((v78 - 1) & 0x3FF));
      else {
        BOOL v79 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1024 - v78) >> 10)) + 4
      }
                                                                                   * (~(1024 - (_WORD)v78) & 0x3FF));
      int v80 = *v79;
      int v81 = *v12;
      uint64_t v82 = *(void *)(*(void *)(*a5 + 16) + 656);
      uint64_t v83 = (*(void *)(v82 + 24 * v80 + 8) - *(void *)(v82 + 24 * v80)) >> 2;
      uint64_t v84 = (*(void *)(v82 + 24 * v81 + 8) - *(void *)(v82 + 24 * v81)) >> 2;
      if ((int)v83 < (int)v84) {
        goto LABEL_58;
      }
      if (v80 < v81 && v83 == v84) {
        goto LABEL_58;
      }
      uint64_t v86 = *(int **)a3;
      uint64_t v87 = (uint64_t)v10 - *(void *)a3;
      uint64_t v88 = v87 >> 2;
      if (v87 >= 5) {
        unint64_t v139 = (int *)(*(void *)&a3[((unint64_t)(v88 - 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4
      }
                                                                                                * ((v88 - 1) & 0x3FF));
      else {
        unint64_t v139 = (int *)(*(void *)&a3[-8 * ((unint64_t)(1024 - v88) >> 10)] + 4
      }
                                                                                   * (~(1024 - (_WORD)v88) & 0x3FF));
      int v140 = *v139;
      uint64_t v141 = (*(void *)(v82 + 24 * v140 + 8) - *(void *)(v82 + 24 * v140)) >> 2;
      if ((int)v84 < (int)v141 || v81 < v140 && v84 == v141)
      {
        uint64_t v142 = v12;
        do
        {
          if ((char *)++v142 - (char *)v76 == 4096)
          {
            uint64_t v143 = *(int **)(a1 + 8);
            a1 += 8;
            uint64_t v76 = v143;
            uint64_t v142 = v143;
          }
          int v144 = *v142;
          uint64_t v145 = (*(void *)(v82 + 24 * v144 + 8) - *(void *)(v82 + 24 * v144)) >> 2;
          if ((int)v84 < (int)v145) {
            break;
          }
        }
        while (v81 >= v144 || v84 != v145);
      }
      else
      {
        uint64_t v142 = v12;
        do
        {
          if ((char *)++v142 - (char *)v76 == 4096)
          {
            long long v147 = *(int **)(a1 + 8);
            a1 += 8;
            uint64_t v76 = v147;
            uint64_t v142 = v147;
          }
          if (a1 >= (unint64_t)a3 && ((char *)a1 != a3 || v142 >= v10)) {
            break;
          }
          int v148 = *v142;
          uint64_t v149 = (*(void *)(v82 + 24 * v148 + 8) - *(void *)(v82 + 24 * v148)) >> 2;
          if ((int)v84 < (int)v149) {
            break;
          }
        }
        while (v81 >= v148 || v84 != v149);
      }
      if (a1 < (unint64_t)a3 || (char *)a1 == a3 && v142 < v10)
      {
        uint64_t v151 = a3;
        double v152 = v10;
        do
        {
          if (v152 == v86)
          {
            uint64_t v153 = (int *)*((void *)v151 - 1);
            v151 -= 8;
            uint64_t v86 = v153;
            double v152 = v153 + 1024;
          }
          int v155 = *--v152;
          int v154 = v155;
          uint64_t v156 = (*(void *)(v82 + 24 * v155 + 8) - *(void *)(v82 + 24 * v155)) >> 2;
        }
        while ((int)v84 < (int)v156 || v81 < v154 && v84 == v156);
      }
      else
      {
        uint64_t v151 = a3;
        double v152 = v10;
      }
      while (a1 < (unint64_t)v151 || (char *)a1 == v151 && v142 < v152)
      {
        int v158 = *v142;
        *uint64_t v142 = *v152;
        *double v152 = v158;
        do
        {
          if ((char *)++v142 - (char *)v76 == 4096)
          {
            uint64_t v159 = *(int **)(a1 + 8);
            a1 += 8;
            uint64_t v76 = v159;
            uint64_t v142 = v159;
          }
          int v160 = *v142;
          uint64_t v161 = (*(void *)(v82 + 24 * v160 + 8) - *(void *)(v82 + 24 * v160)) >> 2;
          if ((int)v84 < (int)v161) {
            break;
          }
        }
        while (v81 >= v160 || v84 != v161);
        do
        {
          if (v152 == v86)
          {
            uint64_t v163 = (int *)*((void *)v151 - 1);
            v151 -= 8;
            uint64_t v86 = v163;
            double v152 = v163 + 1024;
          }
          int v165 = *--v152;
          int v164 = v165;
          uint64_t v166 = (*(void *)(v82 + 24 * v165 + 8) - *(void *)(v82 + 24 * v165)) >> 2;
        }
        while ((int)v84 < (int)v166 || v81 < v164 && v84 == v166);
      }
      uint64_t v168 = (char *)v142 - (char *)v76;
      uint64_t v169 = v142 - v76;
      if (v168 >= 5)
      {
        uint64_t v170 = (int *)(*(void *)(a1 + (((unint64_t)(v169 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v169 - 1) & 0x3FF));
        if (v170 == v12) {
          goto LABEL_198;
        }
LABEL_197:
        *uint64_t v12 = *v170;
        goto LABEL_198;
      }
      uint64_t v170 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1024 - v169) >> 10))
                   + 4 * (~(1024 - (_WORD)v169) & 0x3FF));
      if (v170 != v12) {
        goto LABEL_197;
      }
LABEL_198:
      a7 = 0;
      *uint64_t v170 = v81;
      uint64_t v12 = v142;
      BOOL v7 = v10 > v142;
      if (v10 == v142) {
        return;
      }
    }
  }
  switch(v21)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      if (v10 == v15) {
        uint64_t v10 = (int *)(*((void *)a3 - 1) + 4096);
      }
      int v171 = *(v10 - 1);
      int v172 = *v12;
      uint64_t v173 = *(void *)(*(void *)(*a5 + 16) + 656);
      uint64_t v174 = (*(void *)(v173 + 24 * v171 + 8) - *(void *)(v173 + 24 * v171)) >> 2;
      uint64_t v175 = (*(void *)(v173 + 24 * v172 + 8) - *(void *)(v173 + 24 * v172)) >> 2;
      if ((int)v174 < (int)v175 || v171 < v172 && v174 == v175)
      {
        *uint64_t v12 = v171;
        *(v10 - 1) = v172;
      }
      return;
    case 3uLL:
      if (v19 < -3)
      {
        unint64_t v176 = (void *)(a1 - 8 * ((unint64_t)(1022 - v20) >> 10));
        uint64_t v177 = (int *)(*v176 + 4 * (~(1022 - (_WORD)v20) & 0x3FF));
        if (v10 != v15) {
          goto LABEL_309;
        }
      }
      else
      {
        unint64_t v176 = (void *)(a1 + 8 * ((unint64_t)(v20 + 1) >> 10));
        uint64_t v177 = (int *)(*v176 + 4 * (((_WORD)v20 + 1) & 0x3FF));
        if (v10 != v15) {
          goto LABEL_309;
        }
      }
      uint64_t v257 = *((void *)a3 - 1);
      a3 -= 8;
      uint64_t v10 = (int *)(v257 + 4096);
LABEL_309:
      uint64_t v258 = *(void *)(*(void *)(*a5 + 16) + 656);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, v12, (uint64_t)v176, v177, (uint64_t)a3, v10 - 1, v258);
      return;
    case 4uLL:
      if (v19 >= -3)
      {
        uint64_t v178 = (void *)(a1 + 8 * ((unint64_t)(v20 + 1) >> 10));
        unint64_t v179 = (int *)(*v178 + 4 * ((v20 + 1) & 0x3FF));
        unint64_t v180 = v20 + 2;
        goto LABEL_314;
      }
      uint64_t v178 = (void *)(a1 - 8 * ((unint64_t)(1022 - v20) >> 10));
      unint64_t v179 = (int *)(*v178 + 4 * (~(1022 - (_WORD)v20) & 0x3FF));
      if ((unint64_t)v19 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v180 = 1;
LABEL_314:
        uint64_t v259 = (void *)(a1 + 8 * (v180 >> 10));
        uint64_t v260 = (int *)(*v259 + 4 * (v180 & 0x3FF));
        if (v10 != v15) {
          goto LABEL_316;
        }
        goto LABEL_315;
      }
      uint64_t v259 = (void *)(a1 - 8 * ((unint64_t)(1021 - v20) >> 10));
      uint64_t v260 = (int *)(*v259 + 4 * (~(1021 - (_WORD)v20) & 0x3FF));
      if (v10 == v15)
      {
LABEL_315:
        uint64_t v261 = *((void *)a3 - 1);
        a3 -= 8;
        uint64_t v10 = (int *)(v261 + 4096);
      }
LABEL_316:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, v12, (uint64_t)v178, v179, (uint64_t)v259, v260, (uint64_t)a3, v10 - 1, (uint64_t)a5);
      return;
    case 5uLL:
      if (v19 >= -3)
      {
        long long v181 = (void *)(a1 + 8 * ((unint64_t)(v20 + 1) >> 10));
        uint64_t v182 = (int *)(*v181 + 4 * ((v20 + 1) & 0x3FF));
        unint64_t v183 = v20 + 2;
LABEL_319:
        unint64_t v262 = (void *)(a1 + 8 * (v183 >> 10));
        uint64_t v263 = (int *)(*v262 + 4 * (v183 & 0x3FF));
        unint64_t v264 = v20 + 3;
        goto LABEL_320;
      }
      long long v181 = (void *)(a1 - 8 * ((unint64_t)(1022 - v20) >> 10));
      uint64_t v182 = (int *)(*v181 + 4 * (~(1022 - (_WORD)v20) & 0x3FF));
      if ((unint64_t)v19 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v183 = 1;
        goto LABEL_319;
      }
      unint64_t v262 = (void *)(a1 - 8 * ((unint64_t)(1021 - v20) >> 10));
      uint64_t v263 = (int *)(*v262 + 4 * (~(1021 - (_WORD)v20) & 0x3FF));
      if ((unint64_t)v19 >= 0xFFFFFFFFFFFFFFF5)
      {
        unint64_t v264 = 1;
LABEL_320:
        uint64_t v265 = (void *)(a1 + 8 * (v264 >> 10));
        uint64_t v266 = (int *)(*v265 + 4 * (v264 & 0x3FF));
        if (v10 != v15) {
          goto LABEL_322;
        }
        goto LABEL_321;
      }
      uint64_t v265 = (void *)(a1 - 8 * ((unint64_t)(1020 - v20) >> 10));
      uint64_t v266 = (int *)(*v265 + 4 * (~(1020 - (_WORD)v20) & 0x3FF));
      if (v10 == v15)
      {
LABEL_321:
        uint64_t v267 = *((void *)a3 - 1);
        a3 -= 8;
        uint64_t v10 = (int *)(v267 + 4096);
      }
LABEL_322:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(a1, v12, (uint64_t)v181, v182, (uint64_t)v262, v263, (uint64_t)v265, v266, (uint64_t)a3, v10 - 1, (uint64_t)a5);
      break;
    default:
      JUMPOUT(0);
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9, int *a10, uint64_t a11)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a3, a4, a5, a6, a7, a8, a11);
  int v15 = *a10;
  int v16 = *a8;
  uint64_t v17 = *(void *)(*(void *)(*(void *)a11 + 16) + 656);
  uint64_t v18 = (*(void *)(v17 + 24 * v15 + 8) - *(void *)(v17 + 24 * v15)) >> 2;
  uint64_t v19 = (*(void *)(v17 + 24 * v16 + 8) - *(void *)(v17 + 24 * v16)) >> 2;
  if ((int)v18 < (int)v19 || v15 < v16 && v18 == v19)
  {
    *a8 = v15;
    *a10 = v16;
    int v20 = *a8;
    int v21 = *a6;
    uint64_t v22 = (*(void *)(v17 + 24 * v20 + 8) - *(void *)(v17 + 24 * v20)) >> 2;
    uint64_t v23 = (*(void *)(v17 + 24 * v21 + 8) - *(void *)(v17 + 24 * v21)) >> 2;
    if ((int)v22 < (int)v23 || v20 < v21 && v22 == v23)
    {
      *a6 = v20;
      *a8 = v21;
      int v24 = *a6;
      int v25 = *a4;
      uint64_t v26 = (*(void *)(v17 + 24 * v24 + 8) - *(void *)(v17 + 24 * v24)) >> 2;
      uint64_t v27 = (*(void *)(v17 + 24 * v25 + 8) - *(void *)(v17 + 24 * v25)) >> 2;
      if ((int)v26 < (int)v27 || v24 < v25 && v26 == v27)
      {
        *a4 = v24;
        *a6 = v25;
        int v28 = *a4;
        int v29 = *a2;
        uint64_t v30 = (*(void *)(v17 + 24 * v28 + 8) - *(void *)(v17 + 24 * v28)) >> 2;
        uint64_t v31 = (*(void *)(v17 + 24 * v29 + 8) - *(void *)(v17 + 24 * v29)) >> 2;
        if ((int)v30 < (int)v31 || v28 < v29 && v30 == v31)
        {
          *a2 = v28;
          *a4 = v29;
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7)
{
  int v7 = *a4;
  int v8 = *a2;
  uint64_t v9 = (*(void *)(a7 + 24 * v7 + 8) - *(void *)(a7 + 24 * v7)) >> 2;
  uint64_t v10 = (*(void *)(a7 + 24 * v8 + 8) - *(void *)(a7 + 24 * v8)) >> 2;
  if ((int)v9 < (int)v10 || (v7 < v8 ? (BOOL v11 = v9 == v10) : (BOOL v11 = 0), v11))
  {
    int v18 = *a6;
    uint64_t v19 = (*(void *)(a7 + 24 * v18 + 8) - *(void *)(a7 + 24 * v18)) >> 2;
    if ((int)v19 < (int)v9 || v18 < v7 && v19 == v9)
    {
      *a2 = v18;
    }
    else
    {
      *a2 = v7;
      *a4 = v8;
      int v20 = *a6;
      uint64_t v21 = (*(void *)(a7 + 24 * v20 + 8) - *(void *)(a7 + 24 * v20)) >> 2;
      if ((int)v21 >= (int)v10 && (v20 >= v8 || v21 != v10)) {
        return;
      }
      *a4 = v20;
    }
    *a6 = v8;
    return;
  }
  int v12 = *a6;
  uint64_t v13 = (*(void *)(a7 + 24 * v12 + 8) - *(void *)(a7 + 24 * v12)) >> 2;
  if ((int)v13 < (int)v9 || v12 < v7 && v13 == v9)
  {
    *a4 = v12;
    *a6 = v7;
    int v14 = *a4;
    int v15 = *a2;
    uint64_t v16 = (*(void *)(a7 + 24 * v14 + 8) - *(void *)(a7 + 24 * v14)) >> 2;
    uint64_t v17 = (*(void *)(a7 + 24 * v15 + 8) - *(void *)(a7 + 24 * v15)) >> 2;
    if ((int)v16 < (int)v17 || v14 < v15 && v16 == v17)
    {
      *a2 = v14;
      *a4 = v15;
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *a1, int *a2, char *a3, int *a4, uint64_t a5)
{
  if (a4 == a2) {
    return 1;
  }
  uint64_t v6 = (uint64_t)a4;
  uint64_t v7 = (uint64_t)a3;
  uint64_t v9 = *(int **)a3;
  uint64_t v10 = (uint64_t)a2 - *(void *)a1;
  uint64_t v11 = v10 >> 2;
  BOOL v12 = 1;
  switch((((uint64_t)a4 - *(void *)a3) >> 2) + ((a3 - a1) << 7) - (v10 >> 2))
  {
    case 0:
    case 1:
      return v12;
    case 2:
      if (v9 == a4) {
        uint64_t v6 = *((void *)a3 - 1) + 4096;
      }
      int v13 = *(_DWORD *)(v6 - 4);
      int v14 = *a2;
      uint64_t v15 = *(void *)(*(void *)(*(void *)a5 + 16) + 656);
      uint64_t v16 = (*(void *)(v15 + 24 * v13 + 8) - *(void *)(v15 + 24 * v13)) >> 2;
      uint64_t v17 = (*(void *)(v15 + 24 * v14 + 8) - *(void *)(v15 + 24 * v14)) >> 2;
      if ((int)v16 < (int)v17 || (BOOL v12 = 1, v13 < v14) && v16 == v17)
      {
        *a2 = v13;
        *(_DWORD *)(v6 - 4) = v14;
        return 1;
      }
      return v12;
    case 3:
      if (v10 < -3)
      {
        int v18 = &a1[-8 * ((unint64_t)(1022 - v11) >> 10)];
        uint64_t v19 = (int *)(*(void *)v18 + 4 * (~(1022 - (_WORD)v11) & 0x3FF));
        if (v9 == (int *)v6)
        {
LABEL_20:
          uint64_t v30 = *(void *)(v7 - 8);
          v7 -= 8;
          uint64_t v6 = v30 + 4096;
        }
      }
      else
      {
        int v18 = &a1[8 * ((unint64_t)(v11 + 1) >> 10)];
        uint64_t v19 = (int *)(*(void *)v18 + 4 * (((_WORD)v11 + 1) & 0x3FF));
        if (v9 == (int *)v6) {
          goto LABEL_20;
        }
      }
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v18, v19, v7, (int *)(v6 - 4), *(void *)(*(void *)(*(void *)a5 + 16) + 656));
      return 1;
    case 4:
      if (v10 >= -3)
      {
        int v24 = &a1[8 * ((unint64_t)(v11 + 1) >> 10)];
        int v25 = (int *)(*(void *)v24 + 4 * ((v11 + 1) & 0x3FF));
        unint64_t v26 = v11 + 2;
        goto LABEL_32;
      }
      int v24 = &a1[-8 * ((unint64_t)(1022 - v11) >> 10)];
      int v25 = (int *)(*(void *)v24 + 4 * (~(1022 - (_WORD)v11) & 0x3FF));
      if ((unint64_t)v10 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v26 = 1;
LABEL_32:
        unint64_t v39 = &a1[8 * (v26 >> 10)];
        uint64_t v40 = (int *)(*(void *)v39 + 4 * (v26 & 0x3FF));
        if (v9 != (int *)v6) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      unint64_t v39 = &a1[-8 * ((unint64_t)(1021 - v11) >> 10)];
      uint64_t v40 = (int *)(*(void *)v39 + 4 * (~(1021 - (_WORD)v11) & 0x3FF));
      if (v9 == (int *)v6)
      {
LABEL_33:
        uint64_t v41 = *(void *)(v7 - 8);
        v7 -= 8;
        uint64_t v6 = v41 + 4096;
      }
LABEL_34:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v24, v25, (uint64_t)v39, v40, v7, (int *)(v6 - 4), a5);
      return 1;
    case 5:
      if (v10 >= -3)
      {
        uint64_t v27 = &a1[8 * ((unint64_t)(v11 + 1) >> 10)];
        int v28 = (int *)(*(void *)v27 + 4 * ((v11 + 1) & 0x3FF));
        unint64_t v29 = v11 + 2;
LABEL_24:
        uint64_t v31 = &a1[8 * (v29 >> 10)];
        unint64_t v32 = (int *)(*(void *)v31 + 4 * (v29 & 0x3FF));
        unint64_t v33 = v11 + 3;
        goto LABEL_25;
      }
      uint64_t v27 = &a1[-8 * ((unint64_t)(1022 - v11) >> 10)];
      int v28 = (int *)(*(void *)v27 + 4 * (~(1022 - (_WORD)v11) & 0x3FF));
      if ((unint64_t)v10 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v29 = 1;
        goto LABEL_24;
      }
      uint64_t v31 = &a1[-8 * ((unint64_t)(1021 - v11) >> 10)];
      unint64_t v32 = (int *)(*(void *)v31 + 4 * (~(1021 - (_WORD)v11) & 0x3FF));
      if ((unint64_t)v10 >= 0xFFFFFFFFFFFFFFF5)
      {
        unint64_t v33 = 1;
LABEL_25:
        uint64_t v34 = &a1[8 * (v33 >> 10)];
        uint64_t v35 = (int *)(*(void *)v34 + 4 * (v33 & 0x3FF));
        if (v9 != (int *)v6) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      uint64_t v34 = &a1[-8 * ((unint64_t)(1020 - v11) >> 10)];
      uint64_t v35 = (int *)(*(void *)v34 + 4 * (~(1020 - (_WORD)v11) & 0x3FF));
      if (v9 == (int *)v6)
      {
LABEL_26:
        uint64_t v36 = *(void *)(v7 - 8);
        v7 -= 8;
        uint64_t v6 = v36 + 4096;
      }
LABEL_27:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>((uint64_t)a1, a2, (uint64_t)v27, v28, (uint64_t)v31, v32, (uint64_t)v34, v35, v7, (int *)(v6 - 4), a5);
      return 1;
    default:
      if (v10 <= -8)
      {
        int v20 = (int **)&a1[-8 * ((unint64_t)(1021 - v11) >> 10)];
        uint64_t v21 = &(*v20)[~(1021 - (_WORD)v11) & 0x3FF];
        unint64_t v23 = 1022 - v11;
        goto LABEL_29;
      }
      int v20 = (int **)&a1[8 * ((unint64_t)(v11 + 2) >> 10)];
      uint64_t v21 = &(*v20)[(v11 + 2) & 0x3FF];
      unint64_t v22 = v11 + 1;
      if (v11 == -1)
      {
        unint64_t v23 = 1023;
LABEL_29:
        unint64_t v37 = &a1[-8 * (v23 >> 10)];
        uint64_t v38 = (int *)(*(void *)v37 + 4 * (~(_WORD)v23 & 0x3FF));
        goto LABEL_38;
      }
      unint64_t v37 = &a1[8 * (v22 >> 10)];
      uint64_t v38 = (int *)(*(void *)v37 + 4 * (v22 & 0x3FF));
LABEL_38:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v37, v38, (uint64_t)v20, v21, *(void *)(*(void *)(*(void *)a5 + 16) + 656));
      uint64_t v42 = *v20;
      uint64_t v43 = (char *)v21 - (char *)*v20;
      uint64_t v44 = v43 >> 2;
      if (v43 < -3)
      {
        unint64_t v49 = 1022 - v44;
        int v46 = &v20[-(v49 >> 10)];
        uint64_t v47 = *v46;
        unint64_t v48 = &(*v46)[~v49 & 0x3FFLL];
        if (v48 == (int *)v6) {
          return 1;
        }
      }
      else
      {
        unint64_t v45 = v44 + 1;
        int v46 = &v20[v45 >> 10];
        uint64_t v47 = *v46;
        unint64_t v48 = &(*v46)[v45 & 0x3FF];
        if (v48 == (int *)v6) {
          return 1;
        }
      }
      int v50 = 0;
      uint64_t v51 = *(void *)(*(void *)(*(void *)a5 + 16) + 656);
      while (1)
      {
        unint64_t v52 = v48;
        unint64_t v53 = v46;
        uint64_t v54 = v47;
        int v55 = *v48;
        int v56 = *v21;
        uint64_t v57 = (*(void *)(v51 + 24 * v55 + 8) - *(void *)(v51 + 24 * v55)) >> 2;
        uint64_t v58 = (*(void *)(v51 + 24 * v56 + 8) - *(void *)(v51 + 24 * v56)) >> 2;
        if ((int)v57 < (int)v58 || (v55 < v56 ? (BOOL v59 = v57 == v58) : (BOOL v59 = 0), v59))
        {
          *unint64_t v52 = v56;
          if (v21 == a2)
          {
LABEL_51:
            uint64_t v21 = a2;
          }
          else
          {
            while (1)
            {
              if (v21 == v42)
              {
                unint64_t v61 = *--v20;
                uint64_t v42 = v61;
                unint64_t v60 = v61 + 1024;
              }
              else
              {
                unint64_t v60 = v21;
              }
              int v64 = *(v60 - 1);
              uint64_t v63 = v60 - 1;
              int v62 = v64;
              uint64_t v65 = (*(void *)(v51 + 24 * v64 + 8) - *(void *)(v51 + 24 * v64)) >> 2;
              if ((int)v57 >= (int)v65 && (v55 >= v62 || v57 != v65)) {
                break;
              }
              int *v21 = v62;
              uint64_t v21 = v63;
              if (v63 == a2) {
                goto LABEL_51;
              }
            }
          }
          int *v21 = v55;
          if (++v50 == 8) {
            break;
          }
        }
        unint64_t v48 = v52 + 1;
        uint64_t v47 = v54;
        int v46 = v53;
        if ((char *)(v52 + 1) - (char *)v54 == 4096)
        {
          int v46 = v53 + 1;
          uint64_t v47 = v53[1];
          unint64_t v48 = v47;
        }
        uint64_t v42 = v54;
        int v20 = v53;
        uint64_t v21 = v52;
        if (v48 == (int *)v6) {
          return 1;
        }
      }
      uint64_t v68 = v52 + 1;
      if ((char *)(v52 + 1) - (char *)v54 == 4096) {
        uint64_t v68 = v53[1];
      }
      BOOL v12 = v68 == (int *)v6;
      break;
  }
  return v12;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a3, a4, a5, a6, *(void *)(*(void *)(*(void *)a9 + 16) + 656));
  int v13 = *a8;
  int v14 = *a6;
  uint64_t v15 = *(void *)(*(void *)(*(void *)a9 + 16) + 656);
  uint64_t v16 = (*(void *)(v15 + 24 * v13 + 8) - *(void *)(v15 + 24 * v13)) >> 2;
  uint64_t v17 = (*(void *)(v15 + 24 * v14 + 8) - *(void *)(v15 + 24 * v14)) >> 2;
  if ((int)v16 < (int)v17 || v13 < v14 && v16 == v17)
  {
    *a6 = v13;
    *a8 = v14;
    int v18 = *a6;
    int v19 = *a4;
    uint64_t v20 = (*(void *)(v15 + 24 * v18 + 8) - *(void *)(v15 + 24 * v18)) >> 2;
    uint64_t v21 = (*(void *)(v15 + 24 * v19 + 8) - *(void *)(v15 + 24 * v19)) >> 2;
    if ((int)v20 < (int)v21 || v18 < v19 && v20 == v21)
    {
      *a4 = v18;
      *a6 = v19;
      int v22 = *a4;
      int v23 = *a2;
      uint64_t v24 = (*(void *)(v15 + 24 * v22 + 8) - *(void *)(v15 + 24 * v22)) >> 2;
      uint64_t v25 = (*(void *)(v15 + 24 * v23 + 8) - *(void *)(v15 + 24 * v23)) >> 2;
      if ((int)v24 < (int)v25 || v22 < v23 && v24 == v25)
      {
        *a2 = v22;
        *a4 = v23;
      }
    }
  }
}

char *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *result, int *a2, uint64_t a3, uint64_t a4, char *a5, int *a6)
{
  if (a6 == a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a4 - 2;
    if (a4 < 2) {
      return result;
    }
  }
  else
  {
    uint64_t v6 = (((uint64_t)a6 - *(void *)a5) >> 2) + ((a5 - result) << 7) - (((uint64_t)a2 - *(void *)result) >> 2);
    unint64_t v7 = a4 - 2;
    if (a4 < 2) {
      return result;
    }
  }
  uint64_t v8 = v7 >> 1;
  if (v8 < v6) {
    return result;
  }
  uint64_t v9 = 2 * v6;
  uint64_t v10 = (2 * v6) | 1;
  uint64_t v11 = ((uint64_t)a2 - *(void *)result) >> 2;
  unint64_t v12 = v11 + v10;
  if (v11 + v10 >= 1)
  {
    int v13 = &result[8 * (v12 >> 10)];
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = (int *)(*(void *)v13 + 4 * (v12 & 0x3FF));
    uint64_t v16 = v9 + 2;
    if (v9 + 2 < a4) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v21 = *(void *)(*(void *)(a3 + 16) + 656);
    goto LABEL_22;
  }
  unint64_t v20 = 1023 - v12;
  int v13 = &result[-8 * (v20 >> 10)];
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = (int *)(*(void *)v13 + 4 * (~(_WORD)v20 & 0x3FF));
  uint64_t v16 = v9 + 2;
  if (v9 + 2 >= a4) {
    goto LABEL_11;
  }
LABEL_8:
  int v17 = *v15;
  uint64_t v18 = ((uint64_t)v15 - v14) >> 2;
  if ((uint64_t)v15 - v14 < -3) {
    int v19 = (int *)(*(void *)&v13[-8 * ((unint64_t)(1022 - v18) >> 10)] + 4 * (~(1022 - (_WORD)v18) & 0x3FF));
  }
  else {
    int v19 = (int *)(*(void *)&v13[((unint64_t)(v18 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v18 + 1) & 0x3FF));
  }
  int v22 = *v19;
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) + 656);
  uint64_t v23 = (*(void *)(v21 + 24 * v17 + 8) - *(void *)(v21 + 24 * v17)) >> 2;
  uint64_t v24 = (*(void *)(v21 + 24 * v22 + 8) - *(void *)(v21 + 24 * v22)) >> 2;
  if ((int)v23 < (int)v24 || (v17 < v22 ? (BOOL v25 = v23 == v24) : (BOOL v25 = 0), v25))
  {
    if ((int *)((char *)++v15 - v14) == (int *)4096) {
      uint64_t v15 = (int *)*((void *)v13 + 1);
    }
    uint64_t v10 = v16;
  }
LABEL_22:
  int v26 = *v15;
  int v27 = *a6;
  uint64_t v28 = (*(void *)(v21 + 24 * v26 + 8) - *(void *)(v21 + 24 * v26)) >> 2;
  uint64_t v29 = (*(void *)(v21 + 24 * v27 + 8) - *(void *)(v21 + 24 * v27)) >> 2;
  if ((int)v28 >= (int)v29 && (v26 >= v27 || v28 != v29))
  {
    while (1)
    {
      *a6 = v26;
      a6 = v15;
      if (v8 < v10)
      {
LABEL_49:
        *a6 = v27;
        return result;
      }
      uint64_t v31 = (2 * v10) | 1;
      unint64_t v32 = v31 + v11;
      if (v31 + v11 < 1)
      {
        unint64_t v35 = 1023 - v32;
        unint64_t v33 = &result[-8 * (v35 >> 10)];
        uint64_t v34 = *(void *)v33;
        uint64_t v15 = (int *)(*(void *)v33 + 4 * (~v35 & 0x3FFLL));
        uint64_t v10 = 2 * v10 + 2;
        if (v10 >= a4) {
          goto LABEL_40;
        }
      }
      else
      {
        unint64_t v33 = &result[8 * (v32 >> 10)];
        uint64_t v34 = *(void *)v33;
        uint64_t v15 = (int *)(*(void *)v33 + 4 * (v32 & 0x3FF));
        uint64_t v10 = 2 * v10 + 2;
        if (v10 >= a4) {
          goto LABEL_40;
        }
      }
      uint64_t v36 = ((uint64_t)v15 - v34) >> 2;
      if ((uint64_t)v15 - v34 < -3) {
        unint64_t v37 = (int *)(*(void *)&v33[-8 * ((unint64_t)(1022 - v36) >> 10)] + 4
      }
                                                                                   * (~(1022 - (_WORD)v36) & 0x3FF));
      else {
        unint64_t v37 = (int *)(*(void *)&v33[((unint64_t)(v36 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4
      }
                                                                                                * ((v36 + 1) & 0x3FF));
      int v38 = *v15;
      int v39 = *v37;
      uint64_t v40 = (*(void *)(v21 + 24 * v38 + 8) - *(void *)(v21 + 24 * v38)) >> 2;
      uint64_t v41 = (*(void *)(v21 + 24 * v39 + 8) - *(void *)(v21 + 24 * v39)) >> 2;
      if ((int)v40 < (int)v41 || (v38 < v39 ? (BOOL v42 = v40 == v41) : (BOOL v42 = 0), v42))
      {
        if ((int *)((char *)++v15 - v34) == (int *)4096) {
          uint64_t v15 = (int *)*((void *)v33 + 1);
        }
        goto LABEL_43;
      }
LABEL_40:
      uint64_t v10 = v31;
LABEL_43:
      int v26 = *v15;
      uint64_t v43 = (*(void *)(v21 + 24 * v26 + 8) - *(void *)(v21 + 24 * v26)) >> 2;
      if ((int)v43 >= (int)v29 && (v26 >= v27 || v43 != v29)) {
        continue;
      }
      goto LABEL_49;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(char **a1, int *a2, int **a3, int *a4, uint64_t a5, uint64_t a6, char a7)
{
  BOOL v7 = a4 > a2;
  if (a4 == a2) {
    return;
  }
  uint64_t v10 = a4;
  unint64_t v12 = a2;
  uint64_t v14 = a6 - 1;
  while (1)
  {
    uint64_t v15 = *a3;
    uint64_t v16 = (char *)v10 - (char *)*a3;
    uint64_t v17 = v16 >> 2;
    uint64_t v18 = *a1;
    uint64_t v19 = (char *)v12 - *a1;
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = (v16 >> 2) + (((char *)a3 - (char *)a1) << 7) - (v19 >> 2);
    if (!v7) {
      break;
    }
    if ((uint64_t)v21 <= 23)
    {
      if (a7)
      {
        for (unint64_t i = v12 + 1; ; ++i)
        {
          if ((char *)i - v18 == 4096)
          {
            uint64_t v82 = a1[1];
            ++a1;
            uint64_t v18 = v82;
            unint64_t i = (int *)v82;
          }
          if (i == v10) {
            return;
          }
          uint64_t v83 = a1;
          if (i == (int *)v18)
          {
            uint64_t v83 = a1 - 1;
            uint64_t v84 = (int *)(*(a1 - 1) + 4092);
            int v85 = *v84;
            int v86 = *i;
            if (*i >= *v84) {
              continue;
            }
          }
          else
          {
            uint64_t v84 = i - 1;
            int v85 = *(i - 1);
            int v86 = *i;
            if (*i >= v85) {
              continue;
            }
          }
          uint64_t v87 = i;
          while (1)
          {
            *uint64_t v87 = v85;
            if (v84 == v12) {
              break;
            }
            int v81 = v84;
            if (v84 == (int *)*v83)
            {
              uint64_t v88 = (uint64_t)*--v83;
              uint64_t v84 = (int *)(v88 + 4092);
              int v85 = *(_DWORD *)(v88 + 4092);
              uint64_t v87 = v81;
              if (v86 >= v85) {
                goto LABEL_118;
              }
            }
            else
            {
              --v84;
              int v85 = *(v81 - 1);
              uint64_t v87 = v81;
              if (v86 >= v85) {
                goto LABEL_118;
              }
            }
          }
          int v81 = v12;
LABEL_118:
          *int v81 = v86;
        }
      }
      if (v19 >= -3)
      {
        __int16 v109 = v20 + 1;
        uint64_t v110 = &a1[(unint64_t)(v20 + 1) >> 10];
      }
      else
      {
        unint64_t v108 = 1022 - v20;
        __int16 v109 = ~(_WORD)v108;
        uint64_t v110 = &a1[-(v108 >> 10)];
      }
      uint64_t v111 = *v110;
      uint64_t v112 = (int *)&(*v110)[4 * (v109 & 0x3FF)];
      if (v112 == v10) {
        return;
      }
      while (2)
      {
        uint64_t v113 = ((char *)v112 - v111) >> 2;
        if ((char *)v112 - v111 >= 5)
        {
          __int16 v115 = v113 - 1;
          uint64_t v116 = &v110[(unint64_t)(v113 - 1) >> 10];
        }
        else
        {
          unint64_t v114 = 1024 - v113;
          __int16 v115 = ~(_WORD)v114;
          uint64_t v116 = &v110[-(v114 >> 10)];
        }
        BOOL v117 = (int *)*v116;
        unsigned int v118 = (int *)&(*v116)[4 * (v115 & 0x3FF)];
        int v119 = *v112;
        int v120 = *v118;
        if (*v112 >= *v118)
        {
          if ((char *)++v112 - v111 == 4096) {
            goto LABEL_189;
          }
        }
        else
        {
          uint64_t v121 = v112;
          do
          {
            while (1)
            {
              int v123 = v118;
              int *v121 = v120;
              if (v118 != v117) {
                break;
              }
              uint64_t v122 = (int *)*--v116;
              BOOL v117 = v122;
              unsigned int v118 = v122 + 1023;
              int v120 = v122[1023];
              uint64_t v121 = v123;
              if (v119 >= v120) {
                goto LABEL_188;
              }
            }
            --v118;
            int v120 = *(v123 - 1);
            uint64_t v121 = v123;
          }
          while (v119 < v120);
LABEL_188:
          int *v123 = v119;
          if ((char *)++v112 - v111 == 4096)
          {
LABEL_189:
            int v124 = (int *)v110[1];
            ++v110;
            uint64_t v111 = (char *)v124;
            uint64_t v112 = v124;
          }
        }
        if (v112 == v10) {
          return;
        }
        continue;
      }
    }
    if (v14 == -1)
    {
      std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v12, a3, v10, a3, v10, a5);
      return;
    }
    unint64_t v22 = v21 >> 1;
    uint64_t v23 = v20 + (v21 >> 1);
    if (v21 < 0x81)
    {
      if (v23 < 1)
      {
        uint64_t v30 = (int *)&a1[-((unint64_t)(1023 - v23) >> 10)][4 * (~(1023 - (_WORD)v23) & 0x3FF)];
        if (v16 < 5) {
          goto LABEL_27;
        }
LABEL_17:
        uint64_t v31 = &(*(int **)((char *)a3 + (((unint64_t)(v17 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v17 - 1) & 0x3FF];
        int v32 = *v12;
        int v33 = *v30;
        int v34 = *v31;
        if (*v12 >= *v30) {
          goto LABEL_18;
        }
LABEL_28:
        if (v34 >= v32)
        {
          int *v30 = v32;
          *unint64_t v12 = v33;
          if (*v31 >= v33) {
            goto LABEL_48;
          }
          *unint64_t v12 = *v31;
        }
        else
        {
          int *v30 = v34;
        }
        int *v31 = v33;
      }
      else
      {
        uint64_t v30 = (int *)&(*(char **)((char *)a1 + (((unint64_t)v23 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v23 & 0x3FF)];
        if (v16 >= 5) {
          goto LABEL_17;
        }
LABEL_27:
        uint64_t v31 = &a3[-((unint64_t)(1024 - v17) >> 10)][~(1024 - (_WORD)v17) & 0x3FF];
        int v32 = *v12;
        int v33 = *v30;
        int v34 = *v31;
        if (*v12 < *v30) {
          goto LABEL_28;
        }
LABEL_18:
        if (v34 < v32)
        {
          *unint64_t v12 = v34;
          int *v31 = v32;
          int v35 = *v30;
          if (*v12 < *v30)
          {
            int *v30 = *v12;
            *unint64_t v12 = v35;
            if (a7) {
              goto LABEL_92;
            }
            goto LABEL_87;
          }
        }
      }
LABEL_48:
      if (a7) {
        goto LABEL_92;
      }
      goto LABEL_87;
    }
    if (v23 < 1)
    {
      uint64_t v24 = (int *)&a1[-((unint64_t)(1023 - v23) >> 10)][4 * (~(1023 - (_WORD)v23) & 0x3FF)];
      if (v16 >= 5)
      {
LABEL_11:
        BOOL v25 = &(*(int **)((char *)a3 + (((unint64_t)(v17 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v17 - 1) & 0x3FF];
        int v26 = *v24;
        int v27 = *v12;
        int v28 = *v25;
        if (*v24 >= *v12) {
          goto LABEL_12;
        }
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v24 = (int *)&(*(char **)((char *)a1 + (((unint64_t)v23 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v23 & 0x3FF)];
      if (v16 >= 5) {
        goto LABEL_11;
      }
    }
    BOOL v25 = &a3[-((unint64_t)(1024 - v17) >> 10)][~(1024 - (_WORD)v17) & 0x3FF];
    int v26 = *v24;
    int v27 = *v12;
    int v28 = *v25;
    if (*v24 >= *v12)
    {
LABEL_12:
      if (v28 < v26)
      {
        *uint64_t v24 = v28;
        *BOOL v25 = v26;
        int v29 = *v12;
        if (*v24 < *v12)
        {
          *unint64_t v12 = *v24;
          *uint64_t v24 = v29;
        }
      }
      goto LABEL_33;
    }
LABEL_24:
    if (v28 >= v26)
    {
      *unint64_t v12 = v26;
      *uint64_t v24 = v27;
      if (*v25 >= v27) {
        goto LABEL_33;
      }
      *uint64_t v24 = *v25;
    }
    else
    {
      *unint64_t v12 = v28;
    }
    *BOOL v25 = v27;
LABEL_33:
    if (v19 < -3)
    {
      uint64_t v36 = &a1[-((unint64_t)(1022 - v20) >> 10)][4 * (~(1022 - (_WORD)v20) & 0x3FF)];
      uint64_t v37 = v22 + v20 - 1;
      unint64_t v38 = (unint64_t)v37 >> 7;
      if (v37 < 1)
      {
LABEL_35:
        int v39 = &a1[-((unint64_t)(1023 - v37) >> 10)][4 * (~(1023 - (_WORD)v37) & 0x3FF)];
        if (v16 < 9) {
          goto LABEL_36;
        }
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v36 = &(*(char **)((char *)a1 + (((unint64_t)(v20 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4
                                                                                                 * ((v20 + 1) & 0x3FF)];
      uint64_t v37 = v22 + v20 - 1;
      unint64_t v38 = (unint64_t)v37 >> 7;
      if (v37 < 1) {
        goto LABEL_35;
      }
    }
    int v39 = &(*(char **)((char *)a1 + (v38 & 0x1FFFFFFFFFFFFF8)))[4 * (v37 & 0x3FF)];
    if (v16 < 9)
    {
LABEL_36:
      uint64_t v40 = &a3[-((unint64_t)(1025 - v17) >> 10)][~(1025 - (_WORD)v17) & 0x3FF];
      int v41 = *(_DWORD *)v39;
      int v42 = *(_DWORD *)v36;
      int v43 = *v40;
      if (*(_DWORD *)v39 >= *(_DWORD *)v36) {
        goto LABEL_37;
      }
      goto LABEL_43;
    }
LABEL_42:
    uint64_t v40 = &(*(int **)((char *)a3 + (((unint64_t)(v17 - 2) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v17 - 2) & 0x3FF];
    int v41 = *(_DWORD *)v39;
    int v42 = *(_DWORD *)v36;
    int v43 = *v40;
    if (*(_DWORD *)v39 >= *(_DWORD *)v36)
    {
LABEL_37:
      if (v43 < v41)
      {
        *(_DWORD *)int v39 = v43;
        int *v40 = v41;
        int v44 = *(_DWORD *)v36;
        if (*(_DWORD *)v39 < *(_DWORD *)v36)
        {
          *(_DWORD *)uint64_t v36 = *(_DWORD *)v39;
          *(_DWORD *)int v39 = v44;
        }
      }
      goto LABEL_53;
    }
LABEL_43:
    if (v43 >= v41)
    {
      *(_DWORD *)uint64_t v36 = v41;
      *(_DWORD *)int v39 = v42;
      if (*v40 >= v42) {
        goto LABEL_53;
      }
      *(_DWORD *)int v39 = *v40;
    }
    else
    {
      *(_DWORD *)uint64_t v36 = v43;
    }
    int *v40 = v42;
LABEL_53:
    if (v19 < -7)
    {
      unint64_t v45 = &a1[-((unint64_t)(1021 - v20) >> 10)][4 * (~(1021 - (_WORD)v20) & 0x3FF)];
      uint64_t v46 = v22 + v20 + 1;
      unint64_t v47 = (unint64_t)v46 >> 7;
      if (v46 < 1)
      {
LABEL_55:
        unint64_t v48 = &a1[-((unint64_t)(1023 - v46) >> 10)][4 * (~(1023 - (_WORD)v46) & 0x3FF)];
        if (v16 < 13) {
          goto LABEL_56;
        }
        goto LABEL_62;
      }
    }
    else
    {
      unint64_t v45 = &(*(char **)((char *)a1 + (((unint64_t)(v20 + 2) >> 7) & 0x1FFFFFFFFFFFFF8)))[4
                                                                                                 * ((v20 + 2) & 0x3FF)];
      uint64_t v46 = v22 + v20 + 1;
      unint64_t v47 = (unint64_t)v46 >> 7;
      if (v46 < 1) {
        goto LABEL_55;
      }
    }
    unint64_t v48 = &(*(char **)((char *)a1 + (v47 & 0x1FFFFFFFFFFFFF8)))[4 * (v46 & 0x3FF)];
    if (v16 < 13)
    {
LABEL_56:
      unint64_t v49 = &a3[-((unint64_t)(1026 - v17) >> 10)][~(1026 - (_WORD)v17) & 0x3FF];
      int v50 = *(_DWORD *)v48;
      int v51 = *(_DWORD *)v45;
      int v52 = *v49;
      if (*(_DWORD *)v48 >= *(_DWORD *)v45) {
        goto LABEL_57;
      }
      goto LABEL_63;
    }
LABEL_62:
    unint64_t v49 = &(*(int **)((char *)a3 + (((unint64_t)(v17 - 3) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v17 - 3) & 0x3FF];
    int v50 = *(_DWORD *)v48;
    int v51 = *(_DWORD *)v45;
    int v52 = *v49;
    if (*(_DWORD *)v48 >= *(_DWORD *)v45)
    {
LABEL_57:
      if (v52 < v50)
      {
        *(_DWORD *)unint64_t v48 = v52;
        *unint64_t v49 = v50;
        int v53 = *(_DWORD *)v45;
        if (*(_DWORD *)v48 < *(_DWORD *)v45)
        {
          *(_DWORD *)unint64_t v45 = *(_DWORD *)v48;
          *(_DWORD *)unint64_t v48 = v53;
        }
      }
      goto LABEL_68;
    }
LABEL_63:
    if (v52 >= v50)
    {
      *(_DWORD *)unint64_t v45 = v50;
      *(_DWORD *)unint64_t v48 = v51;
      if (*v49 >= v51) {
        goto LABEL_68;
      }
      *(_DWORD *)unint64_t v48 = *v49;
    }
    else
    {
      *(_DWORD *)unint64_t v45 = v52;
    }
    *unint64_t v49 = v51;
LABEL_68:
    if (v37 < 1)
    {
      uint64_t v54 = &a1[-((unint64_t)(1023 - v37) >> 10)][4 * (~(1023 - (_WORD)v37) & 0x3FF)];
      if (v23 >= 1)
      {
LABEL_70:
        int v55 = &(*(char **)((char *)a1 + (((unint64_t)v23 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v23 & 0x3FF)];
        if (v46 >= 1) {
          goto LABEL_71;
        }
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v54 = &(*(char **)((char *)a1 + (v38 & 0x1FFFFFFFFFFFFF8)))[4 * (v37 & 0x3FF)];
      if (v23 >= 1) {
        goto LABEL_70;
      }
    }
    int v55 = &a1[-((unint64_t)(1023 - v23) >> 10)][4 * (~(1023 - (_WORD)v23) & 0x3FF)];
    if (v46 >= 1)
    {
LABEL_71:
      int v56 = &(*(char **)((char *)a1 + (v47 & 0x1FFFFFFFFFFFFF8)))[4 * (v46 & 0x3FF)];
      int v57 = *(_DWORD *)v55;
      int v58 = *(_DWORD *)v54;
      int v59 = *(_DWORD *)v56;
      if (*(_DWORD *)v55 >= *(_DWORD *)v54) {
        goto LABEL_77;
      }
      goto LABEL_72;
    }
LABEL_76:
    int v56 = &a1[-((unint64_t)(1023 - v46) >> 10)][4 * (~(1023 - (_WORD)v46) & 0x3FF)];
    int v57 = *(_DWORD *)v55;
    int v58 = *(_DWORD *)v54;
    int v59 = *(_DWORD *)v56;
    if (*(_DWORD *)v55 >= *(_DWORD *)v54)
    {
LABEL_77:
      if (v59 < v57)
      {
        *(_DWORD *)int v55 = v59;
        *(_DWORD *)int v56 = v57;
        int v60 = *(_DWORD *)v54;
        if (*(_DWORD *)v55 < *(_DWORD *)v54)
        {
          *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
          *(_DWORD *)int v55 = v60;
        }
      }
      goto LABEL_83;
    }
LABEL_72:
    if (v59 >= v57)
    {
      *(_DWORD *)uint64_t v54 = v57;
      *(_DWORD *)int v55 = v58;
      if (*(_DWORD *)v56 >= v58) {
        goto LABEL_83;
      }
      *(_DWORD *)int v55 = *(_DWORD *)v56;
    }
    else
    {
      *(_DWORD *)uint64_t v54 = v59;
    }
    *(_DWORD *)int v56 = v58;
LABEL_83:
    if (v23 < 1)
    {
      uint64_t v63 = (int *)&a1[-((unint64_t)(1023 - v23) >> 10)][4 * (~(1023 - (_WORD)v23) & 0x3FF)];
      int v64 = *v12;
      *unint64_t v12 = *v63;
      *uint64_t v63 = v64;
      if (a7) {
        goto LABEL_92;
      }
    }
    else
    {
      unint64_t v61 = (int *)&(*(char **)((char *)a1 + (((unint64_t)v23 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v23 & 0x3FF)];
      int v62 = *v12;
      *unint64_t v12 = *v61;
      *unint64_t v61 = v62;
      if (a7) {
        goto LABEL_92;
      }
    }
LABEL_87:
    if (v19 < 5)
    {
      if (*(_DWORD *)&a1[-((unint64_t)(1024 - v20) >> 10)][4 * (~(1024 - (_WORD)v20) & 0x3FF)] >= *v12) {
        goto LABEL_89;
      }
LABEL_92:
      std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__less<void,void> &>(a1, (char *)v12, (char **)a3, (char *)v10, (uint64_t)&v126);
      unint64_t v66 = v126;
      uint64_t v67 = v127;
      if (!v128) {
        goto LABEL_96;
      }
      BOOL v68 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v12, v126, v127);
      uint64_t v69 = v67 - *(void *)v66;
      uint64_t v70 = v69 >> 2;
      if (v69 < -3)
      {
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(&v66[-8 * ((unint64_t)(1022 - v70) >> 10)], (int *)(*(void *)&v66[-8 * ((unint64_t)(1022 - v70) >> 10)]+ 4 * (~(1022 - (_WORD)v70) & 0x3FF)), (char *)a3, (uint64_t)v10))
        {
LABEL_101:
          a3 = (int **)v66;
          uint64_t v10 = (int *)v67;
          if (v68) {
            return;
          }
          goto LABEL_102;
        }
      }
      else if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(&v66[8 * ((unint64_t)(v70 + 1) >> 10)], (int *)(*(void *)&v66[8 * ((unint64_t)(v70 + 1) >> 10)] + 4 * ((v70 + 1) & 0x3FF)), (char *)a3, (uint64_t)v10))
      {
        goto LABEL_101;
      }
      if (!v68)
      {
LABEL_96:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(a1, v12, v66, v67, a5, v14, a7 & 1);
        a7 = 0;
      }
      unint64_t v12 = (int *)(v67 + 4);
      if (v67 + 4 - *(void *)v66 == 4096)
      {
        uint64_t v71 = (int *)*((void *)v66 + 1);
        v66 += 8;
        unint64_t v12 = v71;
      }
      a1 = (char **)v66;
LABEL_102:
      --v14;
      BOOL v7 = v10 > v12;
      if (v10 == v12) {
        return;
      }
    }
    else
    {
      if (*(_DWORD *)&(*(char **)((char *)a1 + (((unint64_t)(v20 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v20 - 1) & 0x3FF)] < *v12) {
        goto LABEL_92;
      }
LABEL_89:
      a1 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__less<void,void> &>(a1, (char *)v12, a3, (char *)v10);
      unint64_t v12 = v65;
      a7 = 0;
      --v14;
      BOOL v7 = v10 > v65;
      if (v10 == v65) {
        return;
      }
    }
  }
  switch(v21)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      if (v10 == v15) {
        uint64_t v10 = *(a3 - 1) + 1024;
      }
      int v72 = *(v10 - 1);
      int v73 = *v12;
      if (v72 < *v12)
      {
        *unint64_t v12 = v72;
        *(v10 - 1) = v73;
      }
      return;
    case 3uLL:
      if (v19 < -3)
      {
        uint64_t v74 = (int *)&a1[-((unint64_t)(1022 - v20) >> 10)][4 * (~(1022 - (_WORD)v20) & 0x3FF)];
        if (v10 != v15) {
          goto LABEL_136;
        }
      }
      else
      {
        uint64_t v74 = (int *)&(*(char **)((char *)a1 + (((unint64_t)(v20 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v20 + 1) & 0x3FF)];
        if (v10 != v15) {
          goto LABEL_136;
        }
      }
      uint64_t v10 = *(a3 - 1) + 1024;
LABEL_136:
      int v89 = *v74;
      int v90 = *v12;
      int v91 = *(v10 - 1);
      if (*v74 >= *v12)
      {
        if (v91 < v89)
        {
          int *v74 = v91;
          *(v10 - 1) = v89;
          int v98 = *v12;
          if (*v74 < *v12)
          {
            *unint64_t v12 = *v74;
            int *v74 = v98;
          }
        }
      }
      else if (v91 >= v89)
      {
        *unint64_t v12 = v89;
        int *v74 = v90;
        int v104 = *(v10 - 1);
        if (v104 < v90)
        {
          int *v74 = v104;
          *(v10 - 1) = v90;
        }
      }
      else
      {
        *unint64_t v12 = v91;
        *(v10 - 1) = v90;
      }
      return;
    case 4uLL:
      if (v19 >= -3)
      {
        uint64_t v78 = (int *)&(*(char **)((char *)a1 + (((unint64_t)(v20 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v20 + 1) & 0x3FF)];
        unint64_t v79 = v20 + 2;
        goto LABEL_150;
      }
      uint64_t v78 = (int *)&a1[-((unint64_t)(1022 - v20) >> 10)][4 * (~(1022 - (_WORD)v20) & 0x3FF)];
      if ((unint64_t)v19 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v79 = 1;
LABEL_150:
        uint64_t v99 = (int *)&(*(char **)((char *)a1 + ((v79 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v79 & 0x3FF)];
        if (v10 != v15) {
          goto LABEL_152;
        }
        goto LABEL_151;
      }
      uint64_t v99 = (int *)&a1[-((unint64_t)(1021 - v20) >> 10)][4 * (~(1021 - (_WORD)v20) & 0x3FF)];
      if (v10 == v15) {
LABEL_151:
      }
        uint64_t v10 = *(a3 - 1) + 1024;
LABEL_152:
      int v100 = *v78;
      int v101 = *v12;
      int v102 = *v99;
      if (*v78 >= *v12)
      {
        if (v102 >= v100)
        {
          int v100 = *v99;
        }
        else
        {
          *uint64_t v78 = v102;
          *uint64_t v99 = v100;
          int v103 = *v12;
          if (*v78 < *v12)
          {
            *unint64_t v12 = *v78;
            *uint64_t v78 = v103;
            int v100 = *v99;
          }
        }
      }
      else
      {
        if (v102 >= v100)
        {
          *unint64_t v12 = v100;
          *uint64_t v78 = v101;
          int v100 = *v99;
          if (*v99 >= v101) {
            goto LABEL_171;
          }
          *uint64_t v78 = v100;
        }
        else
        {
          *unint64_t v12 = v102;
        }
        *uint64_t v99 = v101;
        int v100 = v101;
      }
LABEL_171:
      int v105 = *(v10 - 1);
      if (v105 < v100)
      {
        *uint64_t v99 = v105;
        *(v10 - 1) = v100;
        int v106 = *v78;
        if (*v99 < *v78)
        {
          *uint64_t v78 = *v99;
          *uint64_t v99 = v106;
          int v107 = *v12;
          if (*v78 < *v12)
          {
            *unint64_t v12 = *v78;
            *uint64_t v78 = v107;
          }
        }
      }
      return;
    case 5uLL:
      if (v19 >= -3)
      {
        unint64_t v75 = &a1[(unint64_t)(v20 + 1) >> 10];
        uint64_t v76 = (int *)&(*v75)[4 * ((v20 + 1) & 0x3FF)];
        unint64_t v77 = v20 + 2;
LABEL_141:
        uint64_t v92 = &a1[v77 >> 10];
        unint64_t v93 = (int *)&(*v92)[4 * (v77 & 0x3FF)];
        unint64_t v94 = v20 + 3;
        goto LABEL_142;
      }
      unint64_t v75 = &a1[-((unint64_t)(1022 - v20) >> 10)];
      uint64_t v76 = (int *)&(*v75)[4 * (~(1022 - (_WORD)v20) & 0x3FF)];
      if ((unint64_t)v19 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v77 = 1;
        goto LABEL_141;
      }
      uint64_t v92 = &a1[-((unint64_t)(1021 - v20) >> 10)];
      unint64_t v93 = (int *)&(*v92)[4 * (~(1021 - (_WORD)v20) & 0x3FF)];
      if ((unint64_t)v19 >= 0xFFFFFFFFFFFFFFF5)
      {
        unint64_t v94 = 1;
LABEL_142:
        uint64_t v95 = &a1[v94 >> 10];
        uint64_t v96 = (int *)&(*v95)[4 * (v94 & 0x3FF)];
        if (v10 != v15) {
          goto LABEL_144;
        }
        goto LABEL_143;
      }
      unint64_t v125 = 1020 - v20;
      uint64_t v95 = &a1[-(v125 >> 10)];
      uint64_t v96 = (int *)&(*v95)[4 * (~(_WORD)v125 & 0x3FF)];
      if (v10 == v15)
      {
LABEL_143:
        uint64_t v97 = (uint64_t)*--a3;
        uint64_t v10 = (int *)(v97 + 4096);
      }
LABEL_144:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, v12, (uint64_t)v75, v76, (uint64_t)v92, v93, (uint64_t)v95, v96, (uint64_t)a3, v10 - 1);
      break;
    default:
      JUMPOUT(0);
  }
}

char **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__less<void,void> &>(char **result, char *a2, void *a3, char *a4)
{
  int v4 = *(_DWORD *)a2;
  uint64_t v5 = (char *)*a3;
  uint64_t v6 = (uint64_t)&a4[-*a3];
  uint64_t v7 = v6 >> 2;
  if (v6 < 5)
  {
    uint64_t v8 = *result;
    if (v4 >= *(_DWORD *)(a3[-((unint64_t)(1024 - v7) >> 10)] + 4 * (~(1024 - (_WORD)v7) & 0x3FF)))
    {
LABEL_3:
      uint64_t v9 = a2;
      do
      {
        v9 += 4;
        if (v9 - v8 == 4096)
        {
          uint64_t v10 = result[1];
          ++result;
          uint64_t v8 = v10;
          uint64_t v9 = v10;
        }
      }
      while ((result < a3 || result == a3 && v9 < a4) && v4 >= *(_DWORD *)v9);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = *result;
    if (v4 >= *(_DWORD *)(*(void *)((char *)a3 + (((unint64_t)(v7 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((v7 - 1) & 0x3FF)))
      goto LABEL_3;
  }
  uint64_t v9 = a2;
  do
  {
    v9 += 4;
    if (v9 - v8 == 4096)
    {
      uint64_t v20 = result[1];
      ++result;
      uint64_t v8 = v20;
      uint64_t v9 = v20;
    }
  }
  while (v4 >= *(_DWORD *)v9);
LABEL_10:
  if (result < a3 || result == a3 && v9 < a4)
  {
    do
    {
      if (a4 == v5)
      {
        unint64_t v12 = (char *)*--a3;
        uint64_t v5 = v12;
        a4 = v12 + 4096;
      }
      int v11 = *((_DWORD *)a4 - 1);
      a4 -= 4;
    }
    while (v4 < v11);
  }
  while (result < a3 || result == a3 && v9 < a4)
  {
    int v13 = *(_DWORD *)v9;
    *(_DWORD *)uint64_t v9 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v13;
    do
    {
      v9 += 4;
      if (v9 - v8 == 4096)
      {
        uint64_t v14 = result[1];
        ++result;
        uint64_t v8 = v14;
        uint64_t v9 = v14;
      }
    }
    while (v4 >= *(_DWORD *)v9);
    do
    {
      if (a4 == v5)
      {
        uint64_t v16 = (char *)*--a3;
        uint64_t v5 = v16;
        a4 = v16 + 4096;
      }
      int v15 = *((_DWORD *)a4 - 1);
      a4 -= 4;
    }
    while (v4 < v15);
  }
  uint64_t v17 = v9 - v8;
  uint64_t v18 = v17 >> 2;
  if (v17 >= 5)
  {
    uint64_t v19 = &(*(char **)((char *)result + (((unint64_t)(v18 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v18 - 1) & 0x3FF)];
    if (v19 == a2) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  uint64_t v19 = &result[-((unint64_t)(1024 - v18) >> 10)][4 * (~(1024 - (_WORD)v18) & 0x3FF)];
  if (v19 != a2) {
LABEL_36:
  }
    *(_DWORD *)a2 = *(_DWORD *)v19;
LABEL_37:
  *(_DWORD *)uint64_t v19 = v4;
  return result;
}

char **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__less<void,void> &>@<X0>(char **result@<X0>, char *a2@<X1>, char **a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = *(_DWORD *)a2;
  uint64_t v6 = *result;
  uint64_t v7 = a2;
  do
  {
    v7 += 4;
    if (v7 - v6 == 4096)
    {
      uint64_t v9 = result[1];
      ++result;
      uint64_t v6 = v9;
      uint64_t v7 = v9;
    }
    int v8 = *(_DWORD *)v7;
  }
  while (*(_DWORD *)v7 < v5);
  uint64_t v10 = (v7 - v6) >> 2;
  if (v7 - v6 >= 5)
  {
    if (&(*(char **)((char *)result + (((unint64_t)(v10 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v10 - 1) & 0x3FF)] == a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  if (&result[-((unint64_t)(1024 - v10) >> 10)][4 * (~(1024 - (_WORD)v10) & 0x3FF)] != a2)
  {
LABEL_9:
    int v11 = *a3;
    do
    {
      if (a4 == v11)
      {
        int v13 = *--a3;
        int v11 = v13;
        a4 = v13 + 4096;
      }
      int v12 = *((_DWORD *)a4 - 1);
      a4 -= 4;
    }
    while (v12 >= v5);
    goto LABEL_20;
  }
LABEL_15:
  while (result < a3 || result == a3 && v7 < a4)
  {
    if (a4 == *a3)
    {
      uint64_t v15 = (uint64_t)*--a3;
      a4 = (char *)(v15 + 4092);
      if (*(_DWORD *)(v15 + 4092) < v5) {
        break;
      }
    }
    else
    {
      int v14 = *((_DWORD *)a4 - 1);
      a4 -= 4;
      if (v14 < v5) {
        break;
      }
    }
  }
LABEL_20:
  BOOL v17 = result != a3 || v7 >= a4;
  if (result < a3) {
    BOOL v17 = 0;
  }
  while (result < a3 || result == a3 && v7 < a4)
  {
    *(_DWORD *)uint64_t v7 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v8;
    do
    {
      v7 += 4;
      if (v7 - v6 == 4096)
      {
        uint64_t v18 = result[1];
        ++result;
        uint64_t v6 = v18;
        uint64_t v7 = v18;
      }
      int v8 = *(_DWORD *)v7;
    }
    while (*(_DWORD *)v7 < v5);
    uint64_t v19 = *a3;
    do
    {
      if (a4 == v19)
      {
        unint64_t v21 = *--a3;
        uint64_t v19 = v21;
        a4 = v21 + 4096;
      }
      int v20 = *((_DWORD *)a4 - 1);
      a4 -= 4;
    }
    while (v20 >= v5);
  }
  uint64_t v22 = v7 - v6;
  uint64_t v23 = v22 >> 2;
  if (v22 >= 5)
  {
    __int16 v24 = v23 - 1;
    BOOL v25 = &result[(unint64_t)(v23 - 1) >> 10];
    int v26 = &(*v25)[4 * (v24 & 0x3FF)];
    if (v26 == a2) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  unint64_t v27 = 1024 - v23;
  __int16 v28 = ~(_WORD)v27;
  BOOL v25 = &result[-(v27 >> 10)];
  int v26 = &(*v25)[4 * (v28 & 0x3FF)];
  if (v26 != a2) {
LABEL_43:
  }
    *(_DWORD *)a2 = *(_DWORD *)v26;
LABEL_44:
  *(_DWORD *)int v26 = v5;
  *(void *)a5 = v25;
  *(void *)(a5 + 8) = v26;
  *(unsigned char *)(a5 + 16) = v17;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *a1, int *a2, char *a3, uint64_t a4)
{
  if ((int *)a4 == a2) {
    return 1;
  }
  uint64_t v4 = *(void *)a3;
  uint64_t v5 = (uint64_t)a2 - *(void *)a1;
  uint64_t v6 = v5 >> 2;
  switch(((a4 - *(void *)a3) >> 2) + ((a3 - a1) << 7) - (v5 >> 2))
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (v4 == a4) {
        a4 = *((void *)a3 - 1) + 4096;
      }
      int v12 = *(_DWORD *)(a4 - 4);
      int v13 = *a2;
      if (v12 < *a2)
      {
        *a2 = v12;
        *(_DWORD *)(a4 - 4) = v13;
      }
      return 1;
    case 3:
      if (v5 < -3)
      {
        int v14 = (int *)(*(void *)&a1[-8 * ((unint64_t)(1022 - v6) >> 10)] + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
        if (v4 != a4) {
          goto LABEL_25;
        }
      }
      else
      {
        int v14 = (int *)(*(void *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
        if (v4 != a4) {
          goto LABEL_25;
        }
      }
      a4 = *((void *)a3 - 1) + 4096;
LABEL_25:
      int v23 = *v14;
      int v24 = *a2;
      int v25 = *(_DWORD *)(a4 - 4);
      if (*v14 >= *a2)
      {
        if (v25 >= v23) {
          return 1;
        }
        *int v14 = v25;
        *(_DWORD *)(a4 - 4) = v23;
        goto LABEL_85;
      }
      if (v25 < v23)
      {
        *a2 = v25;
        *(_DWORD *)(a4 - 4) = v24;
        return 1;
      }
      *a2 = v23;
      *int v14 = v24;
      int v55 = *(_DWORD *)(a4 - 4);
      if (v55 < v24)
      {
        *int v14 = v55;
        *(_DWORD *)(a4 - 4) = v24;
        return 1;
      }
      return 1;
    case 4:
      if (v5 >= -3)
      {
        int v14 = (int *)(*(void *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
        unint64_t v18 = v6 + 2;
        goto LABEL_38;
      }
      int v14 = (int *)(*(void *)&a1[-8 * ((unint64_t)(1022 - v6) >> 10)] + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v18 = 1;
LABEL_38:
        int v32 = (int *)(*(void *)&a1[(v18 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v18 & 0x3FF));
        if (v4 != a4) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      int v32 = (int *)(*(void *)&a1[-8 * ((unint64_t)(1021 - v6) >> 10)] + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
      if (v4 == a4) {
LABEL_39:
      }
        a4 = *((void *)a3 - 1) + 4096;
LABEL_40:
      int v33 = *v14;
      int v34 = *a2;
      int v35 = *v32;
      if (*v14 < *a2)
      {
        if (v35 >= v33)
        {
          *a2 = v33;
          *int v14 = v34;
          int v33 = *v32;
          if (*v32 >= v34) {
            goto LABEL_80;
          }
          *int v14 = v33;
        }
        else
        {
          *a2 = v35;
        }
        *int v32 = v34;
        int v33 = v34;
LABEL_80:
        int v37 = *(_DWORD *)(a4 - 4);
        if (v37 >= v33) {
          return 1;
        }
        goto LABEL_83;
      }
      if (v35 < v33)
      {
        *int v14 = v35;
        *int v32 = v33;
        int v36 = *a2;
        if (*v14 < *a2)
        {
          *a2 = *v14;
          *int v14 = v36;
          int v33 = *v32;
          int v37 = *(_DWORD *)(a4 - 4);
          if (v37 >= *v32) {
            return 1;
          }
          goto LABEL_83;
        }
        goto LABEL_80;
      }
      int v33 = *v32;
      int v37 = *(_DWORD *)(a4 - 4);
      if (v37 >= v35) {
        return 1;
      }
LABEL_83:
      *int v32 = v37;
      *(_DWORD *)(a4 - 4) = v33;
      int v56 = *v14;
      if (*v32 >= *v14) {
        return 1;
      }
      *int v14 = *v32;
      *int v32 = v56;
LABEL_85:
      int v57 = *a2;
      if (*v14 >= *a2) {
        return 1;
      }
      *a2 = *v14;
      *int v14 = v57;
      return 1;
    case 5:
      if (v5 >= -3)
      {
        uint64_t v15 = &a1[8 * ((unint64_t)(v6 + 1) >> 10)];
        uint64_t v16 = (int *)(*(void *)v15 + 4 * ((v6 + 1) & 0x3FF));
        unint64_t v17 = v6 + 2;
LABEL_30:
        int v26 = &a1[8 * (v17 >> 10)];
        unint64_t v27 = (int *)(*(void *)v26 + 4 * (v17 & 0x3FF));
        unint64_t v28 = v6 + 3;
        goto LABEL_31;
      }
      uint64_t v15 = &a1[-8 * ((unint64_t)(1022 - v6) >> 10)];
      uint64_t v16 = (int *)(*(void *)v15 + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v17 = 1;
        goto LABEL_30;
      }
      int v26 = &a1[-8 * ((unint64_t)(1021 - v6) >> 10)];
      unint64_t v27 = (int *)(*(void *)v26 + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF5)
      {
        unint64_t v28 = 1;
LABEL_31:
        int v29 = &a1[8 * (v28 >> 10)];
        uint64_t v30 = (int *)(*(void *)v29 + 4 * (v28 & 0x3FF));
        if (v4 != a4) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
      unint64_t v59 = 1020 - v6;
      int v29 = &a1[-8 * (v59 >> 10)];
      uint64_t v30 = (int *)(*(void *)v29 + 4 * (~(_WORD)v59 & 0x3FF));
      if (v4 == a4)
      {
LABEL_32:
        uint64_t v31 = *((void *)a3 - 1);
        a3 -= 8;
        a4 = v31 + 4096;
      }
LABEL_33:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v15, v16, (uint64_t)v26, v27, (uint64_t)v29, v30, (uint64_t)a3, (int *)(a4 - 4));
      return 1;
    default:
      if (v5 <= -8)
      {
        int v8 = &a1[-8 * ((unint64_t)(1021 - v6) >> 10)];
        uint64_t v9 = *(char **)v8;
        uint64_t v10 = (int *)(*(void *)v8 + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
        unint64_t v11 = 1022 - v6;
      }
      else
      {
        int v8 = &a1[8 * ((unint64_t)(v6 + 2) >> 10)];
        uint64_t v9 = *(char **)v8;
        uint64_t v10 = (int *)(*(void *)v8 + 4 * ((v6 + 2) & 0x3FF));
        if (v6 != -1)
        {
          uint64_t v19 = (int *)(*(void *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
          int v20 = *v19;
          int v21 = *a2;
          int v22 = *v10;
          if (*v19 < *a2) {
            goto LABEL_21;
          }
LABEL_48:
          if (v22 < v20)
          {
            *uint64_t v19 = v22;
            int *v10 = v20;
            int v38 = *a2;
            if (*v19 < *a2)
            {
              *a2 = *v19;
              *uint64_t v19 = v38;
            }
          }
          goto LABEL_54;
        }
        unint64_t v11 = 1023;
      }
      uint64_t v19 = (int *)(*(void *)&a1[-8 * (v11 >> 10)] + 4 * (~(_WORD)v11 & 0x3FF));
      int v20 = *v19;
      int v21 = *a2;
      int v22 = *v10;
      if (*v19 >= *a2) {
        goto LABEL_48;
      }
LABEL_21:
      if (v22 >= v20)
      {
        *a2 = v20;
        *uint64_t v19 = v21;
        if (*v10 >= v21) {
          goto LABEL_54;
        }
        *uint64_t v19 = *v10;
      }
      else
      {
        *a2 = v22;
      }
      int *v10 = v21;
LABEL_54:
      uint64_t v39 = ((char *)v10 - v9) >> 2;
      if ((char *)v10 - v9 < -3)
      {
        unint64_t v44 = 1022 - v39;
        int v41 = &v8[-8 * (v44 >> 10)];
        int v42 = *(_DWORD **)v41;
        uint64_t v43 = ~v44 & 0x3FFLL;
      }
      else
      {
        unint64_t v40 = v39 + 1;
        int v41 = &v8[8 * (v40 >> 10)];
        int v42 = *(_DWORD **)v41;
        uint64_t v43 = v40 & 0x3FF;
      }
      unint64_t v45 = &v42[v43];
      if (v45 == (int *)a4) {
        return 1;
      }
      int v46 = 0;
      while (1)
      {
        unint64_t v47 = v45;
        unint64_t v48 = v41;
        unint64_t v49 = v42;
        int v50 = *v45;
        int v51 = *v10;
        if (v50 < *v10)
        {
          int v52 = v47;
          while (1)
          {
            *int v52 = v51;
            if (v10 == a2) {
              break;
            }
            uint64_t v54 = v10;
            if (v10 == (int *)v9)
            {
              int v53 = (_DWORD *)*((void *)v8 - 1);
              v8 -= 8;
              uint64_t v9 = (char *)v53;
              uint64_t v10 = v53 + 1023;
              int v51 = v53[1023];
              int v52 = v54;
              if (v50 >= v51) {
                goto LABEL_68;
              }
            }
            else
            {
              --v10;
              int v51 = *(v54 - 1);
              int v52 = v54;
              if (v50 >= v51) {
                goto LABEL_68;
              }
            }
          }
          uint64_t v54 = a2;
LABEL_68:
          int *v54 = v50;
          if (++v46 == 8) {
            break;
          }
        }
        unint64_t v45 = v47 + 1;
        int v42 = v49;
        int v41 = v48;
        if ((char *)(v47 + 1) - (char *)v49 == 4096)
        {
          int v41 = v48 + 8;
          int v42 = (_DWORD *)*((void *)v48 + 1);
          unint64_t v45 = v42;
        }
        uint64_t v9 = (char *)v49;
        int v8 = v48;
        uint64_t v10 = v47;
        if (v45 == (int *)a4) {
          return 1;
        }
      }
      int v58 = v47 + 1;
      if ((char *)(v47 + 1) - (char *)v49 == 4096) {
        int v58 = (_DWORD *)*((void *)v48 + 1);
      }
      return v58 == (_DWORD *)a4;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9, int *a10)
{
  int v10 = *a4;
  int v11 = *a2;
  int v12 = *a6;
  if (*a4 >= *a2)
  {
    if (v12 >= v10)
    {
      int v10 = *a6;
      int v14 = *a8;
      if (*a8 >= v12) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a4 = v12;
    *a6 = v10;
    int v13 = *a2;
    if (*a4 < *a2)
    {
      *a2 = *a4;
      *a4 = v13;
      int v10 = *a6;
      int v14 = *a8;
      if (*a8 >= *a6) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 >= v10)
    {
      *a2 = v10;
      *a4 = v11;
      int v10 = *a6;
      if (*a6 >= v11) {
        goto LABEL_11;
      }
      *a4 = v10;
    }
    else
    {
      *a2 = v12;
    }
    *a6 = v11;
    int v10 = v11;
  }
LABEL_11:
  int v14 = *a8;
  if (*a8 >= v10) {
    goto LABEL_17;
  }
LABEL_14:
  *a6 = v14;
  *a8 = v10;
  int v15 = *a4;
  if (*a6 < *a4)
  {
    *a4 = *a6;
    *a6 = v15;
    int v16 = *a2;
    if (*a4 < *a2)
    {
      *a2 = *a4;
      *a4 = v16;
    }
  }
LABEL_17:
  int v17 = *a8;
  if (*a10 < *a8)
  {
    *a8 = *a10;
    *a10 = v17;
    int v18 = *a6;
    if (*a8 < *a6)
    {
      *a6 = *a8;
      *a8 = v18;
      int v19 = *a4;
      if (*a6 < *a4)
      {
        *a4 = *a6;
        *a6 = v19;
        int v20 = *a2;
        if (*a4 < *a2)
        {
          *a2 = *a4;
          *a4 = v20;
        }
      }
    }
  }
}

int **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *a1, int *a2, int **a3, int *a4, int **a5, int *a6, uint64_t a7)
{
  if (a2 == a4) {
    return a5;
  }
  uint64_t v9 = (uint64_t)a4;
  int v10 = a3;
  int64_t v13 = ((char *)a3 - a1) << 7;
  int v14 = *a3;
  uint64_t v15 = v13 + a4 - *a3 - (((uint64_t)a2 - *(void *)a1) >> 2);
  unint64_t v16 = v15 - 2;
  if (v15 >= 2)
  {
    int64_t v17 = v16 >> 1;
    uint64_t v18 = 1023 - (v16 >> 1);
    do
    {
      if (v17)
      {
        uint64_t v22 = ((uint64_t)a2 - *(void *)a1) >> 2;
        unint64_t v23 = v17 + v22;
        if (v17 + v22 < 1)
        {
          int v20 = &a1[-8 * ((unint64_t)(v18 - v22) >> 10)];
          int v19 = (int *)(*(void *)v20 + 4 * (~((_WORD)v18 - (_WORD)v22) & 0x3FF));
        }
        else
        {
          int v20 = &a1[8 * (v23 >> 10)];
          int v19 = (int *)(*(void *)v20 + 4 * (v23 & 0x3FF));
        }
      }
      else
      {
        int v19 = a2;
        int v20 = a1;
      }
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a7, v15, v20, v19);
      ++v18;
      BOOL v21 = v17-- <= 0;
    }
    while (!v21);
    int v14 = *v10;
    uint64_t v15 = v13 + ((v9 - (uint64_t)*v10) >> 2) - (((uint64_t)a2 - *(void *)a1) >> 2);
  }
  if ((int *)v9 == a6)
  {
    a5 = v10;
    if (v15 >= 2) {
      goto LABEL_25;
    }
    return a5;
  }
  int v25 = (int *)v9;
  a5 = v10;
  do
  {
    int v26 = *v25;
    if (*v25 < *a2)
    {
      *v25++ = *a2;
      *a2 = v26;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a7, v15, a1, a2);
      int v14 = *a5;
      if ((char *)v25 - (char *)*a5 != 4096) {
        continue;
      }
    }
    else if ((char *)++v25 - (char *)v14 != 4096)
    {
      continue;
    }
    unint64_t v27 = a5[1];
    ++a5;
    int v14 = v27;
    int v25 = v27;
  }
  while (v25 != a6);
  uint64_t v15 = v13 + ((v9 - (uint64_t)*v10) >> 2) - (((uint64_t)a2 - *(void *)a1) >> 2);
  if (v15 < 2) {
    return a5;
  }
  do
  {
LABEL_25:
    std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, v10, v9, a7, v15);
    if ((int *)v9 == *v10)
    {
      uint64_t v29 = (uint64_t)*--v10;
      uint64_t v9 = v29 + 4096;
    }
    v9 -= 4;
    BOOL v21 = v15-- <= 2;
  }
  while (!v21);
  return a5;
}

char *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *result, int *a2, uint64_t a3, uint64_t a4, char *a5, int *a6)
{
  if (a6 == a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a4 - 2;
    if (a4 < 2) {
      return result;
    }
  }
  else
  {
    uint64_t v6 = (((uint64_t)a6 - *(void *)a5) >> 2) + ((a5 - result) << 7) - (((uint64_t)a2 - *(void *)result) >> 2);
    unint64_t v7 = a4 - 2;
    if (a4 < 2) {
      return result;
    }
  }
  uint64_t v8 = v7 >> 1;
  if (v8 >= v6)
  {
    uint64_t v9 = 2 * v6;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = ((uint64_t)a2 - *(void *)result) >> 2;
    unint64_t v12 = v11 + v10;
    if (v11 + v10 < 1)
    {
      unint64_t v17 = 1023 - v12;
      int64_t v13 = &result[-8 * (v17 >> 10)];
      uint64_t v14 = *(void *)v13;
      uint64_t v15 = (int *)(*(void *)v13 + 4 * (~v17 & 0x3FFLL));
      uint64_t v16 = v9 + 2;
      if (v16 < a4) {
        goto LABEL_10;
      }
    }
    else
    {
      int64_t v13 = &result[8 * (v12 >> 10)];
      uint64_t v14 = *(void *)v13;
      uint64_t v15 = (int *)(*(void *)v13 + 4 * (v12 & 0x3FF));
      uint64_t v16 = v9 + 2;
      if (v16 < a4)
      {
LABEL_10:
        uint64_t v18 = ((uint64_t)v15 - v14) >> 2;
        if ((uint64_t)v15 - v14 < -3)
        {
          if (*v15 >= *(_DWORD *)(*(void *)&v13[-8 * ((unint64_t)(1022 - v18) >> 10)]
                                 + 4 * (~(1022 - (_WORD)v18) & 0x3FF)))
            goto LABEL_12;
        }
        else if (*v15 >= *(_DWORD *)(*(void *)&v13[((unint64_t)(v18 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] {
                                    + 4 * ((v18 + 1) & 0x3FF)))
        }
        {
          goto LABEL_12;
        }
        if ((int *)((char *)++v15 - v14) == (int *)4096) {
          uint64_t v15 = (int *)*((void *)v13 + 1);
        }
LABEL_13:
        int v19 = *v15;
        int v20 = *a6;
        if (*v15 < *a6) {
          return result;
        }
        while (1)
        {
          *a6 = v19;
          a6 = v15;
          if (v8 < v16)
          {
LABEL_29:
            *a6 = v20;
            return result;
          }
          uint64_t v21 = (2 * v16) | 1;
          unint64_t v22 = v21 + v11;
          if (v21 + v11 < 1)
          {
            unint64_t v25 = 1023 - v22;
            unint64_t v23 = &result[-8 * (v25 >> 10)];
            uint64_t v24 = *(void *)v23;
            uint64_t v15 = (int *)(*(void *)v23 + 4 * (~v25 & 0x3FFLL));
            uint64_t v16 = 2 * v16 + 2;
            if (v16 >= a4) {
              goto LABEL_16;
            }
          }
          else
          {
            unint64_t v23 = &result[8 * (v22 >> 10)];
            uint64_t v24 = *(void *)v23;
            uint64_t v15 = (int *)(*(void *)v23 + 4 * (v22 & 0x3FF));
            uint64_t v16 = 2 * v16 + 2;
            if (v16 >= a4) {
              goto LABEL_16;
            }
          }
          uint64_t v26 = ((uint64_t)v15 - v24) >> 2;
          if ((uint64_t)v15 - v24 < -3)
          {
            if (*v15 < *(_DWORD *)(*(void *)&v23[-8 * ((unint64_t)(1022 - v26) >> 10)]
                                  + 4 * (~(1022 - (_WORD)v26) & 0x3FF)))
            {
LABEL_27:
              if ((int *)((char *)++v15 - v24) == (int *)4096) {
                uint64_t v15 = (int *)*((void *)v23 + 1);
              }
              goto LABEL_17;
            }
          }
          else if (*v15 < *(_DWORD *)(*(void *)&v23[((unint64_t)(v26 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] {
                                     + 4 * ((v26 + 1) & 0x3FF)))
          }
          {
            goto LABEL_27;
          }
LABEL_16:
          uint64_t v16 = v21;
LABEL_17:
          int v19 = *v15;
          if (*v15 < v20) {
            goto LABEL_29;
          }
        }
      }
    }
LABEL_12:
    uint64_t v16 = v10;
    goto LABEL_13;
  }
  return result;
}

char *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *result, _DWORD *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 < 2) {
    return result;
  }
  uint64_t v6 = 0;
  int v7 = *a2;
  uint64_t v8 = a2;
  uint64_t v9 = result;
  do
  {
    uint64_t v10 = v8;
    if (v6 == -1)
    {
      uint64_t v11 = -1;
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v12 = v6 + 1 + (((uint64_t)v8 - *(void *)v9) >> 2);
      if (v12 < 1)
      {
        unint64_t v13 = 1023 - v12;
        v9 -= 8 * (v13 >> 10);
        uint64_t v8 = (_DWORD *)(*(void *)v9 + 4 * (~(_WORD)v13 & 0x3FF));
        uint64_t v11 = (2 * v6) | 1;
        uint64_t v6 = 2 * v6 + 2;
        if (v6 >= a6) {
          goto LABEL_3;
        }
      }
      else
      {
        v9 += 8 * ((unint64_t)v12 >> 10);
        uint64_t v8 = (_DWORD *)(*(void *)v9 + 4 * (v12 & 0x3FF));
        uint64_t v11 = (2 * v6) | 1;
        uint64_t v6 = 2 * v6 + 2;
        if (v6 >= a6) {
          goto LABEL_3;
        }
      }
    }
    uint64_t v14 = (uint64_t)v8 - *(void *)v9;
    uint64_t v15 = v14 >> 2;
    if (v14 < -3)
    {
      if (*v8 >= *(_DWORD *)(*(void *)&v9[-8 * ((unint64_t)(1022 - v15) >> 10)]
                            + 4 * (~(1022 - (_WORD)v15) & 0x3FF)))
      {
LABEL_3:
        uint64_t v6 = v11;
        goto LABEL_4;
      }
    }
    else if (*v8 >= *(_DWORD *)(*(void *)&v9[((unint64_t)(v15 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] {
                               + 4 * ((v15 + 1) & 0x3FF)))
    }
    {
      goto LABEL_3;
    }
    if ((_DWORD *)((char *)++v8 - *(void *)v9) == (_DWORD *)4096)
    {
      uint64_t v16 = (_DWORD *)*((void *)v9 + 1);
      v9 += 8;
      uint64_t v8 = v16;
    }
LABEL_4:
    _DWORD *v10 = *v8;
  }
  while (v6 <= (uint64_t)((unint64_t)(a6 - 2) >> 1));
  if (*a3 != a4)
  {
    unint64_t v17 = (_DWORD *)(a4 - 4);
    if (v8 != (_DWORD *)(a4 - 4)) {
      goto LABEL_20;
    }
LABEL_29:
    _DWORD *v8 = v7;
    return result;
  }
  unint64_t v17 = (_DWORD *)(*(a3 - 1) + 4092);
  if (v8 == v17) {
    goto LABEL_29;
  }
LABEL_20:
  _DWORD *v8 = *v17;
  uint64_t v18 = v8 + 1;
  int v19 = *(_DWORD **)v9;
  if ((_DWORD *)((char *)v18 - *(void *)v9) == (_DWORD *)4096)
  {
    int v20 = (_DWORD *)*((void *)v9 + 1);
    v9 += 8;
    int v19 = v20;
    uint64_t v18 = v20;
  }
  *unint64_t v17 = v7;
  if (v18 != a2)
  {
    uint64_t v21 = ((uint64_t)a2 - *(void *)result) >> 2;
    uint64_t v22 = v18 - v19 + ((v9 - result) << 7) - v21;
    unint64_t v23 = v22 - 2;
    if (v22 >= 2)
    {
      unint64_t v24 = v23 >> 1;
      unint64_t v25 = a2;
      if (v23 >= 2)
      {
        unint64_t v32 = v21 + v24;
        if ((uint64_t)(v21 + v24) < 1)
        {
          unint64_t v25 = (int *)(*(void *)&result[-8 * ((1023 - v32) >> 10)] + 4 * (~(1023 - (_WORD)v32) & 0x3FF));
          if (v19 != v18) {
            goto LABEL_26;
          }
        }
        else
        {
          unint64_t v25 = (int *)(*(void *)&result[(v32 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v32 & 0x3FF));
          if (v19 != v18) {
            goto LABEL_26;
          }
        }
      }
      else if (v19 != v18)
      {
LABEL_26:
        int v28 = *(v18 - 1);
        uint64_t v26 = v18 - 1;
        int v27 = v28;
        int v29 = *v25;
        if (*v25 >= v28) {
          return result;
        }
        do
        {
LABEL_32:
          *uint64_t v26 = v29;
          uint64_t v26 = v25;
          if (!v24) {
            break;
          }
          unint64_t v30 = (v24 - 1) >> 1;
          unint64_t v25 = a2;
          if (v24 >= 3)
          {
            unint64_t v31 = v21 + v30;
            if ((uint64_t)(v21 + v30) < 1) {
              unint64_t v25 = (int *)(*(void *)&result[-8 * ((1023 - v31) >> 10)] + 4 * (~(1023 - (_WORD)v31) & 0x3FF));
            }
            else {
              unint64_t v25 = (int *)(*(void *)&result[(v31 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v31 & 0x3FF));
            }
          }
          int v29 = *v25;
          unint64_t v24 = v30;
        }
        while (*v25 < v27);
        *uint64_t v26 = v27;
        return result;
      }
      uint64_t v26 = (int *)(*((void *)v9 - 1) + 4092);
      int v27 = *v26;
      int v29 = *v25;
      if (*v25 >= *v26) {
        return result;
      }
      goto LABEL_32;
    }
  }
  return result;
}

char *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(a1, a2, &v15, &v14, a3);
  if (*v6) {
    return (char *)*v6;
  }
  uint64_t v8 = v6;
  uint64_t v9 = (char *)operator new(0x40uLL);
  uint64_t v10 = (std::string *)(v9 + 32);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *((void *)v9 + 6) = *(void *)(a4 + 16);
  }
  *((_DWORD *)v9 + 14) = *(_DWORD *)(a4 + 24);
  uint64_t v11 = v15;
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v11;
  uint64_t *v8 = (uint64_t)v9;
  uint64_t v12 = (uint64_t *)**a1;
  unint64_t v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    unint64_t v13 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_23CC71CB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_20;
  }
  int v10 = *((char *)a2 + 55);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    unint64_t v13 = a5;
  }
  else {
    unint64_t v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v14 = a2[5];
  }
  if (v10 >= 0) {
    uint64_t v15 = a2 + 4;
  }
  else {
    uint64_t v15 = (const void *)a2[4];
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18)
  {
LABEL_20:
    int v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      int v20 = (uint64_t *)*a2;
      do
      {
        uint64_t v21 = v20;
        int v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v26 = a2;
      do
      {
        uint64_t v21 = (uint64_t *)v26[2];
        BOOL v27 = *v21 == (void)v26;
        uint64_t v26 = v21;
      }
      while (v27);
    }
    int v28 = *((char *)a5 + 23);
    int v29 = *((char *)v21 + 55);
    if (v29 >= 0) {
      size_t v30 = *((unsigned __int8 *)v21 + 55);
    }
    else {
      size_t v30 = v21[5];
    }
    if (v29 >= 0) {
      unint64_t v31 = v21 + 4;
    }
    else {
      unint64_t v31 = (const void *)v21[4];
    }
    if (v28 >= 0) {
      size_t v32 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v32 = (size_t)a5[1];
    }
    if (v28 >= 0) {
      int v33 = a5;
    }
    else {
      int v33 = *a5;
    }
    if (v32 >= v30) {
      size_t v34 = v30;
    }
    else {
      size_t v34 = v32;
    }
    int v35 = memcmp(v31, v33, v34);
    BOOL v36 = v30 < v32;
    if (v35) {
      BOOL v36 = v35 < 0;
    }
    if (v36) {
      goto LABEL_53;
    }
    int v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          int v38 = (uint64_t **)v37;
          int v41 = (const void *)v37[4];
          uint64_t v39 = v37 + 4;
          unint64_t v40 = v41;
          int v42 = *((char *)v39 + 23);
          if (v42 >= 0) {
            size_t v43 = *((unsigned __int8 *)v39 + 23);
          }
          else {
            size_t v43 = v39[1];
          }
          if (v42 >= 0) {
            unint64_t v44 = v39;
          }
          else {
            unint64_t v44 = v40;
          }
          if (v43 >= v32) {
            size_t v45 = v32;
          }
          else {
            size_t v45 = v43;
          }
          int v46 = memcmp(v33, v44, v45);
          BOOL v47 = v32 < v43;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          if (!v47) {
            break;
          }
          int v37 = *v38;
          uint64_t v8 = v38;
          if (!*v38) {
            goto LABEL_74;
          }
        }
        int v48 = memcmp(v44, v33, v45);
        BOOL v49 = v43 < v32;
        if (v48) {
          BOOL v49 = v48 < 0;
        }
        if (!v49) {
          break;
        }
        uint64_t v8 = v38 + 1;
        int v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      int v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  int v22 = memcmp(v15, v13, v16);
  BOOL v23 = v14 < v12;
  if (v22) {
    BOOL v23 = v22 < 0;
  }
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  uint64_t v24 = a2[1];
  if (v24)
  {
    unint64_t v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      unint64_t v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    int v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      BOOL v27 = *a4 == v50;
      int v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    int v51 = *((char *)a4 + 55);
    if (v51 >= 0) {
      size_t v52 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v52 = (size_t)a4[5];
    }
    if (v51 >= 0) {
      int v53 = (uint64_t *)(a4 + 4);
    }
    else {
      int v53 = a4[4];
    }
    if (v52 >= v12) {
      size_t v54 = v12;
    }
    else {
      size_t v54 = v52;
    }
    int v55 = memcmp(v13, v53, v54);
    BOOL v56 = v12 < v52;
    if (v55) {
      BOOL v56 = v55 < 0;
    }
    if (!v56)
    {
      int v57 = *v8;
      if (*v8)
      {
        int v58 = a3;
        do
        {
          while (1)
          {
            unint64_t v59 = (uint64_t **)v57;
            int v62 = (const void *)v57[4];
            int v60 = v57 + 4;
            unint64_t v61 = v62;
            int v63 = *((char *)v60 + 23);
            if (v63 >= 0) {
              size_t v64 = *((unsigned __int8 *)v60 + 23);
            }
            else {
              size_t v64 = v60[1];
            }
            if (v63 >= 0) {
              uint64_t v65 = v60;
            }
            else {
              uint64_t v65 = v61;
            }
            if (v64 >= v12) {
              size_t v66 = v12;
            }
            else {
              size_t v66 = v64;
            }
            int v67 = memcmp(v13, v65, v66);
            BOOL v68 = v12 < v64;
            if (v67) {
              BOOL v68 = v67 < 0;
            }
            if (!v68) {
              break;
            }
            int v57 = *v59;
            uint64_t v8 = v59;
            if (!*v59) {
              goto LABEL_119;
            }
          }
          int v69 = memcmp(v65, v13, v66);
          BOOL v70 = v64 < v12;
          if (v69) {
            BOOL v70 = v69 < 0;
          }
          if (!v70) {
            break;
          }
          uint64_t v8 = v59 + 1;
          int v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        unint64_t v59 = v8;
        int v58 = a3;
      }
LABEL_119:
      *int v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F0C1190;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C1190;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::operator()(uint64_t result, int **a2)
{
  uint64_t v2 = *a2;
  int v3 = **a2;
  if (~v3 <= v3) {
    int v4 = **a2;
  }
  else {
    int v4 = ~v3;
  }
  int v5 = *(_DWORD *)(**(void **)(result + 8) + 4 * v4);
  int v6 = v5;
  LODWORD(v7) = 0;
  if (v5 < 0) {
    google::MakeCheckOpString<int,int>((int)&v6, (int)&v7, "image >= 0");
  }
  *uint64_t v2 = v5 ^ (v3 >> 31);
  return result;
}

void sub_23CC72290(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20ApplyVariableMappingERKNSt3__16vectorIiNS1_9allocatorIiEEEERKNS0_15Pre"
                     "solveContextEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20ApplyVariableMappingERKNSt3__16vectorIiNS1_9allocatorIiEEEE"
                                "RKNS0_15PresolveContextEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20ApplyVariableMappingERKNSt3__16vectorIiNS1_9allocatorIiEEEERKNS0_15PresolveContextEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20ApplyVariableMappingERKNSt3__16vectorIiNS1_9allocatorIiEEEERKNS0_15PresolveContextEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::target_type()
{
}

void std::vector<operations_research::sat::IntegerVariableProto>::__append(uint64_t *a1, unint64_t a2, operations_research::sat::IntegerVariableProto *a3)
{
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = (operations_research::sat::IntegerVariableProto *)a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (uint64_t)v8) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v14 = (operations_research::sat::IntegerVariableProto *)((char *)v8 + 56 * a2);
      uint64_t v15 = 56 * a2;
      do
      {
        operations_research::sat::IntegerVariableProto::IntegerVariableProto(v8, a3);
        uint64_t v8 = (operations_research::sat::IntegerVariableProto *)((char *)v8 + 56);
        v15 -= 56;
      }
      while (v15);
      uint64_t v8 = v14;
    }
    a1[1] = (uint64_t)v8;
  }
  else
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v8 - *a1) >> 3);
    unint64_t v10 = v9 + a2;
    if (v9 + a2 > 0x492492492492492) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v6 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x492492492492492) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = (char *)operator new(56 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    size_t v16 = (operations_research::sat::IntegerVariableProto *)&v13[56 * v9];
    uint64_t v22 = (uint64_t)v16;
    BOOL v23 = &v13[56 * v12];
    uint64_t v17 = 56 * a2;
    BOOL v18 = (char *)v16 + 56 * a2;
    do
    {
      operations_research::sat::IntegerVariableProto::IntegerVariableProto(v16, a3);
      size_t v16 = (operations_research::sat::IntegerVariableProto *)((char *)v16 + 56);
      v17 -= 56;
    }
    while (v17);
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::sat::IntegerVariableProto>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>>(v7, a1[1], (__n128 *)a1[1], *a1, (__n128 *)*a1, v22, v22);
    int v20 = (char *)*a1;
    int v19 = (char *)a1[1];
    *a1 = v21;
    a1[1] = (uint64_t)v18;
    a1[2] = (uint64_t)v23;
    while (v19 != v20)
      operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(v19 - 56));
    if (v20) {
      operator delete(v20);
    }
  }
}

void sub_23CC724F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<operations_research::sat::IntegerVariableProto>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23CC7250C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23CC72514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<operations_research::sat::IntegerVariableProto>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::sat::IntegerVariableProto>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::sat::IntegerVariableProto>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>>(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, __n128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    unint64_t v10 = (__n128 *)((char *)a3 - 56);
    unint64_t v11 = (operations_research::sat::IntegerVariableProto *)(a7 - 56);
    do
    {
      operations_research::sat::IntegerVariableProto::IntegerVariableProto(v11, 0);
      uint64_t v13 = *((void *)v11 + 1);
      size_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v13)
      {
        size_t v14 = (void *)*v14;
        unint64_t v17 = v10->n128_u64[1];
        size_t v16 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) == 0)
        {
LABEL_7:
          if (v14 == v16) {
            goto LABEL_8;
          }
          goto LABEL_3;
        }
      }
      else
      {
        unint64_t v15 = v10->n128_u64[1];
        size_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        if ((v15 & 1) == 0) {
          goto LABEL_7;
        }
      }
      if (v14 == (void *)*v16)
      {
LABEL_8:
        if ((char *)v11 + 56 != &v10[3].n128_i8[8]) {
          operations_research::sat::IntegerVariableProto::InternalSwap((__n128 *)v11, v10);
        }
        goto LABEL_4;
      }
LABEL_3:
      operations_research::sat::IntegerVariableProto::CopyFrom(v11, (const operations_research::sat::IntegerVariableProto *)v10);
LABEL_4:
      v7 -= 56;
      unint64_t v11 = (operations_research::sat::IntegerVariableProto *)((char *)v11 - 56);
      BOOL v12 = v10 == a5;
      unint64_t v10 = (__n128 *)((char *)v10 - 56);
    }
    while (!v12);
  }
  return a6;
}

void operations_research::sat::ConstructSearchStrategyInternal(char **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&long long v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
  *((void *)&v16 + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  std::vector<operations_research::sat::Strategy>::vector(&v17, a2);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set((uint64_t)__p, a1);
  uint64_t v23 = a3;
  *(void *)(a4 + 24) = 0;
  uint64_t v8 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v8 = &unk_26F0C1210;
  *(_OWORD *)(v8 + 8) = v16;
  std::vector<operations_research::sat::Strategy>::vector((void *)v8 + 3, (uint64_t *)&v17);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set((uint64_t)(v8 + 48), (char **)__p);
  uint64_t v9 = v20;
  *((void *)v8 + 12) = v23;
  *(void *)(a4 + 24) = v8;
  if (v9)
  {
    operator delete(__p[0]);
    uint64_t v22 = 0;
    __p[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    __p[1] = 0;
    __p[2] = 0;
    uint64_t v20 = 0;
  }
  if (v21) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v21);
  }
  unint64_t v10 = (char *)v17;
  if (v17)
  {
    unint64_t v11 = v18;
    BOOL v12 = v17;
    if (v18 != v17)
    {
      uint64_t v13 = v18;
      do
      {
        unint64_t v15 = (void *)*((void *)v13 - 4);
        v13 -= 32;
        size_t v14 = v15;
        if (v15)
        {
          *((void *)v11 - 3) = v14;
          operator delete(v14);
        }
        unint64_t v11 = v13;
      }
      while (v13 != v10);
      BOOL v12 = v17;
    }
    BOOL v18 = v10;
    operator delete(v12);
  }
}

void sub_23CC727D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*v11) {
    operations_research::sat::ConstructSearchStrategyInternal((uint64_t)v10, *v11);
  }
  operator delete(v10);
  operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0::~$_0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_23CC72810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0::~$_0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23CC72824(_Unwind_Exception *a1)
{
  std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void **std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      int v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 4);
        v5 -= 32;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 3) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0::~$_0(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    operator delete(*(void **)(a1 + 40));
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 40) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    int v5 = *(void **)(a1 + 16);
    if (v4 != v3)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      do
      {
        uint64_t v8 = *(void **)(v6 - 32);
        v6 -= 32;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 24) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      int v5 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t operations_research::sat::ConstructSearchStrategy@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  int v140 = 0;
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a4);
  uint64_t v122 = a2;
  int v116 = *(unsigned __int8 *)(v7 + 424);
  if (!*(unsigned char *)(v7 + 424)) {
    goto LABEL_79;
  }
  uint64_t v119 = a1;
  std::string __p = 0;
  long long v129 = 0uLL;
  uint64_t v8 = a2;
  uint64_t v9 = (int *)*a2;
  unint64_t v10 = (int *)v8[1];
  if (v9 != v10)
  {
    unint64_t v11 = 0;
    BOOL v12 = 0;
    uint64_t v13 = 0;
    int v14 = a3 ^ 1;
    do
    {
      int v17 = *v9;
      if (*v9 == -1) {
        goto LABEL_7;
      }
      if (v17 == v14)
      {
        if (v11 >= v12)
        {
          uint64_t v23 = (v11 - v13) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
LABEL_186:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if ((v12 - v13) >> 1 > v24) {
            unint64_t v24 = (v12 - v13) >> 1;
          }
          if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v24;
          }
          if (v20)
          {
            if (v20 >> 62) {
LABEL_187:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            uint64_t v21 = operator new(4 * v20);
            uint64_t v22 = &v21[4 * v23];
            _DWORD *v22 = a3;
            uint64_t v16 = (uint64_t)(v22 + 1);
            if (v11 == v13) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v21 = 0;
            uint64_t v22 = (_DWORD *)(4 * v23);
            *(_DWORD *)(4 * v23) = a3;
            uint64_t v16 = 4 * v23 + 4;
            if (v11 == v13) {
              goto LABEL_42;
            }
          }
          unint64_t v28 = v11 - 4 - v13;
          if (v28 >= 0xBC)
          {
            if (&v21[v11 - v13 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v11 - v13 - 4])
            {
              int v29 = v11;
            }
            else if (&v11[-(v28 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4)
            {
              int v29 = v11;
            }
            else if ((unint64_t)(v13 - v21) >= 0x20)
            {
              uint64_t v37 = (v28 >> 2) + 1;
              uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
              int v29 = &v11[-v38];
              uint64_t v22 = (_DWORD *)((char *)v22 - v38);
              uint64_t v39 = &v21[4 * v23 - 16];
              unint64_t v40 = v11 - 16;
              uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v42 = *(_OWORD *)v40;
                *(v39 - 1) = *((_OWORD *)v40 - 1);
                *uint64_t v39 = v42;
                v39 -= 2;
                v40 -= 32;
                v41 -= 8;
              }
              while (v41);
              if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_42;
              }
            }
            else
            {
              int v29 = v11;
            }
          }
          else
          {
            int v29 = v11;
          }
          do
          {
            int v30 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *--uint64_t v22 = v30;
          }
          while (v29 != v13);
LABEL_42:
          BOOL v12 = &v21[4 * v20];
          std::string __p = v22;
          *((void *)&v129 + 1) = v12;
          if (v13) {
            operator delete(v13);
          }
          uint64_t v13 = (char *)v22;
          int v14 = a3 ^ 1;
          goto LABEL_6;
        }
        *(_DWORD *)unint64_t v11 = a3;
        unint64_t v15 = v11 + 4;
      }
      else
      {
        if (v11 >= v12)
        {
          uint64_t v18 = (v11 - v13) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            goto LABEL_186;
          }
          if ((v12 - v13) >> 1 > v19) {
            unint64_t v19 = (v12 - v13) >> 1;
          }
          if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20)
          {
            if (v20 >> 62) {
              goto LABEL_187;
            }
            uint64_t v21 = operator new(4 * v20);
            uint64_t v22 = &v21[4 * v18];
            _DWORD *v22 = v17;
            uint64_t v16 = (uint64_t)(v22 + 1);
            if (v11 == v13) {
              goto LABEL_42;
            }
LABEL_34:
            unint64_t v25 = v11 - 4 - v13;
            if (v25 < 0xBC)
            {
              uint64_t v26 = v11;
              goto LABEL_36;
            }
            if (&v21[v11 - v13 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v11 - v13 - 4])
            {
              uint64_t v26 = v11;
              goto LABEL_36;
            }
            if (&v11[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4)
            {
              uint64_t v26 = v11;
              goto LABEL_36;
            }
            if ((unint64_t)(v13 - v21) < 0x20)
            {
              uint64_t v26 = v11;
              goto LABEL_36;
            }
            uint64_t v31 = (v25 >> 2) + 1;
            uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v26 = &v11[-v32];
            uint64_t v22 = (_DWORD *)((char *)v22 - v32);
            int v33 = &v21[4 * v18 - 16];
            size_t v34 = v11 - 16;
            uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v36 = *(_OWORD *)v34;
              *(v33 - 1) = *((_OWORD *)v34 - 1);
              _OWORD *v33 = v36;
              v33 -= 2;
              v34 -= 32;
              v35 -= 8;
            }
            while (v35);
            if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_36:
                int v27 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *--uint64_t v22 = v27;
              }
              while (v26 != v13);
            }
          }
          else
          {
            uint64_t v21 = 0;
            uint64_t v22 = (_DWORD *)(4 * v18);
            *(_DWORD *)(4 * v18) = v17;
            uint64_t v16 = 4 * v18 + 4;
            if (v11 != v13) {
              goto LABEL_34;
            }
          }
          goto LABEL_42;
        }
        *(_DWORD *)unint64_t v11 = v17;
        unint64_t v15 = v11 + 4;
      }
      uint64_t v16 = (uint64_t)v15;
LABEL_6:
      *(void *)&long long v129 = v16;
      unint64_t v11 = (char *)v16;
LABEL_7:
      ++v9;
    }
    while (v9 != v10);
  }
  operations_research::sat::FirstUnassignedVarAtItsMinHeuristic((uint64_t)&__p, a4, (uint64_t)v135);
  size_t v43 = v140;
  int v140 = 0;
  a2 = v122;
  a1 = v119;
  if (v43 != v139)
  {
    if (v43) {
      (*((void (**)(void **))*v43 + 5))(v43);
    }
    unint64_t v44 = (void **)*((void *)&v136 + 1);
    if (*((void *)&v136 + 1)) {
      goto LABEL_69;
    }
LABEL_72:
    int v140 = 0;
    goto LABEL_74;
  }
  (*(void (**)(void *))(v139[0] + 32))(v139);
  unint64_t v44 = (void **)*((void *)&v136 + 1);
  if (!*((void *)&v136 + 1)) {
    goto LABEL_72;
  }
LABEL_69:
  if (v44 == v135)
  {
    int v140 = (void **)v139;
    (*((void (**)(void **, void *))v135[0] + 3))(v135, v139);
  }
  else
  {
    int v140 = v44;
    *((void *)&v136 + 1) = 0;
  }
LABEL_74:
  if (*((void ***)&v136 + 1) == v135)
  {
    (*((void (**)(void **))v135[0] + 4))(v135);
    size_t v45 = __p;
    if (__p)
    {
LABEL_78:
      *(void *)&long long v129 = v45;
      operator delete(v45);
    }
  }
  else
  {
    if (*((void *)&v136 + 1)) {
      (*(void (**)(void))(**((void **)&v136 + 1) + 40))(*((void *)&v136 + 1));
    }
    size_t v45 = __p;
    if (__p) {
      goto LABEL_78;
    }
  }
LABEL_79:
  unint64_t v132 = 0;
  int v133 = 0;
  unint64_t v134 = 0;
  std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v129 = 0u;
  long long v130 = 0u;
  uint64_t v131 = 0;
  uint64_t v46 = *(void *)(a1 + 80);
  BOOL v47 = (void *)(v46 + 8);
  if (!v46) {
    BOOL v47 = 0;
  }
  uint64_t v48 = *(int *)(a1 + 72);
  if (v48)
  {
    unsigned int v118 = &v47[v48];
    while (1)
    {
      int v120 = v47;
      uint64_t v49 = *v47;
      *(_OWORD *)uint64_t v135 = 0u;
      long long v136 = 0u;
      int v50 = v133;
      if ((unint64_t)v133 >= v134)
      {
        int v51 = std::vector<operations_research::sat::Strategy>::__push_back_slow_path<operations_research::sat::Strategy>(&v132, (uint64_t)v135);
        int v133 = v51;
        if (v135[0])
        {
          v135[1] = v135[0];
          operator delete(v135[0]);
          int v51 = v133;
        }
      }
      else
      {
        *(void *)int v133 = 0;
        *((void *)v50 + 1) = 0;
        *((void *)v50 + 2) = 0;
        *(_OWORD *)int v50 = *(_OWORD *)v135;
        *((void *)v50 + 2) = v136;
        v135[0] = 0;
        v135[1] = 0;
        *(void *)&long long v136 = 0;
        *((void *)v50 + 3) = *((void *)&v136 + 1);
        int v51 = v50 + 32;
        int v133 = v50 + 32;
      }
      uint64_t v121 = v49;
      uint64_t v52 = *(int *)(v49 + 16);
      if (v52) {
        break;
      }
LABEL_115:
      *((void *)v51 - 1) = *(void *)(v121 + 64);
      uint64_t v77 = *(void *)(v121 + 56);
      if (v77) {
        uint64_t v78 = (int8x16_t **)(v77 + 8);
      }
      else {
        uint64_t v78 = 0;
      }
      uint64_t v79 = *(int *)(v121 + 48);
      if (v79)
      {
        int v80 = &v78[v79];
        do
        {
          uint64_t v89 = (*v78)[2].u32[0];
          if ((v89 & 0x80000000) != 0) {
            int v90 = *(_DWORD *)(*a2 + 4 * ~v89) ^ 1;
          }
          else {
            int v90 = *(_DWORD *)(*a2 + 4 * v89);
          }
          uint64_t v91 = 0;
          unint64_t v92 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v90)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v90));
          uint64_t v88 = v129;
          unint64_t v86 = (v92 >> 7) ^ ((unint64_t)__p >> 12);
          uint64_t v93 = 0x101010101010101 * (v92 & 0x7F);
          for (unint64_t i = v86; ; unint64_t i = v91 + v95)
          {
            unint64_t v95 = i & v130;
            uint64_t v96 = *(void *)((char *)__p + v95);
            unint64_t v97 = ((v96 ^ v93) - 0x101010101010101) & ~(v96 ^ v93) & 0x8080808080808080;
            if (v97) {
              break;
            }
LABEL_135:
            if ((v96 & (~v96 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_138;
            }
            v91 += 8;
          }
          while (1)
          {
            unint64_t v98 = (v95 + (__clz(__rbit64(v97)) >> 3)) & v130;
            if (*(_DWORD *)(v129 + 24 * v98) == v90) {
              break;
            }
            v97 &= v97 - 1;
            if (!v97) {
              goto LABEL_135;
            }
          }
          if (v98 == (void)v130)
          {
LABEL_138:
            uint64_t v85 = 0;
            int8x16_t v125 = (*v78)[1];
            while (1)
            {
              unint64_t v81 = v86 & v130;
              uint64_t v82 = *(void *)((char *)__p + (v86 & v130));
              unint64_t v83 = ((v82 ^ v93) - 0x101010101010101) & ~(v82 ^ v93) & 0x8080808080808080;
              if (v83) {
                break;
              }
LABEL_123:
              if ((v82 & (~v82 << 6) & 0x8080808080808080) != 0)
              {
                unint64_t v84 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::prepare_insert((uint64_t *)&__p, v92);
                uint64_t v87 = v129 + 24 * v84;
                *(_DWORD *)uint64_t v87 = v90;
                *(void *)(v87 + 8) = 0;
                *(void *)(v87 + 16) = 0;
                uint64_t v88 = v129;
                goto LABEL_126;
              }
              v85 += 8;
              unint64_t v86 = v85 + v81;
            }
            while (1)
            {
              unint64_t v84 = (v81 + (__clz(__rbit64(v83)) >> 3)) & v130;
              if (*(_DWORD *)(v129 + 24 * v84) == v90) {
                break;
              }
              v83 &= v83 - 1;
              if (!v83) {
                goto LABEL_123;
              }
            }
LABEL_126:
            *(int8x16_t *)(v88 + 24 * v84 + 8) = vextq_s8(v125, v125, 8uLL);
          }
          ++v78;
        }
        while (v78 != v80);
      }
      BOOL v47 = v120 + 1;
      if (v120 + 1 == v118) {
        goto LABEL_139;
      }
    }
    int v124 = (void **)(v51 - 32);
    int v53 = *(unsigned int **)(v49 + 24);
    size_t v54 = &v53[v52];
    while (1)
    {
      while (1)
      {
        uint64_t v55 = *v53;
        if ((v55 & 0x80000000) == 0) {
          break;
        }
        int v56 = *(_DWORD *)(*a2 + 4 * ~v55) ^ 1;
        int v58 = (int *)*((void *)v51 - 3);
        unint64_t v57 = *((void *)v51 - 2);
        if ((unint64_t)v58 >= v57) {
          goto LABEL_95;
        }
LABEL_90:
        *int v58 = v56;
        *((void *)v51 - 3) = v58 + 1;
        if (++v53 == v54) {
          goto LABEL_115;
        }
      }
      int v56 = *(_DWORD *)(*a2 + 4 * v55);
      int v58 = (int *)*((void *)v51 - 3);
      unint64_t v57 = *((void *)v51 - 2);
      if ((unint64_t)v58 < v57) {
        goto LABEL_90;
      }
LABEL_95:
      unint64_t v59 = (int *)*v124;
      uint64_t v60 = (char *)v58 - (unsigned char *)*v124;
      uint64_t v61 = v60 >> 2;
      unint64_t v62 = (v60 >> 2) + 1;
      if (v62 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v63 = v57 - (void)v59;
      if (v63 >> 1 > v62) {
        unint64_t v62 = v63 >> 1;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        if (v64 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v65 = operator new(4 * v64);
        size_t v66 = (int *)&v65[4 * v61];
        int *v66 = v56;
        uint64_t v67 = (uint64_t)(v66 + 1);
        if (v58 == v59) {
          goto LABEL_112;
        }
LABEL_106:
        unint64_t v68 = (char *)(v58 - 1) - (char *)v59;
        if (v68 < 0x2C) {
          goto LABEL_190;
        }
        if ((unint64_t)((char *)v58 - &v65[v60]) < 0x20) {
          goto LABEL_190;
        }
        uint64_t v69 = (v68 >> 2) + 1;
        uint64_t v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v71 = &v58[v70 / 0xFFFFFFFFFFFFFFFCLL];
        size_t v66 = (int *)((char *)v66 - v70);
        int v72 = &v65[4 * v61 - 16];
        int v73 = v58 - 4;
        uint64_t v74 = v69 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          _OWORD *v72 = v75;
          v72 -= 2;
          v73 -= 8;
          v74 -= 8;
        }
        while (v74);
        int v58 = v71;
        if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_190:
          do
          {
            int v76 = *--v58;
            *--size_t v66 = v76;
          }
          while (v58 != v59);
        }
        goto LABEL_112;
      }
      uint64_t v65 = 0;
      size_t v66 = (int *)(4 * v61);
      *(_DWORD *)(4 * v61) = v56;
      uint64_t v67 = 4 * v61 + 4;
      if (v58 != v59) {
        goto LABEL_106;
      }
LABEL_112:
      *((void *)v51 - 4) = v66;
      *((void *)v51 - 3) = v67;
      *((void *)v51 - 2) = &v65[4 * v64];
      if (v59) {
        operator delete(v59);
      }
      a2 = v122;
      *((void *)v51 - 3) = v67;
      if (++v53 == v54) {
        goto LABEL_115;
      }
    }
  }
LABEL_139:
  if (!v116)
  {
    operations_research::sat::ConstructSearchStrategyInternal((char **)&__p, (uint64_t *)&v132, a4, a5);
    goto LABEL_164;
  }
  operations_research::sat::ConstructSearchStrategyInternal((char **)&__p, (uint64_t *)&v132, a4, (uint64_t)v135);
  uint64_t v99 = (uint64_t)v140;
  if (!v140) {
    goto LABEL_143;
  }
  if (v140 != v139)
  {
    uint64_t v99 = (*((uint64_t (**)(void **))*v140 + 2))(v140);
LABEL_143:
    uint64_t v138 = (void *)v99;
    goto LABEL_148;
  }
  uint64_t v138 = v137;
  (*(void (**)(void *, void *))(v139[0] + 24))(v139, v137);
LABEL_148:
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v126, (uint64_t)v135, 2uLL);
  v100.n128_f64[0] = operations_research::sat::SequentialSearch((uint64_t *)&v126, a5);
  int v101 = (char *)v126;
  if (v126)
  {
    int v102 = v126;
    if (v127 != v126)
    {
      int v103 = v127 - 32;
      int v104 = v127 - 32;
      do
      {
        int v106 = (char *)*((void *)v104 + 3);
        if (v104 == v106)
        {
          (*(void (**)(char *))(*(void *)v104 + 32))(v104);
        }
        else if (v106)
        {
          (*(void (**)(char *, __n128))(*(void *)v106 + 40))(v106, v100);
        }
        v103 -= 32;
        BOOL v105 = v104 == v101;
        v104 -= 32;
      }
      while (!v105);
      int v102 = v126;
    }
    uint64_t v127 = v101;
    operator delete(v102);
  }
  if (v138 == v137)
  {
    (*(void (**)(void *, __n128))(v137[0] + 32))(v137, v100);
    uint64_t v107 = *((void *)&v136 + 1);
    if (*((void ***)&v136 + 1) != v135)
    {
LABEL_162:
      if (v107) {
        (*(void (**)(uint64_t, __n128))(*(void *)v107 + 40))(v107, v100);
      }
LABEL_164:
      if (!(void)v130) {
        goto LABEL_166;
      }
      goto LABEL_165;
    }
  }
  else
  {
    if (v138) {
      (*(void (**)(__n128))(*v138 + 40))(v100);
    }
    uint64_t v107 = *((void *)&v136 + 1);
    if (*((void ***)&v136 + 1) != v135) {
      goto LABEL_162;
    }
  }
  (*((void (**)(void **, __n128))v135[0] + 4))(v135, v100);
  if ((void)v130)
  {
LABEL_165:
    operator delete(__p);
    std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v131 = 0;
    *(void *)&long long v130 = 0;
    long long v129 = 0uLL;
  }
LABEL_166:
  if (*((void *)&v130 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v130 + 1));
  }
  unint64_t v108 = (char *)v132;
  if (v132)
  {
    __int16 v109 = v133;
    uint64_t v110 = v132;
    if (v133 != v132)
    {
      uint64_t v111 = v133;
      do
      {
        uint64_t v113 = (void *)*((void *)v111 - 4);
        v111 -= 32;
        uint64_t v112 = v113;
        if (v113)
        {
          *((void *)v109 - 3) = v112;
          operator delete(v112);
        }
        __int16 v109 = v111;
      }
      while (v111 != v108);
      uint64_t v110 = v132;
    }
    int v133 = v108;
    operator delete(v110);
  }
  uint64_t result = (uint64_t)v140;
  if (v140 == v139) {
    return (*(uint64_t (**)(void *))(v139[0] + 32))(v139);
  }
  if (v140) {
    return (*((uint64_t (**)(void))*v140 + 5))();
  }
  return result;
}

void sub_23CC7362C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::~vector[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      int v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void operations_research::sat::InstrumentSearchStrategy(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  unint64_t v62 = 0;
  int v7 = *((_DWORD *)a1 + 6);
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      if (*((_DWORD *)*a2 + v9) == -1) {
        goto LABEL_5;
      }
      uint64_t v13 = *(void *)(*(void *)(*((void *)a1 + 4) + 8 * v9 + 8) + 40);
      if (*(char *)(v13 + 23) < 0)
      {
        if (!*(void *)(v13 + 8)) {
          goto LABEL_5;
        }
      }
      else if (!*(unsigned char *)(v13 + 23))
      {
        goto LABEL_5;
      }
      if (v8 >= v10) {
        break;
      }
      int *v8 = v9;
      uint64_t v12 = (uint64_t)(v8 + 1);
LABEL_4:
      uint64_t v61 = v12;
      int v7 = *((_DWORD *)a1 + 6);
      uint64_t v8 = (int *)v12;
LABEL_5:
      if (++v9 >= v7) {
        goto LABEL_40;
      }
    }
    uint64_t v14 = v8 - v11;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v10 - (char *)v11) >> 1 > v15) {
      unint64_t v15 = ((char *)v10 - (char *)v11) >> 1;
    }
    if ((unint64_t)((char *)v10 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v17 = operator new(4 * v16);
      uint64_t v18 = &v17[4 * v14];
      *uint64_t v18 = v9;
      uint64_t v12 = (uint64_t)(v18 + 1);
      if (v8 == v11) {
        goto LABEL_26;
      }
    }
    else
    {
      int v17 = 0;
      uint64_t v18 = (_DWORD *)(4 * v14);
      *(_DWORD *)(4 * v14) = v9;
      uint64_t v12 = 4 * v14 + 4;
      if (v8 == v11) {
        goto LABEL_26;
      }
    }
    unint64_t v19 = (char *)(v8 - 1) - (char *)v11;
    if (v19 >= 0xBC)
    {
      if (&v17[(char *)v8 - (char *)v11 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[(char *)v8 - (char *)v11 - 4])
      {
        unint64_t v20 = v8;
      }
      else if ((int *)((char *)v8 - (v19 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v8 - 1)
      {
        unint64_t v20 = v8;
      }
      else if ((unint64_t)((char *)v11 - v17) >= 0x20)
      {
        uint64_t v22 = (v19 >> 2) + 1;
        uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v20 = &v8[v23 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v18 = (_DWORD *)((char *)v18 - v23);
        unint64_t v24 = &v17[4 * v14 - 16];
        unint64_t v25 = v8 - 4;
        uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *unint64_t v24 = v27;
          v24 -= 2;
          v25 -= 8;
          v26 -= 8;
        }
        while (v26);
        if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v20 = v8;
      }
    }
    else
    {
      unint64_t v20 = v8;
    }
    do
    {
      int v21 = *--v20;
      *--uint64_t v18 = v21;
    }
    while (v20 != v11);
LABEL_26:
    unint64_t v10 = (int *)&v17[4 * v16];
    uint64_t v60 = v18;
    unint64_t v62 = v10;
    if (v11) {
      operator delete(v11);
    }
    unint64_t v11 = v18;
    goto LABEL_4;
  }
  uint64_t v8 = 0;
  unint64_t v11 = 0;
LABEL_40:
  unint64_t v28 = 126 - 2 * __clz(v8 - v11);
  unint64_t v57 = a1;
  if (v8 == v11) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,false>((uint64_t)v11, v8, (uint64_t)&v57, v29, 1);
  uint64_t v31 = *a2;
  int v30 = a2[1];
  int v58 = 0;
  unint64_t v59 = 0;
  unint64_t v57 = 0;
  uint64_t v32 = v30 - v31;
  if (v30 == v31)
  {
    uint64_t v35 = 0;
    size_t v34 = 0;
    uint64_t v33 = a3;
    uint64_t v36 = *(void *)(a3 + 24);
    if (!v36)
    {
LABEL_50:
      unint64_t v64 = (void *)v36;
      goto LABEL_52;
    }
  }
  else
  {
    if ((unint64_t)v32 >= 0x3FFFFFFFFFFFFFFDLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v33 = a3;
    size_t v34 = (char *)operator new(4 * v32);
    unint64_t v57 = v34;
    unint64_t v59 = &v34[16 * (v32 >> 2)];
    bzero(v34, 4 * v32);
    uint64_t v35 = &v34[4 * v32];
    int v58 = v35;
    uint64_t v36 = *(void *)(a3 + 24);
    if (!v36) {
      goto LABEL_50;
    }
  }
  if (v36 != v33)
  {
    uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 16))(v36);
    goto LABEL_50;
  }
  unint64_t v64 = v63;
  (*(void (**)(uint64_t, void *))(*(void *)v33 + 24))(v33, v63);
LABEL_52:
  uint64_t v65 = a4;
  std::string __p = 0;
  uint64_t v67 = 0;
  unint64_t v68 = 0;
  uint64_t v37 = *a2;
  int64_t v38 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  if (v38)
  {
    if (v38 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = operator new(v38);
    uint64_t v67 = __p;
    uint64_t v39 = (char *)__p + 4 * (v38 >> 2);
    unint64_t v68 = v39;
    memcpy(__p, v37, v38);
    uint64_t v67 = v39;
  }
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v69, (const operations_research::sat::CpModelProto *)a1);
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  int64_t v40 = v35 - v34;
  if (v40)
  {
    if (v40 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v41 = (char *)operator new(v40);
    *(void *)&long long v70 = v41;
    uint64_t v71 = &v41[16 * (v40 >> 4)];
    size_t v42 = v40 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v41, v34, v42);
    *((void *)&v70 + 1) = &v41[v42];
  }
  long long v72 = 0uLL;
  uint64_t v73 = 0;
  size_t v43 = v60;
  int64_t v44 = v61 - (void)v60;
  if ((_DWORD *)v61 != v60)
  {
    if (v44 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    *(void *)&long long v72 = operator new(v61 - (void)v60);
    *((void *)&v72 + 1) = v72;
    uint64_t v45 = v72 + 4 * (v44 >> 2);
    uint64_t v73 = v45;
    memcpy((void *)v72, v43, v44);
    *((void *)&v72 + 1) = v45;
  }
  *(void *)(a5 + 24) = 0;
  uint64_t v46 = (char *)operator new(0x108uLL);
  *(void *)uint64_t v46 = &unk_26F0C12D8;
  BOOL v47 = v46 + 8;
  uint64_t v48 = (uint64_t)v64;
  if (!v64) {
    goto LABEL_64;
  }
  if (v64 != v63)
  {
    uint64_t v48 = (*(uint64_t (**)(void))(*v64 + 16))();
LABEL_64:
    *((void *)v46 + 4) = v48;
    goto LABEL_66;
  }
  *((void *)v46 + 4) = v47;
  (*(void (**)(void *, char *))(v63[0] + 24))(v63, v47);
LABEL_66:
  *((void *)v46 + 6) = 0;
  uint64_t v49 = __p;
  *((void *)v46 + 5) = v65;
  *((void *)v46 + 7) = 0;
  *((void *)v46 + 8) = 0;
  int64_t v50 = v67 - v49;
  if (v67 != v49)
  {
    uint64_t v55 = v34;
    if (v50 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v51 = (char *)operator new(v67 - v49);
    *((void *)v46 + 6) = v51;
    *((void *)v46 + 7) = v51;
    uint64_t v52 = &v51[4 * (v50 >> 2)];
    *((void *)v46 + 8) = v52;
    memcpy(v51, v49, v50);
    *((void *)v46 + 7) = v52;
    size_t v34 = v55;
  }
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(v46 + 72), (const operations_research::sat::CpModelProto *)v69);
  *(_OWORD *)(v46 + 216) = v70;
  *((void *)v46 + 29) = v71;
  uint64_t v71 = 0;
  long long v70 = 0uLL;
  *((_OWORD *)v46 + 15) = v72;
  *((void *)v46 + 32) = v73;
  uint64_t v73 = 0;
  long long v72 = 0uLL;
  *(void *)(a5 + 24) = v46;
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)v69);
  if (__p)
  {
    uint64_t v67 = __p;
    operator delete(__p);
  }
  if (v64 == v63)
  {
    (*(void (**)(void *))(v63[0] + 32))(v63);
    if (v34) {
LABEL_75:
    }
      operator delete(v34);
  }
  else
  {
    if (v64) {
      (*(void (**)(void))(*v64 + 40))();
    }
    if (v34) {
      goto LABEL_75;
    }
  }
  if (v43) {
    operator delete(v43);
  }
}

void sub_23CC73F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  operator delete(v50);
  operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1::~$_1(&a19);
  if (v49) {
    operator delete(v49);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void *operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1::~$_1(void *a1)
{
  uint64_t v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[26];
  if (v3)
  {
    a1[27] = v3;
    operator delete(v3);
  }
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(a1 + 8));
  uint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[3];
  if (v5 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 40))(v5);
    }
    return a1;
  }
}

void operations_research::sat::DiversifySearchParameters(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)a5, (const operations_research::sat::SatParameters *)a1);
  int v10 = *(_DWORD *)(a5 + 20);
  *(_DWORD *)(a5 + 272) = *(_DWORD *)(a1 + 272) + a3;
  int v11 = v10 | 0x8000080;
  *(_DWORD *)(a5 + 20) = v10 | 0x8000080;
  *(unsigned char *)(a5 + 155) = 0;
  if (*(unsigned char *)(a1 + 154)) {
    BOOL v12 = *(unsigned char *)(a1 + 153) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    LODWORD(v25) = a3;
    int v27 = 4;
    if (a3 > 4) {
      google::MakeCheckOpString<int,int>((int)&v25, (int)&v27, "index <= 4");
    }
    uint64_t v16 = *(void *)(a2 + 120);
    if ((_UNKNOWN *)a2 != &operations_research::sat::_CpModelProto_default_instance_ && v16 != 0)
    {
      if (a3)
      {
        if (*(int *)(a2 + 72) >= 1)
        {
          if (a3 == 1) {
            goto LABEL_35;
          }
          goto LABEL_55;
        }
        if (a3 != 1)
        {
LABEL_55:
          if (*(int *)(v16 + 16) >= 2)
          {
            if (a3 == 2)
            {
LABEL_57:
              int v21 = *(_DWORD *)(a5 + 16);
              *(_DWORD *)(a5 + 124) = 0;
              *(_DWORD *)(a5 + 16) = v21 | 0x80040000;
              *(unsigned char *)(a5 + 147) = 1;
              *(_DWORD *)(a5 + 24) |= 0x4000000u;
              *(_DWORD *)(a5 + 396) = 0;
              unint64_t v15 = "core";
              goto LABEL_74;
            }
            goto LABEL_59;
          }
          if (a3 != 2)
          {
LABEL_59:
            *(_DWORD *)(a5 + 16) |= 0x40000u;
            *(_DWORD *)(a5 + 124) = 0;
            if (a3 != 3)
            {
              *(_DWORD *)(a5 + 20) |= 0x80u;
              *(unsigned char *)(a5 + 155) = 1;
              unint64_t v15 = "lns";
              goto LABEL_74;
            }
            *(_DWORD *)(a5 + 396) = 2;
            *(int8x8_t *)(a5 + 20) = vorr_s8(*(int8x8_t *)(a5 + 20), (int8x8_t)0x400000000000100);
            goto LABEL_76;
          }
LABEL_61:
          *(_DWORD *)(a5 + 16) |= 0x40000u;
          *(_DWORD *)(a5 + 124) = 0;
          *(_DWORD *)(a5 + 24) |= 0x4000000u;
          *(_DWORD *)(a5 + 396) = 0;
          unint64_t v15 = "no_lp";
          goto LABEL_74;
        }
LABEL_54:
        int v20 = *(_DWORD *)(a5 + 16);
        *(_DWORD *)(a5 + 124) = 4;
        *(_DWORD *)(a5 + 16) = v20 | 0x20040000;
        *(unsigned char *)(a5 + 145) = 1;
        unint64_t v15 = "pseudo_cost";
        goto LABEL_74;
      }
LABEL_36:
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 0;
      unint64_t v15 = "auto";
      goto LABEL_74;
    }
    if (!a3) {
      goto LABEL_36;
    }
    if (*(int *)(a2 + 72) < 1)
    {
      if (a3 == 1) {
        goto LABEL_61;
      }
LABEL_50:
      if (a3 != 3)
      {
        *(_DWORD *)(a5 + 16) |= 0x40000u;
        if (a3 == 2)
        {
          *(_DWORD *)(a5 + 124) = 0;
          *(_DWORD *)(a5 + 28) |= 1u;
          *(_DWORD *)(a5 + 420) = 0;
          unint64_t v15 = "less encoding";
        }
        else
        {
          *(_DWORD *)(a5 + 124) = 5;
          unint64_t v15 = "random";
        }
        goto LABEL_74;
      }
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 0;
      *(_DWORD *)(a5 + 24) |= 0x4000000u;
      *(_DWORD *)(a5 + 396) = 2;
      goto LABEL_77;
    }
    if (a3 != 1) {
      goto LABEL_50;
    }
LABEL_35:
    *(_DWORD *)(a5 + 16) |= 0x40000u;
    *(_DWORD *)(a5 + 124) = 1;
    unint64_t v15 = "fixed";
    goto LABEL_74;
  }
  uint64_t v13 = *(void *)(a2 + 120);
  if ((_UNKNOWN *)a2 == &operations_research::sat::_CpModelProto_default_instance_ || v13 == 0)
  {
    if (!a3)
    {
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 0;
      unint64_t v15 = "auto";
      goto LABEL_74;
    }
    if (*(int *)(a2 + 72) >= 1 && !--a3)
    {
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 1;
      unint64_t v15 = "fixed";
      goto LABEL_74;
    }
    switch(a3)
    {
      case 3:
        *(_DWORD *)(a5 + 16) |= 0x40000u;
        *(_DWORD *)(a5 + 124) = 0;
        *(_DWORD *)(a5 + 24) |= 0x4000000u;
        *(_DWORD *)(a5 + 396) = 2;
        unint64_t v15 = "max_lp";
        goto LABEL_74;
      case 2:
        *(_DWORD *)(a5 + 16) |= 0x40000u;
        *(_DWORD *)(a5 + 124) = 0;
        *(_DWORD *)(a5 + 24) |= 0x4000000u;
        *(_DWORD *)(a5 + 396) = 0;
        unint64_t v15 = "no_lp";
        goto LABEL_74;
      case 1:
        *(_DWORD *)(a5 + 16) |= 0x40000u;
        *(_DWORD *)(a5 + 124) = 0;
        *(_DWORD *)(a5 + 28) |= 1u;
        *(_DWORD *)(a5 + 420) = 0;
        unint64_t v15 = "less encoding";
LABEL_74:
        MEMORY[0x23ECF27D0](a4, v15);
        return;
    }
    int v22 = *(_DWORD *)(a5 + 16);
    if (a3 == 4)
    {
      *(_DWORD *)(a5 + 16) = v22 | 0x40000;
      *(_DWORD *)(a5 + 124) = 5;
      unint64_t v15 = "random";
      goto LABEL_74;
    }
    *(_DWORD *)(a5 + 124) = 1;
    *(unsigned char *)(a5 + 151) = 1;
    *(_DWORD *)(a5 + 16) = v22 | 0x8040000;
    *(_DWORD *)(a5 + 20) = v10 | 0x8000088;
    *(void *)(a5 + 136) = a3 - 4;
    uint64_t v28 = (a3 - 4);
    uint64_t v29 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
    absl::lts_2020_02_25::str_format_internal::FormatPack("random_%i", 9, (uint64_t)&v28, 1, (uint64_t)&v25);
  }
  else
  {
    if (!a3)
    {
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 0;
      *(_DWORD *)(a5 + 24) |= 0x4000000u;
      *(_DWORD *)(a5 + 396) = 1;
      unint64_t v15 = "auto";
      goto LABEL_74;
    }
    if (*(int *)(a2 + 72) < 1)
    {
      if (a3 == 1)
      {
        *(_DWORD *)(a5 + 16) |= 0x40000u;
        *(_DWORD *)(a5 + 124) = 3;
        unint64_t v15 = "lp_br";
        goto LABEL_74;
      }
    }
    else if (a3 == 1)
    {
      goto LABEL_35;
    }
    if (a3 == 3) {
      goto LABEL_61;
    }
    if (a3 == 2) {
      goto LABEL_54;
    }
    unsigned int v18 = a3 - 4;
    if (a3 == 4)
    {
      int v23 = *(_DWORD *)(a5 + 24) | 0x4000000;
      *(_DWORD *)(a5 + 396) = 2;
      int v24 = *(_DWORD *)(a5 + 16) | 0x40000;
      *(_DWORD *)(a5 + 124) = 0;
      *(_DWORD *)(a5 + 16) = v24;
      *(_DWORD *)(a5 + 20) = v10 | 0x8000180;
      *(_DWORD *)(a5 + 24) = v23;
LABEL_76:
      *(unsigned char *)(a5 + 156) = 1;
LABEL_77:
      unint64_t v15 = "max_lp";
      goto LABEL_74;
    }
    if (*(int *)(a1 + 416) >= 9)
    {
      unsigned int v18 = a3 - 5;
      if (a3 == 5)
      {
        *(_DWORD *)(a5 + 16) |= 0x40000u;
        *(_DWORD *)(a5 + 124) = 5;
        unint64_t v15 = "quick_restart";
        goto LABEL_74;
      }
    }
    if (*(int *)(v13 + 16) >= 2 && !--v18) {
      goto LABEL_57;
    }
    int v19 = *(_DWORD *)(a5 + 16) | 0x40000;
    *(_DWORD *)(a5 + 124) = 0;
    *(_DWORD *)(a5 + 16) = v19;
    *(_DWORD *)(a5 + 20) = v11;
    *(unsigned char *)(a5 + 155) = 1;
    uint64_t v28 = v18;
    uint64_t v29 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
    absl::lts_2020_02_25::str_format_internal::FormatPack("lns_%i", 6, (uint64_t)&v28, 1, (uint64_t)&v25);
  }
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v25;
  *(void *)(a4 + 16) = v26;
}

void sub_23CC747A8(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC747B0(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_23CC747C4(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_23CC747D8(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_23CC747EC(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_23CC74800(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_23CC74814(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set(uint64_t a1, char **a2)
{
  *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = a2[2];
  if (v4 == (char *)7)
  {
    unint64_t v5 = 8;
  }
  else
  {
    unint64_t v5 = (unint64_t)&v4[(uint64_t)(v4 - 1) / 7];
    if (!v5) {
      goto LABEL_5;
    }
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::resize((char **)a1, (char *)(0xFFFFFFFFFFFFFFFFLL >> __clz(v5)));
LABEL_5:
  uint64_t v6 = *a2;
  int v7 = a2[1];
  if (**a2 > -2)
  {
    uint64_t v8 = *a2;
    int v11 = a2[3];
    int v10 = &v11[(void)v6];
    if (v6 == &v11[(void)v6]) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v8 = *a2;
    do
    {
      unint64_t v9 = (__clz(__rbit64(((*(void *)v8 >> 7) & ~*(void *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v8 += v9;
      v7 += 24 * v9;
    }
    while (*v8 < -1);
    int v10 = &a2[3][(void)v6];
    if (v8 == v10) {
      goto LABEL_20;
    }
  }
  do
  {
    unint64_t v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v7)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *(int *)v7));
    uint64_t v13 = *(char **)a1;
    uint64_t v14 = *(void *)(a1 + 24);
    unint64_t v15 = ((v12 >> 7) ^ (*(void *)a1 >> 12)) & v14;
    unint64_t v16 = 0;
    for (unint64_t i = *(void *)(*(void *)a1 + v15) & (~*(void *)(*(void *)a1 + v15) << 7) & 0x8080808080808080;
          !i;
          unint64_t i = *(void *)&v13[v15] & (~*(void *)&v13[v15] << 7) & 0x8080808080808080)
    {
      v16 += 8;
      unint64_t v15 = (v16 + v15) & v14;
    }
    unint64_t v18 = (v15 + (__clz(__rbit64(i)) >> 3)) & v14;
    v13[v18] = v12 & 0x7F;
    *(unsigned char *)((*(void *)(a1 + 24) & 7) + *(void *)a1 + ((v18 - 8) & *(void *)(a1 + 24)) + 1) = v12 & 0x7F;
    uint64_t v19 = *(void *)(a1 + 8) + 24 * v18;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v7;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)(v7 + 8);
    int v20 = *(atomic_ullong **)(a1 + 32);
    if (v20) {
      absl::lts_2020_02_25::container_internal::RecordInsertSlow(v20, v12, v16);
    }
    int v21 = *++v8;
    v7 += 24;
    if (v21 <= -2)
    {
      do
      {
        unint64_t v22 = (__clz(__rbit64(((*(void *)v8 >> 7) & ~*(void *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v8 += v22;
        v7 += 24 * v22;
      }
      while (*v8 < -1);
    }
  }
  while (v8 != v10);
LABEL_20:
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 40) -= a2[2];
  return a1;
}

void sub_23CC74AAC(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

void sub_23CC74AC0(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    int v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v9 = (char *)operator new(v8 + 24 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  int v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v26 = a1[4];
    if (!v26) {
      return;
    }
LABEL_21:
    *((void *)v26 + 4) = v14 >> 3;
    *((void *)v26 + 2) = 0;
    return;
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      int v20 = &v5[24 * (void)v13];
      unint64_t v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v20)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v20));
      unint64_t v22 = *a1;
      int v23 = a1[3];
      unint64_t v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      unint64_t v25 = *(void *)&(*a1)[v24] & (~*(void *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v24 = (v15 + v24) & (unint64_t)v23;
          unint64_t v25 = *(void *)&v22[v24] & (~*(void *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      unint64_t v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      char v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      long long v18 = *(_OWORD *)v20;
      uint64_t v19 = (uint64_t)&a1[1][24 * v16];
      *(void *)(v19 + 16) = *((void *)v20 + 2);
      *(_OWORD *)uint64_t v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v26 = a1[4];
  if (v26) {
    goto LABEL_21;
  }
}

void *std::vector<operations_research::sat::Strategy>::vector(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v7 = operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[4 * (v6 >> 5)];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::Strategy>,operations_research::sat::Strategy*,operations_research::sat::Strategy*,operations_research::sat::Strategy*>(v3, v4, v5, v7);
  }
  return a1;
}

void sub_23CC74DDC(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    std::vector<operations_research::sat::Strategy>::vector(v1 + 1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::Strategy>,operations_research::sat::Strategy*,operations_research::sat::Strategy*,operations_research::sat::Strategy*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      unint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        int v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4[3] = *(void *)(v6 + 24);
      a4 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_23CC74EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CC74EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::Strategy>,operations_research::sat::Strategy*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::Strategy>,operations_research::sat::Strategy*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        int v7 = *(void **)(v5 - 32);
        v5 -= 32;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 24) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

uint64_t std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F0C1210;
  if (*(void *)(a1 + 72))
  {
    operator delete(*(void **)(a1 + 48));
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      do
      {
        uint64_t v8 = *(void **)(v6 - 32);
        v6 -= 32;
        int v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 24) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v3;
    operator delete(v5);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F0C1210;
  if (*(void *)(a1 + 72))
  {
    operator delete(*(void **)(a1 + 48));
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      do
      {
        uint64_t v8 = *(void **)(v6 - 32);
        v6 -= 32;
        int v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 24) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v3;
    operator delete(v5);
  }

  JUMPOUT(0x23ECF2BC0);
}

char *std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)unint64_t v2 = &unk_26F0C1210;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  std::vector<operations_research::sat::Strategy>::vector((void *)v2 + 3, (uint64_t *)(a1 + 24));
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set((uint64_t)(v2 + 48), (char **)(a1 + 48));
  *((void *)v2 + 12) = *(void *)(a1 + 96);
  return v2;
}

void sub_23CC751C8(_Unwind_Exception *a1)
{
  if (*v2)
  {
    operations_research::sat::ConstructSearchStrategyInternal((uint64_t)v1, *v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1210;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  std::vector<operations_research::sat::Strategy>::vector((void *)(a2 + 24), (uint64_t *)(a1 + 24));
  uint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set(a2 + 48, (char **)(a1 + 48));
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  return result;
}

void sub_23CC75284(_Unwind_Exception *exception_object)
{
  if (*v2) {
    operations_research::sat::ConstructSearchStrategyInternal(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(*(void *)(a1 + 96));
  uint64_t v3 = *(int ***)(v1 + 24);
  long long v72 = *(int ***)(v1 + 32);
  if (v3 == v72) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = v2;
  uint64_t v73 = (uint64_t *)(v1 + 48);
  uint64_t v75 = v1;
  uint64_t v78 = v2;
LABEL_4:
  std::string __p = 0;
  uint64_t v82 = 0;
  unint64_t v83 = 0;
  uint64_t v6 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    goto LABEL_3;
  }
  int v7 = 0;
  uint64_t v8 = 0;
  int64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0x7FFFFFFFFFFFFFFELL;
  int v12 = -1;
  uint64_t v79 = v3[1];
  while (2)
  {
    int v14 = *v6;
    uint64_t v15 = *(void **)(v1 + 16);
    unint64_t v16 = *(int *)(v15[51] + 4 * *v6);
    if (v16 != -1
      && ((*(void *)(*(void *)(v15[117] + 24) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
    {
      goto LABEL_9;
    }
    uint64_t v17 = v15[5];
    int64_t v18 = *(void *)(v17 + 12 * v14);
    uint64_t v19 = *(void *)(v17 + 12 * (v14 ^ 1));
    if (!(v18 + v19)) {
      goto LABEL_9;
    }
    uint64_t v20 = 0;
    unint64_t v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v14)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v14));
    unint64_t v22 = *(void *)(v1 + 48);
    unint64_t v23 = (v22 >> 12) ^ (v21 >> 7);
    uint64_t v24 = *(void *)(v1 + 72);
    uint64_t v25 = 0x101010101010101 * (v21 & 0x7F);
    while (1)
    {
      uint64_t v26 = v23 & v24;
      uint64_t v27 = *(void *)(v22 + v26);
      unint64_t v28 = ((v27 ^ v25) - 0x101010101010101) & ~(v27 ^ v25) & 0x8080808080808080;
      if (v28) {
        break;
      }
LABEL_17:
      if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_20;
      }
      v20 += 8;
      unint64_t v23 = v20 + v26;
    }
    while (1)
    {
      unint64_t v29 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v24;
      if (*(_DWORD *)(*(void *)(v1 + 56) + 24 * v29) == v14) {
        break;
      }
      v28 &= v28 - 1;
      if (!v28) {
        goto LABEL_17;
      }
    }
    if (v29 == v24)
    {
LABEL_20:
      uint64_t v30 = 0;
      uint64_t v31 = 1;
      uint64_t v32 = v3;
      uint64_t v33 = *((unsigned int *)v3 + 6);
      if (v33 > 4)
      {
LABEL_94:
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v80, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 103);
        long long v70 = (void *)google::LogMessage::stream((google::LogMessage *)v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Unknown VariableSelectionStrategy ", 34);
        std::ostream::operator<<();
LABEL_92:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v80);
      }
    }
    else
    {
      int v76 = v8;
      size_t v34 = v3;
      uint64_t v35 = v11;
      int64_t v36 = v9;
      int v37 = v12;
      uint64_t v38 = v10;
      *(_DWORD *)int v80 = *v6;
      uint64_t v39 = (uint64_t *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>>(v73, (int *)v80);
      uint64_t v31 = *v39;
      uint64_t v30 = v39[1];
      uint64_t v10 = v38;
      uint64_t v4 = v78;
      uint64_t v5 = v79;
      int v12 = v37;
      int64_t v9 = v36;
      uint64_t v11 = v35;
      int64_t v40 = v34;
      uint64_t v1 = v75;
      uint64_t v8 = v76;
      uint64_t v32 = v40;
      uint64_t v33 = *((unsigned int *)v40 + 6);
    }
    uint64_t v41 = v33;
    switch((int)v33)
    {
      case 0:
        goto LABEL_28;
      case 1:
        uint64_t v41 = v30 + v31 * v18;
        goto LABEL_28;
      case 2:
        uint64_t v41 = v31 * v19 - v30;
        goto LABEL_28;
      case 3:
        uint64_t v41 = v31 - v31 * (v18 + v19);
        goto LABEL_28;
      case 4:
        uint64_t v41 = v31 * (v19 + v18 - 1);
LABEL_28:
        if (v41 < v11)
        {
          uint64_t v10 = -v19;
          int64_t v9 = v18;
          uint64_t v11 = v41;
          int v12 = v14;
        }
        if (v33)
        {
          if (*(unsigned char *)(v4 + 151)) {
            goto LABEL_34;
          }
LABEL_8:
          uint64_t v3 = v32;
LABEL_9:
          if (++v6 == v5) {
            goto LABEL_53;
          }
          continue;
        }
        if (*(unsigned char *)(v4 + 151))
        {
LABEL_34:
          if (v8 == v7 || v41 <= *(void *)(v4 + 136) + v11)
          {
            if (v7 < v83)
            {
              *(_DWORD *)int v7 = v14;
              *(void *)(v7 + 4) = v41;
              uint64_t v13 = v7 + 12;
            }
            else
            {
              unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 2) + 1;
              unint64_t v43 = 0x1555555555555555;
              if (v42 > 0x1555555555555555) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((v83 - v8) >> 2) > v42) {
                unint64_t v42 = 0x5555555555555556 * ((v83 - v8) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v83 - v8) >> 2) < 0xAAAAAAAAAAAAAAALL) {
                unint64_t v43 = v42;
              }
              uint64_t v77 = v10;
              if (v43)
              {
                uint64_t v74 = v11;
                if (v43 > 0x1555555555555555) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                int64_t v44 = v9;
                int v45 = v12;
                unint64_t v46 = v43;
                BOOL v47 = (char *)operator new(12 * v43);
                uint64_t v4 = v78;
                uint64_t v5 = v79;
                int v12 = v45;
                int64_t v9 = v44;
                uint64_t v11 = v74;
                unint64_t v43 = v46;
              }
              else
              {
                BOOL v47 = 0;
              }
              uint64_t v48 = &v47[4 * ((v7 - v8) >> 2)];
              *(_DWORD *)uint64_t v48 = v14;
              *(void *)(v48 + 4) = v41;
              uint64_t v49 = v48;
              if (v8 != v7)
              {
                do
                {
                  uint64_t v50 = *(void *)(v7 - 12);
                  v7 -= 12;
                  int v51 = *((_DWORD *)v7 + 2);
                  *(void *)(v49 - 12) = v50;
                  v49 -= 12;
                  *((_DWORD *)v49 + 2) = v51;
                }
                while (v7 != v8);
                int v7 = (char *)__p;
              }
              uint64_t v13 = v48 + 12;
              std::string __p = v49;
              uint64_t v82 = v48 + 12;
              unint64_t v83 = &v47[12 * v43];
              if (v7)
              {
                uint64_t v52 = v7;
                int v53 = v12;
                int64_t v54 = v9;
                uint64_t v55 = v11;
                operator delete(v52);
                uint64_t v4 = v78;
                uint64_t v5 = v79;
                uint64_t v11 = v55;
                int64_t v9 = v54;
                int v12 = v53;
              }
              uint64_t v8 = v49;
              uint64_t v1 = v75;
              uint64_t v10 = v77;
            }
            uint64_t v82 = v13;
            int v7 = v13;
          }
          goto LABEL_8;
        }
        uint64_t v3 = v32;
LABEL_53:
        if (v12 != -1)
        {
          if (*(unsigned char *)(v4 + 151))
          {
            int v58 = v3;
            unint64_t v59 = __p;
            if (__p == v7)
            {
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v80, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 125);
              uint64_t v69 = (void *)google::LogMessage::stream((google::LogMessage *)v80);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"Check failed: !active_vars.empty() ", 35);
              goto LABEL_92;
            }
            uint64_t v60 = *(void *)(v4 + 136) + v11;
            uint64_t v61 = (char *)__p;
            while (*(void *)(v61 + 4) <= v60)
            {
              v61 += 12;
              if (v61 == v7) {
                goto LABEL_73;
              }
            }
            if (v61 != v7)
            {
              unint64_t v62 = v61 + 12;
              if (v61 + 12 != v7)
              {
                do
                {
                  if (*(void *)(v62 + 4) <= v60)
                  {
                    uint64_t v63 = *(void *)v62;
                    *((_DWORD *)v61 + 2) = *((_DWORD *)v62 + 2);
                    *(void *)uint64_t v61 = v63;
                    v61 += 12;
                  }
                  v62 += 12;
                }
                while (v62 != v7);
                unint64_t v59 = __p;
                int v7 = v82;
              }
            }
            if (v61 != v7)
            {
              int v7 = v61;
              uint64_t v82 = v61;
            }
LABEL_73:
            *(_DWORD *)int v80 = 0;
            *(_DWORD *)&v80[4] = -1431655765 * ((unint64_t)(v7 - v59) >> 2) - 1;
            uint64_t v64 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>(*(void *)(v1 + 96));
            int v12 = *(_DWORD *)&v59[12
                                * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v80, v64, v80)];
            uint64_t v65 = *(void *)(*(void *)(v1 + 16) + 40);
            int64_t v9 = *(void *)(v65 + 12 * v12);
            uint64_t v10 = -*(void *)(v65 + 12 * (v12 ^ 1));
            uint64_t v3 = v58;
          }
          switch(*((_DWORD *)v3 + 7))
          {
            case 0:
            case 4:
              if (v9 >= (uint64_t)0x8000000000000002) {
                uint64_t v10 = -v9;
              }
              else {
                uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
              }
              *(_DWORD *)int v80 = v12 ^ 1;
              goto LABEL_89;
            case 1:
              goto LABEL_82;
            case 2:
              uint64_t v67 = v10 - v9;
              if (v10 < v9) {
                ++v67;
              }
              int64_t v68 = v9 + (v67 >> 1);
              if (v68 >= (uint64_t)0x8000000000000002) {
                uint64_t v10 = -v68;
              }
              else {
                uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
              }
              *(_DWORD *)int v80 = v12 ^ 1;
              goto LABEL_89;
            case 3:
              uint64_t v66 = v10 - v9;
              if (v10 < v9) {
                ++v66;
              }
              v10 -= v66 >> 1;
LABEL_82:
              *(_DWORD *)int v80 = v12;
LABEL_89:
              *(void *)&v80[4] = v10;
              unint64_t AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(*(unsigned int **)(v1 + 8), *(const char **)v80, SHIDWORD(v10));
              if (__p) {
                operator delete(__p);
              }
              return AssociatedLiteral;
            default:
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v80, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 164);
              uint64_t v71 = (void *)google::LogMessage::stream((google::LogMessage *)v80);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Unknown DomainReductionStrategy ", 32);
              std::ostream::operator<<();
              goto LABEL_92;
          }
        }
        if (__p)
        {
          operator delete(__p);
          uint64_t v4 = v78;
        }
LABEL_3:
        v3 += 4;
        if (v3 != v72) {
          goto LABEL_4;
        }
        return 0xFFFFFFFFLL;
      default:
        goto LABEL_94;
    }
  }
}

void sub_23CC759D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC759D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat31ConstructSearchStrategyInternalERKN4absl14lts_2020_02_2513flat_hash_ma"
                     "pIiNSt3__14pairIxxEENS2_13hash_internal4HashIiEENS4_8equal_toIiEENS4_9allocatorINS5_IKiS6_EEEEEERKN"
                     "S4_6vectorINS0_8StrategyENSC_ISK_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat31ConstructSearchStrategyInternalERKN4absl14lts_2020_02_2513f"
                                "lat_hash_mapIiNSt3__14pairIxxEENS2_13hash_internal4HashIiEENS4_8equal_toIiEENS4_9allocat"
                                "orINS5_IKiS6_EEEEEERKNS4_6vectorINS0_8StrategyENSC_ISK_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat31ConstructSearchStrategyInternalERKN4absl14lts_2020_02_2513flat_hash_mapIiNSt3__14pairIxxEENS2_13hash_internal4HashIiEENS4_8equal_toIiEENS4_9allocatorINS5_IKiS6_EEEEEERKNS4_6vectorINS0_8StrategyENSC_ISK_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat31ConstructSearchStrategyInternalERKN4absl14lts_2020_02_2513flat_hash_mapIiNSt3__14pairIxxEENS2_13hash_internal4HashIiEENS4_8equal_toIiEENS4_9allocatorINS5_IKiS6_EEEEEERKNS4_6vectorINS0_8StrategyENSC_ISK_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void std::__function::__alloc_func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    operator delete(*(void **)(a1 + 40));
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 40) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void **)(a1 + 16);
    if (v4 != v3)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      do
      {
        uint64_t v8 = *(void **)(v6 - 32);
        v6 -= 32;
        int v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 24) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v3;
    operator delete(v5);
  }
}

_DWORD *gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  uint64_t v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v10 = v7 & v8;
    uint64_t v11 = *(void *)(v5 + v10);
    unint64_t v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v2 += 8;
    unint64_t v7 = v2 + v10;
  }
  while (1)
  {
    unint64_t v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    int v14 = (_DWORD *)(v6 + 24 * v13);
    if (*v14 == v3) {
      break;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_5;
    }
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v18, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    unint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v18);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v18);
  }
  return v14 + 2;
}

void sub_23CC75CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ModelRandomGenerator>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ModelRandomGenerator>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::ModelRandomGenerator>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CC75EC8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1000C407BAC9B3ELL);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::ModelRandomGenerator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C1290;
  a1[1] = 0;
  if (v2) {
    MEMORY[0x23ECF2BC0](v2, 0x1000C407BAC9B3ELL);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::ModelRandomGenerator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C1290;
  a1[1] = 0;
  if (v2) {
    MEMORY[0x23ECF2BC0](v2, 0x1000C407BAC9B3ELL);
  }

  JUMPOUT(0x23ECF2BC0);
}

char *std::vector<operations_research::sat::Strategy>::__push_back_slow_path<operations_research::sat::Strategy>(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 32 * v7;
  uint64_t v10 = (char *)operator new(32 * v7);
  uint64_t v11 = &v10[32 * v3];
  unint64_t v12 = &v10[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *((void *)v11 + 2) = v13;
  *((void *)v11 + 3) = v14;
  uint64_t v15 = v11 + 32;
  uint64_t v17 = (char *)*a1;
  unint64_t v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    if (!v16) {
      return v15;
    }
    goto LABEL_17;
  }
  uint64_t v18 = 0;
  do
  {
    uint64_t v19 = &v11[v18];
    uint64_t v20 = &v16[v18];
    *((_OWORD *)v19 - 2) = *(_OWORD *)&v16[v18 - 32];
    *((void *)v19 - 2) = *(void *)&v16[v18 - 16];
    *((void *)v20 - 4) = 0;
    *((void *)v20 - 3) = 0;
    *((void *)v20 - 2) = 0;
    *((void *)v19 - 1) = *(void *)&v16[v18 - 8];
    v18 -= 32;
  }
  while (&v16[v18] != v17);
  unint64_t v21 = (char *)*a1;
  unint64_t v16 = (char *)a1[1];
  *a1 = &v11[v18];
  a1[1] = v15;
  a1[2] = v12;
  if (v16 != v21)
  {
    unint64_t v22 = v16;
    do
    {
      uint64_t v24 = (void *)*((void *)v22 - 4);
      v22 -= 32;
      unint64_t v23 = v24;
      if (v24)
      {
        *((void *)v16 - 3) = v23;
        operator delete(v23);
      }
      unint64_t v16 = v22;
    }
    while (v22 != v21);
    unint64_t v16 = v21;
  }
  if (v16) {
LABEL_17:
  }
    operator delete(v16);
  return v15;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::drop_deletes_without_resize(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v38 = *(void *)(result + 32);
    if (!v38) {
      return result;
    }
LABEL_26:
    *(void *)(v38 + 32) = v15 >> 3;
    *(void *)(v38 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(result + 8) + 24 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          uint64_t v26 = v25 + 24 * v18;
          uint64_t v27 = (long long *)(v25 + 24 * v14);
          long long v28 = *v27;
          *(void *)(v26 + 16) = *((void *)v27 + 2);
          *(_OWORD *)uint64_t v26 = v28;
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          unint64_t v29 = (long long *)(v25 + 24 * v14);
          long long v30 = *v29;
          uint64_t v31 = *((void *)v29 + 2);
          uint64_t v32 = (long long *)(v25 + 24 * v18);
          uint64_t v33 = *((void *)v32 + 2);
          long long *v29 = *v32;
          *((void *)v29 + 2) = v33;
          uint64_t v34 = *(void *)(result + 8) + 24 * v18;
          *(_OWORD *)uint64_t v34 = v30;
          *(void *)(v34 + 16) = v31;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v35 = v14 - (v14 >> 3);
  BOOL v36 = v14 == 7;
  uint64_t v37 = 6;
  if (!v36) {
    uint64_t v37 = v35;
  }
  *(void *)(result + 40) = v37 - *(void *)(result + 16);
  uint64_t v38 = *(void *)(result + 32);
  if (v38) {
    goto LABEL_26;
  }
  return result;
}

void *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 59) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 32 * a3;
    uint64_t v6 = (char *)operator new(32 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    while (1)
    {
      int8x16_t v9 = &v6[v7];
      uint64_t v10 = a2 + v7;
      uint64_t v11 = *(void *)(a2 + v7 + 24);
      if (v11)
      {
        if (v10 == v11)
        {
          *(void *)&v6[v7 + 24] = v9;
          (*(void (**)(uint64_t, char *))(*(void *)(a2 + v7) + 24))(v10, &v6[v7]);
          goto LABEL_6;
        }
        uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v11 + 16))(*(void *)(a2 + v7 + 24));
      }
      else
      {
        uint64_t v8 = 0;
      }
      *((void *)v9 + 3) = v8;
LABEL_6:
      v7 += 32;
      if (v5 == v7)
      {
        a1[1] = &v6[v7];
        return a1;
      }
    }
  }
  return a1;
}

void sub_23CC766E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_23CC766FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100]((uint64_t)v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  unint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      unint64_t v4 = v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 4;
        uint64_t v7 = v4 - 4;
        do
        {
          uint64_t v9 = (void *)v7[3];
          if (v7 == v9)
          {
            (*(void (**)(void *))(*v7 + 32))(v7);
          }
          else if (v9)
          {
            (*(void (**)(void *))(*v9 + 40))(v9);
          }
          v6 -= 4;
          BOOL v8 = v7 == v3;
          v7 -= 4;
        }
        while (!v8);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = a3;
  uint64_t v9 = (int *)result;
  while (2)
  {
    uint64_t v10 = a2;
    v321 = a2 - 1;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        int8x16_t v12 = v11;
        uint64_t v13 = (char *)v10 - (char *)v11;
        uint64_t v14 = v10 - v11;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0:
            case 1:
              return result;
            case 2:
              uint64_t v141 = *(a2 - 1);
              uint64_t v142 = *v12;
              uint64_t v143 = *(void *)(*(void *)v8 + 32) + 8;
              int v144 = *(const void ***)(*(void *)(v143 + 8 * v141) + 40);
              uint64_t v145 = *(const void ***)(*(void *)(v143 + 8 * v142) + 40);
              int v146 = *((char *)v145 + 23);
              int v147 = *((char *)v144 + 23);
              if (v147 >= 0) {
                size_t v148 = *((unsigned __int8 *)v144 + 23);
              }
              else {
                size_t v148 = (size_t)v144[1];
              }
              if (v147 >= 0) {
                uint64_t v149 = v144;
              }
              else {
                uint64_t v149 = *v144;
              }
              if (v146 >= 0) {
                size_t v150 = *((unsigned __int8 *)v145 + 23);
              }
              else {
                size_t v150 = (size_t)v145[1];
              }
              if (v146 >= 0) {
                uint64_t v151 = v145;
              }
              else {
                uint64_t v151 = *v145;
              }
              if (v150 >= v148) {
                size_t v152 = v148;
              }
              else {
                size_t v152 = v150;
              }
              uint64_t result = memcmp(v149, v151, v152);
              BOOL v153 = v148 < v150;
              if (result) {
                BOOL v153 = (int)result < 0;
              }
              if (v153)
              {
                *int8x16_t v12 = v141;
                *(a2 - 1) = v142;
              }
              break;
            case 3:
              uint64_t v154 = *(void *)(*(void *)v8 + 32);
              uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v12, v12 + 1, v321, v154);
              break;
            case 4:
              uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v12, v12 + 1, v12 + 2, v321, v8);
              break;
            case 5:
              uint64_t result = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,0>(v12, v12 + 1, v12 + 2, v12 + 3, v321, v8);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        v329 = v12;
        if (v13 <= 95)
        {
          uint64_t v155 = *(void *)v8;
          if (a5)
          {
            if (v12 != v10)
            {
              uint64_t v156 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v157 = 0;
                uint64_t v158 = *(void *)(v155 + 32);
                uint64_t v159 = v12;
                do
                {
                  uint64_t v161 = *v159;
                  uint64_t v162 = v159[1];
                  uint64_t v159 = v156;
                  uint64_t v163 = *(const void ***)(*(void *)(v158 + 8 + 8 * v162) + 40);
                  uint64_t v164 = *(void *)(*(void *)(v158 + 8 + 8 * v161) + 40);
                  int v165 = *(char *)(v164 + 23);
                  int v166 = *((char *)v163 + 23);
                  if (v166 >= 0) {
                    size_t v167 = *((unsigned __int8 *)v163 + 23);
                  }
                  else {
                    size_t v167 = (size_t)v163[1];
                  }
                  if (v166 >= 0) {
                    uint64_t v168 = *(const void **)(*(void *)(v158 + 8 + 8 * v162) + 40);
                  }
                  else {
                    uint64_t v168 = *v163;
                  }
                  if (v165 >= 0) {
                    size_t v169 = *(unsigned __int8 *)(v164 + 23);
                  }
                  else {
                    size_t v169 = *(void *)(v164 + 8);
                  }
                  if (v165 >= 0) {
                    uint64_t v170 = *(const void **)(*(void *)(v158 + 8 + 8 * v161) + 40);
                  }
                  else {
                    uint64_t v170 = *(const void **)v164;
                  }
                  if (v169 >= v167) {
                    size_t v171 = v167;
                  }
                  else {
                    size_t v171 = v169;
                  }
                  uint64_t result = memcmp(v168, v170, v171);
                  int v172 = v329;
                  BOOL v173 = v167 < v169;
                  if (result) {
                    BOOL v173 = (int)result < 0;
                  }
                  if (v173)
                  {
                    uint64_t v174 = v157;
                    do
                    {
                      *(int *)((char *)v172 + v174 + 4) = v161;
                      if (!v174)
                      {
                        int v160 = v172;
                        goto LABEL_245;
                      }
                      uint64_t v161 = *(int *)((char *)v172 + v174 - 4);
                      uint64_t v175 = *(void *)(*(void *)(v158 + 8 * v161 + 8) + 40);
                      int v176 = *(char *)(v175 + 23);
                      int v177 = *((char *)v163 + 23);
                      if (v177 >= 0) {
                        size_t v178 = *((unsigned __int8 *)v163 + 23);
                      }
                      else {
                        size_t v178 = (size_t)v163[1];
                      }
                      if (v177 >= 0) {
                        unint64_t v179 = v163;
                      }
                      else {
                        unint64_t v179 = *v163;
                      }
                      if (v176 >= 0) {
                        size_t v180 = *(unsigned __int8 *)(v175 + 23);
                      }
                      else {
                        size_t v180 = *(void *)(v175 + 8);
                      }
                      if (v176 >= 0) {
                        long long v181 = *(const void **)(*(void *)(v158 + 8 * v161 + 8) + 40);
                      }
                      else {
                        long long v181 = *(const void **)v175;
                      }
                      if (v180 >= v178) {
                        size_t v182 = v178;
                      }
                      else {
                        size_t v182 = v180;
                      }
                      uint64_t result = memcmp(v179, v181, v182);
                      int v172 = v329;
                      BOOL v183 = v178 < v180;
                      if (result) {
                        BOOL v183 = (int)result < 0;
                      }
                      v174 -= 4;
                    }
                    while (v183);
                    int v160 = (int *)((char *)v329 + v174 + 4);
LABEL_245:
                    *int v160 = v162;
                  }
                  uint64_t v156 = v159 + 1;
                  v157 += 4;
                }
                while (v159 + 1 != a2);
              }
            }
          }
          else if (v12 != v10)
          {
            uint64_t v294 = v12 + 1;
            if (v12 + 1 != a2)
            {
              uint64_t v295 = *(void *)(v155 + 32);
              do
              {
                uint64_t v297 = *v12;
                uint64_t v296 = v12[1];
                int8x16_t v12 = v294;
                uint64_t v298 = *(const void ***)(*(void *)(v295 + 8 + 8 * v296) + 40);
                uint64_t v299 = *(void *)(*(void *)(v295 + 8 + 8 * v297) + 40);
                int v300 = *(char *)(v299 + 23);
                int v301 = *((char *)v298 + 23);
                if (v301 >= 0) {
                  size_t v302 = *((unsigned __int8 *)v298 + 23);
                }
                else {
                  size_t v302 = (size_t)v298[1];
                }
                if (v301 >= 0) {
                  v303 = *(const void **)(*(void *)(v295 + 8 + 8 * v296) + 40);
                }
                else {
                  v303 = *v298;
                }
                if (v300 >= 0) {
                  size_t v304 = *(unsigned __int8 *)(v299 + 23);
                }
                else {
                  size_t v304 = *(void *)(v299 + 8);
                }
                if (v300 >= 0) {
                  v305 = *(const void **)(*(void *)(v295 + 8 + 8 * v297) + 40);
                }
                else {
                  v305 = *(const void **)v299;
                }
                if (v304 >= v302) {
                  size_t v306 = v302;
                }
                else {
                  size_t v306 = v304;
                }
                uint64_t result = memcmp(v303, v305, v306);
                BOOL v307 = v302 < v304;
                if (result) {
                  BOOL v307 = (int)result < 0;
                }
                if (v307)
                {
                  long long v308 = v12;
                  do
                  {
                    *long long v308 = v297;
                    uint64_t v297 = *(v308 - 2);
                    uint64_t v309 = *(void *)(*(void *)(v295 + 8 * v297 + 8) + 40);
                    int v310 = *(char *)(v309 + 23);
                    int v311 = *((char *)v298 + 23);
                    if (v311 >= 0) {
                      size_t v312 = *((unsigned __int8 *)v298 + 23);
                    }
                    else {
                      size_t v312 = (size_t)v298[1];
                    }
                    if (v311 >= 0) {
                      v313 = v298;
                    }
                    else {
                      v313 = *v298;
                    }
                    if (v310 >= 0) {
                      size_t v314 = *(unsigned __int8 *)(v309 + 23);
                    }
                    else {
                      size_t v314 = *(void *)(v309 + 8);
                    }
                    if (v310 >= 0) {
                      v315 = *(const void **)(*(void *)(v295 + 8 * v297 + 8) + 40);
                    }
                    else {
                      v315 = *(const void **)v309;
                    }
                    if (v314 >= v312) {
                      size_t v316 = v312;
                    }
                    else {
                      size_t v316 = v314;
                    }
                    uint64_t result = memcmp(v313, v315, v316);
                    BOOL v317 = v312 < v314;
                    if (result) {
                      BOOL v317 = (int)result < 0;
                    }
                    --v308;
                  }
                  while (v317);
                  *long long v308 = v296;
                }
                uint64_t v294 = v12 + 1;
              }
              while (v12 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != v10)
          {
            unint64_t v318 = v13;
            int64_t v184 = (unint64_t)(v14 - 2) >> 1;
            int64_t v185 = v184;
            do
            {
              int64_t v186 = v185;
              if (v184 >= v185)
              {
                uint64_t v187 = *(void *)v8;
                uint64_t v188 = (2 * v186) | 1;
                uint64_t v189 = &v12[v188];
                uint64_t v190 = 2 * v186 + 2;
                int v191 = *v189;
                int64_t v322 = v186;
                if (v190 < v14)
                {
                  uint64_t v335 = v189[1];
                  uint64_t v324 = *(void *)(v187 + 32);
                  uint64_t v192 = *(void *)(*(void *)(v324 + 8 + 8 * v191) + 40);
                  uint64_t v193 = *(void *)(*(void *)(v324 + 8 + 8 * v335) + 40);
                  int v194 = *(char *)(v193 + 23);
                  int v195 = *(char *)(v192 + 23);
                  if (v195 >= 0) {
                    size_t v196 = *(unsigned __int8 *)(v192 + 23);
                  }
                  else {
                    size_t v196 = *(void *)(v192 + 8);
                  }
                  if (v195 >= 0) {
                    uint64_t v197 = *(const void **)(*(void *)(v324 + 8 + 8 * v191) + 40);
                  }
                  else {
                    uint64_t v197 = *(const void **)v192;
                  }
                  if (v194 >= 0) {
                    size_t v198 = *(unsigned __int8 *)(v193 + 23);
                  }
                  else {
                    size_t v198 = *(void *)(v193 + 8);
                  }
                  if (v194 >= 0) {
                    uint64_t v199 = *(const void **)(*(void *)(v324 + 8 + 8 * v335) + 40);
                  }
                  else {
                    uint64_t v199 = *(const void **)v193;
                  }
                  if (v198 >= v196) {
                    size_t v200 = v196;
                  }
                  else {
                    size_t v200 = v198;
                  }
                  int v201 = memcmp(v197, v199, v200);
                  BOOL v5 = v196 >= v198;
                  int64_t v186 = v322;
                  uint64_t v203 = v324;
                  BOOL v202 = !v5;
                  if (v201) {
                    BOOL v202 = v201 < 0;
                  }
                  if (v202)
                  {
                    int v191 = v335;
                    ++v189;
                  }
                  v331 = v189;
                  if (v202) {
                    uint64_t v188 = v190;
                  }
                }
                else
                {
                  v331 = &v12[v188];
                  uint64_t v203 = *(void *)(v187 + 32);
                }
                uint64_t v204 = &v12[v186];
                uint64_t v320 = *v204;
                uint64_t v205 = *(void *)(*(void *)(v203 + 8 + 8 * v191) + 40);
                uint64_t v206 = *(void *)(*(void *)(v203 + 8 + 8 * v320) + 40);
                int v207 = *(char *)(v206 + 23);
                int v208 = *(char *)(v205 + 23);
                if (v208 >= 0) {
                  size_t v209 = *(unsigned __int8 *)(v205 + 23);
                }
                else {
                  size_t v209 = *(void *)(v205 + 8);
                }
                if (v208 >= 0) {
                  v210 = *(const void **)(*(void *)(v203 + 8 + 8 * v191) + 40);
                }
                else {
                  v210 = *(const void **)v205;
                }
                if (v207 >= 0) {
                  size_t v211 = *(unsigned __int8 *)(v206 + 23);
                }
                else {
                  size_t v211 = *(void *)(v206 + 8);
                }
                v336 = *(const void ***)(*(void *)(v203 + 8 + 8 * v320) + 40);
                if (v207 >= 0) {
                  unint64_t v212 = *(const void **)(*(void *)(v203 + 8 + 8 * v320) + 40);
                }
                else {
                  unint64_t v212 = *(const void **)v206;
                }
                if (v211 >= v209) {
                  size_t v213 = v209;
                }
                else {
                  size_t v213 = v211;
                }
                uint64_t result = memcmp(v210, v212, v213);
                int64_t v186 = v322;
                BOOL v214 = v209 < v211;
                if (result) {
                  BOOL v214 = (int)result < 0;
                }
                uint64_t v8 = a3;
                if (!v214)
                {
                  uint64_t v215 = v331;
                  do
                  {
                    unint64_t v241 = v215;
                    *uint64_t v204 = v191;
                    if (v184 < v188) {
                      break;
                    }
                    uint64_t v242 = (2 * v188) | 1;
                    uint64_t v215 = &v12[v242];
                    uint64_t v243 = 2 * v188 + 2;
                    int v191 = *v215;
                    if (v243 < v14)
                    {
                      uint64_t v216 = v215 + 1;
                      uint64_t v325 = v215[1];
                      int v217 = *(const void ***)(*(void *)(v203 + 8 + 8 * v191) + 40);
                      uint64_t v218 = *(const void ***)(*(void *)(v203 + 8 + 8 * v325) + 40);
                      char v219 = *((unsigned char *)v218 + 23);
                      char v220 = *((unsigned char *)v217 + 23);
                      int v332 = *v215;
                      uint64_t v221 = v203;
                      uint64_t v222 = &v12[v242];
                      if (v220 >= 0) {
                        size_t v223 = *((unsigned __int8 *)v217 + 23);
                      }
                      else {
                        size_t v223 = (size_t)v217[1];
                      }
                      if (v220 >= 0) {
                        unint64_t v224 = v217;
                      }
                      else {
                        unint64_t v224 = *v217;
                      }
                      int64_t v225 = v184;
                      uint64_t v226 = v14;
                      if (v219 >= 0) {
                        size_t v227 = *((unsigned __int8 *)v218 + 23);
                      }
                      else {
                        size_t v227 = (size_t)v218[1];
                      }
                      if (v219 >= 0) {
                        int v228 = v218;
                      }
                      else {
                        int v228 = *v218;
                      }
                      if (v227 >= v223) {
                        size_t v229 = v223;
                      }
                      else {
                        size_t v229 = v227;
                      }
                      int v230 = memcmp(v224, v228, v229);
                      BOOL v5 = v223 >= v227;
                      uint64_t v215 = v222;
                      uint64_t v203 = v221;
                      uint64_t v14 = v226;
                      int64_t v184 = v225;
                      BOOL v231 = !v5;
                      if (v230) {
                        BOOL v231 = v230 < 0;
                      }
                      int v191 = v231 ? v325 : v332;
                      int8x16_t v12 = v329;
                      if (v231)
                      {
                        uint64_t v215 = v216;
                        uint64_t v188 = v243;
                      }
                      else
                      {
                        uint64_t v188 = v242;
                      }
                    }
                    else
                    {
                      uint64_t v188 = (2 * v188) | 1;
                    }
                    uint64_t v232 = *(void *)(*(void *)(v203 + 8 * v191 + 8) + 40);
                    int v233 = *((char *)v336 + 23);
                    int v234 = *(char *)(v232 + 23);
                    if (v234 >= 0) {
                      size_t v235 = *(unsigned __int8 *)(v232 + 23);
                    }
                    else {
                      size_t v235 = *(void *)(v232 + 8);
                    }
                    if (v234 >= 0) {
                      uint64_t v236 = *(const void **)(*(void *)(v203 + 8 * v191 + 8) + 40);
                    }
                    else {
                      uint64_t v236 = *(const void **)v232;
                    }
                    if (v233 >= 0) {
                      size_t v237 = *((unsigned __int8 *)v336 + 23);
                    }
                    else {
                      size_t v237 = (size_t)v336[1];
                    }
                    if (v233 >= 0) {
                      uint64_t v238 = v336;
                    }
                    else {
                      uint64_t v238 = *v336;
                    }
                    if (v237 >= v235) {
                      size_t v239 = v235;
                    }
                    else {
                      size_t v239 = v237;
                    }
                    uint64_t result = memcmp(v236, v238, v239);
                    BOOL v240 = v235 < v237;
                    if (result) {
                      BOOL v240 = (int)result < 0;
                    }
                    uint64_t v204 = v241;
                  }
                  while (!v240);
                  int64_t v186 = v322;
                  *unint64_t v241 = v320;
                  uint64_t v8 = a3;
                }
              }
              int64_t v185 = v186 - 1;
            }
            while (v186);
            uint64_t v244 = v318 >> 2;
            do
            {
              uint64_t v246 = 0;
              int v326 = *v12;
              uint64_t v333 = v244;
              uint64_t v337 = *(void *)v8;
              int64_t v247 = (unint64_t)(v244 - 2) >> 1;
              uint64_t v248 = v12;
              do
              {
                while (1)
                {
                  uint64_t v263 = &v248[v246];
                  int v264 = v263[1];
                  unint64_t v262 = v263 + 1;
                  int v261 = v264;
                  uint64_t v265 = (2 * v246) | 1;
                  uint64_t v266 = 2 * v246 + 2;
                  if (v266 < v244) {
                    break;
                  }
                  uint64_t v246 = (2 * v246) | 1;
                  *uint64_t v248 = v261;
                  uint64_t v248 = v262;
                  if (v265 > v247) {
                    goto LABEL_412;
                  }
                }
                uint64_t v249 = v262[1];
                uint64_t v250 = *(void *)(v337 + 32) + 8;
                uint64_t v251 = *(const void ***)(*(void *)(v250 + 8 * v261) + 40);
                unint64_t v252 = *(const void ***)(*(void *)(v250 + 8 * v249) + 40);
                int v253 = *((char *)v252 + 23);
                int v254 = *((char *)v251 + 23);
                if (v254 >= 0) {
                  size_t v255 = *((unsigned __int8 *)v251 + 23);
                }
                else {
                  size_t v255 = (size_t)v251[1];
                }
                if (v254 >= 0) {
                  long long v256 = v251;
                }
                else {
                  long long v256 = *v251;
                }
                if (v253 >= 0) {
                  size_t v257 = *((unsigned __int8 *)v252 + 23);
                }
                else {
                  size_t v257 = (size_t)v252[1];
                }
                if (v253 >= 0) {
                  uint64_t v258 = v252;
                }
                else {
                  uint64_t v258 = *v252;
                }
                if (v257 >= v255) {
                  size_t v259 = v255;
                }
                else {
                  size_t v259 = v257;
                }
                uint64_t result = memcmp(v256, v258, v259);
                BOOL v260 = v255 < v257;
                if (result) {
                  BOOL v260 = (int)result < 0;
                }
                if (v260)
                {
                  int v261 = v249;
                  ++v262;
                }
                uint64_t v244 = v333;
                if (v260) {
                  uint64_t v246 = v266;
                }
                else {
                  uint64_t v246 = v265;
                }
                *uint64_t v248 = v261;
                uint64_t v248 = v262;
              }
              while (v246 <= v247);
LABEL_412:
              uint64_t v267 = a2 - 1;
              BOOL v6 = v262 == --a2;
              if (v6)
              {
                *unint64_t v262 = v326;
              }
              else
              {
                *unint64_t v262 = *v267;
                *uint64_t v267 = v326;
                uint64_t v268 = (char *)v262 - (char *)v329 + 4;
                if (v268 >= 5)
                {
                  unint64_t v269 = (((unint64_t)v268 >> 2) - 2) >> 1;
                  v270 = &v329[v269];
                  uint64_t v271 = *v270;
                  uint64_t v272 = *v262;
                  uint64_t v273 = *(void *)(*(void *)a3 + 32);
                  uint64_t v274 = *(void *)(*(void *)(v273 + 8 + 8 * v271) + 40);
                  __int16 v275 = *(const void ***)(*(void *)(v273 + 8 + 8 * v272) + 40);
                  int v276 = *((char *)v275 + 23);
                  int v277 = *(char *)(v274 + 23);
                  if (v277 >= 0) {
                    size_t v278 = *(unsigned __int8 *)(v274 + 23);
                  }
                  else {
                    size_t v278 = *(void *)(v274 + 8);
                  }
                  if (v277 >= 0) {
                    int v279 = *(const void **)(*(void *)(v273 + 8 + 8 * v271) + 40);
                  }
                  else {
                    int v279 = *(const void **)v274;
                  }
                  if (v276 >= 0) {
                    size_t v280 = *((unsigned __int8 *)v275 + 23);
                  }
                  else {
                    size_t v280 = (size_t)v275[1];
                  }
                  if (v276 >= 0) {
                    uint64_t v281 = *(const void **)(*(void *)(v273 + 8 + 8 * v272) + 40);
                  }
                  else {
                    uint64_t v281 = *v275;
                  }
                  if (v280 >= v278) {
                    size_t v282 = v278;
                  }
                  else {
                    size_t v282 = v280;
                  }
                  uint64_t result = memcmp(v279, v281, v282);
                  BOOL v283 = v278 < v280;
                  if (result) {
                    BOOL v283 = (int)result < 0;
                  }
                  if (v283)
                  {
                    do
                    {
                      uint64_t v284 = v270;
                      *unint64_t v262 = v271;
                      if (!v269) {
                        break;
                      }
                      unint64_t v269 = (v269 - 1) >> 1;
                      v270 = &v329[v269];
                      uint64_t v271 = *v270;
                      uint64_t v285 = *(void *)(*(void *)(v273 + 8 * v271 + 8) + 40);
                      int v286 = *((char *)v275 + 23);
                      int v287 = *(char *)(v285 + 23);
                      if (v287 >= 0) {
                        size_t v288 = *(unsigned __int8 *)(v285 + 23);
                      }
                      else {
                        size_t v288 = *(void *)(v285 + 8);
                      }
                      if (v287 >= 0) {
                        BOOL v289 = *(const void **)(*(void *)(v273 + 8 * v271 + 8) + 40);
                      }
                      else {
                        BOOL v289 = *(const void **)v285;
                      }
                      if (v286 >= 0) {
                        size_t v290 = *((unsigned __int8 *)v275 + 23);
                      }
                      else {
                        size_t v290 = (size_t)v275[1];
                      }
                      if (v286 >= 0) {
                        v291 = v275;
                      }
                      else {
                        v291 = *v275;
                      }
                      if (v290 >= v288) {
                        size_t v292 = v288;
                      }
                      else {
                        size_t v292 = v290;
                      }
                      uint64_t result = memcmp(v289, v291, v292);
                      BOOL v293 = v288 < v290;
                      if (result) {
                        BOOL v293 = (int)result < 0;
                      }
                      unint64_t v262 = v284;
                    }
                    while (v293);
                    *uint64_t v284 = v272;
                  }
                }
              }
              BOOL v245 = v244-- <= 2;
              int8x16_t v12 = v329;
              uint64_t v8 = a3;
            }
            while (!v245);
          }
          return result;
        }
        unint64_t v15 = (unint64_t)v14 >> 1;
        uint64_t v16 = &v12[(unint64_t)v14 >> 1];
        uint64_t v17 = *(void *)(*(void *)v8 + 32);
        if ((unint64_t)v13 < 0x201)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v16, v12, v321, v17);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v12, v16, v321, v17);
          uint64_t v18 = v15;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v12 + 1, &v12[v18 - 1], a2 - 2, *(void *)(*(void *)v8 + 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v12 + 2, &v12[v18 + 1], a2 - 3, *(void *)(*(void *)v8 + 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(&v12[v18 - 1], v16, &v12[v18 + 1], *(void *)(*(void *)v8 + 32));
          int v19 = *v12;
          *int8x16_t v12 = v12[v18];
          v12[v18] = v19;
        }
        uint64_t v20 = *(void *)v8;
        int v21 = *v12;
        int v330 = *v12;
        uint64_t v334 = a4 - 1;
        if (a5)
        {
          uint64_t v22 = *(void *)(v20 + 32);
          uint64_t v23 = *(void *)(*(void *)(v22 + 8 * v21 + 8) + 40);
          size_t v24 = *(unsigned __int8 *)(v23 + 23);
          uint64_t v25 = *(const void **)v23;
          size_t v26 = *(void *)(v23 + 8);
          char v27 = *(unsigned char *)(v23 + 23);
          break;
        }
        uint64_t v22 = *(void *)(v20 + 32);
        long long v28 = *(const void ***)(*(void *)(v22 + 8 + 8 * *(v12 - 1)) + 40);
        uint64_t v23 = *(void *)(*(void *)(v22 + 8 + 8 * v21) + 40);
        size_t v24 = *(unsigned __int8 *)(v23 + 23);
        char v27 = *(unsigned char *)(v23 + 23);
        uint64_t v25 = *(const void **)v23;
        size_t v26 = *(void *)(v23 + 8);
        int v29 = *((char *)v28 + 23);
        if (v29 >= 0) {
          size_t v30 = *((unsigned __int8 *)v28 + 23);
        }
        else {
          size_t v30 = (size_t)v28[1];
        }
        if (v29 >= 0) {
          uint64_t v31 = v28;
        }
        else {
          uint64_t v31 = *v28;
        }
        if ((v24 & 0x80u) == 0) {
          size_t v32 = *(unsigned __int8 *)(v23 + 23);
        }
        else {
          size_t v32 = *(void *)(v23 + 8);
        }
        if ((v24 & 0x80u) == 0) {
          uint64_t v33 = *(const void **)(*(void *)(v22 + 8 + 8 * v21) + 40);
        }
        else {
          uint64_t v33 = *(const void **)v23;
        }
        if (v32 >= v30) {
          size_t v34 = v30;
        }
        else {
          size_t v34 = v32;
        }
        int v35 = memcmp(v31, v33, v34);
        BOOL v36 = v30 < v32;
        if (v35) {
          BOOL v36 = v35 < 0;
        }
        if (v36) {
          break;
        }
        uint64_t v92 = *(void *)(*(void *)(v22 + 8 * *v321 + 8) + 40);
        int v93 = *(char *)(v92 + 23);
        if (v93 >= 0) {
          size_t v94 = *(unsigned __int8 *)(v92 + 23);
        }
        else {
          size_t v94 = *(void *)(v92 + 8);
        }
        if (v93 >= 0) {
          unint64_t v95 = *(const void **)(*(void *)(v22 + 8 * *v321 + 8) + 40);
        }
        else {
          unint64_t v95 = *(const void **)v92;
        }
        if (v94 >= v32) {
          size_t v96 = v32;
        }
        else {
          size_t v96 = v94;
        }
        uint64_t result = memcmp(v33, v95, v96);
        BOOL v97 = v32 < v94;
        if (result) {
          BOOL v97 = (int)result < 0;
        }
        if (v97)
        {
          uint64_t v11 = v329;
          do
          {
            uint64_t v98 = v11[1];
            ++v11;
            uint64_t v99 = *(const void ***)(*(void *)(v22 + 8 * v98 + 8) + 40);
            int v100 = *((char *)v99 + 23);
            if (v100 >= 0) {
              size_t v101 = *((unsigned __int8 *)v99 + 23);
            }
            else {
              size_t v101 = (size_t)v99[1];
            }
            if (v100 >= 0) {
              int v102 = v99;
            }
            else {
              int v102 = *v99;
            }
            if (v101 >= v32) {
              size_t v103 = v32;
            }
            else {
              size_t v103 = v101;
            }
            uint64_t result = memcmp(v33, v102, v103);
            BOOL v104 = v32 < v101;
            if (result) {
              BOOL v104 = (int)result < 0;
            }
          }
          while (!v104);
        }
        else
        {
          BOOL v105 = v329 + 1;
          do
          {
            uint64_t v11 = v105;
            if (v105 >= a2) {
              break;
            }
            ++v105;
            uint64_t v106 = *(void *)(*(void *)(v22 + 8 * *v11 + 8) + 40);
            int v107 = *(char *)(v106 + 23);
            if (v107 >= 0) {
              size_t v108 = *(unsigned __int8 *)(v106 + 23);
            }
            else {
              size_t v108 = *(void *)(v106 + 8);
            }
            if (v107 >= 0) {
              __int16 v109 = *(const void **)(*(void *)(v22 + 8 * *v11 + 8) + 40);
            }
            else {
              __int16 v109 = *(const void **)v106;
            }
            if (v108 >= v32) {
              size_t v110 = v32;
            }
            else {
              size_t v110 = v108;
            }
            uint64_t result = memcmp(v33, v109, v110);
            BOOL v111 = v32 < v108;
            if (result) {
              BOOL v111 = (int)result < 0;
            }
          }
          while (!v111);
        }
        uint64_t v112 = a2;
        if (v11 < a2)
        {
          uint64_t v112 = a2;
          do
          {
            uint64_t v113 = *--v112;
            unint64_t v114 = *(const void ***)(*(void *)(v22 + 8 * v113 + 8) + 40);
            int v115 = *((char *)v114 + 23);
            if (v115 >= 0) {
              size_t v116 = *((unsigned __int8 *)v114 + 23);
            }
            else {
              size_t v116 = (size_t)v114[1];
            }
            if (v115 >= 0) {
              BOOL v117 = v114;
            }
            else {
              BOOL v117 = *v114;
            }
            if (v116 >= v32) {
              size_t v118 = v32;
            }
            else {
              size_t v118 = v116;
            }
            uint64_t result = memcmp(v33, v117, v118);
            BOOL v119 = v32 < v116;
            if (result) {
              BOOL v119 = (int)result < 0;
            }
          }
          while (v119);
        }
        if (v11 < v112)
        {
          int v120 = *v11;
          int v121 = *v112;
          do
          {
            *uint64_t v11 = v121;
            *uint64_t v112 = v120;
            int v122 = *(char *)(v23 + 23);
            if (v122 >= 0) {
              size_t v123 = *(unsigned __int8 *)(v23 + 23);
            }
            else {
              size_t v123 = *(void *)(v23 + 8);
            }
            if (v122 >= 0) {
              int v124 = (const void *)v23;
            }
            else {
              int v124 = *(const void **)v23;
            }
            do
            {
              uint64_t v125 = v11[1];
              ++v11;
              int v120 = v125;
              uint64_t v126 = *(const void ***)(*(void *)(v22 + 8 * v125 + 8) + 40);
              int v127 = *((char *)v126 + 23);
              if (v127 >= 0) {
                size_t v128 = *((unsigned __int8 *)v126 + 23);
              }
              else {
                size_t v128 = (size_t)v126[1];
              }
              if (v127 >= 0) {
                long long v129 = v126;
              }
              else {
                long long v129 = *v126;
              }
              if (v128 >= v123) {
                size_t v130 = v123;
              }
              else {
                size_t v130 = v128;
              }
              int v131 = memcmp(v124, v129, v130);
              BOOL v132 = v123 < v128;
              if (v131) {
                BOOL v132 = v131 < 0;
              }
            }
            while (!v132);
            do
            {
              uint64_t v133 = *--v112;
              int v121 = v133;
              unint64_t v134 = *(const void ***)(*(void *)(v22 + 8 * v133 + 8) + 40);
              int v135 = *((char *)v134 + 23);
              if (v135 >= 0) {
                size_t v136 = *((unsigned __int8 *)v134 + 23);
              }
              else {
                size_t v136 = (size_t)v134[1];
              }
              if (v135 >= 0) {
                unint64_t v137 = v134;
              }
              else {
                unint64_t v137 = *v134;
              }
              if (v136 >= v123) {
                size_t v138 = v123;
              }
              else {
                size_t v138 = v136;
              }
              uint64_t result = memcmp(v124, v137, v138);
              BOOL v139 = v123 < v136;
              if (result) {
                BOOL v139 = (int)result < 0;
              }
            }
            while (v139);
          }
          while (v11 < v112);
        }
        int v140 = v11 - 1;
        uint64_t v10 = a2;
        BOOL v5 = v11 - 1 >= v329;
        BOOL v6 = v11 - 1 == v329;
        if (v11 - 1 != v329) {
          int *v329 = *v140;
        }
        a5 = 0;
        a4 = v334;
        *int v140 = v330;
        uint64_t v8 = a3;
      }
      uint64_t v37 = 0;
      if (v27 >= 0) {
        size_t v38 = v24;
      }
      else {
        size_t v38 = v26;
      }
      if (v27 >= 0) {
        uint64_t v39 = (const void *)v23;
      }
      else {
        uint64_t v39 = v25;
      }
      uint64_t v9 = v329;
      do
      {
        uint64_t v40 = v329[v37 + 1];
        uint64_t v41 = *(void *)(*(void *)(v22 + 8 * v40 + 8) + 40);
        int v42 = *(char *)(v41 + 23);
        if (v42 >= 0) {
          size_t v43 = *(unsigned __int8 *)(v41 + 23);
        }
        else {
          size_t v43 = *(void *)(v41 + 8);
        }
        if (v42 >= 0) {
          int64_t v44 = *(const void **)(*(void *)(v22 + 8 * v40 + 8) + 40);
        }
        else {
          int64_t v44 = *(const void **)v41;
        }
        if (v38 >= v43) {
          size_t v45 = v43;
        }
        else {
          size_t v45 = v38;
        }
        int v46 = memcmp(v44, v39, v45);
        BOOL v47 = v43 < v38;
        if (v46) {
          BOOL v47 = v46 < 0;
        }
        ++v37;
      }
      while (v47);
      uint64_t v48 = &v329[v37];
      uint64_t v49 = a2;
      if (v37 == 1)
      {
        uint64_t v49 = a2;
        do
        {
          if (v48 >= v49) {
            break;
          }
          uint64_t v58 = *--v49;
          unint64_t v59 = *(const void ***)(*(void *)(v22 + 8 * v58 + 8) + 40);
          int v60 = *((char *)v59 + 23);
          if (v60 >= 0) {
            size_t v61 = *((unsigned __int8 *)v59 + 23);
          }
          else {
            size_t v61 = (size_t)v59[1];
          }
          if (v60 >= 0) {
            unint64_t v62 = v59;
          }
          else {
            unint64_t v62 = *v59;
          }
          if (v38 >= v61) {
            size_t v63 = v61;
          }
          else {
            size_t v63 = v38;
          }
          int v64 = memcmp(v62, v39, v63);
          BOOL v65 = v61 < v38;
          if (v64) {
            BOOL v65 = v64 < 0;
          }
        }
        while (!v65);
      }
      else
      {
        do
        {
          uint64_t v50 = *--v49;
          int v51 = *(const void ***)(*(void *)(v22 + 8 * v50 + 8) + 40);
          int v52 = *((char *)v51 + 23);
          if (v52 >= 0) {
            size_t v53 = *((unsigned __int8 *)v51 + 23);
          }
          else {
            size_t v53 = (size_t)v51[1];
          }
          if (v52 >= 0) {
            int64_t v54 = v51;
          }
          else {
            int64_t v54 = *v51;
          }
          if (v38 >= v53) {
            size_t v55 = v53;
          }
          else {
            size_t v55 = v38;
          }
          int v56 = memcmp(v54, v39, v55);
          BOOL v57 = v53 < v38;
          if (v56) {
            BOOL v57 = v56 < 0;
          }
        }
        while (!v57);
      }
      if (v48 >= v49)
      {
        uint64_t v89 = v48 - 1;
        uint64_t v8 = a3;
        uint64_t v10 = a2;
        int v90 = v330;
        a4 = v334;
        if (v48 - 1 == v329) {
          goto LABEL_115;
        }
LABEL_114:
        int *v9 = *v89;
        goto LABEL_115;
      }
      int v66 = *v49;
      int v67 = v40;
      v319 = v48;
      int64_t v68 = v48;
      uint64_t v69 = v49;
      do
      {
        *int64_t v68 = v66;
        *uint64_t v69 = v67;
        int v70 = *(char *)(v23 + 23);
        if (v70 >= 0) {
          size_t v71 = *(unsigned __int8 *)(v23 + 23);
        }
        else {
          size_t v71 = *(void *)(v23 + 8);
        }
        if (v70 >= 0) {
          long long v72 = (const void *)v23;
        }
        else {
          long long v72 = *(const void **)v23;
        }
        do
        {
          uint64_t v73 = v68[1];
          ++v68;
          int v67 = v73;
          uint64_t v74 = *(const void ***)(*(void *)(v22 + 8 * v73 + 8) + 40);
          int v75 = *((char *)v74 + 23);
          if (v75 >= 0) {
            size_t v76 = *((unsigned __int8 *)v74 + 23);
          }
          else {
            size_t v76 = (size_t)v74[1];
          }
          if (v75 >= 0) {
            uint64_t v77 = v74;
          }
          else {
            uint64_t v77 = *v74;
          }
          if (v71 >= v76) {
            size_t v78 = v76;
          }
          else {
            size_t v78 = v71;
          }
          int v79 = memcmp(v77, v72, v78);
          BOOL v80 = v76 < v71;
          if (v79) {
            BOOL v80 = v79 < 0;
          }
        }
        while (v80);
        do
        {
          uint64_t v81 = *--v69;
          int v66 = v81;
          uint64_t v82 = *(const void ***)(*(void *)(v22 + 8 * v81 + 8) + 40);
          int v83 = *((char *)v82 + 23);
          if (v83 >= 0) {
            size_t v84 = *((unsigned __int8 *)v82 + 23);
          }
          else {
            size_t v84 = (size_t)v82[1];
          }
          if (v83 >= 0) {
            uint64_t v85 = v82;
          }
          else {
            uint64_t v85 = *v82;
          }
          if (v71 >= v84) {
            size_t v86 = v84;
          }
          else {
            size_t v86 = v71;
          }
          int v87 = memcmp(v85, v72, v86);
          BOOL v88 = v84 < v71;
          if (v87) {
            BOOL v88 = v87 < 0;
          }
        }
        while (!v88);
      }
      while (v68 < v69);
      uint64_t v89 = v68 - 1;
      uint64_t v9 = v329;
      uint64_t v48 = v319;
      BOOL v6 = v68 - 1 == v329;
      uint64_t v8 = a3;
      uint64_t v10 = a2;
      int v90 = v330;
      a4 = v334;
      if (!v6) {
        goto LABEL_114;
      }
LABEL_115:
      int *v89 = v90;
      if (v48 < v49) {
        goto LABEL_118;
      }
      BOOL v91 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v9, v89, v8);
      uint64_t v11 = v89 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v89 + 1, v10, v8);
      if (result) {
        break;
      }
      if (!v91)
      {
LABEL_118:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,false>(v9, v89, v8, a4, a5 & 1);
        a5 = 0;
        uint64_t v11 = v89 + 1;
      }
    }
    a2 = v89;
    if (!v91) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,0>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a2, a3, a4, a6);
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  uint64_t v13 = *(void *)(*(void *)a6 + 32);
  uint64_t v14 = v13 + 8;
  uint64_t v15 = *(void *)(*(void *)(v13 + 8 + 8 * v11) + 40);
  uint64_t v16 = *(void *)(*(void *)(v13 + 8 + 8 * v12) + 40);
  int v17 = *(char *)(v16 + 23);
  int v18 = *(char *)(v15 + 23);
  if (v18 >= 0) {
    size_t v19 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    size_t v19 = *(void *)(v15 + 8);
  }
  if (v18 >= 0) {
    uint64_t v20 = *(const void **)(*(void *)(v13 + 8 + 8 * v11) + 40);
  }
  else {
    uint64_t v20 = *(const void **)v15;
  }
  if (v17 >= 0) {
    size_t v21 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    size_t v21 = *(void *)(v16 + 8);
  }
  if (v17 >= 0) {
    uint64_t v22 = *(const void **)(*(void *)(v13 + 8 + 8 * v12) + 40);
  }
  else {
    uint64_t v22 = *(const void **)v16;
  }
  if (v21 >= v19) {
    size_t v23 = v19;
  }
  else {
    size_t v23 = v21;
  }
  uint64_t result = memcmp(v20, v22, v23);
  BOOL v25 = v19 < v21;
  if (result) {
    BOOL v25 = (int)result < 0;
  }
  if (v25)
  {
    *a4 = v11;
    *a5 = v12;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3;
    uint64_t v28 = *(void *)(*(void *)(v14 + 8 * v26) + 40);
    int v29 = *(const void ***)(*(void *)(v14 + 8 * v27) + 40);
    int v30 = *((char *)v29 + 23);
    int v31 = *(char *)(v28 + 23);
    if (v31 >= 0) {
      size_t v32 = *(unsigned __int8 *)(v28 + 23);
    }
    else {
      size_t v32 = *(void *)(v28 + 8);
    }
    if (v31 >= 0) {
      uint64_t v33 = *(const void **)(*(void *)(v14 + 8 * v26) + 40);
    }
    else {
      uint64_t v33 = *(const void **)v28;
    }
    if (v30 >= 0) {
      size_t v34 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v34 = (size_t)v29[1];
    }
    if (v30 >= 0) {
      int v35 = v29;
    }
    else {
      int v35 = *v29;
    }
    if (v34 >= v32) {
      size_t v36 = v32;
    }
    else {
      size_t v36 = v34;
    }
    uint64_t result = memcmp(v33, v35, v36);
    BOOL v37 = v32 < v34;
    if (result) {
      BOOL v37 = (int)result < 0;
    }
    if (v37)
    {
      *a3 = v26;
      *a4 = v27;
      uint64_t v38 = *a3;
      uint64_t v39 = *a2;
      uint64_t v40 = v13 + 8;
      uint64_t v41 = *(void *)(*(void *)(v13 + 8 + 8 * v38) + 40);
      int v42 = *(const void ***)(*(void *)(v13 + 8 + 8 * v39) + 40);
      int v43 = *((char *)v42 + 23);
      int v44 = *(char *)(v41 + 23);
      if (v44 >= 0) {
        size_t v45 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        size_t v45 = *(void *)(v41 + 8);
      }
      if (v44 >= 0) {
        int v46 = *(const void **)(*(void *)(v13 + 8 + 8 * v38) + 40);
      }
      else {
        int v46 = *(const void **)v41;
      }
      if (v43 >= 0) {
        size_t v47 = *((unsigned __int8 *)v42 + 23);
      }
      else {
        size_t v47 = (size_t)v42[1];
      }
      if (v43 >= 0) {
        uint64_t v48 = v42;
      }
      else {
        uint64_t v48 = *v42;
      }
      if (v47 >= v45) {
        size_t v49 = v45;
      }
      else {
        size_t v49 = v47;
      }
      uint64_t result = memcmp(v46, v48, v49);
      BOOL v50 = v45 < v47;
      if (result) {
        BOOL v50 = (int)result < 0;
      }
      if (v50)
      {
        *a2 = v38;
        *a3 = v39;
        uint64_t v51 = *a2;
        uint64_t v52 = *a1;
        uint64_t v53 = *(void *)(*(void *)(v40 + 8 * v51) + 40);
        int64_t v54 = *(const void ***)(*(void *)(v40 + 8 * v52) + 40);
        int v55 = *((char *)v54 + 23);
        int v56 = *(char *)(v53 + 23);
        if (v56 >= 0) {
          size_t v57 = *(unsigned __int8 *)(v53 + 23);
        }
        else {
          size_t v57 = *(void *)(v53 + 8);
        }
        if (v56 >= 0) {
          uint64_t v58 = *(const void **)(*(void *)(v40 + 8 * v51) + 40);
        }
        else {
          uint64_t v58 = *(const void **)v53;
        }
        if (v55 >= 0) {
          size_t v59 = *((unsigned __int8 *)v54 + 23);
        }
        else {
          size_t v59 = (size_t)v54[1];
        }
        if (v55 >= 0) {
          int v60 = v54;
        }
        else {
          int v60 = *v54;
        }
        if (v59 >= v57) {
          size_t v61 = v57;
        }
        else {
          size_t v61 = v59;
        }
        uint64_t result = memcmp(v58, v60, v61);
        BOOL v62 = v57 < v59;
        if (result) {
          BOOL v62 = (int)result < 0;
        }
        if (v62)
        {
          *a1 = v51;
          *a2 = v52;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a4 + 8;
  uint64_t v50 = *a1;
  uint64_t v9 = *(void *)(*(void *)(a4 + 8 + 8 * v7) + 40);
  uint64_t v10 = *(const void ***)(*(void *)(a4 + 8 + 8 * v50) + 40);
  int v11 = *((char *)v10 + 23);
  int v12 = *(char *)(v9 + 23);
  if (v12 >= 0) {
    size_t v13 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    size_t v13 = *(void *)(v9 + 8);
  }
  if (v12 >= 0) {
    uint64_t v14 = *(const void **)(*(void *)(a4 + 8 + 8 * v7) + 40);
  }
  else {
    uint64_t v14 = *(const void **)v9;
  }
  if (v11 >= 0) {
    size_t v15 = *((unsigned __int8 *)v10 + 23);
  }
  else {
    size_t v15 = (size_t)v10[1];
  }
  if (v11 >= 0) {
    uint64_t v16 = *(const void **)(*(void *)(a4 + 8 + 8 * v50) + 40);
  }
  else {
    uint64_t v16 = *v10;
  }
  if (v15 >= v13) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v15;
  }
  int v18 = memcmp(v14, v16, v17);
  if (v18) {
    BOOL v19 = v18 < 0;
  }
  else {
    BOOL v19 = v13 < v15;
  }
  uint64_t v20 = *a3;
  size_t v21 = *(const void ***)(*(void *)(v8 + 8 * v20) + 40);
  int v22 = *((char *)v21 + 23);
  if (v22 >= 0) {
    size_t v23 = *((unsigned __int8 *)v21 + 23);
  }
  else {
    size_t v23 = (size_t)v21[1];
  }
  if (v22 >= 0) {
    size_t v24 = v21;
  }
  else {
    size_t v24 = *v21;
  }
  if (v13 >= v23) {
    size_t v25 = v23;
  }
  else {
    size_t v25 = v13;
  }
  uint64_t result = memcmp(v24, v14, v25);
  BOOL v27 = v23 < v13;
  if (result) {
    BOOL v27 = (int)result < 0;
  }
  if (v19)
  {
    if (v27)
    {
      *a1 = v20;
      *a3 = v50;
    }
    else
    {
      *a1 = v7;
      *a2 = v50;
      uint64_t v40 = *a3;
      uint64_t v41 = *(void *)(*(void *)(a4 + 8 * v40 + 8) + 40);
      int v42 = *((char *)v10 + 23);
      int v43 = *(char *)(v41 + 23);
      if (v43 >= 0) {
        size_t v44 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        size_t v44 = *(void *)(v41 + 8);
      }
      if (v43 >= 0) {
        size_t v45 = *(const void **)(*(void *)(a4 + 8 * v40 + 8) + 40);
      }
      else {
        size_t v45 = *(const void **)v41;
      }
      if (v42 >= 0) {
        size_t v46 = *((unsigned __int8 *)v10 + 23);
      }
      else {
        size_t v46 = (size_t)v10[1];
      }
      if (v42 >= 0) {
        size_t v47 = v10;
      }
      else {
        size_t v47 = *v10;
      }
      if (v46 >= v44) {
        size_t v48 = v44;
      }
      else {
        size_t v48 = v46;
      }
      uint64_t result = memcmp(v45, v47, v48);
      BOOL v49 = v44 < v46;
      if (result) {
        BOOL v49 = (int)result < 0;
      }
      if (v49)
      {
        *a2 = v40;
        *a3 = v50;
      }
    }
  }
  else if (v27)
  {
    *a2 = v20;
    *a3 = v7;
    uint64_t v28 = *a2;
    uint64_t v29 = *a1;
    uint64_t v30 = *(void *)(*(void *)(a4 + 8 + 8 * v28) + 40);
    int v31 = *(const void ***)(*(void *)(a4 + 8 + 8 * v29) + 40);
    int v32 = *((char *)v31 + 23);
    int v33 = *(char *)(v30 + 23);
    if (v33 >= 0) {
      size_t v34 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      size_t v34 = *(void *)(v30 + 8);
    }
    if (v33 >= 0) {
      int v35 = *(const void **)(*(void *)(a4 + 8 + 8 * v28) + 40);
    }
    else {
      int v35 = *(const void **)v30;
    }
    if (v32 >= 0) {
      size_t v36 = *((unsigned __int8 *)v31 + 23);
    }
    else {
      size_t v36 = (size_t)v31[1];
    }
    if (v32 >= 0) {
      BOOL v37 = v31;
    }
    else {
      BOOL v37 = *v31;
    }
    if (v36 >= v34) {
      size_t v38 = v34;
    }
    else {
      size_t v38 = v36;
    }
    uint64_t result = memcmp(v35, v37, v38);
    BOOL v39 = v34 < v36;
    if (result) {
      BOOL v39 = (int)result < 0;
    }
    if (v39)
    {
      *a1 = v28;
      *a2 = v29;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*(void *)a3 + 32) + 8;
      int v11 = *(const void ***)(*(void *)(v10 + 8 * v8) + 40);
      int v12 = *(const void ***)(*(void *)(v10 + 8 * v9) + 40);
      int v13 = *((char *)v12 + 23);
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v15 = (size_t)v11[1];
      }
      if (v14 >= 0) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = *v11;
      }
      if (v13 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = (size_t)v12[1];
      }
      if (v13 >= 0) {
        int v18 = v12;
      }
      else {
        int v18 = *v12;
      }
      if (v17 >= v15) {
        size_t v19 = v15;
      }
      else {
        size_t v19 = v17;
      }
      int v20 = memcmp(v16, v18, v19);
      BOOL v21 = v15 < v17;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (v21)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v22 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 32));
      size_t v23 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v24 = 0;
      uint64_t v25 = *(void *)(*(void *)a3 + 32);
      uint64_t v26 = 12;
      uint64_t v52 = a2;
      break;
  }
  while (1)
  {
    uint64_t v28 = *v22;
    uint64_t v53 = *v23;
    uint64_t v29 = *(const void ***)(*(void *)(v25 + 8 + 8 * v53) + 40);
    uint64_t v30 = *(void *)(*(void *)(v25 + 8 + 8 * v28) + 40);
    int v31 = *(char *)(v30 + 23);
    int v32 = *((char *)v29 + 23);
    if (v32 >= 0) {
      size_t v33 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v33 = (size_t)v29[1];
    }
    if (v32 >= 0) {
      size_t v34 = *(const void **)(*(void *)(v25 + 8 + 8 * v53) + 40);
    }
    else {
      size_t v34 = *v29;
    }
    if (v31 >= 0) {
      size_t v35 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      size_t v35 = *(void *)(v30 + 8);
    }
    if (v31 >= 0) {
      size_t v36 = *(const void **)(*(void *)(v25 + 8 + 8 * v28) + 40);
    }
    else {
      size_t v36 = *(const void **)v30;
    }
    if (v35 >= v33) {
      size_t v37 = v33;
    }
    else {
      size_t v37 = v35;
    }
    int v38 = memcmp(v34, v36, v37);
    BOOL v39 = v33 < v35;
    if (v38) {
      BOOL v39 = v38 < 0;
    }
    if (v39) {
      break;
    }
    BOOL v27 = v52;
LABEL_24:
    int v22 = v23;
    v26 += 4;
    if (++v23 == v27) {
      return 1;
    }
  }
  uint64_t v40 = v26;
  while (1)
  {
    *(int *)((char *)a1 + v40) = v28;
    uint64_t v41 = v40 - 4;
    if (v40 == 4) {
      break;
    }
    uint64_t v28 = *(int *)((char *)a1 + v40 - 8);
    uint64_t v42 = *(void *)(*(void *)(v25 + 8 * v28 + 8) + 40);
    int v43 = *(char *)(v42 + 23);
    int v44 = *((char *)v29 + 23);
    if (v44 >= 0) {
      size_t v45 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v45 = (size_t)v29[1];
    }
    if (v44 >= 0) {
      size_t v46 = v29;
    }
    else {
      size_t v46 = *v29;
    }
    if (v43 >= 0) {
      size_t v47 = *(unsigned __int8 *)(v42 + 23);
    }
    else {
      size_t v47 = *(void *)(v42 + 8);
    }
    if (v43 >= 0) {
      size_t v48 = *(const void **)(*(void *)(v25 + 8 * v28 + 8) + 40);
    }
    else {
      size_t v48 = *(const void **)v42;
    }
    if (v47 >= v45) {
      size_t v49 = v45;
    }
    else {
      size_t v49 = v47;
    }
    int v50 = memcmp(v46, v48, v49);
    BOOL v51 = v50 < 0;
    if (!v50) {
      BOOL v51 = v45 < v47;
    }
    uint64_t v40 = v41;
    if (!v51)
    {
      BOOL v27 = v52;
      *(int *)((char *)a1 + v41) = v53;
      if (++v24 != 8) {
        goto LABEL_24;
      }
      return v23 + 1 == v27;
    }
  }
  BOOL v27 = v52;
  *a1 = v53;
  if (++v24 != 8) {
    goto LABEL_24;
  }
  return v23 + 1 == v27;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a2, a3, *(void *)(*(void *)a5 + 32));
  uint64_t v10 = *a4;
  uint64_t v11 = *a3;
  uint64_t v12 = *(void *)(*(void *)a5 + 32);
  uint64_t v13 = v12 + 8;
  uint64_t v14 = *(void *)(*(void *)(v12 + 8 + 8 * v10) + 40);
  uint64_t v15 = *(void *)(*(void *)(v12 + 8 + 8 * v11) + 40);
  int v16 = *(char *)(v15 + 23);
  int v17 = *(char *)(v14 + 23);
  if (v17 >= 0) {
    size_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    size_t v18 = *(void *)(v14 + 8);
  }
  if (v17 >= 0) {
    size_t v19 = *(const void **)(*(void *)(v12 + 8 + 8 * v10) + 40);
  }
  else {
    size_t v19 = *(const void **)v14;
  }
  if (v16 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    size_t v20 = *(void *)(v15 + 8);
  }
  if (v16 >= 0) {
    BOOL v21 = *(const void **)(*(void *)(v12 + 8 + 8 * v11) + 40);
  }
  else {
    BOOL v21 = *(const void **)v15;
  }
  if (v20 >= v18) {
    size_t v22 = v18;
  }
  else {
    size_t v22 = v20;
  }
  uint64_t result = memcmp(v19, v21, v22);
  BOOL v24 = v18 < v20;
  if (result) {
    BOOL v24 = (int)result < 0;
  }
  if (v24)
  {
    *a3 = v10;
    *a4 = v11;
    uint64_t v25 = *a3;
    uint64_t v26 = *a2;
    BOOL v27 = *(const void ***)(*(void *)(v13 + 8 * v25) + 40);
    uint64_t v28 = *(const void ***)(*(void *)(v13 + 8 * v26) + 40);
    int v29 = *((char *)v28 + 23);
    int v30 = *((char *)v27 + 23);
    if (v30 >= 0) {
      size_t v31 = *((unsigned __int8 *)v27 + 23);
    }
    else {
      size_t v31 = (size_t)v27[1];
    }
    if (v30 >= 0) {
      int v32 = v27;
    }
    else {
      int v32 = *v27;
    }
    if (v29 >= 0) {
      size_t v33 = *((unsigned __int8 *)v28 + 23);
    }
    else {
      size_t v33 = (size_t)v28[1];
    }
    if (v29 >= 0) {
      size_t v34 = v28;
    }
    else {
      size_t v34 = *v28;
    }
    if (v33 >= v31) {
      size_t v35 = v31;
    }
    else {
      size_t v35 = v33;
    }
    uint64_t result = memcmp(v32, v34, v35);
    BOOL v36 = v31 < v33;
    if (result) {
      BOOL v36 = (int)result < 0;
    }
    if (v36)
    {
      *a2 = v25;
      *a3 = v26;
      uint64_t v37 = *a2;
      uint64_t v38 = *a1;
      BOOL v39 = *(const void ***)(*(void *)(v12 + 8 + 8 * v37) + 40);
      uint64_t v40 = *(const void ***)(*(void *)(v12 + 8 + 8 * v38) + 40);
      int v41 = *((char *)v40 + 23);
      int v42 = *((char *)v39 + 23);
      if (v42 >= 0) {
        size_t v43 = *((unsigned __int8 *)v39 + 23);
      }
      else {
        size_t v43 = (size_t)v39[1];
      }
      if (v42 >= 0) {
        int v44 = v39;
      }
      else {
        int v44 = *v39;
      }
      if (v41 >= 0) {
        size_t v45 = *((unsigned __int8 *)v40 + 23);
      }
      else {
        size_t v45 = (size_t)v40[1];
      }
      if (v41 >= 0) {
        size_t v46 = v40;
      }
      else {
        size_t v46 = *v40;
      }
      if (v45 >= v43) {
        size_t v47 = v43;
      }
      else {
        size_t v47 = v45;
      }
      uint64_t result = memcmp(v44, v46, v47);
      BOOL v48 = v43 < v45;
      if (result) {
        BOOL v48 = (int)result < 0;
      }
      if (v48)
      {
        *a1 = v37;
        *a2 = v38;
      }
    }
  }
  return result;
}

void *std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C12D8;
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[27];
  if (v3)
  {
    a1[28] = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1 + 1;
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(a1 + 9));
  BOOL v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6 == v4)
  {
    (*(void (**)(void *))(*v4 + 32))(a1 + 1);
    return a1;
  }
  else
  {
    if (v6) {
      (*(void (**)(void *))(*v6 + 40))(v6);
    }
    return a1;
  }
}

void std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C12D8;
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[27];
  if (v3)
  {
    a1[28] = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1 + 1;
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(a1 + 9));
  BOOL v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6 == v4)
  {
    (*(void (**)(void *))(*v4 + 32))(a1 + 1);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  unint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x108uLL);
  *uint64_t v2 = &unk_26F0C12D8;
  std::__compressed_pair_elem<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_23CC7847C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C12D8;
  return std::__compressed_pair_elem<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1 const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(void *a1)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[4];
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
  uint64_t v4 = v2;
  if (v2 != -1)
  {
    uint64_t v5 = a1[5];
    uint64_t v6 = *(void **)(v5 + 32);
    if (!v6) {
      goto LABEL_14;
    }
    uint64_t v7 = (void *)(v5 + 32);
    uint64_t v8 = *(void **)(v5 + 32);
    do
    {
      unint64_t v9 = v8[4];
      BOOL v10 = v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = v8 + 1;
      }
      if (v10) {
        uint64_t v7 = v8;
      }
      uint64_t v8 = (void *)*v11;
    }
    while (*v11);
    if (v7 != (void *)(v5 + 32)
      && v7[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    {
      uint64_t v12 = (void *)v7[5];
    }
    else
    {
LABEL_14:
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12[14];
    unint64_t v14 = (unint64_t)(v12[15] - v13) >> 5;
    uint64_t v15 = v12 + 7;
    int v16 = (unint64_t *)(v13 + 32 * (int)v2);
    if ((int)v2 >= (int)v14) {
      int v17 = v15;
    }
    else {
      int v17 = v16;
    }
    unint64_t v20 = *v17;
    size_t v19 = (const char *)(v17 + 1);
    unint64_t v18 = v20;
    if (v20) {
      size_t v19 = *(const char **)v19;
    }
    if (v18 >= 2)
    {
      BOOL v21 = &v19[12 * (v18 >> 1)];
      do
      {
        size_t v22 = *(const char **)v19;
        int v23 = *((_DWORD *)v19 + 2);
        google::LogMessage::LogMessage((google::LogMessage *)&v81, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 255);
        BOOL v24 = (void *)google::LogMessage::stream((google::LogMessage *)&v81);
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"decision ", 9);
        size_t v78 = v22;
        LODWORD(v79) = v23;
        operations_research::sat::IntegerLiteral::DebugString((operations_research::sat::IntegerLiteral *)&v78, v26, &v84);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v27 = &v84;
        }
        else {
          BOOL v27 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, size);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)&v81);
        v19 += 12;
      }
      while (v19 != v21);
      uint64_t v5 = a1[5];
      uint64_t v6 = *(void **)(v5 + 32);
    }
    int v29 = (void *)(v5 + 32);
    do
    {
      unint64_t v30 = v6[4];
      BOOL v31 = v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
      if (v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d) {
        int v32 = v6;
      }
      else {
        int v32 = v6 + 1;
      }
      if (v31) {
        int v29 = v6;
      }
      uint64_t v6 = (void *)*v32;
    }
    while (*v32);
    size_t v33 = (absl::lts_2020_02_25::numbers_internal *)((*(_DWORD *)(v29[5] + 8) >> 1) & 0x7FFFFFF);
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)"Diff since last call, level=";
    v84.__r_.__value_.__l.__size_ = 28;
    size_t v34 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v33, v83, v3);
    uint64_t v81 = v83;
    uint64_t v82 = v34 - v83;
    size_t v78 = "\n";
    uint64_t v79 = 1;
    absl::lts_2020_02_25::StrCat((uint64_t)&v84, (uint64_t)&v81, (uint64_t)&v78, &__p);
    uint64_t v69 = v4;
    size_t v35 = a1;
    uint64_t v36 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a1[5]);
    BOOL v39 = (int *)a1[30];
    uint64_t v38 = (int *)a1[31];
    if (v39 != v38)
    {
      uint64_t v40 = v36;
      uint64_t v41 = a1[27];
      int v70 = (int *)a1[31];
      do
      {
        uint64_t v42 = *v39;
        int v43 = *(_DWORD *)(v35[6] + 4 * v42);
        uint64_t v44 = *(void *)(v40 + 40);
        uint64_t v45 = *(void *)(v44 + 12 * v43);
        uint64_t v46 = -*(void *)(v44 + 12 * (v43 ^ 1));
        size_t v47 = (uint64_t *)(v41 + 16 * v42);
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        if (v45 != v48 || v49 != v46)
        {
          uint64_t v51 = v40;
          uint64_t v52 = *(void *)(*(void *)(v35[13] + 8 * v42 + 8) + 40);
          int v53 = *(char *)(v52 + 23);
          if (v53 >= 0) {
            std::string::size_type v54 = *(void *)(*(void *)(v35[13] + 8 * v42 + 8) + 40);
          }
          else {
            std::string::size_type v54 = *(void *)v52;
          }
          if (v53 >= 0) {
            std::string::size_type v55 = *(unsigned __int8 *)(v52 + 23);
          }
          else {
            std::string::size_type v55 = *(void *)(v52 + 8);
          }
          int v56 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v48, v77, v37);
          *(void *)&long long v76 = v77;
          *((void *)&v76 + 1) = v56 - v77;
          uint64_t v58 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(void *)(v35[27] + 16 * v42 + 8), v75, v57);
          uint64_t v73 = v75;
          uint64_t v74 = v58 - v75;
          v84.__r_.__value_.__r.__words[0] = v54;
          v84.__r_.__value_.__l.__size_ = v55;
          v84.__r_.__value_.__r.__words[2] = (std::string::size_type)" [";
          uint64_t v85 = 2;
          long long v86 = v76;
          int v87 = ",";
          uint64_t v88 = 1;
          uint64_t v89 = v75;
          uint64_t v90 = v58 - v75;
          BOOL v91 = "] -> [";
          uint64_t v92 = 6;
          int v60 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v45, v83, v59);
          uint64_t v81 = v83;
          uint64_t v82 = v60 - v83;
          int v93 = v83;
          uint64_t v94 = v60 - v83;
          unint64_t v95 = ",";
          uint64_t v96 = 1;
          BOOL v62 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v46, v80, v61);
          size_t v78 = v80;
          uint64_t v79 = v62 - v80;
          BOOL v97 = v80;
          uint64_t v98 = v62 - v80;
          uint64_t v99 = "]\n";
          uint64_t v100 = 2;
          absl::lts_2020_02_25::strings_internal::AppendPieces(&__p, &v84, 10);
          size_t v35 = a1;
          uint64_t v41 = a1[27];
          size_t v63 = (uint64_t *)(v41 + 16 * v42);
          *size_t v63 = v45;
          v63[1] = v46;
          uint64_t v40 = v51;
          uint64_t v38 = v70;
        }
        ++v39;
      }
      while (v39 != v38);
    }
    int v64 = google::LogMessage::LogMessage((google::LogMessage *)&v84, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 274);
    BOOL v65 = (void *)google::LogMessage::stream(v64);
    uint64_t v4 = v69;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v67 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)p_p, v67);
    google::LogMessage::~LogMessage((google::LogMessage *)&v84);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v4;
}

void sub_23CC789A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24InstrumentSearchStrategyERKNS0_12CpModelProtoERKNSt3__16vectorIN3gtl7I"
                     "ntTypeINS0_20IntegerVariable_tag_EiEENS4_9allocatorIS9_EEEERKNS4_8functionIFNS7_INS0_17LiteralIndex"
                     "_tag_EiEEvEEEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24InstrumentSearchStrategyERKNS0_12CpModelProtoERKNSt3__16vec"
                                "torIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_9allocatorIS9_EEEERKNS4_8functionIFN"
                                "S7_INS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24InstrumentSearchStrategyERKNS0_12CpModelProtoERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_9allocatorIS9_EEEERKNS4_8functionIFNS7_INS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24InstrumentSearchStrategyERKNS0_12CpModelProtoERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_9allocatorIS9_EEEERKNS4_8functionIFNS7_INS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void *std::__compressed_pair_elem<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1 const&,0ul>(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], a1);
    }
    else
    {
      a1[3] = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    a1[3] = 0;
  }
  uint64_t v5 = a2[4];
  a1[5] = 0;
  a1[4] = v5;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v7 = (unsigned char *)a2[5];
  uint64_t v6 = (unsigned char *)a2[6];
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    BOOL v10 = &v9[4 * (v8 >> 2)];
    a1[7] = v10;
    memcpy(v9, v7, v8);
    a1[6] = v10;
  }
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a1 + 8), (const operations_research::sat::CpModelProto *)(a2 + 8));
  a1[26] = 0;
  a1[27] = 0;
  a1[28] = 0;
  uint64_t v12 = (unsigned char *)a2[26];
  uint64_t v11 = (unsigned char *)a2[27];
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = (char *)operator new(v11 - v12);
    a1[26] = v14;
    a1[27] = v14;
    a1[28] = &v14[16 * (v13 >> 4)];
    size_t v15 = v13 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v14, v12, v15);
    a1[27] = &v14[v15];
  }
  a1[29] = 0;
  a1[30] = 0;
  a1[31] = 0;
  int v17 = (unsigned char *)a2[29];
  int v16 = (unsigned char *)a2[30];
  int64_t v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v19 = (char *)operator new(v16 - v17);
    a1[29] = v19;
    a1[30] = v19;
    unint64_t v20 = &v19[4 * (v18 >> 2)];
    a1[31] = v20;
    memcpy(v19, v17, v18);
    a1[30] = v20;
  }
  return a1;
}

void sub_23CC78C5C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)v1[3];
  if (v5 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
    _Unwind_Resume(exception_object);
  }
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__alloc_func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[26];
  if (v3)
  {
    a1[27] = v3;
    operator delete(v3);
  }
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(a1 + 8));
  uint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  uint64_t result = a1[3];
  if ((void *)result == a1)
  {
    uint64_t v7 = *(uint64_t (**)(void *))(*a1 + 32);
    return v7(a1);
  }
  else if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v6();
  }
  return result;
}

void operations_research::sat::IntegerLiteral::DebugString(operations_research::sat::IntegerLiteral *this@<X0>, char *a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)this;
  if (*(int *)this >= 0) {
    int v6 = *(_DWORD *)this;
  }
  else {
    int v6 = v5 + 1;
  }
  uint64_t v7 = (absl::lts_2020_02_25::numbers_internal *)(v6 >> 1);
  if (v5)
  {
    int64_t v18 = "I";
    uint64_t v19 = 1;
    size_t v15 = v17;
    int64_t v16 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v7, v17, a2) - v17;
    uint64_t v13 = "<=";
    uint64_t v14 = 2;
    unint64_t v9 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(-*(void *)((char *)this + 4), v12, v10);
  }
  else
  {
    int64_t v18 = "I";
    uint64_t v19 = 1;
    size_t v15 = v17;
    int64_t v16 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v7, v17, a2) - v17;
    uint64_t v13 = ">=";
    uint64_t v14 = 2;
    unint64_t v9 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(void *)((char *)this + 4), v12, v8);
  }
  v11[0] = v12;
  v11[1] = v9 - v12;
  absl::lts_2020_02_25::StrCat((uint64_t)&v18, (uint64_t)&v15, (uint64_t)&v13, (uint64_t)v11, a3);
}

uint64_t OUTLINED_FUNCTION_0_3(uint64_t a1, uint64_t a2)
{
  return a2;
}

void operations_research::sat::CpModelStats(operations_research::sat *this@<X0>, std::string *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v216 = *MEMORY[0x263EF8340];
  int v194 = 0;
  __unint64_t n = 0;
  v192[1] = 0;
  uint64_t v193 = &v194;
  int v191 = v192;
  v192[0] = 0;
  v190[0] = 0;
  v190[1] = 0;
  uint64_t v189 = v190;
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    int v5 = (uint64_t *)(v4 + 8);
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = *((int *)this + 12);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    while (1)
    {
      uint64_t v8 = *v5;
      operations_research::sat::ConstraintCaseName(*(unsigned int *)(*v5 + 60), (char *)&v200);
      if (*(_DWORD *)(v8 + 60) == 12) {
        break;
      }
LABEL_22:
      v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
      uint64_t v12 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v193, (const void **)&v200, (uint64_t)&std::piecewise_construct, (long long **)&v199);
      ++*((_DWORD *)v12 + 14);
      if (*(_DWORD *)(v8 + 16))
      {
        v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
        uint64_t v13 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v191, (const void **)&v200, (uint64_t)&std::piecewise_construct, (long long **)&v199);
        ++*((_DWORD *)v13 + 14);
      }
      int v14 = *(_DWORD *)(v8 + 60);
      if (v14 == 26 || v14 == 4 || v14 == 3)
      {
        int v15 = *(_DWORD *)(*(void *)(v8 + 48) + 16);
        v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
        int64_t v16 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v189, (const void **)&v200, (uint64_t)&std::piecewise_construct, (long long **)&v199);
        *((_DWORD *)v16 + 14) += v15;
      }
      if (v201.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(v200);
      }
      ++v5;
      v7 -= 8;
      if (!v7) {
        goto LABEL_30;
      }
    }
    if (*(_DWORD *)(*(void *)(v8 + 48) + 16) == 1
      && (std::string::append((std::string *)&v200, "1"), int v9 = *(_DWORD *)(v8 + 60), v9 != 12))
    {
      if (dword_26AEE19E8 == 2)
      {
LABEL_11:
        std::string::append((std::string *)&v200, "2");
        int v9 = *(_DWORD *)(v8 + 60);
        BOOL v10 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        if (v9 != 12) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    else
    {
      int v9 = 12;
      if (*(_DWORD *)(*(void *)(v8 + 48) + 16) == 2) {
        goto LABEL_11;
      }
    }
    BOOL v10 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (v9 != 12)
    {
LABEL_16:
      if (*((_DWORD *)v10 + 4) == 3)
      {
        std::string::append((std::string *)&v200, "3");
        int v9 = *(_DWORD *)(v8 + 60);
      }
      uint64_t v11 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (v9 == 12) {
        uint64_t v11 = *(uint64_t **)(v8 + 48);
      }
      if (*((int *)v11 + 4) >= 4) {
        std::string::append((std::string *)&v200, "N");
      }
      goto LABEL_22;
    }
LABEL_15:
    BOOL v10 = *(uint64_t **)(v8 + 48);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v187 = 0;
  uint64_t v188 = 0;
  int64_t v185 = 0;
  int64_t v186 = &v187;
  BOOL v183 = &v184;
  int64_t v184 = 0;
  uint64_t v17 = *((void *)this + 4);
  if (v17) {
    uint64_t v18 = v17 + 8;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *((int *)this + 6);
  if (v19)
  {
    int v20 = 0;
    uint64_t v21 = v18 + 8 * v19;
    do
    {
      unint64_t v22 = *(int *)(*(void *)v18 + 16);
      int v23 = *(uint64_t **)(*(void *)v18 + 24);
      if (v22 == 2 && (uint64_t v24 = *v23, *v23 == v23[1]))
      {
        ++v20;
        uint64_t v25 = v187;
        uint64_t v26 = &v187;
        BOOL v27 = &v187;
        if (v187)
        {
          while (1)
          {
            while (1)
            {
              BOOL v27 = (uint64_t **)v25;
              uint64_t v28 = v25[4];
              if (v24 >= v28) {
                break;
              }
              uint64_t v25 = *v27;
              uint64_t v26 = v27;
              if (!*v27) {
                goto LABEL_46;
              }
            }
            if (v28 >= v24) {
              break;
            }
            uint64_t v25 = v27[1];
            if (!v25)
            {
              uint64_t v26 = v27 + 1;
              goto LABEL_46;
            }
          }
        }
        else
        {
LABEL_46:
          int v29 = (uint64_t *)operator new(0x28uLL);
          v29[4] = v24;
          uint64_t *v29 = 0;
          v29[1] = 0;
          v29[2] = (uint64_t)v27;
          *uint64_t v26 = v29;
          if (*v186)
          {
            int64_t v186 = (uint64_t **)*v186;
            int v29 = *v26;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v187, v29);
          ++v188;
        }
      }
      else
      {
        operations_research::Domain::FromFlatSpanOfIntervals((uint64_t)v23, v22, (unint64_t *)&v200, a3);
        unint64_t v30 = v184;
        BOOL v31 = &v184;
        int v32 = (void **)&v184;
        if (!v184) {
          goto LABEL_56;
        }
        int v32 = (void **)&v184;
        while (1)
        {
          while (1)
          {
            BOOL v31 = (uint64_t **)v30;
            size_t v33 = v30 + 4;
            if (!operations_research::Domain::operator<(&v200, v30 + 4)) {
              break;
            }
            unint64_t v30 = *v31;
            int v32 = (void **)v31;
            if (!*v31) {
              goto LABEL_56;
            }
          }
          if (!operations_research::Domain::operator<(v33, (uint64_t *)&v200)) {
            break;
          }
          int v32 = (void **)(v31 + 1);
          unint64_t v30 = v31[1];
          if (!v30) {
            goto LABEL_56;
          }
        }
        size_t v34 = (char *)*v32;
        if (!*v32)
        {
LABEL_56:
          size_t v34 = (char *)operator new(0x40uLL);
          *((void *)v34 + 4) = v200;
          *(_OWORD *)(v34 + 40) = *(_OWORD *)&v201.__r_.__value_.__l.__data_;
          size_t v200 = 0;
          *((_DWORD *)v34 + 14) = 0;
          *(void *)size_t v34 = 0;
          *((void *)v34 + 1) = 0;
          *((void *)v34 + 2) = v31;
          *int v32 = v34;
          size_t v35 = (uint64_t *)v34;
          if (*v183)
          {
            BOOL v183 = (uint64_t **)*v183;
            size_t v35 = (uint64_t *)*v32;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v184, v35);
          int64_t v185 = (absl::lts_2020_02_25::numbers_internal *)((char *)v185 + 1);
        }
        ++*((_DWORD *)v34 + 14);
        if (v200) {
          operator delete(v201.__r_.__value_.__l.__data_);
        }
      }
      v18 += 8;
    }
    while (v18 != v21);
  }
  else
  {
    int v20 = 0;
  }
  uint64_t v36 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  BOOL v37 = this == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_
     || *((void *)this + 15) == 0;
  if (v37)
  {
    size_t v200 = "Satisfaction model '";
    v201.__r_.__value_.__r.__words[0] = 20;
    std::string::size_type v38 = *((void *)this + 14);
    std::string::size_type v39 = *(unsigned __int8 *)(v38 + 23);
    std::string::size_type v40 = *(void *)(v38 + 8);
    if ((v39 & 0x80u) != 0)
    {
      std::string::size_type v38 = *(void *)v38;
      std::string::size_type v39 = v40;
    }
  }
  else
  {
    size_t v200 = "Optimization model '";
    v201.__r_.__value_.__r.__words[0] = 20;
    std::string::size_type v38 = *((void *)this + 14);
    std::string::size_type v39 = *(unsigned __int8 *)(v38 + 23);
    std::string::size_type v41 = *(void *)(v38 + 8);
    if ((v39 & 0x80u) != 0)
    {
      std::string::size_type v38 = *(void *)v38;
      std::string::size_type v39 = v41;
    }
  }
  v199.__r_.__value_.__r.__words[0] = v38;
  v199.__r_.__value_.__l.__size_ = v39;
  v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"':\n";
  v198[0].__r_.__value_.__l.__size_ = 3;
  absl::lts_2020_02_25::StrAppend(a2, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198);
  uint64_t v43 = *((void *)this + 10);
  if (v43) {
    uint64_t v44 = (uint64_t *)(v43 + 8);
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = *((int *)this + 18);
  if (v45)
  {
    uint64_t v46 = 8 * v45;
    while (1)
    {
      uint64_t v47 = *v44;
      uint64_t v48 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*(unsigned int *)(*v44 + 16), &v199.__r_.__value_.__s.__data_[16], v42);
      v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
      v199.__r_.__value_.__l.__size_ = v48 - (unsigned char *)&v199.__r_.__value_.__r.__words[2];
      operations_research::ProtoEnumToString<operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy>((operations_research::sat *)*(unsigned int *)(v47 + 64), v198);
      std::string::size_type v49 = HIBYTE(v198[0].__r_.__value_.__r.__words[2]);
      long long v50 = *(_OWORD *)&v198[0].__r_.__value_.__l.__data_;
      operations_research::ProtoEnumToString<operations_research::sat::DecisionStrategyProto_DomainReductionStrategy>((operations_research::sat *)*(unsigned int *)(v47 + 68), __p);
      uint64_t v51 = v198;
      if ((v49 & 0x80u) == 0)
      {
        std::string::size_type v52 = v49;
      }
      else
      {
        std::string::size_type v52 = *((void *)&v50 + 1);
        uint64_t v51 = (std::string *)v50;
      }
      size_t v200 = "Search strategy: on ";
      v201.__r_.__value_.__r.__words[0] = 20;
      *(_OWORD *)&v201.__r_.__value_.__r.__words[1] = *(_OWORD *)&v199.__r_.__value_.__l.__data_;
      BOOL v202 = " variables, ";
      uint64_t v203 = 12;
      p_end_cap = (std::__compressed_pair<std::string *> *)v51;
      std::string::size_type v205 = v52;
      uint64_t v206 = ", ";
      uint64_t v207 = 2;
      std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      std::string::size_type v54 = __p;
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
        std::string::size_type v54 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      int v208 = v54;
      std::string::size_type v209 = size;
      v210 = "\n";
      uint64_t v211 = 1;
      uint64_t v36 = a2;
      absl::lts_2020_02_25::strings_internal::AppendPieces(a2, &v200, 7);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_78;
        }
LABEL_86:
        operator delete(v198[0].__r_.__value_.__l.__data_);
        ++v44;
        v46 -= 8;
        if (!v46) {
          break;
        }
      }
      else
      {
        if (SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_86;
        }
LABEL_78:
        ++v44;
        v46 -= 8;
        if (!v46) {
          break;
        }
      }
    }
  }
  if (this == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_
    || (uint64_t v55 = *((void *)this + 15)) == 0)
  {
    *((unsigned char *)&v182.__r_.__value_.__s + 23) = 0;
    v182.__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    size_t v200 = " (";
    v201.__r_.__value_.__r.__words[0] = 2;
    int v56 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*(unsigned int *)(v55 + 16), &v199.__r_.__value_.__s.__data_[16], v42);
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
    v199.__r_.__value_.__l.__size_ = v56 - (unsigned char *)&v199.__r_.__value_.__r.__words[2];
    v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)" in objective)";
    v198[0].__r_.__value_.__l.__size_ = 14;
    absl::lts_2020_02_25::StrCat((uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198, &v182);
  }
  size_t v200 = "#Variables: ";
  v201.__r_.__value_.__r.__words[0] = 12;
  size_t v57 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*((unsigned int *)this + 6), &v199.__r_.__value_.__s.__data_[16], v42);
  v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
  v199.__r_.__value_.__l.__size_ = v57 - (unsigned char *)&v199.__r_.__value_.__r.__words[2];
  std::string::size_type v58 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
  size_t v59 = &v182;
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type v58 = v182.__r_.__value_.__l.__size_;
    size_t v59 = (std::string *)v182.__r_.__value_.__r.__words[0];
  }
  v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  v198[0].__r_.__value_.__l.__size_ = v58;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"\n";
  __p[0].__r_.__value_.__l.__size_ = 1;
  absl::lts_2020_02_25::StrAppend(v36, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198, (uint64_t)__p);
  BOOL v62 = v185;
  size_t v63 = v183;
  if ((unint64_t)v185 > 0x63)
  {
    if (v183 == &v184)
    {
      uint64_t v71 = 0;
      uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v72 = 0x8000000000000000;
    }
    else
    {
      uint64_t v71 = 0;
      uint64_t v72 = 0x8000000000000000;
      uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v74 = operations_research::Domain::Min((operations_research::Domain *)(v63 + 4), v60);
        if (v74 < v73) {
          uint64_t v73 = v74;
        }
        uint64_t v76 = operations_research::Domain::Max((operations_research::Domain *)(v63 + 4), v75);
        if (v72 <= v76) {
          uint64_t v72 = v76;
        }
        if (v71 <= (int)((uint64_t)v63[4] >> 1)) {
          uint64_t v71 = (int)((uint64_t)v63[4] >> 1);
        }
        uint64_t v77 = v63[1];
        if (v77)
        {
          do
          {
            size_t v78 = (uint64_t **)v77;
            uint64_t v77 = (uint64_t *)*v77;
          }
          while (v77);
        }
        else
        {
          do
          {
            size_t v78 = (uint64_t **)v63[2];
            BOOL v37 = *v78 == (uint64_t *)v63;
            size_t v63 = v78;
          }
          while (!v37);
        }
        size_t v63 = v78;
      }
      while (v78 != &v184);
      BOOL v62 = v185;
    }
    uint64_t v79 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v62, &__p[0].__r_.__value_.__s.__data_[16], v61);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
    __p[0].__r_.__value_.__l.__size_ = v79 - (unsigned char *)&__p[0].__r_.__value_.__r.__words[2];
    uint64_t v81 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v73, &v196.__end_cap_, v80);
    v196.__begin_ = (std::vector<std::string>::pointer)&v196.__end_cap_;
    v196.__end_ = (std::vector<std::string>::pointer)(v81 - (unsigned char *)&v196.__end_cap_);
    size_t v200 = " - ";
    v201.__r_.__value_.__r.__words[0] = 3;
    *(_OWORD *)&v201.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    BOOL v202 = " different domains in [";
    uint64_t v203 = 23;
    p_end_cap = &v196.__end_cap_;
    std::string::size_type v205 = v81 - (unsigned char *)&v196.__end_cap_;
    uint64_t v206 = ",";
    uint64_t v207 = 1;
    int v83 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v72, &v199.__r_.__value_.__s.__data_[16], v82);
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
    v199.__r_.__value_.__l.__size_ = v83 - (unsigned char *)&v199.__r_.__value_.__r.__words[2];
    int v208 = (std::string *)&v199.__r_.__value_.__r.__words[2];
    std::string::size_type v209 = v83 - (unsigned char *)&v199.__r_.__value_.__r.__words[2];
    v210 = "] with a largest complexity of ";
    uint64_t v211 = 31;
    uint64_t v85 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v71, &v198[0].__r_.__value_.__s.__data_[16], v84);
    v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v198[0].__r_.__value_.__r.__words[2];
    v198[0].__r_.__value_.__l.__size_ = v85 - (unsigned char *)&v198[0].__r_.__value_.__r.__words[2];
    unint64_t v212 = &v198[0].__r_.__value_.__s.__data_[16];
    uint64_t v213 = v85 - (unsigned char *)&v198[0].__r_.__value_.__r.__words[2];
    BOOL v214 = ".\n";
    uint64_t v215 = 2;
    absl::lts_2020_02_25::strings_internal::AppendPieces(a2, &v200, 9);
  }
  else if (v183 != &v184)
  {
    do
    {
      int v64 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*((unsigned int *)v63 + 14), &v199.__r_.__value_.__s.__data_[16], v61);
      v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
      v199.__r_.__value_.__l.__size_ = v64 - (unsigned char *)&v199.__r_.__value_.__r.__words[2];
      operations_research::Domain::ToString((operations_research::Domain *)(v63 + 4), __p);
      std::string::size_type v65 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v66 = __p;
      }
      else {
        int v66 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v65 = __p[0].__r_.__value_.__l.__size_;
      }
      size_t v200 = " - ";
      v201.__r_.__value_.__r.__words[0] = 3;
      *(_OWORD *)&v201.__r_.__value_.__r.__words[1] = *(_OWORD *)&v199.__r_.__value_.__l.__data_;
      BOOL v202 = " in ";
      uint64_t v203 = 4;
      p_end_cap = (std::__compressed_pair<std::string *> *)v66;
      std::string::size_type v205 = v65;
      uint64_t v206 = "\n";
      uint64_t v207 = 1;
      absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)&v200, 5, (char *)v198);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      std::string::size_type v67 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
      if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v68 = &v199;
      }
      else {
        int64_t v68 = (std::string *)v199.__r_.__value_.__r.__words[0];
      }
      if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v67 = v199.__r_.__value_.__l.__size_;
      }
      size_t v200 = (char *)v68;
      v201.__r_.__value_.__r.__words[0] = v67;
      absl::lts_2020_02_25::StrAppend((uint64_t)a2, (uint64_t)&v200);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v199.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_111:
          uint64_t v69 = v63[1];
          if (v69) {
            goto LABEL_115;
          }
          goto LABEL_117;
        }
      }
      else if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_111;
      }
      operator delete(v198[0].__r_.__value_.__l.__data_);
      uint64_t v69 = v63[1];
      if (v69)
      {
        do
        {
LABEL_115:
          int v70 = (uint64_t **)v69;
          uint64_t v69 = (uint64_t *)*v69;
        }
        while (v69);
        goto LABEL_96;
      }
      do
      {
LABEL_117:
        int v70 = (uint64_t **)v63[2];
        BOOL v37 = *v70 == (uint64_t *)v63;
        size_t v63 = v70;
      }
      while (!v37);
LABEL_96:
      size_t v63 = v70;
    }
    while (v70 != &v184);
  }
  if (v20 >= 1)
  {
    long long v86 = &v199.__r_.__value_.__s.__data_[16];
    int64_t v87 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v20, &v199.__r_.__value_.__s.__data_[16], v61)- (unsigned char *)&v199.__r_.__value_.__r.__words[2];
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
    v199.__r_.__value_.__l.__size_ = v87;
    uint64_t v88 = (uint64_t *)v186;
    memset(__p, 0, 24);
    if (v186 == &v187)
    {
      std::string::size_type v96 = 0;
      BOOL v97 = 0;
      unsigned int v95 = 0;
    }
    else
    {
      std::string::size_type v89 = 0;
      uint64_t v90 = "";
      do
      {
        std::string::append(__p, v90, v89);
        uint64_t v92 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v88[4], &v201.__r_.__value_.__s.__data_[8], v91);
        size_t v200 = &v201.__r_.__value_.__s.__data_[8];
        v201.__r_.__value_.__r.__words[0] = v92 - (unsigned char *)&v201.__r_.__value_.__r.__words[1];
        absl::lts_2020_02_25::StrAppend((uint64_t)__p, (uint64_t)&v200);
        int v93 = (uint64_t *)v88[1];
        if (v93)
        {
          do
          {
            uint64_t v94 = (uint64_t **)v93;
            int v93 = (uint64_t *)*v93;
          }
          while (v93);
        }
        else
        {
          do
          {
            uint64_t v94 = (uint64_t **)v88[2];
            BOOL v37 = *v94 == v88;
            uint64_t v88 = (uint64_t *)v94;
          }
          while (!v37);
        }
        uint64_t v88 = (uint64_t *)v94;
        uint64_t v90 = ",";
        std::string::size_type v89 = 1;
      }
      while (v94 != &v187);
      unsigned int v95 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      std::string::size_type v96 = __p[0].__r_.__value_.__l.__size_;
      BOOL v97 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      int64_t v87 = v199.__r_.__value_.__l.__size_;
      long long v86 = (std::string::value_type *)v199.__r_.__value_.__r.__words[0];
    }
    size_t v200 = " - ";
    v201.__r_.__value_.__r.__words[0] = 3;
    if ((v95 & 0x80u) == 0) {
      BOOL v97 = __p;
    }
    v201.__r_.__value_.__l.__size_ = (std::string::size_type)v86;
    v201.__r_.__value_.__r.__words[2] = v87;
    if ((v95 & 0x80u) == 0) {
      std::string::size_type v98 = v95;
    }
    else {
      std::string::size_type v98 = v96;
    }
    BOOL v202 = " constants in {";
    uint64_t v203 = 15;
    p_end_cap = (std::__compressed_pair<std::string *> *)v97;
    std::string::size_type v205 = v98;
    uint64_t v206 = "} \n";
    uint64_t v207 = 3;
    absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)&v200, 5, (char *)v198);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    std::string::size_type v99 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v100 = &v199;
    }
    else {
      uint64_t v100 = (std::string *)v199.__r_.__value_.__r.__words[0];
    }
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v99 = v199.__r_.__value_.__l.__size_;
    }
    size_t v200 = (char *)v100;
    v201.__r_.__value_.__r.__words[0] = v99;
    absl::lts_2020_02_25::StrAppend((uint64_t)a2, (uint64_t)&v200);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v199.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_164;
      }
    }
    else if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_164;
    }
    operator delete(v198[0].__r_.__value_.__l.__data_);
  }
LABEL_164:
  memset(&v196, 0, sizeof(v196));
  std::vector<std::string>::reserve(&v196, __n);
  int v102 = (uint64_t *)v193;
  if (v193 != &v194)
  {
    do
    {
      std::string::size_type v103 = v102[4];
      size_t v200 = "#";
      v201.__r_.__value_.__r.__words[0] = 1;
      std::string::size_type v104 = *((unsigned __int8 *)v102 + 55);
      if ((v104 & 0x80u) != 0) {
        std::string::size_type v104 = v102[5];
      }
      else {
        std::string::size_type v103 = (std::string::size_type)(v102 + 4);
      }
      v199.__r_.__value_.__r.__words[0] = v103;
      v199.__r_.__value_.__l.__size_ = v104;
      v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)": ";
      v198[0].__r_.__value_.__l.__size_ = 2;
      BOOL v105 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*((unsigned int *)v102 + 14), &__p[0].__r_.__value_.__s.__data_[16], v101);
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
      __p[0].__r_.__value_.__l.__size_ = v105 - (unsigned char *)&__p[0].__r_.__value_.__r.__words[2];
      absl::lts_2020_02_25::StrCat((uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198, (uint64_t)__p, &v181);
      std::vector<std::string>::pointer end = v196.__end_;
      if (v196.__end_ >= v196.__end_cap_.__value_)
      {
        v196.__end_ = std::vector<std::string>::__push_back_slow_path<std::string>((char **)&v196, (uint64_t)&v181);
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v181.__r_.__value_.__l.__data_);
          size_t v108 = v192[0];
          if (v192[0])
          {
LABEL_175:
            int v109 = *((char *)v102 + 55);
            if (v109 >= 0) {
              size_t v110 = *((unsigned __int8 *)v102 + 55);
            }
            else {
              size_t v110 = v102[5];
            }
            if (v109 >= 0) {
              BOOL v111 = v102 + 4;
            }
            else {
              BOOL v111 = (const void *)v102[4];
            }
            uint64_t v112 = v192;
            do
            {
              uint64_t v113 = v108;
              unint64_t v114 = v112;
              size_t v116 = v108 + 32;
              int v115 = (char *)*((void *)v108 + 4);
              int v117 = v113[55];
              if (v117 >= 0) {
                size_t v118 = v113[55];
              }
              else {
                size_t v118 = *((void *)v113 + 5);
              }
              if (v117 >= 0) {
                BOOL v119 = v116;
              }
              else {
                BOOL v119 = v115;
              }
              if (v110 >= v118) {
                size_t v120 = v118;
              }
              else {
                size_t v120 = v110;
              }
              int v121 = memcmp(v119, v111, v120);
              if (v121) {
                BOOL v122 = v121 < 0;
              }
              else {
                BOOL v122 = v118 < v110;
              }
              size_t v123 = (char **)(v113 + 8);
              if (v122)
              {
                uint64_t v112 = v114;
              }
              else
              {
                size_t v123 = (char **)v113;
                uint64_t v112 = (char **)v113;
              }
              size_t v108 = *v123;
            }
            while (v108);
            if (v112 != v192)
            {
              int v124 = (char *)(v114 + 4);
              BOOL v125 = !v122;
              if (v122) {
                uint64_t v126 = v114;
              }
              else {
                uint64_t v126 = v113;
              }
              if (v125) {
                int v124 = v116;
              }
              size_t v127 = *((unsigned __int8 *)v112 + 55);
              long long v129 = (char *)v126[4];
              size_t v128 = v126[5];
              if ((v127 & 0x80u) == 0) {
                size_t v130 = v127;
              }
              else {
                size_t v130 = v128;
              }
              if ((v127 & 0x80u) == 0) {
                int v131 = v124;
              }
              else {
                int v131 = v129;
              }
              if (v130 >= v110) {
                size_t v132 = v110;
              }
              else {
                size_t v132 = v130;
              }
              int v133 = memcmp(v111, v131, v132);
              BOOL v134 = v110 >= v130;
              if (v133) {
                BOOL v134 = v133 >= 0;
              }
              if (v134)
              {
                std::vector<std::string>::pointer v135 = v196.__end_;
                size_t v200 = " (#enforced: ";
                v201.__r_.__value_.__r.__words[0] = 13;
                v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v102 + 4);
                size_t v136 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v191, (const void **)v102 + 4, (uint64_t)&std::piecewise_construct, (long long **)v198);
                size_t v138 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*((unsigned int *)v136 + 14), &v199.__r_.__value_.__s.__data_[16], v137);
                v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
                v199.__r_.__value_.__l.__size_ = v138 - (unsigned char *)&v199.__r_.__value_.__r.__words[2];
                v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)")";
                v198[0].__r_.__value_.__l.__size_ = 1;
                absl::lts_2020_02_25::StrAppend(v135 - 1, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198);
              }
            }
          }
        }
        else
        {
          size_t v108 = v192[0];
          if (v192[0]) {
            goto LABEL_175;
          }
        }
      }
      else
      {
        long long v107 = *(_OWORD *)&v181.__r_.__value_.__l.__data_;
        v196.__end_->__r_.__value_.__r.__words[2] = v181.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v107;
        v196.__end_ = end + 1;
        size_t v108 = v192[0];
        if (v192[0]) {
          goto LABEL_175;
        }
      }
      BOOL v139 = v190[0];
      if (v190[0])
      {
        int v140 = *((char *)v102 + 55);
        size_t v141 = v140 >= 0 ? *((unsigned __int8 *)v102 + 55) : v102[5];
        uint64_t v142 = v140 >= 0 ? v102 + 4 : (uint64_t *)v102[4];
        uint64_t v143 = v190;
        do
        {
          int v144 = v139;
          uint64_t v145 = v143;
          int v147 = v139 + 32;
          int v146 = (char *)*((void *)v139 + 4);
          int v148 = v144[55];
          if (v148 >= 0) {
            size_t v149 = v144[55];
          }
          else {
            size_t v149 = *((void *)v144 + 5);
          }
          if (v148 >= 0) {
            size_t v150 = v147;
          }
          else {
            size_t v150 = v146;
          }
          if (v141 >= v149) {
            size_t v151 = v149;
          }
          else {
            size_t v151 = v141;
          }
          int v152 = memcmp(v150, v142, v151);
          if (v152) {
            BOOL v153 = v152 < 0;
          }
          else {
            BOOL v153 = v149 < v141;
          }
          uint64_t v154 = (char **)(v144 + 8);
          if (v153)
          {
            uint64_t v143 = v145;
          }
          else
          {
            uint64_t v154 = (char **)v144;
            uint64_t v143 = (char **)v144;
          }
          BOOL v139 = *v154;
        }
        while (v139);
        if (v143 != v190)
        {
          uint64_t v155 = (char *)(v145 + 4);
          BOOL v156 = !v153;
          if (v153) {
            uint64_t v157 = v145;
          }
          else {
            uint64_t v157 = v144;
          }
          if (v156) {
            uint64_t v155 = v147;
          }
          size_t v158 = *((unsigned __int8 *)v143 + 55);
          int v160 = (char *)v157[4];
          size_t v159 = v157[5];
          if ((v158 & 0x80u) == 0) {
            size_t v161 = v158;
          }
          else {
            size_t v161 = v159;
          }
          if ((v158 & 0x80u) == 0) {
            uint64_t v162 = v155;
          }
          else {
            uint64_t v162 = v160;
          }
          if (v161 >= v141) {
            size_t v163 = v141;
          }
          else {
            size_t v163 = v161;
          }
          int v164 = memcmp(v142, v162, v163);
          BOOL v165 = v141 >= v161;
          if (v164) {
            BOOL v165 = v164 >= 0;
          }
          if (v165)
          {
            std::vector<std::string>::pointer v166 = v196.__end_;
            size_t v200 = " (#literals: ";
            v201.__r_.__value_.__r.__words[0] = 13;
            v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v102 + 4);
            size_t v167 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v189, (const void **)v102 + 4, (uint64_t)&std::piecewise_construct, (long long **)v198);
            size_t v169 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*((unsigned int *)v167 + 14), &v199.__r_.__value_.__s.__data_[16], v168);
            v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
            v199.__r_.__value_.__l.__size_ = v169 - (unsigned char *)&v199.__r_.__value_.__r.__words[2];
            v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)")";
            v198[0].__r_.__value_.__l.__size_ = 1;
            absl::lts_2020_02_25::StrAppend(v166 - 1, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198);
          }
        }
      }
      uint64_t v170 = (char *)v102[1];
      if (v170)
      {
        do
        {
          size_t v171 = (char **)v170;
          uint64_t v170 = *(char **)v170;
        }
        while (v170);
      }
      else
      {
        do
        {
          size_t v171 = (char **)v102[2];
          BOOL v37 = *v171 == (char *)v102;
          int v102 = (uint64_t *)v171;
        }
        while (!v37);
      }
      int v102 = (uint64_t *)v171;
    }
    while (v171 != &v194);
  }
  unint64_t v172 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v196.__end_ - (char *)v196.__begin_) >> 3));
  if (v196.__end_ == v196.__begin_) {
    uint64_t v173 = 0;
  }
  else {
    uint64_t v173 = v172;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v196.__begin_, (const void **)&v196.__end_->__r_.__value_.__l.__data_, (uint64_t)&v200, v173, 1);
  absl::lts_2020_02_25::strings_internal::JoinAlgorithm<std::__wrap_iter<std::string const*>,void>((char *)v196.__begin_, (char *)v196.__end_, "\n", 1uLL, &v199);
  std::string::size_type v174 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v175 = &v199;
  }
  else {
    uint64_t v175 = (std::string *)v199.__r_.__value_.__r.__words[0];
  }
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v174 = v199.__r_.__value_.__l.__size_;
  }
  size_t v200 = (char *)v175;
  v201.__r_.__value_.__r.__words[0] = v174;
  absl::lts_2020_02_25::StrAppend((uint64_t)a2, (uint64_t)&v200);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v199.__r_.__value_.__l.__data_);
  }
  begiunint64_t n = v196.__begin_;
  if (v196.__begin_)
  {
    std::vector<std::string>::pointer v177 = v196.__end_;
    std::vector<std::string>::pointer v178 = v196.__begin_;
    if (v196.__end_ != v196.__begin_)
    {
      do
      {
        if (SHIBYTE(v177[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v177[-1].__r_.__value_.__l.__data_);
        }
        --v177;
      }
      while (v177 != begin);
      std::vector<std::string>::pointer v178 = v196.__begin_;
    }
    v196.__end_ = begin;
    operator delete(v178);
  }
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy((uint64_t)&v183, v184);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v186, v187);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v189, v190[0]);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v191, v192[0]);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v193, v194);
}

void sub_23CC7A118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a16 + 23) < 0) {
    operator delete(*(void **)a16);
  }
  std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy((uint64_t)&a27, (void *)a28);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a30, (void *)a31);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a33, (char *)a34);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a36, (char *)a37);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a39, (char *)a40);
  _Unwind_Resume(a1);
}

void operations_research::ProtoEnumToString<operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy>(operations_research::sat *a1@<X0>, std::string *a2@<X8>)
{
  v19[6] = *MEMORY[0x263EF8340];
  uint64_t v4 = (google::protobuf::EnumDescriptor *)operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy_descriptor(a1);
  uint64_t ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(v4, (int)a1);
  if (ValueByNumber)
  {
    uint64_t v7 = *(long long **)ValueByNumber;
    if (*(char *)(*(void *)ValueByNumber + 23) < 0)
    {
      uint64_t v13 = *(const std::string::value_type **)v7;
      std::string::size_type v14 = *((void *)v7 + 1);
      std::string::__init_copy_ctor_external(a2, v13, v14);
    }
    else
    {
      long long v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v19[0] = "Invalid enum value of: ";
    v19[1] = 23;
    int v9 = (operations_research::sat *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(a1, v18, v6);
    v17[0] = v18;
    v17[1] = v9 - (operations_research::sat *)v18;
    v16[0] = " for enum type: ";
    v16[1] = 16;
    BOOL v10 = (void **)operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy_descriptor(v9);
    uint64_t v11 = *v10;
    uint64_t v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      uint64_t v11 = (void *)**v10;
      uint64_t v12 = (*v10)[1];
    }
    v15[0] = v11;
    v15[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v19, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15, a2);
  }
}

void operations_research::ProtoEnumToString<operations_research::sat::DecisionStrategyProto_DomainReductionStrategy>(operations_research::sat *a1@<X0>, std::string *a2@<X8>)
{
  v19[6] = *MEMORY[0x263EF8340];
  uint64_t v4 = (google::protobuf::EnumDescriptor *)operations_research::sat::DecisionStrategyProto_DomainReductionStrategy_descriptor(a1);
  uint64_t ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(v4, (int)a1);
  if (ValueByNumber)
  {
    uint64_t v7 = *(long long **)ValueByNumber;
    if (*(char *)(*(void *)ValueByNumber + 23) < 0)
    {
      uint64_t v13 = *(const std::string::value_type **)v7;
      std::string::size_type v14 = *((void *)v7 + 1);
      std::string::__init_copy_ctor_external(a2, v13, v14);
    }
    else
    {
      long long v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v19[0] = "Invalid enum value of: ";
    v19[1] = 23;
    int v9 = (operations_research::sat *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(a1, v18, v6);
    v17[0] = v18;
    v17[1] = v9 - (operations_research::sat *)v18;
    v16[0] = " for enum type: ";
    v16[1] = 16;
    BOOL v10 = (void **)operations_research::sat::DecisionStrategyProto_DomainReductionStrategy_descriptor(v9);
    uint64_t v11 = *v10;
    uint64_t v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      uint64_t v11 = (void *)**v10;
      uint64_t v12 = (*v10)[1];
    }
    v15[0] = v11;
    v15[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v19, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15, a2);
  }
}

void operations_research::sat::anonymous namespace'::Summarize(std::string *this, uint64_t *a2)
{
  uint64_t v2 = (uint64_t **)a2;
  v22[6] = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::size_type v4 = a2[1];
    if (v4 < 0x69)
    {
      int v5 = (const std::string::value_type *)*a2;
      std::string::__init_copy_ctor_external(this, v5, v4);
      return;
    }
    uint64_t v6 = (const std::string::value_type *)*a2;
  }
  else
  {
    if (*((unsigned __int8 *)a2 + 23) <= 0x68u)
    {
      *this = *(std::string *)a2;
      return;
    }
    uint64_t v6 = (const std::string::value_type *)a2;
  }
  uint64_t v7 = operator new(0x38uLL);
  long long v8 = *(_OWORD *)v6;
  long long v9 = *((_OWORD *)v6 + 1);
  long long v10 = *((_OWORD *)v6 + 2);
  v7[24] = *((_WORD *)v6 + 24);
  *((_OWORD *)v7 + 1) = v9;
  *((_OWORD *)v7 + 2) = v10;
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)v7 + 50) = 0;
  v22[0] = v7;
  v22[1] = 50;
  v21[0] = " ... ";
  v21[1] = 5;
  if (*((char *)v2 + 23) < 0)
  {
    unint64_t v11 = (unint64_t)v2[1];
    if (v11 < 0x32) {
      goto LABEL_20;
    }
    uint64_t v2 = (uint64_t **)*v2;
  }
  else
  {
    unint64_t v11 = *((unsigned __int8 *)v2 + 23);
    if (*((unsigned __int8 *)v2 + 23) <= 0x31u) {
LABEL_20:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v12 = operator new(0x38uLL);
  std::string __p = v12;
  long long v19 = xmmword_23CE7ECC0;
  long long v13 = *(_OWORD *)((char *)v2 + v11 - 34);
  long long v14 = *(_OWORD *)((char *)v2 + v11 - 18);
  long long v15 = *(_OWORD *)((char *)v2 + v11 - 50);
  *((_WORD *)v12 + 24) = *(_WORD *)((char *)v2 + v11 - 2);
  v12[1] = v13;
  v12[2] = v14;
  *uint64_t v12 = v15;
  *((unsigned char *)v12 + 50) = 0;
  uint64_t v16 = HIBYTE(v19);
  p_p = &__p;
  if (v19 < 0)
  {
    p_p = (void **)v12;
    uint64_t v16 = v19;
  }
  v20[0] = p_p;
  v20[1] = v16;
  absl::lts_2020_02_25::StrCat((uint64_t)v22, (uint64_t)v21, (uint64_t)v20, this);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  operator delete(v7);
}

void sub_23CC7A7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    operator delete(v14);
    _Unwind_Resume(a1);
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  begiunint64_t n = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= __n) {
    return;
  }
  if (__n >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  std::vector<std::string>::pointer end = this->__end_;
  std::vector<std::string>::size_type v5 = 24 * __n;
  uint64_t v6 = (char *)operator new(24 * __n);
  uint64_t v7 = (std::string *)&v6[v5];
  long long v8 = (std::string *)&v6[24 * (end - begin)];
  if (end == begin)
  {
    this->__begin_ = v8;
    this->__end_ = v8;
    this->__end_cap_.__value_ = v7;
    if (!begin) {
      return;
    }
    goto LABEL_13;
  }
  long long v9 = (std::string *)&v6[24 * (end - begin)];
  do
  {
    long long v10 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
    v9[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9[-1].__r_.__value_.__l.__data_ = v10;
    --v9;
    end[-1].__r_.__value_.__l.__size_ = 0;
    end[-1].__r_.__value_.__r.__words[2] = 0;
    end[-1].__r_.__value_.__r.__words[0] = 0;
    --end;
  }
  while (end != begin);
  std::vector<std::string>::pointer v11 = this->__begin_;
  begiunint64_t n = this->__end_;
  this->__begin_ = v9;
  this->__end_ = v8;
  this->__end_cap_.__value_ = v7;
  if (begin != v11)
  {
    do
    {
      if (SHIBYTE(begin[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(begin[-1].__r_.__value_.__l.__data_);
      }
      --begin;
    }
    while (begin != v11);
    begiunint64_t n = v11;
  }
  if (begin)
  {
LABEL_13:
    operator delete(begin);
  }
}

std::string *operations_research::sat::CpSolverResponseStats@<X0>(operations_research::sat *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, std::string *a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v33 = *MEMORY[0x263EF8340];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  BOOL v31 = "CpSolverResponse:";
  uint64_t v32 = 17;
  absl::lts_2020_02_25::StrAppend((uint64_t)a3, (uint64_t)&v31);
  BOOL v31 = "\nstatus: ";
  uint64_t v32 = 9;
  operations_research::ProtoEnumToString<operations_research::sat::CpSolverStatus>((operations_research::sat *)*((unsigned int *)this + 38), &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v28 = p_p;
  std::string::size_type v29 = size;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v3)
    {
LABEL_12:
      BOOL v31 = "\nobjective: NA";
      uint64_t v32 = 14;
      absl::lts_2020_02_25::StrAppend((uint64_t)a3, (uint64_t)&v31);
      BOOL v31 = "\nbest_bound: NA";
      uint64_t v32 = 15;
      absl::lts_2020_02_25::StrAppend((uint64_t)a3, (uint64_t)&v31);
      goto LABEL_13;
    }
  }
  else if (!v3)
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)this + 38) == 3) {
    goto LABEL_12;
  }
  BOOL v31 = (const char *)*((void *)this + 18);
  uint64_t v32 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::AppendPack((uint64_t)a3, "\nobjective: %.9g", 16, (uint64_t)&v31, 1);
  BOOL v31 = (const char *)*((void *)this + 20);
  uint64_t v32 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::AppendPack((uint64_t)a3, "\nbest_bound: %.9g", 17, (uint64_t)&v31, 1);
LABEL_13:
  BOOL v31 = "\nBOOLeans: ";
  uint64_t v32 = 11;
  long long v9 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((void *)this + 21), v30, v8);
  uint64_t v28 = (std::string *)v30;
  std::string::size_type v29 = v9 - v30;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  BOOL v31 = "\nconflicts: ";
  uint64_t v32 = 12;
  std::vector<std::string>::pointer v11 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((void *)this + 22), v30, v10);
  uint64_t v28 = (std::string *)v30;
  std::string::size_type v29 = v11 - v30;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  BOOL v31 = "\nbranches: ";
  uint64_t v32 = 11;
  long long v13 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((void *)this + 23), v30, v12);
  uint64_t v28 = (std::string *)v30;
  std::string::size_type v29 = v13 - v30;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  BOOL v31 = "\npropagations: ";
  uint64_t v32 = 15;
  long long v15 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((void *)this + 24), v30, v14);
  uint64_t v28 = (std::string *)v30;
  std::string::size_type v29 = v15 - v30;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  BOOL v31 = "\ninteger_propagations: ";
  uint64_t v32 = 23;
  uint64_t v17 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((void *)this + 25), v30, v16);
  uint64_t v28 = (std::string *)v30;
  std::string::size_type v29 = v17 - v30;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  BOOL v31 = "\nwalltime: ";
  uint64_t v32 = 11;
  uint64_t v19 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v30, *((double *)this + 26), v18);
  uint64_t v28 = (std::string *)v30;
  std::string::size_type v29 = v19;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  BOOL v31 = "\nusertime: ";
  uint64_t v32 = 11;
  uint64_t v21 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v30, *((double *)this + 27), v20);
  uint64_t v28 = (std::string *)v30;
  std::string::size_type v29 = v21;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  BOOL v31 = "\ndeterministic_time: ";
  uint64_t v32 = 21;
  uint64_t v23 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v30, *((double *)this + 28), v22);
  uint64_t v28 = (std::string *)v30;
  std::string::size_type v29 = v23;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  BOOL v31 = "\nprimal_integral: ";
  uint64_t v32 = 18;
  uint64_t v25 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v30, *((double *)this + 29), v24);
  uint64_t v28 = (std::string *)v30;
  std::string::size_type v29 = v25;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v31, (uint64_t)&v28);
  BOOL v31 = "\n";
  uint64_t v32 = 1;
  return absl::lts_2020_02_25::StrAppend((uint64_t)a3, (uint64_t)&v31);
}

void sub_23CC7ACE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0)
  {
    operator delete(*(void **)v14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::ProtoEnumToString<operations_research::sat::CpSolverStatus>(operations_research::sat *a1@<X0>, std::string *a2@<X8>)
{
  v19[6] = *MEMORY[0x263EF8340];
  std::string::size_type v4 = (google::protobuf::EnumDescriptor *)operations_research::sat::CpSolverStatus_descriptor(a1);
  uint64_t ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(v4, (int)a1);
  if (ValueByNumber)
  {
    uint64_t v7 = *(long long **)ValueByNumber;
    if (*(char *)(*(void *)ValueByNumber + 23) < 0)
    {
      long long v13 = *(const std::string::value_type **)v7;
      std::string::size_type v14 = *((void *)v7 + 1);
      std::string::__init_copy_ctor_external(a2, v13, v14);
    }
    else
    {
      long long v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v19[0] = "Invalid enum value of: ";
    v19[1] = 23;
    long long v9 = (operations_research::sat *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(a1, v18, v6);
    v17[0] = v18;
    v17[1] = v9 - (operations_research::sat *)v18;
    v16[0] = " for enum type: ";
    v16[1] = 16;
    long long v10 = (void **)operations_research::sat::CpSolverStatus_descriptor(v9);
    std::vector<std::string>::pointer v11 = *v10;
    uint64_t v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      std::vector<std::string>::pointer v11 = (void *)**v10;
      uint64_t v12 = (*v10)[1];
    }
    v15[0] = v11;
    v15[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v19, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15, a2);
  }
}

void operations_research::sat::SolveCpModel(operations_research::sat *this@<X0>, const operations_research::sat::CpModelProto *a2@<X1>, operations_research::sat::CpSolverResponse *a3@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v55 = 0;
  uint64_t v52 = 0;
  char v53 = 1;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  char v50 = 1;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v51 = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  uint64_t v46 = 0;
  uint64_t v47 = v7;
  char v48 = 0;
  std::string::size_type v49 = *(char **)(v7 + 120);
  if (!v49)
  {
    std::string::size_type v49 = &v48;
    *(void *)(v7 + 120) = &v48;
  }
  operations_research::sat::CpSolverResponse::CpSolverResponse(a3, 0);
  if (!FLAGS_cp_model_dump_models) {
    goto LABEL_14;
  }
  *(void *)&long long __dst = FLAGS_cp_model_dump_prefix;
  *((void *)&__dst + 1) = strlen((const char *)FLAGS_cp_model_dump_prefix);
  int v66 = "model.pbtxt";
  uint64_t v67 = 11;
  absl::lts_2020_02_25::StrCat((uint64_t)&__dst, (uint64_t)&v66, __p);
  google::LogMessage::LogMessage((google::LogMessage *)&__dst, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2728);
  long long v8 = (void *)google::LogMessage::stream((google::LogMessage *)&__dst);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Dumping cp model proto to '", 27);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v10 = __p;
  }
  else {
    long long v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"'.", 2);
  google::LogMessage::~LogMessage((google::LogMessage *)&__dst);
  std::string::size_type v13 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  std::string::size_type v14 = __p;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type v13 = __p[0].__r_.__value_.__l.__size_;
    std::string::size_type v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  *(void *)&long long __dst = v14;
  *((void *)&__dst + 1) = v13;
  file::SetTextProto(&__dst, 47802, v44);
  if (v44[0])
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v66, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2729);
    std::string::size_type v41 = (void *)google::LogMessage::stream((google::LogMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: (file::SetTextProto(file, model_proto, file::Defaults())).ok() ", 77);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v66);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    v68[0] = 0;
    int v70 = 0;
    if (!FLAGS_cp_model_dump_response) {
      goto LABEL_23;
    }
  }
  else
  {
LABEL_14:
    v68[0] = 0;
    int v70 = 0;
    if (!FLAGS_cp_model_dump_response) {
      goto LABEL_23;
    }
  }
  uint64_t v67 = (uint64_t)a3;
  LOBYTE(__dst) = 1;
  LOBYTE(v66) = 0;
  *((void *)&__dst + 1) = &unk_26F0C1E40;
  int64_t v57 = (int64_t)a3;
  std::string::size_type v58 = (long long *)((char *)&__dst + 8);
  absl::cleanup_internal::Storage<std::function<void ()(void)>>::operator=((uint64_t)v68, (uint64_t)&__dst);
  if ((_BYTE)__dst)
  {
    LOBYTE(__dst) = 0;
    if (!v58) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(_OWORD *))(*(void *)v58 + 48))(v58);
  }
  if (v58 == (long long *)((char *)&__dst + 8))
  {
    (*(void (**)(char *))(*((void *)&__dst + 1) + 32))((char *)&__dst + 8);
  }
  else if (v58)
  {
    (*(void (**)(void))(*(void *)v58 + 40))();
  }
LABEL_23:
  if (!*FLAGS_cp_model_params) {
    goto LABEL_41;
  }
  long long v15 = (const operations_research::sat::SatParameters *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&v66, v15);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)__p, 0);
  uint64_t v16 = (const void *)FLAGS_cp_model_params;
  size_t v17 = strlen(FLAGS_cp_model_params);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    p_dst = (long long *)operator new(v21 + 1);
    int64_t v57 = v22 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    *((void *)&__dst + 1) = v19;
  }
  else
  {
    HIBYTE(v57) = v17;
    p_dst = &__dst;
    if (!v17) {
      goto LABEL_32;
    }
  }
  memmove(p_dst, v16, v19);
LABEL_32:
  *((unsigned char *)p_dst + v19) = 0;
  if ((google::protobuf::TextFormat::ParseFromString((uint64_t)&__dst, (google::protobuf::Message *)__p, v18) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v44, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2747);
    uint64_t v42 = (void *)google::LogMessage::stream((google::LogMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: google::protobuf::TextFormat::ParseFromString(FLAGS_cp_model_params, &flag_params) ", 97);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v44);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete((void *)__dst);
  }
  operations_research::sat::SatParameters::MergeFrom((operations_research::sat::SatParameters *)&v66, (const operations_research::sat::SatParameters *)__p);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&__dst, (const operations_research::sat::SatParameters *)&v66);
  int v64 = 0;
  uint64_t v23 = operator new(0x248uLL);
  *uint64_t v23 = &unk_26F0C1DB0;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v23 + 1), (const operations_research::sat::SatParameters *)&__dst);
  int v64 = v23;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&__dst);
  *(void *)&long long __dst = a2;
  if (!v64) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *__return_ptr))(*v64 + 48))(v45);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v45);
  if (v64 == v63)
  {
    (*(void (**)(void *))(v63[0] + 32))(v63);
  }
  else if (v64)
  {
    (*(void (**)(void))(*v64 + 40))();
  }
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)__p);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v66);
LABEL_41:
  uint64_t v25 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  if (*(unsigned char *)(v25 + 99)
    || *operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__ >= 1
    && (operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v66, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2771);
    uint64_t v26 = (void *)google::LogMessage::stream((google::LogMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Parameters: ", 12);
    google::protobuf::Message::ShortDebugString(&__dst);
  }
  char v60 = 0;
  BOOL v62 = 0;
  operations_research::sat::ValidateCpModel(this, v24, (unint64_t)&__dst);
  char v27 = HIBYTE(v57);
  if (v57 >= 0) {
    uint64_t v28 = HIBYTE(v57);
  }
  else {
    uint64_t v28 = *((void *)&__dst + 1);
  }
  if (v28) {
    *((_DWORD *)a3 + 38) = 1;
  }
  if (v27 < 0)
  {
    operator delete((void *)__dst);
    if (!v28)
    {
LABEL_55:
      if (!*(unsigned char *)(v25 + 135)
        && (this == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_
         || *(_OWORD *)((char *)this + 120) == 0)
        && !*(unsigned char *)(v25 + 129)
        && !*(unsigned char *)(v25 + 155)
        && *(int *)(v25 + 416) <= 1
        && !*((_DWORD *)this + 22))
      {
        uint64_t v30 = *((void *)this + 4);
        uint64_t v31 = v30 ? v30 + 8 : 0;
        uint64_t v32 = *((int *)this + 6);
        if (!v32) {
          goto LABEL_94;
        }
        uint64_t v33 = 8 * v32 - 8;
        do
        {
          if (*(_DWORD *)(*(void *)v31 + 16) != 2) {
            goto LABEL_60;
          }
          size_t v34 = *(void **)(*(void *)v31 + 24);
          if ((*v34 & 0x8000000000000000) != 0) {
            goto LABEL_60;
          }
          uint64_t v35 = v34[1];
          v31 += 8;
          BOOL v36 = v35 > 1 || v33 == 0;
          v33 -= 8;
        }
        while (!v36);
        if (v35 <= 1)
        {
LABEL_94:
          uint64_t v37 = *((void *)this + 7);
          if (v37) {
            uint64_t v38 = v37 + 8;
          }
          else {
            uint64_t v38 = 0;
          }
          uint64_t v39 = *((int *)this + 12);
          if (!v39) {
LABEL_101:
          }
          uint64_t v40 = 8 * v39;
          while ((*(_DWORD *)(*(void *)v38 + 60) - 3) < 2)
          {
            v38 += 8;
            v40 -= 8;
            if (!v40) {
              goto LABEL_101;
            }
          }
        }
      }
LABEL_60:
      operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v44, this);
      operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v43, 0);
      LOBYTE(__dst) = 1;
      operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)((char *)&__dst + 8), 0);
      uint64_t v59 = 0;
      LOBYTE(__dst) = 0;
      std::string::size_type v29 = (const operations_research::sat::SatParameters *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
      operations_research::sat::SatParameters::CopyFrom((operations_research::sat::SatParameters *)((char *)&__dst + 8), v29);
      uint64_t v59 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
      operator new();
    }
  }
  else if (!v28)
  {
    goto LABEL_55;
  }
  if (v60)
  {
    char v60 = 0;
    if (!v62) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *))(*v62 + 48))(v62);
  }
  if (v62 == v61)
  {
    (*(void (**)(void *))(v61[0] + 32))(v61);
    if (!v68[0]) {
      goto LABEL_72;
    }
    goto LABEL_70;
  }
  if (v62) {
    (*(void (**)(void))(*v62 + 40))();
  }
  if (v68[0])
  {
LABEL_70:
    v68[0] = 0;
    if (!v70) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *))(*v70 + 48))(v70);
  }
LABEL_72:
  if (v70 == v69)
  {
    (*(void (**)(void *))(v69[0] + 32))(v69);
    if (v49 != &v48) {
      goto LABEL_76;
    }
LABEL_78:
    *(void *)(v47 + 120) = 0;
    goto LABEL_76;
  }
  if (v70) {
    (*(void (**)(void))(*v70 + 40))();
  }
  if (v49 == &v48) {
    goto LABEL_78;
  }
LABEL_76:
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&v46);
}

void sub_23CC7CA94(_Unwind_Exception *a1)
{
  absl::Cleanup<std::function<void ()(void)>>::~Cleanup((uint64_t)&STACK[0x700]);
  absl::Cleanup<std::function<void ()(void)>>::~Cleanup(v3 - 152);
  operations_research::sat::CpSolverResponse::~CpSolverResponse(v1);
  if (STACK[0x3E8] == v2) {
    *(void *)(STACK[0x3D8] + 120) = 0;
  }
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&STACK[0x3D0]);
  _Unwind_Resume(a1);
}

uint64_t absl::Cleanup<std::function<void ()(void)>>::~Cleanup(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    uint64_t v2 = *(void *)(a1 + 32);
    if (!v2) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 == a1 + 8)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 32))(a1 + 8);
    return a1;
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
}

unsigned char *absl::Cleanup<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>::~Cleanup(unsigned char *a1)
{
  if (*a1)
  {
    *a1 = 0;
    operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0::operator()();
  }
  return a1;
}

void *std::function<operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

unsigned char *absl::Cleanup<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>::~Cleanup(unsigned char *a1)
{
  if (*a1)
  {
    *a1 = 0;
    operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1::operator()((uint64_t)(a1 + 8));
  }
  return a1;
}

void operations_research::sat::anonymous namespace'::SolvePureSatModel()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v0, 0);
  int v1 = 0;
  operator new();
}

void sub_23CC7E270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,operations_research::sat::DratProofHandler *a25,__int16 a26)
{
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<operations_research::sat::DratProofHandler>::~unique_ptr[abi:ne180100](&a25);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&a26);
  std::unique_ptr<operations_research::sat::SatSolver>::~unique_ptr[abi:ne180100]((operations_research::sat::SatSolver **)&STACK[0x2C8]);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::operator=(operations_research::sat::CpSolverResponse *this, const operations_research::sat::CpSolverResponse *a2)
{
  uint64_t v3 = *((void *)this + 1);
  std::string::size_type v4 = (void *)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) == 0)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    if (v4 != (void *)*v6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  std::string::size_type v4 = (void *)*v4;
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v6 = (void *)(v7 & 0xFFFFFFFFFFFFFFFELL);
  if (v7) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 != v6)
  {
LABEL_4:
    operations_research::sat::CpSolverResponse::CopyFrom(this, a2);
    return this;
  }
LABEL_7:
  if (this != a2) {
    operations_research::sat::CpSolverResponse::InternalSwap(this, a2);
  }
  return this;
}

double operations_research::SharedTimeLimit::GetElapsedDeterministicTime(operations_research::SharedTimeLimit *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex::ReaderLock(this, a2);
  double v3 = *(double *)(*((void *)this + 1) + 112);
  absl::lts_2020_02_25::Mutex::ReaderUnlock((atomic_ullong *)this, v4, v5, v6, v7, v8, v9, v10);
  return v3;
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SharedResponseManager>(uint64_t *result, uint64_t *a2)
{
  double v3 = result;
  uint64_t v5 = (uint64_t **)(result + 4);
  std::string::size_type v4 = (uint64_t *)result[4];
  if (v4)
  {
    uint64_t v6 = result + 4;
    uint64_t v7 = (void *)result[4];
    do
    {
      unint64_t v8 = v7[4];
      BOOL v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      if (v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = (void *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      std::vector<std::string>::pointer v11 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v4;
        unint64_t v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d) {
          break;
        }
        std::string::size_type v4 = *v12;
        uint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_19;
        }
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d) {
        break;
      }
      std::string::size_type v4 = v12[1];
      if (!v4)
      {
        uint64_t v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v12 = (uint64_t **)(result + 4);
LABEL_19:
    std::string::size_type v14 = (uint64_t *)v12;
    uint64_t v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d;
    v12[5] = 0;
    *uint64_t v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *uint64_t v5 = (uint64_t *)v12;
    uint64_t v15 = *(void *)v3[3];
    uint64_t v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      uint64_t v16 = *v5;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_23CC7E698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::SolutionObservers>(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SolutionObservers>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SolutionObservers>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    int v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::SolutionObservers>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void *std::function<void ()(operations_research::sat::CpSolverResponse const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t operations_research::SharedTimeLimit::LimitReached(operations_research::SharedTimeLimit *this, absl::lts_2020_02_25::Mutex *a2)
{
  unint64_t v3 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::Mutex::Lock(this, a2);
  uint64_t v11 = *((void *)this + 1);
  uint64_t v12 = *(unsigned __int8 **)(v11 + 120);
  if (v12 && (unsigned __int8 v13 = atomic_load(v12), (v13 & 1) != 0)
    || fmax(*(double *)(v11 + 104) - *(double *)(v11 + 112), 0.0) <= 0.0)
  {
    uint64_t v17 = 1;
  }
  else
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v3);
    if (*(void *)(v11 + 24) <= CurrentTimeNanos - *(void *)(v11 + 8)) {
      uint64_t v15 = CurrentTimeNanos - *(void *)(v11 + 8);
    }
    else {
      uint64_t v15 = *(void *)(v11 + 24);
    }
    operations_research::RunningMax<long long>::Add((int *)(v11 + 32), v15);
    *(void *)(v11 + 8) = CurrentTimeNanos;
    if (*(void *)(*(void *)(v11 + 40) + 8 * *(int *)(v11 + 68)) + CurrentTimeNanos >= *(void *)(v11 + 16))
    {
      if (FLAGS_time_limit_use_usertime
        && ((double v18 = *(double *)(v11 + 96), !*(unsigned char *)(v11 + 72))
          ? (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = *(void *)(v11 + 88))
          : (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = absl::lts_2020_02_25::GetCurrentTimeNanos(v16) - *(void *)(v11 + 80) + *(void *)(v11 + 88)),
            double v20 = v18 + (double)v19 * -0.000000001,
            v20 > 0.0001))
      {
        uint64_t v17 = 0;
        uint64_t v21 = *(void *)(v11 + 8) + (uint64_t)(v20 * 1000000000.0);
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v17 = 1;
      }
      *(void *)(v11 + 16) = v21;
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)this, v4, v5, v6, v7, v8, v9, v10);
  return v17;
}

void sub_23CC7EA18(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::anonymous namespace'::SolveCpModelParallel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v5 = (unsigned char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a5);
    if (!v5[99]
    {
    }
    if (!v5[129])
    {
      if (v5[427]) {
        operator new();
      }
      if (v5[149]) {
        operator new();
      }
      operator new();
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v9, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2459);
    uint64_t v7 = (void *)google::LogMessage::stream((google::LogMessage *)&v9);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: !parameters.enumerate_all_solutions() ", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Enumerating all solutions in parallel is not supported.", 55);
  }
  else
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v9, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2455);
    uint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: shared_response_manager != nullptr ", 49);
  }
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v9);
}

void sub_23CC80698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,void *a33,void *a34,operations_research::sat::SharedBoundsManager *a35)
{
}

void sub_23CC80DC8()
{
  MEMORY[0x23ECF2BC0](v0, 0x10F3C409D26FD0FLL);
  JUMPOUT(0x23CC80D70);
}

void sub_23CC80DE8()
{
}

void sub_23CC80DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if ((a23 & 0x80000000) == 0) {
    JUMPOUT(0x23CC80D98);
  }
  JUMPOUT(0x23CC80D90);
}

void sub_23CC80E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    JUMPOUT(0x23CC80D98);
  }
  JUMPOUT(0x23CC80D90);
}

void sub_23CC80E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_23CC80E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedResponseManager *a3, operations_research::sat::Model *a4)
{
  uint64_t v619 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    v566 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v613, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1244);
    v567 = (void *)google::LogMessage::stream(v566);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v567, (uint64_t)"Check failed: shared_response_manager != nullptr ", 49);
LABEL_880:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v613);
  }
  v571 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  v575 = this;
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a3);
  uint64_t v572 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  v581 = a3;
  uint64_t v11 = (void *)*((void *)a3 + 4);
  uint64_t v10 = (char *)a3 + 32;
  std::string v9 = v11;
  if (v11)
  {
    uint64_t v12 = v10;
    unsigned __int8 v13 = v9;
    do
    {
      unint64_t v14 = v13[4];
      BOOL v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d;
      if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = v13 + 1;
      }
      if (v15) {
        uint64_t v12 = (char *)v13;
      }
      unsigned __int8 v13 = (void *)*v16;
    }
    while (*v16);
    if (v12 != v10
      && *((void *)v12 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d
      && *((void *)v12 + 5)
      && *(unsigned char *)(v572 + 425))
    {
      uint64_t v17 = v10;
      do
      {
        unint64_t v18 = v9[4];
        BOOL v19 = v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d;
        if (v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d) {
          double v20 = v9;
        }
        else {
          double v20 = v9 + 1;
        }
        if (v19) {
          uint64_t v17 = (char *)v9;
        }
        std::string v9 = (void *)*v20;
      }
      while (*v20);
      if (v17 == v10
        || *((void *)v17 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d)
      {
        operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraints(0, v581);
        if (operations_research::sat::SatSolver::FinishPropagation(v571)) {
          goto LABEL_26;
        }
LABEL_606:
        *((unsigned char *)v571 + 496) = 1;
        uint64_t v22 = *((unsigned __int8 *)v581 + 23);
        if ((v22 & 0x80u) == 0) {
          uint64_t v23 = (const std::string::value_type *)v581;
        }
        else {
          uint64_t v23 = *(const std::string::value_type **)v581;
        }
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = *((void *)v581 + 1);
        }
        goto LABEL_611;
      }
      operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraints(*((operations_research::sat::PrecedencesPropagator **)v17 + 5), v581);
      if ((operations_research::sat::SatSolver::FinishPropagation(v571) & 1) == 0) {
        goto LABEL_606;
      }
    }
  }
LABEL_26:
  v568 = v10;
  uint64_t v21 = v572;
  if (*(int *)(v572 + 428) > 1)
  {
    operations_research::sat::ProbeBooleanVariables(v581, 1.0, 0);
    if (*(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v581)
                  + 496))
    {
      *((unsigned char *)v571 + 496) = 1;
      uint64_t v22 = *((unsigned __int8 *)v581 + 23);
      if ((v22 & 0x80u) == 0) {
        uint64_t v23 = (const std::string::value_type *)v581;
      }
      else {
        uint64_t v23 = *(const std::string::value_type **)v581;
      }
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *((void *)v581 + 1);
      }
LABEL_611:
      *(void *)v613 = v23;
      *(void *)&v613[8] = v22;
      v616.__r_.__value_.__r.__words[0] = (std::string::size_type)" [loading]";
      v616.__r_.__value_.__l.__size_ = 10;
      absl::lts_2020_02_25::StrCat((uint64_t)v613, (uint64_t)&v616, &v610);
      operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)a2, (absl::lts_2020_02_25::Mutex *)&v610);
LABEL_688:
      if ((SHIBYTE(v610.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      v455 = (void *)v610.__r_.__value_.__r.__words[0];
      goto LABEL_876;
    }
    int64_t v24 = (operations_research::sat::BinaryImplicationGraph *)operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)v581);
    char v25 = operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(v24, 0);
    uint64_t v21 = v572;
    if ((v25 & 1) == 0)
    {
      *((unsigned char *)v571 + 496) = 1;
      uint64_t v22 = *((unsigned __int8 *)v581 + 23);
      if ((v22 & 0x80u) == 0) {
        uint64_t v23 = (const std::string::value_type *)v581;
      }
      else {
        uint64_t v23 = *(const std::string::value_type **)v581;
      }
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *((void *)v581 + 1);
      }
      goto LABEL_611;
    }
  }
  v574 = (const void **)v7;
  int v584 = -1;
  signed int v26 = *(_DWORD *)(v21 + 396);
  if (v26 < 1)
  {
    if (this == (operations_research::sat::_anonymous_namespace_ *)&operations_research::sat::_CpModelProto_default_instance_) {
      goto LABEL_474;
    }
    uint64_t v199 = *((void *)this + 15);
    if (!v199) {
      goto LABEL_474;
    }
    memset(v613, 0, 24);
    uint64_t v200 = *(int *)(v199 + 16);
    if (v200)
    {
      if ((v200 & 0x80000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      std::string v201 = (char *)operator new(16 * v200);
      BOOL v202 = v201;
      *(void *)v613 = v201;
      *(void *)&v613[8] = v201;
      *(void *)&v613[16] = &v201[16 * v200];
      if (*(int *)(v199 + 16) >= 1)
      {
        uint64_t v203 = 0;
        while (1)
        {
          int v205 = *(_DWORD *)(*(void *)(v199 + 24) + 4 * v203);
          int v206 = ~v205 <= v205 ? *(_DWORD *)(*(void *)(v199 + 24) + 4 * v203) : ~v205;
          uint64_t v207 = *((_DWORD *)*v574 + v206) ^ (v205 >> 31);
          uint64_t v208 = *(void *)(*(void *)(v199 + 48) + 8 * v203);
          if ((unint64_t)v202 >= *(void *)&v613[16]) {
            break;
          }
          *(void *)BOOL v202 = v207;
          *((void *)v202 + 1) = v208;
          uint64_t v204 = v202 + 16;
LABEL_276:
          *(void *)&v613[8] = v204;
          ++v203;
          BOOL v202 = v204;
          if (v203 >= *(int *)(v199 + 16)) {
            goto LABEL_589;
          }
        }
        std::string::size_type v209 = *(char **)v613;
        uint64_t v210 = (uint64_t)&v202[-*(void *)v613] >> 4;
        unint64_t v211 = v210 + 1;
        if ((unint64_t)(v210 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v212 = *(void *)&v613[16] - *(void *)v613;
        if ((uint64_t)(*(void *)&v613[16] - *(void *)v613) >> 3 > v211) {
          unint64_t v211 = v212 >> 3;
        }
        if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v213 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v213 = v211;
        }
        if (v213)
        {
          if (v213 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v214 = (char *)operator new(16 * v213);
          uint64_t v215 = &v214[16 * v210];
          uint64_t v216 = &v214[16 * v213];
          *(void *)uint64_t v215 = v207;
          *((void *)v215 + 1) = v208;
          uint64_t v204 = v215 + 16;
          if (v202 == v209) {
            goto LABEL_295;
          }
        }
        else
        {
          uint64_t v215 = (char *)(16 * v210);
          uint64_t v216 = 0;
          *(void *)uint64_t v215 = v207;
          *((void *)v215 + 1) = v208;
          uint64_t v204 = (char *)(16 * v210 + 16);
          if (v202 == v209)
          {
LABEL_295:
            *(void *)v613 = v215;
            *(void *)&v613[16] = v216;
            std::string::size_type v209 = v202;
LABEL_296:
            operator delete(v209);
            goto LABEL_276;
          }
        }
        do
        {
          *((_OWORD *)v215 - 1) = *((_OWORD *)v202 - 1);
          v215 -= 16;
          v202 -= 16;
        }
        while (v202 != v209);
        *(void *)v613 = v215;
        *(void *)&v613[16] = v216;
        if (!v209) {
          goto LABEL_276;
        }
        goto LABEL_296;
      }
      uint64_t v204 = v201;
      if (!*(unsigned char *)(v572 + 147)) {
        goto LABEL_602;
      }
    }
    else
    {
      uint64_t v204 = 0;
LABEL_589:
      if (!*(unsigned char *)(v572 + 147))
      {
LABEL_602:
LABEL_603:
        int v295 = VariableGreaterOrEqualToSumOf;
        int v584 = VariableGreaterOrEqualToSumOf;
        if (*(void *)v613) {
          operator delete(*(void **)v613);
        }
        goto LABEL_443;
      }
    }
    goto LABEL_603;
  }
  long long v27 = *(_OWORD *)v613;
  uint64_t v29 = *((void *)&v614 + 1);
  uint64_t v28 = v615;
  uint64_t v30 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v581);
  uint64_t v31 = (*((void *)&v27 + 1) - (void)v27) >> 6;
  uint64_t v32 = 0x6DB6DB6DB6DB6DB7 * ((v28 - v29) >> 3);
  uint64_t v33 = (*(void *)(v30 + 48) - *(void *)(v30 + 40)) >> 2;
  LODWORD(v616.__r_.__value_.__l.__data_) = 0;
  *(_OWORD *)&v616.__r_.__value_.__r.__words[1] = 0u;
  long long v617 = 0u;
  long long v618 = 0u;
  int v34 = v32 + v31;
  operations_research::ConnectedComponents<int,int>::Init((std::vector<int> *)&v616, (v32 + v31 - 1431655765 * v33));
  uint64_t v35 = v31;
  if ((int)v31 >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = *(void *)v613;
    std::string::size_type size = v616.__r_.__value_.__l.__size_;
    do
    {
      uint64_t v39 = v37 + (v36 << 6);
      uint64_t v40 = *(int **)(v39 + 16);
      std::string::size_type v41 = *(int **)(v39 + 24);
      if (v40 != v41)
      {
        uint64_t v42 = *((void *)&v617 + 1);
        do
        {
          int v43 = *v40;
          int v44 = v36;
          do
          {
            int v45 = v44;
            int v44 = *(_DWORD *)(size + 4 * v44);
          }
          while (v45 != v44);
          uint64_t v46 = *(unsigned int *)(size + 4 * v36);
          if (v36 != v46)
          {
            uint64_t v47 = (_DWORD *)(size + 4 * v36);
            do
            {
              _DWORD *v47 = v45;
              uint64_t v47 = (_DWORD *)(size + 4 * (int)v46);
              BOOL v196 = v46 == *v47;
              LODWORD(v46) = *v47;
            }
            while (!v196);
          }
          int v48 = v43 + v34;
          int v49 = v43 + v34;
          do
          {
            int v50 = v49;
            int v49 = *(_DWORD *)(size + 4 * v49);
          }
          while (v50 != v49);
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v51 = (int *)(size + 4 * v48);
          int v52 = *v51;
          if (*v51 != v48)
          {
            do
            {
              int *v51 = v50;
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v51 = (int *)(size + 4 * v52);
              BOOL v196 = v52 == *v51;
              int v52 = *v51;
            }
            while (!v196);
          }
          if (v45 != v50)
          {
            int v53 = *(_DWORD *)(v42 + 4 * v45);
            int v54 = *(_DWORD *)(v42 + 4 * v50);
            BOOL v55 = v53 < v54;
            if (v53 >= v54) {
              int v56 = v45;
            }
            else {
              int v56 = v50;
            }
            if (!v55) {
              int v45 = v50;
            }
            uint64_t v57 = 4 * v45;
            *(_DWORD *)(size + v57) = v56;
            *(_DWORD *)(v42 + 4 * v56) += *(_DWORD *)(v42 + v57);
          }
          ++v40;
        }
        while (v40 != v41);
      }
      ++v36;
    }
    while (v36 != v31);
  }
  uint64_t v576 = (int)((uint64_t)(*((void *)&v27 + 1) - v27) >> 6);
  if ((int)v32 >= 1)
  {
    uint64_t v58 = 0;
    uint64_t v59 = *((void *)&v614 + 1);
    std::string::size_type v60 = v616.__r_.__value_.__l.__size_;
    do
    {
      size_t v61 = (int **)(v59 + 56 * v58);
      BOOL v62 = *v61;
      size_t v63 = v61[1];
      if (v62 != v63)
      {
        int v64 = (int *)(v60 + 4 * (v58 + v576));
        uint64_t v65 = *((void *)&v617 + 1);
        do
        {
          int v66 = *v62;
          int v67 = v58 + v576;
          do
          {
            int v68 = v67;
            int v67 = *(_DWORD *)(v60 + 4 * v67);
          }
          while (v68 != v67);
          int v69 = *v64;
          if (*v64 != v58 + v576)
          {
            int v70 = (int *)(v60 + 4 * (v58 + v576));
            do
            {
              *int v70 = v68;
              int v70 = (int *)(v60 + 4 * v69);
              BOOL v196 = v69 == *v70;
              int v69 = *v70;
            }
            while (!v196);
          }
          int v71 = v66 + v34;
          int v72 = v66 + v34;
          do
          {
            int v73 = v72;
            int v72 = *(_DWORD *)(v60 + 4 * v72);
          }
          while (v73 != v72);
          uint64_t v74 = (int *)(v60 + 4 * v71);
          int v75 = *v74;
          if (*v74 != v71)
          {
            do
            {
              int *v74 = v73;
              uint64_t v74 = (int *)(v60 + 4 * v75);
              BOOL v196 = v75 == *v74;
              int v75 = *v74;
            }
            while (!v196);
          }
          if (v68 != v73)
          {
            int v76 = *(_DWORD *)(v65 + 4 * v68);
            int v77 = *(_DWORD *)(v65 + 4 * v73);
            BOOL v78 = v76 < v77;
            if (v76 >= v77) {
              int v79 = v68;
            }
            else {
              int v79 = v73;
            }
            if (!v78) {
              int v68 = v73;
            }
            uint64_t v80 = 4 * v68;
            *(_DWORD *)(v60 + v80) = v79;
            *(_DWORD *)(v65 + 4 * v79) += *(_DWORD *)(v65 + v80);
          }
          ++v62;
        }
        while (v62 != v63);
      }
      ++v58;
    }
    while (v58 != v32);
  }
  int v569 = v32;
  long long v604 = 0uLL;
  unint64_t v603 = (unint64_t)&v604;
  if ((int)v31 >= 1)
  {
    uint64_t v81 = 0;
    do
    {
      while (1)
      {
        std::string::size_type v82 = v616.__r_.__value_.__l.__size_;
        int v83 = v81;
        do
        {
          int v84 = v83;
          int v83 = *(_DWORD *)(v616.__r_.__value_.__l.__size_ + 4 * v83);
        }
        while (v84 != v83);
        uint64_t v85 = (_DWORD *)(v616.__r_.__value_.__l.__size_ + 4 * v81);
        uint64_t v86 = *v85;
        if (v81 != v86)
        {
          do
          {
            *uint64_t v85 = v84;
            uint64_t v85 = (_DWORD *)(v82 + 4 * (int)v86);
            BOOL v196 = v86 == *v85;
            LODWORD(v86) = *v85;
          }
          while (!v196);
        }
        uint64_t v87 = v604;
        uint64_t v88 = &v604;
        std::string::size_type v89 = &v604;
        if ((void)v604) {
          break;
        }
LABEL_99:
        BOOL v91 = operator new(0x28uLL);
        v91[7] = v84;
        v91[8] = 0;
        *(void *)BOOL v91 = 0;
        *((void *)v91 + 1) = 0;
        *((void *)v91 + 2) = v89;
        *(void *)uint64_t v88 = v91;
        uint64_t v92 = (uint64_t *)v91;
        if (*(void *)v603)
        {
          unint64_t v603 = *(void *)v603;
          uint64_t v92 = *(uint64_t **)v88;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v604, v92);
        ++*((void *)&v604 + 1);
        ++v91[8];
        if (++v81 == v31) {
          goto LABEL_102;
        }
      }
      while (1)
      {
        while (1)
        {
          std::string::size_type v89 = (long long *)v87;
          int v90 = *(_DWORD *)(v87 + 28);
          if (v84 >= v90) {
            break;
          }
          uint64_t v87 = *(void *)v89;
          uint64_t v88 = v89;
          if (!*(void *)v89) {
            goto LABEL_99;
          }
        }
        if (v90 >= v84) {
          break;
        }
        uint64_t v87 = *((void *)v89 + 1);
        if (!v87)
        {
          uint64_t v88 = (long long *)((char *)v89 + 8);
          goto LABEL_99;
        }
      }
      ++*((_DWORD *)v89 + 8);
      ++v81;
    }
    while (v81 != v31);
  }
LABEL_102:
  if (v569 >= 1)
  {
    for (uint64_t i = 0; i != v569; ++i)
    {
      while (1)
      {
        uint64_t v94 = i + v576;
        std::string::size_type v95 = v616.__r_.__value_.__l.__size_;
        int v96 = i + v576;
        do
        {
          int v97 = v96;
          int v96 = *(_DWORD *)(v616.__r_.__value_.__l.__size_ + 4 * v96);
        }
        while (v97 != v96);
        std::string::size_type v98 = (int *)(v616.__r_.__value_.__l.__size_ + 4 * v94);
        int v99 = *v98;
        if (*v98 != v94)
        {
          do
          {
            *std::string::size_type v98 = v97;
            std::string::size_type v98 = (int *)(v95 + 4 * v99);
            BOOL v196 = v99 == *v98;
            int v99 = *v98;
          }
          while (!v196);
        }
        uint64_t v100 = v604;
        uint64_t v101 = &v604;
        int v102 = &v604;
        if ((void)v604) {
          break;
        }
LABEL_117:
        std::string::size_type v104 = operator new(0x28uLL);
        v104[7] = v97;
        v104[8] = 0;
        *(void *)std::string::size_type v104 = 0;
        *((void *)v104 + 1) = 0;
        *((void *)v104 + 2) = v102;
        *(void *)uint64_t v101 = v104;
        BOOL v105 = (uint64_t *)v104;
        if (*(void *)v603)
        {
          unint64_t v603 = *(void *)v603;
          BOOL v105 = *(uint64_t **)v101;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v604, v105);
        ++*((void *)&v604 + 1);
        ++v104[8];
        if (++i == v569) {
          goto LABEL_120;
        }
      }
      while (1)
      {
        while (1)
        {
          int v102 = (long long *)v100;
          int v103 = *(_DWORD *)(v100 + 28);
          if (v97 >= v103) {
            break;
          }
          uint64_t v100 = *(void *)v102;
          uint64_t v101 = v102;
          if (!*(void *)v102) {
            goto LABEL_117;
          }
        }
        if (v103 >= v97) {
          break;
        }
        uint64_t v100 = *((void *)v102 + 1);
        if (!v100)
        {
          uint64_t v101 = (long long *)((char *)v102 + 8);
          goto LABEL_117;
        }
      }
      ++*((_DWORD *)v102 + 8);
    }
  }
LABEL_120:
  v573 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v581);
  uint64_t v106 = (uint64_t *)*((void *)v575 + 15);
  long long v107 = &operations_research::sat::_CpObjectiveProto_default_instance_;
  if (v106) {
    long long v107 = (uint64_t *)*((void *)v575 + 15);
  }
  if (*((int *)v107 + 10) >= 1)
  {
    uint64_t v108 = 0;
    do
    {
      int v109 = *(_DWORD *)(v107[3] + 4 * v108);
      if (~v109 <= v109) {
        int v110 = v109;
      }
      else {
        int v110 = ~v109;
      }
      int v111 = (*(_DWORD *)(*v573 + 4 * v110) ^ (v109 >> 31)) + v34;
      std::string::size_type v112 = v616.__r_.__value_.__l.__size_;
      int v113 = v111;
      do
      {
        int v114 = v113;
        int v113 = *(_DWORD *)(v616.__r_.__value_.__l.__size_ + 4 * v113);
      }
      while (v114 != v113);
      int v115 = (int *)(v616.__r_.__value_.__l.__size_ + 4 * v111);
      int v116 = *v115;
      if (*v115 != v111)
      {
        do
        {
          *int v115 = v114;
          int v115 = (int *)(v112 + 4 * v116);
          BOOL v196 = v116 == *v115;
          int v116 = *v115;
        }
        while (!v196);
      }
      uint64_t v117 = v604;
      size_t v118 = &v604;
      BOOL v119 = &v604;
      if ((void)v604)
      {
        while (1)
        {
          while (1)
          {
            BOOL v119 = (long long *)v117;
            int v120 = *(_DWORD *)(v117 + 28);
            if (v114 >= v120) {
              break;
            }
            uint64_t v117 = *(void *)v119;
            size_t v118 = v119;
            if (!*(void *)v119) {
              goto LABEL_143;
            }
          }
          if (v120 >= v114) {
            break;
          }
          uint64_t v117 = *((void *)v119 + 1);
          if (!v117)
          {
            size_t v118 = (long long *)((char *)v119 + 8);
            goto LABEL_143;
          }
        }
        int v121 = v119;
      }
      else
      {
LABEL_143:
        int v121 = operator new(0x28uLL);
        v121[7] = v114;
        v121[8] = 0;
        *(void *)int v121 = 0;
        *((void *)v121 + 1) = 0;
        *((void *)v121 + 2) = v119;
        *(void *)size_t v118 = v121;
        BOOL v122 = (uint64_t *)v121;
        if (*(void *)v603)
        {
          unint64_t v603 = *(void *)v603;
          BOOL v122 = *(uint64_t **)v118;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v604, v122);
        ++*((void *)&v604 + 1);
        uint64_t v106 = (uint64_t *)*((void *)v575 + 15);
      }
      ++v121[8];
      ++v108;
      long long v107 = &operations_research::sat::_CpObjectiveProto_default_instance_;
      if (v106) {
        long long v107 = v106;
      }
    }
    while (v108 < *((int *)v107 + 10));
  }
  v601 = 0;
  uint64_t v602 = 0;
  uint64_t v599 = 0;
  v600 = &v601;
  std::string __p = 0;
  v598 = 0;
  v595 = 0;
  uint64_t v596 = 0;
  v594 = &v595;
  if ((int)v31 >= 1)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      LODWORD(v607.__r_.__value_.__l.__data_) = 0;
      std::string::size_type v124 = v616.__r_.__value_.__l.__size_;
      int v125 = j;
      do
      {
        int v126 = v125;
        int v125 = *(_DWORD *)(v616.__r_.__value_.__l.__size_ + 4 * v125);
      }
      while (v126 != v125);
      size_t v127 = (_DWORD *)(v616.__r_.__value_.__l.__size_ + 4 * j);
      uint64_t v128 = *v127;
      if (j != v128)
      {
        do
        {
          *size_t v127 = v126;
          size_t v127 = (_DWORD *)(v124 + 4 * (int)v128);
          BOOL v196 = v128 == *v127;
          LODWORD(v128) = *v127;
        }
        while (!v196);
      }
      LODWORD(v607.__r_.__value_.__l.__data_) = v126;
      uint64_t v129 = v604;
      size_t v130 = &v604;
      int v131 = &v604;
      if ((void)v604)
      {
        while (1)
        {
          while (1)
          {
            int v131 = (long long *)v129;
            int v132 = *(_DWORD *)(v129 + 28);
            if (v126 >= v132) {
              break;
            }
            uint64_t v129 = *(void *)v131;
            size_t v130 = v131;
            if (!*(void *)v131) {
              goto LABEL_161;
            }
          }
          if (v132 >= v126) {
            break;
          }
          uint64_t v129 = *((void *)v131 + 1);
          if (!v129)
          {
            size_t v130 = (long long *)((char *)v131 + 8);
            goto LABEL_161;
          }
        }
        if (*((int *)v131 + 8) < 2) {
          continue;
        }
      }
      else
      {
LABEL_161:
        int v133 = operator new(0x28uLL);
        v133[7] = v126;
        v133[8] = 0;
        *(void *)int v133 = 0;
        *((void *)v133 + 1) = 0;
        *((void *)v133 + 2) = v131;
        *(void *)size_t v130 = v133;
        BOOL v134 = (uint64_t *)v133;
        if (*(void *)v603)
        {
          unint64_t v603 = *(void *)v603;
          BOOL v134 = *(uint64_t **)v130;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v604, v134);
        ++*((void *)&v604 + 1);
        if ((int)v133[8] < 2) {
          continue;
        }
      }
      std::vector<std::string>::pointer v135 = v595;
      int data = (int)v607.__r_.__value_.__l.__data_;
      unint64_t v137 = &v595;
LABEL_168:
      size_t v138 = v137;
      if (v135)
      {
        while (1)
        {
          unint64_t v137 = (uint64_t **)v135;
          int v139 = *((_DWORD *)v135 + 8);
          if (SLODWORD(v607.__r_.__value_.__l.__data_) < v139)
          {
            std::vector<std::string>::pointer v135 = *v137;
            goto LABEL_168;
          }
          if (v139 >= SLODWORD(v607.__r_.__value_.__l.__data_)) {
            break;
          }
          std::vector<std::string>::pointer v135 = v137[1];
          if (!v135)
          {
            size_t v138 = v137 + 1;
            goto LABEL_173;
          }
        }
        int v140 = v137;
        uint64_t v142 = (const operations_research::sat::LinearConstraint *)(*(void *)v613 + (j << 6));
        uint64_t v145 = v137 + 6;
        uint64_t v143 = (operations_research::sat::LinearConstraint *)v137[6];
        if (v143 < (operations_research::sat::LinearConstraint *)v145[1])
        {
LABEL_176:
          operations_research::sat::LinearConstraint::LinearConstraint(v143, v142);
          int v144 = (char *)v143 + 64;
          *((void *)v140 + 6) = (char *)v143 + 64;
          goto LABEL_179;
        }
      }
      else
      {
LABEL_173:
        int v140 = operator new(0x40uLL);
        *((_DWORD *)v140 + 8) = data;
        *((void *)v140 + 6) = 0;
        *((void *)v140 + 7) = 0;
        *((void *)v140 + 5) = 0;
        *(void *)int v140 = 0;
        *((void *)v140 + 1) = 0;
        *((void *)v140 + 2) = v137;
        *size_t v138 = (uint64_t *)v140;
        size_t v141 = (uint64_t *)v140;
        if (*v594)
        {
          v594 = (uint64_t **)*v594;
          size_t v141 = *v138;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v595, v141);
        ++v596;
        uint64_t v142 = (const operations_research::sat::LinearConstraint *)(*(void *)v613 + (j << 6));
        uint64_t v143 = (operations_research::sat::LinearConstraint *)*((void *)v140 + 6);
        if ((unint64_t)v143 < *((void *)v140 + 7)) {
          goto LABEL_176;
        }
      }
      int v144 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint const&>((operations_research::sat::LinearConstraint **)v140 + 5, v142);
LABEL_179:
      *((void *)v140 + 6) = v144;
      int v146 = v601;
      if (!v601) {
        goto LABEL_188;
      }
      int v147 = &v601;
      do
      {
        int v148 = v146;
        size_t v149 = v147;
        int v150 = *((_DWORD *)v146 + 8);
        size_t v151 = (uint64_t **)(v146 + 1);
        if (v150 >= SLODWORD(v607.__r_.__value_.__l.__data_))
        {
          size_t v151 = (uint64_t **)v148;
          int v147 = (uint64_t **)v148;
        }
        int v146 = *v151;
      }
      while (v146);
      if (v147 == &v601) {
        goto LABEL_188;
      }
      if (v150 < SLODWORD(v607.__r_.__value_.__l.__data_)) {
        int v148 = (uint64_t *)v149;
      }
      if (SLODWORD(v607.__r_.__value_.__l.__data_) < *((_DWORD *)v148 + 8)) {
LABEL_188:
      }
        operator new();
      int v152 = (operations_research::sat::LinearProgrammingConstraint **)gtl::FindOrDie<std::map<int,operations_research::sat::LinearProgrammingConstraint *>>((uint64_t)&v600, (int *)&v607);
      operations_research::sat::LinearProgrammingConstraint::AddLinearConstraint(*v152, (int **)(*(void *)v613 + (j << 6)));
    }
  }
  if (v569 >= 1)
  {
    uint64_t v153 = 0;
    while (1)
    {
      uint64_t v154 = v153 + v576;
      std::string::size_type v155 = v616.__r_.__value_.__l.__size_;
      int v156 = v153 + v576;
      do
      {
        int v157 = v156;
        int v156 = *(_DWORD *)(v616.__r_.__value_.__l.__size_ + 4 * v156);
      }
      while (v157 != v156);
      size_t v158 = (int *)(v616.__r_.__value_.__l.__size_ + 4 * v154);
      int v159 = *v158;
      if (*v158 != v154)
      {
        do
        {
          *size_t v158 = v157;
          size_t v158 = (int *)(v155 + 4 * v159);
          BOOL v196 = v159 == *v158;
          int v159 = *v158;
        }
        while (!v196);
      }
      int v160 = v601;
      if (!v601) {
        goto LABEL_208;
      }
      size_t v161 = &v601;
      uint64_t v162 = v601;
      do
      {
        size_t v163 = v162;
        int v164 = v161;
        int v165 = *((_DWORD *)v162 + 8);
        if (v165 >= v157) {
          size_t v161 = (uint64_t **)v162;
        }
        else {
          ++v162;
        }
        uint64_t v162 = (uint64_t *)*v162;
      }
      while (v162);
      if (v161 == &v601) {
        goto LABEL_208;
      }
      if (v165 < v157) {
        size_t v163 = (uint64_t *)v164;
      }
      if (v157 < *((_DWORD *)v163 + 8)) {
LABEL_208:
      }
        operator new();
      do
      {
        while (1)
        {
          size_t v167 = v160;
          int v168 = *((_DWORD *)v160 + 8);
          if (v157 >= v168) {
            break;
          }
          int v160 = (uint64_t *)*v167;
          std::vector<std::string>::pointer v166 = (uint64_t **)v167;
          if (!*v167) {
            goto LABEL_215;
          }
        }
        if (v168 >= v157)
        {
          size_t v169 = v167;
          goto LABEL_219;
        }
        int v160 = (uint64_t *)v167[1];
      }
      while (v160);
      std::vector<std::string>::pointer v166 = (uint64_t **)(v167 + 1);
LABEL_215:
      size_t v169 = operator new(0x30uLL);
      *((_DWORD *)v169 + 8) = v157;
      *((void *)v169 + 5) = 0;
      *(void *)size_t v169 = 0;
      *((void *)v169 + 1) = 0;
      *((void *)v169 + 2) = v167;
      *std::vector<std::string>::pointer v166 = (uint64_t *)v169;
      uint64_t v170 = (uint64_t *)v169;
      if (*v600)
      {
        v600 = (uint64_t **)*v600;
        uint64_t v170 = *v166;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v601, v170);
      ++v602;
LABEL_219:
      uint64_t v171 = *((void *)v169 + 5);
      uint64_t v172 = *((void *)&v614 + 1);
      uint64_t v173 = *((void *)&v614 + 1) + 56 * v153;
      memset(&v610, 0, sizeof(v610));
      uint64_t v175 = *(unsigned char **)v173;
      std::string::size_type v174 = *(unsigned char **)(v173 + 8);
      int64_t v176 = v174 - v175;
      if (v174 != v175)
      {
        if (v176 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        v610.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v174 - v175);
        v610.__r_.__value_.__l.__size_ = v610.__r_.__value_.__r.__words[0];
        std::string::size_type v177 = v610.__r_.__value_.__r.__words[0] + 4 * (v176 >> 2);
        v610.__r_.__value_.__r.__words[2] = v177;
        memcpy(v610.__r_.__value_.__l.__data_, v175, v176);
        v610.__r_.__value_.__l.__size_ = v177;
      }
      uint64_t v178 = v172 + 56 * v153;
      uint64_t v181 = *(void *)(v178 + 48);
      size_t v180 = (void *)(v178 + 48);
      uint64_t v179 = v181;
      if (!v181) {
        goto LABEL_225;
      }
      if (v179 != v172 + 56 * v153 + 24) {
        break;
      }
      v612 = v611;
      (*(void (**)(void, void *))(*(void *)*v180 + 24))(*v180, v611);
LABEL_227:
      operations_research::sat::LinearProgrammingConstraint::AddCutGenerator(v171, &v610);
      if (v612 != v611)
      {
        if (v612) {
          (*(void (**)(void))(*v612 + 40))();
        }
        std::string v182 = (void *)v610.__r_.__value_.__r.__words[0];
        if (!v610.__r_.__value_.__r.__words[0]) {
          goto LABEL_192;
        }
LABEL_233:
        v610.__r_.__value_.__l.__size_ = (std::string::size_type)v182;
        operator delete(v182);
        goto LABEL_192;
      }
      (*(void (**)(void *))(v611[0] + 32))(v611);
      std::string v182 = (void *)v610.__r_.__value_.__r.__words[0];
      if (v610.__r_.__value_.__r.__words[0]) {
        goto LABEL_233;
      }
LABEL_192:
      if (++v153 == v569) {
        goto LABEL_234;
      }
    }
    uint64_t v179 = (*(uint64_t (**)(uint64_t))(*(void *)v179 + 16))(v179);
LABEL_225:
    v612 = (void *)v179;
    goto LABEL_227;
  }
LABEL_234:
  if (*(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v581)
                + 144))
  {
    BOOL v183 = v594;
    if (v594 != &v595)
    {
      do
      {
        LODWORD(v591) = *((_DWORD *)v183 + 8);
        uint64_t v184 = *(void *)gtl::FindOrDie<std::map<int,operations_research::sat::LinearProgrammingConstraint *>>((uint64_t)&v600, (int *)&v591);
        int64_t v185 = v595;
        int64_t v186 = &v595;
        uint64_t v187 = &v595;
        int v188 = (int)v591;
        if (v595)
        {
          while (1)
          {
            while (1)
            {
              int64_t v186 = (uint64_t **)v185;
              int v189 = *((_DWORD *)v185 + 8);
              if ((int)v591 >= v189) {
                break;
              }
              int64_t v185 = *v186;
              uint64_t v187 = v186;
              if (!*v186) {
                goto LABEL_245;
              }
            }
            if (v189 >= (int)v591) {
              break;
            }
            int64_t v185 = v186[1];
            if (!v185)
            {
              uint64_t v187 = v186 + 1;
              goto LABEL_245;
            }
          }
          uint64_t v190 = v186;
        }
        else
        {
LABEL_245:
          uint64_t v190 = operator new(0x40uLL);
          *((_DWORD *)v190 + 8) = v188;
          *((void *)v190 + 6) = 0;
          *((void *)v190 + 7) = 0;
          *((void *)v190 + 5) = 0;
          *(void *)uint64_t v190 = 0;
          *((void *)v190 + 1) = 0;
          *((void *)v190 + 2) = v186;
          *uint64_t v187 = (uint64_t *)v190;
          int v191 = (uint64_t *)v190;
          if (*v594)
          {
            v594 = (uint64_t **)*v594;
            int v191 = *v187;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v595, v191);
          ++v596;
        }
        operations_research::sat::CreateKnapsackCoverCutGenerator((uint64_t **)v190 + 5, (char **)(v184 + 19920), (uint64_t)v581, &v607.__r_.__value_.__l.__data_);
        operations_research::sat::LinearProgrammingConstraint::AddCutGenerator(v184, &v607);
        if (v609 == v608)
        {
          (*(void (**)(void *))(v608[0] + 32))(v608);
          uint64_t v192 = (void *)v607.__r_.__value_.__r.__words[0];
          if (!v607.__r_.__value_.__r.__words[0]) {
            goto LABEL_254;
          }
        }
        else
        {
          if (v609) {
            (*(void (**)(void))(*v609 + 40))();
          }
          uint64_t v192 = (void *)v607.__r_.__value_.__r.__words[0];
          if (!v607.__r_.__value_.__r.__words[0]) {
            goto LABEL_254;
          }
        }
        v607.__r_.__value_.__l.__size_ = (std::string::size_type)v192;
        operator delete(v192);
LABEL_254:
        uint64_t v193 = v183[1];
        if (v193)
        {
          do
          {
            int v194 = (uint64_t **)v193;
            uint64_t v193 = (uint64_t *)*v193;
          }
          while (v193);
        }
        else
        {
          do
          {
            int v194 = (uint64_t **)v183[2];
            BOOL v196 = *v194 == (uint64_t *)v183;
            BOOL v183 = v194;
          }
          while (!v196);
        }
        BOOL v183 = v194;
      }
      while (v194 != &v595);
    }
  }
  v592 = 0;
  uint64_t v593 = 0;
  v590 = 0;
  v591 = &v592;
  v588 = 0;
  v589 = 0;
  int v195 = (uint64_t *)*((void *)v575 + 15);
  BOOL v196 = v575 == (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
      || v195 == 0;
  if (v196)
  {
LABEL_267:
    int v577 = -1;
    uint64_t v197 = (operations_research::sat::LinearProgrammingConstraint **)__p;
    size_t v198 = v598;
    if (__p != v598) {
      goto LABEL_419;
    }
    goto LABEL_430;
  }
  if (*((int *)v195 + 10) < 1) {
    goto LABEL_415;
  }
  uint64_t v217 = 0;
  do
  {
    int v220 = *(_DWORD *)(v195[3] + 4 * v217);
    if (~v220 <= v220) {
      int v221 = *(_DWORD *)(v195[3] + 4 * v217);
    }
    else {
      int v221 = ~v220;
    }
    uint64_t v222 = *(_DWORD *)(*v573 + 4 * v221) ^ (v220 >> 31);
    uint64_t v223 = *(void *)(v195[6] + 8 * v217);
    int v224 = v222 + v34;
    std::string::size_type v225 = v616.__r_.__value_.__l.__size_;
    int v226 = v222 + v34;
    do
    {
      int v227 = v226;
      int v226 = *(_DWORD *)(v616.__r_.__value_.__l.__size_ + 4 * v226);
    }
    while (v227 != v226);
    int v228 = (int *)(v616.__r_.__value_.__l.__size_ + 4 * v224);
    int v229 = *v228;
    if (*v228 != v224)
    {
      do
      {
        int *v228 = v227;
        int v228 = (int *)(v225 + 4 * v229);
        BOOL v196 = v229 == *v228;
        int v229 = *v228;
      }
      while (!v196);
    }
    int v230 = v601;
    if (!v601) {
      goto LABEL_322;
    }
    BOOL v231 = &v601;
    uint64_t v232 = v601;
    do
    {
      int v233 = v232;
      int v234 = v231;
      int v235 = *((_DWORD *)v232 + 8);
      if (v235 >= v227) {
        BOOL v231 = (uint64_t **)v232;
      }
      else {
        ++v232;
      }
      uint64_t v232 = (uint64_t *)*v232;
    }
    while (v232);
    if (v231 == &v601) {
      goto LABEL_322;
    }
    if (v235 < v227) {
      int v233 = (uint64_t *)v234;
    }
    if (v227 < *((_DWORD *)v233 + 8))
    {
LABEL_322:
      uint64_t v236 = v589;
      if (v589 < v590)
      {
        *(void *)v589 = v222;
        *((void *)v236 + 1) = v223;
        uint64_t v218 = v236 + 16;
        goto LABEL_300;
      }
      size_t v237 = (char *)v588;
      uint64_t v238 = (v589 - (unsigned char *)v588) >> 4;
      unint64_t v239 = v238 + 1;
      if ((unint64_t)(v238 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v240 = v590 - (unsigned char *)v588;
      if ((v590 - (unsigned char *)v588) >> 3 > v239) {
        unint64_t v239 = v240 >> 3;
      }
      if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v241 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v241 = v239;
      }
      if (v241)
      {
        if (v241 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v242 = (char *)operator new(16 * v241);
        uint64_t v243 = &v242[16 * v238];
        *(void *)uint64_t v243 = v222;
        *((void *)v243 + 1) = v223;
        uint64_t v244 = v243;
        if (v236 == v237)
        {
LABEL_342:
          uint64_t v218 = v243 + 16;
          v588 = v244;
          v589 = v243 + 16;
          v590 = &v242[16 * v241];
          if (v236) {
LABEL_343:
          }
            operator delete(v236);
LABEL_300:
          v589 = v218;
          goto LABEL_301;
        }
      }
      else
      {
        uint64_t v242 = 0;
        uint64_t v243 = (char *)(16 * v238);
        *(void *)uint64_t v243 = v222;
        *((void *)v243 + 1) = v223;
        uint64_t v244 = (char *)(16 * v238);
        if (v236 == v237) {
          goto LABEL_342;
        }
      }
      do
      {
        *((_OWORD *)v244 - 1) = *((_OWORD *)v236 - 1);
        v244 -= 16;
        v236 -= 16;
      }
      while (v236 != v237);
      uint64_t v236 = (char *)v588;
      uint64_t v218 = v243 + 16;
      v588 = v244;
      v589 = v243 + 16;
      v590 = &v242[16 * v241];
      if (!v236) {
        goto LABEL_300;
      }
      goto LABEL_343;
    }
    do
    {
      while (1)
      {
        BOOL v245 = v230;
        int v246 = *((_DWORD *)v230 + 8);
        if (v227 < v246) {
          break;
        }
        if (v246 >= v227)
        {
          uint64_t v248 = v245;
          goto LABEL_349;
        }
        int v230 = (uint64_t *)v245[1];
        if (!v230)
        {
          int64_t v247 = (uint64_t **)(v245 + 1);
          goto LABEL_345;
        }
      }
      int v230 = (uint64_t *)*v245;
    }
    while (*v245);
    int64_t v247 = (uint64_t **)v245;
LABEL_345:
    uint64_t v248 = operator new(0x30uLL);
    *((_DWORD *)v248 + 8) = v227;
    *((void *)v248 + 5) = 0;
    *(void *)uint64_t v248 = 0;
    *((void *)v248 + 1) = 0;
    *((void *)v248 + 2) = v245;
    *int64_t v247 = (uint64_t *)v248;
    uint64_t v249 = (uint64_t *)v248;
    if (*v600)
    {
      v600 = (uint64_t **)*v600;
      uint64_t v249 = *v247;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v601, v249);
    ++v602;
LABEL_349:
    operations_research::sat::LinearProgrammingConstraint::SetObjectiveCoefficient(*((void *)v248 + 5), v222, v223);
    uint64_t v250 = v592;
    uint64_t v251 = &v592;
LABEL_351:
    unint64_t v252 = v251;
    if (v250)
    {
      while (1)
      {
        uint64_t v251 = (uint64_t **)v250;
        int v253 = *((_DWORD *)v250 + 8);
        if (v227 < v253)
        {
          uint64_t v250 = *v251;
          goto LABEL_351;
        }
        if (v253 >= v227) {
          break;
        }
        uint64_t v250 = v251[1];
        if (!v250)
        {
          unint64_t v252 = v251 + 1;
          goto LABEL_356;
        }
      }
      int v254 = v251;
      size_t v259 = v251 + 6;
      size_t v257 = v251[6];
      unint64_t v256 = (unint64_t)v259[1];
      if ((unint64_t)v257 < v256)
      {
LABEL_359:
        *size_t v257 = v222;
        v257[1] = v223;
        uint64_t v258 = v257 + 2;
        goto LABEL_377;
      }
    }
    else
    {
LABEL_356:
      int v254 = operator new(0x40uLL);
      v254[8] = v227;
      *((void *)v254 + 6) = 0;
      *((void *)v254 + 7) = 0;
      *((void *)v254 + 5) = 0;
      *(void *)int v254 = 0;
      *((void *)v254 + 1) = 0;
      *((void *)v254 + 2) = v251;
      uint64_t *v252 = (uint64_t *)v254;
      size_t v255 = (uint64_t *)v254;
      if (*v591)
      {
        v591 = (uint64_t **)*v591;
        size_t v255 = *v252;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v592, v255);
      ++v593;
      size_t v257 = (uint64_t *)*((void *)v254 + 6);
      unint64_t v256 = *((void *)v254 + 7);
      if ((unint64_t)v257 < v256) {
        goto LABEL_359;
      }
    }
    BOOL v260 = (uint64_t *)*((void *)v254 + 5);
    uint64_t v261 = ((char *)v257 - (char *)v260) >> 4;
    unint64_t v262 = v261 + 1;
    if ((unint64_t)(v261 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v263 = v256 - (void)v260;
    if (v263 >> 3 > v262) {
      unint64_t v262 = v263 >> 3;
    }
    if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v264 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v264 = v262;
    }
    if (v264)
    {
      if (v264 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v265 = (char *)operator new(16 * v264);
      uint64_t v266 = &v265[16 * v261];
      *(void *)uint64_t v266 = v222;
      *((void *)v266 + 1) = v223;
      uint64_t v267 = (uint64_t)v266;
      if (v257 != v260)
      {
        do
        {
LABEL_372:
          *(_OWORD *)(v267 - 16) = *((_OWORD *)v257 - 1);
          v267 -= 16;
          v257 -= 2;
        }
        while (v257 != v260);
        size_t v257 = (uint64_t *)*((void *)v254 + 5);
        uint64_t v258 = v266 + 16;
        *((void *)v254 + 5) = v267;
        *((void *)v254 + 6) = v266 + 16;
        *((void *)v254 + 7) = &v265[16 * v264];
        if (!v257) {
          goto LABEL_377;
        }
LABEL_376:
        operator delete(v257);
        goto LABEL_377;
      }
    }
    else
    {
      uint64_t v265 = 0;
      uint64_t v266 = (char *)(16 * v261);
      *(void *)uint64_t v266 = v222;
      *((void *)v266 + 1) = v223;
      uint64_t v267 = 16 * v261;
      if (v257 != v260) {
        goto LABEL_372;
      }
    }
    uint64_t v258 = v266 + 16;
    *((void *)v254 + 5) = v267;
    *((void *)v254 + 6) = v266 + 16;
    *((void *)v254 + 7) = &v265[16 * v264];
    if (v257) {
      goto LABEL_376;
    }
LABEL_377:
    *((void *)v254 + 6) = v258;
LABEL_301:
    ++v217;
    uint64_t v219 = *((void *)v575 + 15);
    int v195 = &operations_research::sat::_CpObjectiveProto_default_instance_;
    if (v219) {
      int v195 = (uint64_t *)*((void *)v575 + 15);
    }
  }
  while (v217 < *((int *)v195 + 10));
  uint64_t v268 = v591;
  if (v591 == &v592)
  {
    if (!v219) {
      goto LABEL_267;
    }
    goto LABEL_415;
  }
  int v269 = 0;
  while (2)
  {
    LODWORD(v585[0]) = *((_DWORD *)v268 + 8);
    uint64_t v270 = *(void *)gtl::FindOrDie<std::map<int,operations_research::sat::LinearProgrammingConstraint *>>((uint64_t)&v600, (int *)v585);
    int v272 = v271;
    uint64_t v273 = v589;
    if (v589 < v590)
    {
      *(_DWORD *)v589 = v271;
      v273[1] = 1;
      uint64_t v274 = (char *)(v273 + 2);
      goto LABEL_399;
    }
    __int16 v275 = v588;
    uint64_t v276 = (v589 - (unsigned char *)v588) >> 4;
    unint64_t v277 = v276 + 1;
    if ((unint64_t)(v276 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v278 = v590 - (unsigned char *)v588;
    if ((v590 - (unsigned char *)v588) >> 3 > v277) {
      unint64_t v277 = v278 >> 3;
    }
    if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v279 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v279 = v277;
    }
    if (v279)
    {
      if (v279 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      size_t v280 = (char *)operator new(16 * v279);
      uint64_t v281 = (uint64_t)&v280[16 * v276];
      *(_DWORD *)uint64_t v281 = v272;
      *(void *)(v281 + 8) = 1;
      size_t v282 = (char *)v281;
      if (v273 == v275)
      {
LABEL_397:
        uint64_t v284 = &v280[16 * v279];
        uint64_t v274 = (char *)(v281 + 16);
        v588 = v282;
        v589 = (char *)(v281 + 16);
        v590 = v284;
        if (v273) {
          goto LABEL_398;
        }
        goto LABEL_399;
      }
    }
    else
    {
      size_t v280 = 0;
      uint64_t v281 = 16 * v276;
      *(_DWORD *)uint64_t v281 = v272;
      *(void *)(v281 + 8) = 1;
      size_t v282 = (char *)(16 * v276);
      if (v273 == v275) {
        goto LABEL_397;
      }
    }
    do
    {
      *((_OWORD *)v282 - 1) = *((_OWORD *)v273 - 1);
      v282 -= 16;
      v273 -= 2;
    }
    while (v273 != v275);
    uint64_t v273 = v588;
    BOOL v283 = &v280[16 * v279];
    uint64_t v274 = (char *)(v281 + 16);
    v588 = v282;
    v589 = (char *)(v281 + 16);
    v590 = v283;
    if (v273) {
LABEL_398:
    }
      operator delete(v273);
LABEL_399:
    v589 = v274;
    *(_DWORD *)(v270 + 19993) = v272;
    uint64_t v285 = v268[1];
    if (v285)
    {
      do
      {
        int v286 = (uint64_t **)v285;
        uint64_t v285 = (uint64_t *)*v285;
      }
      while (v285);
    }
    else
    {
      do
      {
        int v286 = (uint64_t **)v268[2];
        BOOL v196 = *v286 == (uint64_t *)v268;
        uint64_t v268 = v286;
      }
      while (!v196);
    }
    ++v269;
    uint64_t v268 = v286;
    if (v286 != &v592) {
      continue;
    }
    break;
  }
  if (!*((void *)v575 + 15)) {
    goto LABEL_267;
  }
LABEL_415:
  uint64_t v197 = (operations_research::sat::LinearProgrammingConstraint **)__p;
  size_t v198 = v598;
  if (__p != v598)
  {
    do
    {
LABEL_419:
      int v287 = *v197;
      operations_research::sat::LinearProgrammingConstraint::RegisterWith(*v197, v581);
      if (*off_26AECFF30[0] >= 3
        && (off_26AECFF30[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFF30, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v587, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 845);
        size_t v288 = (void *)google::LogMessage::stream((google::LogMessage *)v587);
        BOOL v289 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v288, (uint64_t)"LP constraint: ", 15);
        operations_research::glop::LinearProgram::GetDimensionString((operations_research::sat::LinearProgrammingConstraint *)((char *)v287 + 360), (uint64_t)v585);
        if ((v586 & 0x80u) == 0) {
          size_t v290 = v585;
        }
        else {
          size_t v290 = (void **)v585[0];
        }
        if ((v586 & 0x80u) == 0) {
          uint64_t v291 = v586;
        }
        else {
          uint64_t v291 = (uint64_t)v585[1];
        }
        size_t v292 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v289, (uint64_t)v290, v291);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v292, (uint64_t)".", 1);
        if ((char)v586 < 0) {
          operator delete(v585[0]);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v587);
      }
      ++v197;
    }
    while (v197 != v198);
  }
LABEL_430:
  if (*off_26AECFF38[0] > 2
    && (off_26AECFF38[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFF38, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v585, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 848);
    google::LogMessage::stream((google::LogMessage *)v585);
    BOOL v293 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v293, (uint64_t)" terms in the main objective linear equation (", 46);
    uint64_t v294 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)" from LP constraints).", 22);
    google::LogMessage::~LogMessage((google::LogMessage *)v585);
  }
  if (v588)
  {
    v589 = (char *)v588;
    operator delete(v588);
  }
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v591, v592);
  std::__tree<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::__map_value_compare<int,std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>>>::destroy((uint64_t)&v594, v595);
  int v295 = v577;
  if (__p)
  {
    v598 = (operations_research::sat::LinearProgrammingConstraint **)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v600, v601);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v603, (void *)v604);
  if (*((void *)&v617 + 1))
  {
    *(void *)&long long v618 = *((void *)&v617 + 1);
    operator delete(*((void **)&v617 + 1));
  }
  if (v616.__r_.__value_.__l.__size_)
  {
    v616.__r_.__value_.__r.__words[2] = v616.__r_.__value_.__l.__size_;
    operator delete((void *)v616.__r_.__value_.__l.__size_);
  }
  operations_research::sat::LinearRelaxation::~LinearRelaxation((operations_research::sat::LinearRelaxation *)v613);
  int v584 = v577;
LABEL_443:
  if (v295 != -1)
  {
    if (*((void *)v575 + 15)) {
      uint64_t v296 = (uint64_t *)*((void *)v575 + 15);
    }
    else {
      uint64_t v296 = &operations_research::sat::_CpObjectiveProto_default_instance_;
    }
    uint64_t v297 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)v581);
    uint64_t v298 = (void *)v297;
    v8.n128_u64[0] = v296[12];
    if (v8.n128_f64[0] == 0.0) {
      v8.n128_f64[0] = 1.0;
    }
    *(void *)uint64_t v297 = v8.n128_u64[0];
    v8.n128_u64[0] = v296[11];
    *(void *)(v297 + 8) = v8.n128_u64[0];
    *(_DWORD *)(v297 + 16) = v584;
    unint64_t v299 = *((int *)v296 + 4);
    int v301 = (void *)(v297 + 24);
    uint64_t v300 = *(void *)(v297 + 24);
    unint64_t v302 = (*(void *)(v297 + 32) - v300) >> 2;
    if (v299 <= v302)
    {
      if (v299 < v302) {
        *(void *)(v297 + 32) = v300 + 4 * v299;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)(v297 + 24), v299 - v302);
    }
    uint64_t v303 = v298[6];
    unint64_t v304 = (v298[7] - v303) >> 3;
    if (v299 <= v304)
    {
      if (v299 < v304) {
        v298[7] = v303 + 8 * v299;
      }
    }
    else
    {
      std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)(v298 + 6), v299 - v304);
    }
    if (*((int *)v296 + 4) >= 1)
    {
      uint64_t v305 = 0;
      do
      {
        uint64_t v311 = v296[3];
        int v312 = *(_DWORD *)(v311 + 4 * v305);
        if (~v312 <= v312) {
          int v313 = *(_DWORD *)(v311 + 4 * v305);
        }
        else {
          int v313 = ~v312;
        }
        size_t v314 = *v574;
        *(_DWORD *)(*v301 + 4 * v305) = *((_DWORD *)*v574 + v313) ^ (v312 >> 31);
        uint64_t v315 = v296[6];
        *(void *)(v298[6] + 8 * v305) = *(void *)(v315 + 8 * v305);
        int v316 = *(_DWORD *)(v311 + 4 * v305);
        if (~v316 <= v316) {
          int v317 = *(_DWORD *)(v311 + 4 * v305);
        }
        else {
          int v317 = ~v316;
        }
        int v318 = v314[v317];
        if (v318 != -1)
        {
          uint64_t v309 = 0;
          int v319 = v318 ^ (v316 < 0) ^ (*(void *)(v315 + 8 * v305) < 1);
          unint64_t v320 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v319)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v319));
          unint64_t v321 = v298[9];
          unint64_t v310 = (v320 >> 7) ^ (v321 >> 12);
          uint64_t v322 = v298[12];
          while (1)
          {
            unint64_t v306 = v310 & v322;
            uint64_t v307 = *(void *)(v321 + v306);
            unint64_t v308 = ((v307 ^ (0x101010101010101 * (v320 & 0x7F))) - 0x101010101010101) & ~(v307 ^ (0x101010101010101 * (v320 & 0x7F))) & 0x8080808080808080;
            if (v308) {
              break;
            }
LABEL_462:
            if ((v307 & (~v307 << 6) & 0x8080808080808080) != 0)
            {
              *(_DWORD *)(v298[10]
                        + 4
                        * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::prepare_insert(v298 + 9, v320)) = v319;
              goto LABEL_473;
            }
            v309 += 8;
            unint64_t v310 = v309 + v306;
          }
          while (*(_DWORD *)(v298[10] + 4 * ((v306 + (__clz(__rbit64(v308)) >> 3)) & v322)) != v319)
          {
            v308 &= v308 - 1;
            if (!v308) {
              goto LABEL_462;
            }
          }
        }
LABEL_473:
        ++v305;
      }
      while (v305 < *((int *)v296 + 4));
    }
  }
LABEL_474:
  v323 = (uint64_t *)*((void *)v575 + 15);
  if (!v323) {
    v323 = &operations_research::sat::_CpObjectiveProto_default_instance_;
  }
  unint64_t v324 = *((int *)v323 + 16);
  if (!v324) {
    goto LABEL_663;
  }
  operations_research::Domain::FromFlatSpanOfIntervals(v323[9], v324, (unint64_t *)&v607, v8);
  uint64_t v325 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v581);
  uint64_t v326 = operations_research::sat::IntegerTrail::InitialVariableDomain(v325, v584);
  unint64_t v603 = 0;
  unint64_t v327 = *(void *)v326;
  if (*(void *)v326)
  {
    v329 = *(long long **)(v326 + 8);
    unint64_t v330 = v327 >> 1;
    if (v327 < 4)
    {
      if (v327 < 2)
      {
        unint64_t v332 = 0;
        goto LABEL_488;
      }
      v331 = &v604;
    }
    else
    {
      if (v327 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v331 = (long long *)operator new(16 * v330);
      *(void *)&long long v604 = v331;
      *((void *)&v604 + 1) = v327 >> 1;
      unint64_t v603 = 1;
    }
    do
    {
      long long v333 = *v329++;
      *v331++ = v333;
      --v330;
    }
    while (v330);
    unint64_t v332 = v603;
LABEL_488:
    unint64_t v603 = v332 + (v327 & 0xFFFFFFFFFFFFFFFELL);
    v328 = off_26AECFF08[0];
    if (*off_26AECFF08[0] >= 3) {
      goto LABEL_489;
    }
    goto LABEL_492;
  }
  unint64_t v603 = *(void *)v326;
  long long v604 = *(_OWORD *)(v326 + 8);
  v328 = off_26AECFF08[0];
  if (*off_26AECFF08[0] < 3) {
    goto LABEL_492;
  }
LABEL_489:
  if (v328 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)off_26AECFF08, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3))
  {
    uint64_t v334 = google::LogMessage::LogMessage((google::LogMessage *)v613, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1344);
    uint64_t v335 = (void *)google::LogMessage::stream(v334);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v335, (uint64_t)"Objective offset:", 17);
    v336 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v336, (uint64_t)" scaling_factor:", 16);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v613);
  }
LABEL_492:
  if (*off_26AECFF10[0] >= 3
    && (off_26AECFF10[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFF10, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    uint64_t v337 = google::LogMessage::LogMessage((google::LogMessage *)v613, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1346);
    v338 = (void *)google::LogMessage::stream(v337);
    v339 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v338, (uint64_t)"Automatic internal objective domain: ", 37);
    operations_research::operator<<(v339, &v603);
    google::LogMessage::~LogMessage((google::LogMessage *)v613);
  }
  if (*off_26AECFF18[0] >= 3
    && (off_26AECFF18[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFF18, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    v340 = google::LogMessage::LogMessage((google::LogMessage *)v613, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1347);
    v341 = (void *)google::LogMessage::stream(v340);
    v342 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v341, (uint64_t)"User specified internal objective domain: ", 42);
    operations_research::operator<<(v342, (unint64_t *)&v607);
    google::LogMessage::~LogMessage((google::LogMessage *)v613);
  }
  if (v584 == -1) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>((int)&v584, (int)&operations_research::sat::kNoIntegerVariable, "objective_var != kNoIntegerVariable");
  }
  uint64_t v343 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v581);
  int v344 = v584;
  std::string::size_type v582 = 0;
  std::string::size_type v345 = v607.__r_.__value_.__r.__words[0];
  if ((v607.__r_.__value_.__s.__data_[0] & 1) == 0)
  {
    std::string::size_type v582 = v607.__r_.__value_.__r.__words[0];
    *(_OWORD *)v583 = *(_OWORD *)&v607.__r_.__value_.__r.__words[1];
    goto LABEL_512;
  }
  v346 = (long long *)v607.__r_.__value_.__l.__size_;
  std::string::size_type v347 = v607.__r_.__value_.__r.__words[0] >> 1;
  if (v607.__r_.__value_.__r.__words[0] < 4)
  {
    if (v607.__r_.__value_.__r.__words[0] >= 2)
    {
      v348 = v583;
      goto LABEL_509;
    }
    std::string::size_type v349 = 0;
  }
  else
  {
    if (v607.__r_.__value_.__r.__words[0] >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v348 = operator new(16 * v347);
    v583[0] = v348;
    v583[1] = (void *)(v345 >> 1);
    std::string::size_type v582 = 1;
    do
    {
LABEL_509:
      long long v350 = *v346++;
      *v348++ = v350;
      --v347;
    }
    while (v347);
    std::string::size_type v349 = v582;
  }
  std::string::size_type v582 = v349 + (v345 & 0xFFFFFFFFFFFFFFFELL);
LABEL_512:
  char updated = operations_research::sat::IntegerTrail::UpdateInitialDomain(v343, v344, (operations_research::Domain *)&v582);
  if (v582) {
    operator delete(v583[0]);
  }
  if (updated)
  {
    if (operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v603, (const operations_research::Domain *)&v607))goto LABEL_657; {
    memset(v613, 0, 24);
    }
    memset(&v616, 0, sizeof(v616));
    if (*((void *)v575 + 15)) {
      v352 = (uint64_t *)*((void *)v575 + 15);
    }
    else {
      v352 = &operations_research::sat::_CpObjectiveProto_default_instance_;
    }
    char v578 = updated;
    if (*((int *)v352 + 4) <= 0)
    {
      v400 = 0;
      uint64_t v399 = 0;
      v353 = 0;
      goto LABEL_592;
    }
    v353 = 0;
    uint64_t v354 = 0;
    while (1)
    {
      int v355 = *(_DWORD *)(v352[3] + 4 * v354);
      if (~v355 <= v355) {
        int v356 = *(_DWORD *)(v352[3] + 4 * v354);
      }
      else {
        int v356 = ~v355;
      }
      int v357 = *((_DWORD *)*v574 + v356) ^ (v355 >> 31);
      v358 = *(char **)&v613[8];
      if (*(void *)&v613[8] < *(void *)&v613[16])
      {
        **(_DWORD **)&v613[8] = v357;
        uint64_t v359 = (uint64_t)(v358 + 4);
        goto LABEL_546;
      }
      v360 = *(char **)v613;
      uint64_t v361 = (uint64_t)(*(void *)&v613[8] - *(void *)v613) >> 2;
      unint64_t v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v363 = *(void *)&v613[16] - *(void *)v613;
      if ((uint64_t)(*(void *)&v613[16] - *(void *)v613) >> 1 > v362) {
        unint64_t v362 = v363 >> 1;
      }
      unint64_t v364 = (unint64_t)v363 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v362;
      if (v364) {
        break;
      }
      v365 = 0;
      v366 = (int *)(4 * v361);
      *(_DWORD *)(4 * v361) = v357;
      uint64_t v359 = 4 * v361 + 4;
      if (v358 != v360) {
        goto LABEL_538;
      }
LABEL_544:
      *(void *)v613 = v366;
      *(void *)&v613[8] = v359;
      *(void *)&v613[16] = &v365[4 * v364];
      if (v360)
      {
        operator delete(v360);
        v353 = (char *)v616.__r_.__value_.__l.__size_;
      }
LABEL_546:
      *(void *)&v613[8] = v359;
      uint64_t v376 = *(void *)(v352[6] + 8 * v354);
      if ((unint64_t)v353 < v616.__r_.__value_.__r.__words[2])
      {
        *(void *)v353 = v376;
        v353 += 8;
        v616.__r_.__value_.__l.__size_ = (std::string::size_type)v353;
        if (++v354 >= *((int *)v352 + 4)) {
          goto LABEL_586;
        }
        continue;
      }
      v377 = (char *)v616.__r_.__value_.__r.__words[0];
      uint64_t v378 = (uint64_t)&v353[-v616.__r_.__value_.__r.__words[0]] >> 3;
      unint64_t v379 = v378 + 1;
      if ((unint64_t)(v378 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int64_t v380 = v616.__r_.__value_.__r.__words[2] - v616.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v616.__r_.__value_.__r.__words[2] - v616.__r_.__value_.__r.__words[0]) >> 2 > v379) {
        unint64_t v379 = v380 >> 2;
      }
      if ((unint64_t)v380 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v381 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v381 = v379;
      }
      if (v381)
      {
        if (v381 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v382 = operator new(8 * v381);
        v383 = &v382[8 * v378];
        void *v383 = v376;
        std::string::size_type v384 = (std::string::size_type)(v383 + 1);
        if (v353 == v377) {
          goto LABEL_561;
        }
      }
      else
      {
        v382 = 0;
        v383 = (void *)(8 * v378);
        *(void *)(8 * v378) = v376;
        std::string::size_type v384 = 8 * v378 + 8;
        if (v353 == v377) {
          goto LABEL_561;
        }
      }
      unint64_t v385 = v353 - 8 - v377;
      if (v385 >= 0x168)
      {
        if (&v382[v353 - v377 - 8 - (v385 & 0xFFFFFFFFFFFFFFF8)] > &v382[v353 - v377 - 8])
        {
          v386 = v353;
        }
        else if (&v353[-(v385 & 0xFFFFFFFFFFFFFFF8) - 8] > v353 - 8)
        {
          v386 = v353;
        }
        else if ((unint64_t)(v377 - v382) >= 0x20)
        {
          uint64_t v388 = (v385 >> 3) + 1;
          uint64_t v389 = 8 * (v388 & 0x3FFFFFFFFFFFFFFCLL);
          v386 = &v353[-v389];
          v383 = (void *)((char *)v383 - v389);
          v390 = &v382[8 * v378 - 16];
          v391 = v353 - 16;
          uint64_t v392 = v388 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v393 = *(_OWORD *)v391;
            *(v390 - 1) = *((_OWORD *)v391 - 1);
            _OWORD *v390 = v393;
            v390 -= 2;
            v391 -= 32;
            v392 -= 4;
          }
          while (v392);
          if (v388 == (v388 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_561;
          }
        }
        else
        {
          v386 = v353;
        }
      }
      else
      {
        v386 = v353;
      }
      do
      {
        uint64_t v387 = *((void *)v386 - 1);
        v386 -= 8;
        *--v383 = v387;
      }
      while (v386 != v377);
LABEL_561:
      v616.__r_.__value_.__r.__words[0] = (std::string::size_type)v383;
      v616.__r_.__value_.__l.__size_ = v384;
      v616.__r_.__value_.__r.__words[2] = (std::string::size_type)&v382[8 * v381];
      if (v377) {
        operator delete(v377);
      }
      v353 = (char *)v384;
      v616.__r_.__value_.__l.__size_ = v384;
      if (++v354 >= *((int *)v352 + 4))
      {
LABEL_586:
        uint64_t v399 = *(void *)&v613[16];
        v400 = *(char **)&v613[8];
        if (*(void *)&v613[8] < *(void *)&v613[16])
        {
          **(_DWORD **)&v613[8] = v584;
          v401 = v400 + 4;
          goto LABEL_624;
        }
LABEL_592:
        v403 = *(char **)v613;
        uint64_t v404 = (uint64_t)&v400[-*(void *)v613] >> 2;
        unint64_t v405 = v404 + 1;
        if ((unint64_t)(v404 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v406 = v399 - *(void *)v613;
        if (v406 >> 1 > v405) {
          unint64_t v405 = v406 >> 1;
        }
        if ((unint64_t)v406 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v407 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v407 = v405;
        }
        if (v407)
        {
          if (v407 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v408 = operator new(4 * v407);
        }
        else
        {
          v408 = 0;
        }
        v409 = (int *)&v408[4 * v404];
        v410 = &v408[4 * v407];
        int *v409 = v584;
        v401 = v409 + 1;
        if (v400 != v403)
        {
          unint64_t v411 = v400 - v403 - 4;
          if (v411 < 0x2C)
          {
            v412 = v400;
            goto LABEL_621;
          }
          if ((unint64_t)(v403 - v408) < 0x20)
          {
            v412 = v400;
            goto LABEL_621;
          }
          uint64_t v413 = (v411 >> 2) + 1;
          uint64_t v414 = 4 * (v413 & 0x7FFFFFFFFFFFFFF8);
          v412 = &v400[-v414];
          v409 = (int *)((char *)v409 - v414);
          v415 = &v408[4 * v404 - 16];
          v416 = v400 - 16;
          uint64_t v417 = v413 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v418 = *(_OWORD *)v416;
            *(v415 - 1) = *((_OWORD *)v416 - 1);
            _OWORD *v415 = v418;
            v415 -= 2;
            v416 -= 32;
            v417 -= 8;
          }
          while (v417);
          if (v413 != (v413 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_621:
              int v419 = *((_DWORD *)v412 - 1);
              v412 -= 4;
              *--v409 = v419;
            }
            while (v412 != v403);
          }
        }
        *(void *)v613 = v409;
        *(void *)&v613[8] = v401;
        *(void *)&v613[16] = v410;
        if (v403)
        {
          operator delete(v403);
          v353 = (char *)v616.__r_.__value_.__l.__size_;
        }
LABEL_624:
        *(void *)&v613[8] = v401;
        if ((unint64_t)v353 < v616.__r_.__value_.__r.__words[2])
        {
          *(void *)v353 = -1;
          std::string::size_type v420 = (std::string::size_type)(v353 + 8);
          goto LABEL_647;
        }
        v421 = (char *)v616.__r_.__value_.__r.__words[0];
        uint64_t v422 = (uint64_t)&v353[-v616.__r_.__value_.__r.__words[0]] >> 3;
        unint64_t v423 = v422 + 1;
        if ((unint64_t)(v422 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v424 = v616.__r_.__value_.__r.__words[2] - v616.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v616.__r_.__value_.__r.__words[2] - v616.__r_.__value_.__r.__words[0]) >> 2 > v423) {
          unint64_t v423 = v424 >> 2;
        }
        if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v425 = v423;
        }
        if (v425)
        {
          if (v425 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v426 = operator new(8 * v425);
        }
        else
        {
          v426 = 0;
        }
        v427 = &v426[8 * v422];
        std::string::size_type v428 = (std::string::size_type)&v426[8 * v425];
        void *v427 = -1;
        std::string::size_type v420 = (std::string::size_type)(v427 + 1);
        if (v353 != v421)
        {
          unint64_t v429 = v353 - v421 - 8;
          if (v429 < 0x58)
          {
            v430 = v353;
            goto LABEL_644;
          }
          if ((unint64_t)(v421 - v426) < 0x20)
          {
            v430 = v353;
            goto LABEL_644;
          }
          uint64_t v431 = (v429 >> 3) + 1;
          uint64_t v432 = 8 * (v431 & 0x3FFFFFFFFFFFFFFCLL);
          v430 = &v353[-v432];
          v427 = (void *)((char *)v427 - v432);
          v433 = &v426[8 * v422 - 16];
          v434 = v353 - 16;
          uint64_t v435 = v431 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v436 = *(_OWORD *)v434;
            *(v433 - 1) = *((_OWORD *)v434 - 1);
            _OWORD *v433 = v436;
            v433 -= 2;
            v434 -= 32;
            v435 -= 4;
          }
          while (v435);
          if (v431 != (v431 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_644:
              uint64_t v437 = *((void *)v430 - 1);
              v430 -= 8;
              *--v427 = v437;
            }
            while (v430 != v421);
          }
        }
        v616.__r_.__value_.__r.__words[0] = (std::string::size_type)v427;
        v616.__r_.__value_.__l.__size_ = v420;
        v616.__r_.__value_.__r.__words[2] = v428;
        if (v421) {
          operator delete(v421);
        }
LABEL_647:
        v616.__r_.__value_.__l.__size_ = v420;
        operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)v613, (uint64_t)&v616, 0, v605);
        v610.__r_.__value_.__r.__words[0] = (std::string::size_type)v581;
        if (!v606) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void *, std::string *))(*v606 + 48))(v606, &v610);
        char updated = v578;
        if (v606 == v605)
        {
          (*(void (**)(void *))(v605[0] + 32))(v605);
        }
        else if (v606)
        {
          (*(void (**)(void))(*v606 + 40))();
        }
        if (v616.__r_.__value_.__r.__words[0])
        {
          v616.__r_.__value_.__l.__size_ = v616.__r_.__value_.__r.__words[0];
          operator delete(v616.__r_.__value_.__l.__data_);
        }
        v398 = *(void **)v613;
        if (*(void *)v613)
        {
          *(void *)&v613[8] = *(void *)v613;
LABEL_656:
          operator delete(v398);
        }
        goto LABEL_657;
      }
    }
    if (v364 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v365 = operator new(4 * v364);
    v366 = (int *)&v365[4 * v361];
    int *v366 = v357;
    uint64_t v359 = (uint64_t)(v366 + 1);
    if (v358 == v360) {
      goto LABEL_544;
    }
LABEL_538:
    unint64_t v367 = v358 - 4 - v360;
    if (v367 < 0x2C) {
      goto LABEL_911;
    }
    if ((unint64_t)(v360 - v365) < 0x20) {
      goto LABEL_911;
    }
    uint64_t v368 = (v367 >> 2) + 1;
    uint64_t v369 = 4 * (v368 & 0x7FFFFFFFFFFFFFF8);
    v370 = &v358[-v369];
    v366 = (int *)((char *)v366 - v369);
    v371 = &v365[4 * v361 - 16];
    v372 = v358 - 16;
    uint64_t v373 = v368 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v374 = *(_OWORD *)v372;
      *(v371 - 1) = *((_OWORD *)v372 - 1);
      _OWORD *v371 = v374;
      v371 -= 2;
      v372 -= 32;
      v373 -= 8;
    }
    while (v373);
    v358 = v370;
    if (v368 != (v368 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_911:
      do
      {
        int v375 = *((_DWORD *)v358 - 1);
        v358 -= 4;
        *--v366 = v375;
      }
      while (v358 != v360);
    }
    goto LABEL_544;
  }
  if (*off_26AECFF20[0] >= 2
    && (off_26AECFF20[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFF20, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)2)))
  {
    v394 = google::LogMessage::LogMessage((google::LogMessage *)v613, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1352);
    v395 = (void *)google::LogMessage::stream(v394);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v395, (uint64_t)"UNSAT due to the objective domain.", 34);
    google::LogMessage::~LogMessage((google::LogMessage *)v613);
  }
  *((unsigned char *)v571 + 496) = 1;
  uint64_t v396 = *((unsigned __int8 *)v581 + 23);
  if ((v396 & 0x80u) == 0) {
    v397 = v581;
  }
  else {
    v397 = *(operations_research::sat::Model **)v581;
  }
  if ((v396 & 0x80u) != 0) {
    uint64_t v396 = *((void *)v581 + 1);
  }
  *(void *)v613 = v397;
  *(void *)&v613[8] = v396;
  v616.__r_.__value_.__r.__words[0] = (std::string::size_type)" [loading]";
  v616.__r_.__value_.__l.__size_ = 10;
  absl::lts_2020_02_25::StrCat((uint64_t)v613, (uint64_t)&v616, &v610);
  operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)a2, (absl::lts_2020_02_25::Mutex *)&v610);
  if (SHIBYTE(v610.__r_.__value_.__r.__words[2]) < 0)
  {
    v398 = (void *)v610.__r_.__value_.__r.__words[0];
    goto LABEL_656;
  }
LABEL_657:
  if (v603)
  {
    operator delete((void *)v604);
    if ((v607.__r_.__value_.__s.__data_[0] & 1) == 0) {
      goto LABEL_659;
    }
  }
  else if ((v607.__r_.__value_.__s.__data_[0] & 1) == 0)
  {
LABEL_659:
    if ((updated & 1) == 0) {
      return;
    }
    goto LABEL_663;
  }
  operator delete((void *)v607.__r_.__value_.__l.__size_);
  if ((updated & 1) == 0) {
    return;
  }
LABEL_663:
  if ((operations_research::sat::SatSolver::FinishPropagation(v571) & 1) == 0)
  {
    *((unsigned char *)v571 + 496) = 1;
    uint64_t v453 = *((unsigned __int8 *)v581 + 23);
    if ((v453 & 0x80u) == 0) {
      v454 = v581;
    }
    else {
      v454 = *(operations_research::sat::Model **)v581;
    }
    if ((v453 & 0x80u) != 0) {
      uint64_t v453 = *((void *)v581 + 1);
    }
    *(void *)v613 = v454;
    *(void *)&v613[8] = v453;
    v616.__r_.__value_.__r.__words[0] = (std::string::size_type)" [loading]";
    v616.__r_.__value_.__l.__size_ = 10;
    absl::lts_2020_02_25::StrCat((uint64_t)v613, (uint64_t)&v616, &v610);
    operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)a2, (absl::lts_2020_02_25::Mutex *)&v610);
    goto LABEL_688;
  }
  if (v575 != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
    && *((void *)v575 + 15))
  {
    uint64_t v438 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v581);
    v613[23] = 4;
    strcpy(v613, "init");
    operations_research::sat::SharedResponseManager::UpdateInnerObjectiveBounds((uint64_t)a2, (absl::lts_2020_02_25::Mutex *)v613, *(void *)(*(void *)(v438 + 40) + 12 * v584), -*(void *)(*(void *)(v438 + 40) + 12 * (v584 ^ 1)));
    v439 = v568;
    if ((v613[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v613);
      v439 = v568;
    }
    v440 = *(void **)v439;
    if (!*(void *)v439) {
      goto LABEL_679;
    }
    v441 = v439;
    do
    {
      unint64_t v442 = v440[4];
      BOOL v443 = v442 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v442 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        v444 = v440;
      }
      else {
        v444 = v440 + 1;
      }
      if (v443) {
        v441 = (char *)v440;
      }
      v440 = (void *)*v444;
    }
    while (*v444);
    if (v441 != v439
      && *((void *)v441 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
    {
      uint64_t v445 = *((void *)v441 + 5);
    }
    else
    {
LABEL_679:
      uint64_t v445 = 0;
    }
    uint64_t v446 = v584;
    v447 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)v581);
    v448 = (char *)operator new(0x28uLL);
    *(void *)v448 = &unk_26F0C1A18;
    *((void *)v448 + 1) = v446;
    *((void *)v448 + 2) = v445;
    *((void *)v448 + 3) = a2;
    *((void *)v448 + 4) = v581;
    *(void *)&v613[24] = v448;
    unint64_t v449 = v447[66];
    if (v449 < v447[67])
    {
      v450 = (void (**)(void *))&unk_26F0C1A18;
      v451 = (char *)operator new(0x28uLL);
      *(void *)v451 = &unk_26F0C1A18;
      long long v452 = *(_OWORD *)(v448 + 24);
      *(_OWORD *)(v451 + 8) = *(_OWORD *)(v448 + 8);
      *(_OWORD *)(v451 + 24) = v452;
      *(void *)(v449 + 24) = v451;
      v447[66] = v449 + 32;
      goto LABEL_693;
    }
    uint64_t v456 = std::vector<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::__push_back_slow_path<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)> const&>(v447 + 65, v613);
    v448 = *(char **)&v613[24];
    v447[66] = v456;
    if (v448 == v613)
    {
      (*(void (**)(unsigned char *))(*(void *)v613 + 32))(v613);
    }
    else if (v448)
    {
      v450 = *(void (***)(void *))v448;
LABEL_693:
      v450[5](v448);
    }
    if (*(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v581)
                  + 426))
    {
      uint64_t v457 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v581);
      uint64_t v458 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v581);
      uint64_t v459 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)v581);
      if (*((char *)v581 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v607, *(const std::string::value_type **)v581, *((void *)v581 + 1));
      }
      else {
        std::string v607 = *(std::string *)v581;
      }
      if (SHIBYTE(v607.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)v613, v607.__r_.__value_.__l.__data_, v607.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)v613 = v607;
      }
      *(void *)&v613[24] = v457;
      *(void *)&v613[32] = v458;
      *(void *)&long long v614 = v459;
      *((void *)&v614 + 1) = a2;
      v460 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>((uint64_t)v581);
      if ((v613[23] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&v616, *(const std::string::value_type **)v613, *(std::string::size_type *)&v613[8]);
      }
      else {
        std::string v616 = *(std::string *)v613;
      }
      long long v617 = *(_OWORD *)&v613[24];
      long long v618 = v614;
      v611[0] = 0;
      v461 = (char *)operator new(0x40uLL);
      *(void *)v461 = &unk_26F0C1A98;
      v462 = (std::string *)(v461 + 8);
      if (SHIBYTE(v616.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v462, v616.__r_.__value_.__l.__data_, v616.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v462->__r_.__value_.__l.__data_ = *(_OWORD *)&v616.__r_.__value_.__l.__data_;
        *((void *)v461 + 3) = *((void *)&v616.__r_.__value_.__l + 2);
      }
      long long v463 = v618;
      *((_OWORD *)v461 + 2) = v617;
      *((_OWORD *)v461 + 3) = v463;
      v611[0] = v461;
      unint64_t v464 = v460[1];
      if (v464 >= v460[2])
      {
        uint64_t v465 = std::vector<std::function<BOOL ()(void)>>::__push_back_slow_path<std::function<BOOL ()(void)>>(v460, &v610);
        v466 = (std::string *)v611[0];
        v460[1] = v465;
        if (v466 == &v610)
        {
          (*(void (**)(std::string *))(v610.__r_.__value_.__r.__words[0] + 32))(&v610);
        }
        else if (v466)
        {
          (*(void (**)(std::string *))(v466->__r_.__value_.__r.__words[0] + 40))(v466);
        }
      }
      else
      {
        *(void *)(v464 + 24) = v461;
        v611[0] = 0;
        v460[1] = v464 + 32;
      }
      if (SHIBYTE(v616.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v616.__r_.__value_.__l.__data_);
        if ((v613[23] & 0x80000000) != 0) {
          goto LABEL_784;
        }
LABEL_717:
        if (SHIBYTE(v607.__r_.__value_.__r.__words[2]) < 0) {
LABEL_785:
        }
          operator delete(v607.__r_.__value_.__l.__data_);
      }
      else
      {
        if ((v613[23] & 0x80000000) == 0) {
          goto LABEL_717;
        }
LABEL_784:
        operator delete(*(void **)v613);
        if (SHIBYTE(v607.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_785;
        }
      }
    }
  }
  uint64_t v467 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v581);
  v579 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingDispatcher>((uint64_t)v581);
  uint64_t v468 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LPVariables>((uint64_t)v581);
  uint64_t v469 = -1431655765 * ((*(void *)(v467 + 48) - *(void *)(v467 + 40)) >> 2);
  if ((int)v469 >= 1)
  {
    uint64_t v470 = v468;
    unint64_t v471 = 0;
    v472 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
    do
    {
      v475 = v574[12];
      if (v471 >= ((unsigned char *)v574[13] - (unsigned char *)v475) >> 2) {
        int v476 = -1;
      }
      else {
        int v476 = v475[v471];
      }
      uint64_t v477 = 0;
      unint64_t v478 = ((((unint64_t)v472 + v471) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                                  * ((void)v472 + v471));
      uint64_t v479 = v579[1];
      unint64_t v480 = (v478 >> 7) ^ (*v579 >> 12);
      uint64_t v481 = v579[3];
      uint64_t v482 = 0x101010101010101 * (v478 & 0x7F);
      while (1)
      {
        uint64_t v483 = v480 & v481;
        uint64_t v484 = *(void *)(*v579 + v483);
        unint64_t v485 = ((v484 ^ v482) - 0x101010101010101) & ~(v484 ^ v482) & 0x8080808080808080;
        if (v485) {
          break;
        }
LABEL_733:
        if ((v484 & (~v484 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_736;
        }
        v477 += 8;
        unint64_t v480 = v477 + v483;
      }
      while (1)
      {
        unint64_t v486 = (v483 + (__clz(__rbit64(v485)) >> 3)) & v481;
        if (v471 == *(_DWORD *)(v479 + 16 * v486)) {
          break;
        }
        v485 &= v485 - 1;
        if (!v485) {
          goto LABEL_733;
        }
      }
      if (v486 == v481)
      {
LABEL_736:
        uint64_t v487 = 0;
        if (v476 < 0) {
          goto LABEL_725;
        }
        goto LABEL_739;
      }
      uint64_t v487 = *(void *)(v479 + 16 * v486 + 8);
      if (v476 < 0) {
        goto LABEL_725;
      }
LABEL_739:
      v489 = *(char **)(v470 + 8);
      unint64_t v488 = *(void *)(v470 + 16);
      if ((unint64_t)v489 < v488)
      {
        *(_DWORD *)v489 = v471;
        *((void *)v489 + 1) = v487;
        v473 = v489 + 24;
        *((_DWORD *)v489 + 4) = v476;
      }
      else
      {
        uint64_t v490 = v469;
        v491 = v472;
        v492 = *(char **)v470;
        unint64_t v493 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v489[-*(void *)v470] >> 3);
        unint64_t v494 = v493 + 1;
        if (v493 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v495 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v488 - (void)v492) >> 3);
        if (2 * v495 > v494) {
          unint64_t v494 = 2 * v495;
        }
        if (v495 >= 0x555555555555555) {
          unint64_t v496 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v496 = v494;
        }
        if (v496)
        {
          if (v496 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v497 = (char *)operator new(24 * v496);
        }
        else
        {
          v497 = 0;
        }
        v498 = &v497[24 * v493];
        *(_DWORD *)v498 = v471;
        *((void *)v498 + 1) = v487;
        *((_DWORD *)v498 + 4) = v476;
        v499 = v498;
        v472 = v491;
        if (v489 != v492)
        {
          do
          {
            long long v500 = *(_OWORD *)(v489 - 24);
            *((_DWORD *)v499 - 2) = *((_DWORD *)v489 - 2);
            *(_OWORD *)(v499 - 24) = v500;
            v499 -= 24;
            v489 -= 24;
          }
          while (v489 != v492);
          v489 = *(char **)v470;
        }
        uint64_t v469 = v490;
        v501 = &v497[24 * v496];
        v473 = v498 + 24;
        *(void *)uint64_t v470 = v499;
        *(void *)(v470 + 8) = v498 + 24;
        *(void *)(v470 + 16) = v501;
        if (v489) {
          operator delete(v489);
        }
      }
      *(void *)(v470 + 8) = v473;
      if (*(_DWORD *)(v470 + 24) <= v476 + 1) {
        int v474 = v476 + 1;
      }
      else {
        int v474 = *(_DWORD *)(v470 + 24);
      }
      *(_DWORD *)(v470 + 24) = v474;
LABEL_725:
      v471 += 2;
    }
    while ((int)v471 < (int)v469);
  }
  uint64_t v502 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristics>((uint64_t)v581);
  operations_research::sat::ConstructSearchStrategy((uint64_t)v575, v574, v584, (uint64_t)v581, (uint64_t)v613);
  v504 = (uint64_t *)(v502 + 80);
  uint64_t v503 = *(void *)(v502 + 80);
  uint64_t v505 = v502 + 56;
  *(void *)(v502 + 80) = 0;
  if (v503 == v502 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)v505 + 32))(v502 + 56);
    v506 = *(unsigned char **)&v613[24];
    v507 = (void *)(v502 + 80);
    if (!*(void *)&v613[24]) {
      goto LABEL_764;
    }
  }
  else
  {
    if (v503) {
      (*(void (**)(uint64_t))(*(void *)v503 + 40))(v503);
    }
    v506 = *(unsigned char **)&v613[24];
    v507 = (void *)(v502 + 80);
    if (!*(void *)&v613[24])
    {
LABEL_764:
      void *v507 = 0;
      goto LABEL_766;
    }
  }
  if (v506 != v613)
  {
    v507 = &v613[24];
    uint64_t *v504 = (uint64_t)v506;
    goto LABEL_764;
  }
  uint64_t *v504 = v505;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v613 + 24))(v613, v502 + 56);
LABEL_766:
  if (*(unsigned char **)&v613[24] == v613)
  {
    (*(void (**)(unsigned char *))(*(void *)v613 + 32))(v613);
    v508 = off_26AECFF28[0];
    if (*off_26AECFF28[0] <= 2) {
      goto LABEL_791;
    }
LABEL_772:
    if (v508 == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_26AECFF28, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3))
    {
      goto LABEL_791;
    }
    operations_research::sat::InstrumentSearchStrategy((char *)v575, v574, v502 + 56, (uint64_t)v581, (uint64_t)v613);
    uint64_t v509 = *v504;
    uint64_t *v504 = 0;
    if (v509 == v505)
    {
      (*(void (**)(uint64_t))(*(void *)v505 + 32))(v502 + 56);
      v510 = *(unsigned char **)&v613[24];
      if (!*(void *)&v613[24]) {
        goto LABEL_782;
      }
    }
    else
    {
      if (v509) {
        (*(void (**)(uint64_t))(*(void *)v509 + 40))(v509);
      }
      v510 = *(unsigned char **)&v613[24];
      if (!*(void *)&v613[24]) {
        goto LABEL_782;
      }
    }
    if (v510 == v613)
    {
      uint64_t *v504 = v505;
      (*(void (**)(unsigned char *, uint64_t))(*(void *)v613 + 24))(v613, v502 + 56);
LABEL_787:
      if (*(unsigned char **)&v613[24] == v613)
      {
        (*(void (**)(unsigned char *))(*(void *)v613 + 32))(v613);
      }
      else if (*(void *)&v613[24])
      {
        (*(void (**)(void))(**(void **)&v613[24] + 40))();
      }
      goto LABEL_791;
    }
    uint64_t *v504 = (uint64_t)v510;
    v504 = (uint64_t *)&v613[24];
LABEL_782:
    uint64_t *v504 = 0;
    goto LABEL_787;
  }
  if (*(void *)&v613[24]) {
    (*(void (**)(void))(**(void **)&v613[24] + 40))();
  }
  v508 = off_26AECFF28[0];
  if (*off_26AECFF28[0] > 2) {
    goto LABEL_772;
  }
LABEL_791:
  uint64_t v580 = v502;
  memset(&v616, 0, sizeof(v616));
  memset(&v610, 0, sizeof(v610));
  v511 = (uint64_t *)*((void *)v575 + 16);
  if (!v511) {
    v511 = &operations_research::sat::_PartialVariableAssignment_default_instance_;
  }
  v512 = v574;
  if (*((int *)v511 + 4) >= 1)
  {
    for (uint64_t k = 0; k < *((int *)v511 + 4); ++k)
    {
      unint64_t v515 = *(unsigned int *)(v511[3] + 4 * k);
      if ((v515 & 0x80000000) != 0)
      {
        v564 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v613, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1436);
        v565 = (void *)google::LogMessage::stream(v564);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v565, (uint64_t)"Check failed: RefIsPositive(ref) ", 33);
        goto LABEL_880;
      }
      int v516 = *((_DWORD *)v512[6] + v515);
      if (v516 == -1)
      {
        uint64_t v518 = *((unsigned int *)*v512 + v515) ^ (v515 >> 31);
        unsigned int v517 = -1;
        std::string::size_type v519 = v616.__r_.__value_.__r.__words[2];
        v520 = (void *)v616.__r_.__value_.__l.__size_;
        if (v616.__r_.__value_.__l.__size_ < v616.__r_.__value_.__r.__words[2])
        {
LABEL_803:
          void *v520 = v517 | (unint64_t)(v518 << 32);
          std::string::size_type v521 = (std::string::size_type)(v520 + 1);
          goto LABEL_825;
        }
      }
      else
      {
        unsigned int v517 = (2 * v516) >> 1;
        uint64_t v518 = 0xFFFFFFFFLL;
        std::string::size_type v519 = v616.__r_.__value_.__r.__words[2];
        v520 = (void *)v616.__r_.__value_.__l.__size_;
        if (v616.__r_.__value_.__l.__size_ < v616.__r_.__value_.__r.__words[2]) {
          goto LABEL_803;
        }
      }
      std::string::size_type v522 = v616.__r_.__value_.__r.__words[0];
      uint64_t v523 = (uint64_t)((uint64_t)v520 - v616.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v524 = v523 + 1;
      if ((unint64_t)(v523 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v525 = v519 - v616.__r_.__value_.__r.__words[0];
      if (v525 >> 2 > v524) {
        unint64_t v524 = v525 >> 2;
      }
      if ((unint64_t)v525 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v526 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v526 = v524;
      }
      if (v526)
      {
        if (v526 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v527 = (char *)operator new(8 * v526);
      }
      else
      {
        v527 = 0;
      }
      v528 = (unint64_t *)&v527[8 * v523];
      unint64_t *v528 = v517 | (unint64_t)(v518 << 32);
      std::string::size_type v521 = (std::string::size_type)(v528 + 1);
      if (v520 != (void *)v522)
      {
        unint64_t v529 = (unint64_t)v520 - v522 - 8;
        if (v529 < 0x58) {
          goto LABEL_912;
        }
        if (v522 - (unint64_t)v527 < 0x20) {
          goto LABEL_912;
        }
        uint64_t v530 = (v529 >> 3) + 1;
        uint64_t v531 = 8 * (v530 & 0x3FFFFFFFFFFFFFFCLL);
        v532 = &v520[v531 / 0xFFFFFFFFFFFFFFF8];
        v528 = (unint64_t *)((char *)v528 - v531);
        v533 = &v527[8 * v523 - 16];
        v534 = (long long *)(v520 - 2);
        uint64_t v535 = v530 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v536 = *v534;
          *((_OWORD *)v533 - 1) = *(v534 - 1);
          *(_OWORD *)v533 = v536;
          v533 -= 32;
          v534 -= 2;
          v535 -= 4;
        }
        while (v535);
        v520 = v532;
        if (v530 != (v530 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_912:
          do
          {
            unint64_t v537 = *--v520;
            *--v528 = v537;
          }
          while (v520 != (void *)v522);
        }
        v520 = (void *)v616.__r_.__value_.__r.__words[0];
      }
      v616.__r_.__value_.__r.__words[0] = (std::string::size_type)v528;
      v616.__r_.__value_.__l.__size_ = v521;
      v616.__r_.__value_.__r.__words[2] = (std::string::size_type)&v527[8 * v526];
      if (v520) {
        operator delete(v520);
      }
LABEL_825:
      v616.__r_.__value_.__l.__size_ = v521;
      v538 = (uint64_t *)*((void *)v575 + 16);
      if (v538) {
        v539 = (uint64_t *)*((void *)v575 + 16);
      }
      else {
        v539 = &operations_research::sat::_PartialVariableAssignment_default_instance_;
      }
      uint64_t v540 = *(void *)(v539[6] + 8 * k);
      std::string::size_type v541 = v610.__r_.__value_.__l.__size_;
      if (v610.__r_.__value_.__l.__size_ >= v610.__r_.__value_.__r.__words[2])
      {
        v542 = (void *)v610.__r_.__value_.__r.__words[0];
        std::string::size_type v543 = v610.__r_.__value_.__l.__size_ - v610.__r_.__value_.__r.__words[0];
        uint64_t v544 = (uint64_t)(v610.__r_.__value_.__l.__size_ - v610.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v545 = v544 + 1;
        if ((unint64_t)(v544 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v546 = v610.__r_.__value_.__r.__words[2] - v610.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v610.__r_.__value_.__r.__words[2] - v610.__r_.__value_.__r.__words[0]) >> 2 > v545) {
          unint64_t v545 = v546 >> 2;
        }
        if ((unint64_t)v546 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v547 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v547 = v545;
        }
        if (v547)
        {
          if (v547 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v548 = (char *)operator new(8 * v547);
          v549 = &v548[8 * v544];
          *(void *)v549 = v540;
          std::string::size_type v514 = (std::string::size_type)(v549 + 8);
          if ((void *)v541 != v542)
          {
LABEL_838:
            unint64_t v550 = v541 - 8 - (void)v542;
            if (v550 < 0x58)
            {
              v512 = v574;
              goto LABEL_846;
            }
            unint64_t v551 = v541 - (void)&v548[v543];
            v512 = v574;
            if (v551 < 0x20) {
              goto LABEL_913;
            }
            uint64_t v552 = (v550 >> 3) + 1;
            uint64_t v553 = 8 * (v552 & 0x3FFFFFFFFFFFFFFCLL);
            std::string::size_type v554 = v541 - v553;
            v549 -= v553;
            v555 = &v548[8 * v544 - 16];
            v556 = (long long *)(v541 - 16);
            uint64_t v557 = v552 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v558 = *v556;
              *((_OWORD *)v555 - 1) = *(v556 - 1);
              *(_OWORD *)v555 = v558;
              v555 -= 32;
              v556 -= 2;
              v557 -= 4;
            }
            while (v557);
            std::string::size_type v541 = v554;
            if (v552 != (v552 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_913:
              do
              {
LABEL_846:
                uint64_t v559 = *(void *)(v541 - 8);
                v541 -= 8;
                *((void *)v549 - 1) = v559;
                v549 -= 8;
              }
              while ((void *)v541 != v542);
            }
LABEL_847:
            v610.__r_.__value_.__r.__words[0] = (std::string::size_type)v549;
            v610.__r_.__value_.__l.__size_ = v514;
            v610.__r_.__value_.__r.__words[2] = (std::string::size_type)&v548[8 * v547];
            if (v542)
            {
              operator delete(v542);
              v538 = (uint64_t *)*((void *)v575 + 16);
            }
            goto LABEL_796;
          }
        }
        else
        {
          v548 = 0;
          v549 = (char *)(8 * v544);
          *(void *)(8 * v544) = v540;
          std::string::size_type v514 = 8 * v544 + 8;
          if ((void *)v541 != v542) {
            goto LABEL_838;
          }
        }
        v512 = v574;
        goto LABEL_847;
      }
      *(void *)v610.__r_.__value_.__l.__size_ = v540;
      std::string::size_type v514 = v541 + 8;
LABEL_796:
      v610.__r_.__value_.__l.__size_ = v514;
      if (v538) {
        v511 = v538;
      }
      else {
        v511 = &operations_research::sat::_PartialVariableAssignment_default_instance_;
      }
    }
  }
  operations_research::sat::FollowHint((uint64_t)&v616, (uint64_t)&v610, (uint64_t)v581, (uint64_t)v613);
  v561 = (uint64_t *)(v580 + 112);
  uint64_t v560 = *(void *)(v580 + 112);
  uint64_t v562 = v580 + 88;
  *(void *)(v580 + 112) = 0;
  if (v560 == v580 + 88)
  {
    (*(void (**)(uint64_t))(*(void *)v562 + 32))(v562);
    v563 = *(unsigned char **)&v613[24];
    if (!*(void *)&v613[24]) {
      goto LABEL_857;
    }
  }
  else
  {
    if (v560) {
      (*(void (**)(uint64_t))(*(void *)v560 + 40))(v560);
    }
    v563 = *(unsigned char **)&v613[24];
    if (!*(void *)&v613[24])
    {
LABEL_857:
      uint64_t *v561 = 0;
      goto LABEL_859;
    }
  }
  if (v563 != v613)
  {
    uint64_t *v561 = (uint64_t)v563;
    v561 = (uint64_t *)&v613[24];
    goto LABEL_857;
  }
  uint64_t *v561 = v562;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v613 + 24))(v613, v562);
LABEL_859:
  if (*(unsigned char **)&v613[24] == v613)
  {
    (*(void (**)(unsigned char *))(*(void *)v613 + 32))(v613);
    if (!*(unsigned char *)(v572 + 147)) {
      goto LABEL_872;
    }
LABEL_865:
    if (*((char *)v581 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v607, *(const std::string::value_type **)v581, *((void *)v581 + 1));
    }
    else {
      std::string v607 = *(std::string *)v581;
    }
    *(void *)v613 = v575;
    *(void *)&v613[8] = v581;
    if (SHIBYTE(v607.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)&v613[16], v607.__r_.__value_.__l.__data_, v607.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&v613[16] = v607;
    }
    *(void *)&long long v614 = a2;
    operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)v581);
    operator new();
  }
  if (*(void *)&v613[24]) {
    (*(void (**)(void))(**(void **)&v613[24] + 40))();
  }
  if (*(unsigned char *)(v572 + 147)) {
    goto LABEL_865;
  }
LABEL_872:
  if (v610.__r_.__value_.__r.__words[0])
  {
    v610.__r_.__value_.__l.__size_ = v610.__r_.__value_.__r.__words[0];
    operator delete(v610.__r_.__value_.__l.__data_);
  }
  v455 = (void *)v616.__r_.__value_.__r.__words[0];
  if (v616.__r_.__value_.__r.__words[0])
  {
    v616.__r_.__value_.__l.__size_ = v616.__r_.__value_.__r.__words[0];
LABEL_876:
    operator delete(v455);
  }
}

void sub_23CC84E88()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 240));
}

void sub_23CC84E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,void *__p,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a56) {
    operator delete(__p);
  }
  if (a67)
  {
    operator delete(a68);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::Get<operations_research::sat::SatSolver>(uint64_t a1)
{
  uint64_t v12 = 0;
  unint64_t v3 = *(void **)(a1 + 32);
  int v1 = (void *)(a1 + 32);
  uint64_t v2 = v3;
  if (!v3) {
    return 0;
  }
  BOOL v4 = v1;
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      BOOL v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == v1) {
    return 0;
  }
  unint64_t v8 = v4[4];
  std::string v9 = v4 + 5;
  uint64_t v10 = &v12;
  if (v8 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d) {
    uint64_t v10 = v9;
  }
  return *v10;
}

void operations_research::sat::anonymous namespace'::QuickSolveWithHint(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedResponseManager *a3, operations_research::sat::Model *a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  BOOL v4 = this == (operations_research::sat::_anonymous_namespace_ *)&operations_research::sat::_CpModelProto_default_instance_
    || *((void *)this + 16) == 0;
  if (v4 || operations_research::sat::SharedResponseManager::ProblemIsSolved(a2, a2)) {
    return;
  }
  unint64_t v8 = (int8x8_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v32, (const operations_research::sat::SatParameters *)v8);
  v8[36] = (int8x8_t)v8[68].i32[1];
  v8[15].i32[1] = 6;
  v8[2] = vorr_s8(v8[2], (int8x8_t)0x4000000080040000);
  v8[18].i8[3] = 0;
  std::string __p = v8;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v27, (const operations_research::sat::SatParameters *)v32);
  char v29 = 1;
  uint64_t v30 = (operations_research::sat::SatParameters *)v8;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v31, (const operations_research::sat::SatParameters *)v27);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v27);
  operations_research::sat::ConfigureSearchHeuristics(a3, v9);
  uint64_t v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a3);
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v10, (int *)this + 22, (char **)&__p);
  int v11 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, a3);
  if (__p)
  {
    v27[0] = __p;
    operator delete(__p);
  }
  if (v11 == 2)
  {
    operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)&__p, 0);
    uint64_t v13 = *((unsigned __int8 *)a3 + 23);
    if ((v13 & 0x80u) == 0) {
      unint64_t v14 = a3;
    }
    else {
      unint64_t v14 = *(operations_research::sat::SharedResponseManager **)a3;
    }
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *((void *)a3 + 1);
    }
    *(void *)&v37[0] = v14;
    *((void *)&v37[0] + 1) = v13;
    uint64_t v35 = " [hint]";
    uint64_t v36 = 7;
    absl::lts_2020_02_25::StrCat((uint64_t)v37, (uint64_t)&v35, &__str);
    BOOL v15 = (google::protobuf::Arena *)(v27[0] & 0xFFFFFFFFFFFFFFFELL);
    if (v27[0])
    {
      BOOL v15 = *(google::protobuf::Arena **)v15;
      uint64_t v16 = v28;
      if (v28 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v16 = v28;
      if (v28 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_16:
        std::string::operator=(v16, &__str);
LABEL_19:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        operations_research::sat::SharedResponseManager::NewSolution(a2, (const operations_research::sat::CpSolverResponse *)&__p, a3);
        if (*((void *)this + 15))
        {
          int v17 = *(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)a3)
                          + 16);
          unint64_t v18 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
          operations_research::sat::SatSolver::Backtrack(v18, 0);
          uint64_t v19 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
          uint64_t InnerObjectiveUpperBound = operations_research::sat::SharedResponseManager::GetInnerObjectiveUpperBound(a2, v20);
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
          if (InnerObjectiveUpperBound >= (uint64_t)0x8000000000000002) {
            uint64_t v22 = -InnerObjectiveUpperBound;
          }
          LODWORD(v37[0]) = v17 ^ 1;
          *(void *)((char *)v37 + 4) = v22;
          if ((operations_research::sat::IntegerTrail::Enqueue(v19, *(uint64_t *)&v37[0], SHIDWORD(v22), 0, 0, 0, 0) & 1) == 0)
          {
            uint64_t v23 = *((unsigned __int8 *)a3 + 23);
            if ((v23 & 0x80u) == 0) {
              int64_t v24 = a3;
            }
            else {
              int64_t v24 = *(operations_research::sat::SharedResponseManager **)a3;
            }
            if ((v23 & 0x80u) != 0) {
              uint64_t v23 = *((void *)a3 + 1);
            }
            *(void *)&v37[0] = v24;
            *((void *)&v37[0] + 1) = v23;
            uint64_t v35 = " [hint]";
            uint64_t v36 = 7;
            absl::lts_2020_02_25::StrCat((uint64_t)v37, (uint64_t)&v35, &__str);
            operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)a2, (absl::lts_2020_02_25::Mutex *)&__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            operations_research::sat::SharedResponseManager::SetStatsFromModel(a2, a3);
          }
        }
        else if (v8[16].i8[1])
        {
          operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(v33);
          *(void *)&v37[0] = a3;
          if (!v34) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(void *, _OWORD *))(*v34 + 48))(v34, v37);
          if (v34 == v33)
          {
            (*(void (**)(void *))(v33[0] + 32))(v33);
          }
          else if (v34)
          {
            (*(void (**)(void))(*v34 + 40))();
          }
        }
        operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&__p);
        goto LABEL_40;
      }
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(&v28, v15, (long long *)&__str);
    goto LABEL_19;
  }
LABEL_40:
  if (v29)
  {
    char v29 = 0;
    operations_research::sat::SatParameters::CopyFrom(v30, (const operations_research::sat::SatParameters *)v31);
  }
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v31);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v32);
}

void sub_23CC85810(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, ...)
{
  va_start(va, a8);
  if (a8 < 0) {
    operator delete(__p);
  }
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedResponseManager *a3, operations_research::sat::Model *a4)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  std::string::size_type v60 = a3;
  size_t v61 = a2;
  if (!operations_research::sat::SharedResponseManager::ProblemIsSolved(a2, a2))
  {
    *(void *)&long long v58 = this;
    *((void *)&v58 + 1) = &v60;
    *(void *)&long long v59 = a3;
    *((void *)&v59 + 1) = &v61;
    operations_research::sat::ConfigureSearchHeuristics(a3, v6);
    uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v60);
    uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v60);
    if (this != (operations_research::sat::_anonymous_namespace_ *)&operations_research::sat::_CpModelProto_default_instance_
      && *((void *)this + 15))
    {
      unsigned int v54 = *(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)v60)
                      + 16);
      if (v54 == -1) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>((int)&v54, (int)&operations_research::sat::kNoIntegerVariable, "objective_var != kNoIntegerVariable");
      }
      if (*(unsigned char *)(v8 + 147))
      {
        if (*(unsigned char *)(v8 + 128))
        {
          std::string v9 = (char *)operator new(0x28uLL);
          *(void *)std::string v9 = &unk_26F0C1CF8;
          long long v10 = v59;
          *(_OWORD *)(v9 + 8) = v58;
          *(_OWORD *)(v9 + 24) = v10;
          int v64 = (void **)v9;
          operations_research::sat::MinimizeWithHittingSetAndLazyEncoding();
        }
        int v44 = (void *)*((void *)v60 + 4);
        if (!v44) {
          goto LABEL_80;
        }
        int v45 = (void *)((char *)v60 + 32);
        do
        {
          unint64_t v46 = v44[4];
          BOOL v47 = v46 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d;
          if (v46 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d) {
            int v48 = v44;
          }
          else {
            int v48 = v44 + 1;
          }
          if (v47) {
            int v45 = v44;
          }
          int v44 = (void *)*v48;
        }
        while (*v48);
        if (v45 != (void *)((char *)v60 + 32)
          && v45[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d)
        {
          int v49 = (operations_research::sat::CoreBasedOptimizer *)v45[5];
        }
        else
        {
LABEL_80:
          int v49 = 0;
        }
        if (operations_research::sat::CoreBasedOptimizer::Optimize(v49) - 1 > 1) {
          goto LABEL_89;
        }
        goto LABEL_88;
      }
      unint64_t v14 = v54;
      if ((*(_DWORD *)(v8 + 412) & 0x80000000) == 0)
      {
        BOOL v15 = (char *)operator new(0x28uLL);
        *(void *)BOOL v15 = &unk_26F0C1CF8;
        long long v16 = v59;
        *(_OWORD *)(v15 + 8) = v58;
        *(_OWORD *)(v15 + 24) = v16;
        int v64 = (void **)v15;
        operations_research::sat::RestrictObjectiveDomainWithBinarySearch(v14, (uint64_t)&__p, v60);
        if (v64 == &__p)
        {
          (*((void (**)(void **))__p + 4))(&__p);
        }
        else if (v64)
        {
          (*((void (**)(void))*v64 + 5))();
        }
        LODWORD(v14) = v54;
      }
      int v50 = (char *)operator new(0x28uLL);
      *(void *)int v50 = &unk_26F0C1CF8;
      long long v51 = v59;
      *(_OWORD *)(v50 + 8) = v58;
      *(_OWORD *)(v50 + 24) = v51;
      int v64 = (void **)v50;
      int v52 = operations_research::sat::MinimizeIntegerVariableWithLinearScanAndLazyEncoding(v14, (uint64_t)&__p, v60);
      if (v64 == &__p)
      {
        (*((void (**)(void **))__p + 4))(&__p);
      }
      else if (v64)
      {
        (*((void (**)(void))*v64 + 5))();
        if ((v52 - 1) <= 1) {
          goto LABEL_88;
        }
        goto LABEL_89;
      }
      if ((v52 - 1) <= 1) {
LABEL_88:
      }
        operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v61, a3);
LABEL_89:
      operations_research::sat::SharedResponseManager::SetStatsFromModel(v61, v60);
      return;
    }
    int v11 = (int *)((char *)this + 88);
    while (1)
    {
      operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v7, v11, (char **)&__p);
      int v12 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, v60);
      if (__p)
      {
        size_t v63 = (int *)__p;
        operator delete(__p);
      }
      if (v12 != 2) {
        break;
      }
      if (!*(unsigned char *)(v8 + 129)) {
        goto LABEL_89;
      }
      uint64_t v13 = v60;
      operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(v65);
      std::string __p = v13;
      if (!v66) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *, void **))(*v66 + 48))(v66, &__p);
      if (v66 == v65)
      {
        (*(void (**)(void *))(v65[0] + 32))(v65);
      }
      else if (v66)
      {
        (*(void (**)(void))(*v66 + 40))();
      }
    }
    if (v12)
    {
      if (v12 == 1) {
        operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v61, a3);
      }
      goto LABEL_89;
    }
    operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v61, a3);
    int v17 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v60);
    operations_research::sat::SatSolver::GetLastIncompatibleDecisions(v17, &__p);
    operations_research::sat::MinimizeCoreWithPropagation(v17, (const void **)&__p);
    BOOL v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v19 = (int *)__p;
    unint64_t v18 = v63;
    if (__p == v63)
    {
LABEL_65:
      operations_research::sat::SharedResponseManager::AddUnsatCore((uint64_t)v61, (absl::lts_2020_02_25::Mutex *)&v55);
      if (v55)
      {
        uint64_t v56 = (uint64_t)v55;
        operator delete(v55);
      }
      if (__p)
      {
        size_t v63 = (int *)__p;
        operator delete(__p);
      }
      goto LABEL_89;
    }
    double v20 = 0;
    int v53 = v63;
    while (1)
    {
      int v21 = *v19;
      unint64_t v22 = (uint64_t)*v19 >> 1;
      uint64_t v23 = *(void *)(v7 + 72);
      if (v22 >= (*(void *)(v7 + 80) - v23) >> 2)
      {
        int v24 = -1;
        char v25 = v57;
        if (v20 < v57)
        {
LABEL_45:
          *v20++ = v24;
          uint64_t v56 = (uint64_t)v20;
          if ((v21 & 1) == 0) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
      }
      else
      {
        int v24 = *(_DWORD *)(v23 + 4 * v22);
        char v25 = v57;
        if (v20 < v57) {
          goto LABEL_45;
        }
      }
      signed int v26 = (int *)v55;
      int64_t v27 = (char *)v20 - (unsigned char *)v55;
      uint64_t v28 = ((char *)v20 - (unsigned char *)v55) >> 2;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = (char *)v25 - (unsigned char *)v55;
      if (v30 >> 1 > v29) {
        unint64_t v29 = v30 >> 1;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        if (v31 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v32 = operator new(4 * v31);
        uint64_t v33 = (int *)&v32[4 * v28];
        int *v33 = v24;
        uint64_t v34 = (uint64_t)(v33 + 1);
        if (v20 == v26) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (int *)(4 * v28);
        *(_DWORD *)(4 * v28) = v24;
        uint64_t v34 = 4 * v28 + 4;
        if (v20 == v26) {
          goto LABEL_51;
        }
      }
      unint64_t v35 = (char *)(v20 - 1) - (char *)v26;
      if (v35 < 0xBC)
      {
        uint64_t v36 = v20;
        goto LABEL_50;
      }
      if (&v32[v27 - 4 - (v35 & 0xFFFFFFFFFFFFFFFCLL)] > &v32[v27 - 4])
      {
        uint64_t v36 = v20;
        do
        {
LABEL_50:
          int v37 = *--v36;
          *--uint64_t v33 = v37;
        }
        while (v36 != v26);
        goto LABEL_51;
      }
      if ((int *)((char *)v20 - (v35 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v20 - 1)
      {
        uint64_t v36 = v20;
        goto LABEL_50;
      }
      if ((unint64_t)((char *)v20 - v32 - v27) < 0x20)
      {
        uint64_t v36 = v20;
        goto LABEL_50;
      }
      uint64_t v38 = (v35 >> 2) + 1;
      uint64_t v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v36 = &v20[v39 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v33 = (int *)((char *)v33 - v39);
      uint64_t v40 = &v32[4 * v28 - 16];
      std::string::size_type v41 = v20 - 4;
      uint64_t v42 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v43 = *(_OWORD *)v41;
        *(v40 - 1) = *((_OWORD *)v41 - 1);
        _OWORD *v40 = v43;
        v40 -= 2;
        v41 -= 8;
        v42 -= 8;
      }
      while (v42);
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_50;
      }
LABEL_51:
      BOOL v55 = v33;
      uint64_t v56 = v34;
      uint64_t v57 = (int *)&v32[4 * v31];
      if (v26) {
        operator delete(v26);
      }
      double v20 = (int *)v34;
      unint64_t v18 = v53;
      uint64_t v56 = v34;
      if ((v21 & 1) == 0) {
        goto LABEL_31;
      }
LABEL_30:
      *(v20 - 1) = ~*(v20 - 1);
LABEL_31:
      if (++v19 == v18) {
        goto LABEL_65;
      }
    }
  }
}

void sub_23CC86030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC86038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC8604C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21)
  {
    operator delete(a21);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<long long>::vector<long long const*,0>(void *a1, unsigned char *a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v6 = (char *)operator new(a3 - a2);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[8 * (v4 >> 3)];
    a1[2] = v7;
    memcpy(v6, a2, v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_23CC86160(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SharedResponseManager::~SharedResponseManager(void **this)
{
  if (*((char *)this + 519) < 0)
  {
    operator delete(this[62]);
    uint64_t v2 = (char *)this[59];
    if (!v2) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v2 = (char *)this[59];
    if (!v2) {
      goto LABEL_14;
    }
  }
  unint64_t v3 = (char *)this[60];
  int64_t v4 = v2;
  if (v3 != v2)
  {
    unint64_t v5 = v3 - 32;
    BOOL v6 = v3 - 32;
    do
    {
      uint64_t v8 = (char *)*((void *)v6 + 3);
      if (v6 == v8)
      {
        (*(void (**)(char *))(*(void *)v6 + 32))(v6);
      }
      else if (v8)
      {
        (*(void (**)(char *))(*(void *)v8 + 40))(v8);
      }
      uint64_t v7 = v6 - 8;
      v6 -= 40;
      v5 -= 40;
    }
    while (v7 != v2);
    int64_t v4 = (char *)this[59];
  }
  this[60] = v2;
  operator delete(v4);
LABEL_14:
  operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(this + 38);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)(this + 7));
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)(this + 4));
}

void *std::function<BOOL ()(operations_research::sat::CpSolverResponse *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void ***std::unique_ptr<operations_research::sat::PresolveContext>::~unique_ptr[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::PresolveContext::~PresolveContext(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::SolveWithParameters(operations_research::sat *this@<X0>, const operations_research::sat::CpModelProto *a2@<X1>, operations_research::sat::CpSolverResponse *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  v13[1] = 0;
  v13[0] = 0;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v14 = 0;
  BOOL v15 = v16;
  uint64_t v19 = 0;
  std::string __p = 0;
  unint64_t v18 = 0;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v20, a2);
  unint64_t v22 = 0;
  BOOL v6 = operator new(0x248uLL);
  *BOOL v6 = &unk_26F0C1DB0;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v6 + 1), (const operations_research::sat::SatParameters *)v20);
  unint64_t v22 = v6;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v20);
  v20[0] = v13;
  (*(void (**)(void **__return_ptr, void *, void *))(*v6 + 48))(v12, v6, v20);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v12);
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
  }
  else if (v22)
  {
    (*(void (**)(void *))(*v22 + 40))(v22);
  }
  operations_research::sat::SolveCpModel(this, (const operations_research::sat::CpModelProto *)v13, a3);
  uint64_t v7 = __p;
  if (__p)
  {
    uint64_t v8 = v18;
    std::string v9 = __p;
    if (v18 != __p)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        void *v8 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
      while (v8 != v7);
      std::string v9 = __p;
    }
    unint64_t v18 = v7;
    operator delete(v9);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v15, v16[0]);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void sub_23CC8656C(_Unwind_Exception *a1)
{
  std::function<operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::~function((void *)(v1 - 88));
  operations_research::sat::Model::~Model((operations_research::sat::Model *)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_23CC86588(_Unwind_Exception *a1)
{
  operator delete(v1);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&STACK[0x288]);
  operations_research::sat::Model::~Model((operations_research::sat::Model *)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_23CC865B4(_Unwind_Exception *a1)
{
}

uint64_t absl::cleanup_internal::Storage<std::function<void ()(void)>>::operator=(uint64_t a1, uint64_t a2)
{
  v12[1] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    if (v5 == a2 + 8)
    {
      v12[0] = v11;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 24))(v5, v11);
    }
    else
    {
      v12[0] = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    v12[0] = 0;
  }
  uint64_t v7 = (void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = a1 + 8;
  *(void *)(a1 + 32) = 0;
  if (v6 == a1 + 8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 32))(a1 + 8);
    std::string v9 = (void *)v12[0];
    if (!v12[0])
    {
LABEL_17:
      void *v7 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
    }
    std::string v9 = (void *)v12[0];
    if (!v12[0]) {
      goto LABEL_17;
    }
  }
  if (v9 != v11)
  {
    void *v7 = v9;
    uint64_t v7 = v12;
    goto LABEL_17;
  }
  void *v7 = v8;
  (*(void (**)(void *, uint64_t))(v11[0] + 24))(v11, a1 + 8);
LABEL_19:
  if ((void *)v12[0] == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12[0])
  {
    (*(void (**)(void))(*(void *)v12[0] + 40))();
  }
  return a1;
}

void sub_23CC86800(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

operations_research::sat::DratProofHandler **std::unique_ptr<operations_research::sat::DratProofHandler>::~unique_ptr[abi:ne180100](operations_research::sat::DratProofHandler **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::DratProofHandler::~DratProofHandler(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

operations_research::sat::SatSolver **std::unique_ptr<operations_research::sat::SatSolver>::~unique_ptr[abi:ne180100](operations_research::sat::SatSolver **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::SatSolver::~SatSolver(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::DratProofHandler::~DratProofHandler(operations_research::sat::DratProofHandler *this)
{
  uint64_t v2 = (operations_research::sat::DratWriter *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2)
  {
    operations_research::sat::DratWriter::~DratWriter(v2);
    MEMORY[0x23ECF2BC0]();
  }
  unint64_t v3 = (operations_research::sat::DratChecker *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    operations_research::sat::DratChecker::~DratChecker(v3);
    MEMORY[0x23ECF2BC0]();
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
}

void operations_research::sat::DratChecker::~DratChecker(operations_research::sat::DratChecker *this)
{
  uint64_t v2 = (void *)*((void *)this + 45);
  if (v2)
  {
    *((void *)this + 46) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 41);
  if (v3)
  {
    *((void *)this + 42) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 38);
  if (v4)
  {
    *((void *)this + 39) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 35);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 36);
    uint64_t v7 = (void *)*((void *)this + 35);
    if (v6 != v5)
    {
      uint64_t v8 = *((void *)this + 36);
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        std::string v9 = v10;
        if (v10)
        {
          *(void *)(v6 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v6 = v8;
      }
      while (v8 != v5);
      uint64_t v7 = (void *)*((void *)this + 35);
    }
    *((void *)this + 36) = v5;
    operator delete(v7);
  }
  uint64_t v11 = (void *)*((void *)this + 32);
  if (v11)
  {
    *((void *)this + 33) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 29);
  if (v12)
  {
    *((void *)this + 30) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 26);
  if (v13)
  {
    *((void *)this + 27) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 20);
  if (v14)
  {
    *((void *)this + 21) = v14;
    operator delete(v14);
  }
  BOOL v15 = (void *)*((void *)this + 16);
  if (v15)
  {
    *((void *)this + 17) = v15;
    operator delete(v15);
  }
  long long v16 = (void *)*((void *)this + 12);
  if (v16)
  {
    *((void *)this + 13) = v16;
    operator delete(v16);
  }
  if (*((void *)this + 7))
  {
    operator delete(*((void **)this + 4));
    *((void *)this + 9) = 0;
    *((void *)this + 4) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
  }
  int v17 = (void *)*((void *)this + 8);
  if (v17) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v17);
  }
  uint64_t v18 = *((void *)this + 1);
  if (v18)
  {
    uint64_t v19 = *((void *)this + 2);
    double v20 = (void *)*((void *)this + 1);
    if (v19 != v18)
    {
      do
      {
        int v21 = *(void **)(v19 - 32);
        if (v21)
        {
          *(void *)(v19 - 24) = v21;
          operator delete(v21);
        }
        v19 -= 56;
      }
      while (v19 != v18);
      double v20 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v18;
    operator delete(v20);
  }
}

operations_research::sat::SharedBoundsManager **std::unique_ptr<operations_research::sat::SharedBoundsManager>::~unique_ptr[abi:ne180100](operations_research::sat::SharedBoundsManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::SharedBoundsManager::~SharedBoundsManager(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void **std::unique_ptr<operations_research::sat::SharedRelaxationSolutionRepository>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(v2);
    MEMORY[0x23ECF2BC0](v3, 0x1030C408E1DFBA0);
  }
  return a1;
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SharedRelaxationSolutionRepository>(uint64_t *result, uint64_t *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = (uint64_t **)(result + 4);
  uint64_t v4 = (uint64_t *)result[4];
  if (v4)
  {
    uint64_t v6 = result + 4;
    uint64_t v7 = (void *)result[4];
    do
    {
      unint64_t v8 = v7[4];
      BOOL v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      if (v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = (void *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      uint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        int v12 = (uint64_t **)v4;
        unint64_t v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d) {
          break;
        }
        uint64_t v4 = *v12;
        uint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_19;
        }
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d) {
        break;
      }
      uint64_t v4 = v12[1];
      if (!v4)
      {
        uint64_t v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    int v12 = (uint64_t **)(result + 4);
LABEL_19:
    uint64_t v14 = (uint64_t *)v12;
    int v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d;
    v12[5] = 0;
    *int v12 = 0;
    v12[1] = 0;
    void v12[2] = v14;
    *uint64_t v5 = (uint64_t *)v12;
    uint64_t v15 = *(void *)v3[3];
    long long v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      long long v16 = *v5;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_23CC86C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SharedLPSolutionRepository>(uint64_t *result, uint64_t *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = (uint64_t **)(result + 4);
  uint64_t v4 = (uint64_t *)result[4];
  if (v4)
  {
    uint64_t v6 = result + 4;
    uint64_t v7 = (void *)result[4];
    do
    {
      unint64_t v8 = v7[4];
      BOOL v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      if (v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = (void *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      uint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        int v12 = (uint64_t **)v4;
        unint64_t v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d) {
          break;
        }
        uint64_t v4 = *v12;
        uint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_19;
        }
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d) {
        break;
      }
      uint64_t v4 = v12[1];
      if (!v4)
      {
        uint64_t v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    int v12 = (uint64_t **)(result + 4);
LABEL_19:
    uint64_t v14 = (uint64_t *)v12;
    int v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d;
    v12[5] = 0;
    *int v12 = 0;
    v12[1] = 0;
    void v12[2] = v14;
    *uint64_t v5 = (uint64_t *)v12;
    uint64_t v15 = *(void *)v3[3];
    long long v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      long long v16 = *v5;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_23CC86DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ***std::unique_ptr<operations_research::sat::SharedIncompleteSolutionManager>::~unique_ptr[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)(v2 + 3));
    unint64_t v3 = (char *)*v2;
    if (*v2)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = *v2;
      if (v4 != v3)
      {
        uint64_t v6 = (char *)v2[1];
        do
        {
          unint64_t v8 = (void *)*((void *)v6 - 3);
          v6 -= 24;
          uint64_t v7 = v8;
          if (v8)
          {
            *((void *)v4 - 2) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        uint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1020C4016EE4530);
  }
  return a1;
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SharedIncompleteSolutionManager>(uint64_t *result, uint64_t *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = (uint64_t **)(result + 4);
  uint64_t v4 = (uint64_t *)result[4];
  if (v4)
  {
    uint64_t v6 = result + 4;
    uint64_t v7 = (void *)result[4];
    do
    {
      unint64_t v8 = v7[4];
      BOOL v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      if (v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = (void *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      uint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        int v12 = (uint64_t **)v4;
        unint64_t v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d) {
          break;
        }
        uint64_t v4 = *v12;
        uint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_19;
        }
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d) {
        break;
      }
      uint64_t v4 = v12[1];
      if (!v4)
      {
        uint64_t v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    int v12 = (uint64_t **)(result + 4);
LABEL_19:
    uint64_t v14 = (uint64_t *)v12;
    int v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d;
    v12[5] = 0;
    *int v12 = 0;
    v12[1] = 0;
    void v12[2] = v14;
    *uint64_t v5 = (uint64_t *)v12;
    uint64_t v15 = *(void *)v3[3];
    long long v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      long long v16 = *v5;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_23CC86FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::~vector[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::SharedBoundsManager::~SharedBoundsManager(operations_research::sat::SharedBoundsManager *this)
{
  uint64_t v2 = (void **)((char *)this + 200);
  std::deque<operations_research::SparseBitset<long long>>::clear((void *)this + 25);
  unint64_t v3 = (void **)*((void *)this + 26);
  uint64_t v4 = (void **)*((void *)this + 27);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    uint64_t v7 = *((void *)this + 26);
    uint64_t v6 = *((void *)this + 27);
    if (v6 != v7) {
      *((void *)this + 27) = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*v2) {
    operator delete(*v2);
  }
  unint64_t v8 = (void *)*((void *)this + 22);
  if (v8)
  {
    *((void *)this + 23) = v8;
    operator delete(v8);
  }
  BOOL v9 = (void *)*((void *)this + 19);
  if (v9)
  {
    *((void *)this + 20) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 16);
  if (v10)
  {
    *((void *)this + 17) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 10);
  if (v11)
  {
    *((void *)this + 11) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 6);
  if (v12)
  {
    *((void *)this + 7) = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)*((void *)this + 3);
  if (v13)
  {
    *((void *)this + 4) = v13;
    operator delete(v13);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SharedBoundsManager *)((char *)this + 16));
}

void std::deque<operations_research::SparseBitset<long long>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 < 0x11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  unint64_t v4 = a1[4];
  uint64_t v5 = &v2[v4 / 0x33];
  uint64_t v6 = (char *)*v5 + 80 * (v4 % 0x33);
  unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x33] + 80 * ((a1[5] + v4) % 0x33);
  if (v6 != (char *)v7)
  {
    do
    {
      unint64_t v8 = (void *)*((void *)v6 + 7);
      if (v8)
      {
        *((void *)v6 + 8) = v8;
        operator delete(v8);
      }
      BOOL v9 = (void *)*((void *)v6 + 1);
      if (v9)
      {
        *((void *)v6 + 2) = v9;
        operator delete(v9);
      }
      v6 += 80;
      if (v6 - (unsigned char *)*v5 == 4080)
      {
        uint64_t v10 = (char *)v5[1];
        ++v5;
        uint64_t v6 = v10;
      }
    }
    while (v6 != (char *)v7);
    uint64_t v2 = (void **)a1[1];
    unint64_t v3 = (void **)a1[2];
  }
  a1[5] = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v2);
      uint64_t v12 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = v12 - (void)v2;
    }
    while (v11 > 0x10);
  }
LABEL_14:
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 25;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 51;
  }
  a1[4] = v13;
}

uint64_t operations_research::sat::SharedSolutionRepository<long long>::SharedSolutionRepository(uint64_t result, int a2)
{
  *(_OWORD *)(result + 8) = 0u;
  *(_DWORD *)uint64_t result = a2;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(void *)(result + 88) = 0;
  int v2 = a2;
  int v3 = 1;
  if (a2 < 1) {
    google::MakeCheckOpString<int,int>((int)&v2, (int)&v3, "num_solutions_to_keep_ >= 1");
  }
  return result;
}

void sub_23CC87344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CC8734C(_Unwind_Exception *a1)
{
  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100](v3);
  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100]((void **)(v2 + 48));
  uint64_t v5 = *(void **)(v2 + 24);
  if (v5)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

void **std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    uint64_t v3 = a1[10];
    unint64_t v4 = (void *)a1[9];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v6 = a1[6];
  if (v6)
  {
    uint64_t v7 = a1[7];
    unint64_t v8 = (void *)a1[6];
    if (v7 != v6)
    {
      do
      {
        BOOL v9 = *(void **)(v7 - 32);
        if (v9)
        {
          *(void *)(v7 - 24) = v9;
          operator delete(v9);
        }
        v7 -= 40;
      }
      while (v7 != v6);
      unint64_t v8 = (void *)a1[6];
    }
    a1[7] = v6;
    operator delete(v8);
  }
  uint64_t v10 = (void *)a1[3];
  if (v10)
  {
    a1[4] = v10;
    operator delete(v10);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)(a1 + 1));
  return a1;
}

uint64_t operations_research::sat::SharedSolutionRepository<double>::SharedSolutionRepository(uint64_t result, int a2)
{
  *(_OWORD *)(result + 8) = 0u;
  *(_DWORD *)uint64_t result = a2;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(void *)(result + 88) = 0;
  int v2 = a2;
  int v3 = 1;
  if (a2 < 1) {
    google::MakeCheckOpString<int,int>((int)&v2, (int)&v3, "num_solutions_to_keep_ >= 1");
  }
  return result;
}

void sub_23CC8758C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CC87594(_Unwind_Exception *a1)
{
  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100](v3);
  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100]((void **)(v2 + 48));
  uint64_t v5 = *(void **)(v2 + 24);
  if (v5)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v9 = (char *)operator new(8 * v8);
  }
  else
  {
    BOOL v9 = 0;
  }
  uint64_t v10 = &v9[8 * v4];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_26;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_34;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  uint64_t v19 = &v15[-v18];
  double v20 = v15 - 16;
  int v21 = &v9[8 * v4 - 16];
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v20 - 1);
    long long v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)double v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)int v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  uint64_t v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)uint64_t v15 = 0;
      *((void *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  signed int v26 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v15 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
    while (v15 != v26);
    uint64_t v15 = v26;
  }
  if (v15) {
LABEL_26:
  }
    operator delete(v15);
  return v13;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F0C1358;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1358;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  operations_research::sat::SharedResponseManager::Synchronize(*(operations_research::sat::SharedResponseManager **)(a1 + 8), a2);
  operations_research::sat::SharedSolutionRepository<long long>::Synchronize((int *)(*(void *)(a1 + 8) + 304), v3);
  unint64_t v5 = **(operations_research::sat::SharedBoundsManager ***)(a1 + 16);
  if (v5) {
    operations_research::sat::SharedBoundsManager::Synchronize(v5, v4);
  }
  uint64_t v6 = **(int ***)(a1 + 24);
  if (v6) {
    operations_research::sat::SharedSolutionRepository<long long>::Synchronize(v6, v4);
  }
  uint64_t v7 = **(int ***)(a1 + 32);
  if (v7)
  {
    operations_research::sat::SharedSolutionRepository<double>::Synchronize(v7, v4);
  }
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedR"
                     "esponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS"
                                "0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::target_type()
{
}

void operations_research::sat::SharedSolutionRepository<long long>::Synchronize(int *a1, absl::lts_2020_02_25::Mutex *a2)
{
  unint64_t v3 = (absl::lts_2020_02_25 **)(a1 + 2);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 2), a2);
  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution*>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution*>>((void **)a1 + 6, *((void *)a1 + 7), *((void *)a1 + 9), *((void *)a1 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 3));
  uint64_t v4 = *((void *)a1 + 9);
  for (uint64_t i = *((void *)a1 + 10); i != v4; i -= 40)
  {
    uint64_t v6 = *(void **)(i - 32);
    if (v6)
    {
      *(void *)(i - 24) = v6;
      operator delete(v6);
    }
  }
  *((void *)a1 + 10) = v4;
  gtl::STLStableSortAndRemoveDuplicates<std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>>((uint64_t **)a1 + 6);
  uint64_t v14 = *((void *)a1 + 6);
  uint64_t v15 = *((void *)a1 + 7);
  unint64_t v16 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v14) >> 3) > v16)
  {
    uint64_t v17 = v14 + 40 * (int)v16;
    while (v15 != v17)
    {
      uint64_t v18 = *(void **)(v15 - 32);
      if (v18)
      {
        *(void *)(v15 - 24) = v18;
        operator delete(v18);
      }
      v15 -= 40;
    }
    *((void *)a1 + 7) = v17;
  }
  ++*((void *)a1 + 2);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v7, v8, v9, v10, v11, v12, v13);
}

void sub_23CC87A40(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedSolutionRepository<double>::Synchronize(int *a1, absl::lts_2020_02_25::Mutex *a2)
{
  unint64_t v3 = (absl::lts_2020_02_25 **)(a1 + 2);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 2), a2);
  std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution*>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution*>>((void **)a1 + 6, *((void *)a1 + 7), *((void *)a1 + 9), *((void *)a1 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 3));
  uint64_t v5 = *((void *)a1 + 9);
  for (uint64_t i = *((void *)a1 + 10); i != v5; i -= 40)
  {
    uint64_t v7 = *(void **)(i - 32);
    if (v7)
    {
      *(void *)(i - 24) = v7;
      operator delete(v7);
    }
  }
  *((void *)a1 + 10) = v5;
  gtl::STLStableSortAndRemoveDuplicates<std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>>((uint64_t *)a1 + 6, v4);
  uint64_t v15 = *((void *)a1 + 6);
  uint64_t v16 = *((void *)a1 + 7);
  unint64_t v17 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v15) >> 3) > v17)
  {
    uint64_t v18 = v15 + 40 * (int)v17;
    while (v16 != v18)
    {
      uint64_t v19 = *(void **)(v16 - 32);
      if (v19)
      {
        *(void *)(v16 - 24) = v19;
        operator delete(v19);
      }
      v16 -= 40;
    }
    *((void *)a1 + 7) = v18;
  }
  ++*((void *)a1 + 2);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v8, v9, v10, v11, v12, v13, v14);
}

void sub_23CC87B60(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void gtl::STLStableSortAndRemoveDuplicates<std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>>(uint64_t **a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (char *)a1[1];
  uint64_t v4 = v3 - (char *)*a1;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
  if (v4 < 1)
  {
LABEL_5:
    uint64_t v10 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
    while (1)
    {
      uint64_t v8 = operator new(40 * v7, v6);
      if (v8) {
        break;
      }
      BOOL v9 = v7 > 1;
      v7 >>= 1;
      if (!v9) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>((uint64_t)v2, v3, (uint64_t)&v15, v5, (uint64_t)v10, v7);
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__equal_to &>(*a1, a1[1]);
  uint64_t v12 = a1[1];
  if (v12 != v11)
  {
    uint64_t v13 = v11;
    while (v12 != v13)
    {
      uint64_t v14 = (void *)*(v12 - 4);
      if (v14)
      {
        *(v12 - 3) = (uint64_t)v14;
        operator delete(v14);
      }
      v12 -= 5;
    }
    a1[1] = v13;
  }
}

void sub_23CC87D10(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution*>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution*>>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 40;
  uint64_t v7 = (uint64_t)*a1 + 40 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v12 = a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  uint64_t v11 = v12;
  unint64_t v13 = *(void *)(v10 - 8);
  uint64_t v57 = v6;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v13] >> 3)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v7) >> 3)) >= a5)
    {
      uint64_t v18 = a3 + 40 * a5;
      uint64_t v19 = *(void *)(v10 - 8);
    }
    else
    {
      uint64_t v18 = a3 + 8 * ((uint64_t)(v13 - v7) >> 3);
      uint64_t v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*,operations_research::sat::SharedSolutionRepository<long long>::Solution*,operations_research::sat::SharedSolutionRepository<long long>::Solution*>(v10, v18, a4, v13);
      a1[1] = (void *)v19;
      if ((uint64_t)(v13 - v7) < 1) {
        return v7;
      }
    }
    uint64_t v20 = v7 + 40 * a5;
    unint64_t v21 = v19 - 40 * a5;
    uint64_t v22 = v19;
    if (v21 < v13)
    {
      uint64_t v22 = v19;
      do
      {
        *(void *)uint64_t v22 = *(void *)v21;
        *(void *)(v22 + 8) = 0;
        *(void *)(v22 + 16) = 0;
        *(void *)(v22 + 24) = 0;
        *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
        *(void *)(v22 + 24) = *(void *)(v21 + 24);
        *(void *)(v21 + 8) = 0;
        *(void *)(v21 + 16) = 0;
        *(void *)(v21 + 24) = 0;
        *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
        v22 += 40;
        v21 += 40;
      }
      while (v21 < v13);
    }
    a1[1] = (void *)v22;
    if (v19 != v20)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - v20) >> 3);
      uint64_t v25 = &v5[40 * v6 + 40 * v24];
      uint64_t v26 = -40 * v24;
      do
      {
        uint64_t v27 = &v25[v23];
        uint64_t v28 = v19 + v23;
        uint64_t v30 = (void **)(v19 + v23 - 32);
        unint64_t v29 = *v30;
        *(void *)(v19 + v23 - 40) = *(void *)&v25[v23 - 40];
        if (v29)
        {
          *(void *)(v28 - 24) = v29;
          operator delete(v29);
          operations_research::sat::SatParameters *v30 = 0;
          *(void *)(v19 + v23 - 24) = 0;
          *(void *)(v19 + v23 - 16) = 0;
        }
        *(_OWORD *)uint64_t v30 = *((_OWORD *)v27 - 2);
        *(void *)(v28 - 16) = *((void *)v27 - 2);
        *((void *)v27 - 4) = 0;
        *((void *)v27 - 3) = 0;
        *((void *)v27 - 2) = 0;
        *(_DWORD *)(v28 - 8) = *((_DWORD *)v27 - 2);
        v23 -= 40;
      }
      while (v26 != v23);
    }
    if (v18 != a3)
    {
      uint64_t v31 = (uint64_t)&v5[40 * v57 + 8];
      uint64_t v32 = a3 + 16;
      do
      {
        uint64_t v33 = v32 - 16;
        *(void *)(v31 - 8) = *(void *)(v32 - 16);
        if (v31 - 8 != v32 - 16) {
          std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)v31, *(char **)(v32 - 8), *(char **)v32, (uint64_t)(*(void *)v32 - *(void *)(v32 - 8)) >> 3);
        }
        *(_DWORD *)(v31 + 24) = *(_DWORD *)(v32 + 16);
        v31 += 40;
        v32 += 40;
      }
      while (v33 + 40 != v18);
    }
    return v7;
  }
  unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v13 - (void)v5) >> 3);
  if (v14 > 0x666666666666666) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v5) >> 3);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0x333333333333333) {
    unint64_t v16 = 0x666666666666666;
  }
  else {
    unint64_t v16 = v14;
  }
  BOOL v55 = v5;
  uint64_t v56 = a1;
  if (v16)
  {
    if (v16 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v17 = (char *)operator new(40 * v16);
  }
  else
  {
    unint64_t v17 = 0;
  }
  uint64_t v35 = 0;
  uint64_t v34 = &v17[40 * v6];
  std::string::size_type v60 = &v17[40 * v16];
  uint64_t v58 = 40 * a5;
  uint64_t v36 = &v34[40 * a5];
  do
  {
    uint64_t v38 = v34;
    uint64_t v39 = &v34[v35];
    uint64_t v40 = *(void *)(a3 + v35);
    *((void *)v39 + 1) = 0;
    *(void *)uint64_t v39 = v40;
    *((void *)v39 + 2) = 0;
    *((void *)v39 + 3) = 0;
    uint64_t v42 = *(unsigned char **)(a3 + v35 + 8);
    std::string::size_type v41 = *(unsigned char **)(a3 + v35 + 16);
    int64_t v43 = v41 - v42;
    if (v41 != v42)
    {
      if (v43 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int v44 = (char *)operator new(v41 - v42);
      *((void *)v39 + 1) = v44;
      int v37 = &v44[8 * (v43 >> 3)];
      *((void *)v39 + 2) = v44;
      *((void *)v39 + 3) = v37;
      memcpy(v44, v42, v43);
      *((void *)v39 + 2) = v37;
    }
    *((_DWORD *)v39 + 8) = *(_DWORD *)(a3 + v35 + 32);
    v35 += 40;
    uint64_t v34 = v38;
  }
  while (v58 != v35);
  int v45 = (char *)*v56;
  unint64_t v46 = v38;
  if (*v56 != (void *)v7)
  {
    uint64_t v47 = 40 * v6;
    int v48 = v55;
    do
    {
      int v49 = &v17[v47];
      int v50 = &v48[v47];
      *((void *)v49 - 5) = *(void *)&v48[v47 - 40];
      *((_OWORD *)v49 - 2) = *(_OWORD *)&v48[v47 - 32];
      *((void *)v49 - 2) = *(void *)&v48[v47 - 16];
      *((void *)v50 - 4) = 0;
      *((void *)v50 - 3) = 0;
      *((void *)v50 - 2) = 0;
      *((_DWORD *)v49 - 2) = *(_DWORD *)&v48[v47 - 8];
      v17 -= 40;
      v48 -= 40;
    }
    while (&v48[v47] != v45);
    unint64_t v46 = &v17[40 * v6];
  }
  long long v51 = v56[1];
  if (v51 != (void *)v7)
  {
    do
    {
      *(void *)uint64_t v36 = *(void *)v7;
      *((void *)v36 + 1) = 0;
      *((void *)v36 + 2) = 0;
      *((void *)v36 + 3) = 0;
      *(_OWORD *)(v36 + 8) = *(_OWORD *)(v7 + 8);
      *((void *)v36 + 3) = *(void *)(v7 + 24);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *((_DWORD *)v36 + 8) = *(_DWORD *)(v7 + 32);
      v36 += 40;
      v7 += 40;
    }
    while ((void *)v7 != v51);
    uint64_t v7 = (uint64_t)v56[1];
  }
  int v52 = *v56;
  *uint64_t v56 = v46;
  v56[1] = v36;
  v56[2] = v60;
  while ((void *)v7 != v52)
  {
    int v53 = *(void **)(v7 - 32);
    if (v53)
    {
      *(void *)(v7 - 24) = v53;
      operator delete(v53);
    }
    v7 -= 40;
  }
  if (v52) {
    operator delete(v52);
  }
  return (uint64_t)v34;
}

void sub_23CC881E4(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_23CC881EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19 = *(void **)(v16 + v17 + 8);
  if (v19)
  {
    *(void *)(v16 + v17 + 16) = v19;
    operator delete(v19);
  }
  a16 = v16 + v17;
  std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 40;
        *(void *)(a1 + 16) = v2 - 40;
        unint64_t v5 = *(void **)(v2 - 32);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 40;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*,operations_research::sat::SharedSolutionRepository<long long>::Solution*,operations_research::sat::SharedSolutionRepository<long long>::Solution*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)a4 = *(void *)v6;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      BOOL v9 = *(unsigned char **)(v6 + 8);
      uint64_t v8 = *(unsigned char **)(v6 + 16);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = (char *)operator new(v8 - v9);
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = v11;
        uint64_t v7 = &v11[8 * (v10 >> 3)];
        *(void *)(a4 + 24) = v7;
        memcpy(v11, v9, v10);
        *(void *)(a4 + 16) = v7;
      }
      *(_DWORD *)(a4 + 32) = *(_DWORD *)(v6 + 32);
      a4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_23CC88364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(void *)(v9 + 16) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      unint64_t v5 = *(void **)(v3 - 32);
      if (v5)
      {
        *(void *)(v3 - 24) = v5;
        operator delete(v5);
      }
      v3 -= 40;
    }
  }
  return a1;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v8 = *(a2 - 5);
      uint64_t v9 = *(void *)a1;
      if (v8 == *(void *)a1)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        uint64_t v11 = *(void *)(a1 + 16);
        if (v10 == v11) {
          return;
        }
        uint64_t v12 = 0;
        uint64_t v13 = *(a2 - 4);
        while (v13 + v12 != *(a2 - 3))
        {
          uint64_t v14 = *(void *)(v13 + v12);
          uint64_t v15 = *(void *)(v10 + v12);
          if (v14 < v15) {
            break;
          }
          v12 += 8;
          if (v15 < v14 || v12 + v10 == v11) {
            return;
          }
        }
      }
      else
      {
        if (v8 >= *(void *)a1) {
          return;
        }
        uint64_t v10 = *(void *)(a1 + 8);
        uint64_t v11 = *(void *)(a1 + 16);
      }
      uint64_t v24 = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      int v25 = *(_DWORD *)(a1 + 32);
      *(void *)a1 = *(a2 - 5);
      *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 - 2);
      *(void *)(a1 + 24) = *(a2 - 2);
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 2);
      *(a2 - 5) = v9;
      *(a2 - 4) = v10;
      *(a2 - 3) = v11;
      *(a2 - 2) = v24;
      *((_DWORD *)a2 - 2) = v25;
      return;
    }
    if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>((void *)a1, a2);
    }
    else
    {
      uint64_t v21 = a4 >> 1;
      uint64_t v22 = a1 + 40 * (a4 >> 1);
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, (__int8 *)(a1 + 40 * (a4 >> 1)), a3, a4 >> 1, a5);
        unint64_t v26 = a4 - v21;
        uint64_t v27 = a5 + 40 * v21;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1 + 40 * (a4 >> 1), (__int8 *)a2, a3, v26, v27);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<long long>::Solution *,operations_research::sat::SharedSolutionRepository<long long>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a5, v27, v27, a5 + 40 * a4, a1);
        if (a5)
        {
          unint64_t v28 = a4;
          unint64_t v29 = 0;
          uint64_t v30 = (void *)(a5 + 16);
          do
          {
            uint64_t v31 = (void *)*(v30 - 1);
            if (v31)
            {
              void *v30 = v31;
              operator delete(v31);
              unint64_t v28 = a4;
            }
            ++v29;
            v30 += 5;
          }
          while (v29 < v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, a1 + 40 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        uint64_t v23 = a4 - v21;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(v22, a2, a3, v23, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, v22, (uint64_t)a2, a3, v21, v23, a5, a6);
      }
    }
  }
}

void sub_23CC88678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 5;
    if (a1 + 5 != a2)
    {
      unint64_t v5 = a1;
      do
      {
        uint64_t v7 = v5;
        unint64_t v5 = v4;
        uint64_t v8 = *v4;
        uint64_t v9 = *v7;
        if (v8 == *v7)
        {
          uint64_t v10 = v7[1];
          uint64_t v11 = v7[2];
          if (v10 != v11)
          {
            uint64_t v12 = 0;
            uint64_t v14 = (uint64_t *)v7[6];
            uint64_t v13 = (uint64_t *)v7[7];
            while (&v14[v12] != v13)
            {
              uint64_t v15 = v14[v12];
              uint64_t v16 = *(void *)(v10 + v12 * 8);
              if (v15 < v16) {
                break;
              }
              ++v12;
              if (v16 < v15 || v12 * 8 + v10 == v11) {
                goto LABEL_6;
              }
            }
            goto LABEL_20;
          }
        }
        else if (v8 < *v7)
        {
          uint64_t v14 = (uint64_t *)v7[6];
          uint64_t v13 = (uint64_t *)v7[7];
LABEL_20:
          uint64_t v18 = v7[8];
          v7[6] = 0;
          v7[7] = 0;
          v7[8] = 0;
          int v19 = *((_DWORD *)v7 + 18);
          uint64_t v20 = v5;
          uint64_t v21 = (void *)v5[1];
          uint64_t v22 = v7;
          *unint64_t v5 = v9;
          if (v21)
          {
            v5[2] = v21;
            operator delete(v21);
            v5[2] = 0;
            v5[3] = 0;
          }
          while (1)
          {
            *(_OWORD *)(v20 + 1) = *(_OWORD *)(v22 + 1);
            v20[3] = v22[3];
            v22[1] = 0;
            v22[2] = 0;
            v22[3] = 0;
            *((_DWORD *)v20 + 8) = *((_DWORD *)v22 + 8);
            if (v22 == a1) {
              break;
            }
            uint64_t v23 = *(v22 - 5);
            if (v8 == v23)
            {
              uint64_t v25 = *(v22 - 4);
              uint64_t v24 = *(v22 - 3);
              if (v25 == v24)
              {
LABEL_4:
                uint64_t v6 = v22;
                goto LABEL_5;
              }
              uint64_t v26 = v25 + 8;
              uint64_t v27 = v14;
              while (v27 != v13)
              {
                uint64_t v28 = *v27;
                uint64_t v29 = *(void *)(v26 - 8);
                if (*v27 < v29) {
                  break;
                }
                ++v27;
                BOOL v30 = v29 < v28 || v26 == v24;
                v26 += 8;
                if (v30) {
                  goto LABEL_4;
                }
              }
              uint64_t v20 = v22;
              v22 -= 5;
              void *v20 = v23;
            }
            else
            {
              uint64_t v20 = v22;
              if (v8 >= v23) {
                goto LABEL_4;
              }
              v22 -= 5;
              void *v20 = v23;
            }
          }
          uint64_t v6 = a1;
LABEL_5:
          *uint64_t v6 = v8;
          v22[1] = v14;
          void v6[2] = v13;
          v6[3] = v18;
          *((_DWORD *)v6 + 8) = v19;
        }
LABEL_6:
        uint64_t v4 = v5 + 5;
      }
      while (v5 + 5 != a2);
    }
  }
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, __int8 *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  switch(a4)
  {
    case 0uLL:
      return *(double *)&v9;
    case 2uLL:
      uint64_t v10 = *((void *)a2 - 5);
      if (v10 == *(void *)a1)
      {
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v11 = *(void *)(a1 + 16);
        if (v12 != v11)
        {
          uint64_t v13 = (uint64_t *)*((void *)a2 - 4);
          uint64_t v14 = v12 + 8;
          while (v13 != *((uint64_t **)a2 - 3))
          {
            uint64_t v15 = *v13;
            uint64_t v16 = *(void *)(v14 - 8);
            if (*v13 < v16) {
              break;
            }
            ++v13;
            BOOL v17 = v16 < v15 || v14 == v11;
            v14 += 8;
            if (v17) {
              goto LABEL_23;
            }
          }
          goto LABEL_22;
        }
      }
      else if (v10 < *(void *)a1)
      {
LABEL_22:
        *(void *)a5 = v10;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
        *(_OWORD *)(a5 + 8) = *((_OWORD *)a2 - 2);
        *(void *)(a5 + 24) = *((void *)a2 - 2);
        *((void *)a2 - 3) = 0;
        *((void *)a2 - 2) = 0;
        *((void *)a2 - 4) = 0;
        *(_DWORD *)(a5 + 32) = *((_DWORD *)a2 - 2);
        uint64_t v19 = *(void *)a1;
        *(void *)(a5 + 56) = 0;
        *(void *)(a5 + 64) = 0;
        *(void *)(a5 + 40) = v19;
        *(void *)(a5 + 48) = 0;
        long long v9 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a5 + 48) = v9;
        *(void *)(a5 + 64) = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        int v20 = *(_DWORD *)(a1 + 32);
LABEL_24:
        *(_DWORD *)(a5 + 72) = v20;
        return *(double *)&v9;
      }
LABEL_23:
      *(void *)a5 = *(void *)a1;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      uint64_t v21 = *((void *)a2 - 5);
      *(void *)(a5 + 56) = 0;
      *(void *)(a5 + 64) = 0;
      *(void *)(a5 + 40) = v21;
      *(void *)(a5 + 48) = 0;
      long long v9 = *((_OWORD *)a2 - 2);
      *(_OWORD *)(a5 + 48) = v9;
      *(void *)(a5 + 64) = *((void *)a2 - 2);
      *((void *)a2 - 4) = 0;
      *((void *)a2 - 3) = 0;
      *((void *)a2 - 2) = 0;
      int v20 = *((_DWORD *)a2 - 2);
      goto LABEL_24;
    case 1uLL:
      *(void *)a5 = *(void *)a1;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      long long v9 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a5 + 8) = v9;
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      break;
    default:
      if ((uint64_t)a4 > 8)
      {
        unint64_t v22 = a4 >> 1;
        uint64_t v23 = 40 * (a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, a1 + v23, a3, a4 >> 1, a5, a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1 + v23, a2, a3, a4 - v22, a5 + v23, a4 - v22);
        *(void *)&long long v9 = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, (void *)(a1 + v23), a1 + v23, (uint64_t)a2, a5).n128_u64[0];
      }
      else
      {
        *(void *)&long long v9 = std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, a2, a5).n128_u64[0];
      }
      break;
  }
  return *(double *)&v9;
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<long long>::Solution *,operations_research::sat::SharedSolutionRepository<long long>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 == a2)
  {
LABEL_23:
    if (a3 != a4)
    {
      uint64_t v20 = a5 + 16;
      do
      {
        uint64_t v21 = *(void **)(v20 - 8);
        *(void *)(v20 - 16) = *(void *)a3;
        if (v21)
        {
          *(void *)uint64_t v20 = v21;
          operator delete(v21);
          *(void *)(v20 - 8) = 0;
          *(void *)uint64_t v20 = 0;
          *(void *)(v20 + 8) = 0;
        }
        __n128 result = *(__n128 *)(a3 + 8);
        *(__n128 *)(v20 - 8) = result;
        *(void *)(v20 + 8) = *(void *)(a3 + 24);
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = 0;
        *(_DWORD *)(v20 + 16) = *(_DWORD *)(a3 + 32);
        v20 += 40;
        a3 += 40;
      }
      while (a3 != a4);
    }
    return result;
  }
  uint64_t v9 = a1;
  while (a3 != a4)
  {
    if (*(void *)a3 == *(void *)v9)
    {
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v11 = *(void *)(v9 + 16);
      if (v12 != v11)
      {
        uint64_t v13 = *(uint64_t **)(a3 + 8);
        uint64_t v14 = v12 + 8;
        while (v13 != *(uint64_t **)(a3 + 16))
        {
          uint64_t v15 = *v13;
          uint64_t v16 = *(void *)(v14 - 8);
          if (*v13 < v16) {
            break;
          }
          ++v13;
          BOOL v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17) {
            goto LABEL_21;
          }
        }
        goto LABEL_17;
      }
LABEL_21:
      *(void *)a5 = *(void *)v9;
      uint64_t v19 = *(void **)(a5 + 8);
      if (v19)
      {
        *(void *)(a5 + 16) = v19;
        operator delete(v19);
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
      }
      __n128 result = *(__n128 *)(v9 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(v9 + 24);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(v9 + 32);
      v9 += 40;
      a5 += 40;
      if (v9 == a2) {
        goto LABEL_23;
      }
    }
    else
    {
      if (*(void *)a3 >= *(void *)v9) {
        goto LABEL_21;
      }
LABEL_17:
      *(void *)a5 = *(void *)a3;
      uint64_t v18 = *(void **)(a5 + 8);
      if (v18)
      {
        *(void *)(a5 + 16) = v18;
        operator delete(v18);
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
      }
      __n128 result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if (v9 == a2) {
        goto LABEL_23;
      }
    }
  }
  if (v9 != a2)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = v9 + v22;
      uint64_t v24 = a5 + v22;
      *(void *)(a5 + v22) = *(void *)(v9 + v22);
      uint64_t v26 = (void **)(a5 + v22 + 8);
      uint64_t v25 = *v26;
      if (*v26)
      {
        *(void *)(v24 + 16) = v25;
        operator delete(v25);
        *uint64_t v26 = 0;
        *(void *)(a5 + v22 + 16) = 0;
        *(void *)(a5 + v22 + 24) = 0;
      }
      __n128 result = *(__n128 *)(v23 + 8);
      *(__n128 *)uint64_t v26 = result;
      *(void *)(v24 + 24) = *(void *)(v23 + 24);
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = 0;
      *(void *)(v23 + 24) = 0;
      *(_DWORD *)(v24 + 32) = *(_DWORD *)(v23 + 32);
      v22 += 40;
    }
    while (v23 + 40 != a2);
  }
  return result;
}

uint64_t *std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    unint64_t v4 = *v3;
    if (*v3)
    {
      unint64_t v5 = 0;
      uint64_t v6 = (void *)(v2 + 16);
      do
      {
        uint64_t v7 = (void *)*(v6 - 1);
        if (v7)
        {
          *uint64_t v6 = v7;
          operator delete(v7);
          unint64_t v4 = *v3;
        }
        ++v5;
        v6 += 5;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v8 = a8;
  uint64_t v9 = a6;
LABEL_4:
  if (v9 > v8 && a5 > v8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v15 = *(void *)a2;
    while (1)
    {
      if (v15 == *(void *)a1)
      {
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v16 = *(void *)(a1 + 16);
        if (v17 != v16)
        {
          uint64_t v18 = *(uint64_t **)(a2 + 8);
          uint64_t v19 = v17 + 8;
          while (v18 != *(uint64_t **)(a2 + 16))
          {
            uint64_t v20 = *v18;
            uint64_t v21 = *(void *)(v19 - 8);
            if (*v18 < v21) {
              break;
            }
            ++v18;
            BOOL v22 = v21 < v20 || v19 == v16;
            v19 += 8;
            if (v22) {
              goto LABEL_20;
            }
          }
LABEL_23:
          if (a5 < v9)
          {
            if (v9 >= 0) {
              uint64_t v23 = v9;
            }
            else {
              uint64_t v23 = v9 + 1;
            }
            uint64_t v24 = v23 >> 1;
            uint64_t v25 = (uint64_t *)(a2 + 40 * (v23 >> 1));
            uint64_t v26 = (uint64_t *)a1;
            if (a2 == a1)
            {
LABEL_28:
              uint64_t v27 = a3;
              uint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v26 - a1) >> 3);
              goto LABEL_41;
            }
            unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
            uint64_t v41 = *v25;
            uint64_t v26 = (uint64_t *)a1;
            while (2)
            {
              unint64_t v42 = v40 >> 1;
              int64_t v43 = &v26[5 * (v40 >> 1)];
              if (v41 == *v43)
              {
                int v44 = &v26[5 * v42];
                uint64_t v46 = v44[1];
                uint64_t v45 = v44[2];
                if (v46 != v45)
                {
                  uint64_t v47 = v46 + 8;
                  int v48 = *(uint64_t **)(a2 + 40 * v24 + 8);
                  while (v48 != *(uint64_t **)(a2 + 40 * v24 + 16))
                  {
                    uint64_t v49 = *v48;
                    uint64_t v50 = *(void *)(v47 - 8);
                    if (*v48 < v50) {
                      break;
                    }
                    ++v48;
                    BOOL v51 = v50 < v49 || v47 == v45;
                    v47 += 8;
                    if (v51) {
                      goto LABEL_45;
                    }
                  }
LABEL_46:
                  unint64_t v40 = v42;
                  if (!v42) {
                    goto LABEL_28;
                  }
                  continue;
                }
              }
              else if (v41 < *v43)
              {
                goto LABEL_46;
              }
              break;
            }
LABEL_45:
            uint64_t v26 = v43 + 5;
            unint64_t v42 = v40 + ~v42;
            goto LABEL_46;
          }
          if (a5 == 1)
          {
            uint64_t v60 = *(void *)(a1 + 24);
            __n128 result = *(__n128 *)(a1 + 8);
            *(void *)(a1 + 16) = 0;
            *(void *)(a1 + 24) = 0;
            *(void *)(a1 + 8) = 0;
            int v61 = *(_DWORD *)(a1 + 32);
            *(void *)a1 = *(void *)a2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
            *(void *)a2 = v15;
            *(__n128 *)(a2 + 8) = result;
            *(void *)(a2 + 24) = v60;
            *(_DWORD *)(a2 + 32) = v61;
            return result;
          }
          if (a5 >= 0) {
            uint64_t v29 = a5;
          }
          else {
            uint64_t v29 = a5 + 1;
          }
          uint64_t v28 = v29 >> 1;
          uint64_t v26 = (uint64_t *)(a1 + 40 * (v29 >> 1));
          uint64_t v25 = (uint64_t *)a2;
          if (a2 != a3)
          {
            unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
            uint64_t v31 = *v26;
            uint64_t v32 = a1 + 40 * v28;
            uint64_t v34 = *(void *)(v32 + 8);
            uint64_t v33 = *(void *)(v32 + 16);
            if (v34 == v33)
            {
              uint64_t v25 = (uint64_t *)a2;
              do
              {
                unint64_t v35 = v30 >> 1;
                uint64_t v36 = &v25[5 * (v30 >> 1)];
                uint64_t v38 = *v36;
                int v37 = v36 + 5;
                v30 += ~(v30 >> 1);
                if (v38 < v31) {
                  uint64_t v25 = v37;
                }
                else {
                  unint64_t v30 = v35;
                }
              }
              while (v30);
              goto LABEL_40;
            }
            uint64_t v52 = v34 + 8;
            uint64_t v25 = (uint64_t *)a2;
            while (2)
            {
              unint64_t v53 = v30 >> 1;
              unsigned int v54 = &v25[5 * (v30 >> 1)];
              if (*v54 == v31)
              {
                BOOL v55 = (uint64_t *)v25[5 * v53 + 1];
                uint64_t v56 = v52;
                while (v55 != (uint64_t *)v25[5 * v53 + 2])
                {
                  uint64_t v57 = *v55;
                  uint64_t v58 = *(void *)(v56 - 8);
                  if (*v55 < v58) {
                    break;
                  }
                  ++v55;
                  BOOL v59 = v58 < v57 || v56 == v33;
                  v56 += 8;
                  if (v59) {
                    goto LABEL_62;
                  }
                }
LABEL_61:
                uint64_t v25 = v54 + 5;
                unint64_t v53 = v30 + ~v53;
              }
              else if (*v54 < v31)
              {
                goto LABEL_61;
              }
LABEL_62:
              unint64_t v30 = v53;
              if (!v53) {
                break;
              }
              continue;
            }
          }
LABEL_40:
          uint64_t v27 = a3;
          uint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v25 - a2) >> 3);
LABEL_41:
          a5 -= v28;
          v9 -= v24;
          uint64_t v39 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(v26, (uint64_t *)a2, v25);
          a3 = (uint64_t)v39;
          if (v28 + v24 >= a5 + v9)
          {
            uint64_t v13 = v27;
            uint64_t v8 = a8;
            std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(v39, v25, v13, a4, a5, v9, a7, a8);
            uint64_t v9 = v24;
            a5 = v28;
            a2 = (uint64_t)v26;
            if (!v24) {
              return result;
            }
          }
          else
          {
            std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, v26, v39, a4, v28, v24, a7, a8);
            a1 = a3;
            a3 = v27;
            uint64_t v8 = a8;
            a2 = (uint64_t)v25;
            if (!v9) {
              return result;
            }
          }
          goto LABEL_4;
        }
      }
      else if (v15 < *(void *)a1)
      {
        uint64_t v15 = *(void *)a1;
        goto LABEL_23;
      }
LABEL_20:
      a1 += 40;
      if (!--a5) {
        return result;
      }
    }
  }

  std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, a2, a3, a4, a5, v9, a7);
  return result;
}

__n128 std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, __int8 *a2, uint64_t a3)
{
  if ((__int8 *)a1 != a2)
  {
    unint64_t v5 = (__n128 *)a1;
    *(void *)a3 = *(void *)a1;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    __n128 result = *(__n128 *)(a1 + 8);
    *(__n128 *)(a3 + 8) = result;
    *(void *)(a3 + 24) = *(void *)(a1 + 24);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 32);
    uint64_t v7 = (__n128 *)(a1 + 40);
    if ((__int8 *)(a1 + 40) != a2)
    {
      uint64_t v8 = (int64_t *)a3;
      uint64_t v9 = (int64_t *)a3;
      do
      {
        while (1)
        {
          uint64_t v10 = v7;
          int64_t v12 = *v9;
          v9 += 5;
          int64_t v11 = v12;
          BOOL v13 = (int64_t)v10->n128_u64[0] < v12;
          if (v10->n128_u64[0] == v12) {
            break;
          }
          if (v13)
          {
            uint64_t v14 = v8[1];
            uint64_t v15 = v8[2];
            goto LABEL_19;
          }
LABEL_4:
          v8[5] = v10->n128_u64[0];
          v8[6] = 0;
          v8[7] = 0;
          v8[8] = 0;
          __n128 result = v5[3];
          *((__n128 *)v8 + 3) = result;
          v8[8] = v5[4].n128_i64[0];
          v5[3].n128_u64[0] = 0;
          v5[3].n128_u64[1] = 0;
          v5[4].n128_u64[0] = 0;
          *((_DWORD *)v8 + 18) = v5[4].n128_u32[2];
          uint64_t v7 = (__n128 *)((char *)v10 + 40);
          uint64_t v8 = v9;
          unint64_t v5 = v10;
          if (&v10[2].n128_i8[8] == a2) {
            return result;
          }
        }
        uint64_t v14 = v8[1];
        uint64_t v15 = v8[2];
        if (v14 == v15) {
          goto LABEL_4;
        }
        uint64_t v16 = 0;
        unint64_t v17 = v5[3].n128_u64[0];
        while (v17 + v16 != v5[3].n128_u64[1])
        {
          uint64_t v18 = *(void *)(v17 + v16);
          uint64_t v19 = *(void *)(v14 + v16);
          if (v18 < v19) {
            break;
          }
          v16 += 8;
          if (v19 < v18 || v16 + v14 == v15) {
            goto LABEL_4;
          }
        }
LABEL_19:
        v8[5] = v11;
        v8[6] = v14;
        uint64_t v21 = v8[3];
        v8[7] = v15;
        v8[8] = v21;
        v8[1] = 0;
        v8[2] = 0;
        v8[3] = 0;
        *((_DWORD *)v8 + 18) = *((_DWORD *)v8 + 8);
        BOOL v22 = (int64_t *)a3;
        if (v8 != (int64_t *)a3)
        {
          uint64_t v23 = v8;
          do
          {
            int64_t v25 = *(v23 - 5);
            v23 -= 5;
            int64_t v24 = v25;
            BOOL v26 = (int64_t)v10->n128_u64[0] < v25;
            if (v10->n128_u64[0] == v25)
            {
              uint64_t v28 = *(v8 - 4);
              uint64_t v27 = *(v8 - 3);
              if (v28 == v27) {
                goto LABEL_37;
              }
              uint64_t v29 = (uint64_t *)v5[3].n128_u64[0];
              uint64_t v30 = v28 + 8;
              while (v29 != (uint64_t *)v5[3].n128_u64[1])
              {
                uint64_t v31 = *v29;
                uint64_t v32 = *(void *)(v30 - 8);
                if (*v29 < v32) {
                  break;
                }
                ++v29;
                BOOL v33 = v32 < v31 || v30 == v27;
                v30 += 8;
                if (v33) {
                  goto LABEL_37;
                }
              }
            }
            else if (!v26)
            {
LABEL_37:
              BOOL v22 = v8;
              goto LABEL_38;
            }
            int64_t *v8 = v24;
            uint64_t v34 = (void *)v8[1];
            if (v34)
            {
              v8[2] = (int64_t)v34;
              operator delete(v34);
            }
            *(_OWORD *)(v8 + 1) = *((_OWORD *)v8 - 2);
            v8[3] = *(v8 - 2);
            *(v8 - 3) = 0;
            *(v8 - 2) = 0;
            *(v8 - 4) = 0;
            *((_DWORD *)v8 + 8) = *((_DWORD *)v8 - 2);
            uint64_t v8 = v23;
          }
          while (v23 != (int64_t *)a3);
          BOOL v22 = (int64_t *)a3;
          *(void *)a3 = v10->n128_u64[0];
          uint64_t v36 = (void *)(a3 + 8);
          unint64_t v35 = *(void **)(a3 + 8);
          if (!v35) {
            goto LABEL_40;
          }
LABEL_39:
          v22[2] = (int64_t)v35;
          operator delete(v35);
          *uint64_t v36 = 0;
          v36[1] = 0;
          v36[2] = 0;
          goto LABEL_40;
        }
LABEL_38:
        int64_t *v22 = v10->n128_u64[0];
        uint64_t v36 = v22 + 1;
        unint64_t v35 = (void *)v22[1];
        if (v35) {
          goto LABEL_39;
        }
LABEL_40:
        __n128 result = v5[3];
        *(__n128 *)(v22 + 1) = result;
        v22[3] = v5[4].n128_i64[0];
        v5[3].n128_u64[0] = 0;
        v5[3].n128_u64[1] = 0;
        v5[4].n128_u64[0] = 0;
        *((_DWORD *)v22 + 8) = v5[4].n128_u32[2];
        uint64_t v7 = (__n128 *)((char *)v10 + 40);
        uint64_t v8 = v9;
        unint64_t v5 = v10;
      }
      while (&v10[2].n128_i8[8] != a2);
    }
  }
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((void *)a1 == a2)
  {
LABEL_20:
    while (a3 != a4)
    {
      *(void *)a5 = *(void *)a3;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      __n128 result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
    }
    return result;
  }
  while (a3 != a4)
  {
    if (*(void *)a3 == *(void *)a1)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 16);
      if (v7 != v6)
      {
        uint64_t v8 = *(uint64_t **)(a3 + 8);
        uint64_t v9 = v7 + 8;
        while (v8 != *(uint64_t **)(a3 + 16))
        {
          uint64_t v10 = *v8;
          uint64_t v11 = *(void *)(v9 - 8);
          if (*v8 < v11) {
            break;
          }
          ++v8;
          BOOL v12 = v11 < v10 || v9 == v6;
          v9 += 8;
          if (v12) {
            goto LABEL_3;
          }
        }
        goto LABEL_17;
      }
LABEL_3:
      *(void *)a5 = *(void *)a1;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      __n128 result = *(__n128 *)(a1 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      a1 += 40;
      a5 += 40;
      if ((void *)a1 == a2) {
        goto LABEL_20;
      }
    }
    else
    {
      if (*(void *)a3 >= *(void *)a1) {
        goto LABEL_3;
      }
LABEL_17:
      *(void *)a5 = *(void *)a3;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      __n128 result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if ((void *)a1 == a2) {
        goto LABEL_20;
      }
    }
  }
  if ((void *)a1 != a2)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = a5 + v13;
      uint64_t v15 = (void *)(a1 + v13);
      *(void *)uint64_t v14 = *(void *)(a1 + v13);
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      __n128 result = *(__n128 *)(a1 + v13 + 8);
      *(__n128 *)(v14 + 8) = result;
      *(void *)(v14 + 24) = *(void *)(a1 + v13 + 24);
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = 0;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a1 + v13 + 32);
      v13 += 40;
    }
    while (v15 + 5 != a2);
  }
  return result;
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v20 = 0;
  if (a5 > a6)
  {
    uint64_t v10 = a7;
    if (a2 != a3)
    {
      unint64_t v11 = 0;
      uint64_t v10 = a7;
      uint64_t v12 = a2;
      do
      {
        *(void *)uint64_t v10 = *(void *)v12;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        *(void *)(v10 + 24) = 0;
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(v12 + 8);
        *(void *)(v10 + 24) = *(void *)(v12 + 24);
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        *(_DWORD *)(v10 + 32) = *(_DWORD *)(v12 + 32);
        ++v11;
        v10 += 40;
        v12 += 40;
      }
      while (v12 != a3);
      unint64_t v20 = v11;
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>>(v10, v10, a7, a7, a2, a2, a1, a1, a3, a3);
    if (!a7) {
      return;
    }
LABEL_13:
    unint64_t v16 = v20;
    if (v20)
    {
      unint64_t v17 = 0;
      uint64_t v18 = (void *)(a7 + 16);
      do
      {
        uint64_t v19 = (void *)*(v18 - 1);
        if (v19)
        {
          *uint64_t v18 = v19;
          operator delete(v19);
          unint64_t v16 = v20;
        }
        ++v17;
        v18 += 5;
      }
      while (v17 < v16);
    }
    return;
  }
  uint64_t v13 = a7;
  if (a1 != a2)
  {
    unint64_t v14 = 0;
    uint64_t v13 = a7;
    uint64_t v15 = a1;
    do
    {
      *(void *)uint64_t v13 = *(void *)v15;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v15 + 8);
      *(void *)(v13 + 24) = *(void *)(v15 + 24);
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      *(void *)(v15 + 24) = 0;
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v15 + 32);
      ++v14;
      v13 += 40;
      v15 += 40;
    }
    while (v15 != a2);
    unint64_t v20 = v14;
  }
  std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<long long>::Solution *,operations_research::sat::SharedSolutionRepository<long long>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a7, v13, a2, a3, a1);
  if (a7) {
    goto LABEL_13;
  }
}

void sub_23CC896EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC89700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  __n128 result = a3;
  if (a1 != a2)
  {
    if (a2 == a3)
    {
      return a1;
    }
    else
    {
      __n128 result = a1 + 5;
      unint64_t v5 = a1 + 5;
      uint64_t v6 = a2;
      while (1)
      {
        uint64_t v7 = *(v5 - 5);
        uint64_t v8 = *(v5 - 2);
        long long v9 = *((_OWORD *)v5 - 2);
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 4) = 0;
        int v10 = *((_DWORD *)v5 - 2);
        *(v5 - 5) = *v6;
        *((_OWORD *)v5 - 2) = *(_OWORD *)(v6 + 1);
        *(v5 - 2) = v6[3];
        *((_DWORD *)v5 - 2) = *((_DWORD *)v6 + 8);
        *uint64_t v6 = v7;
        *(_OWORD *)(v6 + 1) = v9;
        v6[3] = v8;
        *((_DWORD *)v6 + 8) = v10;
        v6 += 5;
        if (v6 == a3) {
          break;
        }
        if (v5 == a2) {
          a2 = v6;
        }
        v5 += 5;
        result += 5;
      }
      if (v5 != a2)
      {
        unint64_t v11 = a2;
        while (1)
        {
          uint64_t v12 = *v5;
          uint64_t v13 = v5[3];
          long long v14 = *(_OWORD *)(v5 + 1);
          v5[2] = 0;
          v5[3] = 0;
          v5[1] = 0;
          int v15 = *((_DWORD *)v5 + 8);
          *unint64_t v5 = *v11;
          *(_OWORD *)(v5 + 1) = *(_OWORD *)(v11 + 1);
          v5[3] = v11[3];
          *((_DWORD *)v5 + 8) = *((_DWORD *)v11 + 8);
          *unint64_t v11 = v12;
          *(_OWORD *)(v11 + 1) = v14;
          void v11[3] = v13;
          *((_DWORD *)v11 + 8) = v15;
          v5 += 5;
          v11 += 5;
          BOOL v16 = v5 == a2;
          if (v11 == a3)
          {
            if (v5 == a2) {
              return result;
            }
            unint64_t v11 = a2 + 5;
            while (1)
            {
              uint64_t v17 = *v5;
              uint64_t v18 = v5[3];
              long long v19 = *(_OWORD *)(v5 + 1);
              v5[2] = 0;
              v5[3] = 0;
              v5[1] = 0;
              int v20 = *((_DWORD *)v5 + 8);
              *unint64_t v5 = *a2;
              *(_OWORD *)(v5 + 1) = *(_OWORD *)(a2 + 1);
              v5[3] = a2[3];
              *((_DWORD *)v5 + 8) = *((_DWORD *)a2 + 8);
              *a2 = v17;
              *(_OWORD *)(a2 + 1) = v19;
              a2[3] = v18;
              *((_DWORD *)a2 + 8) = v20;
              v5 += 5;
              BOOL v16 = v5 == a2;
              if (v11 != a3) {
                break;
              }
              if (v5 == a2) {
                return result;
              }
            }
          }
          if (v16) {
            a2 = v11;
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<long long>::Solution *,operations_research::sat::SharedSolutionRepository<long long>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 == a2) {
    return result;
  }
  uint64_t v9 = a1;
  while (a3 != a4)
  {
    if (*(void *)a3 == *(void *)v9)
    {
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v11 = *(void *)(v9 + 16);
      if (v12 != v11)
      {
        uint64_t v13 = *(uint64_t **)(a3 + 8);
        uint64_t v14 = v12 + 8;
        while (v13 != *(uint64_t **)(a3 + 16))
        {
          uint64_t v15 = *v13;
          uint64_t v16 = *(void *)(v14 - 8);
          if (*v13 < v16) {
            break;
          }
          ++v13;
          BOOL v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17) {
            goto LABEL_21;
          }
        }
        goto LABEL_17;
      }
LABEL_21:
      *(void *)a5 = *(void *)v9;
      long long v19 = *(void **)(a5 + 8);
      if (v19)
      {
        *(void *)(a5 + 16) = v19;
        operator delete(v19);
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
      }
      __n128 result = *(__n128 *)(v9 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(v9 + 24);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(v9 + 32);
      v9 += 40;
      a5 += 40;
      if (v9 == a2) {
        return result;
      }
    }
    else
    {
      if (*(void *)a3 >= *(void *)v9) {
        goto LABEL_21;
      }
LABEL_17:
      *(void *)a5 = *(void *)a3;
      uint64_t v18 = *(void **)(a5 + 8);
      if (v18)
      {
        *(void *)(a5 + 16) = v18;
        operator delete(v18);
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
      }
      __n128 result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if (v9 == a2) {
        return result;
      }
    }
  }
  uint64_t v20 = 0;
  do
  {
    uint64_t v21 = v9 + v20;
    uint64_t v22 = a5 + v20;
    *(void *)(a5 + v20) = *(void *)(v9 + v20);
    int64_t v24 = (void **)(a5 + v20 + 8);
    uint64_t v23 = *v24;
    if (*v24)
    {
      *(void *)(v22 + 16) = v23;
      operator delete(v23);
      *int64_t v24 = 0;
      *(void *)(a5 + v20 + 16) = 0;
      *(void *)(a5 + v20 + 24) = 0;
    }
    __n128 result = *(__n128 *)(v21 + 8);
    *(__n128 *)int64_t v24 = result;
    *(void *)(v22 + 24) = *(void *)(v21 + 24);
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0;
    *(void *)(v21 + 24) = 0;
    *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
    v20 += 40;
  }
  while (v21 + 40 != a2);
  return result;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 == a4) {
    return;
  }
  uint64_t v12 = a2;
  while (a6 != a8)
  {
    uint64_t v17 = a6 - 40;
    uint64_t v19 = *(void *)(a6 - 40);
    uint64_t v20 = *(void *)(v12 - 40);
    if (v20 == v19)
    {
      uint64_t v22 = *(void *)(a6 - 32);
      uint64_t v21 = *(void *)(a6 - 24);
      if (v22 != v21)
      {
        uint64_t v23 = *(uint64_t **)(v12 - 32);
        uint64_t v24 = v22 + 8;
        while (v23 != *(uint64_t **)(v12 - 24))
        {
          uint64_t v25 = *v23;
          uint64_t v26 = *(void *)(v24 - 8);
          if (*v23 < v26) {
            break;
          }
          ++v23;
          BOOL v27 = v26 < v25 || v24 == v21;
          v24 += 8;
          if (v27) {
            goto LABEL_3;
          }
        }
LABEL_19:
        uint64_t v15 = (void *)(a10 - 32);
        uint64_t v14 = *(void **)(a10 - 32);
        *(void *)(a10 - 40) = v19;
        uint64_t v16 = a6;
        if (!v14) {
          goto LABEL_5;
        }
LABEL_4:
        *(void *)(a10 - 24) = v14;
        operator delete(v14);
        void *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        goto LABEL_5;
      }
    }
    else if (v20 < v19)
    {
      goto LABEL_19;
    }
LABEL_3:
    uint64_t v15 = (void *)(a10 - 32);
    uint64_t v14 = *(void **)(a10 - 32);
    *(void *)(a10 - 40) = v20;
    uint64_t v16 = v12;
    uint64_t v17 = a6;
    v12 -= 40;
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v18 = *(void *)(v16 - 24);
    *(void *)(a10 - 32) = *(void *)(v16 - 32);
    *(void *)(a10 - 24) = v18;
    *(void *)(a10 - 16) = *(void *)(v16 - 16);
    *(void *)(v16 - 32) = 0;
    *(void *)(v16 - 24) = 0;
    *(void *)(v16 - 16) = 0;
    *(_DWORD *)(a10 - 8) = *(_DWORD *)(v16 - 8);
    a10 -= 40;
    a6 = v17;
    if (v12 == a4) {
      return;
    }
  }
  uint64_t v28 = 0;
  do
  {
    uint64_t v29 = v12 + v28;
    uint64_t v30 = a10 + v28;
    uint64_t v32 = (void **)(a10 + v28 - 32);
    uint64_t v31 = *v32;
    *(void *)(a10 + v28 - 40) = *(void *)(v12 + v28 - 40);
    if (v31)
    {
      *(void *)(v30 - 24) = v31;
      operator delete(v31);
      *uint64_t v32 = 0;
      *(void *)(a10 + v28 - 24) = 0;
      *(void *)(a10 + v28 - 16) = 0;
    }
    *(_OWORD *)uint64_t v32 = *(_OWORD *)(v29 - 32);
    *(void *)(v30 - 16) = *(void *)(v29 - 16);
    *(void *)(v29 - 32) = 0;
    *(void *)(v29 - 24) = 0;
    *(void *)(v29 - 16) = 0;
    *(_DWORD *)(v30 - 8) = *(_DWORD *)(v29 - 8);
    v28 -= 40;
  }
  while (v12 + v28 != a4);
}

uint64_t *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__equal_to &>(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2 || a1 + 5 == a2) {
    return a2;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *a1;
  while (1)
  {
    uint64_t v6 = v5;
    uint64_t v7 = &a1[v4];
    uint64_t v5 = a1[v4 + 5];
    if (v6 == v5)
    {
      uint64_t v8 = (const void *)v7[1];
      size_t v9 = v7[2] - (void)v8;
      int v10 = (const void *)v7[6];
      if (v9 == v7[7] - (void)v10 && !memcmp(v8, v10, v9)) {
        break;
      }
    }
    v4 += 5;
    if (&a1[v4 + 5] == a2) {
      return a2;
    }
  }
  uint64_t v11 = &a1[v4];
  if (v11 != a2)
  {
    if (v11 + 10 != a2)
    {
      uint64_t v12 = v11 + 14;
      do
      {
        uint64_t v13 = *((void *)v12 - 4);
        if (*v11 != v13
          || (uint64_t v14 = (const void *)v11[1],
              size_t v15 = v11[2] - (void)v14,
              uint64_t v16 = (const void *)*((void *)v12 - 3),
              v15 != *((void *)v12 - 2) - (void)v16)
          || memcmp(v14, v16, v15))
        {
          v11[5] = v13;
          uint64_t v17 = (void *)v11[6];
          if (v17)
          {
            v11[7] = (uint64_t)v17;
            operator delete(v17);
            v11[6] = 0;
            v11[7] = 0;
            v11[8] = 0;
          }
          *((_OWORD *)v11 + 3) = *(_OWORD *)(v12 - 6);
          v11[8] = *((void *)v12 - 1);
          *((void *)v12 - 3) = 0;
          *((void *)v12 - 2) = 0;
          *((void *)v12 - 1) = 0;
          *((_DWORD *)v11 + 18) = *v12;
          v11 += 5;
        }
        uint64_t v18 = (uint64_t *)(v12 + 2);
        v12 += 10;
      }
      while (v18 != a2);
    }
    v11 += 5;
  }
  return v11;
}

void gtl::STLStableSortAndRemoveDuplicates<std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>>(uint64_t *a1, __n128 a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = (uint64_t)v4 - *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
  if (v5 < 1)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    while (1)
    {
      size_t v9 = operator new(40 * v8, v7);
      if (v9) {
        break;
      }
      BOOL v10 = v8 > 1;
      v8 >>= 1;
      if (!v10) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = v9;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(v3, v4, (uint64_t)&v16, v6, (uint64_t)v11, v8, a2);
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__equal_to &>((void *)*a1, (void *)a1[1]);
  uint64_t v13 = (void *)a1[1];
  if (v13 != v12)
  {
    uint64_t v14 = v12;
    while (v13 != v14)
    {
      size_t v15 = (void *)*(v13 - 4);
      if (v15)
      {
        *(v13 - 3) = v15;
        operator delete(v15);
      }
      v13 -= 5;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_23CC89EEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution*>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution*>>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 40;
  uint64_t v7 = (uint64_t)*a1 + 40 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v12 = a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  uint64_t v11 = v12;
  unint64_t v13 = *(void *)(v10 - 8);
  uint64_t v57 = v6;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v13] >> 3)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v7) >> 3)) >= a5)
    {
      uint64_t v18 = a3 + 40 * a5;
      uint64_t v19 = *(void *)(v10 - 8);
    }
    else
    {
      uint64_t v18 = a3 + 8 * ((uint64_t)(v13 - v7) >> 3);
      uint64_t v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>,operations_research::sat::SharedSolutionRepository<double>::Solution*,operations_research::sat::SharedSolutionRepository<double>::Solution*,operations_research::sat::SharedSolutionRepository<double>::Solution*>(v10, v18, a4, v13);
      a1[1] = (void *)v19;
      if ((uint64_t)(v13 - v7) < 1) {
        return v7;
      }
    }
    uint64_t v20 = v7 + 40 * a5;
    unint64_t v21 = v19 - 40 * a5;
    uint64_t v22 = v19;
    if (v21 < v13)
    {
      uint64_t v22 = v19;
      do
      {
        *(void *)uint64_t v22 = *(void *)v21;
        *(void *)(v22 + 8) = 0;
        *(void *)(v22 + 16) = 0;
        *(void *)(v22 + 24) = 0;
        *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
        *(void *)(v22 + 24) = *(void *)(v21 + 24);
        *(void *)(v21 + 8) = 0;
        *(void *)(v21 + 16) = 0;
        *(void *)(v21 + 24) = 0;
        *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
        v22 += 40;
        v21 += 40;
      }
      while (v21 < v13);
    }
    a1[1] = (void *)v22;
    if (v19 != v20)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - v20) >> 3);
      uint64_t v25 = &v5[40 * v6 + 40 * v24];
      uint64_t v26 = -40 * v24;
      do
      {
        BOOL v27 = &v25[v23];
        uint64_t v28 = v19 + v23;
        uint64_t v30 = (void **)(v19 + v23 - 32);
        uint64_t v29 = *v30;
        *(void *)(v19 + v23 - 40) = *(void *)&v25[v23 - 40];
        if (v29)
        {
          *(void *)(v28 - 24) = v29;
          operator delete(v29);
          void *v30 = 0;
          *(void *)(v19 + v23 - 24) = 0;
          *(void *)(v19 + v23 - 16) = 0;
        }
        *(_OWORD *)uint64_t v30 = *((_OWORD *)v27 - 2);
        *(void *)(v28 - 16) = *((void *)v27 - 2);
        *((void *)v27 - 4) = 0;
        *((void *)v27 - 3) = 0;
        *((void *)v27 - 2) = 0;
        *(_DWORD *)(v28 - 8) = *((_DWORD *)v27 - 2);
        v23 -= 40;
      }
      while (v26 != v23);
    }
    if (v18 != a3)
    {
      uint64_t v31 = (uint64_t)&v5[40 * v57 + 8];
      uint64_t v32 = a3 + 16;
      do
      {
        uint64_t v33 = v32 - 16;
        *(void *)(v31 - 8) = *(void *)(v32 - 16);
        if (v31 - 8 != v32 - 16) {
          std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)v31, *(char **)(v32 - 8), *(char **)v32, (uint64_t)(*(void *)v32 - *(void *)(v32 - 8)) >> 3);
        }
        *(_DWORD *)(v31 + 24) = *(_DWORD *)(v32 + 16);
        v31 += 40;
        v32 += 40;
      }
      while (v33 + 40 != v18);
    }
    return v7;
  }
  unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v13 - (void)v5) >> 3);
  if (v14 > 0x666666666666666) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v5) >> 3);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0x333333333333333) {
    unint64_t v16 = 0x666666666666666;
  }
  else {
    unint64_t v16 = v14;
  }
  BOOL v55 = v5;
  uint64_t v56 = a1;
  if (v16)
  {
    if (v16 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v17 = (char *)operator new(40 * v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v35 = 0;
  uint64_t v34 = &v17[40 * v6];
  uint64_t v60 = &v17[40 * v16];
  uint64_t v58 = 40 * a5;
  uint64_t v36 = &v34[40 * a5];
  do
  {
    uint64_t v38 = v34;
    uint64_t v39 = &v34[v35];
    uint64_t v40 = *(void *)(a3 + v35);
    *((void *)v39 + 1) = 0;
    *(void *)uint64_t v39 = v40;
    *((void *)v39 + 2) = 0;
    *((void *)v39 + 3) = 0;
    unint64_t v42 = *(unsigned char **)(a3 + v35 + 8);
    uint64_t v41 = *(unsigned char **)(a3 + v35 + 16);
    int64_t v43 = v41 - v42;
    if (v41 != v42)
    {
      if (v43 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int v44 = (char *)operator new(v41 - v42);
      *((void *)v39 + 1) = v44;
      int v37 = &v44[8 * (v43 >> 3)];
      *((void *)v39 + 2) = v44;
      *((void *)v39 + 3) = v37;
      memcpy(v44, v42, v43);
      *((void *)v39 + 2) = v37;
    }
    *((_DWORD *)v39 + 8) = *(_DWORD *)(a3 + v35 + 32);
    v35 += 40;
    uint64_t v34 = v38;
  }
  while (v58 != v35);
  uint64_t v45 = (char *)*v56;
  uint64_t v46 = v38;
  if (*v56 != (void *)v7)
  {
    uint64_t v47 = 40 * v6;
    int v48 = v55;
    do
    {
      uint64_t v49 = &v17[v47];
      uint64_t v50 = &v48[v47];
      *((void *)v49 - 5) = *(void *)&v48[v47 - 40];
      *((_OWORD *)v49 - 2) = *(_OWORD *)&v48[v47 - 32];
      *((void *)v49 - 2) = *(void *)&v48[v47 - 16];
      *((void *)v50 - 4) = 0;
      *((void *)v50 - 3) = 0;
      *((void *)v50 - 2) = 0;
      *((_DWORD *)v49 - 2) = *(_DWORD *)&v48[v47 - 8];
      v17 -= 40;
      v48 -= 40;
    }
    while (&v48[v47] != v45);
    uint64_t v46 = &v17[40 * v6];
  }
  BOOL v51 = v56[1];
  if (v51 != (void *)v7)
  {
    do
    {
      *(void *)uint64_t v36 = *(void *)v7;
      *((void *)v36 + 1) = 0;
      *((void *)v36 + 2) = 0;
      *((void *)v36 + 3) = 0;
      *(_OWORD *)(v36 + 8) = *(_OWORD *)(v7 + 8);
      *((void *)v36 + 3) = *(void *)(v7 + 24);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *((_DWORD *)v36 + 8) = *(_DWORD *)(v7 + 32);
      v36 += 40;
      v7 += 40;
    }
    while ((void *)v7 != v51);
    uint64_t v7 = (uint64_t)v56[1];
  }
  uint64_t v52 = *v56;
  *uint64_t v56 = v46;
  v56[1] = v36;
  v56[2] = v60;
  while ((void *)v7 != v52)
  {
    unint64_t v53 = *(void **)(v7 - 32);
    if (v53)
    {
      *(void *)(v7 - 24) = v53;
      operator delete(v53);
    }
    v7 -= 40;
  }
  if (v52) {
    operator delete(v52);
  }
  return (uint64_t)v34;
}

void sub_23CC8A3C0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_23CC8A3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19 = *(void **)(v16 + v17 + 8);
  if (v19)
  {
    *(void *)(v16 + v17 + 16) = v19;
    operator delete(v19);
  }
  a16 = v16 + v17;
  std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>,operations_research::sat::SharedSolutionRepository<double>::Solution*,operations_research::sat::SharedSolutionRepository<double>::Solution*,operations_research::sat::SharedSolutionRepository<double>::Solution*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)a4 = *(void *)v6;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      size_t v9 = *(unsigned char **)(v6 + 8);
      unint64_t v8 = *(unsigned char **)(v6 + 16);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = (char *)operator new(v8 - v9);
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = v11;
        uint64_t v7 = &v11[8 * (v10 >> 3)];
        *(void *)(a4 + 24) = v7;
        memcpy(v11, v9, v10);
        *(void *)(a4 + 16) = v7;
      }
      *(_DWORD *)(a4 + 32) = *(_DWORD *)(v6 + 32);
      a4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_23CC8A4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(void *)(v9 + 16) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 5);
      uint64_t v10 = *(void *)a1;
      if (v9 == *(void *)a1)
      {
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = *(void *)(a1 + 16);
        if (v11 == v12) {
          return;
        }
        uint64_t v13 = 0;
        uint64_t v14 = *(a2 - 4);
        while (1)
        {
          unint64_t v15 = (double *)(v14 + v13);
          if (v14 + v13 == *(a2 - 3)) {
            break;
          }
          double v16 = *(double *)(v11 + v13);
          if (*v15 < v16) {
            break;
          }
          v13 += 8;
          if (v16 < *v15 || v13 + v11 == v12) {
            return;
          }
        }
      }
      else
      {
        if (v9 >= *(void *)a1) {
          return;
        }
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = *(void *)(a1 + 16);
      }
      uint64_t v26 = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      int v27 = *(_DWORD *)(a1 + 32);
      *(void *)a1 = *(a2 - 5);
      *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 - 2);
      *(void *)(a1 + 24) = *(a2 - 2);
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 2);
      *(a2 - 5) = v10;
      *(a2 - 4) = v11;
      *(a2 - 3) = v12;
      *(a2 - 2) = v26;
      *((_DWORD *)a2 - 2) = v27;
      return;
    }
    if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>((void *)a1, a2);
    }
    else
    {
      uint64_t v22 = a4 >> 1;
      uint64_t v23 = a1 + 40 * (a4 >> 1);
      if ((uint64_t)a4 <= a6)
      {
        v28.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, (__int8 *)(a1 + 40 * (a4 >> 1)), a3, a4 >> 1, a5, a7);
        unint64_t v29 = a4 - v22;
        uint64_t v30 = a5 + 40 * v22;
        v31.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1 + 40 * (a4 >> 1), (__int8 *)a2, a3, v29, v30, v28);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<double>::Solution *,operations_research::sat::SharedSolutionRepository<double>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a5, v30, v30, a5 + 40 * a4, a1, v31);
        if (a5)
        {
          unint64_t v32 = a4;
          unint64_t v33 = 0;
          uint64_t v34 = (void *)(a5 + 16);
          do
          {
            uint64_t v35 = (void *)*(v34 - 1);
            if (v35)
            {
              *uint64_t v34 = v35;
              operator delete(v35);
              unint64_t v32 = a4;
            }
            ++v33;
            v34 += 5;
          }
          while (v33 < v32);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, a1 + 40 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        uint64_t v24 = a4 - v22;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(v23, a2, a3, v24, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, v23, (uint64_t)a2, a3, v22, v24, a5, a6, v25);
      }
    }
  }
}

void sub_23CC8A780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 5;
    if (a1 + 5 != a2)
    {
      uint64_t v5 = a1;
      do
      {
        uint64_t v7 = v5;
        uint64_t v5 = v4;
        uint64_t v8 = *v4;
        uint64_t v9 = *v7;
        if (v8 == *v7)
        {
          uint64_t v10 = v7[1];
          uint64_t v11 = v7[2];
          if (v10 != v11)
          {
            uint64_t v12 = 0;
            uint64_t v14 = (double *)v7[6];
            uint64_t v13 = (double *)v7[7];
            do
            {
              unint64_t v15 = &v14[v12];
              if (&v14[v12] == v13) {
                goto LABEL_20;
              }
              double v16 = *(double *)(v10 + v12 * 8);
              if (*v15 < v16) {
                goto LABEL_20;
              }
              ++v12;
            }
            while (v16 >= *v15 && v12 * 8 + v10 != v11);
          }
        }
        else if (v8 < *v7)
        {
          uint64_t v14 = (double *)v7[6];
          uint64_t v13 = (double *)v7[7];
LABEL_20:
          uint64_t v18 = v7[8];
          v7[6] = 0;
          v7[7] = 0;
          v7[8] = 0;
          int v19 = *((_DWORD *)v7 + 18);
          uint64_t v20 = v5;
          unint64_t v21 = (void *)v5[1];
          uint64_t v22 = v7;
          *uint64_t v5 = v9;
          if (v21)
          {
            v5[2] = v21;
            operator delete(v21);
            v5[2] = 0;
            v5[3] = 0;
          }
          while (1)
          {
            *(_OWORD *)(v20 + 1) = *(_OWORD *)(v22 + 1);
            v20[3] = v22[3];
            v22[1] = 0;
            v22[2] = 0;
            v22[3] = 0;
            *((_DWORD *)v20 + 8) = *((_DWORD *)v22 + 8);
            if (v22 == a1) {
              break;
            }
            uint64_t v23 = *(v22 - 5);
            if (v8 == v23)
            {
              uint64_t v25 = *(v22 - 4);
              uint64_t v24 = *(v22 - 3);
              if (v25 == v24)
              {
LABEL_4:
                uint64_t v6 = v22;
                goto LABEL_5;
              }
              uint64_t v26 = v25 + 8;
              int v27 = v14;
              while (v27 != v13)
              {
                double v28 = *v27;
                double v29 = *(double *)(v26 - 8);
                if (*v27 < v29) {
                  break;
                }
                ++v27;
                BOOL v30 = v29 < v28 || v26 == v24;
                v26 += 8;
                if (v30) {
                  goto LABEL_4;
                }
              }
              uint64_t v20 = v22;
              v22 -= 5;
              void *v20 = v23;
            }
            else
            {
              uint64_t v20 = v22;
              if (v8 >= v23) {
                goto LABEL_4;
              }
              v22 -= 5;
              void *v20 = v23;
            }
          }
          uint64_t v6 = a1;
LABEL_5:
          *uint64_t v6 = v8;
          v22[1] = v14;
          void v6[2] = v13;
          v6[3] = v18;
          *((_DWORD *)v6 + 8) = v19;
        }
        uint64_t v4 = v5 + 5;
      }
      while (v5 + 5 != a2);
    }
  }
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, __int8 *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  switch(a4)
  {
    case 0uLL:
      return a6.n128_f64[0];
    case 2uLL:
      uint64_t v10 = *((void *)a2 - 5);
      if (v10 == *(void *)a1)
      {
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v11 = *(void *)(a1 + 16);
        if (v12 != v11)
        {
          uint64_t v13 = (double *)*((void *)a2 - 4);
          uint64_t v14 = v12 + 8;
          while (v13 != *((double **)a2 - 3))
          {
            double v15 = *v13;
            double v16 = *(double *)(v14 - 8);
            if (*v13 < v16) {
              break;
            }
            ++v13;
            BOOL v17 = v16 < v15 || v14 == v11;
            v14 += 8;
            if (v17) {
              goto LABEL_23;
            }
          }
          goto LABEL_22;
        }
      }
      else if (v10 < *(void *)a1)
      {
LABEL_22:
        *(void *)a5 = v10;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
        *(_OWORD *)(a5 + 8) = *((_OWORD *)a2 - 2);
        *(void *)(a5 + 24) = *((void *)a2 - 2);
        *((void *)a2 - 3) = 0;
        *((void *)a2 - 2) = 0;
        *((void *)a2 - 4) = 0;
        *(_DWORD *)(a5 + 32) = *((_DWORD *)a2 - 2);
        uint64_t v19 = *(void *)a1;
        *(void *)(a5 + 56) = 0;
        *(void *)(a5 + 64) = 0;
        *(void *)(a5 + 40) = v19;
        *(void *)(a5 + 48) = 0;
        a6 = *(__n128 *)(a1 + 8);
        *(__n128 *)(a5 + 48) = a6;
        *(void *)(a5 + 64) = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        int v20 = *(_DWORD *)(a1 + 32);
LABEL_24:
        *(_DWORD *)(a5 + 72) = v20;
        return a6.n128_f64[0];
      }
LABEL_23:
      *(void *)a5 = *(void *)a1;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      uint64_t v21 = *((void *)a2 - 5);
      *(void *)(a5 + 56) = 0;
      *(void *)(a5 + 64) = 0;
      *(void *)(a5 + 40) = v21;
      *(void *)(a5 + 48) = 0;
      a6 = *((__n128 *)a2 - 2);
      *(__n128 *)(a5 + 48) = a6;
      *(void *)(a5 + 64) = *((void *)a2 - 2);
      *((void *)a2 - 4) = 0;
      *((void *)a2 - 3) = 0;
      *((void *)a2 - 2) = 0;
      int v20 = *((_DWORD *)a2 - 2);
      goto LABEL_24;
    case 1uLL:
      *(void *)a5 = *(void *)a1;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      a6 = *(__n128 *)(a1 + 8);
      *(__n128 *)(a5 + 8) = a6;
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      break;
    default:
      if ((uint64_t)a4 > 8)
      {
        unint64_t v22 = a4 >> 1;
        uint64_t v23 = 40 * (a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, a1 + v23, a3, a4 >> 1, a5, a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1 + v23, a2, a3, a4 - v22, a5 + v23, a4 - v22);
        a6.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, (void *)(a1 + v23), a1 + v23, (uint64_t)a2, a5, v24).n128_u64[0];
      }
      else
      {
        a6.n128_u64[0] = std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, a2, a5, a6).n128_u64[0];
      }
      break;
  }
  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<double>::Solution *,operations_research::sat::SharedSolutionRepository<double>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if (a1 == a2)
  {
LABEL_23:
    if (a3 != a4)
    {
      uint64_t v20 = a5 + 16;
      do
      {
        uint64_t v21 = *(void **)(v20 - 8);
        *(void *)(v20 - 16) = *(void *)a3;
        if (v21)
        {
          *(void *)uint64_t v20 = v21;
          operator delete(v21);
          *(void *)(v20 - 8) = 0;
          *(void *)uint64_t v20 = 0;
          *(void *)(v20 + 8) = 0;
        }
        __n128 result = *(__n128 *)(a3 + 8);
        *(__n128 *)(v20 - 8) = result;
        *(void *)(v20 + 8) = *(void *)(a3 + 24);
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = 0;
        *(_DWORD *)(v20 + 16) = *(_DWORD *)(a3 + 32);
        v20 += 40;
        a3 += 40;
      }
      while (a3 != a4);
    }
    return result;
  }
  uint64_t v10 = a1;
  while (a3 != a4)
  {
    if (*(void *)a3 == *(void *)v10)
    {
      uint64_t v12 = *(void *)(v10 + 8);
      uint64_t v11 = *(void *)(v10 + 16);
      if (v12 != v11)
      {
        uint64_t v13 = *(double **)(a3 + 8);
        uint64_t v14 = v12 + 8;
        while (v13 != *(double **)(a3 + 16))
        {
          double v15 = *v13;
          double v16 = *(double *)(v14 - 8);
          if (*v13 < v16) {
            break;
          }
          ++v13;
          BOOL v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17) {
            goto LABEL_21;
          }
        }
        goto LABEL_17;
      }
LABEL_21:
      *(void *)a5 = *(void *)v10;
      uint64_t v19 = *(void **)(a5 + 8);
      if (v19)
      {
        *(void *)(a5 + 16) = v19;
        operator delete(v19);
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
      }
      __n128 result = *(__n128 *)(v10 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(v10 + 24);
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(v10 + 32);
      v10 += 40;
      a5 += 40;
      if (v10 == a2) {
        goto LABEL_23;
      }
    }
    else
    {
      if (*(void *)a3 >= *(void *)v10) {
        goto LABEL_21;
      }
LABEL_17:
      *(void *)a5 = *(void *)a3;
      uint64_t v18 = *(void **)(a5 + 8);
      if (v18)
      {
        *(void *)(a5 + 16) = v18;
        operator delete(v18);
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
      }
      __n128 result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if (v10 == a2) {
        goto LABEL_23;
      }
    }
  }
  if (v10 != a2)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = v10 + v22;
      uint64_t v24 = a5 + v22;
      *(void *)(a5 + v22) = *(void *)(v10 + v22);
      uint64_t v26 = (void **)(a5 + v22 + 8);
      uint64_t v25 = *v26;
      if (*v26)
      {
        *(void *)(v24 + 16) = v25;
        operator delete(v25);
        *uint64_t v26 = 0;
        *(void *)(a5 + v22 + 16) = 0;
        *(void *)(a5 + v22 + 24) = 0;
      }
      __n128 result = *(__n128 *)(v23 + 8);
      *(__n128 *)uint64_t v26 = result;
      *(void *)(v24 + 24) = *(void *)(v23 + 24);
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = 0;
      *(void *)(v23 + 24) = 0;
      *(_DWORD *)(v24 + 32) = *(_DWORD *)(v23 + 32);
      v22 += 40;
    }
    while (v23 + 40 != a2);
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 result)
{
  if (!a6) {
    return result;
  }
  uint64_t v9 = a8;
  uint64_t v10 = a6;
LABEL_4:
  if (v10 > v9 && a5 > v9)
  {
    if (!a5) {
      return result;
    }
    uint64_t v15 = *(void *)a2;
    while (1)
    {
      if (v15 == *(void *)a1)
      {
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v16 = *(void *)(a1 + 16);
        if (v17 != v16)
        {
          uint64_t v18 = *(unint64_t **)(a2 + 8);
          uint64_t v19 = v17 + 8;
          while (v18 != *(unint64_t **)(a2 + 16))
          {
            result.n128_u64[0] = *v18;
            double v20 = *(double *)(v19 - 8);
            if (*(double *)v18 < v20) {
              break;
            }
            ++v18;
            BOOL v21 = v20 < result.n128_f64[0] || v19 == v16;
            v19 += 8;
            if (v21) {
              goto LABEL_20;
            }
          }
LABEL_23:
          if (a5 < v10)
          {
            if (v10 >= 0) {
              uint64_t v22 = v10;
            }
            else {
              uint64_t v22 = v10 + 1;
            }
            uint64_t v23 = v22 >> 1;
            uint64_t v24 = (uint64_t *)(a2 + 40 * (v22 >> 1));
            uint64_t v25 = (uint64_t *)a1;
            if (a2 == a1)
            {
LABEL_28:
              uint64_t v26 = a3;
              uint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v25 - a1) >> 3);
              goto LABEL_41;
            }
            unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
            uint64_t v40 = *v24;
            uint64_t v25 = (uint64_t *)a1;
            while (2)
            {
              unint64_t v41 = v39 >> 1;
              unint64_t v42 = &v25[5 * (v39 >> 1)];
              if (v40 == *v42)
              {
                int64_t v43 = &v25[5 * v41];
                uint64_t v45 = v43[1];
                uint64_t v44 = v43[2];
                if (v45 != v44)
                {
                  uint64_t v46 = v45 + 8;
                  uint64_t v47 = *(double **)(a2 + 40 * v23 + 8);
                  while (v47 != *(double **)(a2 + 40 * v23 + 16))
                  {
                    double v48 = *v47;
                    double v49 = *(double *)(v46 - 8);
                    if (*v47 < v49) {
                      break;
                    }
                    ++v47;
                    BOOL v50 = v49 < v48 || v46 == v44;
                    v46 += 8;
                    if (v50) {
                      goto LABEL_45;
                    }
                  }
LABEL_46:
                  unint64_t v39 = v41;
                  if (!v41) {
                    goto LABEL_28;
                  }
                  continue;
                }
              }
              else if (v40 < *v42)
              {
                goto LABEL_46;
              }
              break;
            }
LABEL_45:
            uint64_t v25 = v42 + 5;
            unint64_t v41 = v39 + ~v41;
            goto LABEL_46;
          }
          if (a5 == 1)
          {
            uint64_t v59 = *(void *)(a1 + 24);
            __n128 result = *(__n128 *)(a1 + 8);
            *(void *)(a1 + 16) = 0;
            *(void *)(a1 + 24) = 0;
            *(void *)(a1 + 8) = 0;
            int v60 = *(_DWORD *)(a1 + 32);
            *(void *)a1 = *(void *)a2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
            *(void *)a2 = v15;
            *(__n128 *)(a2 + 8) = result;
            *(void *)(a2 + 24) = v59;
            *(_DWORD *)(a2 + 32) = v60;
            return result;
          }
          if (a5 >= 0) {
            uint64_t v28 = a5;
          }
          else {
            uint64_t v28 = a5 + 1;
          }
          uint64_t v27 = v28 >> 1;
          uint64_t v25 = (uint64_t *)(a1 + 40 * (v28 >> 1));
          uint64_t v24 = (uint64_t *)a2;
          if (a2 != a3)
          {
            unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
            uint64_t v30 = *v25;
            uint64_t v31 = a1 + 40 * v27;
            uint64_t v33 = *(void *)(v31 + 8);
            uint64_t v32 = *(void *)(v31 + 16);
            if (v33 == v32)
            {
              uint64_t v24 = (uint64_t *)a2;
              do
              {
                unint64_t v34 = v29 >> 1;
                uint64_t v35 = &v24[5 * (v29 >> 1)];
                uint64_t v37 = *v35;
                uint64_t v36 = v35 + 5;
                v29 += ~(v29 >> 1);
                if (v37 < v30) {
                  uint64_t v24 = v36;
                }
                else {
                  unint64_t v29 = v34;
                }
              }
              while (v29);
              goto LABEL_40;
            }
            uint64_t v51 = v33 + 8;
            uint64_t v24 = (uint64_t *)a2;
            while (2)
            {
              unint64_t v52 = v29 >> 1;
              unint64_t v53 = &v24[5 * (v29 >> 1)];
              if (*v53 == v30)
              {
                unsigned int v54 = (double *)v24[5 * v52 + 1];
                uint64_t v55 = v51;
                while (v54 != (double *)v24[5 * v52 + 2])
                {
                  double v56 = *v54;
                  double v57 = *(double *)(v55 - 8);
                  if (*v54 < v57) {
                    break;
                  }
                  ++v54;
                  BOOL v58 = v57 < v56 || v55 == v32;
                  v55 += 8;
                  if (v58) {
                    goto LABEL_62;
                  }
                }
LABEL_61:
                uint64_t v24 = v53 + 5;
                unint64_t v52 = v29 + ~v52;
              }
              else if (*v53 < v30)
              {
                goto LABEL_61;
              }
LABEL_62:
              unint64_t v29 = v52;
              if (!v52) {
                break;
              }
              continue;
            }
          }
LABEL_40:
          uint64_t v26 = a3;
          uint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v24 - a2) >> 3);
LABEL_41:
          a5 -= v27;
          v10 -= v23;
          uint64_t v38 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(v25, (uint64_t *)a2, v24);
          a3 = (uint64_t)v38;
          if (v27 + v23 >= a5 + v10)
          {
            uint64_t v14 = v26;
            uint64_t v9 = a8;
            std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(v38, v24, v14, a4, a5, v10, a7, a8);
            uint64_t v10 = v23;
            a5 = v27;
            a2 = (uint64_t)v25;
            if (!v23) {
              return result;
            }
          }
          else
          {
            std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, v25, v38, a4, v27, v23, a7, a8);
            a1 = a3;
            a3 = v26;
            uint64_t v9 = a8;
            a2 = (uint64_t)v24;
            if (!v10) {
              return result;
            }
          }
          goto LABEL_4;
        }
      }
      else if (v15 < *(void *)a1)
      {
        uint64_t v15 = *(void *)a1;
        goto LABEL_23;
      }
LABEL_20:
      a1 += 40;
      if (!--a5) {
        return result;
      }
    }
  }

  std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, a2, a3, result, a4, a5, v10, a7);
  return result;
}

__n128 std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, __int8 *a2, uint64_t a3, __n128 result)
{
  if ((__int8 *)a1 != a2)
  {
    uint64_t v6 = (__n128 *)a1;
    *(void *)a3 = *(void *)a1;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    __n128 result = *(__n128 *)(a1 + 8);
    *(__n128 *)(a3 + 8) = result;
    *(void *)(a3 + 24) = *(void *)(a1 + 24);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 32);
    uint64_t v7 = (__n128 *)(a1 + 40);
    if ((__int8 *)(a1 + 40) != a2)
    {
      uint64_t v8 = (int64_t *)a3;
      uint64_t v9 = (int64_t *)a3;
      do
      {
        while (1)
        {
          uint64_t v10 = v7;
          int64_t v12 = *v9;
          v9 += 5;
          int64_t v11 = v12;
          BOOL v13 = (int64_t)v10->n128_u64[0] < v12;
          if (v10->n128_u64[0] == v12) {
            break;
          }
          if (v13)
          {
            uint64_t v14 = v8[1];
            uint64_t v15 = v8[2];
            goto LABEL_19;
          }
LABEL_4:
          v8[5] = v10->n128_u64[0];
          v8[6] = 0;
          v8[7] = 0;
          v8[8] = 0;
          __n128 result = v6[3];
          *((__n128 *)v8 + 3) = result;
          v8[8] = v6[4].n128_i64[0];
          v6[3].n128_u64[0] = 0;
          v6[3].n128_u64[1] = 0;
          v6[4].n128_u64[0] = 0;
          *((_DWORD *)v8 + 18) = v6[4].n128_u32[2];
          uint64_t v7 = (__n128 *)((char *)v10 + 40);
          uint64_t v8 = v9;
          uint64_t v6 = v10;
          if (&v10[2].n128_i8[8] == a2) {
            return result;
          }
        }
        uint64_t v14 = v8[1];
        uint64_t v15 = v8[2];
        if (v14 == v15) {
          goto LABEL_4;
        }
        uint64_t v16 = 0;
        unint64_t v17 = v6[3].n128_u64[0];
        while (1)
        {
          uint64_t v18 = (double *)(v17 + v16);
          if (v17 + v16 == v6[3].n128_u64[1]) {
            break;
          }
          double v19 = *(double *)(v14 + v16);
          if (*v18 < v19) {
            break;
          }
          v16 += 8;
          if (v19 < *v18 || v16 + v14 == v15) {
            goto LABEL_4;
          }
        }
LABEL_19:
        v8[5] = v11;
        v8[6] = v14;
        uint64_t v21 = v8[3];
        v8[7] = v15;
        v8[8] = v21;
        v8[1] = 0;
        v8[2] = 0;
        v8[3] = 0;
        *((_DWORD *)v8 + 18) = *((_DWORD *)v8 + 8);
        uint64_t v22 = (int64_t *)a3;
        if (v8 != (int64_t *)a3)
        {
          uint64_t v23 = v8;
          do
          {
            int64_t v25 = *(v23 - 5);
            v23 -= 5;
            int64_t v24 = v25;
            BOOL v26 = (int64_t)v10->n128_u64[0] < v25;
            if (v10->n128_u64[0] == v25)
            {
              uint64_t v28 = *(v8 - 4);
              uint64_t v27 = *(v8 - 3);
              if (v28 == v27) {
                goto LABEL_37;
              }
              unint64_t v29 = (double *)v6[3].n128_u64[0];
              uint64_t v30 = v28 + 8;
              while (v29 != (double *)v6[3].n128_u64[1])
              {
                double v31 = *v29;
                double v32 = *(double *)(v30 - 8);
                if (*v29 < v32) {
                  break;
                }
                ++v29;
                BOOL v33 = v32 < v31 || v30 == v27;
                v30 += 8;
                if (v33) {
                  goto LABEL_37;
                }
              }
            }
            else if (!v26)
            {
LABEL_37:
              uint64_t v22 = v8;
              goto LABEL_38;
            }
            int64_t *v8 = v24;
            unint64_t v34 = (void *)v8[1];
            if (v34)
            {
              v8[2] = (int64_t)v34;
              operator delete(v34);
            }
            *(_OWORD *)(v8 + 1) = *((_OWORD *)v8 - 2);
            v8[3] = *(v8 - 2);
            *(v8 - 3) = 0;
            *(v8 - 2) = 0;
            *(v8 - 4) = 0;
            *((_DWORD *)v8 + 8) = *((_DWORD *)v8 - 2);
            uint64_t v8 = v23;
          }
          while (v23 != (int64_t *)a3);
          uint64_t v22 = (int64_t *)a3;
          *(void *)a3 = v10->n128_u64[0];
          uint64_t v36 = (void *)(a3 + 8);
          uint64_t v35 = *(void **)(a3 + 8);
          if (!v35) {
            goto LABEL_40;
          }
LABEL_39:
          v22[2] = (int64_t)v35;
          operator delete(v35);
          *uint64_t v36 = 0;
          v36[1] = 0;
          v36[2] = 0;
          goto LABEL_40;
        }
LABEL_38:
        int64_t *v22 = v10->n128_u64[0];
        uint64_t v36 = v22 + 1;
        uint64_t v35 = (void *)v22[1];
        if (v35) {
          goto LABEL_39;
        }
LABEL_40:
        __n128 result = v6[3];
        *(__n128 *)(v22 + 1) = result;
        v22[3] = v6[4].n128_i64[0];
        v6[3].n128_u64[0] = 0;
        v6[3].n128_u64[1] = 0;
        v6[4].n128_u64[0] = 0;
        *((_DWORD *)v22 + 8) = v6[4].n128_u32[2];
        uint64_t v7 = (__n128 *)((char *)v10 + 40);
        uint64_t v8 = v9;
        uint64_t v6 = v10;
      }
      while (&v10[2].n128_i8[8] != a2);
    }
  }
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if ((void *)a1 == a2)
  {
LABEL_20:
    while (a3 != a4)
    {
      *(void *)a5 = *(void *)a3;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      __n128 result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
    }
    return result;
  }
  while (a3 != a4)
  {
    if (*(void *)a3 == *(void *)a1)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 16);
      if (v7 != v6)
      {
        uint64_t v8 = *(double **)(a3 + 8);
        uint64_t v9 = v7 + 8;
        while (v8 != *(double **)(a3 + 16))
        {
          double v10 = *v8;
          double v11 = *(double *)(v9 - 8);
          if (*v8 < v11) {
            break;
          }
          ++v8;
          BOOL v12 = v11 < v10 || v9 == v6;
          v9 += 8;
          if (v12) {
            goto LABEL_3;
          }
        }
        goto LABEL_17;
      }
LABEL_3:
      *(void *)a5 = *(void *)a1;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      __n128 result = *(__n128 *)(a1 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      a1 += 40;
      a5 += 40;
      if ((void *)a1 == a2) {
        goto LABEL_20;
      }
    }
    else
    {
      if (*(void *)a3 >= *(void *)a1) {
        goto LABEL_3;
      }
LABEL_17:
      *(void *)a5 = *(void *)a3;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = 0;
      __n128 result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if ((void *)a1 == a2) {
        goto LABEL_20;
      }
    }
  }
  if ((void *)a1 != a2)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = a5 + v13;
      uint64_t v15 = (void *)(a1 + v13);
      *(void *)uint64_t v14 = *(void *)(a1 + v13);
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      __n128 result = *(__n128 *)(a1 + v13 + 8);
      *(__n128 *)(v14 + 8) = result;
      *(void *)(v14 + 24) = *(void *)(a1 + v13 + 24);
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = 0;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a1 + v13 + 32);
      v13 += 40;
    }
    while (v15 + 5 != a2);
  }
  return result;
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v21 = 0;
  if (a6 > a7)
  {
    uint64_t v11 = a8;
    if (a2 != a3)
    {
      unint64_t v12 = 0;
      uint64_t v11 = a8;
      uint64_t v13 = a2;
      do
      {
        *(void *)uint64_t v11 = *(void *)v13;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *(_OWORD *)(v11 + 8) = *(_OWORD *)(v13 + 8);
        *(void *)(v11 + 24) = *(void *)(v13 + 24);
        *(void *)(v13 + 8) = 0;
        *(void *)(v13 + 16) = 0;
        *(void *)(v13 + 24) = 0;
        *(_DWORD *)(v11 + 32) = *(_DWORD *)(v13 + 32);
        ++v12;
        v11 += 40;
        v13 += 40;
      }
      while (v13 != a3);
      unint64_t v21 = v12;
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>>(v11, v11, a8, a8, a2, a2, a1, a1, a3, a3);
    if (!a8) {
      return;
    }
LABEL_13:
    unint64_t v17 = v21;
    if (v21)
    {
      unint64_t v18 = 0;
      double v19 = (void *)(a8 + 16);
      do
      {
        double v20 = (void *)*(v19 - 1);
        if (v20)
        {
          *double v19 = v20;
          operator delete(v20);
          unint64_t v17 = v21;
        }
        ++v18;
        v19 += 5;
      }
      while (v18 < v17);
    }
    return;
  }
  uint64_t v14 = a8;
  if (a1 != a2)
  {
    unint64_t v15 = 0;
    uint64_t v14 = a8;
    uint64_t v16 = a1;
    do
    {
      *(void *)uint64_t v14 = *(void *)v16;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      a4 = *(__n128 *)(v16 + 8);
      *(__n128 *)(v14 + 8) = a4;
      *(void *)(v14 + 24) = *(void *)(v16 + 24);
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v16 + 32);
      ++v15;
      v14 += 40;
      v16 += 40;
    }
    while (v16 != a2);
    unint64_t v21 = v15;
  }
  std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<double>::Solution *,operations_research::sat::SharedSolutionRepository<double>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a8, v14, a2, a3, a1, a4);
  if (a8) {
    goto LABEL_13;
  }
}

void sub_23CC8B77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC8B790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<double>::Solution *,operations_research::sat::SharedSolutionRepository<double>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if (a1 == a2) {
    return result;
  }
  uint64_t v10 = a1;
  while (a3 != a4)
  {
    if (*(void *)a3 == *(void *)v10)
    {
      uint64_t v12 = *(void *)(v10 + 8);
      uint64_t v11 = *(void *)(v10 + 16);
      if (v12 != v11)
      {
        uint64_t v13 = *(double **)(a3 + 8);
        uint64_t v14 = v12 + 8;
        while (v13 != *(double **)(a3 + 16))
        {
          double v15 = *v13;
          double v16 = *(double *)(v14 - 8);
          if (*v13 < v16) {
            break;
          }
          ++v13;
          BOOL v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17) {
            goto LABEL_21;
          }
        }
        goto LABEL_17;
      }
LABEL_21:
      *(void *)a5 = *(void *)v10;
      double v19 = *(void **)(a5 + 8);
      if (v19)
      {
        *(void *)(a5 + 16) = v19;
        operator delete(v19);
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
      }
      __n128 result = *(__n128 *)(v10 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(v10 + 24);
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(v10 + 32);
      v10 += 40;
      a5 += 40;
      if (v10 == a2) {
        return result;
      }
    }
    else
    {
      if (*(void *)a3 >= *(void *)v10) {
        goto LABEL_21;
      }
LABEL_17:
      *(void *)a5 = *(void *)a3;
      unint64_t v18 = *(void **)(a5 + 8);
      if (v18)
      {
        *(void *)(a5 + 16) = v18;
        operator delete(v18);
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
      }
      __n128 result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(void *)(a5 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if (v10 == a2) {
        return result;
      }
    }
  }
  uint64_t v20 = 0;
  do
  {
    uint64_t v21 = v10 + v20;
    uint64_t v22 = a5 + v20;
    *(void *)(a5 + v20) = *(void *)(v10 + v20);
    int64_t v24 = (void **)(a5 + v20 + 8);
    uint64_t v23 = *v24;
    if (*v24)
    {
      *(void *)(v22 + 16) = v23;
      operator delete(v23);
      *int64_t v24 = 0;
      *(void *)(a5 + v20 + 16) = 0;
      *(void *)(a5 + v20 + 24) = 0;
    }
    __n128 result = *(__n128 *)(v21 + 8);
    *(__n128 *)int64_t v24 = result;
    *(void *)(v22 + 24) = *(void *)(v21 + 24);
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0;
    *(void *)(v21 + 24) = 0;
    *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
    v20 += 40;
  }
  while (v21 + 40 != a2);
  return result;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 == a4) {
    return;
  }
  uint64_t v12 = a2;
  while (a6 != a8)
  {
    uint64_t v17 = a6 - 40;
    uint64_t v19 = *(void *)(a6 - 40);
    uint64_t v20 = *(void *)(v12 - 40);
    if (v20 == v19)
    {
      uint64_t v22 = *(void *)(a6 - 32);
      uint64_t v21 = *(void *)(a6 - 24);
      if (v22 != v21)
      {
        uint64_t v23 = *(double **)(v12 - 32);
        uint64_t v24 = v22 + 8;
        while (v23 != *(double **)(v12 - 24))
        {
          double v25 = *v23;
          double v26 = *(double *)(v24 - 8);
          if (*v23 < v26) {
            break;
          }
          ++v23;
          BOOL v27 = v26 < v25 || v24 == v21;
          v24 += 8;
          if (v27) {
            goto LABEL_3;
          }
        }
LABEL_19:
        double v15 = (void *)(a10 - 32);
        uint64_t v14 = *(void **)(a10 - 32);
        *(void *)(a10 - 40) = v19;
        uint64_t v16 = a6;
        if (!v14) {
          goto LABEL_5;
        }
LABEL_4:
        *(void *)(a10 - 24) = v14;
        operator delete(v14);
        void *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        goto LABEL_5;
      }
    }
    else if (v20 < v19)
    {
      goto LABEL_19;
    }
LABEL_3:
    double v15 = (void *)(a10 - 32);
    uint64_t v14 = *(void **)(a10 - 32);
    *(void *)(a10 - 40) = v20;
    uint64_t v16 = v12;
    uint64_t v17 = a6;
    v12 -= 40;
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v18 = *(void *)(v16 - 24);
    *(void *)(a10 - 32) = *(void *)(v16 - 32);
    *(void *)(a10 - 24) = v18;
    *(void *)(a10 - 16) = *(void *)(v16 - 16);
    *(void *)(v16 - 32) = 0;
    *(void *)(v16 - 24) = 0;
    *(void *)(v16 - 16) = 0;
    *(_DWORD *)(a10 - 8) = *(_DWORD *)(v16 - 8);
    a10 -= 40;
    a6 = v17;
    if (v12 == a4) {
      return;
    }
  }
  uint64_t v28 = 0;
  do
  {
    uint64_t v29 = v12 + v28;
    uint64_t v30 = a10 + v28;
    double v32 = (void **)(a10 + v28 - 32);
    double v31 = *v32;
    *(void *)(a10 + v28 - 40) = *(void *)(v12 + v28 - 40);
    if (v31)
    {
      *(void *)(v30 - 24) = v31;
      operator delete(v31);
      *double v32 = 0;
      *(void *)(a10 + v28 - 24) = 0;
      *(void *)(a10 + v28 - 16) = 0;
    }
    *(_OWORD *)double v32 = *(_OWORD *)(v29 - 32);
    *(void *)(v30 - 16) = *(void *)(v29 - 16);
    *(void *)(v29 - 32) = 0;
    *(void *)(v29 - 24) = 0;
    *(void *)(v29 - 16) = 0;
    *(_DWORD *)(v30 - 8) = *(_DWORD *)(v29 - 8);
    v28 -= 40;
  }
  while (v12 + v28 != a4);
}

void *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__equal_to &>(void *a1, void *a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1 + 5;
  if (a1 + 5 == a2) {
    return a2;
  }
  uint64_t v4 = *a1;
  while (1)
  {
    uint64_t v5 = a1;
    a1 = v3;
    uint64_t v6 = v4;
    uint64_t v4 = *a1;
    if (v6 == *a1)
    {
      uint64_t v8 = (double *)v5[1];
      uint64_t v7 = (double *)v5[2];
      uint64_t v9 = (double *)v5[6];
      if ((char *)v7 - (char *)v8 == v5[7] - (void)v9) {
        break;
      }
    }
LABEL_4:
    uint64_t v3 = a1 + 5;
    if (a1 + 5 == a2) {
      return a2;
    }
  }
  if (v8 != v7)
  {
    while (*v8 == *v9)
    {
      ++v8;
      ++v9;
      if (v8 == v7) {
        goto LABEL_10;
      }
    }
    goto LABEL_4;
  }
LABEL_10:
  if (v5 != a2)
  {
    uint64_t v10 = v5 + 10;
    if (v5 + 10 != a2)
    {
      uint64_t v11 = v5 + 5;
      while (1)
      {
        uint64_t v12 = v11;
        uint64_t v11 = v10;
        uint64_t v13 = *v10;
        if (*v5 != v13) {
          goto LABEL_21;
        }
        double v15 = (double *)v5[1];
        uint64_t v14 = (double *)v5[2];
        uint64_t v16 = (double *)v12[6];
        if ((char *)v14 - (char *)v15 != v12[7] - (void)v16) {
          goto LABEL_21;
        }
        if (v15 != v14) {
          break;
        }
LABEL_14:
        uint64_t v10 = v11 + 5;
        if (v11 + 5 == a2) {
          goto LABEL_24;
        }
      }
      while (*v15 == *v16)
      {
        ++v15;
        ++v16;
        if (v15 == v14) {
          goto LABEL_14;
        }
      }
LABEL_21:
      v5[5] = v13;
      uint64_t v17 = (void *)v5[6];
      if (v17)
      {
        v5[7] = v17;
        operator delete(v17);
        v5[6] = 0;
        v5[7] = 0;
        v5[8] = 0;
      }
      *((_OWORD *)v5 + 3) = *((_OWORD *)v12 + 3);
      v5[8] = v12[8];
      v12[6] = 0;
      v12[7] = 0;
      v12[8] = 0;
      *((_DWORD *)v5 + 18) = *((_DWORD *)v12 + 18);
      v5 += 5;
      goto LABEL_14;
    }
LABEL_24:
    v5 += 5;
  }
  return v5;
}

void operations_research::sat::SynchronizationPoint::~SynchronizationPoint(operations_research::sat::SynchronizationPoint *this)
{
  *(void *)this = &unk_26F0C13D8;
  uint64_t v2 = (char *)this + 48;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *(void *)this = &unk_26F0BF840;
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_7:
    operator delete(*((void **)this + 1));
    return;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)this = &unk_26F0BF840;
  if (*((char *)this + 31) < 0) {
    goto LABEL_7;
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26F0C13D8;
  uint64_t v2 = (char *)this + 48;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *(void *)this = &unk_26F0BF840;
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *(void *)this = &unk_26F0BF840;
    if ((*((char *)this + 31) & 0x80000000) == 0)
    {
LABEL_5:
      JUMPOUT(0x23ECF2BC0);
    }
  }
  operator delete(*((void **)this + 1));
  goto LABEL_5;
}

uint64_t operations_research::sat::SynchronizationPoint::TaskIsAvailable(operations_research::sat::SynchronizationPoint *this)
{
  return 0;
}

void operations_research::sat::SynchronizationPoint::GenerateTask(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

uint64_t operations_research::sat::SynchronizationPoint::Synchronize(operations_research::sat::SynchronizationPoint *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void operations_research::sat::anonymous namespace'::FullProblemSolver::FullProblemSolver(uint64_t a1, long long *a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)a1 = &unk_26F0BF840;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_26F0C1428;
  *(void *)(a1 + 48) = a5;
  *(unsigned char *)(a1 + 56) = a4;
  std::make_unique[abi:ne180100]<operations_research::sat::Model,std::string const&>();
}

void sub_23CC8C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10)
{
  uint64_t v16 = *(void *)(v14 - 104);
  if (v16 == v11)
  {
  }
  else if (v16)
  {
    (*(void (**)(void))(*(void *)v16 + 40))(*(void *)(v14 - 104));
  }
  absl::lts_2020_02_25::Mutex::~Mutex(v13);
  std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100](v12, 0);
  *(void *)uint64_t v10 = a10;
  if (*(char *)(v10 + 31) < 0) {
    operator delete(*a9);
  }
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<operations_research::sat::Model,std::string const&>()
{
}

void sub_23CC8C510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x23ECF2BC0](v14, 0x1032C402B90307BLL);
  _Unwind_Resume(a1);
}

void *operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedBoundsManager *a3, operations_research::sat::Model *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v16, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 984);
    double v15 = (void *)google::LogMessage::stream((google::LogMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: shared_bounds_manager != nullptr ", 47);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v16);
  }
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a3);
  int v10 = operations_research::sat::SharedBoundsManager::RegisterNewId(a2, v9);
  uint64_t v11 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>((uint64_t)a3);
  __n128 result = operator new(0x38uLL);
  *__n128 result = &unk_26F0C1540;
  result[1] = this;
  result[2] = a2;
  result[3] = a3;
  result[4] = v7;
  *((_DWORD *)result + 10) = v10;
  result[6] = v8;
  uint64_t v17 = result;
  unint64_t v13 = v11[1];
  if (v13 >= v11[2])
  {
    uint64_t v14 = std::vector<std::function<BOOL ()(void)>>::__push_back_slow_path<std::function<BOOL ()(void)>>(v11, v16);
    __n128 result = v17;
    v11[1] = v14;
    if (result == v16)
    {
      return (void *)(*(uint64_t (**)(void *))(v16[0] + 32))(v16);
    }
    else if (result)
    {
      return (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
    }
  }
  else
  {
    *(void *)(v13 + 24) = result;
    v11[1] = v13 + 32;
  }
  return result;
}

void sub_23CC8C6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC8C70C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::anonymous namespace'::FullProblemSolver::~FullProblemSolver(operations_research::sat::_anonymous_namespace_::FullProblemSolver *this)
{
  *(void *)this = &unk_26F0C1428;
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80));
  std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  *(void *)this = &unk_26F0BF840;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F0C1428;
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80));
  std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  *(void *)this = &unk_26F0BF840;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

BOOL operations_research::sat::anonymous namespace'::FullProblemSolver::TaskIsAvailable(operations_research::sat::_anonymous_namespace_::FullProblemSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3 = *((void *)this + 6);
  if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v3 + 32), a2))
  {
    return 0;
  }
  if ((operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v3 + 16), v4) & 1) == 0)
  {
    uint64_t v8 = (absl::lts_2020_02_25 **)((char *)this + 80);
    absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80), v7);
    BOOL v5 = *((unsigned char *)this + 96) != 0;
    absl::lts_2020_02_25::Mutex::Unlock(v8, v9, v10, v11, v12, v13, v14, v15);
    return v5;
  }
  return 0;
}

void operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(operations_research::sat::_anonymous_namespace_::FullProblemSolver *this@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, void *a3@<X8>)
{
  BOOL v5 = (absl::lts_2020_02_25 **)((char *)this + 80);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80), a2);
  *((unsigned char *)this + 96) = 0;
  absl::lts_2020_02_25::Mutex::Unlock(v5, v6, v7, v8, v9, v10, v11, v12);
  *a3 = &unk_26F0C15D0;
  a3[1] = this;
  a3[3] = a3;
}

void operations_research::sat::anonymous namespace'::FullProblemSolver::Synchronize(operations_research::sat::_anonymous_namespace_::FullProblemSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3 = (absl::lts_2020_02_25 **)((char *)this + 80);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80), a2);
  double v4 = *((double *)this + 11);
  *((double *)this + 5) = v4 + *((double *)this + 5);
  BOOL v5 = *(absl::lts_2020_02_25::Mutex **)(*((void *)this + 6) + 16);
  absl::lts_2020_02_25::Mutex::Lock(v5, v6);
  *(double *)(*((void *)v5 + 1) + 112) = v4 + *(double *)(*((void *)v5 + 1) + 112);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v5, v7, v8, v9, v10, v11, v12, v13);
  *((void *)this + 11) = 0;
  absl::lts_2020_02_25::Mutex::Unlock(v3, v14, v15, v16, v17, v18, v19, v20);
}

void sub_23CC8C9B0(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void *std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t std::vector<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::__push_back_slow_path<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)> const&>(uint64_t *a1, void *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(32 * v7);
    uint64_t v9 = (uint64_t)&v8[32 * v3];
    uint64_t v25 = v9;
    uint64_t v26 = v9;
    uint64_t v28 = &v8[32 * v7];
    uint64_t v10 = (void *)a2[3];
    if (v10) {
      goto LABEL_10;
    }
LABEL_13:
    *(void *)(v9 + 24) = 0;
    goto LABEL_14;
  }
  uint64_t v9 = 32 * v3;
  uint64_t v25 = v9;
  uint64_t v26 = v9;
  uint64_t v28 = 0;
  uint64_t v10 = (void *)a2[3];
  if (!v10) {
    goto LABEL_13;
  }
LABEL_10:
  if (v10 == a2)
  {
    *(void *)(v9 + 24) = v9;
    (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v9);
    uint64_t v9 = v25;
    uint64_t v11 = v26 + 32;
    uint64_t v27 = v26 + 32;
    uint64_t v13 = (char *)*a1;
    uint64_t v12 = (char *)a1[1];
    if (v12 != (char *)*a1) {
      goto LABEL_15;
    }
LABEL_25:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v28;
    goto LABEL_33;
  }
  *(void *)(v9 + 24) = (*(uint64_t (**)(void *))(*v10 + 16))(v10);
LABEL_14:
  uint64_t v11 = v9 + 32;
  uint64_t v27 = v9 + 32;
  uint64_t v13 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == (char *)*a1) {
    goto LABEL_25;
  }
LABEL_15:
  uint64_t v14 = (char **)(v9 - 8);
  do
  {
    uint64_t v16 = (char *)*((void *)v12 - 1);
    uint64_t v17 = v12 - 32;
    uint64_t v15 = v14;
    if (!v16) {
      goto LABEL_17;
    }
    if (v17 != v16)
    {
      *uint64_t v14 = v16;
      uint64_t v15 = (char **)(v12 - 8);
LABEL_17:
      void *v15 = 0;
      goto LABEL_18;
    }
    *uint64_t v14 = (char *)(v14 - 3);
    (*(void (**)(void))(**((void **)v12 - 1) + 24))(*((void *)v12 - 1));
LABEL_18:
    v14 -= 4;
    uint64_t v12 = v17;
  }
  while (v17 != v13);
  uint64_t v18 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  uint64_t v19 = v14 + 1;
  uint64_t v11 = v27;
  *a1 = (uint64_t)v19;
  a1[1] = v27;
  a1[2] = (uint64_t)v28;
  if (v12 != v18)
  {
    uint64_t v20 = v12 - 32;
    uint64_t v21 = v12 - 32;
    do
    {
      uint64_t v23 = (char *)*((void *)v21 + 3);
      if (v21 == v23)
      {
        (*(void (**)(char *))(*(void *)v21 + 32))(v21);
      }
      else if (v23)
      {
        (*(void (**)(char *))(*(void *)v23 + 40))(v23);
      }
      v20 -= 32;
      BOOL v22 = v21 == v18;
      v21 -= 32;
    }
    while (!v22);
    uint64_t v12 = v18;
  }
LABEL_33:
  if (v12) {
    operator delete(v12);
  }
  return v11;
}

void sub_23CC8CCF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      *(void *)(a1 + 16) = i - 32;
      uint64_t v4 = *(void *)(i - 8);
      if (v4 != i - 32) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)(i - 32) + 32))(i - 32);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v3) {
        goto LABEL_8;
      }
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
LABEL_8:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F0C1478;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::operator()(uint64_t a1, int **a2)
{
  uint64_t v3 = a1;
  BOOL v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>(*(void *)(a1 + 24));
  int v227 = 0;
  int v228 = 0;
  int v229 = 0;
  int v224 = 0;
  std::string::size_type v225 = 0;
  int v226 = 0;
  int v221 = 0;
  uint64_t v222 = 0;
  uint64_t v223 = 0;
  std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v220 = 0;
  long long v219 = 0u;
  long long v218 = 0u;
  uint64_t v6 = *(void *)(v3 + 24);
  unint64_t v7 = *(void **)(v6 + 32);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v6 + 32;
  uint64_t v9 = *(void **)(v6 + 32);
  do
  {
    unint64_t v10 = v9[4];
    BOOL v11 = v10 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v10 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v9 + 1;
    }
    if (v11) {
      uint64_t v8 = (uint64_t)v9;
    }
    uint64_t v9 = (void *)*v12;
  }
  while (*v12);
  if (v8 != v6 + 32
    && *(void *)(v8 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
  {
    uint64_t v216 = *(void *)(v8 + 40);
  }
  else
  {
LABEL_12:
    uint64_t v216 = 0;
  }
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v214 = v3;
  if (*a2 != v13)
  {
    uint64_t v215 = a2[1];
    while (1)
    {
      unint64_t v16 = *v14 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v17 = v5[12];
      if (v16 >= (v5[13] - v17) >> 2) {
        goto LABEL_17;
      }
      int v18 = *(_DWORD *)(v17 + 4 * v16);
      if (v18 == -1) {
        goto LABEL_17;
      }
      uint64_t v19 = 0;
      unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v18)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + v18));
      unint64_t v20 = ((unint64_t)__p >> 12) ^ (v4 >> 7);
      uint64_t v21 = 0x101010101010101 * (v4 & 0x7F);
      for (unint64_t i = v20; ; unint64_t i = v19 + v23)
      {
        unint64_t v23 = i & v219;
        uint64_t v24 = *(void *)((char *)__p + v23);
        unint64_t v25 = ((v24 ^ v21) - 0x101010101010101) & ~(v24 ^ v21) & 0x8080808080808080;
        if (v25) {
          break;
        }
LABEL_24:
        if ((v24 & (~v24 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_27;
        }
        v19 += 8;
      }
      while (1)
      {
        unint64_t v26 = (v23 + (__clz(__rbit64(v25)) >> 3)) & v219;
        if (*(_DWORD *)(v218 + 4 * v26) == v18) {
          break;
        }
        v25 &= v25 - 1;
        if (!v25) {
          goto LABEL_24;
        }
      }
      if (v26 != (void)v219) {
        goto LABEL_17;
      }
LABEL_27:
      for (j = 0; ; unint64_t v20 = j + v28)
      {
        unint64_t v28 = v20 & v219;
        uint64_t v29 = *(void *)((char *)__p + v28);
        unint64_t v30 = ((v29 ^ v21) - 0x101010101010101) & ~(v29 ^ v21) & 0x8080808080808080;
        if (v30) {
          break;
        }
LABEL_31:
        if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v31 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&__p, v4);
          *(_DWORD *)(v218 + 4 * v31) = v18;
          goto LABEL_34;
        }
        j += 8;
      }
      while (*(_DWORD *)(v218 + 4 * ((v28 + (__clz(__rbit64(v30)) >> 3)) & v219)) != v18)
      {
        v30 &= v30 - 1;
        if (!v30) {
          goto LABEL_31;
        }
      }
LABEL_34:
      uint64_t v32 = *(void *)(v216 + 144);
      uint64_t v33 = *(void *)(v32 + 20 * (int)v16);
      uint64_t v34 = *(void *)(v32 + 20 * (int)(v16 | 1));
      uint64_t v35 = v228;
      if (v228 < v229)
      {
        *(_DWORD *)int v228 = v18;
        uint64_t v36 = (uint64_t)(v35 + 4);
        goto LABEL_55;
      }
      uint64_t v37 = v227;
      uint64_t v38 = (v228 - v227) >> 2;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v229 - v227;
      if ((v229 - v227) >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      unint64_t v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v39;
      if (v41) {
        break;
      }
      int64_t v43 = 0;
      uint64_t v44 = (char *)(4 * v38);
      *(_DWORD *)(4 * v38) = v18;
      uint64_t v36 = 4 * v38 + 4;
      if (v35 != v37) {
        goto LABEL_47;
      }
LABEL_53:
      int v227 = v44;
      int v228 = (char *)v36;
      int v229 = &v43[4 * v41];
      if (v37)
      {
        unsigned int v54 = v37;
        uint64_t v55 = v33;
        operator delete(v54);
        uint64_t v33 = v55;
      }
LABEL_55:
      int v228 = (char *)v36;
      double v56 = v225;
      if (v225 < v226)
      {
        *(void *)std::string::size_type v225 = v33;
        uint64_t v57 = (uint64_t)(v56 + 8);
        goto LABEL_76;
      }
      BOOL v58 = (char *)v224;
      int64_t v59 = v225 - (unsigned char *)v224;
      uint64_t v60 = (v225 - (unsigned char *)v224) >> 3;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61) {
        goto LABEL_264;
      }
      uint64_t v62 = v226 - (unsigned char *)v224;
      if ((v226 - (unsigned char *)v224) >> 2 > v61) {
        unint64_t v61 = v62 >> 2;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63)
      {
        if (v63 >> 61) {
          goto LABEL_262;
        }
        uint64_t v64 = v33;
        uint64_t v65 = (char *)operator new(8 * v63);
        int v66 = &v65[8 * v60];
        *(void *)int v66 = v64;
        uint64_t v57 = (uint64_t)(v66 + 8);
        if (v56 == v58) {
          goto LABEL_74;
        }
LABEL_68:
        unint64_t v67 = v56 - 8 - v58;
        if (v67 < 0x58) {
          goto LABEL_277;
        }
        if ((unint64_t)(v56 - &v65[v59]) < 0x20) {
          goto LABEL_277;
        }
        uint64_t v68 = (v67 >> 3) + 1;
        uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        int v70 = &v56[-v69];
        v66 -= v69;
        int v71 = &v65[8 * v60 - 16];
        int v72 = v56 - 16;
        uint64_t v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v74 = *(_OWORD *)v72;
          *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
          *(_OWORD *)int v71 = v74;
          v71 -= 32;
          v72 -= 32;
          v73 -= 4;
        }
        while (v73);
        double v56 = v70;
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_277:
          do
          {
            uint64_t v75 = *((void *)v56 - 1);
            v56 -= 8;
            *((void *)v66 - 1) = v75;
            v66 -= 8;
          }
          while (v56 != v58);
        }
        goto LABEL_74;
      }
      uint64_t v65 = 0;
      int v66 = (char *)(8 * v60);
      *(void *)(8 * v60) = v33;
      uint64_t v57 = 8 * v60 + 8;
      if (v56 != v58) {
        goto LABEL_68;
      }
LABEL_74:
      int v224 = v66;
      std::string::size_type v225 = (char *)v57;
      int v226 = &v65[8 * v63];
      if (v58) {
        operator delete(v58);
      }
LABEL_76:
      uint64_t v76 = -v34;
      std::string::size_type v225 = (char *)v57;
      int v77 = v222;
      if (v222 >= v223)
      {
        BOOL v78 = (char *)v221;
        int64_t v79 = v222 - (unsigned char *)v221;
        uint64_t v80 = (v222 - (unsigned char *)v221) >> 3;
        unint64_t v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 61) {
LABEL_264:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v82 = v223 - (unsigned char *)v221;
        if ((v223 - (unsigned char *)v221) >> 2 > v81) {
          unint64_t v81 = v82 >> 2;
        }
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v81;
        }
        if (v83)
        {
          if (v83 >> 61) {
LABEL_262:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          int v84 = (char *)operator new(8 * v83);
          uint64_t v85 = &v84[8 * v80];
          *(void *)uint64_t v85 = v76;
          uint64_t v15 = (uint64_t)(v85 + 8);
          if (v77 == v78) {
            goto LABEL_94;
          }
LABEL_88:
          unint64_t v86 = v77 - 8 - v78;
          if (v86 < 0x58) {
            goto LABEL_278;
          }
          if ((unint64_t)(v77 - &v84[v79]) < 0x20) {
            goto LABEL_278;
          }
          uint64_t v87 = (v86 >> 3) + 1;
          uint64_t v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          std::string::size_type v89 = &v77[-v88];
          v85 -= v88;
          int v90 = &v84[8 * v80 - 16];
          BOOL v91 = v77 - 16;
          uint64_t v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v93 = *(_OWORD *)v91;
            *((_OWORD *)v90 - 1) = *((_OWORD *)v91 - 1);
            *(_OWORD *)int v90 = v93;
            v90 -= 32;
            v91 -= 32;
            v92 -= 4;
          }
          while (v92);
          int v77 = v89;
          if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_278:
            do
            {
              uint64_t v94 = *((void *)v77 - 1);
              v77 -= 8;
              *((void *)v85 - 1) = v94;
              v85 -= 8;
            }
            while (v77 != v78);
          }
        }
        else
        {
          int v84 = 0;
          uint64_t v85 = (char *)(8 * v80);
          *(void *)(8 * v80) = v76;
          uint64_t v15 = 8 * v80 + 8;
          if (v77 != v78) {
            goto LABEL_88;
          }
        }
LABEL_94:
        int v221 = v85;
        uint64_t v222 = (char *)v15;
        uint64_t v223 = &v84[8 * v83];
        if (v78) {
          operator delete(v78);
        }
        goto LABEL_16;
      }
      *(void *)uint64_t v222 = v76;
      uint64_t v15 = (uint64_t)(v77 + 8);
LABEL_16:
      uint64_t v222 = (char *)v15;
      uint64_t v13 = v215;
LABEL_17:
      if (++v14 == v13)
      {
        uint64_t v3 = v214;
        uint64_t v6 = *(void *)(v214 + 24);
        unint64_t v7 = *(void **)(v6 + 32);
        goto LABEL_97;
      }
    }
    if (v41 >> 62) {
      goto LABEL_262;
    }
    uint64_t v42 = v33;
    int64_t v43 = operator new(4 * v41);
    uint64_t v33 = v42;
    uint64_t v44 = &v43[4 * v38];
    *(_DWORD *)uint64_t v44 = v18;
    uint64_t v36 = (uint64_t)(v44 + 4);
    if (v35 == v37) {
      goto LABEL_53;
    }
LABEL_47:
    unint64_t v45 = v35 - 4 - v37;
    if (v45 < 0x2C) {
      goto LABEL_279;
    }
    if ((unint64_t)(v37 - v43) < 0x20) {
      goto LABEL_279;
    }
    uint64_t v46 = (v45 >> 2) + 1;
    uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
    double v48 = &v35[-v47];
    v44 -= v47;
    double v49 = &v43[4 * v38 - 16];
    BOOL v50 = v35 - 16;
    uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *double v49 = v52;
      v49 -= 2;
      v50 -= 32;
      v51 -= 8;
    }
    while (v51);
    uint64_t v35 = v48;
    if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_279:
      do
      {
        int v53 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v44 - 1) = v53;
        v44 -= 4;
      }
      while (v35 != v37);
    }
    goto LABEL_53;
  }
LABEL_97:
  if (v7)
  {
    uint64_t v95 = v6 + 32;
    do
    {
      unint64_t v96 = v7[4];
      BOOL v97 = v96 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
      if (v96 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d) {
        std::string::size_type v98 = v7;
      }
      else {
        std::string::size_type v98 = v7 + 1;
      }
      if (v97) {
        uint64_t v95 = (uint64_t)v7;
      }
      unint64_t v7 = (void *)*v98;
    }
    while (*v98);
    if (v95 != v6 + 32
      && *(void *)(v95 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
    {
      uint64_t v99 = *(void *)(v95 + 40);
      int v100 = *(_DWORD *)(v3 + 16);
      int v101 = *(_DWORD *)(v99 + 12);
      if (v100 >= v101) {
        goto LABEL_236;
      }
LABEL_114:
      while (1)
      {
        int v104 = *(_DWORD *)(*(void *)(v99 + 72) + 4 * v100);
        unint64_t v105 = (uint64_t)v104 >> 1;
        uint64_t v106 = v5[9];
        if (v105 < (v5[10] - v106) >> 2)
        {
          int v107 = *(_DWORD *)(v106 + 4 * v105);
          if (v107 != -1)
          {
            uint64_t v108 = 0;
            unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v107)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v107));
            unint64_t v109 = ((unint64_t)__p >> 12) ^ (v4 >> 7);
            uint64_t v110 = 0x101010101010101 * (v4 & 0x7F);
            for (unint64_t k = v109; ; unint64_t k = v108 + v112)
            {
              unint64_t v112 = k & v219;
              uint64_t v113 = *(void *)((char *)__p + v112);
              unint64_t v114 = ((v113 ^ v110) - 0x101010101010101) & ~(v113 ^ v110) & 0x8080808080808080;
              if (v114) {
                break;
              }
LABEL_120:
              if ((v113 & (~v113 << 6) & 0x8080808080808080) != 0) {
                goto LABEL_123;
              }
              v108 += 8;
            }
            while (1)
            {
              unint64_t v115 = (v112 + (__clz(__rbit64(v114)) >> 3)) & v219;
              if (*(_DWORD *)(v218 + 4 * v115) == v107) {
                break;
              }
              v114 &= v114 - 1;
              if (!v114) {
                goto LABEL_120;
              }
            }
            if (v115 == (void)v219) {
              break;
            }
          }
        }
LABEL_113:
        *(_DWORD *)(v3 + 16) = ++v100;
        if (v100 >= v101)
        {
          uint64_t v6 = *(void *)(v3 + 24);
          goto LABEL_236;
        }
      }
LABEL_123:
      for (m = 0; ; unint64_t v109 = m + v117)
      {
        unint64_t v117 = v109 & v219;
        uint64_t v118 = *(void *)((char *)__p + (v109 & v219));
        unint64_t v119 = ((v118 ^ v110) - 0x101010101010101) & ~(v118 ^ v110) & 0x8080808080808080;
        if (v119) {
          break;
        }
LABEL_127:
        if ((v118 & (~v118 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v120 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&__p, v4);
          *(_DWORD *)(v218 + 4 * v120) = v107;
          goto LABEL_130;
        }
        m += 8;
      }
      while (*(_DWORD *)(v218 + 4 * ((v117 + (__clz(__rbit64(v119)) >> 3)) & v219)) != v107)
      {
        v119 &= v119 - 1;
        if (!v119) {
          goto LABEL_127;
        }
      }
LABEL_130:
      int v121 = v228;
      if (v228 < v229)
      {
        *(_DWORD *)int v228 = v107;
        uint64_t v122 = (uint64_t)(v121 + 4);
        goto LABEL_152;
      }
      size_t v123 = v227;
      uint64_t v124 = (v228 - v227) >> 2;
      unint64_t v125 = v124 + 1;
      if ((unint64_t)(v124 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v126 = v229 - v227;
      if ((v229 - v227) >> 1 > v125) {
        unint64_t v125 = v126 >> 1;
      }
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v127 = v125;
      }
      if (v127)
      {
        if (v127 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v128 = operator new(4 * v127);
        uint64_t v129 = &v128[4 * v124];
        *(_DWORD *)uint64_t v129 = v107;
        uint64_t v122 = (uint64_t)(v129 + 4);
        if (v121 != v123)
        {
LABEL_141:
          unint64_t v130 = v121 - 4 - v123;
          if (v130 >= 0x2C)
          {
            uint64_t v3 = v214;
            if ((unint64_t)(v123 - v128) >= 0x20)
            {
              uint64_t v131 = (v130 >> 2) + 1;
              uint64_t v132 = 4 * (v131 & 0x7FFFFFFFFFFFFFF8);
              int v133 = &v121[-v132];
              v129 -= v132;
              BOOL v134 = &v128[4 * v124 - 16];
              std::vector<std::string>::pointer v135 = v121 - 16;
              uint64_t v136 = v131 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v137 = *(_OWORD *)v135;
                *(v134 - 1) = *((_OWORD *)v135 - 1);
                *BOOL v134 = v137;
                v134 -= 2;
                v135 -= 32;
                v136 -= 8;
              }
              while (v136);
              int v121 = v133;
              if (v131 == (v131 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_150:
                int v227 = v129;
                int v228 = (char *)v122;
                int v229 = &v128[4 * v127];
                if (v123) {
                  operator delete(v123);
                }
LABEL_152:
                int v228 = (char *)v122;
                int v139 = v225;
                if ((v104 & 1) == 0)
                {
                  if (v225 < v226)
                  {
                    *(void *)std::string::size_type v225 = 1;
                    uint64_t v140 = (uint64_t)(v139 + 8);
LABEL_186:
                    std::string::size_type v225 = (char *)v140;
                    size_t v167 = v222;
                    if (v222 >= v223)
                    {
                      int v168 = (char *)v221;
                      int64_t v169 = v222 - (unsigned char *)v221;
                      uint64_t v170 = (v222 - (unsigned char *)v221) >> 3;
                      unint64_t v171 = v170 + 1;
                      if ((unint64_t)(v170 + 1) >> 61) {
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v172 = v223 - (unsigned char *)v221;
                      if ((v223 - (unsigned char *)v221) >> 2 > v171) {
                        unint64_t v171 = v172 >> 2;
                      }
                      if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v173 = v171;
                      }
                      if (v173)
                      {
                        if (v173 >> 61) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        std::string::size_type v174 = (char *)operator new(8 * v173);
                        uint64_t v175 = &v174[8 * v170];
                        *(void *)uint64_t v175 = 1;
                        uint64_t v103 = (uint64_t)(v175 + 8);
                        if (v167 == v168) {
                          goto LABEL_233;
                        }
                        goto LABEL_219;
                      }
                      std::string::size_type v174 = 0;
                      uint64_t v175 = (char *)(8 * v170);
                      *(void *)(8 * v170) = 1;
                      uint64_t v103 = 8 * v170 + 8;
                      if (v167 != v168)
                      {
LABEL_219:
                        unint64_t v190 = v167 - 8 - v168;
                        if (v190 < 0x58) {
                          goto LABEL_280;
                        }
                        if ((unint64_t)(v167 - &v174[v169]) < 0x20) {
                          goto LABEL_280;
                        }
                        uint64_t v191 = (v190 >> 3) + 1;
                        uint64_t v192 = 8 * (v191 & 0x3FFFFFFFFFFFFFFCLL);
                        uint64_t v193 = &v167[-v192];
                        v175 -= v192;
                        int v194 = &v174[8 * v170 - 16];
                        int v195 = v167 - 16;
                        uint64_t v196 = v191 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v197 = *(_OWORD *)v195;
                          *((_OWORD *)v194 - 1) = *((_OWORD *)v195 - 1);
                          *(_OWORD *)int v194 = v197;
                          v194 -= 32;
                          v195 -= 32;
                          v196 -= 4;
                        }
                        while (v196);
                        size_t v167 = v193;
                        if (v191 != (v191 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_280:
                          do
                          {
                            uint64_t v198 = *((void *)v167 - 1);
                            v167 -= 8;
                            *((void *)v175 - 1) = v198;
                            v175 -= 8;
                          }
                          while (v167 != v168);
                        }
                      }
LABEL_233:
                      int v221 = v175;
                      uint64_t v222 = (char *)v103;
                      uint64_t v223 = &v174[8 * v173];
                      if (v168) {
                        operator delete(v168);
                      }
                      goto LABEL_112;
                    }
                    *(void *)uint64_t v222 = 1;
                    uint64_t v102 = (uint64_t)(v167 + 8);
                    goto LABEL_111;
                  }
                  uint64_t v142 = (char *)v224;
                  int64_t v143 = v225 - (unsigned char *)v224;
                  uint64_t v144 = (v225 - (unsigned char *)v224) >> 3;
                  unint64_t v145 = v144 + 1;
                  if ((unint64_t)(v144 + 1) >> 61) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v146 = v226 - (unsigned char *)v224;
                  if ((v226 - (unsigned char *)v224) >> 2 > v145) {
                    unint64_t v145 = v146 >> 2;
                  }
                  if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v147 = v145;
                  }
                  if (v147)
                  {
                    if (v147 >> 61) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    int v148 = (char *)operator new(8 * v147);
                    size_t v149 = &v148[8 * v144];
                    *(void *)size_t v149 = 1;
                    uint64_t v140 = (uint64_t)(v149 + 8);
                    if (v139 == v142) {
                      goto LABEL_184;
                    }
                  }
                  else
                  {
                    int v148 = 0;
                    size_t v149 = (char *)(8 * v144);
                    *(void *)(8 * v144) = 1;
                    uint64_t v140 = 8 * v144 + 8;
                    if (v139 == v142)
                    {
LABEL_184:
                      int v224 = v149;
                      std::string::size_type v225 = (char *)v140;
                      int v226 = &v148[8 * v147];
                      if (v142) {
                        operator delete(v142);
                      }
                      goto LABEL_186;
                    }
                  }
                  unint64_t v158 = v139 - 8 - v142;
                  if (v158 < 0x58) {
                    goto LABEL_281;
                  }
                  if ((unint64_t)(v139 - &v148[v143]) < 0x20) {
                    goto LABEL_281;
                  }
                  uint64_t v159 = (v158 >> 3) + 1;
                  uint64_t v160 = 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
                  size_t v161 = &v139[-v160];
                  v149 -= v160;
                  uint64_t v162 = &v148[8 * v144 - 16];
                  size_t v163 = v139 - 16;
                  uint64_t v164 = v159 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v165 = *(_OWORD *)v163;
                    *((_OWORD *)v162 - 1) = *((_OWORD *)v163 - 1);
                    *(_OWORD *)uint64_t v162 = v165;
                    v162 -= 32;
                    v163 -= 32;
                    v164 -= 4;
                  }
                  while (v164);
                  int v139 = v161;
                  if (v159 != (v159 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_281:
                    do
                    {
                      uint64_t v166 = *((void *)v139 - 1);
                      v139 -= 8;
                      *((void *)v149 - 1) = v166;
                      v149 -= 8;
                    }
                    while (v139 != v142);
                  }
                  goto LABEL_184;
                }
                if (v225 < v226)
                {
                  *(void *)std::string::size_type v225 = 0;
                  uint64_t v141 = (uint64_t)(v139 + 8);
LABEL_206:
                  std::string::size_type v225 = (char *)v141;
                  int64_t v185 = v222;
                  if (v222 >= v223)
                  {
                    int v168 = (char *)v221;
                    int64_t v186 = v222 - (unsigned char *)v221;
                    uint64_t v187 = (v222 - (unsigned char *)v221) >> 3;
                    unint64_t v188 = v187 + 1;
                    if ((unint64_t)(v187 + 1) >> 61) {
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v189 = v223 - (unsigned char *)v221;
                    if ((v223 - (unsigned char *)v221) >> 2 > v188) {
                      unint64_t v188 = v189 >> 2;
                    }
                    if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v173 = v188;
                    }
                    if (v173)
                    {
                      if (v173 >> 61) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      std::string::size_type v174 = (char *)operator new(8 * v173);
                      uint64_t v175 = &v174[8 * v187];
                      *(void *)uint64_t v175 = 0;
                      uint64_t v103 = (uint64_t)(v175 + 8);
                      if (v185 == v168) {
                        goto LABEL_233;
                      }
                    }
                    else
                    {
                      std::string::size_type v174 = 0;
                      uint64_t v175 = (char *)(8 * v187);
                      *(void *)(8 * v187) = 0;
                      uint64_t v103 = 8 * v187 + 8;
                      if (v185 == v168) {
                        goto LABEL_233;
                      }
                    }
                    unint64_t v199 = v185 - 8 - v168;
                    if (v199 < 0x58) {
                      goto LABEL_282;
                    }
                    if ((unint64_t)(v185 - &v174[v186]) < 0x20) {
                      goto LABEL_282;
                    }
                    uint64_t v200 = (v199 >> 3) + 1;
                    uint64_t v201 = 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
                    BOOL v202 = &v185[-v201];
                    v175 -= v201;
                    uint64_t v203 = &v174[8 * v187 - 16];
                    uint64_t v204 = v185 - 16;
                    uint64_t v205 = v200 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v206 = *(_OWORD *)v204;
                      *((_OWORD *)v203 - 1) = *((_OWORD *)v204 - 1);
                      *(_OWORD *)uint64_t v203 = v206;
                      v203 -= 32;
                      v204 -= 32;
                      v205 -= 4;
                    }
                    while (v205);
                    int64_t v185 = v202;
                    if (v200 != (v200 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_282:
                      do
                      {
                        uint64_t v207 = *((void *)v185 - 1);
                        v185 -= 8;
                        *((void *)v175 - 1) = v207;
                        v175 -= 8;
                      }
                      while (v185 != v168);
                    }
                    goto LABEL_233;
                  }
                  *(void *)uint64_t v222 = 0;
                  uint64_t v102 = (uint64_t)(v185 + 8);
LABEL_111:
                  uint64_t v103 = v102;
LABEL_112:
                  uint64_t v222 = (char *)v103;
                  int v100 = *(_DWORD *)(v3 + 16);
                  int v101 = *(_DWORD *)(v99 + 12);
                  goto LABEL_113;
                }
                int v150 = (char *)v224;
                int64_t v151 = v225 - (unsigned char *)v224;
                uint64_t v152 = (v225 - (unsigned char *)v224) >> 3;
                unint64_t v153 = v152 + 1;
                if ((unint64_t)(v152 + 1) >> 61) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v154 = v226 - (unsigned char *)v224;
                if ((v226 - (unsigned char *)v224) >> 2 > v153) {
                  unint64_t v153 = v154 >> 2;
                }
                if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v155 = v153;
                }
                if (v155)
                {
                  if (v155 >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  int v156 = (char *)operator new(8 * v155);
                  int v157 = &v156[8 * v152];
                  *(void *)int v157 = 0;
                  uint64_t v141 = (uint64_t)(v157 + 8);
                  if (v139 == v150) {
                    goto LABEL_204;
                  }
                }
                else
                {
                  int v156 = 0;
                  int v157 = (char *)(8 * v152);
                  *(void *)(8 * v152) = 0;
                  uint64_t v141 = 8 * v152 + 8;
                  if (v139 == v150)
                  {
LABEL_204:
                    int v224 = v157;
                    std::string::size_type v225 = (char *)v141;
                    int v226 = &v156[8 * v155];
                    if (v150) {
                      operator delete(v150);
                    }
                    goto LABEL_206;
                  }
                }
                unint64_t v176 = v139 - 8 - v150;
                if (v176 < 0x58) {
                  goto LABEL_283;
                }
                if ((unint64_t)(v139 - &v156[v151]) < 0x20) {
                  goto LABEL_283;
                }
                uint64_t v177 = (v176 >> 3) + 1;
                uint64_t v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v179 = &v139[-v178];
                v157 -= v178;
                size_t v180 = &v156[8 * v152 - 16];
                uint64_t v181 = v139 - 16;
                uint64_t v182 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v183 = *(_OWORD *)v181;
                  *((_OWORD *)v180 - 1) = *((_OWORD *)v181 - 1);
                  *(_OWORD *)size_t v180 = v183;
                  v180 -= 32;
                  v181 -= 32;
                  v182 -= 4;
                }
                while (v182);
                int v139 = v179;
                if (v177 != (v177 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_283:
                  do
                  {
                    uint64_t v184 = *((void *)v139 - 1);
                    v139 -= 8;
                    *((void *)v157 - 1) = v184;
                    v157 -= 8;
                  }
                  while (v139 != v150);
                }
                goto LABEL_204;
              }
            }
          }
          else
          {
            uint64_t v3 = v214;
          }
          do
          {
            int v138 = *((_DWORD *)v121 - 1);
            v121 -= 4;
            *((_DWORD *)v129 - 1) = v138;
            v129 -= 4;
          }
          while (v121 != v123);
          goto LABEL_150;
        }
      }
      else
      {
        uint64_t v128 = 0;
        uint64_t v129 = (char *)(4 * v124);
        *(_DWORD *)(4 * v124) = v107;
        uint64_t v122 = 4 * v124 + 4;
        if (v121 != v123) {
          goto LABEL_141;
        }
      }
      uint64_t v3 = v214;
      goto LABEL_150;
    }
  }
  uint64_t v99 = 0;
  int v100 = *(_DWORD *)(v3 + 16);
  int v101 = MEMORY[0xC];
  if (v100 < MEMORY[0xC]) {
    goto LABEL_114;
  }
LABEL_236:
  if (v227 != v228)
  {
    operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(*(void *)(v3 + 32), *(absl::lts_2020_02_25::Mutex **)(v3 + 8), v6, (uint64_t *)&v227, &v224, &v221);
    uint64_t v6 = *(void *)(v3 + 24);
  }
  uint64_t v210 = *(void **)(v6 + 32);
  uint64_t v208 = v6 + 32;
  std::string::size_type v209 = v210;
  do
  {
    unint64_t v211 = v209[4];
    BOOL v212 = v211 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d;
    if (v211 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d) {
      unint64_t v213 = v209;
    }
    else {
      unint64_t v213 = v209 + 1;
    }
    if (v212) {
      uint64_t v208 = (uint64_t)v209;
    }
    std::string::size_type v209 = (void *)*v213;
  }
  while (*v213);
  if (!*(unsigned char *)(*(void *)(v208 + 40) + 153)) {
    operations_research::sat::SharedBoundsManager::Synchronize(*(operations_research::sat::SharedBoundsManager **)(v3 + 32), (absl::lts_2020_02_25::Mutex *)v4);
  }
  if ((void)v219)
  {
    operator delete(__p);
    std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v220 = 0;
    *(void *)&long long v219 = 0;
    long long v218 = 0uLL;
  }
  if (*((void *)&v219 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v219 + 1));
  }
  if (v221)
  {
    uint64_t v222 = (char *)v221;
    operator delete(v221);
  }
  if (v224)
  {
    std::string::size_type v225 = (char *)v224;
    operator delete(v224);
  }
  if (v227)
  {
    int v228 = v227;
    operator delete(v227);
  }
}

void sub_23CC8DE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a18)
  {
    operator delete(__p);
    std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    a20 = 0;
    a10[1] = 0;
    a10[2] = 0;
    *a10 = 0;
  }
  if (a19) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroExportERKNS0_12CpModelPro"
                     "toEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroExportERKNS0_1"
                                "2CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroExportERKNS0_12CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroExportERKNS0_12CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::target_type()
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LevelZeroCallbackHelper>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LevelZeroCallbackHelper>(void)::d) {
      BOOL v5 = v1;
    }
    else {
      BOOL v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::LevelZeroCallbackHelper>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void *std::function<BOOL ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *operations_research::sat::Model::Delete<operations_research::sat::LevelZeroCallbackHelper>::~Delete(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26F0C1508;
  a1[1] = 0;
  if (v2)
  {
    unint64_t v3 = (void *)*v2;
    if (*v2)
    {
      BOOL v4 = (void *)v2[1];
      BOOL v5 = (void *)*v2;
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 4;
        unint64_t v7 = v4 - 4;
        do
        {
          uint64_t v9 = (void *)v7[3];
          if (v7 == v9)
          {
            (*(void (**)(void *))(*v7 + 32))(v7);
          }
          else if (v9)
          {
            (*(void (**)(void *))(*v9 + 40))(v9);
          }
          v6 -= 4;
          BOOL v8 = v7 == v3;
          v7 -= 4;
        }
        while (!v8);
        BOOL v5 = (void *)*v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x23ECF2BC0](v2, 0x20C40960023A9);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LevelZeroCallbackHelper>::~Delete(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  *a1 = &unk_26F0C1508;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = (void *)*v1;
    if (*v1)
    {
      unint64_t v3 = (void *)v1[1];
      BOOL v4 = (void *)*v1;
      if (v3 != v2)
      {
        BOOL v5 = v3 - 4;
        uint64_t v6 = v3 - 4;
        do
        {
          BOOL v8 = (void *)v6[3];
          if (v6 == v8)
          {
            (*(void (**)(void *))(*v6 + 32))(v6);
          }
          else if (v8)
          {
            (*(void (**)(void *))(*v8 + 40))(v8);
          }
          v5 -= 4;
          BOOL v7 = v6 == v2;
          v6 -= 4;
        }
        while (!v7);
        BOOL v4 = (void *)*v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    MEMORY[0x23ECF2BC0](v1, 0x20C40960023A9);
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t std::vector<std::function<BOOL ()(void)>>::__push_back_slow_path<std::function<BOOL ()(void)>>(uint64_t *a1, void *a2)
{
  BOOL v4 = (void *)*a1;
  unint64_t v3 = (void *)a1[1];
  uint64_t v5 = ((uint64_t)v3 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = a1[2] - (void)v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v10 = (char *)operator new(32 * v9);
    uint64_t v11 = (uint64_t)&v10[32 * v5];
    uint64_t v12 = a2 + 3;
    uint64_t v13 = (void *)a2[3];
    if (v13)
    {
LABEL_10:
      if (v13 == a2)
      {
        *(void *)(v11 + 24) = v11;
        (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v11);
        BOOL v4 = (void *)*a1;
        unint64_t v3 = (void *)a1[1];
        uint64_t v14 = v11;
        if (v3 == (void *)*a1) {
          goto LABEL_26;
        }
      }
      else
      {
        *(void *)(v11 + 24) = v13;
        *uint64_t v12 = 0;
        uint64_t v14 = v11;
        if (v3 == v4) {
          goto LABEL_26;
        }
      }
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 32 * v5;
    uint64_t v12 = a2 + 3;
    uint64_t v13 = (void *)a2[3];
    if (v13) {
      goto LABEL_10;
    }
  }
  *(void *)(v11 + 24) = 0;
  uint64_t v14 = v11;
  if (v3 != v4)
  {
LABEL_17:
    uint64_t v15 = 0;
    unint64_t v16 = v3;
    while (1)
    {
      uint64_t v18 = v11 + v15 * 8;
      uint64_t v19 = &v3[v15];
      unint64_t v20 = (void *)v3[v15 - 1];
      if (v20)
      {
        if (v19 - 4 == v20)
        {
          *(void *)(v18 - 8) = v18 - 32;
          (*(void (**)(void))(*(void *)*(v19 - 1) + 24))(*(v19 - 1));
          goto LABEL_20;
        }
        uint64_t v17 = v16 - 1;
        *(void *)(v18 - 8) = v20;
      }
      else
      {
        uint64_t v17 = (void *)(v18 - 8);
      }
      *uint64_t v17 = 0;
LABEL_20:
      v16 -= 4;
      v15 -= 4;
      if (&v3[v15] == v4)
      {
        uint64_t v14 = v11 + v15 * 8;
        break;
      }
    }
  }
LABEL_26:
  uint64_t v21 = &v10[32 * v9];
  unint64_t v23 = (char *)*a1;
  BOOL v22 = (char *)a1[1];
  uint64_t v24 = v11 + 32;
  *a1 = v14;
  a1[1] = v11 + 32;
  a1[2] = (uint64_t)v21;
  if (v22 != v23)
  {
    unint64_t v25 = v22 - 32;
    unint64_t v26 = v22 - 32;
    do
    {
      unint64_t v28 = (char *)*((void *)v26 + 3);
      if (v26 == v28)
      {
        (*(void (**)(char *))(*(void *)v26 + 32))(v26);
      }
      else if (v28)
      {
        (*(void (**)(char *))(*(void *)v28 + 40))(v28);
      }
      v25 -= 32;
      BOOL v27 = v26 == v23;
      v26 -= 32;
    }
    while (!v27);
  }
  if (v23) {
    operator delete(v23);
  }
  return v24;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26F0C1540;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1540;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v51 = 0;
  long long v52 = 0;
  uint64_t v53 = 0;
  double v48 = 0;
  double v49 = 0;
  uint64_t v50 = 0;
  std::string __p = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  operations_research::sat::SharedBoundsManager::GetChangedBounds(*(void **)(a1 + 16), (absl::lts_2020_02_25::Mutex *)*(unsigned int *)(a1 + 40), &v51, &v48, &__p);
  BOOL v4 = (int *)v51;
  if (v52 == v51)
  {
LABEL_47:
    uint64_t v40 = 1;
    unint64_t v41 = __p;
    if (__p)
    {
LABEL_48:
      uint64_t v46 = v41;
      operator delete(v41);
    }
    goto LABEL_49;
  }
  unint64_t v5 = 0;
  char v6 = 0;
  do
  {
    BOOL v7 = (absl::lts_2020_02_25::numbers_internal *)v4[v5];
    if (~v7 <= (int)v7) {
      int v8 = v4[v5];
    }
    else {
      int v8 = ~v7;
    }
    int v9 = *(_DWORD *)(**(void **)(a1 + 48) + 4 * v8);
    if (v9 == -1) {
      goto LABEL_4;
    }
    signed int v10 = v9 ^ (v7 >> 31);
    uint64_t v11 = *((void *)v48 + v5);
    int64_t v12 = *((void *)__p + v5);
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 40);
    uint64_t v14 = *(void *)(v13 + 12 * v10);
    int64_t v15 = -*(void *)(v13 + 12 * (v10 ^ 1));
    if (v11 <= v14 && v12 >= v15) {
      goto LABEL_4;
    }
    {
LABEL_36:
      if (v11 > v14) {
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    uint64_t v17 = *(long long **)(*(void *)(*(void *)(*(void *)(a1 + 8) + 32) + 8 * (void)v7 + 8) + 40);
    if (*((char *)v17 + 23) < 0)
    {
      long long v3 = (char *)*((void *)v17 + 1);
      if (v3)
      {
        std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v17, (std::string::size_type)v3);
        goto LABEL_23;
      }
    }
    else if (*((unsigned char *)v17 + 23))
    {
      long long v18 = *v17;
      v44.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v18;
      goto LABEL_23;
    }
    *(void *)&v57[0] = "anonymous_var(";
    *((void *)&v57[0] + 1) = 14;
    uint64_t v19 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v7, v56, v3);
    v55[0] = v56;
    v55[1] = v19 - v56;
    v54[0] = ")";
    v54[1] = 1;
    absl::lts_2020_02_25::StrCat((uint64_t)v57, (uint64_t)v55, (uint64_t)v54, &v44);
LABEL_23:
    unint64_t v20 = google::LogMessage::LogMessage((google::LogMessage *)v57, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1019);
    uint64_t v21 = (void *)google::LogMessage::stream(v20);
    BOOL v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  '", 3);
    uint64_t v23 = *(void *)(a1 + 24);
    int v24 = *(char *)(v23 + 23);
    if (v24 >= 0) {
      uint64_t v25 = *(void *)(a1 + 24);
    }
    else {
      uint64_t v25 = *(void *)v23;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      uint64_t v26 = *(void *)(v23 + 8);
    }
    BOOL v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v25, v26);
    unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' imports new bounds for ", 25);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v29 = &v44;
    }
    else {
      uint64_t v29 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v44.__r_.__value_.__l.__size_;
    }
    unint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": from [", 8);
    uint64_t v32 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
    uint64_t v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"] to [", 6);
    uint64_t v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", ", 2);
    uint64_t v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"]", 1);
    google::LogMessage::~LogMessage((google::LogMessage *)v57);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    operator delete(v44.__r_.__value_.__l.__data_);
    if (v11 > v14)
    {
LABEL_37:
      uint64_t v36 = *(void *)(a1 + 32);
      LODWORD(v57[0]) = v10;
      *(void *)((char *)v57 + 4) = v11;
      unint64_t v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v11);
      if (!operations_research::sat::IntegerTrail::Enqueue(v36, *(uint64_t *)&v57[0], v1, 0, 0, 0, 0))goto LABEL_54; {
    }
      }
LABEL_38:
    if (v12 < v15)
    {
      uint64_t v37 = *(void *)(a1 + 32);
      uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
      if (v12 >= (uint64_t)0x8000000000000002) {
        uint64_t v38 = -v12;
      }
      LODWORD(v57[0]) = v10 ^ 1;
      *(void *)((char *)v57 + 4) = v38;
      unint64_t v43 = v43 & 0xFFFFFFFF00000000 | HIDWORD(v38);
      if (!operations_research::sat::IntegerTrail::Enqueue(v37, *(uint64_t *)&v57[0], SHIDWORD(v38), 0, 0, 0, 0))goto LABEL_54; {
    }
      }
    char v6 = 1;
LABEL_4:
    ++v5;
    BOOL v4 = (int *)v51;
  }
  while (v5 < (v52 - (unsigned char *)v51) >> 2);
  if ((v6 & 1) == 0) {
    goto LABEL_47;
  }
  unint64_t v39 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*(void *)(a1 + 24));
  if (operations_research::sat::SatSolver::FinishPropagation(v39)) {
    goto LABEL_47;
  }
LABEL_54:
  uint64_t v40 = 0;
  unint64_t v41 = __p;
  if (__p) {
    goto LABEL_48;
  }
LABEL_49:
  if (v48)
  {
    double v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    long long v52 = v51;
    operator delete(v51);
  }
  return v40;
}

void sub_23CC8EB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v26 = a21;
    if (a21) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v26 = a21;
    if (a21)
    {
LABEL_3:
      operator delete(v26);
      BOOL v27 = a24;
      if (a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  BOOL v27 = a24;
  if (a24)
  {
LABEL_4:
    operator delete(v27);
    _Unwind_Resume(a1);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroImportERKNS0_12CpModelPro"
                     "toEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroImportERKNS0_1"
                                "2CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroImportERKNS0_12CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroImportERKNS0_12CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t *std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 48);
    if (v3)
    {
      BOOL v4 = *(void **)(v2 + 56);
      unint64_t v5 = *(void **)(v2 + 48);
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = *--v4;
          uint64_t v6 = v7;
          void *v4 = 0;
          if (v7) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
        }
        while (v4 != v3);
        unint64_t v5 = *(void **)(v2 + 48);
      }
      *(void *)(v2 + 56) = v3;
      operator delete(v5);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v2 + 24, *(void **)(v2 + 32));
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    JUMPOUT(0x23ECF2BC0);
  }
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0C15D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C15D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, operations_research::sat::Model *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 72))
  {
    *(unsigned char *)(v4 + 72) = 0;
    if (*(unsigned char *)(v4 + 56)) {
      goto LABEL_3;
    }
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(void *)(v4 + 64));
  if (*(unsigned char *)(v4 + 56))
  {
    uint64_t CurrentTimeNanos = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(*(void *)(v4 + 64));
    *(_DWORD *)(CurrentTimeNanos + 24) |= 0x8000u;
    *(void *)(CurrentTimeNanos + 368) = 0x3FF0000000000000;
    double v17 = *(double *)(CurrentTimeNanos + 280);
    *(_OWORD *)(v15 + 104) = xmmword_23CE86720;
    *(void *)(v15 + 128) = 0x7FF0000000000000;
    if (FLAGS_time_limit_use_usertime)
    {
      *(unsigned char *)(v15 + 72) = 1;
      uint64_t CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
      *(void *)(v15 + 80) = CurrentTimeNanos;
      *(double *)(v15 + 96) = v17;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v18 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
    *(void *)std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = v18;
    *(void *)(v15 + 8) = v18;
    uint64_t v20 = v18 + (uint64_t)(v17 * 1000000000.0);
    if ((double)(v18 ^ 0x7FFFFFFFFFFFFFFFLL) * 0.000000001 <= v17) {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    *(void *)(v15 + 16) = v20;
    uint64_t v21 = *(uint64_t **)(*(void *)(v4 + 48) + 16);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v21, v19);
    operations_research::TimeLimit::MergeWithGlobalTimeLimit(v15, v21[1]);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v21, v22, v23, v24, v25, v26, v27, v28);
  }
  double v29 = *(double *)(v15 + 112);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v4 + 80), v30);
  *(double *)(v4 + 88) = *(double *)(v4 + 88) + *(double *)(v15 + 112) - v29;
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(v4 + 80), v31, v32, v33, v34, v35, v36, v37);
  uint64_t v38 = *(void *)(v4 + 48);
  if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v38 + 32), v39)|| operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v38 + 16), v6))
  {
    uint64_t v40 = *(unsigned __int8 ***)(*(void *)(v4 + 48) + 16);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v40, v6);
    atomic_store(1u, v40[3]);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v40, v41, v42, v43, v44, v45, v46, v47);
  }
  else
  {
    if (*(unsigned char *)(v4 + 56))
    {
LABEL_3:
      absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v4 + 80), v6);
      *(unsigned char *)(v4 + 96) = 1;
      absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(v4 + 80), v7, v8, v9, v10, v11, v12, v13);
      return;
    }
    std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100]((uint64_t *)(v4 + 64), 0);
  }
}

void sub_23CC8EFC8(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_117FullProblemSolver12GenerateTaskExEUlvE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_117FullProblemSolver12GenerateTaskExEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_117FullProblemSolver12GenerateTaskExEUlvE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_117FullProblemSolver12GenerateTaskExEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::~FeasibilityPumpSolver(operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *this)
{
  *(void *)this = &unk_26F0C1650;
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64));
  std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100]((uint64_t *)this + 7, 0);
  *(void *)this = &unk_26F0BF840;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F0C1650;
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64));
  std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100]((uint64_t *)this + 7, 0);
  *(void *)this = &unk_26F0BF840;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

BOOL operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::TaskIsAvailable(operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3 = *((void *)this + 6);
  if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v3 + 32), a2))
  {
    return 0;
  }
  if ((operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v3 + 16), v4) & 1) == 0)
  {
    uint64_t v8 = (absl::lts_2020_02_25 **)((char *)this + 64);
    absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64), v7);
    BOOL v5 = *((unsigned char *)this + 88) != 0;
    absl::lts_2020_02_25::Mutex::Unlock(v8, v9, v10, v11, v12, v13, v14, v15);
    return v5;
  }
  return 0;
}

uint64_t operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = &unk_26F0C16A0;
  a2[1] = this;
  a2[3] = a2;
  return this;
}

void operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::Synchronize(operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3 = (absl::lts_2020_02_25 **)((char *)this + 64);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64), a2);
  double v4 = *((double *)this + 10);
  *((double *)this + 5) = v4 + *((double *)this + 5);
  BOOL v5 = *(absl::lts_2020_02_25::Mutex **)(*((void *)this + 6) + 16);
  absl::lts_2020_02_25::Mutex::Lock(v5, v6);
  *(double *)(*((void *)v5 + 1) + 112) = v4 + *(double *)(*((void *)v5 + 1) + 112);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v5, v7, v8, v9, v10, v11, v12, v13);
  *((void *)this + 10) = 0;
  absl::lts_2020_02_25::Mutex::Unlock(v3, v14, v15, v16, v17, v18, v19, v20);
}

void sub_23CC8F2BC(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0C16A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C16A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 64), a2);
  int v10 = *(unsigned __int8 *)(v2 + 88);
  if (*(unsigned char *)(v2 + 88)) {
    *(unsigned char *)(v2 + 88) = 0;
  }
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(v2 + 64), v3, v4, v5, v6, v7, v8, v9);
  if (v10)
  {
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v11);
    int v19 = *(unsigned __int8 *)(v2 + 72);
    if (*(unsigned char *)(v2 + 72))
    {
      uint64_t v20 = *(operations_research::sat::_anonymous_namespace_ ***)(v2 + 48);
      uint64_t v21 = v20[4];
      if (!v21)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v80, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1210);
        int64_t v79 = (void *)google::LogMessage::stream((google::LogMessage *)&v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Check failed: shared_response_manager != nullptr ", 49);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v80);
      }
      BOOL v22 = *v20;
      uint64_t v23 = *(operations_research::sat::SharedResponseManager **)(v2 + 56);
      uint64_t v24 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v23);
      uint64_t v13 = *(unsigned int *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v23)
                            + 396);
      if (v13)
      {
        uint64_t v25 = v81 - v80;
        unint64_t v26 = (unint64_t)(v81 - v80) >> 6;
        if (v26)
        {
          uint64_t v27 = (operations_research::sat::FeasibilityPump *)operations_research::sat::Model::GetOrCreate<operations_research::sat::FeasibilityPump>((uint64_t)v23);
          if ((int)v26 >= 1)
          {
            uint64_t v28 = 0;
            uint64_t v29 = v25 & 0x3FFFFFFFC0;
            do
            {
              operations_research::sat::FeasibilityPump::AddLinearConstraint(v27, (int **)(v80 + v28));
              v28 += 64;
            }
            while (v29 != v28);
          }
          unint64_t v30 = (uint64_t *)*((void *)v22 + 15);
          BOOL v31 = v22 == (operations_research::sat::_anonymous_namespace_ *)&operations_research::sat::_CpModelProto_default_instance_
             || v30 == 0;
          if (!v31 && *((int *)v30 + 10) >= 1)
          {
            uint64_t v32 = 0;
            do
            {
              int v33 = *(_DWORD *)(v30[3] + 4 * v32);
              if (~v33 <= v33) {
                int v34 = *(_DWORD *)(v30[3] + 4 * v32);
              }
              else {
                int v34 = ~v33;
              }
              operations_research::sat::FeasibilityPump::SetObjectiveCoefficient((uint64_t)v27, *(_DWORD *)(*v24 + 4 * v34) ^ (v33 >> 31), *(void *)(v30[6] + 8 * v32++));
              unint64_t v30 = (uint64_t *)*((void *)v22 + 15);
              if (!v30) {
                unint64_t v30 = &operations_research::sat::_CpObjectiveProto_default_instance_;
              }
            }
            while (v32 < *((int *)v30 + 10));
          }
        }
        operations_research::sat::LinearRelaxation::~LinearRelaxation((operations_research::sat::LinearRelaxation *)&v80);
      }
      uint64_t v35 = *(void *)(v2 + 56);
      uint64_t v38 = *(void **)(v35 + 32);
      uint64_t v36 = (void *)(v35 + 32);
      uint64_t v37 = v38;
      if (v38)
      {
        unint64_t v39 = v36;
        do
        {
          unint64_t v40 = v37[4];
          BOOL v41 = v40 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d;
          if (v40 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d) {
            uint64_t v42 = v37;
          }
          else {
            uint64_t v42 = v37 + 1;
          }
          if (v41) {
            unint64_t v39 = v37;
          }
          uint64_t v37 = (void *)*v42;
        }
        while (*v42);
        if (v39 != v36
          && v39[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d
          && v39[5])
        {
          *(unsigned char *)(v2 + 72) = 0;
          *(unsigned char *)(v2 + 88) = 1;
        }
      }
    }
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(v2 + 64), v12, v13, (uint64_t)v14, v15, v16, v17, v18);
    if (!v19)
    {
      uint64_t v43 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(void *)(v2 + 56));
      uint64_t v44 = *(void *)(v2 + 56);
      uint64_t v47 = *(void **)(v44 + 32);
      uint64_t v45 = (void *)(v44 + 32);
      uint64_t v46 = v47;
      if (!v47) {
        goto LABEL_49;
      }
      double v48 = v45;
      do
      {
        unint64_t v49 = v46[4];
        BOOL v50 = v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d;
        if (v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d) {
          uint64_t v51 = v46;
        }
        else {
          uint64_t v51 = v46 + 1;
        }
        if (v50) {
          double v48 = v46;
        }
        uint64_t v46 = (void *)*v51;
      }
      while (*v51);
      if (v48 != v45
        && v48[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d)
      {
        double v52 = *(double *)(v43 + 112);
        if (operations_research::sat::FeasibilityPump::Solve((operations_research::sat::FeasibilityPump *)v48[5])) {
          goto LABEL_51;
        }
      }
      else
      {
LABEL_49:
        double v52 = *(double *)(v43 + 112);
        if (operations_research::sat::FeasibilityPump::Solve(0))
        {
LABEL_51:
          absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v53);
          *(double *)(v2 + 80) = *(double *)(v2 + 80) + *(double *)(v43 + 112) - v52;
          absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(v2 + 64), v54, v55, v56, v57, v58, v59, v60);
          uint64_t v61 = *(void *)(v2 + 48);
          if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v61 + 32), v62)|| operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v61 + 16), v63))
          {
            uint64_t v64 = *(unsigned __int8 ***)(*(void *)(v2 + 48) + 16);
            absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v64, v63);
            atomic_store(1u, v64[3]);
            absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v64, v65, v66, v67, v68, v69, v70, v71);
          }
          else
          {
            absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v63);
            *(unsigned char *)(v2 + 88) = 1;
            absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(v2 + 64), v72, v73, v74, v75, v76, v77, v78);
          }
          return;
        }
      }
      operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible(*(void *)(*(void *)(v2 + 48) + 32), (absl::lts_2020_02_25::Mutex *)(v2 + 8));
      goto LABEL_51;
    }
  }
}

void sub_23CC8F69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::LinearRelaxation::~LinearRelaxation((operations_research::sat::LinearRelaxation *)va);
  absl::lts_2020_02_25::Mutex::Unlock(v2, v4, v5, v6, v7, v8, v9, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_121FeasibilityPumpSolver12GenerateTaskExEUlvE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_121FeasibilityPumpSolver12GenerateTaskExEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_121FeasibilityPumpSolver12GenerateTaskExEUlvE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_121FeasibilityPumpSolver12GenerateTaskExEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void operations_research::sat::anonymous namespace'::LoadBaseModel(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedResponseManager *a3, operations_research::sat::Model *a4)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1125);
    unsigned int v54 = (void *)google::LogMessage::stream((google::LogMessage *)&v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Check failed: shared_response_manager != nullptr ", 49);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v62);
  }
  uint64_t v5 = a2;
  uint64_t v7 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  *(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3) + 16) = 0;
  uint64_t v8 = (std::vector<int> *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a3);
  uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  char v10 = *(int *)(v9 + 396) > 1 || *(_DWORD *)(v9 + 124) == 1 && *((_DWORD *)this + 18) == 0;
  operations_research::sat::CpModelMapping::CreateVariables(v8, this, v10, a3);
  operations_research::sat::CpModelMapping::DetectOptionalVariables((operations_research::sat::CpModelMapping *)v8, this, a3);
  operations_research::sat::CpModelMapping::ExtractEncoding((operations_research::sat::CpModelMapping *)v8, (unint64_t)this, a3);
  operations_research::sat::CpModelMapping::PropagateEncodingFromEquivalenceRelations((operations_research::sat::CpModelMapping *)v8, this, a3);
  if (*((unsigned char *)v7 + 496))
  {
    *((unsigned char *)v7 + 496) = 1;
    uint64_t v12 = *((unsigned __int8 *)a3 + 23);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = *(operations_research::sat::SharedResponseManager **)a3;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *((void *)a3 + 1);
    }
    uint64_t v62 = v13;
    uint64_t v63 = v12;
    uint64_t v60 = " [loading]";
    uint64_t v61 = 10;
    absl::lts_2020_02_25::StrCat((uint64_t)&v62, (uint64_t)&v60, &__p);
    operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v5, (absl::lts_2020_02_25::Mutex *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  operations_research::sat::MaybeFullyEncodeMoreVariables(this, a3, v11);
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v56 = &v57;
  uint64_t v15 = *((void *)this + 7);
  if (v15) {
    uint64_t v16 = (operations_research::sat **)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *((int *)this + 12);
  if (!v17) {
    goto LABEL_48;
  }
  uint64_t v55 = v5;
  int v18 = 0;
  int v19 = &v16[v17];
  while (1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *v16;
    unint64_t v22 = (unint64_t)*v16
        + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v16)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + (void)*v16)));
    unint64_t v23 = ((v22 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v22);
    begiunint64_t n = v8[5].__begin_;
    unint64_t v25 = (v23 >> 7) ^ ((unint64_t)begin >> 12);
    std::vector<int>::pointer v26 = v8[6].__begin_;
    uint64_t v27 = 0x101010101010101 * (v23 & 0x7F);
    while (1)
    {
      unint64_t v28 = v25 & (unint64_t)v26;
      uint64_t v29 = *(void *)((char *)begin + v28);
      unint64_t v30 = ((v29 ^ v27) - 0x101010101010101) & ~(v29 ^ v27) & 0x8080808080808080;
      if (v30) {
        break;
      }
LABEL_26:
      if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_29;
      }
      v20 += 8;
      unint64_t v25 = v20 + v28;
    }
    while (1)
    {
      unint64_t v31 = (v28 + (__clz(__rbit64(v30)) >> 3)) & (unint64_t)v26;
      if (*(operations_research::sat **)&v8[5].__end_[2 * v31] == v21) {
        break;
      }
      v30 &= v30 - 1;
      if (!v30) {
        goto LABEL_26;
      }
    }
    if ((std::vector<int>::pointer)v31 == v26) {
      break;
    }
    ++v18;
LABEL_21:
    if (++v16 == v19) {
      goto LABEL_43;
    }
  }
LABEL_29:
  if ((operations_research::sat::LoadConstraint(*v16, a3, v14) & 1) == 0)
  {
    operations_research::sat::ConstraintCaseName(*((unsigned int *)v21 + 15), (char *)&v62);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v56, (const void **)&v62, (uint64_t)&v62);
    if ((char)v64 < 0) {
      operator delete(v62);
    }
    goto LABEL_21;
  }
  if (!*((unsigned char *)v7 + 496)) {
    goto LABEL_21;
  }
  if (*_MergedGlobals_8[0] > 1
    && (_MergedGlobals_8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1185);
    uint64_t v32 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    int v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"UNSAT during extraction (after adding '", 39);
    operations_research::sat::ConstraintCaseName(*((unsigned int *)v21 + 15), (char *)&v62);
    if ((v64 & 0x80u) == 0) {
      int v34 = &v62;
    }
    else {
      int v34 = v62;
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v35 = v64;
    }
    else {
      uint64_t v35 = v63;
    }
    uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"'). ", 4);
    google::protobuf::Message::DebugString(&v60);
  }
LABEL_43:
  uint64_t v5 = v55;
  if (v18 >= 1
    && *off_26AECFEC0[0] >= 3
    && (off_26AECFEC0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFEC0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1192);
    google::LogMessage::stream((google::LogMessage *)&v62);
    uint64_t v37 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" constraints were skipped.", 26);
    google::LogMessage::~LogMessage((google::LogMessage *)&v62);
  }
LABEL_48:
  if (v58)
  {
    if (*off_26AECFEC8[0] >= 1
      && (off_26AECFEC8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFEC8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1195);
      uint64_t v38 = (void *)google::LogMessage::stream((google::LogMessage *)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"There is unsuported constraints types in this model: ", 53);
      google::LogMessage::~LogMessage((google::LogMessage *)&v62);
    }
    unint64_t v39 = (uint64_t *)v56;
    if (v56 != &v57)
    {
      unint64_t v40 = off_26AECFED0[0];
      if (*off_26AECFED0[0] <= 0)
      {
        do
        {
          uint64_t v51 = (char *)v39[1];
          if (v51)
          {
            do
            {
              double v52 = (char **)v51;
              uint64_t v51 = *(char **)v51;
            }
            while (v51);
          }
          else
          {
            do
            {
              double v52 = (char **)v39[2];
              BOOL v48 = *v52 == (char *)v39;
              unint64_t v39 = (uint64_t *)v52;
            }
            while (!v48);
          }
          unint64_t v39 = (uint64_t *)v52;
        }
        while (v52 != &v57);
      }
      else
      {
        if (*off_26AECFED0[0] >= 1) {
          goto LABEL_58;
        }
        while (1)
        {
          uint64_t v46 = (char *)v39[1];
          if (v46)
          {
            do
            {
              uint64_t v47 = (char **)v46;
              uint64_t v46 = *(char **)v46;
            }
            while (v46);
          }
          else
          {
            do
            {
              uint64_t v47 = (char **)v39[2];
              BOOL v48 = *v47 == (char *)v39;
              unint64_t v39 = (uint64_t *)v47;
            }
            while (!v48);
          }
          if (v47 == &v57) {
            break;
          }
          unint64_t v40 = off_26AECFED0[0];
          unint64_t v39 = (uint64_t *)v47;
          if (*off_26AECFED0[0] >= 1)
          {
LABEL_58:
            if (v40 != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_26AECFED0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)1))
            {
              google::LogMessage::LogMessage((google::LogMessage *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1197);
              BOOL v41 = (void *)google::LogMessage::stream((google::LogMessage *)&v62);
              uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" - ", 3);
              int v43 = *((char *)v39 + 55);
              if (v43 >= 0) {
                uint64_t v44 = (uint64_t)(v39 + 4);
              }
              else {
                uint64_t v44 = v39[4];
              }
              if (v43 >= 0) {
                uint64_t v45 = *((unsigned __int8 *)v39 + 55);
              }
              else {
                uint64_t v45 = v39[5];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
              google::LogMessage::~LogMessage((google::LogMessage *)&v62);
            }
          }
        }
      }
    }
    *((unsigned char *)v7 + 496) = 1;
    uint64_t v49 = *((unsigned __int8 *)a3 + 23);
    if ((v49 & 0x80u) == 0) {
      BOOL v50 = a3;
    }
    else {
      BOOL v50 = *(operations_research::sat::SharedResponseManager **)a3;
    }
    if ((v49 & 0x80u) != 0) {
      uint64_t v49 = *((void *)a3 + 1);
    }
LABEL_92:
    uint64_t v62 = v50;
    uint64_t v63 = v49;
    uint64_t v60 = " [loading]";
    uint64_t v61 = 10;
    absl::lts_2020_02_25::StrCat((uint64_t)&v62, (uint64_t)&v60, &__p);
    operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v5, (absl::lts_2020_02_25::Mutex *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v53 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
    operations_research::sat::IntegerEncoder::AddAllImplicationsBetweenAssociatedLiterals(v53);
    if ((operations_research::sat::SatSolver::FinishPropagation(v7) & 1) == 0)
    {
      *((unsigned char *)v7 + 496) = 1;
      uint64_t v49 = *((unsigned __int8 *)a3 + 23);
      if ((v49 & 0x80u) == 0) {
        BOOL v50 = a3;
      }
      else {
        BOOL v50 = *(operations_research::sat::SharedResponseManager **)a3;
      }
      if ((v49 & 0x80u) != 0) {
        uint64_t v49 = *((void *)a3 + 1);
      }
      goto LABEL_92;
    }
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v56, v57);
}

void sub_23CC8FEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
}

void sub_23CC8FEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_23CC8FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
}

void sub_23CC8FF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
}

void sub_23CC8FFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
  {
    operator delete(__p);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a13, a14);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_23CC900DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::anonymous namespace'::ComputeLinearRelaxation(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, unsigned int a3, operations_research::sat::Model *a4)
{
  uint64_t v5 = this;
  uint64_t v287 = *MEMORY[0x263EF8340];
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v258 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v259 = 0u;
  long long v260 = 0u;
  uint64_t v261 = 0;
  uint64_t v6 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a4);
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a4);
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a4);
  uint64_t v9 = *((void *)a2 + 7);
  if (v9) {
    char v10 = (operations_research::sat **)(v9 + 8);
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = *((int *)a2 + 12);
  uint64_t v251 = (uint64_t)v5;
  if (v11)
  {
    uint64_t v12 = v8;
    uint64_t v243 = (void **)((char *)v5 + 48);
    uint64_t v246 = v8;
    BOOL v245 = (operations_research::sat::Model *)&v10[v11];
    while (1)
    {
      uint64_t v248 = v10;
      int v253 = *v10;
      if (*((_DWORD *)*v10 + 15) == 15)
      {
        uint64_t v13 = *((void *)v253 + 6);
        uint64_t v14 = *(int *)(v13 + 64);
        if (v14)
        {
          uint64_t v15 = *(int **)(v13 + 72);
          uint64_t v16 = 4 * v14;
          do
          {
            if (~*v15 <= *v15) {
              int v17 = *v15;
            }
            else {
              int v17 = ~*v15;
            }
            HIDWORD(v19) = *(_DWORD *)(v6[6] + 4 * v17);
            LODWORD(v19) = *v15;
            int v18 = v19 >> 31;
            uint64_t v20 = *(void *)(v7 + 160);
            unint64_t v21 = (unint64_t)(*(void *)(v7 + 168) - v20) >> 2;
            if (v18 >= (int)v21 || *(_DWORD *)(v20 + 4 * v18) == -1)
            {
              uint64_t v22 = v18 ^ 1;
              if ((int)v22 >= (int)v21 || *(_DWORD *)(v20 + 4 * v22) == -1)
              {
                uint64_t v284 = (void (**)(void **))&unk_26F0C1710;
                v285[0] = v18;
                int v286 = (void **)&v284;
                operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(v285, (uint64_t)a4);
                if (v286 == (void **)&v284)
                {
                  v284[4]((void **)&v284);
                }
                else if (v286)
                {
                  (*((void (**)(void))*v286 + 5))();
                }
              }
            }
            ++v15;
            v16 -= 4;
          }
          while (v16);
        }
      }
      operations_research::sat::GetReferencesUsedByConstraint(v253, (uint64_t)v255);
      uint64_t v24 = (int *)v256;
      unint64_t v25 = v257;
      while (v24 != v25)
      {
        if (~*v24 <= *v24) {
          int v26 = *v24;
        }
        else {
          int v26 = ~*v24;
        }
        HIDWORD(v28) = *(_DWORD *)(v6[6] + 4 * v26);
        LODWORD(v28) = *v24;
        int v27 = v28 >> 31;
        if (((*(void *)(*(void *)(v12 + 24) + (((unint64_t)v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v28 >> 31) & 0x3E)) & 3) != 0)
        {
          uint64_t v281 = (void (**)(void **))&unk_26F0C1710;
          v282[0] = v27;
          BOOL v283 = (void **)&v281;
          operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(v282, (uint64_t)a4);
          if (v283 == (void **)&v281)
          {
            v281[4]((void **)&v281);
          }
          else if (v283)
          {
            (*((void (**)(void))*v283 + 5))();
          }
        }
        else
        {
          uint64_t v29 = *(void *)(v7 + 160);
          unint64_t v30 = (unint64_t)(*(void *)(v7 + 168) - v29) >> 2;
          if (v27 >= (int)v30 || *(_DWORD *)(v29 + 4 * v27) == -1)
          {
            uint64_t v31 = v27 ^ 1;
            if ((int)v31 >= (int)v30 || *(_DWORD *)(v29 + 4 * v31) == -1) {
              goto LABEL_321;
            }
          }
        }
        ++v24;
      }
      operations_research::sat::TryToLinearizeConstraint(a2, v253, a4, (operations_research::sat::Model *)a3, (uint64_t)v5, v23);
      int v250 = *(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a4)
                       + 396);
      uint64_t v249 = (operations_research::sat::CpModelMapping *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a4);
      uint64_t v32 = v253;
      int v33 = *((_DWORD *)v253 + 15);
      BOOL v34 = v33 != 15 || v250 < 2;
      if (!v34) {
        break;
      }
LABEL_64:
      BOOL v49 = v33 != 23 || v250 < 2;
      uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
      if (v49) {
        goto LABEL_160;
      }
      uint64_t v50 = *((void *)v32 + 6);
      uint64_t v51 = *(const void **)(v50 + 24);
      uint64_t v52 = *(int *)(v50 + 16);
      unint64_t v262 = 0;
      long long v263 = 0uLL;
      if (v52)
      {
        if ((v52 & 0x80000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v262 = operator new(4 * v52);
        *(void *)&long long v263 = v262;
        uint64_t v53 = (char *)v262 + 4 * v52;
        *((void *)&v263 + 1) = v53;
        memcpy(v262, v51, 4 * v52);
        *(void *)&long long v263 = v53;
        uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
      }
      unsigned int v54 = *(const void **)(v50 + 48);
      uint64_t v55 = *(int *)(v50 + 40);
      int v272 = 0;
      uint64_t v273 = 0;
      int v271 = 0;
      if (v55)
      {
        if ((v55 & 0x80000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int v271 = operator new(4 * v55);
        int v272 = (char *)v271;
        uint64_t v56 = (char *)v271 + 4 * v55;
        uint64_t v273 = v56;
        memcpy(v271, v54, 4 * v55);
        int v272 = v56;
        uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
      }
      operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v249, (int *)(v50 + 64), (char **)&v269);
      int v57 = *((_DWORD *)v253 + 15);
      uint64_t v58 = *((void *)v253 + 6);
      if (v57 == 23)
      {
        uint64_t v59 = *(unsigned int *)(v58 + 16);
        if ((int)v59 < 1)
        {
          int v63 = 0;
        }
        else
        {
          uint64_t v60 = *(int32x4_t **)(v58 + 24);
          uint64_t v61 = *(int32x4_t **)(v58 + 48);
          if (v59 >= 8)
          {
            uint64_t v62 = v59 & 0x7FFFFFF8;
            uint64_t v66 = v60 + 1;
            uint64_t v67 = v61 + 1;
            int32x4_t v68 = 0uLL;
            uint64_t v69 = v59 & 0xFFFFFFF8;
            int32x4_t v70 = 0uLL;
            v71.i64[0] = 0x100000001;
            v71.i64[1] = 0x100000001;
            do
            {
              int32x4_t v68 = vmaxq_s32(vmaxq_s32(v68, vaddq_s32(v66[-1], v71)), vaddq_s32(v67[-1], v71));
              int32x4_t v70 = vmaxq_s32(vmaxq_s32(v70, vaddq_s32(*v66, v71)), vaddq_s32(*v67, v71));
              v66 += 2;
              v67 += 2;
              v69 -= 8;
            }
            while (v69);
            int v63 = vmaxvq_s32(vmaxq_s32(v68, v70));
            if (v62 != v59) {
              goto LABEL_90;
            }
          }
          else
          {
            uint64_t v62 = 0;
            int v63 = 0;
LABEL_90:
            uint64_t v72 = v59 - v62;
            uint64_t v73 = v62;
            uint64_t v74 = &v61->i32[v73];
            uint64_t v75 = &v60->i32[v73];
            do
            {
              int v77 = *v75++;
              int v76 = v77;
              if (v63 <= v77 + 1) {
                int v78 = v76 + 1;
              }
              else {
                int v78 = v63;
              }
              int v80 = *v74++;
              int v79 = v80;
              if (v78 <= v80 + 1) {
                int v63 = v79 + 1;
              }
              else {
                int v63 = v78;
              }
              --v72;
            }
            while (v72);
          }
        }
        int v81 = *(_DWORD *)(v58 + 88);
        if (!v81 || !*(void *)(v58 + 112)) {
          goto LABEL_130;
        }
        uint64_t v82 = (uint64_t *)*((void *)v253 + 6);
        goto LABEL_115;
      }
      if (dword_26AEE1A90 < 1)
      {
        int v63 = 0;
      }
      else
      {
        if (dword_26AEE1A90 < 8)
        {
          uint64_t v64 = 0;
          int v63 = 0;
LABEL_104:
          uint64_t v89 = dword_26AEE1A90 - v64;
          uint64_t v90 = 4 * v64;
          BOOL v91 = (int *)(qword_26AEE1AB0 + v90);
          uint64_t v92 = (int *)(qword_26AEE1A98 + v90);
          do
          {
            int v94 = *v92++;
            int v93 = v94;
            if (v63 <= v94 + 1) {
              int v95 = v93 + 1;
            }
            else {
              int v95 = v63;
            }
            int v97 = *v91++;
            int v96 = v97;
            if (v95 <= v97 + 1) {
              int v63 = v96 + 1;
            }
            else {
              int v63 = v95;
            }
            --v89;
          }
          while (v89);
          goto LABEL_112;
        }
        uint64_t v64 = dword_26AEE1A90 & 0xFFFFFFF8;
        unint64_t v83 = (int32x4_t *)(qword_26AEE1A98 + 16);
        int v84 = (int32x4_t *)(qword_26AEE1AB0 + 16);
        int32x4_t v85 = 0uLL;
        uint64_t v86 = v64;
        int32x4_t v87 = 0uLL;
        v88.i64[0] = 0x100000001;
        v88.i64[1] = 0x100000001;
        do
        {
          int32x4_t v85 = vmaxq_s32(vmaxq_s32(v85, vaddq_s32(v83[-1], v88)), vaddq_s32(v84[-1], v88));
          int32x4_t v87 = vmaxq_s32(vmaxq_s32(v87, vaddq_s32(*v83, v88)), vaddq_s32(*v84, v88));
          v83 += 2;
          v84 += 2;
          v86 -= 8;
        }
        while (v86);
        int v63 = vmaxvq_s32(vmaxq_s32(v85, v87));
        if (v64 != dword_26AEE1A90) {
          goto LABEL_104;
        }
      }
LABEL_112:
      int v81 = qword_26AEE1AD8;
      if (!qword_26AEE1AD8 || !qword_26AEE1AF0)
      {
LABEL_130:
        operations_research::sat::CreateStronglyConnectedGraphCutGenerator(v63, (uint64_t)&v262, (uint64_t)&v271, (uint64_t)&v269, (uint64_t)a4, __p);
        unint64_t v120 = (void *)*((void *)v5 + 7);
        if ((unint64_t)v120 >= *((void *)v5 + 8))
        {
          uint64_t v32 = v253;
          *((void *)v5 + 7) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v243, (uint64_t)__p);
          uint64_t v122 = *((void *)&v276 + 1);
          if (*((void ***)&v276 + 1) != &v275[1]) {
            goto LABEL_135;
          }
        }
        else
        {
          void *v120 = 0;
          v120[1] = 0;
          v120[2] = 0;
          *(_OWORD *)unint64_t v120 = *(_OWORD *)__p;
          v120[2] = v275[0];
          __p[0] = 0;
          __p[1] = 0;
          v275[0] = 0;
          if (!*((void *)&v276 + 1))
          {
            int v121 = v120 + 6;
            goto LABEL_149;
          }
          if (*((void ***)&v276 + 1) == &v275[1])
          {
            v120[6] = v120 + 3;
            (*(void (**)(void))(**((void **)&v276 + 1) + 24))(*((void *)&v276 + 1));
            uint64_t v152 = v120 + 7;
            uint64_t v32 = v253;
            *((void *)v5 + 7) = v152;
            uint64_t v122 = *((void *)&v276 + 1);
            if (*((void ***)&v276 + 1) != &v275[1])
            {
LABEL_135:
              if (v122) {
                (*(void (**)(uint64_t))(*(void *)v122 + 40))(v122);
              }
              size_t v123 = __p[0];
              if (!__p[0]) {
                goto LABEL_153;
              }
LABEL_151:
              __p[1] = v123;
LABEL_152:
              operator delete(v123);
              goto LABEL_153;
            }
          }
          else
          {
            v120[6] = *((void *)&v276 + 1);
            int v121 = (void *)&v276 + 1;
LABEL_149:
            void *v121 = 0;
            unint64_t v127 = v120 + 7;
            uint64_t v32 = v253;
            *((void *)v5 + 7) = v127;
            uint64_t v122 = *((void *)&v276 + 1);
            if (*((void ***)&v276 + 1) != &v275[1]) {
              goto LABEL_135;
            }
          }
        }
        (*((void (**)(void **))v275[1] + 4))(&v275[1]);
        size_t v123 = __p[0];
        if (__p[0]) {
          goto LABEL_151;
        }
        goto LABEL_153;
      }
      uint64_t v82 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
LABEL_115:
      std::string::size_type v98 = (int *)v82[12];
      unint64_t v99 = 4 * v81;
      int v100 = &v98[v99 / 4];
      uint64_t v267 = 0;
      uint64_t v268 = 0;
      uint64_t v266 = 0;
      if (&v98[v99 / 4] != v98)
      {
        if (v99 >= 0x7FFFFFFFFFFFFFFDLL) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v101 = v58;
        int v102 = v57;
        uint64_t v103 = (char *)operator new(8 * v81);
        uint64_t v266 = v103;
        uint64_t v268 = &v103[8 * v81];
        unint64_t v104 = 4 * v81 - 4;
        unint64_t v105 = v98;
        uint64_t v106 = v103;
        int v57 = v102;
        uint64_t v58 = v101;
        if (v104 < 0x1C) {
          goto LABEL_423;
        }
        uint64_t v107 = (v104 >> 2) + 1;
        unint64_t v105 = &v98[v107 & 0x7FFFFFFFFFFFFFF8];
        uint64_t v106 = &v103[8 * (v107 & 0x7FFFFFFFFFFFFFF8)];
        uint64_t v108 = v103 + 32;
        unint64_t v109 = v98 + 4;
        uint64_t v110 = v107 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v111 = *((_OWORD *)v109 - 1);
          *(void *)&long long v112 = (int)v111;
          *((void *)&v112 + 1) = SDWORD1(v111);
          long long v113 = v112;
          *(void *)&long long v112 = SDWORD2(v111);
          *((void *)&v112 + 1) = SHIDWORD(v111);
          long long v114 = v112;
          *(void *)&long long v112 = (int)*(_OWORD *)v109;
          *((void *)&v112 + 1) = (int)HIDWORD(*(void *)v109);
          long long v115 = v112;
          *(void *)&long long v112 = (int)*((void *)v109 + 1);
          *((void *)&v112 + 1) = (int)HIDWORD(*(_OWORD *)v109);
          *(v108 - 2) = v113;
          *(v108 - 1) = v114;
          *uint64_t v108 = v115;
          v108[1] = v112;
          v108 += 4;
          v109 += 8;
          v110 -= 8;
        }
        while (v110);
        if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_423:
          do
          {
            uint64_t v116 = *v105++;
            *(void *)uint64_t v106 = v116;
            v106 += 8;
          }
          while (v105 != v100);
        }
        uint64_t v267 = v106;
      }
      if (v57 == 23) {
        unint64_t v117 = (uint64_t *)v58;
      }
      else {
        unint64_t v117 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
      }
      operations_research::sat::CreateCVRPCutGenerator(v63, (uint64_t)&v262, (uint64_t)&v271, (uint64_t)&v269, (uint64_t)&v266, v117[14], (uint64_t)a4, __p);
      uint64_t v118 = (void *)*((void *)v5 + 7);
      if ((unint64_t)v118 >= *((void *)v5 + 8))
      {
        uint64_t v32 = v253;
        *((void *)v5 + 7) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v243, (uint64_t)__p);
        uint64_t v124 = *((void *)&v276 + 1);
        if (*((void ***)&v276 + 1) == &v275[1]) {
          goto LABEL_186;
        }
        goto LABEL_140;
      }
      void *v118 = 0;
      v118[1] = 0;
      v118[2] = 0;
      *(_OWORD *)uint64_t v118 = *(_OWORD *)__p;
      v118[2] = v275[0];
      __p[0] = 0;
      __p[1] = 0;
      v275[0] = 0;
      if (!*((void *)&v276 + 1))
      {
        unint64_t v119 = v118 + 6;
LABEL_185:
        void *v119 = 0;
        int64_t v151 = v118 + 7;
        uint64_t v32 = v253;
        *((void *)v5 + 7) = v151;
        uint64_t v124 = *((void *)&v276 + 1);
        if (*((void ***)&v276 + 1) == &v275[1]) {
          goto LABEL_186;
        }
        goto LABEL_140;
      }
      if (*((void ***)&v276 + 1) != &v275[1])
      {
        v118[6] = *((void *)&v276 + 1);
        unint64_t v119 = (void *)&v276 + 1;
        goto LABEL_185;
      }
      v118[6] = v118 + 3;
      (*(void (**)(void))(**((void **)&v276 + 1) + 24))(*((void *)&v276 + 1));
      unint64_t v153 = v118 + 7;
      uint64_t v32 = v253;
      *((void *)v5 + 7) = v153;
      uint64_t v124 = *((void *)&v276 + 1);
      if (*((void ***)&v276 + 1) == &v275[1])
      {
LABEL_186:
        (*((void (**)(void **))v275[1] + 4))(&v275[1]);
        unint64_t v125 = __p[0];
        if (__p[0]) {
          goto LABEL_143;
        }
        goto LABEL_144;
      }
LABEL_140:
      if (v124) {
        (*(void (**)(uint64_t))(*(void *)v124 + 40))(v124);
      }
      unint64_t v125 = __p[0];
      if (__p[0])
      {
LABEL_143:
        __p[1] = v125;
        operator delete(v125);
      }
LABEL_144:
      size_t v123 = v266;
      if (v266)
      {
        uint64_t v267 = (char *)v266;
        goto LABEL_152;
      }
LABEL_153:
      if (v269)
      {
        uint64_t v270 = v269;
        operator delete(v269);
      }
      if (v271)
      {
        int v272 = (char *)v271;
        operator delete(v271);
      }
      if (v262)
      {
        *(void *)&long long v263 = v262;
        operator delete(v262);
      }
      int v33 = *((_DWORD *)v32 + 15);
LABEL_160:
      uint64_t v12 = v246;
      if (v33 != 11) {
        goto LABEL_206;
      }
      if (*((_DWORD *)v32 + 4)) {
        goto LABEL_321;
      }
      uint64_t v128 = *((void *)v253 + 6);
      if (*(_DWORD *)(v128 + 16) != 2) {
        goto LABEL_321;
      }
      int v129 = *(_DWORD *)(v128 + 36);
      if (~v129 <= v129) {
        int v130 = *(_DWORD *)(v128 + 36);
      }
      else {
        int v130 = ~v129;
      }
      uint64_t v131 = *(void *)v249;
      int v132 = *(_DWORD *)(*(void *)v249 + 4 * v130);
      int v133 = *(int **)(v128 + 24);
      unsigned int v134 = *v133;
      int v135 = v133[1];
      if (~*v133 <= *v133) {
        int v136 = *v133;
      }
      else {
        int v136 = ~v134;
      }
      int v137 = *(_DWORD *)(v131 + 4 * v136);
      if (~v135 <= v135) {
        int v138 = v135;
      }
      else {
        int v138 = ~v135;
      }
      int v139 = *(_DWORD *)(v131 + 4 * v138);
      uint64_t v140 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a4);
      unsigned int v141 = v132 ^ (v129 >> 31);
      signed int v142 = v137 ^ (v134 >> 31);
      int v143 = v139 ^ (v135 >> 31);
      uint64_t v144 = *(void *)(v140 + 40);
      uint64_t v145 = *(void *)(v144 + 12 * v142);
      unint64_t v146 = *(void *)(v144 + 12 * (v142 ^ 1));
      if (v142 == v143)
      {
        if (v145 < 0)
        {
          uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
          uint64_t v12 = v246;
          if ((v146 & 0x8000000000000000) != 0) {
            goto LABEL_321;
          }
        }
        else if ((v146 & 0x8000000000000000) != 0)
        {
LABEL_194:
          operations_research::sat::CreateSquareCutGenerator(v141, v142, (uint64_t)a4, __p);
          uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
          size_t v149 = *(void **)(v251 + 56);
          if ((unint64_t)v149 < *(void *)(v251 + 64))
          {
            *size_t v149 = 0;
            v149[1] = 0;
            v149[2] = 0;
            *(_OWORD *)size_t v149 = *(_OWORD *)__p;
            v149[2] = v275[0];
            __p[0] = 0;
            __p[1] = 0;
            v275[0] = 0;
            uint64_t v150 = *((void *)&v276 + 1);
            if (*((void *)&v276 + 1))
            {
              if (*((void ***)&v276 + 1) != &v275[1]) {
                goto LABEL_197;
              }
LABEL_183:
              v149[6] = v149 + 3;
              (*(void (**)(void))(**((void **)&v276 + 1) + 24))(*((void *)&v276 + 1));
              uint64_t v12 = v246;
              goto LABEL_201;
            }
            goto LABEL_199;
          }
          goto LABEL_301;
        }
        v142 ^= 1u;
        goto LABEL_194;
      }
      uint64_t v147 = *(void *)(v144 + 12 * v143);
      unint64_t v148 = *(void *)(v144 + 12 * (v143 ^ 1));
      uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
      uint64_t v12 = v246;
      if (v145 < 0 && (v146 & 0x8000000000000000) != 0 || v147 < 0 && (v148 & 0x8000000000000000) != 0) {
        goto LABEL_321;
      }
      operations_research::sat::CreatePositiveMultiplicationCutGenerator(v141 ^ ((v146 & 0x8000000000000000) == 0) ^ ((v148 & 0x8000000000000000) == 0), (v146 >> 63) ^ v142 ^ 1, (v148 >> 63) ^ v143 ^ 1, (uint64_t)a4, __p);
      uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
      size_t v149 = *(void **)(v251 + 56);
      if ((unint64_t)v149 < *(void *)(v251 + 64))
      {
        *size_t v149 = 0;
        v149[1] = 0;
        v149[2] = 0;
        *(_OWORD *)size_t v149 = *(_OWORD *)__p;
        v149[2] = v275[0];
        __p[0] = 0;
        __p[1] = 0;
        v275[0] = 0;
        uint64_t v150 = *((void *)&v276 + 1);
        if (*((void *)&v276 + 1))
        {
          if (*((void ***)&v276 + 1) == &v275[1]) {
            goto LABEL_183;
          }
LABEL_197:
          v149[6] = v150;
          uint64_t v154 = (void *)&v276 + 1;
LABEL_200:
          uint64_t v12 = v246;
          *uint64_t v154 = 0;
LABEL_201:
          unint64_t v155 = v149 + 7;
          uint64_t v32 = v253;
          *((void *)v5 + 7) = v155;
          uint64_t v156 = *((void *)&v276 + 1);
          if (*((void ***)&v276 + 1) == &v275[1]) {
            goto LABEL_302;
          }
          goto LABEL_202;
        }
LABEL_199:
        uint64_t v154 = v149 + 6;
        goto LABEL_200;
      }
LABEL_301:
      uint64_t v12 = v246;
      uint64_t v32 = v253;
      *((void *)v5 + 7) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v243, (uint64_t)__p);
      uint64_t v156 = *((void *)&v276 + 1);
      if (*((void ***)&v276 + 1) == &v275[1])
      {
LABEL_302:
        (*((void (**)(void **))v275[1] + 4))(&v275[1]);
        int v157 = __p[0];
        if (__p[0]) {
          goto LABEL_205;
        }
        goto LABEL_206;
      }
LABEL_202:
      if (v156) {
        (*(void (**)(uint64_t))(*(void *)v156 + 40))(v156);
      }
      int v157 = __p[0];
      if (__p[0])
      {
LABEL_205:
        __p[1] = v157;
        operator delete(v157);
      }
LABEL_206:
      int v158 = *((_DWORD *)v32 + 15);
      if (v158 != 13) {
        goto LABEL_225;
      }
      if (v250 < 2 || *((_DWORD *)v253 + 4)) {
        goto LABEL_321;
      }
      int v159 = *(_DWORD *)(*((void *)v253 + 6) + 16);
      BOOL v34 = v159 <= *(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a4)
                              + 540);
      uint64_t v160 = v253;
      if (v34)
      {
        size_t v161 = &operations_research::sat::_AllDifferentConstraintProto_default_instance_;
        if (*((_DWORD *)v253 + 15) == 13) {
          size_t v161 = (uint64_t *)*((void *)v253 + 6);
        }
        operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v249, (int *)v161 + 4, (int **)&v262);
        operations_research::sat::CreateAllDifferentCutGenerator((char **)&v262, (uint64_t)a4, (char **)__p);
        uint64_t v162 = *(void **)(v251 + 56);
        if ((unint64_t)v162 >= *(void *)(v251 + 64))
        {
          uint64_t v160 = v253;
          *(void *)(v251 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v243, (uint64_t)__p);
          uint64_t v164 = *((void *)&v276 + 1);
          if (*((void ***)&v276 + 1) == &v275[1]) {
            goto LABEL_248;
          }
        }
        else
        {
          *uint64_t v162 = 0;
          v162[1] = 0;
          v162[2] = 0;
          *(_OWORD *)uint64_t v162 = *(_OWORD *)__p;
          v162[2] = v275[0];
          __p[0] = 0;
          __p[1] = 0;
          v275[0] = 0;
          if (*((void *)&v276 + 1))
          {
            if (*((void ***)&v276 + 1) != &v275[1])
            {
              v162[6] = *((void *)&v276 + 1);
              size_t v163 = (void *)&v276 + 1;
              goto LABEL_247;
            }
            v162[6] = v162 + 3;
            (*(void (**)(void))(**((void **)&v276 + 1) + 24))(*((void *)&v276 + 1));
            unint64_t v188 = v162 + 7;
            uint64_t v160 = v253;
            *(void *)(v251 + 56) = v188;
            uint64_t v164 = *((void *)&v276 + 1);
            if (*((void ***)&v276 + 1) == &v275[1])
            {
LABEL_248:
              (*((void (**)(void **))v275[1] + 4))(&v275[1]);
              long long v165 = __p[0];
              if (!__p[0])
              {
LABEL_222:
                if (v262)
                {
                  *(void *)&long long v263 = v262;
                  operator delete(v262);
                }
                goto LABEL_224;
              }
LABEL_221:
              __p[1] = v165;
              operator delete(v165);
              goto LABEL_222;
            }
          }
          else
          {
            size_t v163 = v162 + 6;
LABEL_247:
            *size_t v163 = 0;
            uint64_t v175 = v162 + 7;
            uint64_t v160 = v253;
            *(void *)(v251 + 56) = v175;
            uint64_t v164 = *((void *)&v276 + 1);
            if (*((void ***)&v276 + 1) == &v275[1]) {
              goto LABEL_248;
            }
          }
        }
        if (v164) {
          (*(void (**)(uint64_t))(*(void *)v164 + 40))(v164);
        }
        long long v165 = __p[0];
        if (!__p[0]) {
          goto LABEL_222;
        }
        goto LABEL_221;
      }
LABEL_224:
      int v158 = *((_DWORD *)v160 + 15);
      uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
      uint64_t v12 = v246;
LABEL_225:
      if (v158 == 22)
      {
        if (v250 < 2 || *((_DWORD *)v253 + 4)) {
          goto LABEL_321;
        }
        operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v249, (int *)(*((void *)v253 + 6) + 40), (int **)&v262);
        if (*((_DWORD *)v253 + 15) == 22) {
          uint64_t v166 = (uint64_t *)*((void *)v253 + 6);
        }
        else {
          uint64_t v166 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
        }
        operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v249, (int *)v166 + 4, (char **)&v271);
        if (*((_DWORD *)v253 + 15) == 22) {
          size_t v167 = (uint64_t *)*((void *)v253 + 6);
        }
        else {
          size_t v167 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
        }
        int v168 = *((_DWORD *)v167 + 15);
        if (~v168 <= v168) {
          int v169 = v168;
        }
        else {
          int v169 = ~v168;
        }
        uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
        operations_research::sat::CreateCumulativeCutGenerator((int **)&v271, *(_DWORD *)(*(void *)v249 + 4 * v169) ^ (v168 >> 31), (char **)&v262, (uint64_t)a4, (char **)__p);
        uint64_t v170 = *(void **)(v251 + 56);
        if ((unint64_t)v170 >= *(void *)(v251 + 64))
        {
          uint64_t v12 = v246;
          uint64_t v172 = v253;
          *(void *)(v251 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v243, (uint64_t)__p);
          uint64_t v173 = *((void *)&v276 + 1);
          if (*((void ***)&v276 + 1) != &v275[1]) {
            goto LABEL_252;
          }
        }
        else
        {
          *uint64_t v170 = 0;
          v170[1] = 0;
          v170[2] = 0;
          *(_OWORD *)uint64_t v170 = *(_OWORD *)__p;
          v170[2] = v275[0];
          __p[0] = 0;
          __p[1] = 0;
          v275[0] = 0;
          if (*((void *)&v276 + 1))
          {
            uint64_t v12 = v246;
            if (*((void ***)&v276 + 1) != &v275[1])
            {
              v170[6] = *((void *)&v276 + 1);
              unint64_t v171 = (void *)&v276 + 1;
              goto LABEL_245;
            }
            v170[6] = v170 + 3;
            (*(void (**)(void))(**((void **)&v276 + 1) + 24))(*((void *)&v276 + 1));
          }
          else
          {
            unint64_t v171 = v170 + 6;
            uint64_t v12 = v246;
LABEL_245:
            void *v171 = 0;
          }
          unint64_t v176 = v170 + 7;
          uint64_t v172 = v253;
          *(void *)(v251 + 56) = v176;
          uint64_t v173 = *((void *)&v276 + 1);
          if (*((void ***)&v276 + 1) != &v275[1])
          {
LABEL_252:
            if (v173) {
              (*(void (**)(uint64_t))(*(void *)v173 + 40))(v173);
            }
            std::string::size_type v174 = __p[0];
            if (__p[0])
            {
LABEL_255:
              __p[1] = v174;
              operator delete(v174);
            }
LABEL_256:
            if (v271)
            {
              int v272 = (char *)v271;
              operator delete(v271);
            }
            if (v262)
            {
              *(void *)&long long v263 = v262;
              operator delete(v262);
            }
            int v158 = *((_DWORD *)v172 + 15);
            goto LABEL_261;
          }
        }
        (*((void (**)(void **))v275[1] + 4))(&v275[1]);
        std::string::size_type v174 = __p[0];
        if (__p[0]) {
          goto LABEL_255;
        }
        goto LABEL_256;
      }
LABEL_261:
      if (v158 != 27) {
        goto LABEL_321;
      }
      uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
      uint64_t v12 = v246;
      if (!*(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a4)
                     + 447)
        || *((_DWORD *)v253 + 4))
      {
        goto LABEL_321;
      }
      if (*((_DWORD *)v253 + 15) == 27)
      {
        uint64_t v177 = (int *)*((void *)v253 + 6);
        uint64_t v178 = (uint64_t *)*((void *)v177 + 5);
        if (!v178) {
          uint64_t v178 = &operations_research::sat::_LinearExpressionProto_default_instance_;
        }
        if (*((_DWORD *)v178 + 4) != 1 || *(void *)v178[6] != 1) {
          goto LABEL_321;
        }
      }
      else
      {
        uint64_t v178 = &operations_research::sat::_LinearExpressionProto_default_instance_;
        if (qword_26AEE1860) {
          uint64_t v178 = (uint64_t *)qword_26AEE1860;
        }
        if (*((_DWORD *)v178 + 4) != 1) {
          goto LABEL_321;
        }
        uint64_t v177 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
        if (*(void *)v178[6] != 1) {
          goto LABEL_321;
        }
      }
      int v179 = *(_DWORD *)v178[3];
      if (~v179 <= v179) {
        int v180 = *(_DWORD *)v178[3];
      }
      else {
        int v180 = ~v179;
      }
      int v181 = *(_DWORD *)(*(void *)v249 + 4 * v180);
      int v271 = 0;
      int v272 = 0;
      uint64_t v273 = 0;
      std::vector<operations_research::sat::LinearExpression>::reserve((char **)&v271, v177[6]);
      uint64_t v182 = 0;
      int v183 = v181 ^ (v179 >> 31);
      while (*((_DWORD *)v253 + 15) == 27)
      {
        uint64_t v184 = (int *)*((void *)v253 + 6);
        if (v182 >= v184[6]) {
          goto LABEL_294;
        }
LABEL_284:
        operations_research::sat::GetExprFromProto(*(void *)(*((void *)v184 + 4) + 8 * v182 + 8), v249, (uint64_t)&v262);
        operations_research::sat::PositiveVarExpr((uint64_t *)&v262, (uint64_t)__p);
        int64_t v185 = v272;
        if (v272 >= v273)
        {
          int v272 = std::vector<operations_research::sat::LinearExpression>::__push_back_slow_path<operations_research::sat::LinearExpression>(&v271, (uint64_t)__p);
          if (v275[1])
          {
            v275[2] = v275[1];
            operator delete(v275[1]);
          }
        }
        else
        {
          *((void *)v272 + 2) = 0;
          *((void *)v185 + 3) = 0;
          *(void *)int64_t v185 = 0;
          *((void *)v185 + 1) = 0;
          *(_OWORD *)int64_t v185 = *(_OWORD *)__p;
          *((void **)v185 + 2) = v275[0];
          __p[0] = 0;
          __p[1] = 0;
          v275[0] = 0;
          *((void *)v185 + 4) = 0;
          *((void *)v185 + 5) = 0;
          *(_OWORD *)(v185 + 24) = *(_OWORD *)&v275[1];
          *((void *)v185 + 5) = v276;
          v275[1] = 0;
          v275[2] = 0;
          *(void *)&long long v276 = 0;
          *((void *)v185 + 6) = *((void *)&v276 + 1);
          int v272 = v185 + 56;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((void)v264)
        {
          *((void *)&v264 + 1) = v264;
          operator delete((void *)v264);
        }
        if (v262)
        {
          *(void *)&long long v263 = v262;
          operator delete(v262);
        }
        ++v182;
      }
      if (v182 < dword_26AEE1850)
      {
        uint64_t v184 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
        goto LABEL_284;
      }
LABEL_294:
      operations_research::sat::AppendLinMaxRelaxation(v183, (int8x16_t ***)&v271, a4, v251, (int **)&v262);
      if (v250 < 2) {
        goto LABEL_309;
      }
      operations_research::sat::CreateLinMaxCutGenerator(v183, (uint64_t *)&v271, &v262, (uint64_t)a4, __p);
      int64_t v186 = *(void **)(v251 + 56);
      if ((unint64_t)v186 >= *(void *)(v251 + 64))
      {
        *(void *)(v251 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v243, (uint64_t)__p);
        uint64_t v189 = *((void *)&v276 + 1);
        if (*((void ***)&v276 + 1) == &v275[1]) {
          goto LABEL_328;
        }
      }
      else
      {
        *int64_t v186 = 0;
        v186[1] = 0;
        v186[2] = 0;
        *(_OWORD *)int64_t v186 = *(_OWORD *)__p;
        v186[2] = v275[0];
        __p[0] = 0;
        __p[1] = 0;
        v275[0] = 0;
        if (*((void *)&v276 + 1))
        {
          if (*((void ***)&v276 + 1) != &v275[1])
          {
            v186[6] = *((void *)&v276 + 1);
            uint64_t v187 = (void *)&v276 + 1;
            goto LABEL_327;
          }
          v186[6] = v186 + 3;
          (*(void (**)(void))(**((void **)&v276 + 1) + 24))(*((void *)&v276 + 1));
          *(void *)(v251 + 56) = v186 + 7;
          uint64_t v189 = *((void *)&v276 + 1);
          if (*((void ***)&v276 + 1) == &v275[1])
          {
LABEL_328:
            (*((void (**)(void **))v275[1] + 4))(&v275[1]);
            unint64_t v190 = __p[0];
            if (!__p[0]) {
              goto LABEL_309;
            }
LABEL_308:
            __p[1] = v190;
            operator delete(v190);
            goto LABEL_309;
          }
        }
        else
        {
          uint64_t v187 = v186 + 6;
LABEL_327:
          *uint64_t v187 = 0;
          *(void *)(v251 + 56) = v186 + 7;
          uint64_t v189 = *((void *)&v276 + 1);
          if (*((void ***)&v276 + 1) == &v275[1]) {
            goto LABEL_328;
          }
        }
      }
      if (v189) {
        (*(void (**)(uint64_t))(*(void *)v189 + 40))(v189);
      }
      unint64_t v190 = __p[0];
      if (__p[0]) {
        goto LABEL_308;
      }
LABEL_309:
      if (v262)
      {
        *(void *)&long long v263 = v262;
        operator delete(v262);
      }
      uint64_t v191 = (char *)v271;
      if (v271)
      {
        uint64_t v192 = v272;
        uint64_t v193 = v271;
        if (v272 != v271)
        {
          do
          {
            int v194 = (void *)*((void *)v192 - 4);
            if (v194)
            {
              *((void *)v192 - 3) = v194;
              operator delete(v194);
            }
            int v195 = (void *)*((void *)v192 - 7);
            if (v195)
            {
              *((void *)v192 - 6) = v195;
              operator delete(v195);
            }
            v192 -= 56;
          }
          while (v192 != v191);
          uint64_t v193 = v271;
        }
        int v272 = v191;
        operator delete(v193);
        uint64_t v5 = (operations_research::sat::_anonymous_namespace_ *)v251;
      }
LABEL_321:
      if (v256)
      {
        size_t v257 = (int *)v256;
        operator delete(v256);
      }
      if (v255[0])
      {
        v255[1] = v255[0];
        operator delete(v255[0]);
      }
      char v10 = v248 + 1;
      if (v248 + 1 == (operations_research::sat **)v245) {
        goto LABEL_332;
      }
    }
    uint64_t v35 = *((void *)v253 + 6);
    uint64_t v36 = *(const void **)(v35 + 24);
    uint64_t v37 = *(int *)(v35 + 16);
    unint64_t v262 = 0;
    long long v263 = 0uLL;
    if (v37)
    {
      if ((v37 & 0x80000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v38 = (char *)operator new(4 * v37);
      unint64_t v39 = &v38[4 * v37];
      unint64_t v262 = v38;
      *((void *)&v263 + 1) = v39;
      memcpy(v38, v36, 4 * v37);
      *(void *)&long long v263 = v39;
    }
    unint64_t v40 = *(const void **)(v35 + 48);
    uint64_t v41 = *(int *)(v35 + 40);
    int v272 = 0;
    uint64_t v273 = 0;
    int v271 = 0;
    if (v41)
    {
      if ((v41 & 0x80000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v42 = (char *)operator new(4 * v41);
      int v43 = &v42[4 * v41];
      int v271 = v42;
      uint64_t v273 = v43;
      memcpy(v42, v40, 4 * v41);
      int v272 = v43;
    }
    operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v249, (int *)(v35 + 64), (char **)&v269);
    int v44 = operations_research::sat::ReindexArcs((int **)&v262, (int **)&v271);
    operations_research::sat::CreateStronglyConnectedGraphCutGenerator(v44, (uint64_t)&v262, (uint64_t)&v271, (uint64_t)&v269, (uint64_t)a4, __p);
    uint64_t v45 = *(void **)(v251 + 56);
    if ((unint64_t)v45 >= *(void *)(v251 + 64))
    {
      uint64_t v32 = v253;
      *(void *)(v251 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v243, (uint64_t)__p);
      uint64_t v47 = *((void *)&v276 + 1);
      if (*((void ***)&v276 + 1) == &v275[1]) {
        goto LABEL_83;
      }
      goto LABEL_53;
    }
    *uint64_t v45 = 0;
    v45[1] = 0;
    v45[2] = 0;
    *(_OWORD *)uint64_t v45 = *(_OWORD *)__p;
    v45[2] = v275[0];
    __p[0] = 0;
    __p[1] = 0;
    v275[0] = 0;
    if (*((void *)&v276 + 1))
    {
      if (*((void ***)&v276 + 1) == &v275[1])
      {
        v45[6] = v45 + 3;
        (*(void (**)(void))(**((void **)&v276 + 1) + 24))(*((void *)&v276 + 1));
        uint64_t v126 = v45 + 7;
        uint64_t v32 = v253;
        *(void *)(v251 + 56) = v126;
        uint64_t v47 = *((void *)&v276 + 1);
        if (*((void ***)&v276 + 1) == &v275[1])
        {
LABEL_83:
          (*((void (**)(void **))v275[1] + 4))(&v275[1]);
          BOOL v48 = __p[0];
          if (!__p[0]) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
LABEL_53:
        if (v47) {
          (*(void (**)(uint64_t))(*(void *)v47 + 40))(v47);
        }
        BOOL v48 = __p[0];
        if (!__p[0]) {
          goto LABEL_57;
        }
LABEL_56:
        __p[1] = v48;
        operator delete(v48);
LABEL_57:
        if (v269)
        {
          uint64_t v270 = v269;
          operator delete(v269);
        }
        if (v271)
        {
          int v272 = (char *)v271;
          operator delete(v271);
        }
        if (v262)
        {
          *(void *)&long long v263 = v262;
          operator delete(v262);
        }
        int v33 = *((_DWORD *)v32 + 15);
        goto LABEL_64;
      }
      v45[6] = *((void *)&v276 + 1);
      uint64_t v46 = (void *)&v276 + 1;
    }
    else
    {
      uint64_t v46 = v45 + 6;
    }
    *uint64_t v46 = 0;
    uint64_t v65 = v45 + 7;
    uint64_t v32 = v253;
    *(void *)(v251 + 56) = v65;
    uint64_t v47 = *((void *)&v276 + 1);
    if (*((void ***)&v276 + 1) == &v275[1]) {
      goto LABEL_83;
    }
    goto LABEL_53;
  }
LABEL_332:
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v196 = 0;
    int v252 = 0;
    int v254 = 0;
    do
    {
      if (*(_DWORD *)(v6[6] + 4 * v196) == -1)
      {
        int v197 = *(_DWORD *)(*v6 + 4 * v196);
        uint64_t v278 = &unk_26F0BFEC0;
        int v279 = v197;
        size_t v280 = &v278;
        uint64_t v198 = (void *)*((void *)a4 + 4);
        unint64_t v199 = (char *)a4 + 32;
        do
        {
          unint64_t v200 = v198[4];
          BOOL v201 = v200 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v200 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
            BOOL v202 = v198;
          }
          else {
            BOOL v202 = v198 + 1;
          }
          if (v201) {
            unint64_t v199 = (char *)v198;
          }
          uint64_t v198 = (void *)*v202;
        }
        while (*v202);
        if (*(void *)(*(void *)(*((void *)v199 + 5) + 40) + 12 * v197)
           + *(void *)(*(void *)(*((void *)v199 + 5) + 40) + 12 * (v197 ^ 1)))
        {
          if (operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v7, v197)
            && operations_research::sat::AppendFullEncodingRelaxation(v197, (uint64_t)a4, v251))
          {
            ++v252;
          }
          else
          {
            uint64_t v204 = *(void **)v251;
            uint64_t v203 = *(void *)(v251 + 8);
            operations_research::sat::AppendPartialGreaterThanEncodingRelaxation(v197, (uint64_t)a4, v251);
            int v205 = v254;
            if ((uint64_t)(*(void *)(v251 + 8) - *(void *)v251) >> 6 > (unint64_t)(int)((unint64_t)(v203 - (void)v204) >> 6)) {
              int v205 = v254 + 1;
            }
            int v254 = v205;
          }
        }
      }
      ++v196;
    }
    while (v196 < *((int *)a2 + 6));
  }
  long long v206 = (uint64_t *)v251;
  uint64_t v207 = (operations_research::sat::BinaryImplicationGraph *)operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)a4);
  operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(v207, (uint64_t **)(v251 + 24), 100000000);
  uint64_t v208 = *(int ***)(v251 + 24);
  std::string::size_type v209 = *(int ***)(v251 + 32);
  if (v208 != v209)
  {
    uint64_t v210 = (void *)((char *)a4 + 32);
    do
    {
      if (*v208 != v208[1])
      {
        unint64_t v211 = (void *)*v210;
        if (!*v210) {
          goto LABEL_366;
        }
        BOOL v212 = v210;
        do
        {
          unint64_t v213 = v211[4];
          BOOL v214 = v213 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
          if (v213 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
            uint64_t v215 = v211;
          }
          else {
            uint64_t v215 = v211 + 1;
          }
          if (v214) {
            BOOL v212 = v211;
          }
          unint64_t v211 = (void *)*v215;
        }
        while (*v215);
        if (v212 != v210
          && v212[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        {
          uint64_t v216 = (void *)v212[5];
        }
        else
        {
LABEL_366:
          uint64_t v216 = 0;
        }
        unint64_t v262 = v216;
        long long v263 = xmmword_23CE86730;
        long long v264 = 0u;
        long long v265 = 0u;
        uint64_t v217 = *v208;
        long long v218 = v208[1];
        if (*v208 != v218)
        {
          do
            operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v262, *v217++, 1);
          while (v217 != v218);
        }
        operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v262, (uint64_t)__p);
        long long v206 = (uint64_t *)v251;
        unint64_t v219 = *(void *)(v251 + 8);
        if (v219 >= *(void *)(v251 + 16))
        {
          uint64_t v220 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)v251, (uint64_t)__p);
          int v221 = (void *)v276;
          *(void *)(v251 + 8) = v220;
          if (v221)
          {
            *((void *)&v276 + 1) = v221;
            operator delete(v221);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v219 = *(_OWORD *)__p;
          *(void *)(v219 + 16) = 0;
          *(void *)(v219 + 24) = 0;
          *(void *)(v219 + 32) = 0;
          *(void *)(v219 + 40) = 0;
          *(_OWORD *)(v219 + 16) = *(_OWORD *)v275;
          *(void **)(v219 + 32) = v275[2];
          memset(v275, 0, sizeof(v275));
          *(void *)(v219 + 48) = 0;
          *(void *)(v219 + 56) = 0;
          *(_OWORD *)(v219 + 40) = v276;
          *(void *)(v219 + 56) = v277;
          long long v276 = 0uLL;
          uint64_t v277 = 0;
          *(void *)(v251 + 8) = v219 + 64;
        }
        if (v275[0])
        {
          v275[1] = v275[0];
          operator delete(v275[0]);
        }
        if (*((void *)&v264 + 1))
        {
          *(void *)&long long v265 = *((void *)&v264 + 1);
          operator delete(*((void **)&v264 + 1));
        }
      }
      v208 += 3;
    }
    while (v208 != v209);
  }
  uint64_t v222 = *v206;
  uint64_t v223 = v206[1];
  if (v223 == *v206)
  {
    int v226 = 0;
    unint64_t v227 = (v223 - *v206) >> 6;
    uint64_t v222 = v206[1];
  }
  else
  {
    uint64_t v224 = 0;
    unint64_t v225 = 0;
    int v226 = 0;
    do
    {
      uint64_t v228 = v222 + v224;
      if (*(void *)(v222 + v224 + 24) - *(void *)(v222 + v224 + 16) >= 8uLL)
      {
        uint64_t v229 = v226++;
        uint64_t v230 = v222 + (v229 << 6);
        *(_OWORD *)std::string __p = *(_OWORD *)v230;
        uint64_t v231 = *(void *)(v230 + 32);
        long long v232 = *(_OWORD *)(v230 + 16);
        *(void *)(v230 + 16) = 0;
        *(void *)(v230 + 24) = 0;
        uint64_t v233 = *(void *)(v230 + 56);
        long long v234 = *(_OWORD *)(v230 + 40);
        *(void *)(v230 + 48) = 0;
        *(void *)(v230 + 56) = 0;
        *(void *)(v230 + 32) = 0;
        *(void *)(v230 + 40) = 0;
        *(_OWORD *)uint64_t v230 = *(_OWORD *)v228;
        *(_OWORD *)(v230 + 16) = *(_OWORD *)(v228 + 16);
        *(void *)(v230 + 32) = *(void *)(v228 + 32);
        *(void *)(v228 + 24) = 0;
        *(void *)(v228 + 32) = 0;
        uint64_t v235 = *(void *)(v228 + 56);
        *(_OWORD *)(v230 + 40) = *(_OWORD *)(v228 + 40);
        *(void *)(v230 + 56) = v235;
        *(void *)(v228 + 40) = 0;
        *(void *)(v228 + 48) = 0;
        *(void *)(v228 + 56) = 0;
        *(_OWORD *)uint64_t v228 = *(_OWORD *)__p;
        *(_OWORD *)(v228 + 16) = v232;
        *(void *)(v228 + 32) = v231;
        *(_OWORD *)(v228 + 40) = v234;
        *(void *)(v228 + 56) = v233;
        uint64_t v222 = *v206;
        uint64_t v223 = v206[1];
      }
      ++v225;
      unint64_t v227 = (v223 - v222) >> 6;
      v224 += 64;
    }
    while (v227 > v225);
  }
  if (v226 <= v227)
  {
    if (v226 < v227)
    {
      uint64_t v236 = v222 + ((uint64_t)v226 << 6);
      while (v223 != v236)
      {
        size_t v237 = *(void **)(v223 - 24);
        if (v237)
        {
          *(void *)(v223 - 16) = v237;
          operator delete(v237);
        }
        uint64_t v238 = *(void **)(v223 - 48);
        if (v238)
        {
          *(void *)(v223 - 40) = v238;
          operator delete(v238);
        }
        v223 -= 64;
      }
      v206[1] = v236;
    }
  }
  else
  {
    std::vector<operations_research::sat::LinearConstraint>::__append((uint64_t)v206, v226 - v227);
  }
  if (*off_26AECFED8[0] >= 3
    && (off_26AECFED8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFED8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 686);
    unint64_t v239 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v239, (uint64_t)"num_full_encoding_relaxations: ", 31);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
  if (*off_26AECFEE0[0] >= 3
    && (off_26AECFEE0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFEE0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 687);
    uint64_t v240 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v240, (uint64_t)"num_partial_encoding_relaxations: ", 34);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
  if (*off_26AECFEE8[0] >= 3
    && (off_26AECFEE8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFEE8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 689);
    google::LogMessage::stream((google::LogMessage *)__p);
    unint64_t v241 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)" constraints in the LP relaxation.", 34);
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
  if (*off_26AECFEF0[0] >= 3
    && (off_26AECFEF0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFEF0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 691);
    google::LogMessage::stream((google::LogMessage *)__p);
    uint64_t v242 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v242, (uint64_t)" cuts generators.", 17);
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
  if ((void)v260)
  {
    operator delete(v258);
    uint64_t v258 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v261 = 0;
    *(void *)&long long v260 = 0;
    long long v259 = 0uLL;
  }
  if (*((void *)&v260 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v260 + 1));
  }
}

void sub_23CC91FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::FeasibilityPump>(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    unint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CC92460(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F2C40545DF5CBLL);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    while (1)
    {
      while (1)
      {
        char v10 = (uint64_t **)v5;
        uint64_t v13 = (const void *)v5[4];
        uint64_t v11 = v5 + 4;
        uint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_27;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        break;
      }
      uint64_t v5 = v10[1];
      if (!v5)
      {
        uint64_t v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    char v10 = a1 + 1;
LABEL_27:
    uint64_t v22 = (uint64_t *)v10;
    char v10 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    v10[6] = *(uint64_t **)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    char *v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    *uint64_t v6 = (uint64_t *)v10;
    unint64_t v23 = (uint64_t *)**a1;
    uint64_t v24 = (uint64_t *)v10;
    if (v23)
    {
      *a1 = v23;
      uint64_t v24 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void operations_research::sat::LinearConstraint::~LinearConstraint(operations_research::sat::LinearConstraint *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
}

_DWORD *std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_26F0C1710;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1710;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat29NewIntegerVariableFromLiteralENS0_7LiteralEEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat29NewIntegerVariableFromLiteralENS0_7LiteralEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat29NewIntegerVariableFromLiteralENS0_7LiteralEEUlPNS0_5ModelEE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat29NewIntegerVariableFromLiteralENS0_7LiteralEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(unsigned int *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  uint64_t v5 = (int)*a1;
  uint64_t v6 = *(void *)(v4 + 160);
  if ((int)v5 >= (int)((unint64_t)(*(void *)(v4 + 168) - v6) >> 2)
    || (uint64_t ConstantIntegerVariable = *(unsigned int *)(v6 + 4 * v5), ConstantIntegerVariable == -1))
  {
    unint64_t v8 = *(void *)(*(void *)(*(void *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2)
                                           + 208)
                               + 24)
                   + (((unint64_t)(int)*a1 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if ((v8 >> *a1))
    {
      int v20 = (void (**)(void **))&unk_26F0C1780;
      uint64_t v21 = 1;
      uint64_t v22 = (void **)&v20;
      uint64_t v9 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
      uint64_t ConstantIntegerVariable = operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v9, v21);
      char v10 = v22;
      if (v22 == (void **)&v20)
      {
        v20[4]((void **)&v20);
LABEL_12:
        operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(v4, (const char *)*a1, ConstantIntegerVariable, 1);
        return ConstantIntegerVariable;
      }
    }
    else if ((v8 >> (*a1 & 0x3F ^ 1)))
    {
      size_t v17 = (void (**)(void **))&unk_26F0C1780;
      uint64_t v18 = 0;
      BOOL v19 = (void **)&v17;
      uint64_t v11 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
      uint64_t ConstantIntegerVariable = operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v11, v18);
      char v10 = v19;
      if (v19 == (void **)&v17)
      {
        v17[4]((void **)&v17);
        goto LABEL_12;
      }
    }
    else
    {
      int v14 = (void (**)(void **))&unk_26F0C0D38;
      long long v15 = xmmword_23CE7EC50;
      uint64_t v16 = (void **)&v14;
      uint64_t v12 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
      uint64_t ConstantIntegerVariable = operations_research::sat::IntegerTrail::AddIntegerVariable(v12, v15, *((uint64_t *)&v15 + 1));
      char v10 = v16;
      if (v16 == (void **)&v14)
      {
        v14[4]((void **)&v14);
        goto LABEL_12;
      }
    }
    if (v10) {
      (*((void (**)(void **))*v10 + 5))(v10);
    }
    goto LABEL_12;
  }
  return ConstantIntegerVariable;
}

void sub_23CC929D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC929E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC929FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::function<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0C1780;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C1780;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(*a2);
  uint64_t v4 = *(void *)(a1 + 8);

  return operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v3, v4);
}

uint64_t std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23ConstantIntegerVariableExEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat23ConstantIntegerVariableExEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23ConstantIntegerVariableExEUlPNS0_5ModelEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23ConstantIntegerVariableExEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CC92BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::CutGenerator::~CutGenerator(operations_research::sat::CutGenerator *this)
{
  uint64_t v2 = (char *)this + 24;
  uint64_t v3 = (char *)*((void *)this + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(void **)this;
    if (!*(void *)this) {
      return;
    }
    goto LABEL_5;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
LABEL_5:
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

char *std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(56 * v6);
  }
  else
  {
    int v7 = 0;
  }
  unint64_t v8 = &v7[56 * v3];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  char v10 = (char *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 48);
  if (v9)
  {
    uint64_t v11 = &v7[56 * v3 + 48];
    if (v9 == a2 + 24)
    {
      *(void *)uint64_t v11 = v8 + 24;
      (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
      goto LABEL_17;
    }
    *(void *)uint64_t v11 = v9;
  }
  else
  {
    char v10 = &v7[56 * v3 + 48];
  }
  *(void *)char v10 = 0;
LABEL_17:
  uint64_t v12 = &v7[56 * v6];
  uint64_t v13 = v8 + 56;
  long long v15 = (char *)*a1;
  int v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v13;
    a1[2] = v12;
    if (v14) {
      goto LABEL_38;
    }
    return v8 + 56;
  }
  uint64_t v16 = 0;
  size_t v17 = (char *)a1[1];
  do
  {
    BOOL v19 = &v8[v16];
    int v20 = &v14[v16];
    *((void *)v19 - 7) = 0;
    *((void *)v19 - 6) = 0;
    *((void *)v19 - 5) = 0;
    *(_OWORD *)(v19 - 56) = *(_OWORD *)&v14[v16 - 56];
    *((void *)v19 - 5) = *(void *)&v14[v16 - 40];
    *((void *)v20 - 7) = 0;
    *((void *)v20 - 6) = 0;
    *((void *)v20 - 5) = 0;
    uint64_t v21 = *(char **)&v14[v16 - 8];
    if (!v21)
    {
      uint64_t v18 = v19 - 8;
LABEL_20:
      *(void *)uint64_t v18 = 0;
      goto LABEL_21;
    }
    if (v20 - 32 != v21)
    {
      uint64_t v18 = v17 - 8;
      *((void *)v19 - 1) = v21;
      goto LABEL_20;
    }
    *((void *)v19 - 1) = v19 - 32;
    (*(void (**)(void))(**((void **)v20 - 1) + 24))(*((void *)v20 - 1));
LABEL_21:
    v17 -= 56;
    v16 -= 56;
  }
  while (&v14[v16] != v15);
  uint64_t v22 = (char *)*a1;
  int v14 = (char *)a1[1];
  *a1 = &v8[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v14 == v22) {
    goto LABEL_37;
  }
  uint64_t v23 = v14 - 32;
  while (2)
  {
    uint64_t v24 = (char *)*((void *)v14 - 1);
    if (v14 - 32 == v24)
    {
      (*(void (**)(char *))(*((void *)v14 - 4) + 32))(v14 - 32);
      unint64_t v25 = (void *)*((void *)v14 - 7);
      if (!v25) {
        goto LABEL_28;
      }
      goto LABEL_35;
    }
    if (v24) {
      (*(void (**)(char *))(*(void *)v24 + 40))(v24);
    }
    unint64_t v25 = (void *)*((void *)v14 - 7);
    if (v25)
    {
LABEL_35:
      *((void *)v14 - 6) = v25;
      operator delete(v25);
    }
LABEL_28:
    v14 -= 56;
    v23 -= 56;
    if (v14 != v22) {
      continue;
    }
    break;
  }
  int v14 = v22;
LABEL_37:
  if (v14) {
LABEL_38:
  }
    operator delete(v14);
  return v8 + 56;
}

char *std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 5 > v4) {
    unint64_t v4 = v5 >> 5;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v9 = v7 << 6;
  char v10 = (char *)operator new(v7 << 6);
  long long v11 = *(_OWORD *)(a2 + 16);
  uint64_t v12 = &v10[64 * v3];
  uint64_t v13 = &v10[v9];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
  *((_OWORD *)v12 + 1) = v11;
  *((void *)v12 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v12 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  int v14 = v12 + 64;
  long long v15 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (!v16) {
      return v14;
    }
    goto LABEL_19;
  }
  uint64_t v17 = 0;
  do
  {
    uint64_t v18 = &v12[v17];
    BOOL v19 = &v16[v17];
    *((_OWORD *)v18 - 4) = *(_OWORD *)&v16[v17 - 64];
    *((_OWORD *)v18 - 3) = *(_OWORD *)&v16[v17 - 48];
    *((void *)v18 - 4) = *(void *)&v16[v17 - 32];
    *((void *)v19 - 6) = 0;
    *((void *)v19 - 5) = 0;
    *((void *)v19 - 4) = 0;
    *(_OWORD *)(v18 - 24) = *(_OWORD *)&v16[v17 - 24];
    *((void *)v18 - 1) = *(void *)&v16[v17 - 8];
    *((void *)v19 - 3) = 0;
    *((void *)v19 - 2) = 0;
    *((void *)v19 - 1) = 0;
    v17 -= 64;
  }
  while (&v16[v17] != v15);
  int v20 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  *a1 = &v12[v17];
  a1[1] = v14;
  a1[2] = v13;
  if (v16 != v20)
  {
    do
    {
      uint64_t v21 = (void *)*((void *)v16 - 3);
      if (v21)
      {
        *((void *)v16 - 2) = v21;
        operator delete(v21);
      }
      uint64_t v22 = (void *)*((void *)v16 - 6);
      if (v22)
      {
        *((void *)v16 - 5) = v22;
        operator delete(v22);
      }
      v16 -= 64;
    }
    while (v16 != v20);
    uint64_t v16 = v20;
  }
  if (v16) {
LABEL_19:
  }
    operator delete(v16);
  return v14;
}

uint64_t std::__split_buffer<operations_research::sat::LinearConstraint>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(i - 48);
    if (v5)
    {
      *(void *)(i - 40) = v5;
      operator delete(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<operations_research::sat::LinearConstraint>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 6);
      v5 += 64 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    BOOL v6 = *(char **)a1;
    uint64_t v7 = (uint64_t)&v5[-*(void *)a1] >> 6;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 58) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 5 > v8) {
      unint64_t v8 = v9 >> 5;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 58) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v11 = (char *)operator new(v10 << 6);
    }
    else
    {
      long long v11 = 0;
    }
    uint64_t v12 = &v11[64 * v7];
    size_t v13 = a2 << 6;
    int v14 = &v11[64 * v10];
    bzero(v12, v13);
    long long v15 = &v12[v13];
    if (v5 == v6)
    {
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_27;
    }
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v12[v16];
      uint64_t v18 = &v5[v16];
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v5[v16 - 64];
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((_OWORD *)v17 - 3) = *(_OWORD *)&v5[v16 - 48];
      *((void *)v17 - 4) = *(void *)&v5[v16 - 32];
      *((void *)v18 - 6) = 0;
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v17 - 2) = 0;
      *((void *)v17 - 1) = 0;
      *(_OWORD *)(v17 - 24) = *(_OWORD *)&v5[v16 - 24];
      *((void *)v17 - 1) = *(void *)&v5[v16 - 8];
      *((void *)v18 - 3) = 0;
      *((void *)v18 - 2) = 0;
      *((void *)v18 - 1) = 0;
      v16 -= 64;
    }
    while (&v5[v16] != v6);
    BOOL v19 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    *(void *)a1 = &v12[v16];
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      do
      {
        int v20 = (void *)*((void *)v5 - 3);
        if (v20)
        {
          *((void *)v5 - 2) = v20;
          operator delete(v20);
        }
        uint64_t v21 = (void *)*((void *)v5 - 6);
        if (v21)
        {
          *((void *)v5 - 5) = v21;
          operator delete(v21);
        }
        v5 -= 64;
      }
      while (v5 != v19);
      uint64_t v5 = v19;
    }
    if (v5)
    {
LABEL_27:
      operator delete(v5);
    }
  }
}

void *operations_research::sat::Model::Delete<operations_research::sat::FeasibilityPump>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::FeasibilityPump *)a1[1];
  *a1 = &unk_26F0C1810;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::FeasibilityPump::~FeasibilityPump(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::FeasibilityPump>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::FeasibilityPump *)a1[1];
  *a1 = &unk_26F0C1810;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::FeasibilityPump::~FeasibilityPump(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::LinearRelaxation::~LinearRelaxation(operations_research::sat::LinearRelaxation *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (!v2) {
    goto LABEL_14;
  }
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v3 == v2) {
    goto LABEL_13;
  }
  uint64_t v5 = v3 - 32;
  do
  {
    uint64_t v6 = *(void *)(v3 - 8);
    if (v3 - 32 == v6)
    {
      (*(void (**)(uint64_t))(*(void *)(v3 - 32) + 32))(v3 - 32);
      uint64_t v7 = *(void **)(v3 - 56);
      if (!v7) {
        goto LABEL_4;
      }
LABEL_11:
      *(void *)(v3 - 48) = v7;
      operator delete(v7);
      goto LABEL_4;
    }
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
    }
    uint64_t v7 = *(void **)(v3 - 56);
    if (v7) {
      goto LABEL_11;
    }
LABEL_4:
    v3 -= 56;
    v5 -= 56;
  }
  while (v3 != v2);
  uint64_t v4 = (void *)*((void *)this + 6);
LABEL_13:
  *((void *)this + 7) = v2;
  operator delete(v4);
LABEL_14:
  uint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 4);
    unint64_t v10 = (void *)*((void *)this + 3);
    if (v9 != v8)
    {
      uint64_t v11 = *((void *)this + 4);
      do
      {
        size_t v13 = *(void **)(v11 - 24);
        v11 -= 24;
        uint64_t v12 = v13;
        if (v13)
        {
          *(void *)(v9 - 16) = v12;
          operator delete(v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      unint64_t v10 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v8;
    operator delete(v10);
  }
  uint64_t v14 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v15 = *((void *)this + 1);
    uint64_t v16 = *(void **)this;
    if (v15 != v14)
    {
      do
      {
        uint64_t v17 = *(void **)(v15 - 24);
        if (v17)
        {
          *(void *)(v15 - 16) = v17;
          operator delete(v17);
        }
        uint64_t v18 = *(void **)(v15 - 48);
        if (v18)
        {
          *(void *)(v15 - 40) = v18;
          operator delete(v18);
        }
        v15 -= 64;
      }
      while (v15 != v14);
      uint64_t v16 = *(void **)this;
    }
    *((void *)this + 1) = v14;
    operator delete(v16);
  }
}

void *operations_research::sat::anonymous namespace'::LnsSolver::LnsSolver(void *a1, uint64_t *a2, const operations_research::sat::SatParameters *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a2;
  if (*(char *)(*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
    *a1 = &unk_26F0BF840;
    uint64_t v12 = (std::string *)(a1 + 1);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v11 = *(_OWORD *)(v10 + 8);
    __p.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    *a1 = &unk_26F0BF840;
    uint64_t v12 = (std::string *)(a1 + 1);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      *uint64_t v12 = __p;
      a1[4] = 0;
      a1[5] = 0;
      goto LABEL_7;
    }
  }
  std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  int v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  a1[4] = 0;
  a1[5] = 0;
  if (v13 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_7:
  *a1 = &unk_26F0C1858;
  uint64_t v14 = *a2;
  *a2 = 0;
  a1[6] = v14;
  a1[7] = a4;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(a1 + 8), a3);
  a1[80] = a5;
  return a1;
}

void sub_23CC93704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::anonymous namespace'::LnsSolver::~LnsSolver(operations_research::sat::_anonymous_namespace_::LnsSolver *this)
{
  *(void *)this = &unk_26F0C1858;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::_anonymous_namespace_::LnsSolver *)((char *)this + 64));
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_26F0BF840;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26F0C1858;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::_anonymous_namespace_::LnsSolver *)((char *)this + 64));
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_26F0BF840;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::anonymous namespace'::LnsSolver::TaskIsAvailable(operations_research::sat::_anonymous_namespace_::LnsSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3 = *((void *)this + 80);
  if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v3 + 32), a2)|| (operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v3 + 16), v4) & 1) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 6) + 24);

  return v6();
}

uint64_t operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_26F0C18A8;
  a3[1] = a2;
  a3[2] = this;
  a3[3] = a3;
  return this;
}

void operations_research::sat::anonymous namespace'::LnsSolver::Synchronize(operations_research::sat::NeighborhoodGenerator **this, absl::lts_2020_02_25::Mutex *a2)
{
  operations_research::sat::NeighborhoodGenerator::Synchronize(this[6], a2);
  double v3 = *((double *)this + 5);
  uint64_t v4 = this[6];
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::NeighborhoodGenerator *)((char *)v4 + 40), v5);
  double v6 = *((double *)v4 + 15);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v4 + 5, v7, v8, v9, v10, v11, v12, v13);
  *((double *)this + 5) = v6;
  uint64_t v14 = (absl::lts_2020_02_25::Mutex *)*((void *)this[80] + 2);
  absl::lts_2020_02_25::Mutex::Lock(v14, v15);
  *(double *)(*((void *)v14 + 1) + 112) = v6 - v3 + *(double *)(*((void *)v14 + 1) + 112);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v14, v16, v17, v18, v19, v20, v21, v22);
}

void std::__function::__func<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C18A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C18A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  v144[0] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 640);
  if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v2 + 32), v3)|| (operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v2 + 16), v4) & 1) != 0)
  {
    return;
  }
  __dst[0] = *(void *)(v0 + 8);
  LODWORD(__dst[1]) = *(_DWORD *)(v1 + 336);
  uint64_t v129 = 0;
  unint64_t v127 = 0;
  uint64_t v128 = 0;
  std::seed_seq::__init[abi:ne180100]<int const*>((uint64_t)&v127, (int *)__dst, (int *)&__dst[1] + 1);
  std::seed_seq::generate[abi:ne180100]<unsigned int *>((unint64_t)&v127, v143, v144);
  memcpy(__dst, v143, 0x9C0uLL);
  __dst[312] = 0;
  if ((__dst[0] & 0x80000000) == 0)
  {
    uint64_t v6 = 4;
    while (!*(_DWORD *)((char *)__dst + v6))
    {
      v6 += 4;
      if (v6 == 2496)
      {
        LODWORD(__dst[0]) = 0x80000000;
        break;
      }
    }
  }
  uint64_t v7 = *(void *)(v1 + 48);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v7 + 40), v5);
  double v8 = *(double *)(v7 + 72);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(v7 + 40), v9, v10, v11, v12, v13, v14, v15);
  uint64_t v16 = *(void *)(v1 + 48);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v16 + 40), v17);
  uint64_t v18 = *(void *)(v16 + 88);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(v16 + 40), v19, v20, v21, v22, v23, v24, v25);
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v123, 0);
  int v26 = *(absl::lts_2020_02_25 ***)(*(void *)(v1 + 640) + 32);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v26 + 39), v27);
  uint64_t v29 = v26[44];
  unint64_t v28 = v26[45];
  absl::lts_2020_02_25::Mutex::Unlock(v26 + 39, v30, v31, v32, v33, v34, v35, v36);
  if ((int)(-858993459 * ((unint64_t)(v28 - v29) >> 3)) < 1)
  {
    int v126 = 0;
    operations_research::sat::SharedResponseManager::GetInnerObjectiveUpperBound(*(operations_research::sat::SharedResponseManager **)(*(void *)(v1 + 640) + 32), v37);
  }
  else
  {
    int v126 = 2;
    operations_research::sat::SharedSolutionRepository<long long>::GetRandomBiasedSolution(v26 + 38, (absl::lts_2020_02_25::Mutex *)__dst, (uint64_t)v143);
    uint64_t v38 = (uint64_t *)*((void *)&v143[0] + 1);
    unint64_t v39 = *(uint64_t **)&v143[1];
    if (*((void *)&v143[0] + 1) != *(void *)&v143[1])
    {
      unsigned int v40 = v124[0];
      do
      {
        uint64_t v41 = *v38;
        if (v40 == v124[1]) {
          google::protobuf::RepeatedField<long long>::Reserve(v124, v40 + 1);
        }
        *(void *)(v125 + 8 * v40) = v41;
        v124[0] = v40 + 1;
        ++v38;
        ++v40;
      }
      while (v38 != v39);
    }
    operations_research::sat::SharedSolutionRepository<long long>::GetSolution((uint64_t)(v26 + 38), 0, (uint64_t)&v134);
    if (__p)
    {
      int v136 = __p;
      operator delete(__p);
    }
    if (*((void *)&v143[0] + 1))
    {
      *(void *)&v143[1] = *((void *)&v143[0] + 1);
      operator delete(*((void **)&v143[0] + 1));
    }
  }
  __int16 v116 = 0;
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)&v117, 0);
  uint64_t v120 = 0;
  HIBYTE(v122) = 0;
  LOBYTE(v121) = 0;
  uint64_t v42 = (absl::lts_2020_02_25::Mutex *)(*(void *)(v1 + 56) + 248);
  absl::lts_2020_02_25::Mutex::Lock(v42, v43);
  (*(void (**)(_OWORD *__return_ptr, double))(**(void **)(v1 + 48) + 16))(v143, v8);
  __int16 v116 = v143[0];
  int v44 = (void *)(v118 & 0xFFFFFFFFFFFFFFFELL);
  if ((v118 & 1) == 0)
  {
    uint64_t v45 = (void *)(*(void *)&v143[1] & 0xFFFFFFFFFFFFFFFELL);
    if ((v143[1] & 1) == 0) {
      goto LABEL_21;
    }
LABEL_24:
    if (v44 != (void *)*v45) {
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  int v44 = (void *)*v44;
  uint64_t v45 = (void *)(*(void *)&v143[1] & 0xFFFFFFFFFFFFFFFELL);
  if (v143[1]) {
    goto LABEL_24;
  }
LABEL_21:
  if (v44 != v45)
  {
LABEL_22:
    operations_research::sat::CpModelProto::CopyFrom((operations_research::sat::CpModelProto *)&v117, (const operations_research::sat::CpModelProto *)((char *)v143 + 8));
    goto LABEL_26;
  }
LABEL_25:
  operations_research::sat::CpModelProto::InternalSwap((operations_research::sat::CpModelProto *)&v117, (operations_research::sat::CpModelProto *)((char *)v143 + 8));
LABEL_26:
  uint64_t v120 = *((void *)&v143[9] + 1);
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)v121);
  }
  long long v121 = v143[10];
  uint64_t v122 = *(void *)&v143[11];
  BYTE7(v143[11]) = 0;
  LOBYTE(v143[10]) = 0;
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)((char *)v143 + 8));
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v42, v46, v47, v48, v49, v50, v51, v52);
  *(void *)&v143[0] = "lns_";
  *((void *)&v143[0] + 1) = 4;
  unsigned int v54 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(void *)(v0 + 8), &v136, v53);
  unsigned int v134 = &v136;
  std::string __p = (void *)(v54 - (unsigned char *)&v136);
  absl::lts_2020_02_25::StrCat((uint64_t)v143, (uint64_t)&v134, &__str);
  uint64_t v55 = (google::protobuf::Arena *)(v118 & 0xFFFFFFFFFFFFFFFELL);
  if (v118)
  {
    uint64_t v55 = *(google::protobuf::Arena **)v55;
    uint64_t v56 = v119;
    if (v119 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v56 = v119;
    if (v119 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_30:
      std::string::operator=(v56, &__str);
      goto LABEL_33;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(&v119, v55, (long long *)&__str);
LABEL_33:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!(_BYTE)v116) {
      goto LABEL_76;
    }
LABEL_37:
    uint64_t v58 = *(void *)(v1 + 48);
    uint64_t v59 = (absl::lts_2020_02_25 **)(v58 + 40);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v58 + 40), v57);
    uint64_t v60 = *(void *)(v58 + 104);
    absl::lts_2020_02_25::Mutex::Unlock(v59, v61, v62, v63, v64, v65, v66, v67);
    uint64_t v68 = *(void *)(v1 + 48);
    uint64_t v69 = (absl::lts_2020_02_25 **)(v68 + 40);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v68 + 40), v70);
    uint64_t v71 = *(void *)(v68 + 96);
    absl::lts_2020_02_25::Mutex::Unlock(v69, v72, v73, v74, v75, v76, v77, v78);
    if (v71 <= 1) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = v71;
    }
    if (*(char *)(v1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)(v1 + 8), *(void *)(v1 + 16));
    }
    else
    {
      long long v80 = *(_OWORD *)(v1 + 8);
      v115.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v80;
    }
    int v81 = (void *)HIBYTE(v122);
    if (v122 < 0) {
      int v81 = (void *)*((void *)&v121 + 1);
    }
    if (v81)
    {
      *(void *)&v143[0] = "_";
      *((void *)&v143[0] + 1) = 1;
      if (v122 >= 0) {
        uint64_t v82 = (void **)&v121;
      }
      else {
        uint64_t v82 = (void **)v121;
      }
      unsigned int v134 = v82;
      std::string __p = v81;
      absl::lts_2020_02_25::StrAppend(&v115, (uint64_t)v143, (uint64_t)&v134);
    }
    *(void *)&v143[0] = &v115;
    *((void *)&v143[0] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
    *(double *)&v143[1] = v8;
    uint64_t v83 = *(void *)(v0 + 8);
    *((void *)&v143[1] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    *(void *)&v143[2] = v83;
    *((void *)&v143[2] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
    *(void *)&v143[3] = v18;
    *((void *)&v143[3] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    *(double *)&v143[4] = (double)v60 / (double)v79;
    *((void *)&v143[4] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    absl::lts_2020_02_25::str_format_internal::FormatPack("%s(d=%0.2f s=%i t=%0.2f p=%0.2f)", 32, (uint64_t)v143, 5, (uint64_t)&v114);
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&v134, (const operations_research::sat::SatParameters *)(v1 + 64));
    uint64_t v140 = v18;
    char v139 = 0;
    LODWORD(v136) = v136 | 0x400400;
    char v138 = 0;
    int8x8_t v137 = vorr_s8(v137, (int8x8_t)0x2000008000);
    int v141 = 0;
    if (FLAGS_cp_model_dump_lns)
    {
      *(void *)&v143[0] = FLAGS_cp_model_dump_prefix;
      *((void *)&v143[0] + 1) = strlen((const char *)FLAGS_cp_model_dump_prefix);
      int v84 = v119;
      std::string::size_type size = HIBYTE(v119->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) != 0)
      {
        int v84 = (std::string *)v119->__r_.__value_.__r.__words[0];
        std::string::size_type size = v119->__r_.__value_.__l.__size_;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
      __str.__r_.__value_.__l.__size_ = size;
      v130[0] = ".pbtxt";
      v130[1] = 6;
      absl::lts_2020_02_25::StrCat((uint64_t)v143, (uint64_t)&__str, (uint64_t)v130, &v107);
      google::LogMessage::LogMessage((google::LogMessage *)v143, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2281);
      uint64_t v86 = (void *)google::LogMessage::stream((google::LogMessage *)v143);
      int32x4_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Dumping LNS model to '", 22);
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int32x4_t v88 = &v107;
      }
      else {
        int32x4_t v88 = (std::string *)v107.__r_.__value_.__r.__words[0];
      }
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v89 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v89 = v107.__r_.__value_.__l.__size_;
      }
      uint64_t v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, v89);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"'.", 2);
      google::LogMessage::~LogMessage((google::LogMessage *)v143);
      std::string::size_type v91 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
      uint64_t v92 = &v107;
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type v91 = v107.__r_.__value_.__l.__size_;
        uint64_t v92 = (std::string *)v107.__r_.__value_.__r.__words[0];
      }
      *(void *)&v143[0] = v92;
      *((void *)&v143[0] + 1) = v91;
      file::SetTextProto(v143, 47802, v130);
      if (v130[0])
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__str, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2283);
        uint64_t v106 = (void *)google::LogMessage::stream((google::LogMessage *)&__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"Check failed: (file::SetTextProto(name, neighborhood.cp_model, file::Defaults())).ok() ", 87);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__str);
      }
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
    }
    memset(v112, 0, 24);
    memset(v113, 0, sizeof(v113));
    v112[3] = v113;
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v143, (const operations_research::sat::SatParameters *)&v134);
    int v132 = 0;
    int v93 = operator new(0x248uLL);
    *int v93 = &unk_26F0C1DB0;
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v93 + 1), (const operations_research::sat::SatParameters *)v143);
    int v132 = v93;
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v143);
    *(void *)&v143[0] = v112;
    if (v132)
    {
      (*(void (**)(std::string *__return_ptr))(*v132 + 48))(&__str);
      operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&__str);
      if (v132 == v131)
      {
        (*(void (**)(void *))(v131[0] + 32))(v131);
      }
      else if (v132)
      {
        (*(void (**)(void))(*v132 + 40))();
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v94 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)v112);
      int v95 = *(uint64_t **)(*(void *)(v1 + 640) + 16);
      absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v95, v96);
      operations_research::TimeLimit::MergeWithGlobalTimeLimit(v94, v95[1]);
      absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v95, v97, v98, v99, v100, v101, v102, v103);
      operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v111, 0);
      uint64_t v108 = 0;
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      LOBYTE(v143[0]) = 1;
      operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)((char *)v143 + 8), 0);
      *((void *)&v143[36] + 1) = 0;
      BOOL v104 = *off_26AECFEF8[0] >= 3
          && (off_26AECFEF8[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFEF8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3));
      LOBYTE(v143[0]) = v104;
      unint64_t v105 = (const operations_research::sat::SatParameters *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v112);
      operations_research::sat::SatParameters::CopyFrom((operations_research::sat::SatParameters *)((char *)v143 + 8), v105);
      *((void *)&v143[36] + 1) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)v112);
      operator new();
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((_BYTE)v116) {
    goto LABEL_37;
  }
LABEL_76:
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)v121);
  }
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)&v117);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v123);
  if (v127)
  {
    uint64_t v128 = v127;
    operator delete(v127);
  }
}

void sub_23CC94FC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_19LnsSolver12GenerateTaskExEUlvE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_19LnsSolver12GenerateTaskExEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_19LnsSolver12GenerateTaskExEUlvE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_19LnsSolver12GenerateTaskExEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void operations_research::sat::SharedSolutionRepository<long long>::GetRandomBiasedSolution(void *a1@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (uint64_t)a2;
  uint64_t v6 = (absl::lts_2020_02_25 **)(a1 + 1);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 1), a2);
  uint64_t v14 = (char *)a1[3];
  uint64_t v16 = (uint64_t *)a1[6];
  uint64_t v15 = (void *)a1[7];
  uint64_t v17 = *v16;
  uint64_t v60 = (void **)(a1 + 3);
  a1[4] = v14;
  if (v15 == v16)
  {
    int v45 = -858993459 * (v15 - v16);
    BOOL v42 = __OFSUB__(v45, 1);
    int v46 = v45 - 1;
    if (v46 < 0 == v42)
    {
LABEL_40:
      LODWORD(v61) = 0;
      HIDWORD(v61) = v46;
      uint64_t v62 = v61;
      int v47 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v61, v3, (int *)&v62);
      goto LABEL_46;
    }
LABEL_43:
    int v47 = 0;
    goto LABEL_46;
  }
  uint64_t v56 = v3;
  uint64_t v57 = a3;
  uint64_t v58 = v6;
  uint64_t v59 = v17;
  unint64_t v18 = 0;
  do
  {
    uint64_t v21 = (int *)&v16[5 * v18];
    if (*(void *)v21 == v17 && v21[8] <= 100)
    {
      unint64_t v22 = a1[5];
      if ((unint64_t)v14 < v22)
      {
        *(_DWORD *)uint64_t v14 = v18;
        uint64_t v19 = (uint64_t)(v14 + 4);
LABEL_4:
        a1[4] = v19;
        uint64_t v14 = (char *)v19;
        goto LABEL_5;
      }
      uint64_t v23 = (char *)*v60;
      uint64_t v24 = v14 - (unsigned char *)*v60;
      uint64_t v25 = v24 >> 2;
      unint64_t v26 = (v24 >> 2) + 1;
      if (v26 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v22 - (void)v23;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        if (v28 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v29 = operator new(4 * v28);
        unint64_t v30 = &v29[4 * v25];
        _DWORD *v30 = v18;
        uint64_t v19 = (uint64_t)(v30 + 1);
        if (v14 == v23) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v29 = 0;
        unint64_t v30 = (_DWORD *)(4 * v25);
        *(_DWORD *)(4 * v25) = v18;
        uint64_t v19 = 4 * v25 + 4;
        if (v14 == v23) {
          goto LABEL_23;
        }
      }
      unint64_t v31 = v14 - 4 - v23;
      if (v31 >= 0xBC)
      {
        if (&v29[v24 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v29[v24 - 4])
        {
          uint64_t v32 = v14;
        }
        else if (&v14[-(v31 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
        {
          uint64_t v32 = v14;
        }
        else if ((unint64_t)(v14 - &v29[v24]) >= 0x20)
        {
          uint64_t v34 = (v31 >> 2) + 1;
          uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v32 = &v14[-v35];
          unint64_t v30 = (_DWORD *)((char *)v30 - v35);
          uint64_t v36 = &v29[4 * v25 - 16];
          uint64_t v37 = v14 - 16;
          uint64_t v38 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *uint64_t v36 = v39;
            v36 -= 2;
            v37 -= 32;
            v38 -= 8;
          }
          while (v38);
          if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v32 = v14;
        }
      }
      else
      {
        uint64_t v32 = v14;
      }
      do
      {
        int v33 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *--unint64_t v30 = v33;
      }
      while (v32 != v23);
LABEL_23:
      a1[3] = v30;
      a1[4] = v19;
      a1[5] = &v29[4 * v28];
      if (v23)
      {
        operator delete(v23);
        uint64_t v16 = (uint64_t *)a1[6];
        uint64_t v15 = (void *)a1[7];
      }
      uint64_t v17 = v59;
      goto LABEL_4;
    }
LABEL_5:
    ++v18;
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (v15 - v16);
  }
  while (v20 > v18);
  unsigned int v40 = *v60;
  if (*v60 == v14)
  {
    a3 = v57;
    uint64_t v6 = v58;
    uint64_t v3 = v56;
    BOOL v42 = __OFSUB__(v20, 1);
    int v46 = v20 - 1;
    if (v46 < 0 == v42) {
      goto LABEL_40;
    }
    goto LABEL_43;
  }
  unint64_t v41 = (unint64_t)(v14 - v40) >> 2;
  BOOL v42 = __OFSUB__(v41, 1);
  int v43 = v41 - 1;
  a3 = v57;
  uint64_t v6 = v58;
  uint64_t v7 = (absl::lts_2020_02_25::Mutex *)v56;
  if (v43 < 0 != v42)
  {
    uint64_t v44 = 0;
  }
  else
  {
    LODWORD(v61) = 0;
    HIDWORD(v61) = v43;
    uint64_t v62 = v61;
    uint64_t v44 = (int)absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v61, v56, (int *)&v62);
    unsigned int v40 = *v60;
  }
  int v47 = *(_DWORD *)&v40[4 * v44];
LABEL_46:
  uint64_t v48 = a1[6] + 40 * v47;
  int v49 = *(_DWORD *)(v48 + 32) + 1;
  *(_DWORD *)(v48 + 32) = v49;
  uint64_t v50 = *(void *)v48;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = v50;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v52 = *(unsigned char **)(v48 + 8);
  uint64_t v51 = *(unsigned char **)(v48 + 16);
  int64_t v53 = v51 - v52;
  if (v51 != v52)
  {
    if (v53 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v54 = (char *)operator new(v51 - v52);
    *(void *)(a3 + 8) = v54;
    uint64_t v55 = &v54[8 * (v53 >> 3)];
    *(void *)(a3 + 24) = v55;
    memcpy(v54, v52, v53);
    *(void *)(a3 + 16) = v55;
  }
  *(_DWORD *)(a3 + 32) = v49;
  absl::lts_2020_02_25::Mutex::Unlock(v6, v7, v8, v9, v10, v11, v12, v13);
}

void sub_23CC958C4(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, absl::lts_2020_02_25::Mutex *a12)
{
  absl::lts_2020_02_25::Mutex::Unlock(v12, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedSolutionRepository<long long>::GetSolution(uint64_t a1@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v6 = (absl::lts_2020_02_25 **)(a1 + 8);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 8), a2);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = (uint64_t *)(v14 + 40 * v3);
  uint64_t v16 = *v15;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = v16;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unint64_t v18 = (unsigned char *)v15[1];
  uint64_t v17 = (unsigned char *)v15[2];
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a3 + 8) = v20;
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a3 + 24) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a3 + 16) = v21;
  }
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v14 + 40 * v3 + 32);
  absl::lts_2020_02_25::Mutex::Unlock(v6, v7, v8, v9, v10, v11, v12, v13);
}

void sub_23CC959D8(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 16) = v12;
    operator delete(v12);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::anonymous namespace'::PostsolveResponseWrapper(char a1, uint64_t a2, operations_research::sat::CpModelProto *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a4;
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (a1)
  {
    operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v38, a3);
    int v9 = *(_DWORD *)(a6 + 152);
    BOOL v10 = v9 == 4 || v9 == 2;
    if (v10 && v39)
    {
      if (*(int *)(a6 + 16) >= 1)
      {
        for (uint64_t i = 0; i < *(int *)(a6 + 16); ++i)
        {
          uint64_t v12 = *(void *)(v40 + 8 * *(int *)(*v7 + 4 * i) + 8);
          *(_DWORD *)(v12 + 16) = 0;
          uint64_t v13 = (unsigned int *)(v12 + 16);
          uint64_t v14 = *(void *)(a6 + 24);
          uint64_t v15 = *(void *)(v14 + 8 * i);
          int v16 = *(_DWORD *)(v12 + 20);
          if (v16)
          {
            uint64_t v17 = *(void **)(v12 + 24);
            *uint64_t v17 = v15;
            *(_DWORD *)(v12 + 16) = 1;
            uint64_t v18 = *(void *)(v14 + 8 * i);
            if (v16 == 1) {
              goto LABEL_15;
            }
          }
          else
          {
            google::protobuf::RepeatedField<long long>::Reserve(v13, 1);
            uint64_t v19 = *(void *)(a6 + 24);
            int v20 = *(_DWORD *)(v12 + 20);
            uint64_t v17 = *(void **)(v12 + 24);
            *uint64_t v17 = v15;
            *(_DWORD *)(v12 + 16) = 1;
            uint64_t v18 = *(void *)(v19 + 8 * i);
            if (v20 == 1)
            {
LABEL_15:
              google::protobuf::RepeatedField<long long>::Reserve(v13, 2);
              uint64_t v17 = *(void **)(v12 + 24);
            }
          }
          v17[1] = v18;
          *uint64_t v13 = 2;
        }
      }
      if (*(int *)(a6 + 40) < 1)
      {
LABEL_40:
        memset(v46, 0, 24);
        memset(v47, 0, sizeof(v47));
        v46[3] = v47;
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v42, 0);
        int v44 = 0;
        int8x8_t v43 = vorr_s8(v43, (int8x8_t)0x2004000000);
        int v45 = 0;
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&v48, (const operations_research::sat::SatParameters *)v42);
        uint64_t v51 = 0;
        uint64_t v35 = operator new(0x248uLL);
        *uint64_t v35 = &unk_26F0C1DB0;
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v35 + 1), (const operations_research::sat::SatParameters *)&v48);
        uint64_t v51 = v35;
        operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v48);
        v41[0] = v46;
        if (v51)
        {
          (*(void (**)(unint64_t *__return_ptr))(*v51 + 48))(&v48);
          operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v48);
          if (v51 == v50)
          {
            (*(void (**)(void *))(v50[0] + 32))(v50);
          }
          else if (v51)
          {
            (*(void (**)(void *))(*v51 + 40))(v51);
          }
          operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v42);
          operations_research::TimeLimit::Infinite(v36);
        }
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v21 = 0;
      p_p = &__p;
      uint64_t v37 = v7;
      while (1)
      {
        uint64_t v23 = *(void *)(v40 + 8 * *(int *)(*v7 + 4 * v21) + 8);
        uint64_t v24 = (unsigned int *)(v23 + 16);
        operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v23 + 24), *(int *)(v23 + 16), v42, v8);
        operations_research::Domain::Domain(v41, *(void *)(*(void *)(a6 + 48) + 8 * v21), *(void *)(*(void *)(a6 + 72) + 8 * v21));
        operations_research::Domain::IntersectionWith(v42, (const operations_research::Domain *)v41, &v48);
        *(_DWORD *)(v23 + 16) = 0;
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v23 + 16), v48 >> 1);
        unint64_t v25 = v48 & 1;
        if (v48) {
          unint64_t v26 = (uint64_t *)__p;
        }
        else {
          unint64_t v26 = (uint64_t *)p_p;
        }
        if (v48 >= 2)
        {
          uint64_t v27 = p_p;
          unint64_t v28 = &v26[2 * (v48 >> 1)];
          unsigned int v29 = *(_DWORD *)(v23 + 16);
          do
          {
            uint64_t v30 = *v26;
            int v31 = *(_DWORD *)(v23 + 20);
            unsigned int v32 = v29 + 1;
            if (v29 == v31)
            {
              google::protobuf::RepeatedField<long long>::Reserve(v24, v29 + 1);
              int v31 = *(_DWORD *)(v23 + 20);
            }
            uint64_t v33 = *(void *)(v23 + 24);
            *(void *)(v33 + 8 * v29) = v30;
            *(_DWORD *)(v23 + 16) = v32;
            uint64_t v34 = v26[1];
            v29 += 2;
            if (v32 == v31)
            {
              google::protobuf::RepeatedField<long long>::Reserve(v24, v29);
              uint64_t v33 = *(void *)(v23 + 24);
            }
            *(void *)(v33 + 8 * v32) = v34;
            *uint64_t v24 = v29;
            v26 += 2;
          }
          while (v26 != v28);
          unint64_t v25 = v48 & 1;
          p_p = v27;
          uint64_t v7 = v37;
        }
        if (v25) {
          operator delete(__p);
        }
        if (v41[0])
        {
          operator delete((void *)v41[1]);
          if (v42[0]) {
LABEL_39:
          }
            operator delete((void *)v42[1]);
        }
        else if (v42[0])
        {
          goto LABEL_39;
        }
        if (++v21 >= *(int *)(a6 + 40)) {
          goto LABEL_40;
        }
      }
    }
    operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)v38);
  }
  else
  {
    operations_research::sat::PostsolveResponse(a2, (uint64_t)a3, a4, a6);
  }
}

void sub_23CC96218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  operations_research::sat::SharedResponseManager::~SharedResponseManager(&a70);
  if (a68 == v70) {
    *(void *)(a66 + 120) = 0;
  }
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&a65);
  std::unique_ptr<operations_research::TimeLimit>::~unique_ptr[abi:ne180100](&a69);
  operations_research::sat::Model::~Model((operations_research::sat::Model *)&STACK[0x428]);
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)&a14);
  _Unwind_Resume(a1);
}

void operations_research::sat::NeighborhoodGenerator::AddSolveData(void *a1, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v4 = (absl::lts_2020_02_25 **)(a1 + 5);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 5), a2);
  uint64_t v13 = (_OWORD *)a1[7];
  unint64_t v12 = a1[8];
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v18 = (_OWORD *)a1[6];
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (v13 - v18) + 1;
    if (v19 > 0x333333333333333) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)v18) >> 4);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x199999999999999) {
      unint64_t v21 = 0x333333333333333;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 > 0x333333333333333) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v22 = (char *)operator new(80 * v21);
    }
    else
    {
      unint64_t v22 = 0;
    }
    uint64_t v23 = &v22[16 * (v13 - v18)];
    long long v24 = *((_OWORD *)a2 + 3);
    *((_OWORD *)v23 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)v23 + 3) = v24;
    *((_OWORD *)v23 + 4) = *((_OWORD *)a2 + 4);
    long long v25 = *((_OWORD *)a2 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)a2;
    *((_OWORD *)v23 + 1) = v25;
    uint64_t v17 = v23 + 80;
    if (v13 != v18)
    {
      do
      {
        *((_OWORD *)v23 - 5) = *(v13 - 5);
        long long v26 = *(v13 - 4);
        long long v27 = *(v13 - 3);
        long long v28 = *(v13 - 1);
        *((_OWORD *)v23 - 2) = *(v13 - 2);
        *((_OWORD *)v23 - 1) = v28;
        *((_OWORD *)v23 - 4) = v26;
        *((_OWORD *)v23 - 3) = v27;
        v23 -= 80;
        v13 -= 5;
      }
      while (v13 != v18);
      uint64_t v13 = (_OWORD *)a1[6];
    }
    a1[6] = v23;
    a1[7] = v17;
    a1[8] = &v22[80 * v21];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *uint64_t v13 = *(_OWORD *)a2;
    long long v14 = *((_OWORD *)a2 + 1);
    long long v15 = *((_OWORD *)a2 + 2);
    long long v16 = *((_OWORD *)a2 + 4);
    v13[3] = *((_OWORD *)a2 + 3);
    v13[4] = v16;
    v13[1] = v14;
    v13[2] = v15;
    uint64_t v17 = v13 + 5;
  }
  a1[7] = v17;
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_23CC96508(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void std::seed_seq::__init[abi:ne180100]<int const*>(uint64_t a1, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = *(char **)(a1 + 8);
    while (1)
    {
      int v8 = *v4;
      unint64_t v9 = *(void *)(a1 + 16);
      if ((unint64_t)v6 >= v9) {
        break;
      }
      *(_DWORD *)uint64_t v6 = v8;
      uint64_t v7 = (uint64_t)(v6 + 4);
LABEL_4:
      *(void *)(a1 + 8) = v7;
      ++v4;
      uint64_t v6 = (char *)v7;
      if (v4 == a3) {
        return;
      }
    }
    uint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v6[-*(void *)a1];
    uint64_t v12 = v11 >> 2;
    unint64_t v13 = (v11 >> 2) + 1;
    if (v13 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - (void)v10;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v16 = operator new(4 * v15);
      uint64_t v17 = &v16[4 * v12];
      *uint64_t v17 = v8;
      uint64_t v7 = (uint64_t)(v17 + 1);
      if (v6 == v10) {
        goto LABEL_29;
      }
    }
    else
    {
      long long v16 = 0;
      uint64_t v17 = (_DWORD *)(4 * v12);
      *(_DWORD *)(4 * v12) = v8;
      uint64_t v7 = 4 * v12 + 4;
      if (v6 == v10) {
        goto LABEL_29;
      }
    }
    unint64_t v18 = v6 - 4 - v10;
    if (v18 >= 0xBC)
    {
      if (&v16[v11 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v11 - 4])
      {
        unint64_t v19 = v6;
      }
      else if (&v6[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4)
      {
        unint64_t v19 = v6;
      }
      else if ((unint64_t)(v6 - v16 - v11) >= 0x20)
      {
        uint64_t v20 = (v18 >> 2) + 1;
        uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v19 = &v6[-v21];
        uint64_t v17 = (_DWORD *)((char *)v17 - v21);
        unint64_t v22 = &v16[4 * v12 - 16];
        uint64_t v23 = v6 - 16;
        uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          _OWORD *v22 = v25;
          v22 -= 2;
          v23 -= 32;
          v24 -= 8;
        }
        while (v24);
        if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v19 = v6;
      }
    }
    else
    {
      unint64_t v19 = v6;
    }
    do
    {
      int v26 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *--uint64_t v17 = v26;
    }
    while (v19 != v10);
LABEL_29:
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v16[4 * v15];
    if (v10) {
      operator delete(v10);
    }
    goto LABEL_4;
  }
}

unint64_t std::seed_seq::generate[abi:ne180100]<unsigned int *>(unint64_t result, _DWORD *__b, unsigned char *a3)
{
  if (__b == (_DWORD *)a3) {
    return result;
  }
  uint64_t v4 = (int **)result;
  uint64_t v5 = a3 - (unsigned char *)__b;
  if (a3 - (unsigned char *)__b >= 1) {
    memset(__b, 139, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  }
  unint64_t v6 = v5 >> 2;
  int v8 = *v4;
  uint64_t v7 = v4[1];
  uint64_t v9 = (char *)v7 - (char *)*v4;
  uint64_t v10 = v9 >> 2;
  uint64_t v11 = 11;
  uint64_t v12 = 7;
  uint64_t v13 = 5;
  uint64_t v14 = 3;
  unint64_t v15 = (v5 >> 2) - 1;
  if ((unint64_t)v5 <= 0x18) {
    uint64_t v14 = v15 >> 1;
  }
  if ((unint64_t)v5 <= 0x98) {
    uint64_t v13 = v14;
  }
  if ((unint64_t)v5 <= 0x10C) {
    uint64_t v12 = v13;
  }
  if ((unint64_t)v5 <= 0x9B8) {
    uint64_t v11 = v12;
  }
  unint64_t v16 = (unint64_t)v9 >> 2;
  unint64_t v17 = (v6 - v11) >> 1;
  unint64_t v18 = v17 + v11;
  unint64_t v19 = v10 + 1;
  if (v10 + 1 > v6) {
    unint64_t v20 = v10 + 1;
  }
  else {
    unint64_t v20 = v5 >> 2;
  }
  unsigned int v21 = __b[v17];
  unsigned int v22 = 1664525 * (*__b ^ __b[v15] ^ v21 ^ ((*__b ^ __b[v15] ^ v21) >> 27));
  __b[v17] = v22 + v21;
  int v23 = v22 + v16;
  __b[v18] += v23;
  *__b = v23;
  unint64_t v24 = v17 % v6;
  __n128 result = v18 / v6;
  unint64_t v25 = v18 % v6;
  if (v7 == v8)
  {
    uint64_t v26 = 0;
    if (v19 >= v6) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 2;
    if (v19 > 2) {
      uint64_t v27 = v10 + 1;
    }
    __n128 result = v27 - 1;
    do
    {
      if (v26 + 1 == v6) {
        uint64_t v26 = 0;
      }
      else {
        ++v26;
      }
      if (v15 + 1 == v6) {
        unint64_t v15 = 0;
      }
      else {
        ++v15;
      }
      if (v24 + 1 == v6) {
        unint64_t v24 = 0;
      }
      else {
        ++v24;
      }
      int v28 = __b[v24];
      unsigned int v29 = __b[v26] ^ __b[v15] ^ v28;
      int v30 = 1664525 * (v29 ^ (v29 >> 27));
      __b[v24] = v30 + v28;
      int v32 = *v8++;
      int v31 = v32;
      if (v25 + 1 == v6) {
        unint64_t v25 = 0;
      }
      else {
        ++v25;
      }
      int v33 = v31 + v26 + v30;
      __b[v25] += v33;
      __b[v26] = v33;
      --result;
    }
    while (result);
    if (v19 >= v6) {
      goto LABEL_49;
    }
  }
  unint64_t v34 = ~v10 + v20;
  do
  {
    if (v26 + 1 == v6) {
      uint64_t v26 = 0;
    }
    else {
      ++v26;
    }
    if (v15 + 1 == v6) {
      unint64_t v15 = 0;
    }
    else {
      ++v15;
    }
    if (v24 + 1 == v6) {
      unint64_t v24 = 0;
    }
    else {
      ++v24;
    }
    unsigned int v35 = __b[v24];
    if (v25 + 1 == v6) {
      unint64_t v25 = 0;
    }
    else {
      ++v25;
    }
    unsigned int v36 = 1664525 * (__b[v26] ^ __b[v15] ^ v35 ^ ((__b[v26] ^ __b[v15] ^ v35) >> 27));
    __b[v24] = v36 + v35;
    int v37 = v36 + v26;
    __n128 result = 4 * v25;
    __b[v25] += v37;
    __b[v26] = v37;
    --v34;
  }
  while (v34);
LABEL_49:
  if (v20 < v20 + v6)
  {
    uint64_t v38 = v5 >> 2;
    do
    {
      if (v26 + 1 == v6) {
        uint64_t v26 = 0;
      }
      else {
        ++v26;
      }
      if (v15 + 1 == v6) {
        unint64_t v15 = 0;
      }
      else {
        ++v15;
      }
      if (v24 + 1 == v6) {
        unint64_t v24 = 0;
      }
      else {
        ++v24;
      }
      if (v25 + 1 == v6) {
        unint64_t v25 = 0;
      }
      else {
        ++v25;
      }
      int v39 = __b[v24];
      unsigned int v40 = v39 + __b[v26] + __b[v15];
      int v41 = 1566083941 * (v40 ^ (v40 >> 27));
      __b[v24] = v41 ^ v39;
      unsigned int v42 = v41 - v26;
      __n128 result = v42 ^ __b[v25];
      __b[v25] = result;
      __b[v26] = v42;
      --v38;
    }
    while (v38);
  }
  return result;
}

uint64_t operations_research::sat::RelaxationInducedNeighborhoodGenerator::RelaxationInducedNeighborhoodGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7)
{
  *(void *)a1 = &unk_26F0BF548;
  uint64_t v13 = (std::string *)(a1 + 8);
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v14 = *a7;
    v13->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  *(void *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0x3FE0000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0x3FB999999999999ALL;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a3;
  *(void *)a1 = &unk_26F0BF750;
  *(void *)(a1 + 144) = a4;
  *(void *)(a1 + 152) = a5;
  *(void *)(a1 + 160) = a6;
  if (!a5 && !(a4 | a6))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.h", 441);
    unint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: lp_solutions_ != nullptr || relaxation_solutions_ != nullptr || incomplete_solutions != nullptr ", 110);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
  }
  return a1;
}

void sub_23CC96B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CC96B28(_Unwind_Exception *a1)
{
  operations_research::sat::NeighborhoodGenerator::~NeighborhoodGenerator(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0C1928;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C1928;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedR"
                     "esponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS"
                                "0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::target_type()
{
}

uint64_t operations_research::sat::anonymous namespace'::anonymous namespace'::GetOrCreateVariableWithTightBound(char *a1, char *a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (a1 == a2)
  {
    int8x8_t v43 = (void (**)(void **))&unk_26F0C1780;
    uint64_t v44 = 0;
    int v45 = (void **)&v43;
    unsigned int v29 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
    uint64_t ConstantIntegerVariable = operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v29, v44);
    int v28 = v45;
    if (v45 == (void **)&v43)
    {
      v43[4]((void **)&v43);
      return ConstantIntegerVariable;
    }
  }
  else
  {
    if (a2 - a1 == 16)
    {
      uint64_t v4 = *((void *)a1 + 1);
      if (v4 == -1) {
        return *(_DWORD *)a1 ^ 1u;
      }
      if (v4 == 1) {
        return *(unsigned int *)a1;
      }
    }
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    int v8 = *(void **)(a3 + 32);
    do
    {
      int v9 = *(_DWORD *)a1;
      int v10 = *(_DWORD *)a1;
      uint64_t v11 = *((void *)a1 + 1);
      unsigned int v42 = &v40;
      uint64_t v12 = a3 + 32;
      uint64_t v13 = v8;
      do
      {
        unint64_t v14 = v13[4];
        BOOL v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          unint64_t v16 = v13;
        }
        else {
          unint64_t v16 = v13 + 1;
        }
        if (v15) {
          uint64_t v12 = (uint64_t)v13;
        }
        uint64_t v13 = (void *)*v16;
      }
      while (*v16);
      uint64_t v17 = *(void *)(*(void *)(*(void *)(v12 + 40) + 40) + 12 * v10);
      int v39 = &v37;
      uint64_t v18 = a3 + 32;
      unint64_t v19 = v8;
      do
      {
        unint64_t v20 = v19[4];
        BOOL v21 = v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          unsigned int v22 = v19;
        }
        else {
          unsigned int v22 = v19 + 1;
        }
        if (v21) {
          uint64_t v18 = (uint64_t)v19;
        }
        unint64_t v19 = (void *)*v22;
      }
      while (*v22);
      uint64_t v23 = v17 * v11;
      uint64_t v24 = v11 * *(void *)(*(void *)(*(void *)(v18 + 40) + 40) + 12 * (v9 ^ 1));
      if (-v24 < v23) {
        uint64_t v25 = -v24;
      }
      else {
        uint64_t v25 = v23;
      }
      v6 += v25;
      if (v23 <= -v24) {
        uint64_t v26 = -v24;
      }
      else {
        uint64_t v26 = v23;
      }
      v7 += v26;
      a1 += 16;
    }
    while (a1 != a2);
    unsigned int v40 = &unk_26F0BFD30;
    int v41 = v9;
    int v37 = &unk_26F0BFDF8;
    int v38 = v9;
    int v33 = (void (**)(void **))&unk_26F0C0D38;
    uint64_t v34 = v6;
    uint64_t v35 = v7;
    unsigned int v36 = (void **)&v33;
    uint64_t v31 = v6;
    uint64_t v32 = v7;
    if (v6 > v7) {
      google::MakeCheckOpString<long long,long long>((int)&v31, (int)&v32, "lb <= ub");
    }
    uint64_t v27 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
    uint64_t ConstantIntegerVariable = operations_research::sat::IntegerTrail::AddIntegerVariable(v27, v34, v35);
    int v28 = v36;
    if (v36 == (void **)&v33)
    {
      v33[4]((void **)&v33);
      return ConstantIntegerVariable;
    }
  }
  if (v28) {
    (*((void (**)(void **))*v28 + 5))(v28);
  }
  return ConstantIntegerVariable;
}

void sub_23CC96FB8(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC96FC0(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~function((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_23CC96FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::anonymous namespace'::anonymous namespace'::GetOrCreateVariableGreaterOrEqualToSumOf(char **a1, uint64_t a2)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (v4 == v5)
  {
    uint64_t v109 = (void (**)(void **))&unk_26F0C1780;
    uint64_t v110 = 0;
    long long v111 = (void **)&v109;
    uint64_t v50 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
    uint64_t ConstantIntegerVariable = operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v50, v110);
    if (v111 == (void **)&v109)
    {
      v109[4]((void **)&v109);
    }
    else if (v111)
    {
      (*((void (**)(void))*v111 + 5))();
    }
    return ConstantIntegerVariable;
  }
  if (v5 - v4 == 16)
  {
    uint64_t v6 = *((void *)v4 + 1);
    if (v6 == -1) {
      return *(_DWORD *)v4 ^ 1u;
    }
    if (v6 == 1) {
      return *(unsigned int *)v4;
    }
  }
  uint64_t v96 = a2;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  unint64_t v105 = 0;
  std::string __p = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  int v8 = *a1;
  uint64_t v98 = a1[1];
  if (*a1 == v98)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    int v10 = 0;
    uint64_t v12 = 0;
    int v9 = 0;
    uint64_t v52 = 0;
    uint64_t v103 = 0;
    int64_t v53 = 0;
    uint64_t v54 = 0;
    unint64_t v55 = 1;
    goto LABEL_73;
  }
  int v9 = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    while (1)
    {
      unint64_t v99 = (unint64_t)v11;
      if (v10 >= v12) {
        break;
      }
      *(_DWORD *)int v10 = *(_DWORD *)v8;
      v10 += 4;
      if (v9 >= v11) {
        goto LABEL_29;
      }
LABEL_8:
      *(void *)int v9 = *((void *)v8 + 1);
      v9 += 8;
      v8 += 16;
      if (v8 == v98) {
        goto LABEL_70;
      }
    }
    int64_t v15 = v10 - v13;
    uint64_t v16 = (v10 - v13) >> 2;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62)
    {
      uint64_t v104 = (uint64_t)v10;
      unint64_t v105 = v12;
      uint64_t v102 = v11;
      uint64_t v103 = v13;
      std::string __p = v14;
      uint64_t v101 = v9;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v12 - v13) >> 1 > v17) {
      unint64_t v17 = (v12 - v13) >> 1;
    }
    if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18)
    {
      unint64_t v19 = v10;
      unint64_t v20 = v9;
      if (v18 >> 62) {
        goto LABEL_132;
      }
      BOOL v21 = operator new(4 * v18);
      int v9 = v20;
      int v10 = v19;
      unsigned int v22 = &v21[4 * v16];
      *(_DWORD *)unsigned int v22 = *(_DWORD *)v8;
      uint64_t v23 = (uint64_t)(v22 + 4);
      if (v19 == v13) {
        goto LABEL_26;
      }
    }
    else
    {
      BOOL v21 = 0;
      unsigned int v22 = (char *)(4 * v16);
      *(_DWORD *)(4 * v16) = *(_DWORD *)v8;
      uint64_t v23 = 4 * v16 + 4;
      if (v10 == v13) {
        goto LABEL_26;
      }
    }
    unint64_t v24 = v10 - 4 - v13;
    if (v24 < 0xBC)
    {
      uint64_t v25 = v10;
      goto LABEL_25;
    }
    if (&v21[v15 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v15 - 4])
    {
      uint64_t v25 = v10;
      do
      {
LABEL_25:
        int v26 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *((_DWORD *)v22 - 1) = v26;
        v22 -= 4;
      }
      while (v25 != v13);
      goto LABEL_26;
    }
    if (&v10[-(v24 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4)
    {
      uint64_t v25 = v10;
      goto LABEL_25;
    }
    if ((unint64_t)(v10 - &v21[v15]) < 0x20)
    {
      uint64_t v25 = v10;
      goto LABEL_25;
    }
    uint64_t v38 = (v24 >> 2) + 1;
    uint64_t v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v25 = &v10[-v39];
    v22 -= v39;
    unsigned int v40 = &v21[4 * v16 - 16];
    int v41 = v10 - 16;
    uint64_t v42 = v38 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      _OWORD *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 8;
    }
    while (v42);
    if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_25;
    }
LABEL_26:
    uint64_t v12 = &v21[4 * v18];
    if (v13)
    {
      uint64_t v27 = v9;
      operator delete(v13);
      int v9 = v27;
    }
    uint64_t v13 = v22;
    int v10 = (char *)v23;
    uint64_t v11 = (char *)v99;
    if ((unint64_t)v9 < v99) {
      goto LABEL_8;
    }
LABEL_29:
    int64_t v28 = v9 - v14;
    uint64_t v29 = (v9 - v14) >> 3;
    unint64_t v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
    {
      uint64_t v104 = (uint64_t)v10;
      unint64_t v105 = v12;
      uint64_t v102 = v11;
      uint64_t v103 = v13;
      std::string __p = v14;
      uint64_t v101 = v9;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v11 - v14) >> 2 > v30) {
      unint64_t v30 = (v11 - v14) >> 2;
    }
    unint64_t v19 = v10;
    if ((unint64_t)(v11 - v14) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v31)
    {
      unint64_t v20 = v9;
      if (v31 >> 61)
      {
LABEL_132:
        uint64_t v104 = (uint64_t)v19;
        unint64_t v105 = v12;
        uint64_t v102 = (char *)v99;
        uint64_t v103 = v13;
        std::string __p = v14;
        uint64_t v101 = v20;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v32 = operator new(8 * v31);
      int v9 = v20;
      int v33 = &v32[8 * v29];
      *(void *)int v33 = *((void *)v8 + 1);
      uint64_t v34 = (uint64_t)(v33 + 8);
      if (v9 == v14) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v32 = 0;
      int v33 = (char *)(8 * v29);
      *(void *)(8 * v29) = *((void *)v8 + 1);
      uint64_t v34 = 8 * v29 + 8;
      if (v9 == v14) {
        goto LABEL_43;
      }
    }
    unint64_t v35 = v9 - 8 - v14;
    if (v35 < 0x168)
    {
      unsigned int v36 = v9;
      goto LABEL_42;
    }
    if (&v32[v28 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v32[v28 - 8])
    {
      unsigned int v36 = v9;
      do
      {
LABEL_42:
        uint64_t v37 = *((void *)v36 - 1);
        v36 -= 8;
        *((void *)v33 - 1) = v37;
        v33 -= 8;
      }
      while (v36 != v14);
      goto LABEL_43;
    }
    if (&v9[-(v35 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      unsigned int v36 = v9;
      goto LABEL_42;
    }
    if ((unint64_t)(v9 - &v32[v28]) < 0x20)
    {
      unsigned int v36 = v9;
      goto LABEL_42;
    }
    uint64_t v44 = (v35 >> 3) + 1;
    uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v36 = &v9[-v45];
    v33 -= v45;
    uint64_t v46 = &v32[8 * v29 - 16];
    int v47 = v9 - 16;
    uint64_t v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v49 = *(_OWORD *)v47;
      *(v46 - 1) = *((_OWORD *)v47 - 1);
      *uint64_t v46 = v49;
      v46 -= 2;
      v47 -= 32;
      v48 -= 4;
    }
    while (v48);
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_42;
    }
LABEL_43:
    uint64_t v11 = &v32[8 * v31];
    if (v14) {
      operator delete(v14);
    }
    unint64_t v14 = v33;
    int v9 = (char *)v34;
    int v10 = v19;
    v8 += 16;
  }
  while (v8 != v98);
LABEL_70:
  uint64_t v104 = (uint64_t)v10;
  unint64_t v105 = v12;
  uint64_t v102 = v11;
  uint64_t v103 = v13;
  std::string __p = v14;
  uint64_t v101 = v9;
  if (v10 < v12)
  {
    uint64_t ConstantIntegerVariable = VariableWithTightBound;
    *(_DWORD *)int v10 = VariableWithTightBound;
    uint64_t v51 = (uint64_t)(v10 + 4);
    goto LABEL_87;
  }
  uint64_t v52 = v11;
  int64_t v53 = v10 - v13;
  uint64_t v54 = (v10 - v13) >> 2;
  unint64_t v55 = v54 + 1;
  if ((unint64_t)(v54 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
LABEL_73:
  if ((v12 - v13) >> 1 > v55) {
    unint64_t v55 = (v12 - v13) >> 1;
  }
  if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v56 = v55;
  }
  uint64_t ConstantIntegerVariable = VariableWithTightBound;
  if (!v56)
  {
    uint64_t v59 = 0;
    uint64_t v60 = (unsigned int *)(4 * v54);
    uint64_t v61 = 0;
    *(_DWORD *)(4 * v54) = VariableWithTightBound;
    uint64_t v51 = 4 * v54 + 4;
    int64_t v62 = v10 - v13;
    if (v10 != v13) {
      goto LABEL_81;
    }
LABEL_102:
    uint64_t v11 = v52;
    uint64_t v103 = v60;
    uint64_t v104 = v51;
    unint64_t v105 = v61;
    if (v13) {
      goto LABEL_86;
    }
    goto LABEL_87;
  }
  if (v56 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v57 = v10;
  uint64_t v58 = v9;
  uint64_t v59 = operator new(4 * v56);
  int v9 = v58;
  int v10 = v57;
  uint64_t v60 = (unsigned int *)&v59[4 * v54];
  uint64_t v61 = &v59[4 * v56];
  *uint64_t v60 = VariableWithTightBound;
  uint64_t v51 = (uint64_t)(v60 + 1);
  int64_t v62 = v57 - v13;
  if (v57 == v13) {
    goto LABEL_102;
  }
LABEL_81:
  unint64_t v63 = v62 - 4;
  if (v63 < 0x2C || (unint64_t)(v10 - &v59[v53]) < 0x20)
  {
    uint64_t v64 = v10;
    uint64_t v11 = v52;
    goto LABEL_84;
  }
  uint64_t v81 = (v63 >> 2) + 1;
  uint64_t v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v64 = &v10[-v82];
  uint64_t v60 = (unsigned int *)((char *)v60 - v82);
  uint64_t v83 = &v59[4 * v54 - 16];
  int v84 = v10 - 16;
  uint64_t v85 = v81 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v86 = *(_OWORD *)v84;
    *(v83 - 1) = *((_OWORD *)v84 - 1);
    _OWORD *v83 = v86;
    v83 -= 2;
    v84 -= 32;
    v85 -= 8;
  }
  while (v85);
  uint64_t v11 = v52;
  if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
  {
    do
    {
LABEL_84:
      unsigned int v65 = *((_DWORD *)v64 - 1);
      v64 -= 4;
      *--uint64_t v60 = v65;
    }
    while (v64 != v13);
  }
  uint64_t v103 = v60;
  uint64_t v104 = v51;
  unint64_t v105 = v61;
  if (v13)
  {
LABEL_86:
    uint64_t v66 = v9;
    operator delete(v13);
    int v9 = v66;
  }
LABEL_87:
  uint64_t v104 = v51;
  if (v9 < v11)
  {
    *(void *)int v9 = -1;
    uint64_t v67 = v9 + 8;
    goto LABEL_121;
  }
  uint64_t v68 = v11;
  int64_t v69 = v9 - v14;
  uint64_t v70 = (v9 - v14) >> 3;
  unint64_t v71 = v70 + 1;
  if ((unint64_t)(v70 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v72 = v68 - v14;
  unint64_t v73 = (v68 - v14) >> 2;
  if (v73 > v71) {
    unint64_t v71 = v73;
  }
  if (v72 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v74 = v71;
  }
  if (v74)
  {
    if (v74 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v75 = v9;
    uint64_t v76 = operator new(8 * v74);
    int v9 = v75;
  }
  else
  {
    uint64_t v76 = 0;
  }
  uint64_t v77 = &v76[8 * v70];
  uint64_t v78 = &v76[8 * v74];
  *(void *)uint64_t v77 = -1;
  uint64_t v67 = v77 + 8;
  if (v9 != v14)
  {
    unint64_t v79 = v9 - v14 - 8;
    if (v79 < 0x58)
    {
      long long v80 = v9;
      goto LABEL_118;
    }
    if ((unint64_t)(v9 - v76 - v69) < 0x20)
    {
      long long v80 = v9;
      goto LABEL_118;
    }
    uint64_t v87 = (v79 >> 3) + 1;
    uint64_t v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
    long long v80 = &v9[-v88];
    v77 -= v88;
    std::string::size_type v89 = &v76[8 * v70 - 16];
    uint64_t v90 = v9 - 16;
    uint64_t v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v92 = *(_OWORD *)v90;
      *(v89 - 1) = *((_OWORD *)v90 - 1);
      _OWORD *v89 = v92;
      v89 -= 2;
      v90 -= 32;
      v91 -= 4;
    }
    while (v91);
    if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_118:
        uint64_t v93 = *((void *)v80 - 1);
        v80 -= 8;
        *((void *)v77 - 1) = v93;
        v77 -= 8;
      }
      while (v80 != v14);
    }
  }
  std::string __p = v77;
  uint64_t v102 = v78;
  if (v14) {
    operator delete(v14);
  }
LABEL_121:
  uint64_t v101 = v67;
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)&v103, (uint64_t **)&__p, 0, v107);
  uint64_t v106 = v96;
  if (!v108) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, uint64_t *))(*v108 + 48))(v108, &v106);
  if (v108 == v107)
  {
    (*(void (**)(void *))(v107[0] + 32))(v107);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v94 = (char *)__p;
    if (__p) {
      goto LABEL_126;
    }
  }
  else
  {
    if (v108) {
      (*(void (**)(void))(*v108 + 40))();
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v94 = (char *)__p;
    if (__p)
    {
LABEL_126:
      uint64_t v101 = v94;
      operator delete(v94);
    }
  }
  if (v103)
  {
    uint64_t v104 = (uint64_t)v103;
    operator delete(v103);
  }
  return ConstantIntegerVariable;
}

void sub_23CC978E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a17) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingDispatcher>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingDispatcher>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingDispatcher>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingDispatcher>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::LPVariables>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LPVariables>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LPVariables>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::LPVariables>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristics>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristics>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristics>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristics>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::CoreBasedOptimizer>(uint64_t *result, uint64_t *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = (uint64_t **)(result + 4);
  BOOL v4 = (uint64_t *)result[4];
  if (v4)
  {
    uint64_t v6 = result + 4;
    uint64_t v7 = (void *)result[4];
    do
    {
      unint64_t v8 = v7[4];
      BOOL v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d) {
        int v10 = v7;
      }
      else {
        int v10 = v7 + 1;
      }
      if (v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = (void *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      uint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v4;
        unint64_t v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d) {
          break;
        }
        BOOL v4 = *v12;
        uint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_19;
        }
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d) {
        break;
      }
      BOOL v4 = v12[1];
      if (!v4)
      {
        uint64_t v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v12 = (uint64_t **)(result + 4);
LABEL_19:
    unint64_t v14 = (uint64_t *)v12;
    uint64_t v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d;
    v12[5] = 0;
    *uint64_t v12 = 0;
    v12[1] = 0;
    void v12[2] = v14;
    *uint64_t v5 = (uint64_t *)v12;
    uint64_t v15 = *(void *)v3[3];
    uint64_t v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      uint64_t v16 = *v5;
    }
    __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_23CC98168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::ConnectedComponents<int,int>::Init(std::vector<int> *this, std::vector<int>::size_type begin_low)
{
  __u[0] = begin_low;
  LODWORD(v10) = 0;
  if ((begin_low & 0x80000000) != 0) {
    google::MakeCheckOpString<int,int>((int)__u, (int)&v10, "num_nodes >= 0");
  }
  std::vector<int>::pointer end = this->__end_;
  LODWORD(this->__begin_) = begin_low;
  begin_low = (int)begin_low;
  unint64_t v4 = this->__end_cap_.__value_ - end;
  BOOL v5 = (int)begin_low >= v4;
  std::vector<int>::size_type v6 = (int)begin_low - v4;
  if (v6 != 0 && v5)
  {
    std::vector<int>::__append((std::vector<int> *)&this->__end_, v6);
    begin_low = SLODWORD(this->__begin_);
  }
  else if (!v5)
  {
    this->__end_cap_.__value_ = &end[(int)begin_low];
  }
  __u[0] = 1;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 32), begin_low, __u);
  if (SLODWORD(this->__begin_) >= 1)
  {
    uint64_t v7 = 0;
    std::vector<int>::pointer v8 = this->__end_;
    do
    {
      v8[v7] = v7;
      ++v7;
    }
    while (v7 < SLODWORD(this->__begin_));
  }
}

void sub_23CC98274(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t gtl::FindOrDie<std::map<int,operations_research::sat::LinearProgrammingConstraint *>>(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_11;
  }
  int v5 = *a2;
  uint64_t v6 = v2;
  do
  {
    int v7 = *(_DWORD *)(v3 + 32);
    BOOL v8 = v7 < v5;
    if (v7 >= v5) {
      BOOL v9 = (uint64_t *)v3;
    }
    else {
      BOOL v9 = (uint64_t *)(v3 + 8);
    }
    if (!v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < *(_DWORD *)(v6 + 32))
  {
LABEL_11:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v13, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    uint64_t v10 = (void *)google::LogMessage::stream((google::LogMessage *)v13);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v13);
  }
  return v6 + 40;
}

void sub_23CC98334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *operations_research::ConnectedComponents<int,int>::~ConnectedComponents(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

char *std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint const&>(operations_research::sat::LinearConstraint **a1, const operations_research::sat::LinearConstraint *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 58) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v8 = (char *)operator new(v7 << 6);
  }
  else
  {
    BOOL v8 = 0;
  }
  unint64_t v19 = (operations_research::sat::LinearConstraint *)&v8[64 * v3];
  unint64_t v20 = (operations_research::sat::LinearConstraint *)&v8[64 * v7];
  operations_research::sat::LinearConstraint::LinearConstraint(v19, a2);
  BOOL v9 = (operations_research::sat::LinearConstraint *)((char *)v19 + 64);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v19;
    a1[1] = v9;
    a1[2] = v20;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = (char *)v19 + v12;
      unint64_t v14 = (char *)v11 + v12;
      *((_OWORD *)v13 - 4) = *(_OWORD *)((char *)v11 + v12 - 64);
      *((void *)v13 - 5) = 0;
      *((void *)v13 - 4) = 0;
      *((void *)v13 - 6) = 0;
      *((_OWORD *)v13 - 3) = *(_OWORD *)((char *)v11 + v12 - 48);
      *((void *)v13 - 4) = *(void *)((char *)v11 + v12 - 32);
      *((void *)v14 - 6) = 0;
      *((void *)v14 - 5) = 0;
      *((void *)v14 - 4) = 0;
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)((char *)v11 + v12 - 24);
      *((void *)v13 - 1) = *(void *)((char *)v11 + v12 - 8);
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 1) = 0;
      v12 -= 64;
    }
    while ((operations_research::sat::LinearConstraint *)((char *)v11 + v12) != v10);
    uint64_t v15 = *a1;
    uint64_t v11 = a1[1];
    *a1 = (operations_research::sat::LinearConstraint *)((char *)v19 + v12);
    a1[1] = v9;
    a1[2] = v20;
    if (v11 != v15)
    {
      do
      {
        uint64_t v16 = (void *)*((void *)v11 - 3);
        if (v16)
        {
          *((void *)v11 - 2) = v16;
          operator delete(v16);
        }
        unint64_t v17 = (void *)*((void *)v11 - 6);
        if (v17)
        {
          *((void *)v11 - 5) = v17;
          operator delete(v17);
        }
        uint64_t v11 = (operations_research::sat::LinearConstraint *)((char *)v11 - 64);
      }
      while (v11 != v15);
      uint64_t v11 = v15;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return (char *)v19 + 64;
}

void sub_23CC98534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<operations_research::sat::LinearConstraint>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

operations_research::sat::LinearConstraint *operations_research::sat::LinearConstraint::LinearConstraint(operations_research::sat::LinearConstraint *this, const operations_research::sat::LinearConstraint *a2)
{
  long long v4 = *(_OWORD *)a2;
  *((void *)this + 2) = 0;
  *(_OWORD *)this = v4;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  int v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v8 = (char *)operator new(v5 - v6);
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v8;
    BOOL v9 = &v8[4 * (v7 >> 2)];
    *((void *)this + 4) = v9;
    memcpy(v8, v6, v7);
    *((void *)this + 3) = v9;
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    *((void *)this + 5) = v13;
    *((void *)this + 6) = v13;
    unint64_t v14 = &v13[8 * (v12 >> 3)];
    *((void *)this + 7) = v14;
    memcpy(v13, v11, v12);
    *((void *)this + 6) = v14;
  }
  return this;
}

void sub_23CC98628(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraint>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C19A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraint>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C19A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__tree<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::__map_value_compare<int,std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::__map_value_compare<int,std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::__map_value_compare<int,std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>>>::destroy(a1, a2[1]);
    uint64_t v4 = a2[5];
    if (v4)
    {
      uint64_t v5 = a2[6];
      uint64_t v6 = (void *)a2[5];
      if (v5 != v4)
      {
        do
        {
          int64_t v7 = *(void **)(v5 - 24);
          if (v7)
          {
            *(void *)(v5 - 16) = v7;
            operator delete(v7);
          }
          BOOL v8 = *(void **)(v5 - 48);
          if (v8)
          {
            *(void *)(v5 - 40) = v8;
            operator delete(v8);
          }
          v5 -= 64;
        }
        while (v5 != v4);
        uint64_t v6 = (void *)a2[5];
      }
      a2[6] = v4;
      operator delete(v6);
    }
    operator delete(a2);
  }
}

void *operations_research::sat::Model::Delete<operations_research::sat::ObjectiveDefinition>::~Delete(void *a1)
{
  *a1 = &unk_26F0C19E0;
  uint64_t v4 = a1[1];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<operations_research::sat::ObjectiveDefinition>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::ObjectiveDefinition>::~Delete(void *a1)
{
  *a1 = &unk_26F0C19E0;
  uint64_t v3 = a1[1];
  uint64_t v1 = a1 + 1;
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<operations_research::sat::ObjectiveDefinition>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::default_delete<operations_research::sat::ObjectiveDefinition>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 96))
    {
      operator delete(*(void **)(a2 + 72));
      *(void *)(a2 + 112) = 0;
      *(void *)(a2 + 72) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
    }
    uint64_t v3 = *(void **)(a2 + 104);
    if (v3) {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
    }
    uint64_t v4 = *(void **)(a2 + 48);
    if (v4)
    {
      *(void *)(a2 + 56) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(a2 + 24);
    if (v5)
    {
      *(void *)(a2 + 32) = v5;
      operator delete(v5);
    }
    JUMPOUT(0x23ECF2BC0);
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  BOOL v8 = (char *)operator new(v2 + 9 + 4 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  uint64_t v9 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v9 = 6;
  }
  uint64_t v10 = a1[2];
  a1[5] = (char *)(v9 - (void)v10);
  uint64_t v11 = a1[4];
  if (v11)
  {
    *((void *)v11 + 1) = v10;
    *(void *)uint64_t v11 = v2;
    if (!v10)
    {
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v13 = 0;
    uint64_t v23 = a1[4];
    if (!v23) {
      return;
    }
LABEL_21:
    *((void *)v23 + 4) = v13 >> 3;
    *((void *)v23 + 2) = 0;
    return;
  }
  int64_t v12 = 0;
  unint64_t v13 = 0;
  do
  {
    if ((v12[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v17 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)&v5[4 * (void)v12];
      unint64_t v18 = ((v17 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v17);
      unint64_t v19 = *a1;
      unint64_t v20 = a1[3];
      unint64_t v21 = ((v18 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v20;
      unint64_t v22 = *(void *)&(*a1)[v21] & (~*(void *)&(*a1)[v21] << 7) & 0x8080808080808080;
      if (v22)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 0;
        do
        {
          v14 += 8;
          unint64_t v21 = (v14 + v21) & (unint64_t)v20;
          unint64_t v22 = *(void *)&v19[v21] & (~*(void *)&v19[v21] << 7) & 0x8080808080808080;
        }
        while (!v22);
      }
      unint64_t v15 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v20;
      v13 += v14;
      char v16 = v18 & 0x7F;
      v19[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      *(_DWORD *)&a1[1][4 * v15] = *(_DWORD *)&v5[4 * (void)v12];
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  uint64_t v23 = a1[4];
  if (v23) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(result + 8) + 4 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(_DWORD *)(v25 + 4 * v18) = *(_DWORD *)(v25 + 4 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          int v26 = *(_DWORD *)(v25 + 4 * v14);
          *(_DWORD *)(v25 + 4 * v14) = *(_DWORD *)(v25 + 4 * v18);
          *(_DWORD *)(v25 + 4 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 40) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F0C1A18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1A18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::operator()(uint64_t a1)
{
  operations_research::sat::SharedResponseManager::UpdateInnerObjectiveBounds(*(void *)(a1 + 24), *(absl::lts_2020_02_25::Mutex **)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 16) + 144) + 20 * *(int *)(a1 + 8)), -*(void *)(*(void *)(*(void *)(a1 + 16) + 144) + 20 * (*(_DWORD *)(a1 + 8) ^ 1)));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v3 + 32);
  unint64_t v4 = (void *)(v3 + 32);
  uint64_t v5 = v6;
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d;
    if (v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d) {
      int8x16_t v9 = v5;
    }
    else {
      int8x16_t v9 = v5 + 1;
    }
    if (v8) {
      unint64_t v4 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  if (!*(unsigned char *)(v4[5] + 153))
  {
    uint64_t v10 = *(operations_research::sat::SharedResponseManager **)(a1 + 24);
    operations_research::sat::SharedResponseManager::Synchronize(v10, v2);
  }
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_132RegisterObjectiveBestBoundExportEN3gtl7IntTypeINS0_20Int"
                     "egerVariable_tag_EiEEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_132RegisterObjectiveBestBoundExportEN3gtl7IntTyp"
                                "eINS0_20IntegerVariable_tag_EiEEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_132RegisterObjectiveBestBoundExportEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_132RegisterObjectiveBestBoundExportEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::target_type()
{
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)__n128 result = &unk_26F0C1A98;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F0C1A98;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x23ECF2BC0);
}

char *std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26F0C1A98;
  unint64_t v3 = (std::string *)(v2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }
  long long v4 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v4;
  return v2;
}

void sub_23CC992B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1A98;
  long long v4 = (std::string *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    __n128 result = *(__n128 *)(a1 + 32);
    long long v8 = *(_OWORD *)(a1 + 48);
    *(__n128 *)(a2 + 32) = result;
    *(_OWORD *)(a2 + 48) = v8;
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    __n128 result = *(__n128 *)(a1 + 32);
    long long v7 = *(_OWORD *)(a1 + 48);
    *(__n128 *)(a2 + 32) = result;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::destroy_deallocate(void **__p)
{
  uint64_t v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  if (*(_DWORD *)(*(void *)(a1 + 32) + 340)) {
    return 1;
  }
  uint64_t v5 = operations_research::sat::SharedResponseManager::SynchronizedInnerObjectiveLowerBound(*(operations_research::sat::SharedResponseManager **)(a1 + 56), a2);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(*(void *)(v6 + 40) + 12 * *(int *)(*(void *)(a1 + 48) + 16));
  if (v5 <= v7
    || (*(_DWORD *)unint64_t v21 = *(_DWORD *)(*(void *)(a1 + 48) + 16),
        *(void *)&v21[4] = v5,
        uint64_t result = operations_research::sat::IntegerTrail::Enqueue(v6, *(uint64_t *)v21, SHIDWORD(v5), 0, 0, 0, 0),
        result))
  {
    uint64_t v8 = operations_research::sat::SharedResponseManager::SynchronizedInnerObjectiveUpperBound(*(operations_research::sat::SharedResponseManager **)(a1 + 56), v4);
    uint64_t v9 = *(void *)(a1 + 40);
    if (v8 >= -*(void *)(*(void *)(v9 + 40) + 12 * (*(_DWORD *)(*(void *)(a1 + 48) + 16) ^ 1)))
    {
      if (v5 <= v7) {
        return 1;
      }
    }
    else
    {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      if (v8 >= (uint64_t)0x8000000000000002) {
        uint64_t v10 = -v8;
      }
      *(_DWORD *)unint64_t v21 = *(_DWORD *)(*(void *)(a1 + 48) + 16) ^ 1;
      *(void *)&v21[4] = v10;
      if ((operations_research::sat::IntegerTrail::Enqueue(v9, *(uint64_t *)v21, SHIDWORD(v10), 0, 0, 0, 0) & 1) == 0) {
        return 0;
      }
    }
    {
      google::LogMessage::LogMessage((google::LogMessage *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1109);
      int8x16_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v21);
      int8x16_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"'", 1);
      int v13 = *(char *)(a1 + 31);
      if (v13 >= 0) {
        uint64_t v14 = a1 + 8;
      }
      else {
        uint64_t v14 = *(void *)(a1 + 8);
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(a1 + 31);
      }
      else {
        uint64_t v15 = *(void *)(a1 + 16);
      }
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"' imports objective bounds: external [", 38);
      unint64_t v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
      unint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"], current [", 12);
      unint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
      unint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"]", 1);
      google::LogMessage::~LogMessage((google::LogMessage *)v21);
    }
    return operations_research::sat::SatSolver::FinishPropagation(*(operations_research::sat::SatSolver **)(a1 + 32));
  }
  return result;
}

void sub_23CC996D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_129RegisterObjectiveBoundsImportEPNS0_21SharedResponseManag"
                     "erEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_129RegisterObjectiveBoundsImportEPNS0_21SharedRe"
                                "sponseManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_129RegisterObjectiveBoundsImportEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_129RegisterObjectiveBoundsImportEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target_type()
{
}

void *operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingDispatcher>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C1B18;
  a1[1] = 0;
  if (v2)
  {
    if (*(void *)(v2 + 24))
    {
      operator delete(*(void **)v2);
      *(void *)(v2 + 40) = 0;
      *(void *)uint64_t v2 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + 24) = 0;
    }
    unint64_t v3 = *(void **)(v2 + 32);
    if (v3) {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1030C40438D7BFDLL);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingDispatcher>::~Delete(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_26F0C1B18;
  a1[1] = 0;
  if (v1)
  {
    if (*(void *)(v1 + 24))
    {
      operator delete(*(void **)v1);
      *(void *)(v1 + 40) = 0;
      *(void *)uint64_t v1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(void *)(v1 + 8) = 0;
      *(void *)(v1 + 16) = 0;
      *(void *)(v1 + 24) = 0;
    }
    uint64_t v2 = *(void **)(v1 + 32);
    if (v2) {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
    }
    MEMORY[0x23ECF2BC0](v1, 0x1030C40438D7BFDLL);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::LPVariables>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C1B50;
  a1[1] = 0;
  if (v2)
  {
    unint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1020C4055CCDE27);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LPVariables>::~Delete(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_26F0C1B50;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x23ECF2BC0](v1, 0x1020C4055CCDE27);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::SearchHeuristics>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SearchHeuristics *)a1[1];
  *a1 = &unk_26F0C1B88;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SearchHeuristics::~SearchHeuristics(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SearchHeuristics>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SearchHeuristics *)a1[1];
  *a1 = &unk_26F0C1B88;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SearchHeuristics::~SearchHeuristics(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::SearchHeuristics::~SearchHeuristics(operations_research::sat::SearchHeuristics *this)
{
  uint64_t v2 = (char *)this + 88;
  unint64_t v3 = (char *)*((void *)this + 14);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    long long v4 = (char *)this + 56;
    uint64_t v5 = (operations_research::sat::SearchHeuristics *)*((void *)this + 10);
    if (v5 != (operations_research::sat::SearchHeuristics *)((char *)this + 56)) {
      goto LABEL_5;
    }
LABEL_11:
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    uint64_t v6 = (char *)*((void *)this + 3);
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  long long v4 = (char *)this + 56;
  uint64_t v5 = (operations_research::sat::SearchHeuristics *)*((void *)this + 10);
  if (v5 == (operations_research::sat::SearchHeuristics *)((char *)this + 56)) {
    goto LABEL_11;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(operations_research::sat::SearchHeuristics *))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = (char *)*((void *)this + 3);
  if (!v6)
  {
LABEL_8:
    uint64_t v7 = *(char **)this;
    if (!*(void *)this) {
      return;
    }
    goto LABEL_21;
  }
LABEL_12:
  uint64_t v8 = (char *)*((void *)this + 4);
  uint64_t v9 = v6;
  if (v8 != v6)
  {
    uint64_t v10 = v8 - 32;
    int8x16_t v11 = v8 - 32;
    do
    {
      int v13 = (char *)*((void *)v11 + 3);
      if (v11 == v13)
      {
        (*(void (**)(char *))(*(void *)v11 + 32))(v11);
      }
      else if (v13)
      {
        (*(void (**)(char *))(*(void *)v13 + 40))(v13);
      }
      v10 -= 32;
      BOOL v12 = v11 == v6;
      v11 -= 32;
    }
    while (!v12);
    uint64_t v9 = (char *)*((void *)this + 3);
  }
  *((void *)this + 4) = v6;
  operator delete(v9);
  uint64_t v7 = *(char **)this;
  if (*(void *)this)
  {
LABEL_21:
    uint64_t v14 = (char *)*((void *)this + 1);
    uint64_t v15 = v7;
    if (v14 != v7)
    {
      uint64_t v16 = v14 - 32;
      unint64_t v17 = v14 - 32;
      do
      {
        unint64_t v18 = (char *)*((void *)v17 + 3);
        if (v17 == v18)
        {
          (*(void (**)(char *))(*(void *)v17 + 32))(v17);
        }
        else if (v18)
        {
          (*(void (**)(char *))(*(void *)v18 + 40))(v18);
        }
        v16 -= 32;
        BOOL v12 = v17 == v7;
        v17 -= 32;
      }
      while (!v12);
      uint64_t v15 = *(char **)this;
    }
    *((void *)this + 1) = v7;
    operator delete(v15);
  }
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)uint64_t result = &unk_26F0C1BC0;
  if (*(char *)(result + 47) < 0)
  {
    operator delete(*(void **)(result + 24));
    return v1;
  }
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F0C1BC0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x23ECF2BC0);
}

char *std::__function::__func<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26F0C1BC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  unint64_t v3 = (std::string *)(v2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    *((void *)v2 + 5) = *(void *)(a1 + 40);
  }
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  return v2;
}

void sub_23CC99E6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1BC0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  long long v4 = (std::string *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    *(void *)(a2 + 48) = *(void *)(a1 + 48);
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 24);
    *(void *)(a2 + 40) = *(void *)(a1 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    *(void *)(a2 + 48) = *(void *)(a1 + 48);
  }
}

void std::__function::__func<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void std::__function::__func<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::destroy_deallocate(void **__p)
{
  uint64_t v1 = __p;
  if (*((char *)__p + 47) < 0)
  {
    operator delete(__p[3]);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v5, 0);
  unint64_t v3 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if (v6)
  {
    unint64_t v3 = *(google::protobuf::Arena **)v3;
    long long v4 = v7;
    if (v7 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_3;
    }
LABEL_5:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(&v7, v3, (long long *)(a1 + 24));
    goto LABEL_6;
  }
  long long v4 = v7;
  if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
    goto LABEL_5;
  }
LABEL_3:
  std::string::operator=(v4, (const std::string *)(a1 + 24));
LABEL_6:
  operations_research::sat::SharedResponseManager::NewSolution(*(operations_research::sat::SharedResponseManager **)(a1 + 48), (const operations_research::sat::CpSolverResponse *)v5, *(operations_research::sat::Model **)(a1 + 16));
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v5);
}

void sub_23CC9A038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_111LoadCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseMa"
                     "nagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_111LoadCpModelERKNS0_12CpModelProtoEPNS0_21Share"
                                "dResponseManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_111LoadCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_111LoadCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::target_type()
{
}

void operations_research::sat::anonymous namespace'::FillSolutionInResponse(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::Model *a3, operations_research::sat::CpSolverResponse *a4)
{
  uint64_t v185 = *MEMORY[0x263EF8340];
  *((_DWORD *)a3 + 4) = 0;
  *((_DWORD *)a3 + 10) = 0;
  uint64_t v150 = (unsigned int *)((char *)a3 + 40);
  *((_DWORD *)a3 + 16) = 0;
  size_t v149 = (unsigned int *)((char *)a3 + 64);
  uint64_t v6 = (char *)a2 + 32;
  long long v5 = (void *)*((void *)a2 + 4);
  if (v5)
  {
    uint64_t v7 = (char *)a2 + 32;
    uint64_t v8 = (void *)*((void *)a2 + 4);
    do
    {
      unint64_t v9 = v8[4];
      BOOL v10 = v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
      if (v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d) {
        int8x16_t v11 = v8;
      }
      else {
        int8x16_t v11 = v8 + 1;
      }
      if (v10) {
        uint64_t v7 = (char *)v8;
      }
      uint64_t v8 = (void *)*v11;
    }
    while (*v11);
    if (v7 == v6
      || *((void *)v7 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
    {
      BOOL v12 = 0;
    }
    else
    {
      BOOL v12 = (void *)*((void *)v7 + 5);
    }
    uint64_t v14 = (char *)a2 + 32;
    uint64_t v15 = (void *)*((void *)a2 + 4);
    do
    {
      unint64_t v16 = v15[4];
      BOOL v17 = v16 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
      if (v16 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d) {
        unint64_t v18 = v15;
      }
      else {
        unint64_t v18 = v15 + 1;
      }
      if (v17) {
        uint64_t v14 = (char *)v15;
      }
      uint64_t v15 = (void *)*v18;
    }
    while (*v18);
    if (v14 == v6
      || *((void *)v14 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
    {
      uint64_t v152 = 0;
    }
    else
    {
      uint64_t v152 = *((void *)v14 + 5);
    }
    unint64_t v19 = (char *)a2 + 32;
    do
    {
      unint64_t v20 = v5[4];
      BOOL v21 = v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        unint64_t v22 = v5;
      }
      else {
        unint64_t v22 = v5 + 1;
      }
      if (v21) {
        unint64_t v19 = (char *)v5;
      }
      long long v5 = (void *)*v22;
    }
    while (*v22);
    if (v19 == v6
      || *((void *)v19 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
    {
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = *((void *)v19 + 5);
    }
  }
  else
  {
    uint64_t v152 = 0;
    BOOL v12 = 0;
    uint64_t v13 = 0;
  }
  std::string __p = 0;
  int v159 = 0;
  uint64_t v160 = 0;
  LODWORD(v23) = *((_DWORD *)this + 6);
  uint64_t v154 = (void *)((char *)a2 + 32);
  uint64_t v156 = v12;
  if ((int)v23 < 1)
  {
LABEL_154:
    long long v113 = v156;
    if ((int)v23 < 1) {
      goto LABEL_209;
    }
    uint64_t v114 = 0;
    while (1)
    {
      int v115 = *(_DWORD *)(v113[6] + 4 * v114);
      if (v115 != -1)
      {
        if (((*(void *)(*(void *)(v152 + 24) + (((unint64_t)(2 * v115) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v115 & 0x1Fu))) & 3) == 0)
        {
          uint64_t v131 = *((unsigned int *)a3 + 10);
          if (v131 == *((_DWORD *)a3 + 11)) {
            google::protobuf::RepeatedField<long long>::Reserve(v150, v131 + 1);
          }
          *(void *)(*((void *)a3 + 6) + 8 * v131) = 0;
          *((_DWORD *)a3 + 10) = v131 + 1;
          uint64_t v132 = *((unsigned int *)a3 + 16);
          if (v132 == *((_DWORD *)a3 + 17)) {
            google::protobuf::RepeatedField<long long>::Reserve(v149, v132 + 1);
          }
          *(void *)(*((void *)a3 + 9) + 8 * v132) = 1;
          *((_DWORD *)a3 + 16) = v132 + 1;
          goto LABEL_157;
        }
        size_t v167 = (void (**)(void **))&unk_26F0C1C30;
        v168[0] = 2 * v115;
        int v169 = (void **)&v167;
        int v116 = std::__invoke_void_return_wrapper<long long,false>::__call[abi:ne180100]<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1} &,operations_research::sat::Model const&>(v168, (uint64_t)a2);
        if (v169 == (void **)&v167)
        {
          v167[4]((void **)&v167);
          uint64_t v117 = *((unsigned int *)a3 + 10);
          int v118 = v117 + 1;
          if (v117 == *((_DWORD *)a3 + 11)) {
            goto LABEL_184;
          }
        }
        else
        {
          if (v169) {
            (*((void (**)(void))*v169 + 5))();
          }
          uint64_t v117 = *((unsigned int *)a3 + 10);
          int v118 = v117 + 1;
          if (v117 != *((_DWORD *)a3 + 11)) {
            goto LABEL_185;
          }
LABEL_184:
          google::protobuf::RepeatedField<long long>::Reserve(v150, v118);
        }
LABEL_185:
        *(void *)(*((void *)a3 + 6) + 8 * v117) = v116;
        *((_DWORD *)a3 + 10) = v118;
        uint64_t v133 = *((unsigned int *)a3 + 16);
        if (v133 == *((_DWORD *)a3 + 17)) {
          google::protobuf::RepeatedField<long long>::Reserve(v149, v133 + 1);
        }
        *(void *)(*((void *)a3 + 9) + 8 * v133) = v116;
        *((_DWORD *)a3 + 16) = v133 + 1;
        long long v113 = v156;
        goto LABEL_157;
      }
      int v119 = *(_DWORD *)(*v113 + 4 * v114);
      uint64_t v120 = (void (**)(void **))&unk_26F0BFD30;
      uint64_t v164 = (void (**)(void **))&unk_26F0BFD30;
      int v165 = v119;
      uint64_t v166 = (void **)&v164;
      long long v121 = v154;
      uint64_t v122 = (void *)*v154;
      do
      {
        unint64_t v123 = v122[4];
        BOOL v124 = v123 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v123 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          uint64_t v125 = v122;
        }
        else {
          uint64_t v125 = v122 + 1;
        }
        if (v124) {
          long long v121 = v122;
        }
        uint64_t v122 = (void *)*v125;
      }
      while (*v125);
      uint64_t v126 = *(void *)(*(void *)(v121[5] + 40) + 12 * v119);
      uint64_t v127 = *((unsigned int *)a3 + 10);
      int v128 = v127 + 1;
      if (v127 == *((_DWORD *)a3 + 11))
      {
        google::protobuf::RepeatedField<long long>::Reserve(v150, v127 + 1);
        uint64_t v129 = v166;
        *(void *)(*((void *)a3 + 6) + 8 * v127) = v126;
        *((_DWORD *)a3 + 10) = v128;
        if (v129 != (void **)&v164)
        {
          int v130 = v156;
          if (v129) {
            (*((void (**)(void **))*v129 + 5))(v129);
          }
          goto LABEL_189;
        }
        uint64_t v120 = v164;
      }
      else
      {
        *(void *)(*((void *)a3 + 6) + 8 * v127) = v126;
        *((_DWORD *)a3 + 10) = v128;
      }
      int v130 = v156;
      v120[4]((void **)&v164);
LABEL_189:
      int v134 = *(_DWORD *)(*v130 + 4 * v114);
      int v135 = (void (**)(void **))&unk_26F0BFDF8;
      size_t v161 = (void (**)(void **))&unk_26F0BFDF8;
      int v162 = v134;
      size_t v163 = (void **)&v161;
      int v136 = v154;
      int8x8_t v137 = (void *)*v154;
      do
      {
        unint64_t v138 = v137[4];
        BOOL v139 = v138 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v138 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          uint64_t v140 = v137;
        }
        else {
          uint64_t v140 = v137 + 1;
        }
        if (v139) {
          int v136 = v137;
        }
        int8x8_t v137 = (void *)*v140;
      }
      while (*v140);
      uint64_t v141 = -*(void *)(*(void *)(v136[5] + 40) + 12 * (v134 ^ 1));
      uint64_t v142 = *((unsigned int *)a3 + 16);
      int v143 = v142 + 1;
      if (v142 == *((_DWORD *)a3 + 17))
      {
        google::protobuf::RepeatedField<long long>::Reserve(v149, v142 + 1);
        uint64_t v144 = v163;
        *(void *)(*((void *)a3 + 9) + 8 * v142) = v141;
        *((_DWORD *)a3 + 16) = v143;
        if (v144 != (void **)&v161)
        {
          long long v113 = v156;
          if (v144) {
            (*((void (**)(void **))*v144 + 5))(v144);
          }
          goto LABEL_157;
        }
        int v135 = v161;
      }
      else
      {
        *(void *)(*((void *)a3 + 9) + 8 * v142) = v141;
        *((_DWORD *)a3 + 16) = v143;
      }
      long long v113 = v156;
      v135[4]((void **)&v161);
LABEL_157:
      if (++v114 >= *((int *)this + 6)) {
        goto LABEL_209;
      }
    }
  }
  uint64_t v24 = 0;
  unint64_t v148 = (unsigned int *)((char *)a3 + 16);
  uint64_t v151 = v13;
  do
  {
    int v25 = *(_DWORD *)(*v12 + 4 * v24);
    if (v25 == -1)
    {
      int v37 = 2 * *(_DWORD *)(v12[6] + 4 * v24);
      if (((*(void *)(*(void *)(v152 + 24) + (((unint64_t)v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v37 & 0x3E)) & 3) == 0) {
        goto LABEL_153;
      }
      uint64_t v170 = (void (**)(void **))&unk_26F0C1C30;
      v171[0] = v37;
      uint64_t v172 = (void **)&v170;
      uint64_t v38 = std::__invoke_void_return_wrapper<long long,false>::__call[abi:ne180100]<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1} &,operations_research::sat::Model const&>(v171, (uint64_t)a2);
      uint64_t v39 = v38;
      unsigned int v40 = v159;
      if (v159 < v160)
      {
        *(void *)int v159 = v38;
        uint64_t v41 = (uint64_t)(v40 + 8);
        goto LABEL_130;
      }
      uint64_t v64 = (char *)__p;
      int64_t v65 = v159 - (unsigned char *)__p;
      uint64_t v66 = (v159 - (unsigned char *)__p) >> 3;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v68 = v160 - (unsigned char *)__p;
      if ((v160 - (unsigned char *)__p) >> 2 > v67) {
        unint64_t v67 = v68 >> 2;
      }
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v67;
      }
      if (v69)
      {
        if (v69 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v70 = (char *)operator new(8 * v69);
        unint64_t v71 = (uint64_t *)&v70[8 * v66];
        uint64_t *v71 = v39;
        uint64_t v41 = (uint64_t)(v71 + 1);
        if (v40 == v64) {
          goto LABEL_128;
        }
      }
      else
      {
        uint64_t v70 = 0;
        unint64_t v71 = (uint64_t *)(8 * v66);
        *(void *)(8 * v66) = v39;
        uint64_t v41 = 8 * v66 + 8;
        if (v40 == v64)
        {
LABEL_128:
          std::string __p = v71;
          int v159 = (char *)v41;
          uint64_t v160 = &v70[8 * v69];
          if (v64) {
            operator delete(v64);
          }
LABEL_130:
          BOOL v12 = v156;
          uint64_t v13 = v151;
          int v159 = (char *)v41;
          uint64_t v91 = v172;
          if (v172 == (void **)&v170)
          {
            v170[4]((void **)&v170);
            goto LABEL_41;
          }
          goto LABEL_131;
        }
      }
      unint64_t v92 = v40 - 8 - v64;
      if (v92 < 0x58) {
        goto LABEL_221;
      }
      if ((unint64_t)(v40 - &v70[v65]) < 0x20) {
        goto LABEL_221;
      }
      uint64_t v93 = (v92 >> 3) + 1;
      uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
      int v95 = &v40[-v94];
      unint64_t v71 = (uint64_t *)((char *)v71 - v94);
      uint64_t v96 = &v70[8 * v66 - 16];
      int v97 = v40 - 16;
      uint64_t v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v99 = *(_OWORD *)v97;
        *((_OWORD *)v96 - 1) = *((_OWORD *)v97 - 1);
        *(_OWORD *)uint64_t v96 = v99;
        v96 -= 32;
        v97 -= 32;
        v98 -= 4;
      }
      while (v98);
      unsigned int v40 = v95;
      if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_221:
        do
        {
          uint64_t v100 = *((void *)v40 - 1);
          v40 -= 8;
          *--unint64_t v71 = v100;
        }
        while (v40 != v64);
      }
      goto LABEL_128;
    }
    int v26 = *(_DWORD *)(*v12 + 4 * v24);
    unint64_t v27 = *(int *)(*(void *)(v13 + 408) + 4 * v25);
    if (v27 == -1)
    {
      uint64_t v29 = *(void **)v6;
LABEL_60:
      int v179 = &unk_26F0BFD30;
      int v180 = v25;
      int v181 = &v179;
      uint64_t v42 = v6;
      long long v43 = v29;
      do
      {
        unint64_t v44 = v43[4];
        BOOL v45 = v44 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v44 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          uint64_t v46 = v43;
        }
        else {
          uint64_t v46 = v43 + 1;
        }
        if (v45) {
          uint64_t v42 = (char *)v43;
        }
        long long v43 = (void *)*v46;
      }
      while (*v46);
      uint64_t v47 = *(void *)(*(void *)(*((void *)v42 + 5) + 40) + 12 * v25);
      unint64_t v176 = &unk_26F0BFDF8;
      int v177 = v25;
      uint64_t v178 = &v176;
      uint64_t v48 = v6;
      do
      {
        unint64_t v49 = v29[4];
        BOOL v50 = v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          uint64_t v51 = v29;
        }
        else {
          uint64_t v51 = v29 + 1;
        }
        if (v50) {
          uint64_t v48 = (char *)v29;
        }
        uint64_t v29 = (void *)*v51;
      }
      while (*v51);
      if (v47 + *(void *)(*(void *)(*((void *)v48 + 5) + 40) + 12 * (v25 ^ 1)))
      {
LABEL_153:
        int v159 = (char *)__p;
        goto LABEL_154;
      }
      uint64_t v173 = (void (**)(void **))&unk_26F0BFF50;
      v174[0] = v25;
      uint64_t v175 = (void **)&v173;
      uint64_t v52 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v174, (uint64_t)a2);
      uint64_t v53 = v52;
      uint64_t v54 = v159;
      if (v159 < v160)
      {
        *(void *)int v159 = v52;
        uint64_t v55 = (uint64_t)(v54 + 8);
LABEL_119:
        BOOL v12 = v156;
        uint64_t v13 = v151;
        int v159 = (char *)v55;
        uint64_t v91 = v175;
        if (v175 == (void **)&v173)
        {
          v173[4]((void **)&v173);
LABEL_41:
          uint64_t v6 = (char *)v154;
          goto LABEL_42;
        }
LABEL_131:
        uint64_t v6 = (char *)v154;
        if (!v91) {
          goto LABEL_42;
        }
LABEL_132:
        (*((void (**)(void **))*v91 + 5))(v91);
        goto LABEL_42;
      }
      unint64_t v56 = (char *)__p;
      int64_t v57 = v159 - (unsigned char *)__p;
      uint64_t v58 = (v159 - (unsigned char *)__p) >> 3;
      unint64_t v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v60 = v160 - (unsigned char *)__p;
      if ((v160 - (unsigned char *)__p) >> 2 > v59) {
        unint64_t v59 = v60 >> 2;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v59;
      }
      if (v61)
      {
        if (v61 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int64_t v62 = (char *)operator new(8 * v61);
        unint64_t v63 = (uint64_t *)&v62[8 * v58];
        *unint64_t v63 = v53;
        uint64_t v55 = (uint64_t)(v63 + 1);
        if (v54 == v56) {
          goto LABEL_117;
        }
LABEL_111:
        unint64_t v82 = v54 - 8 - v56;
        if (v82 < 0x58) {
          goto LABEL_222;
        }
        if ((unint64_t)(v54 - &v62[v57]) < 0x20) {
          goto LABEL_222;
        }
        uint64_t v83 = (v82 >> 3) + 1;
        uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v85 = &v54[-v84];
        unint64_t v63 = (uint64_t *)((char *)v63 - v84);
        long long v86 = &v62[8 * v58 - 16];
        uint64_t v87 = v54 - 16;
        uint64_t v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v89 = *(_OWORD *)v87;
          *((_OWORD *)v86 - 1) = *((_OWORD *)v87 - 1);
          *(_OWORD *)long long v86 = v89;
          v86 -= 32;
          v87 -= 32;
          v88 -= 4;
        }
        while (v88);
        uint64_t v54 = v85;
        if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_222:
          do
          {
            uint64_t v90 = *((void *)v54 - 1);
            v54 -= 8;
            *--unint64_t v63 = v90;
          }
          while (v54 != v56);
        }
      }
      else
      {
        int64_t v62 = 0;
        unint64_t v63 = (uint64_t *)(8 * v58);
        *(void *)(8 * v58) = v53;
        uint64_t v55 = 8 * v58 + 8;
        if (v54 != v56) {
          goto LABEL_111;
        }
      }
LABEL_117:
      std::string __p = v63;
      int v159 = (char *)v55;
      uint64_t v160 = &v62[8 * v61];
      if (v56) {
        operator delete(v56);
      }
      goto LABEL_119;
    }
    unint64_t v28 = *(void *)(*(void *)(*(void *)(v13 + 936) + 24) + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8));
    uint64_t v29 = *(void **)v6;
    if (((v28 >> *(_DWORD *)(*(void *)(v13 + 408) + 4 * v25)) & 1) == 0) {
      goto LABEL_60;
    }
    uint64_t v30 = (void (**)(void **))&unk_26F0BFD30;
    uint64_t v182 = (void (**)(void **))&unk_26F0BFD30;
    int v183 = v25;
    uint64_t v184 = (void **)&v182;
    unint64_t v31 = v6;
    do
    {
      unint64_t v32 = v29[4];
      BOOL v33 = v32 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v32 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        uint64_t v34 = v29;
      }
      else {
        uint64_t v34 = v29 + 1;
      }
      if (v33) {
        unint64_t v31 = (char *)v29;
      }
      uint64_t v29 = (void *)*v34;
    }
    while (*v34);
    uint64_t v35 = *(void *)(*(void *)(*((void *)v31 + 5) + 40) + 12 * v26);
    unsigned int v36 = v159;
    if (v159 < v160)
    {
      *(void *)int v159 = v35;
      int v159 = v36 + 8;
LABEL_147:
      v30[4]((void **)&v182);
      goto LABEL_42;
    }
    unint64_t v72 = (char *)__p;
    int64_t v73 = v159 - (unsigned char *)__p;
    uint64_t v74 = (v159 - (unsigned char *)__p) >> 3;
    unint64_t v75 = v74 + 1;
    if ((unint64_t)(v74 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v76 = v160 - (unsigned char *)__p;
    if ((v160 - (unsigned char *)__p) >> 2 > v75) {
      unint64_t v75 = v76 >> 2;
    }
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v77 = v75;
    }
    if (v77)
    {
      if (v77 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v78 = (char *)operator new(8 * v77);
      uint64_t v30 = (void (**)(void **))&unk_26F0BFD30;
      unint64_t v79 = &v78[8 * v74];
      *(void *)unint64_t v79 = v35;
      uint64_t v80 = (uint64_t)(v79 + 8);
      if (v36 == v72)
      {
LABEL_135:
        uint64_t v13 = v151;
        goto LABEL_141;
      }
    }
    else
    {
      uint64_t v78 = 0;
      unint64_t v79 = (char *)(8 * v74);
      *(void *)(8 * v74) = v35;
      uint64_t v80 = 8 * v74 + 8;
      if (v36 == v72) {
        goto LABEL_135;
      }
    }
    unint64_t v81 = v36 - 8 - v72;
    if (v81 < 0x58)
    {
      uint64_t v13 = v151;
      do
      {
LABEL_140:
        uint64_t v109 = *((void *)v36 - 1);
        v36 -= 8;
        *((void *)v79 - 1) = v109;
        v79 -= 8;
      }
      while (v36 != v72);
      goto LABEL_141;
    }
    unint64_t v101 = v36 - &v78[v73];
    uint64_t v13 = v151;
    if (v101 < 0x20) {
      goto LABEL_140;
    }
    uint64_t v102 = (v81 >> 3) + 1;
    uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v104 = &v36[-v103];
    v79 -= v103;
    unint64_t v105 = &v78[8 * v74 - 16];
    uint64_t v106 = v36 - 16;
    uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v108 = *(_OWORD *)v106;
      *((_OWORD *)v105 - 1) = *((_OWORD *)v106 - 1);
      *(_OWORD *)unint64_t v105 = v108;
      v105 -= 32;
      v106 -= 32;
      v107 -= 4;
    }
    while (v107);
    unsigned int v36 = v104;
    if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_140;
    }
LABEL_141:
    std::string __p = v79;
    int v159 = (char *)v80;
    uint64_t v160 = &v78[8 * v77];
    if (!v72)
    {
      uint64_t v6 = (char *)v154;
      BOOL v12 = v156;
      int v159 = (char *)v80;
      goto LABEL_147;
    }
    operator delete(v72);
    uint64_t v91 = v184;
    int v159 = (char *)v80;
    uint64_t v6 = (char *)v154;
    BOOL v12 = v156;
    if (v184 == (void **)&v182)
    {
      uint64_t v30 = v182;
      goto LABEL_147;
    }
    if (v184) {
      goto LABEL_132;
    }
LABEL_42:
    ++v24;
    uint64_t v23 = *((int *)this + 6);
  }
  while (v24 < v23);
  uint64_t v110 = (char *)__p;
  long long v111 = v159;
  if (__p == v159) {
    goto LABEL_154;
  }
  if (!FLAGS_cp_model_check_intermediate_solutions)
  {
    uint64_t v112 = v148;
    if (__p == v159) {
      goto LABEL_209;
    }
    goto LABEL_205;
  }
  uint64_t v112 = v148;
  if (!operations_research::sat::SolutionIsFeasible((uint64_t)this, (uint64_t)&__p, 0, 0))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v157, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 348);
    uint64_t v147 = (void *)google::LogMessage::stream((google::LogMessage *)v157);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)"Check failed: SolutionIsFeasible(model_proto, solution) ", 56);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v157);
  }
  uint64_t v110 = (char *)__p;
  long long v111 = v159;
  if (__p != v159)
  {
LABEL_205:
    unsigned int v145 = *((_DWORD *)a3 + 4);
    do
    {
      uint64_t v146 = *(void *)v110;
      if (v145 == *((_DWORD *)a3 + 5)) {
        google::protobuf::RepeatedField<long long>::Reserve(v112, v145 + 1);
      }
      *(void *)(*((void *)a3 + 3) + 8 * v145) = v146;
      *((_DWORD *)a3 + 4) = v145 + 1;
      v110 += 8;
      ++v145;
    }
    while (v110 != v111);
  }
LABEL_209:
  if (__p)
  {
    int v159 = (char *)__p;
    operator delete(__p);
  }
}