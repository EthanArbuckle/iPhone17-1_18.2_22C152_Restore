void operations_research::sat::IntegerSumLE::FillIntegerReason(operations_research::sat::IntegerSumLE *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned char *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  long long v41;
  uint64_t v42;
  void **v43;
  void *v44;
  unsigned char v45[12];

  *((void *)this + 24) = *((void *)this + 23);
  v43 = (void **)((char *)this + 208);
  v44 = (void *)((char *)this + 184);
  *((void *)this + 27) = *((void *)this + 26);
  v1 = *((void *)this + 12) - *((void *)this + 11);
  if ((int)(v1 >> 2) >= 1)
  {
    v3 = 0;
    v4 = (v1 >> 2);
    while (1)
    {
      v6 = *(_DWORD *)(*((void *)this + 11) + 4 * v3);
      v7 = *((void *)this + 6);
      v8 = *(void *)(v7 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v7 + 48) - v8) >> 2) > *(int *)(v8 + 12 * v6 + 8)) {
        goto LABEL_5;
      }
      *(_DWORD *)v45 = *(_DWORD *)(*((void *)this + 11) + 4 * v3);
      *(void *)&v45[4] = *(void *)(v8 + 12 * v6);
      v10 = (_DWORD *)*((void *)this + 24);
      v9 = *((void *)this + 25);
      if ((unint64_t)v10 < v9)
      {
        *(void *)v10 = *(void *)v45;
        v10[2] = *(_DWORD *)&v45[8];
        *((void *)this + 24) = v10 + 3;
        v11 = *((void *)this + 14);
        v13 = (char *)*((void *)this + 27);
        v12 = *((void *)this + 28);
        if ((unint64_t)v13 >= v12) {
          goto LABEL_26;
        }
        goto LABEL_3;
      }
      v14 = (_DWORD *)*v44;
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *v44) >> 2);
      v16 = v15 + 1;
      if (v15 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v14) >> 2);
      if (2 * v17 > v16) {
        v16 = 2 * v17;
      }
      v18 = v17 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v16;
      if (!v18) {
        break;
      }
      if (v18 > 0x1555555555555555) {
        goto LABEL_47;
      }
      v19 = (char *)operator new(12 * v18);
      v20 = (uint64_t)&v19[12 * v15];
      *(void *)v20 = *(void *)v45;
      *(_DWORD *)(v20 + 8) = *(_DWORD *)&v45[8];
      v21 = v20;
      if (v10 != v14) {
        goto LABEL_21;
      }
LABEL_23:
      v24 = &v19[12 * v18];
      v25 = v20 + 12;
      *((void *)this + 23) = v21;
      *((void *)this + 24) = v20 + 12;
      *((void *)this + 25) = v24;
      if (v10) {
        operator delete(v10);
      }
      *((void *)this + 24) = v25;
      v11 = *((void *)this + 14);
      v13 = (char *)*((void *)this + 27);
      v12 = *((void *)this + 28);
      if ((unint64_t)v13 >= v12)
      {
LABEL_26:
        v26 = (char *)*v43;
        v27 = v13 - (unsigned char *)*v43;
        v28 = v27 >> 3;
        v29 = (v27 >> 3) + 1;
        if (v29 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        v30 = v12 - (void)v26;
        if (v30 >> 2 > v29) {
          v29 = v30 >> 2;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          v31 = v29;
        }
        if (v31)
        {
          if (v31 >> 61) {
LABEL_47:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = operator new(8 * v31);
          v33 = &v32[8 * v28];
          *v33 = *(void *)(v11 + 8 * v3);
          v5 = (uint64_t)(v33 + 1);
          if (v13 == v26) {
            goto LABEL_43;
          }
LABEL_37:
          v34 = v13 - 8 - v26;
          if (v34 < 0x58) {
            goto LABEL_52;
          }
          if ((unint64_t)(v13 - &v32[v27]) < 0x20) {
            goto LABEL_52;
          }
          v35 = (v34 >> 3) + 1;
          v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          v37 = &v13[-v36];
          v33 = (void *)((char *)v33 - v36);
          v38 = &v32[8 * v28 - 16];
          v39 = v13 - 16;
          v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v41 = *(_OWORD *)v39;
            *(v38 - 1) = *((_OWORD *)v39 - 1);
            *v38 = v41;
            v38 -= 2;
            v39 -= 32;
            v40 -= 4;
          }
          while (v40);
          v13 = v37;
          if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_52:
            do
            {
              v42 = *((void *)v13 - 1);
              v13 -= 8;
              *--v33 = v42;
            }
            while (v13 != v26);
          }
        }
        else
        {
          v32 = 0;
          v33 = (void *)(8 * v28);
          *(void *)(8 * v28) = *(void *)(v11 + 8 * v3);
          v5 = 8 * v28 + 8;
          if (v13 != v26) {
            goto LABEL_37;
          }
        }
LABEL_43:
        *((void *)this + 26) = v33;
        *((void *)this + 27) = v5;
        *((void *)this + 28) = &v32[8 * v31];
        if (v26) {
          operator delete(v26);
        }
        goto LABEL_4;
      }
LABEL_3:
      *(void *)v13 = *(void *)(v11 + 8 * v3);
      v5 = (uint64_t)(v13 + 8);
LABEL_4:
      *((void *)this + 27) = v5;
LABEL_5:
      if (++v3 == v4) {
        return;
      }
    }
    v19 = 0;
    v20 = 4 * (((uint64_t)v10 - *v44) >> 2);
    *(void *)v20 = *(void *)v45;
    *(_DWORD *)(v20 + 8) = *(_DWORD *)&v45[8];
    v21 = 12 * v15;
    if (v10 == v14) {
      goto LABEL_23;
    }
    do
    {
LABEL_21:
      v22 = *(void *)(v10 - 3);
      v10 -= 3;
      v23 = v10[2];
      *(void *)(v21 - 12) = v22;
      v21 -= 12;
      *(_DWORD *)(v21 + 8) = v23;
    }
    while (v10 != v14);
    v10 = (_DWORD *)*v44;
    goto LABEL_23;
  }
}

BOOL operations_research::sat::IntegerSumLE::Propagate(operations_research::sat::IntegerSumLE *this)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  v2 = (int *)*((void *)this + 1);
  v3 = (int *)*((void *)this + 2);
  if (v2 != v3)
  {
    LODWORD(v4) = 0;
    int v5 = -1;
    while (1)
    {
      unint64_t v6 = *(void *)(*(void *)(*((void *)this + 5) + 24) + (((unint64_t)*v2 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if ((v6 >> (*v2 & 0x3F ^ 1u))) {
        return 1;
      }
      if ((v6 & (1 << (*v2 & 0x3F))) != 0)
      {
        unint64_t v4 = v4;
      }
      else
      {
        int v5 = *v2;
        unint64_t v4 = (v4 + 1);
      }
      if (++v2 == v3)
      {
        if (v4 > 1) {
          return 1;
        }
        if (!*((unsigned char *)this + 72)) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
    }
  }
  unint64_t v4 = 0;
  int v5 = -1;
  if (*((unsigned char *)this + 72)) {
LABEL_10:
  }
    operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::SaveState(*((void **)this + 8), (uint64_t *)((char *)this + 73));
LABEL_11:
  uint64_t v7 = *((void *)this + 11);
  uint64_t v8 = *((void *)this + 12) - v7;
  unint64_t v9 = (unint64_t)v8 >> 2;
  int v10 = *((_DWORD *)this + 21);
  if (v10 >= (int)((unint64_t)v8 >> 2))
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = v10;
    uint64_t v13 = *((void *)this + 14);
    uint64_t v14 = *(void *)(*((void *)this + 6) + 40);
    uint64_t v15 = (int)(v8 >> 2);
    do
    {
      while (1)
      {
        int v22 = *(_DWORD *)(v7 + 4 * v12);
        uint64_t v23 = *(void *)(v13 + 8 * v12);
        uint64_t v24 = *(void *)(v14 + 12 * v22);
        uint64_t v25 = *(void *)(v14 + 12 * (v22 ^ 1));
        if (v25 + v24) {
          break;
        }
        uint64_t v16 = 4 * v10;
        *(_DWORD *)(v7 + 4 * v12) = *(_DWORD *)(v7 + v16);
        *(_DWORD *)(v7 + v16) = v22;
        uint64_t v17 = *((int *)this + 21);
        uint64_t v18 = 8 * v17;
        uint64_t v19 = 8 * v12;
        *(void *)(v13 + v19) = *(void *)(v13 + 8 * v17);
        *(void *)(v13 + v18) = v23;
        uint64_t v20 = *((void *)this + 17);
        uint64_t v21 = *(void *)(v20 + 8 * v12);
        *(void *)(v20 + v19) = *(void *)(v20 + 8 * v17);
        *(void *)(v20 + v18) = v21;
        int v10 = v17 + 1;
        *((_DWORD *)this + 21) = v10;
        *(void *)((char *)this + 73) += v24 * v23;
        if (v15 == ++v12) {
          goto LABEL_20;
        }
      }
      *(void *)(*((void *)this + 17) + 8 * v12) = (-v25 - v24) * v23;
      v11 += v24 * v23;
      ++v12;
    }
    while (v15 != v12);
  }
LABEL_20:
  *(double *)(*((void *)this + 7) + 112) = *(double *)(*((void *)this + 7) + 112)
                                             + (double)((int)v9 - v10) * 0.000000001;
  uint64_t v26 = *((void *)this + 4) - (v11 + *(void *)((char *)this + 73));
  if (v26 < 0)
  {
    operations_research::sat::IntegerSumLE::FillIntegerReason(this);
    operations_research::sat::IntegerTrail::RelaxLinearReason(*((std::vector<int> **)this + 6), ~v26, *((void *)this + 26), (uint64_t)(*((void *)this + 27) - *((void *)this + 26)) >> 3, (char **)this + 23);
    if (!v4)
    {
      uint64_t v46 = *((void *)this + 6);
      v47 = (char *)*((void *)this + 20);
      v48 = (char *)*((void *)this + 21);
      v49 = (uint64_t *)*((void *)this + 23);
      uint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 24) - (void)v49) >> 2);
      uint64_t v51 = *(void *)(v46 + 936);
      *(void *)(v51 + 144) = 0;
      v52 = (void **)(v51 + 96);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v51 + 96), v47, v48, (v48 - v47) >> 2);
      operations_research::sat::IntegerTrail::MergeReasonInto(v46, v49, v50, v52);
      return 0;
    }
    int v38 = v5 ^ 1;
    v40 = (unsigned char *)*((void *)this + 20);
    v39 = (unsigned char *)*((void *)this + 21);
    int64_t v41 = v39 - v40;
    if (v39 == v40)
    {
      v45 = 0;
      v42 = 0;
      size_t v53 = -4;
      uint64_t v54 = 4;
    }
    else
    {
      if (v41 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      v42 = (char *)operator new(v39 - v40);
      uint64_t v43 = 4 * (v41 >> 2);
      memcpy(v42, v40, v41);
      uint64_t v44 = 0;
      while (*(_DWORD *)&v42[v44] != v38)
      {
        v44 += 4;
        if (v43 == v44)
        {
          v45 = &v42[v43];
          goto LABEL_44;
        }
      }
      v45 = &v42[v44];
LABEL_44:
      uint64_t v54 = (uint64_t)(v45 + 4);
      int64_t v41 = (int64_t)v42;
      size_t v53 = &v42[v43] - (v45 + 4);
      if (!v53) {
        goto LABEL_46;
      }
    }
    memmove(v45, (const void *)v54, v53);
LABEL_46:
    operations_research::sat::IntegerTrail::EnqueueLiteral(*((void *)this + 6), v38, (char *)v41, (uint64_t)&v45[v53 - v41] >> 2, *((char **)this + 23), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 2));
    if (v42) {
      operator delete(v42);
    }
    return 1;
  }
  BOOL v27 = 1;
  if (!v4 && (int)v9 > v10)
  {
    BOOL v27 = 0;
    uint64_t v28 = v10;
    uint64_t v29 = (int)(v8 >> 2);
    do
    {
      if (*(void *)(*((void *)this + 17) + 8 * v28) > v26)
      {
        int v30 = *(_DWORD *)(*((void *)this + 11) + 4 * v28);
        uint64_t v31 = *(void *)(*((void *)this + 14) + 8 * v28);
        uint64_t v32 = *((void *)this + 6);
        uint64_t v33 = *(void *)(*(void *)(v32 + 40) + 12 * v30) + v26 / v31;
        uint64_t v34 = v31 + v31 * (v26 / v31);
        int v35 = v30 ^ 1;
        uint64_t v36 = v33 >= (uint64_t)0x8000000000000002 ? -v33 : 0x7FFFFFFFFFFFFFFFLL;
        v56[0] = &unk_26F0C3378;
        v56[1] = this;
        v56[2] = v34 + ~v26;
        v57 = v56;
        unint64_t v4 = v4 & 0xFFFFFFFF00000000 | HIDWORD(v36);
        char v37 = operations_research::sat::IntegerTrail::Enqueue(v32, __SPAIR64__(v36, v35), v4, v56);
        if (v57 == v56)
        {
          (*(void (**)(void *))(v56[0] + 32))(v56);
        }
        else if (v57)
        {
          (*(void (**)(void))(*v57 + 40))();
        }
        if ((v37 & 1) == 0) {
          break;
        }
      }
      BOOL v27 = ++v28 >= v29;
    }
    while (v29 != v28);
  }
  return v27;
}

void sub_23CCF6C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CCF6CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::SaveState(void *a1, uint64_t *a2)
{
  if (a1[2] != a1[3])
  {
    uint64_t v4 = *a2;
    unint64_t v6 = (char *)a1[6];
    unint64_t v5 = a1[7];
    if ((unint64_t)v6 < v5)
    {
      *(void *)unint64_t v6 = a2;
      *((void *)v6 + 1) = v4;
      uint64_t v7 = (uint64_t)(v6 + 16);
LABEL_19:
      a1[6] = v7;
      return;
    }
    uint64_t v8 = (char **)(a1 + 5);
    unint64_t v9 = (char *)a1[5];
    uint64_t v10 = (v6 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = (char *)operator new(16 * v13);
      uint64_t v15 = &v14[16 * v10];
      uint64_t v16 = &v14[16 * v13];
      *(void *)uint64_t v15 = a2;
      *((void *)v15 + 1) = v4;
      uint64_t v7 = (uint64_t)(v15 + 16);
      if (v6 == v9) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v15 = (char *)(16 * v10);
      uint64_t v16 = 0;
      *(void *)uint64_t v15 = a2;
      *((void *)v15 + 1) = v4;
      uint64_t v7 = 16 * v10 + 16;
      if (v6 == v9)
      {
LABEL_17:
        a1[5] = v15;
        a1[6] = v7;
        a1[7] = v16;
        if (v6) {
          operator delete(v6);
        }
        goto LABEL_19;
      }
    }
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v6 - 1);
      v15 -= 16;
      v6 -= 16;
    }
    while (v6 != v9);
    unint64_t v6 = *v8;
    goto LABEL_17;
  }
}

void operations_research::sat::IntegerSumLE::RegisterWith(operations_research::sat::IntegerSumLE *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  *((unsigned char *)this + 72) = 1;
  unsigned int v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  unint64_t v5 = (unsigned int *)*((void *)this + 11);
  unint64_t v6 = (unsigned int *)*((void *)this + 12);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v7, v4, 0xFFFFFFFFLL);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 1);
  unint64_t v9 = (unsigned int *)*((void *)this + 2);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, v10, v4, 0xFFFFFFFFLL);
  }

  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(a2, v4, (int *)this + 21);
}

uint64_t operations_research::sat::MinPropagator::MinPropagator(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26F0C30F8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v8 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  int64_t v9 = v7 - *(void *)a2;
  if (v7 != *(void *)a2)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v10 = (char *)operator new(v7 - *(void *)a2);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v10;
    unint64_t v11 = &v10[4 * (v9 >> 2)];
    *(void *)(a1 + 24) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 16) = v11;
  }
  *(_DWORD *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_23CCF6F78(_Unwind_Exception *exception_object)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::MinPropagator::Propagate(operations_research::sat::MinPropagator *this)
{
  v2 = (_DWORD *)*((void *)this + 1);
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  if (v2 == v1) {
    return 1;
  }
  v3 = this;
  uint64_t v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = *((_DWORD *)this + 8);
  uint64_t v8 = *(void *)(*((void *)this + 5) + 40);
  *(_DWORD *)v94 = v7 ^ 1;
  *(void *)&v94[4] = *(void *)(v8 + 12 * (v7 ^ 1));
  uint64_t v9 = *(void *)v94;
  uint64_t v87 = HIDWORD(*(void *)&v94[4]);
  uint64_t v88 = *(void *)&v94[4];
  unint64_t v10 = v1 - v2;
  if (v10 <= 1) {
    unint64_t v10 = 1;
  }
  uint64_t v11 = 0x7FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v12 = *(void *)(v8 + 12 * (int)v2[v4]);
    if (v12 < v11) {
      uint64_t v11 = *(void *)(v8 + 12 * (int)v2[v4]);
    }
    if (v12 <= -*(void *)&v94[4])
    {
      int v6 = v4;
      ++v5;
    }
    ++v4;
  }
  while (v10 != v4);
  if (v11 <= *(void *)(v8 + 12 * v7))
  {
LABEL_34:
    if (v5)
    {
      if (v5 == 1
        && *(void *)(*(void *)(*((void *)v3 + 5) + 40) + 12
                                                               * (*(_DWORD *)(*((void *)v3 + 1) + 4 * v6) ^ 1)) < v88)
      {
        int v30 = (_DWORD *)*((void *)v3 + 6);
        *((void *)v3 + 7) = v30;
        v92 = (void **)((char *)v3 + 48);
        unint64_t v31 = *((void *)v3 + 8);
        if ((unint64_t)v30 < v31)
        {
          *(void *)int v30 = v9;
          v30[2] = v87;
          uint64_t v32 = v30 + 3;
          uint64_t v33 = v6;
          *((void *)v3 + 7) = v30 + 3;
          uint64_t v34 = (_DWORD *)*((void *)v3 + 1);
          int v35 = (_DWORD *)*((void *)v3 + 2);
          if (v34 == v35)
          {
LABEL_107:
            LODWORD(v99) = v34[v33] ^ 1;
            HIDWORD(v99) = v88;
            uint64_t v84 = *((void *)v3 + 5);
            v85 = (uint64_t *)*((void *)v3 + 6);
            return operations_research::sat::IntegerTrail::Enqueue(v84, v99, v87, 0, 0, v85, 0xAAAAAAAAAAAAAAABLL * ((v32 - (unsigned char *)v85) >> 2));
          }
LABEL_84:
          unsigned int v70 = 1 - v88;
          unint64_t v71 = (unint64_t)(1 - v88) >> 32;
          do
          {
            if (*v34 != *(_DWORD *)(*((void *)v3 + 1) + 4 * v33))
            {
              unint64_t v98 = __PAIR64__(v70, *v34);
              unint64_t v73 = *((void *)v3 + 8);
              if ((unint64_t)v32 < v73)
              {
                *(void *)uint64_t v32 = __PAIR64__(v70, *v34);
                *((_DWORD *)v32 + 2) = v71;
                v72 = v32 + 12;
              }
              else
              {
                v74 = *v92;
                unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (unsigned char *)*v92) >> 2);
                unint64_t v76 = v75 + 1;
                if (v75 + 1 > 0x1555555555555555) {
                  goto LABEL_112;
                }
                unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (void)v74) >> 2);
                if (2 * v77 > v76) {
                  unint64_t v76 = 2 * v77;
                }
                if (v77 >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v78 = 0x1555555555555555;
                }
                else {
                  unint64_t v78 = v76;
                }
                if (v78)
                {
                  if (v78 > 0x1555555555555555) {
                    goto LABEL_111;
                  }
                  v79 = (char *)operator new(12 * v78);
                }
                else
                {
                  v79 = 0;
                }
                v80 = &v79[12 * v75];
                *(void *)v80 = v98;
                *((_DWORD *)v80 + 2) = v71;
                v81 = v80;
                if (v32 != v74)
                {
                  do
                  {
                    uint64_t v82 = *(void *)(v32 - 12);
                    v32 -= 12;
                    int v83 = *((_DWORD *)v32 + 2);
                    *(void *)(v81 - 12) = v82;
                    v81 -= 12;
                    *((_DWORD *)v81 + 2) = v83;
                  }
                  while (v32 != v74);
                  uint64_t v32 = *v92;
                }
                v72 = v80 + 12;
                *((void *)v3 + 6) = v81;
                *((void *)v3 + 7) = v80 + 12;
                *((void *)v3 + 8) = &v79[12 * v78];
                if (v32) {
                  operator delete(v32);
                }
                unsigned int v70 = 1 - v88;
              }
              *((void *)v3 + 7) = v72;
              uint64_t v32 = v72;
            }
            ++v34;
          }
          while (v34 != v35);
          uint64_t v34 = (_DWORD *)*((void *)v3 + 1);
          goto LABEL_107;
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v30) >> 2);
        uint64_t v65 = 2 * v64;
        if (2 * v64 <= 1) {
          uint64_t v65 = 1;
        }
        if (v64 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v66 = 0x1555555555555555;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66 <= 0x1555555555555555)
        {
          uint64_t v67 = 3 * v66;
          v68 = operator new(12 * v66);
          *(void *)v68 = v9;
          v69 = (char *)&v68[v67];
          v68[2] = v87;
          uint64_t v32 = v68 + 3;
          *((void *)v3 + 6) = v68;
          *((void *)v3 + 7) = v68 + 3;
          *((void *)v3 + 8) = v69;
          if (v30) {
            operator delete(v30);
          }
          uint64_t v33 = v6;
          *((void *)v3 + 7) = v32;
          uint64_t v34 = (_DWORD *)*((void *)v3 + 1);
          int v35 = (_DWORD *)*((void *)v3 + 2);
          if (v34 == v35) {
            goto LABEL_107;
          }
          goto LABEL_84;
        }
LABEL_111:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      return 1;
    }
    char v37 = (char *)*((void *)v3 + 6);
    *((void *)v3 + 7) = v37;
    v93 = (void **)((char *)v3 + 48);
    unint64_t v38 = *((void *)v3 + 8);
    if ((unint64_t)v37 >= v38)
    {
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (void)v37) >> 2);
      uint64_t v44 = 2 * v43;
      if (2 * v43 <= 1) {
        uint64_t v44 = 1;
      }
      if (v43 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v45 = 0x1555555555555555;
      }
      else {
        unint64_t v45 = v44;
      }
      if (v45 > 0x1555555555555555) {
        goto LABEL_111;
      }
      uint64_t v46 = 3 * v45;
      v47 = operator new(12 * v45);
      *(void *)v47 = v9;
      v47[2] = v87;
      v39 = (char *)(v47 + 3);
      *((void *)v3 + 6) = v47;
      *((void *)v3 + 7) = v47 + 3;
      *((void *)v3 + 8) = &v47[v46];
      if (v37) {
        operator delete(v37);
      }
      *((void *)v3 + 7) = v39;
      v40 = (_DWORD *)*((void *)v3 + 1);
      int64_t v41 = (_DWORD *)*((void *)v3 + 2);
      if (v40 == v41)
      {
LABEL_43:
        v42 = v39;
LABEL_73:
        uint64_t v60 = *((void *)v3 + 5);
        v61 = (uint64_t *)*((void *)v3 + 6);
        uint64_t v62 = *(void *)(v60 + 936);
        uint64_t v63 = *(void *)(v62 + 96);
        v62 += 96;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 8) = v63;
        operations_research::sat::IntegerTrail::MergeReasonInto(v60, v61, 0xAAAAAAAAAAAAAAABLL * ((v42 - (char *)v61) >> 2), (void **)v62);
        return 0;
      }
    }
    else
    {
      *(void *)char v37 = v9;
      *((_DWORD *)v37 + 2) = v87;
      v39 = v37 + 12;
      *((void *)v3 + 7) = v37 + 12;
      v40 = (_DWORD *)*((void *)v3 + 1);
      int64_t v41 = (_DWORD *)*((void *)v3 + 2);
      if (v40 == v41) {
        goto LABEL_43;
      }
    }
    unint64_t v48 = (unint64_t)(1 - v88) >> 32;
    while (1)
    {
      while (1)
      {
        LODWORD(v97) = *v40;
        HIDWORD(v97) = 1 - v88;
        unint64_t v49 = *((void *)v3 + 8);
        if ((unint64_t)v39 >= v49) {
          break;
        }
        *(void *)v39 = v97;
        *((_DWORD *)v39 + 2) = v48;
        v42 = v39 + 12;
        *((void *)v3 + 7) = v39 + 12;
        ++v40;
        v39 += 12;
        if (v40 == v41) {
          goto LABEL_73;
        }
      }
      uint64_t v50 = (char *)*v93;
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (unsigned char *)*v93) >> 2);
      unint64_t v52 = v51 + 1;
      if (v51 + 1 > 0x1555555555555555) {
LABEL_112:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (void)v50) >> 2);
      if (2 * v53 > v52) {
        unint64_t v52 = 2 * v53;
      }
      if (v53 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v54 = 0x1555555555555555;
      }
      else {
        unint64_t v54 = v52;
      }
      if (v54)
      {
        if (v54 > 0x1555555555555555) {
          goto LABEL_111;
        }
        v55 = (char *)operator new(12 * v54);
      }
      else
      {
        v55 = 0;
      }
      v56 = &v55[12 * v51];
      v57 = &v55[12 * v54];
      *(void *)v56 = v97;
      *((_DWORD *)v56 + 2) = v48;
      v42 = v56 + 12;
      if (v39 == v50)
      {
        *((void *)v3 + 6) = v56;
        *((void *)v3 + 7) = v42;
        *((void *)v3 + 8) = v57;
      }
      else
      {
        do
        {
          uint64_t v58 = *(void *)(v39 - 12);
          v39 -= 12;
          int v59 = *((_DWORD *)v39 + 2);
          *(void *)(v56 - 12) = v58;
          v56 -= 12;
          *((_DWORD *)v56 + 2) = v59;
        }
        while (v39 != v50);
        v39 = (char *)*((void *)v3 + 6);
        *((void *)v3 + 6) = v56;
        *((void *)v3 + 7) = v42;
        *((void *)v3 + 8) = v57;
        if (!v39) {
          goto LABEL_72;
        }
      }
      operator delete(v39);
LABEL_72:
      *((void *)v3 + 7) = v42;
      ++v40;
      v39 = v42;
      if (v40 == v41) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v86 = *(void *)v94;
  unint64_t v13 = (char *)*((void *)this + 6);
  v89 = (_DWORD *)*((void *)this + 2);
  v90 = (void **)((char *)this + 48);
  *((void *)this + 7) = v13;
  unint64_t v14 = HIDWORD(v11);
  do
  {
    while (1)
    {
      LODWORD(v95) = *v2;
      HIDWORD(v95) = v11;
      unint64_t v15 = *((void *)v3 + 8);
      if ((unint64_t)v13 >= v15) {
        break;
      }
      *(void *)unint64_t v13 = v95;
      *((_DWORD *)v13 + 2) = v14;
      v13 += 12;
      *((void *)v3 + 7) = v13;
      if (++v2 == v1) {
        goto LABEL_33;
      }
    }
    uint64_t v16 = v3;
    unint64_t v17 = v14;
    uint64_t v18 = (char *)*v90;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*v90) >> 2);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v18) >> 2);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v22 = 0x1555555555555555;
    }
    else {
      unint64_t v22 = v20;
    }
    unint64_t v91 = v22;
    if (v22)
    {
      if (v22 > 0x1555555555555555) {
        goto LABEL_111;
      }
      uint64_t v23 = (char *)operator new(12 * v22);
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v24 = &v23[12 * v19];
    *(void *)uint64_t v24 = v95;
    unint64_t v14 = v17;
    *((_DWORD *)v24 + 2) = v17;
    if (v13 == v18)
    {
      uint64_t v28 = v13;
      v3 = v16;
      unint64_t v13 = v24 + 12;
      *((void *)v16 + 6) = v24;
      *((void *)v16 + 7) = v24 + 12;
      *((void *)v16 + 8) = &v23[12 * v91];
      if (v28) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v25 = v24;
      v3 = v16;
      do
      {
        uint64_t v26 = *(void *)(v13 - 12);
        v13 -= 12;
        int v27 = *((_DWORD *)v13 + 2);
        *(void *)(v25 - 12) = v26;
        v25 -= 12;
        *((_DWORD *)v25 + 2) = v27;
      }
      while (v13 != v18);
      uint64_t v28 = *v90;
      unint64_t v13 = v24 + 12;
      *((void *)v16 + 6) = v25;
      *((void *)v16 + 7) = v24 + 12;
      *((void *)v16 + 8) = &v23[12 * v91];
      if (v28) {
LABEL_28:
      }
        operator delete(v28);
    }
    uint64_t v1 = v89;
    *((void *)v3 + 7) = v13;
    ++v2;
  }
  while (v2 != v89);
LABEL_33:
  LODWORD(v96) = *((_DWORD *)v3 + 8);
  HIDWORD(v96) = v11;
  char v29 = operations_research::sat::IntegerTrail::Enqueue(*((void *)v3 + 5), v96, v14, 0, 0, *((uint64_t **)v3 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*((void *)v3 + 6)] >> 2));
  uint64_t v9 = v86;
  if (v29) {
    goto LABEL_34;
  }
  return 0;
}

void operations_research::sat::MinPropagator::RegisterWith(operations_research::sat::MinPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  int v5 = (unsigned int *)*((void *)this + 1);
  int v6 = (unsigned int *)*((void *)this + 2);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v7, v4, 0xFFFFFFFFLL);
  }
  uint64_t v8 = *((unsigned int *)this + 8);
  if (v8 != -1)
  {
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v8 ^ 1, v4, 0xFFFFFFFFLL);
  }
}

uint64_t operations_research::sat::LinMinPropagator::LinMinPropagator(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  *(void *)a1 = &unk_26F0C3128;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>((void *)(a1 + 8), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a4;
  *(void *)(a1 + 72) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

void sub_23CCF78D4(_Unwind_Exception *a1)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  operations_research::sat::LinMinPropagator::LinMinPropagator((void **)(v1 + 8), v1);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unsigned int v4 = a2;
  uint64_t v5 = a1;
  uint64_t v125 = *MEMORY[0x263EF8340];
  unint64_t v6 = a2[1] - *a2;
  v120 = 0;
  uint64_t v121 = 0;
  v122 = 0;
  uint64_t v99 = v6;
  v110 = a3;
  uint64_t v111 = (v6 >> 2);
  unint64_t v102 = v6 >> 2;
  if ((int)(v6 >> 2) >= 1)
  {
    unsigned int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v121;
    while (1)
    {
      int v13 = *(_DWORD *)(*v4 + 4 * v8);
      uint64_t v14 = *(void *)(*a3 + 8 * v8);
      uint64_t v15 = *(void *)(*(void *)(v5 + 72) + 40);
      uint64_t v16 = *(void *)(v15 + 12 * v13);
      uint64_t v17 = -(v14 * (*(void *)(v15 + 12 * (v13 ^ 1)) + v16));
      if (v7 >= v9) {
        break;
      }
      *(void *)unsigned int v7 = v17;
      uint64_t v12 = (uint64_t)(v7 + 8);
LABEL_4:
      v10 += v16 * v14;
      ++v8;
      unsigned int v7 = (char *)v12;
      if (v8 == v111)
      {
        uint64_t v121 = v12;
        v122 = v9;
        goto LABEL_33;
      }
    }
    uint64_t v18 = (v7 - v11) >> 3;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
    {
      uint64_t v121 = v12;
      v122 = v9;
      v120 = v11;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v9 - v11) >> 2 > v19) {
      unint64_t v19 = (v9 - v11) >> 2;
    }
    if ((unint64_t)(v9 - v11) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    uint64_t v107 = v10;
    uint64_t v104 = *(void *)(*a3 + 8 * v8);
    if (v20)
    {
      if (v20 >> 61)
      {
        uint64_t v121 = v12;
        v122 = v9;
        v120 = v11;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v21 = v20;
      unint64_t v22 = operator new(8 * v20);
      unint64_t v20 = v21;
      uint64_t v23 = &v22[8 * v18];
      *(void *)uint64_t v23 = v17;
      uint64_t v12 = (uint64_t)(v23 + 8);
      if (v7 != v11)
      {
LABEL_15:
        unint64_t v24 = v7 - 8 - v11;
        if (v24 < 0x168
          || &v22[v7 - v11 - 8 - (v24 & 0xFFFFFFFFFFFFFFF8)] > &v22[v7 - v11 - 8]
          || &v7[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8
          || (unint64_t)(v11 - v22) < 0x20)
        {
          uint64_t v25 = v7;
          uint64_t v5 = a1;
          unsigned int v4 = a2;
        }
        else
        {
          uint64_t v28 = (v24 >> 3) + 1;
          uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v25 = &v7[-v29];
          v23 -= v29;
          int v30 = &v22[8 * v18 - 16];
          unint64_t v31 = v7 - 16;
          uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
          unsigned int v4 = a2;
          do
          {
            long long v33 = *(_OWORD *)v31;
            *(v30 - 1) = *((_OWORD *)v31 - 1);
            *int v30 = v33;
            v30 -= 2;
            v31 -= 32;
            v32 -= 4;
          }
          while (v32);
          uint64_t v5 = a1;
          if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_18:
            uint64_t v9 = &v22[8 * v20];
            if (!v11)
            {
LABEL_20:
              uint64_t v11 = v23;
              a3 = v110;
              uint64_t v10 = v107;
              uint64_t v14 = v104;
              goto LABEL_4;
            }
LABEL_19:
            uint64_t v27 = v12;
            operator delete(v11);
            uint64_t v12 = v27;
            goto LABEL_20;
          }
        }
        do
        {
          uint64_t v26 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v23 - 1) = v26;
          v23 -= 8;
        }
        while (v25 != v11);
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v22 = 0;
      uint64_t v23 = (char *)(8 * v18);
      *(void *)(8 * v18) = v17;
      uint64_t v12 = 8 * v18 + 8;
      if (v7 != v11) {
        goto LABEL_15;
      }
    }
    uint64_t v5 = a1;
    unsigned int v4 = a2;
    uint64_t v9 = &v22[8 * v20];
    if (!v11) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v11 = 0;
  uint64_t v10 = 0;
LABEL_33:
  v120 = v11;
  uint64_t v34 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(void *)(v5 + 64));
  uint64_t v108 = v10;
  *(double *)(v34 + 112) = (double)(int)v102 * 0.000000001 + *(double *)(v34 + 112);
  v117 = 0;
  v118 = 0;
  unint64_t v119 = 0;
  v114 = 0;
  unint64_t v115 = 0;
  v116 = 0;
  if ((int)v102 >= 1)
  {
    int v35 = 0;
    unint64_t v36 = 0;
    char v37 = 0;
    uint64_t v38 = 0;
    while (1)
    {
      int v40 = *(_DWORD *)(*v4 + 4 * v38);
      uint64_t v41 = *(void *)(v5 + 72);
      uint64_t v42 = *(void *)(v41 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v41 + 48) - v42) >> 2) > *(int *)(v42 + 12 * v40 + 8)) {
        goto LABEL_37;
      }
      unint64_t v43 = *(void *)(v42 + 12 * v40);
      LODWORD(__p) = *(_DWORD *)(*v4 + 4 * v38);
      *(void *)((char *)&__p + 4) = v43;
      unint64_t v44 = HIDWORD(v43);
      if ((unint64_t)v37 < v119)
      {
        *(void *)char v37 = __p;
        *((_DWORD *)v37 + 2) = HIDWORD(v43);
        unint64_t v45 = v37 + 12;
        unint64_t v36 = v115;
        int v35 = v116;
        v118 = v37 + 12;
        uint64_t v46 = *v110;
        if (v115 >= (unint64_t)v116) {
          goto LABEL_56;
        }
        goto LABEL_35;
      }
      v47 = (char *)v117;
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)v117) >> 2);
      unint64_t v49 = v48 + 1;
      if (v48 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v119 - (void)v117) >> 2) > v49) {
        unint64_t v49 = 0x5555555555555556 * ((uint64_t)(v119 - (void)v117) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - (void)v117) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v50 = 0x1555555555555555;
      }
      else {
        unint64_t v50 = v49;
      }
      if (v50)
      {
        if (v50 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v51 = (char *)operator new(12 * v50);
        uint64_t v52 = (uint64_t)&v51[4 * ((v37 - (unsigned char *)v117) >> 2)];
        *(void *)uint64_t v52 = __p;
        *(_DWORD *)(v52 + 8) = v44;
        uint64_t v53 = (uint64_t)&v51[12 * v48];
        if (v37 == v47)
        {
LABEL_67:
          uint64_t v5 = a1;
          unint64_t v64 = &v51[12 * v50];
          unint64_t v45 = (char *)(v52 + 12);
          v117 = (void *)v53;
          unint64_t v119 = (unint64_t)v64;
          if (v37) {
            goto LABEL_54;
          }
          goto LABEL_55;
        }
      }
      else
      {
        unint64_t v51 = 0;
        uint64_t v52 = 4 * ((v37 - (unsigned char *)v117) >> 2);
        *(void *)uint64_t v52 = __p;
        *(_DWORD *)(v52 + 8) = v44;
        uint64_t v53 = 12 * v48;
        if (v37 == v47) {
          goto LABEL_67;
        }
      }
      uint64_t v5 = a1;
      do
      {
        uint64_t v54 = *(void *)(v37 - 12);
        v37 -= 12;
        int v55 = *((_DWORD *)v37 + 2);
        *(void *)(v53 - 12) = v54;
        v53 -= 12;
        *(_DWORD *)(v53 + 8) = v55;
      }
      while (v37 != v47);
      char v37 = v47;
      v56 = &v51[12 * v50];
      unint64_t v45 = (char *)(v52 + 12);
      v117 = (void *)v53;
      unint64_t v119 = (unint64_t)v56;
      if (v47) {
LABEL_54:
      }
        operator delete(v37);
LABEL_55:
      v118 = v45;
      uint64_t v46 = *v110;
      if (v36 >= (unint64_t)v35)
      {
LABEL_56:
        v57 = (char *)v114;
        unint64_t v58 = v36 - (void)v114;
        uint64_t v59 = (uint64_t)(v36 - (void)v114) >> 3;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v35 - (unsigned char *)v114) >> 2 > v60) {
          unint64_t v60 = (v35 - (unsigned char *)v114) >> 2;
        }
        if ((unint64_t)(v35 - (unsigned char *)v114) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          if (v61 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v62 = (char *)operator new(8 * v61);
          uint64_t v63 = &v62[8 * v59];
          *(void *)uint64_t v63 = *(void *)(v46 + 8 * v38);
          uint64_t v39 = (uint64_t)(v63 + 8);
          if ((char *)v36 == v57) {
            goto LABEL_73;
          }
LABEL_70:
          unint64_t v65 = v36 - 8 - (void)v57;
          if (v65 < 0x168)
          {
            unint64_t v66 = (char *)v36;
            goto LABEL_72;
          }
          if (&v62[v58 - 8 - (v65 & 0xFFFFFFFFFFFFFFF8)] > &v62[v58 - 8])
          {
            unint64_t v66 = (char *)v36;
            goto LABEL_72;
          }
          if (v36 - 8 - (v65 & 0xFFFFFFFFFFFFFFF8) > v36 - 8)
          {
            unint64_t v66 = (char *)v36;
            goto LABEL_72;
          }
          if (v36 - (void)v62 - v58 < 0x20)
          {
            unint64_t v66 = (char *)v36;
            goto LABEL_72;
          }
          uint64_t v68 = (v65 >> 3) + 1;
          uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v66 = (char *)(v36 - v69);
          v63 -= v69;
          unsigned int v70 = &v62[8 * v59 - 16];
          unint64_t v71 = (long long *)(v36 - 16);
          uint64_t v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v73 = *v71;
            *((_OWORD *)v70 - 1) = *(v71 - 1);
            *(_OWORD *)unsigned int v70 = v73;
            v70 -= 32;
            v71 -= 2;
            v72 -= 4;
          }
          while (v72);
          if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_72:
              uint64_t v67 = *((void *)v66 - 1);
              v66 -= 8;
              *((void *)v63 - 1) = v67;
              v63 -= 8;
            }
            while (v66 != v57);
          }
        }
        else
        {
          uint64_t v62 = 0;
          uint64_t v63 = (char *)(8 * v59);
          *(void *)(8 * v59) = *(void *)(v46 + 8 * v38);
          uint64_t v39 = 8 * v59 + 8;
          if ((char *)v36 != v57) {
            goto LABEL_70;
          }
        }
LABEL_73:
        int v35 = &v62[8 * v61];
        v114 = v63;
        v116 = v35;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_36;
      }
LABEL_35:
      *(void *)unint64_t v36 = *(void *)(v46 + 8 * v38);
      uint64_t v39 = v36 + 8;
LABEL_36:
      unint64_t v115 = v39;
      unint64_t v36 = v39;
      char v37 = v45;
      unsigned int v4 = a2;
LABEL_37:
      if (++v38 == v111) {
        goto LABEL_87;
      }
    }
  }
  unint64_t v36 = 0;
LABEL_87:
  uint64_t v74 = a4 - v108;
  if (a4 - v108 < 0)
  {
    operations_research::sat::IntegerTrail::RelaxLinearReason(*(std::vector<int> **)(v5 + 72), ~v74, (uint64_t)v114, (uint64_t)(v36 - (void)v114) >> 3, (char **)&v117);
    long long __p = 0uLL;
    uint64_t v113 = 0;
    unint64_t v91 = *(unsigned char **)(v5 + 80);
    v90 = *(unsigned char **)(v5 + 88);
    int64_t v92 = v90 - v91;
    if (v90 == v91)
    {
      uint64_t v93 = 0;
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (v92 >> 2) > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      *(void *)&long long __p = operator new(v92);
      uint64_t v93 = __p + 4 * (v92 >> 2);
      uint64_t v113 = v93;
      memcpy((void *)__p, v91, v92);
      *((void *)&__p + 1) = v93;
    }
    std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)&__p, v93, (char *)v117, v118, 0xAAAAAAAAAAAAAAABLL * ((v118 - (unsigned char *)v117) >> 2));
    uint64_t v94 = *(void *)(v5 + 72);
    long long v95 = __p;
    uint64_t v96 = *(void *)(v94 + 936);
    *(void *)(v96 + 144) = 0;
    uint64_t v97 = (void **)(v96 + 96);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v96 + 96), 0, 0, 0);
    operations_research::sat::IntegerTrail::MergeReasonInto(v94, (uint64_t *)v95, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v95 + 1) - v95) >> 2), v97);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    BOOL v76 = 0;
  }
  else if ((int)v102 < 1)
  {
    BOOL v76 = 1;
  }
  else
  {
    uint64_t v75 = 0;
    BOOL v76 = 0;
    uint64_t v103 = a4 - v108;
    uint64_t v105 = ~v74;
    uint64_t v77 = (int)(v99 >> 2);
    unint64_t v78 = v120;
    v101 = v120;
    do
    {
      if (v78[v75] > v74)
      {
        int v79 = *(_DWORD *)(*a2 + 4 * v75);
        uint64_t v80 = *(void *)(*v110 + 8 * v75);
        uint64_t v81 = v74 / v80;
        uint64_t v82 = *(void *)(v5 + 72);
        uint64_t v83 = *(void *)(*(void *)(v82 + 40) + 12 * v79) + v74 / v80;
        int v84 = v79 ^ 1;
        uint64_t v85 = v5;
        uint64_t v86 = v83 >= (uint64_t)0x8000000000000002 ? -v83 : 0x7FFFFFFFFFFFFFFFLL;
        LODWORD(__p) = v84;
        *(void *)((char *)&__p + 4) = v86;
        uint64_t v87 = __p;
        v124 = 0;
        uint64_t v88 = operator new(0x28uLL);
        *uint64_t v88 = &unk_26F0C3408;
        v88[1] = v85;
        v88[2] = a2;
        v88[3] = v110;
        v88[4] = v80 + v80 * v81 + v105;
        v124 = v88;
        unint64_t v36 = v36 & 0xFFFFFFFF00000000 | HIDWORD(v86);
        char v89 = operations_research::sat::IntegerTrail::Enqueue(v82, v87, v36, v123);
        if (v124 == v123)
        {
          (*(void (**)(void *))(v123[0] + 32))(v123);
          uint64_t v5 = a1;
        }
        else
        {
          uint64_t v5 = a1;
          if (v124) {
            (*(void (**)(void))(*v124 + 40))();
          }
        }
        uint64_t v77 = (int)(v99 >> 2);
        uint64_t v74 = v103;
        unint64_t v78 = v101;
        if ((v89 & 1) == 0) {
          break;
        }
      }
      BOOL v76 = ++v75 >= v77;
    }
    while (v111 != v75);
  }
  if (v114) {
    operator delete(v114);
  }
  if (v117)
  {
    v118 = (char *)v117;
    operator delete(v117);
  }
  if (v120) {
    operator delete(v120);
  }
  return v76;
}

void sub_23CCF8284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v31 = a22;
    if (!a22)
    {
LABEL_3:
      uint64_t v32 = a25;
      if (!a25)
      {
LABEL_8:
        if (a28) {
          operator delete(a28);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(v32);
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v31 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  operator delete(v31);
  uint64_t v32 = a25;
  if (!a25) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL operations_research::sat::LinMinPropagator::Propagate(operations_research::sat::LinMinPropagator *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 == *((void *)this + 2)) {
    return 1;
  }
  v2 = this;
  unint64_t v3 = 0;
  int v4 = 0;
  LODWORD(v5) = 0;
  *((void *)this + 6) = *((void *)this + 5);
  uint64_t v62 = (void **)((char *)this + 40);
  uint64_t v6 = *(void *)(*(void *)(*((void *)this + 9) + 40) + 12 * (*((_DWORD *)this + 8) ^ 1));
  LODWORD(__p[0]) = *((_DWORD *)this + 8) ^ 1;
  *(void **)((char *)__p + 4) = (void *)v6;
  unint64_t v60 = HIDWORD(v6);
  uint64_t v61 = v6;
  uint64_t v7 = -v6;
  uint64_t v8 = 0x7FFFFFFFFFFFFFFELL;
  uint64_t v59 = __p[0];
  do
  {
    uint64_t v11 = operations_research::sat::LinExprLowerBound((uint64_t *)(v1 + 56 * v3), *((void *)v2 + 9));
    uint64_t v12 = v11;
    uint64_t v14 = (uint64_t *)*((void *)v2 + 6);
    unint64_t v13 = *((void *)v2 + 7);
    if ((unint64_t)v14 < v13)
    {
      *uint64_t v14 = v11;
      uint64_t v9 = (uint64_t)(v14 + 1);
      goto LABEL_4;
    }
    int v64 = v4;
    uint64_t v15 = v2;
    uint64_t v16 = v7;
    int v65 = v5;
    uint64_t v17 = (uint64_t *)*v62;
    uint64_t v18 = (char *)v14 - (unsigned char *)*v62;
    uint64_t v19 = v18 >> 3;
    unint64_t v20 = (v18 >> 3) + 1;
    if (v20 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v13 - (void)v17;
    if (v21 >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    unint64_t v63 = v20;
    if (v20)
    {
      if (v20 >> 61) {
        goto LABEL_70;
      }
      unint64_t v22 = operator new(8 * v20);
      uint64_t v23 = (uint64_t *)&v22[8 * v19];
      *uint64_t v23 = v12;
      uint64_t v9 = (uint64_t)(v23 + 1);
      if (v14 == v17)
      {
LABEL_24:
        uint64_t v7 = v16;
        v2 = v15;
        int v4 = v64;
        unint64_t v25 = v63;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v22 = 0;
      uint64_t v23 = (uint64_t *)(8 * v19);
      *(void *)(8 * v19) = v12;
      uint64_t v9 = 8 * v19 + 8;
      if (v14 == v17) {
        goto LABEL_24;
      }
    }
    unint64_t v24 = (char *)(v14 - 1) - (char *)v17;
    unint64_t v25 = v63;
    if (v24 >= 0x58)
    {
      unint64_t v26 = (char *)v14 - &v22[v18];
      uint64_t v7 = v16;
      v2 = v15;
      int v4 = v64;
      if (v26 >= 0x20)
      {
        uint64_t v27 = (v24 >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v29 = &v14[v28 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v23 = (uint64_t *)((char *)v23 - v28);
        int v30 = &v22[8 * v19 - 16];
        unint64_t v31 = v14 - 2;
        uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *int v30 = v33;
          v30 -= 2;
          v31 -= 4;
          v32 -= 4;
        }
        while (v32);
        uint64_t v14 = v29;
        if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      uint64_t v7 = v16;
      v2 = v15;
      int v4 = v64;
    }
    do
    {
      uint64_t v34 = *--v14;
      *--uint64_t v23 = v34;
    }
    while (v14 != v17);
LABEL_30:
    *((void *)v2 + 5) = v23;
    *((void *)v2 + 6) = v9;
    *((void *)v2 + 7) = &v22[8 * v25];
    if (v17) {
      operator delete(v17);
    }
    LODWORD(v5) = v65;
LABEL_4:
    *((void *)v2 + 6) = v9;
    if (v12 < v8) {
      uint64_t v8 = v12;
    }
    if (v12 > v7) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v3;
    }
    if (v12 <= v7) {
      ++v4;
    }
    ++v3;
    uint64_t v1 = *((void *)v2 + 1);
    uint64_t v10 = *((void *)v2 + 2);
  }
  while (0x6DB6DB6DB6DB6DB7 * ((v10 - v1) >> 3) > v3);
  uint64_t v35 = *((void *)v2 + 9);
  int v36 = *((_DWORD *)v2 + 8);
  if (v8 <= v7) {
    uint64_t v37 = v8;
  }
  else {
    uint64_t v37 = 1 - v61;
  }
  if (v37 > *(void *)(*(void *)(v35 + 40) + 12 * v36))
  {
    memset(__p, 0, sizeof(__p));
    if (v10 == v1)
    {
      uint64_t v42 = 0;
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = v1 + v38;
        operations_research::sat::IntegerTrail::AppendRelaxedLinearReason(*((std::vector<int> **)v2 + 9), 0, *(void *)(v40 + 24), (uint64_t)(*(void *)(v40 + 32) - *(void *)(v40 + 24)) >> 3, *(int **)v40, (uint64_t)(*(void *)(v40 + 8) - *(void *)v40) >> 2, __p);
        ++v39;
        uint64_t v1 = *((void *)v2 + 1);
        v38 += 56;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((*((void *)v2 + 2) - v1) >> 3) > v39);
      uint64_t v35 = *((void *)v2 + 9);
      int v36 = *((_DWORD *)v2 + 8);
      uint64_t v42 = __p[1];
      uint64_t v41 = (uint64_t *)__p[0];
    }
    LODWORD(v67[0]) = v36;
    *(uint64_t *)((char *)v67 + 4) = v37;
    char v43 = operations_research::sat::IntegerTrail::Enqueue(v35, v67[0], SHIDWORD(v37), 0, 0, v41, 0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v41) >> 2));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v43 & 1) == 0) {
      return 0;
    }
  }
  if (v4 != 1
    || operations_research::sat::LinExprUpperBound((uint64_t *)(*((void *)v2 + 1) + 56 * (int)v5), *((void *)v2 + 9)) <= v7)
  {
    return 1;
  }
  if (*((_DWORD *)v2 + 26))
  {
    uint64_t v44 = *((void *)v2 + 1);
  }
  else
  {
    uint64_t v46 = (_DWORD *)*((void *)v2 + 10);
    *((void *)v2 + 11) = v46;
    unint64_t v47 = *((void *)v2 + 12);
    if ((unint64_t)v46 >= v47)
    {
      unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (void)v46) >> 2);
      uint64_t v50 = 2 * v49;
      if (2 * v49 <= 1) {
        uint64_t v50 = 1;
      }
      if (v49 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v51 = 0x1555555555555555;
      }
      else {
        unint64_t v51 = v50;
      }
      if (v51 > 0x1555555555555555) {
LABEL_70:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v52 = 3 * v51;
      uint64_t v53 = operator new(12 * v51);
      *(void *)uint64_t v53 = v59;
      uint64_t v54 = (char *)&v53[v52];
      v53[2] = v60;
      unint64_t v48 = v53 + 3;
      *((void *)v2 + 10) = v53;
      *((void *)v2 + 11) = v53 + 3;
      *((void *)v2 + 12) = v54;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      *(void *)uint64_t v46 = v59;
      v46[2] = v60;
      unint64_t v48 = v46 + 3;
    }
    *((void *)v2 + 11) = v48;
    uint64_t v44 = *((void *)v2 + 1);
    uint64_t v55 = *((void *)v2 + 2);
    if (v55 == v44)
    {
      uint64_t v44 = *((void *)v2 + 2);
    }
    else
    {
      uint64_t v56 = 0;
      unint64_t v57 = 0;
      do
      {
        if (v5 != v57)
        {
          uint64_t v58 = v44 + v56;
          operations_research::sat::IntegerTrail::AppendRelaxedLinearReason(*((std::vector<int> **)v2 + 9), 0, *(void *)(v58 + 24), (uint64_t)(*(void *)(v58 + 32) - *(void *)(v58 + 24)) >> 3, *(int **)v58, (uint64_t)(*(void *)(v58 + 8) - *(void *)v58) >> 2, (void **)v2 + 10);
          uint64_t v44 = *((void *)v2 + 1);
          uint64_t v55 = *((void *)v2 + 2);
        }
        ++v57;
        v56 += 56;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v55 - v44) >> 3) > v57);
    }
    *((_DWORD *)v2 + 26) = 1;
  }
  return operations_research::sat::LinMinPropagator::PropagateLinearUpperBound((uint64_t)v2, (void *)(v44 + 56 * (int)v5), (void *)(v44 + 56 * (int)v5 + 24), v7 - *(void *)(v44 + 56 * (int)v5 + 48));
}

void sub_23CCF8880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinMinPropagator::RegisterWith(operations_research::sat::LinMinPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  v2 = a2;
  unsigned int v84 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  unint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v85 = (void *)*((void *)this + 2);
  if (v3 != v85)
  {
    unint64_t v89 = v84 | 0xFFFFFFFF00000000;
    v90 = (void *)((char *)v2 + 88);
    while (1)
    {
      uint64_t v4 = *v3;
      if (v3[1] != *v3) {
        break;
      }
LABEL_3:
      v3 += 7;
      if (v3 == v85) {
        goto LABEL_95;
      }
    }
    unint64_t v5 = 0;
    uint64_t v86 = v3;
    while (1)
    {
      uint64_t v7 = *(unsigned int *)(v4 + 4 * v5);
      int v8 = v7;
      if (*(uint64_t *)(v3[3] + 8 * v5) < 1)
      {
        unint64_t v27 = (int)v7 ^ 1;
        if (v7 == -1 || v27 == -1) {
          goto LABEL_8;
        }
        uint64_t v30 = *((void *)v2 + 11);
        uint64_t v29 = *((void *)v2 + 12);
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3);
        if (v31 <= v27)
        {
          unint64_t v32 = (int)v27 + 1;
          if (v32 <= v31)
          {
            if (v32 < v31)
            {
              uint64_t v37 = v30 + 24 * (int)v32;
              if (v29 != v37)
              {
                uint64_t v38 = *((void *)v2 + 12);
                do
                {
                  uint64_t v40 = *(void **)(v38 - 24);
                  v38 -= 24;
                  unint64_t v39 = v40;
                  if (v40)
                  {
                    *(void *)(v29 - 16) = v39;
                    operator delete(v39);
                  }
                  uint64_t v29 = v38;
                }
                while (v38 != v37);
              }
              *((void *)v2 + 12) = v37;
            }
          }
          else
          {
            std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v90, v32 - v31);
          }
        }
        uint64_t v41 = (unint64_t **)(*v90 + 24 * (int)v27);
        uint64_t v42 = (uint64_t *)(v41 + 1);
        char v43 = v41[1];
        unint64_t v44 = (unint64_t)v41[2];
        if ((unint64_t)v43 < v44) {
          goto LABEL_6;
        }
        unint64_t v45 = *v41;
        uint64_t v46 = (char *)v43 - (char *)*v41;
        uint64_t v47 = v46 >> 3;
        unint64_t v48 = (v46 >> 3) + 1;
        if (v48 >> 61) {
          goto LABEL_100;
        }
        uint64_t v49 = v44 - (void)v45;
        if (v49 >> 2 > v48) {
          unint64_t v48 = v49 >> 2;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v87 = v48;
        if (v48)
        {
          if (v48 >> 61) {
            goto LABEL_101;
          }
          uint64_t v50 = operator new(8 * v48);
          unint64_t v51 = (unint64_t *)&v50[8 * v47];
          *unint64_t v51 = v89;
          uint64_t v6 = (uint64_t)(v51 + 1);
          if (v43 != v45)
          {
LABEL_58:
            unint64_t v52 = (char *)(v43 - 1) - (char *)v45;
            if (v52 < 0x58)
            {
              unint64_t v3 = v86;
              goto LABEL_66;
            }
            unint64_t v53 = (char *)v43 - &v50[v46];
            unint64_t v3 = v86;
            if (v53 < 0x20) {
              goto LABEL_105;
            }
            uint64_t v54 = (v52 >> 3) + 1;
            uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v56 = &v43[v55 / 0xFFFFFFFFFFFFFFF8];
            unint64_t v51 = (unint64_t *)((char *)v51 - v55);
            unint64_t v57 = &v50[8 * v47 - 16];
            uint64_t v58 = v43 - 2;
            uint64_t v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v60 = *(_OWORD *)v58;
              *(v57 - 1) = *((_OWORD *)v58 - 1);
              _OWORD *v57 = v60;
              v57 -= 2;
              v58 -= 4;
              v59 -= 4;
            }
            while (v59);
            char v43 = v56;
            if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_105:
              do
              {
LABEL_66:
                unint64_t v61 = *--v43;
                *--unint64_t v51 = v61;
              }
              while (v43 != v45);
            }
            char v43 = *v41;
LABEL_68:
            *uint64_t v41 = v51;
            uint64_t *v42 = v6;
            v41[2] = (unint64_t *)&v50[8 * v87];
            if (v43) {
              goto LABEL_93;
            }
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v50 = 0;
          unint64_t v51 = (unint64_t *)(8 * v47);
          *(void *)(8 * v47) = v89;
          uint64_t v6 = 8 * v47 + 8;
          if (v43 != v45) {
            goto LABEL_58;
          }
        }
        unint64_t v3 = v86;
        goto LABEL_68;
      }
      if (v7 == -1) {
        goto LABEL_8;
      }
      uint64_t v9 = (void *)*((void *)v2 + 11);
      uint64_t v10 = (void *)*((void *)v2 + 12);
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
      if (v11 <= (int)v7)
      {
        uint64_t v12 = (v7 << 32) + 0x100000000;
        unint64_t v13 = v12 >> 32;
        unint64_t v14 = (v12 >> 32) - v11;
        if (v12 >> 32 <= v11)
        {
          if (v12 >> 32 < v11)
          {
            long long v33 = &v9[3 * SHIDWORD(v12)];
            if (v10 != v33)
            {
              uint64_t v34 = (void *)*((void *)v2 + 12);
              do
              {
                int v36 = (void *)*(v34 - 3);
                v34 -= 3;
                uint64_t v35 = v36;
                if (v36)
                {
                  *(v10 - 2) = v35;
                  operator delete(v35);
                }
                uint64_t v10 = v34;
              }
              while (v34 != v33);
            }
            *((void *)v2 + 12) = v33;
          }
        }
        else
        {
          uint64_t v15 = *((void *)v2 + 13);
          if (0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v10) >> 3) >= v14)
          {
            bzero(*((void **)v2 + 12), 24 * ((24 * v14 - 24) / 0x18) + 24);
            *((void *)v2 + 12) = &v10[3 * ((24 * v14 - 24) / 0x18) + 3];
          }
          else
          {
            if (v12 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v15 - (uint64_t)v9) >> 3) > v13) {
              unint64_t v13 = 0x5555555555555556 * ((v15 - (uint64_t)v9) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v9) >> 3) >= 0x555555555555555) {
              unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
            }
            if (v13 > 0xAAAAAAAAAAAAAAALL) {
LABEL_101:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            uint64_t v16 = 24 * v13;
            uint64_t v17 = (char *)operator new(24 * v13);
            uint64_t v18 = &v17[8 * (v10 - v9)];
            uint64_t v19 = &v17[v16];
            bzero(v18, 24 * ((24 * v14 - 24) / 0x18) + 24);
            unint64_t v20 = &v18[24 * ((24 * v14 - 24) / 0x18) + 24];
            if (v10 == v9)
            {
              *((void *)v2 + 11) = v18;
              *((void *)v2 + 12) = v20;
              *((void *)v2 + 13) = v19;
            }
            else
            {
              do
              {
                uint64_t v21 = v18;
                *((void *)v18 - 2) = 0;
                *((void *)v18 - 1) = 0;
                long long v22 = *(_OWORD *)(v10 - 3);
                v10 -= 3;
                *(_OWORD *)(v18 - 24) = v22;
                v18 -= 24;
                *((void *)v21 - 1) = v10[2];
                *uint64_t v10 = 0;
                v10[1] = 0;
                v10[2] = 0;
              }
              while (v10 != v9);
              uint64_t v10 = (void *)*((void *)v2 + 11);
              uint64_t v23 = (void *)*((void *)v2 + 12);
              *((void *)v2 + 11) = v18;
              *((void *)v2 + 12) = v20;
              *((void *)v2 + 13) = v19;
              if (v23 != v10)
              {
                unint64_t v24 = v23;
                do
                {
                  unint64_t v26 = (void *)*(v24 - 3);
                  v24 -= 3;
                  unint64_t v25 = v26;
                  if (v26)
                  {
                    *(v23 - 2) = v25;
                    operator delete(v25);
                  }
                  uint64_t v23 = v24;
                }
                while (v24 != v10);
              }
            }
            if (v10) {
              operator delete(v10);
            }
          }
        }
      }
      uint64_t v62 = (unint64_t **)(*v90 + 24 * v8);
      uint64_t v42 = (uint64_t *)(v62 + 1);
      char v43 = v62[1];
      unint64_t v63 = (unint64_t)v62[2];
      if ((unint64_t)v43 < v63)
      {
LABEL_6:
        *char v43 = v89;
        uint64_t v6 = (uint64_t)(v43 + 1);
        goto LABEL_7;
      }
      int v64 = v2;
      int v65 = *v62;
      uint64_t v66 = (char *)v43 - (char *)*v62;
      uint64_t v67 = v66 >> 3;
      unint64_t v68 = (v66 >> 3) + 1;
      if (v68 >> 61) {
LABEL_100:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v69 = v63 - (void)v65;
      if (v69 >> 2 > v68) {
        unint64_t v68 = v69 >> 2;
      }
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v88 = v68;
      if (v68)
      {
        if (v68 >> 61) {
          goto LABEL_101;
        }
        unsigned int v70 = operator new(8 * v68);
        unint64_t v71 = (unint64_t *)&v70[8 * v67];
        *unint64_t v71 = v89;
        uint64_t v6 = (uint64_t)(v71 + 1);
        if (v43 == v65)
        {
LABEL_85:
          v2 = v64;
          unint64_t v3 = v86;
          goto LABEL_92;
        }
      }
      else
      {
        unsigned int v70 = 0;
        unint64_t v71 = (unint64_t *)(8 * v67);
        *(void *)(8 * v67) = v89;
        uint64_t v6 = 8 * v67 + 8;
        if (v43 == v65) {
          goto LABEL_85;
        }
      }
      unint64_t v72 = (char *)(v43 - 1) - (char *)v65;
      if (v72 >= 0x58)
      {
        unint64_t v73 = (char *)v43 - &v70[v66];
        v2 = v64;
        unint64_t v3 = v86;
        if (v73 >= 0x20)
        {
          uint64_t v74 = (v72 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v76 = &v43[v75 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v71 = (unint64_t *)((char *)v71 - v75);
          uint64_t v77 = &v70[8 * v67 - 16];
          unint64_t v78 = v43 - 2;
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *(_OWORD *)v78;
            *(v77 - 1) = *((_OWORD *)v78 - 1);
            *uint64_t v77 = v80;
            v77 -= 2;
            v78 -= 4;
            v79 -= 4;
          }
          while (v79);
          char v43 = v76;
          if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        v2 = v64;
        unint64_t v3 = v86;
      }
      do
      {
        unint64_t v81 = *--v43;
        *--unint64_t v71 = v81;
      }
      while (v43 != v65);
LABEL_91:
      char v43 = *v62;
LABEL_92:
      *uint64_t v62 = v71;
      uint64_t *v42 = v6;
      v62[2] = (unint64_t *)&v70[8 * v88];
      if (v43) {
LABEL_93:
      }
        operator delete(v43);
LABEL_7:
      uint64_t *v42 = v6;
LABEL_8:
      ++v5;
      uint64_t v4 = *v3;
      if (v5 >= (uint64_t)(v3[1] - *v3) >> 2) {
        goto LABEL_3;
      }
    }
  }
LABEL_95:
  uint64_t v82 = *((unsigned int *)this + 8);
  if (v82 != -1) {
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v2, v82 ^ 1, v84, 0xFFFFFFFFLL);
  }

  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(v2, v84, (int *)this + 26);
}

uint64_t operations_research::sat::PositiveProductPropagator::PositiveProductPropagator(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  *(void *)result = &unk_26F0C3158;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(void *)(result + 24) = a5;
  return result;
}

uint64_t operations_research::sat::PositiveProductPropagator::Propagate(operations_research::sat::PositiveProductPropagator *this)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((int *)this + 2);
  uint64_t v3 = *((int *)this + 3);
  uint64_t v5 = *(void *)(*((void *)this + 3) + 40);
  uint64_t v52 = *(void *)(v5 + 12 * (int)v4);
  uint64_t v6 = *(void *)(v5 + 12 * (int)(v4 ^ 1));
  uint64_t v7 = *(void *)(v5 + 12 * (int)v3);
  uint64_t v51 = v7;
  uint64_t v8 = *(void *)(v5 + 12 * (int)(v3 ^ 1));
  int v9 = *((_DWORD *)this + 4);
  uint64_t v50 = *(void *)(v5 + 12 * v9);
  uint64_t v49 = -*(void *)(v5 + 12 * (v9 ^ 1));
  *(_DWORD *)uint64_t v55 = 0;
  if (v52 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v52, (int)v55, "min_a >= 0");
  }
  *(_DWORD *)uint64_t v55 = 0;
  if (v7 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v51, (int)v55, "min_b >= 0");
  }
  uint64_t v10 = -v6;
  uint64_t v11 = -v8;
  while (2)
  {
    int64_t v12 = v10 * v11;
    if (v10 * v11 >= v49)
    {
      char v20 = 0;
      uint64_t v21 = v51 * v52;
      uint64_t v22 = v50;
      if (v51 * v52 <= v50) {
        goto LABEL_14;
      }
LABEL_12:
      uint64_t v50 = v21;
      uint64_t v23 = *((void *)this + 3);
      *(_DWORD *)uint64_t v55 = *((_DWORD *)this + 4);
      *(void *)&v55[4] = v21;
      uint64_t v24 = *(void *)v55;
      uint64_t v25 = *(void *)(v23 + 40);
      uint64_t v26 = *(void *)(v25 + 12 * (int)v4);
      *(_DWORD *)uint64_t v54 = v4;
      *(void *)&v54[4] = v26;
      *(void *)uint64_t v55 = *(void *)v54;
      *(_DWORD *)&v55[8] = HIDWORD(v26);
      uint64_t v27 = *(void *)(v25 + 12 * (int)v3);
      *(_DWORD *)uint64_t v54 = v3;
      *(void *)&v54[4] = v27;
      uint64_t v56 = *(void *)v54;
      int v57 = HIDWORD(v27);
      unint64_t v46 = v46 & 0xFFFFFFFF00000000 | HIDWORD(v21);
      uint64_t result = operations_research::sat::IntegerTrail::Enqueue(v23, v24, SHIDWORD(v21), 0, 0, (uint64_t *)v55, 2);
      if (!result) {
        return result;
      }
      char v20 = 1;
      uint64_t v22 = v50;
      goto LABEL_14;
    }
    uint64_t v49 = v10 * v11;
    uint64_t v13 = *((void *)this + 3);
    if (v12 >= (uint64_t)0x8000000000000002) {
      uint64_t v14 = -v12;
    }
    else {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    *(_DWORD *)uint64_t v55 = *((_DWORD *)this + 4) ^ 1;
    *(void *)&v55[4] = v14;
    uint64_t v15 = *(void *)(v13 + 40);
    uint64_t v16 = *(void *)(v15 + 12 * (int)(v4 ^ 1));
    uint64_t v17 = *(void *)v55;
    *(_DWORD *)uint64_t v54 = v4 ^ 1;
    *(void *)&v54[4] = v16;
    *(void *)uint64_t v55 = *(void *)v54;
    *(_DWORD *)&v55[8] = HIDWORD(v16);
    uint64_t v18 = *(void *)(v15 + 12 * (int)(v3 ^ 1));
    *(_DWORD *)uint64_t v54 = v3 ^ 1;
    *(_DWORD *)&v54[4] = v18;
    uint64_t v56 = *(void *)v54;
    int v57 = HIDWORD(v18);
    uint64_t v58 = v4;
    int v59 = 0;
    *(_DWORD *)uint64_t v54 = v3;
    *(void *)&v54[4] = 0;
    uint64_t v60 = v3;
    int v61 = 0;
    unint64_t v47 = v47 & 0xFFFFFFFF00000000 | HIDWORD(v14);
    uint64_t result = operations_research::sat::IntegerTrail::Enqueue(v13, v17, SHIDWORD(v14), 0, 0, (uint64_t *)v55, 4);
    if (!result) {
      return result;
    }
    char v20 = 1;
    uint64_t v21 = v51 * v52;
    uint64_t v22 = v50;
    if (v51 * v52 > v50) {
      goto LABEL_12;
    }
LABEL_14:
    *(_DWORD *)uint64_t v55 = 0;
    if (v22 < 0) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v50, (int)v55, "min_p >= 0");
    }
    if (v49 < v22) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v49, (int)&v50, "max_p >= min_p");
    }
    char v28 = 1;
    uint64_t v29 = v51;
    do
    {
      while (1)
      {
        uint64_t v31 = v11;
        uint64_t v32 = v3;
        uint64_t v3 = v4;
        char v33 = v28;
        if (v29 * v10 > v49) {
          break;
        }
        if (v29 * v10 < v50)
        {
          uint64_t v53 = v50;
          *(void *)uint64_t v54 = v10;
          *(_DWORD *)uint64_t v55 = 0;
          if (v10 < 1) {
            google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v54, (int)v55, "b > 0");
          }
          *(_DWORD *)uint64_t v55 = 0;
          if (v50 < 0) {
            google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v53, (int)v55, "p >= 0");
          }
          uint64_t v51 = (v50 + *(void *)v54 - 1) / *(void *)v54;
          uint64_t v41 = *((void *)this + 3);
          *(_DWORD *)uint64_t v55 = v32;
          *(void *)&v55[4] = v51;
          uint64_t v42 = *(void *)v55;
          uint64_t v43 = *(void *)(v41 + 40);
          uint64_t v44 = *(void *)(v43 + 12 * (int)(v4 ^ 1));
          *(_DWORD *)uint64_t v54 = v4 ^ 1;
          *(_DWORD *)&v54[4] = v44;
          *(void *)uint64_t v55 = *(void *)v54;
          *(_DWORD *)&v55[8] = HIDWORD(v44);
          *(_DWORD *)uint64_t v54 = v32;
          *(void *)&v54[4] = 0;
          uint64_t v56 = v32;
          int v57 = 0;
          uint64_t v45 = *(void *)(v43 + 12 * *((int *)this + 4));
          *(_DWORD *)uint64_t v54 = *((_DWORD *)this + 4);
          *(void *)&v54[4] = v45;
          uint64_t v58 = *(void *)v54;
          int v59 = HIDWORD(v45);
          unint64_t v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v51);
          uint64_t result = operations_research::sat::IntegerTrail::Enqueue(v41, v42, v1, 0, 0, (uint64_t *)v55, 3);
          if (!result) {
            return result;
          }
          char v20 = 1;
        }
        uint64_t v11 = v10;
        char v28 = 0;
        uint64_t v30 = v51;
        uint64_t v29 = v52;
        uint64_t v51 = v52;
        uint64_t v52 = v30;
        uint64_t v4 = v32;
        uint64_t v10 = v31;
        if ((v33 & 1) == 0) {
          goto LABEL_35;
        }
      }
      uint64_t v53 = v49;
      *(void *)uint64_t v54 = v29;
      *(_DWORD *)uint64_t v55 = 0;
      if (v29 < 1) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v54, (int)v55, "b > 0");
      }
      *(_DWORD *)uint64_t v55 = 0;
      if (v49 < 0) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v53, (int)v55, "p >= 0");
      }
      uint64_t v11 = v49 / *(void *)v54;
      uint64_t v34 = *((void *)this + 3);
      uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
      if (v49 / *(void *)v54 >= (uint64_t)0x8000000000000002) {
        uint64_t v35 = -v11;
      }
      *(_DWORD *)uint64_t v55 = v4 ^ 1;
      *(void *)&v55[4] = v35;
      uint64_t v36 = *(void *)v55;
      uint64_t v37 = *(void *)(v34 + 40);
      uint64_t v38 = *(void *)(v37 + 12 * (int)v32);
      *(_DWORD *)uint64_t v54 = v32;
      *(void *)&v54[4] = v38;
      *(void *)uint64_t v55 = *(void *)v54;
      *(_DWORD *)&v55[8] = HIDWORD(v38);
      uint64_t v39 = *(void *)(v37 + 12 * (*((_DWORD *)this + 4) ^ 1));
      *(_DWORD *)uint64_t v54 = *((_DWORD *)this + 4) ^ 1;
      *(void *)&v54[4] = v39;
      uint64_t v56 = *(void *)v54;
      int v57 = HIDWORD(v39);
      unint64_t v2 = v2 & 0xFFFFFFFF00000000 | HIDWORD(v35);
      if ((operations_research::sat::IntegerTrail::Enqueue(v34, v36, v2, 0, 0, (uint64_t *)v55, 2) & 1) == 0) {
        return 0;
      }
      char v20 = 1;
      char v28 = 0;
      uint64_t v40 = v51;
      uint64_t v29 = v52;
      uint64_t v51 = v52;
      uint64_t v52 = v40;
      uint64_t v4 = v32;
      uint64_t v10 = v31;
    }
    while ((v33 & 1) != 0);
LABEL_35:
    uint64_t v4 = v32;
    uint64_t v10 = v31;
    if (v20) {
      continue;
    }
    return 1;
  }
}

void sub_23CCF9668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCF9670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCF9678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCF9680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCF9688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCF9690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCF9698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCF96A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PositiveProductPropagator::RegisterWith(operations_research::sat::PositiveProductPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  uint64_t v5 = *((unsigned int *)this + 2);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5, v4, 0xFFFFFFFFLL);
  if (v5 != -1) {
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5 ^ 1, v4, 0xFFFFFFFFLL);
  }
  uint64_t v6 = *((unsigned int *)this + 3);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6, v4, 0xFFFFFFFFLL);
  if (v6 != -1) {
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6 ^ 1, v4, 0xFFFFFFFFLL);
  }
  uint64_t v7 = *((unsigned int *)this + 4);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v7, v4, 0xFFFFFFFFLL);
  if (v7 != -1)
  {
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v7 ^ 1, v4, 0xFFFFFFFFLL);
  }
}

uint64_t operations_research::sat::SquarePropagator::SquarePropagator(uint64_t result, int a2, int a3, uint64_t a4)
{
  *(void *)uint64_t result = &unk_26F0C3188;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(void *)(result + 16) = a4;
  return result;
}

uint64_t operations_research::sat::SquarePropagator::Propagate(operations_research::sat::SquarePropagator *this)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v5 = *(void *)(*((void *)this + 2) + 40);
    int v6 = *((_DWORD *)this + 2);
    int v7 = *((_DWORD *)this + 3);
    uint64_t v8 = *(void *)(v5 + 12 * v6);
    uint64_t v35 = v8;
    uint64_t v9 = *(void *)(v5 + 12 * (v6 ^ 1));
    uint64_t v10 = *(void *)(v5 + 12 * v7);
    uint64_t v11 = *(void *)(v5 + 12 * (v7 ^ 1));
    LODWORD(v34[0]) = 0;
    if (v8 < 0) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v35, (int)v34, "min_x >= 0");
    }
    uint64_t v12 = v8 * v8;
    BOOL v13 = v8 * v8 > v10;
    if (v8 * v8 <= v10)
    {
      uint64_t v12 = v10;
      int64_t v17 = -v11;
      uint64_t v18 = v9 * v9;
      BOOL v19 = v9 * v9 <= -v11;
      if (v9 * v9 < -v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = *((void *)this + 2);
      int v15 = *((_DWORD *)this + 2);
      LODWORD(v34[0]) = *((_DWORD *)this + 3);
      HIDWORD(v34[0]) = v8 * v8;
      uint64_t v16 = v34[0];
      LODWORD(v34[0]) = v15;
      *(void *)((char *)v34 + 4) = v8;
      uint64_t v36 = v34[0];
      int v37 = HIDWORD(v8);
      unint64_t v2 = v2 & 0xFFFFFFFF00000000 | HIDWORD(v12);
      if (!operations_research::sat::IntegerTrail::Enqueue(v14, v16, v2, 0, 0, &v36, 1)) {
        return 0;
      }
      int64_t v17 = -v11;
      uint64_t v18 = v9 * v9;
      BOOL v19 = v9 * v9 <= -v11;
      if (v9 * v9 < -v11)
      {
LABEL_7:
        uint64_t v20 = *((void *)this + 2);
        int v21 = *((_DWORD *)this + 2);
        uint64_t v22 = -v18;
        LODWORD(v34[0]) = *((_DWORD *)this + 3) ^ 1;
        HIDWORD(v34[0]) = v22;
        uint64_t v23 = v34[0];
        LODWORD(v34[0]) = v21 ^ 1;
        *(void *)((char *)v34 + 4) = v9;
        uint64_t v36 = v34[0];
        int v37 = HIDWORD(v9);
        unint64_t v3 = v3 & 0xFFFFFFFF00000000 | HIDWORD(v22);
        if ((operations_research::sat::IntegerTrail::Enqueue(v20, v23, v3, 0, 0, &v36, 1) & 1) == 0) {
          return 0;
        }
        goto LABEL_17;
      }
    }
    if (v19) {
      goto LABEL_18;
    }
    int64_t v24 = 1 - v9;
    do
      --v24;
    while (v24 * v24 > v17);
    uint64_t v25 = *((void *)this + 2);
    int v26 = *((_DWORD *)this + 2) ^ 1;
    uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    if (v24 >= (uint64_t)0x8000000000000002) {
      uint64_t v27 = -v24;
    }
    LODWORD(v34[0]) = *((_DWORD *)this + 3) ^ 1;
    *(void *)((char *)v34 + 4) = 1 - (v24 + 1) * (v24 + 1);
    uint64_t v36 = v34[0];
    int v37 = v34[1];
    unint64_t v33 = v33 & 0xFFFFFFFF00000000 | HIDWORD(v27);
    if (!operations_research::sat::IntegerTrail::Enqueue(v25, __SPAIR64__(v27, v26), SHIDWORD(v27), 0, 0, &v36, 1))return 0; {
LABEL_17:
    }
    BOOL v13 = 1;
LABEL_18:
    uint64_t v28 = v35;
    if (v28 * v28 < v12)
    {
      do
        ++v28;
      while (v28 * v28 < v12);
      uint64_t v29 = *((void *)this + 2);
      int v30 = *((_DWORD *)this + 3);
      LODWORD(v34[0]) = *((_DWORD *)this + 2);
      HIDWORD(v34[0]) = v28;
      uint64_t v31 = v34[0];
      LODWORD(v34[0]) = v30;
      *(void *)((char *)v34 + 4) = (v28 - 1) * (v28 - 1) + 1;
      uint64_t v35 = v28;
      uint64_t v36 = v34[0];
      int v37 = v34[1];
      unint64_t v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v28);
      if ((operations_research::sat::IntegerTrail::Enqueue(v29, v31, v1, 0, 0, &v36, 1) & 1) == 0) {
        return 0;
      }
      BOOL v13 = 1;
    }
  }
  while (v13);
  return 1;
}

void sub_23CCF9AF0(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SquarePropagator::RegisterWith(operations_research::sat::SquarePropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  uint64_t v5 = *((unsigned int *)this + 2);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5, v4, 0xFFFFFFFFLL);
  if (v5 != -1) {
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5 ^ 1, v4, 0xFFFFFFFFLL);
  }
  uint64_t v6 = *((unsigned int *)this + 3);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6, v4, 0xFFFFFFFFLL);
  if (v6 != -1)
  {
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6 ^ 1, v4, 0xFFFFFFFFLL);
  }
}

uint64_t operations_research::sat::DivisionPropagator::DivisionPropagator(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  *(void *)uint64_t result = &unk_26F0C31B8;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(void *)(result + 24) = a5;
  return result;
}

uint64_t operations_research::sat::DivisionPropagator::Propagate(operations_research::sat::DivisionPropagator *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*((void *)this + 3) + 40);
  int v3 = *((_DWORD *)this + 2);
  int v4 = *((_DWORD *)this + 3);
  uint64_t v29 = *(void *)(v2 + 12 * v3);
  uint64_t v5 = *(void *)(v2 + 12 * (v3 ^ 1));
  uint64_t v6 = *(void *)(v2 + 12 * v4);
  uint64_t v28 = v6;
  unint64_t v7 = *(void *)(v2 + 12 * (v4 ^ 1));
  int v8 = *((_DWORD *)this + 4);
  uint64_t v9 = *(void *)(v2 + 12 * v8);
  unint64_t v10 = *(void *)(v2 + 12 * (v8 ^ 1));
  *(_DWORD *)uint64_t v31 = 0;
  if (v29 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v29, (int)v31, "min_a >= 0");
  }
  *(_DWORD *)uint64_t v31 = 0;
  if (v6 < 1) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v28, (int)v31, "min_b > 0");
  }
  uint64_t v11 = -(uint64_t)v7;
  uint64_t v12 = -(uint64_t)v10;
  do
  {
    uint64_t v14 = -(v5 / v28);
    BOOL v13 = v12 > v14;
    if (v12 > v14)
    {
      uint64_t v15 = *((void *)this + 3);
      int v16 = *((_DWORD *)this + 3);
      *(_DWORD *)uint64_t v31 = *((_DWORD *)this + 4) ^ 1;
      *(void *)&v31[4] = v5 / v28;
      uint64_t v17 = *(void *)v31;
      uint64_t v18 = *(void *)(v15 + 40);
      uint64_t v19 = *(void *)(v18 + 12 * (*((_DWORD *)this + 2) ^ 1));
      LODWORD(v30[0]) = *((_DWORD *)this + 2) ^ 1;
      *(void *)((char *)v30 + 4) = v19;
      *(void *)uint64_t v31 = v30[0];
      *(_DWORD *)&v31[8] = HIDWORD(v19);
      uint64_t v20 = *(void *)(v18 + 12 * v16);
      LODWORD(v30[0]) = v16;
      *(void *)((char *)v30 + 4) = v20;
      uint64_t v32 = v30[0];
      int v33 = HIDWORD(v20);
      unint64_t v10 = v10 & 0xFFFFFFFF00000000 | ((unint64_t)(v5 / v28) >> 32);
      uint64_t result = operations_research::sat::IntegerTrail::Enqueue(v15, v17, v10, 0, 0, (uint64_t *)v31, 2);
      if (!result) {
        return result;
      }
      uint64_t v12 = -(v5 / v28);
    }
    if (v29 / v11 > v9)
    {
      uint64_t v22 = *((void *)this + 3);
      int v23 = *((_DWORD *)this + 3);
      *(_DWORD *)uint64_t v31 = *((_DWORD *)this + 4);
      *(void *)&v31[4] = v29 / v11;
      uint64_t v24 = *(void *)(v22 + 40);
      uint64_t v25 = *(void *)(v24 + 12 * *((int *)this + 2));
      uint64_t v26 = *(void *)v31;
      LODWORD(v30[0]) = *((_DWORD *)this + 2);
      *(void *)((char *)v30 + 4) = v25;
      *(void *)uint64_t v31 = v30[0];
      *(_DWORD *)&v31[8] = HIDWORD(v25);
      uint64_t v27 = *(void *)(v24 + 12 * (v23 ^ 1));
      LODWORD(v30[0]) = v23 ^ 1;
      *(void *)((char *)v30 + 4) = v27;
      uint64_t v32 = v30[0];
      int v33 = HIDWORD(v27);
      unint64_t v7 = v7 & 0xFFFFFFFF00000000 | ((unint64_t)(v29 / v11) >> 32);
      uint64_t result = operations_research::sat::IntegerTrail::Enqueue(v22, v26, v7, 0, 0, (uint64_t *)v31, 2);
      if (!result) {
        return result;
      }
      BOOL v13 = 1;
      uint64_t v9 = v29 / v11;
    }
  }
  while (v13);
  return 1;
}

void sub_23CCF9EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCF9EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::FixedDivisionPropagator::FixedDivisionPropagator(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)uint64_t result = &unk_26F0C31E8;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 12) = a3;
  *(_DWORD *)(result + 20) = a4;
  *(void *)(result + 24) = a5;
  return result;
}

BOOL operations_research::sat::FixedDivisionPropagator::Propagate(operations_research::sat::FixedDivisionPropagator *this)
{
  v47[2] = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)this + 2);
  uint64_t v3 = *(void *)(*((void *)this + 3) + 40);
  uint64_t v4 = *(void *)(v3 + 12 * v2);
  uint64_t v46 = v4;
  uint64_t v5 = -*(void *)(v3 + 12 * (v2 ^ 1));
  uint64_t v45 = v5;
  int v6 = *((_DWORD *)this + 5);
  int64_t v7 = *(void *)(v3 + 12 * v6);
  int64_t v8 = *(void *)(v3 + 12 * (v6 ^ 1));
  unint64_t v10 = (uint64_t *)((char *)this + 12);
  int64_t v9 = *(void *)((char *)this + 12);
  LODWORD(v47[0]) = 0;
  if (v9 < 1) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>(this + 12, (int)v47, "b_ > 0");
  }
  int64_t v11 = -v8;
  uint64_t v12 = v5 / v9;
  if (v5 / v9 >= -v8)
  {
    if (v5 / v9 > -v8)
    {
      if (v8 <= 0)
      {
        uint64_t v20 = ~(v9 * v8) + v9;
      }
      else
      {
        int64_t v18 = v9;
        int v19 = 63 - __clz(v9) + (__clz(v8) ^ 0x3F);
        if (v19 > 61)
        {
          uint64_t v20 = ((v9 ^ (unint64_t)v11) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v21 = v18 * v8;
          if (v19 <= 0x3E && v21 < v20)
          {
            if (v20 >= 0) {
              uint64_t v20 = v18 * v8;
            }
            else {
              uint64_t v20 = -(uint64_t)v21;
            }
          }
        }
        else
        {
          uint64_t v20 = v9 * v11;
        }
      }
      uint64_t v44 = v20;
      if (v20 >= v5) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v44, (int)&v45, "new_max_a < max_a");
      }
      uint64_t v23 = *((void *)this + 3);
      uint64_t v24 = v20 >= (uint64_t)0x8000000000000002 ? -v20 : 0x7FFFFFFFFFFFFFFFLL;
      LODWORD(v47[0]) = *((_DWORD *)this + 2) ^ 1;
      *(uint64_t *)((char *)v47 + 4) = v24;
      uint64_t v25 = v47[0];
      uint64_t v26 = *(void *)(*(void *)(v23 + 40) + 12 * (*((_DWORD *)this + 5) ^ 1));
      LODWORD(v47[0]) = *((_DWORD *)this + 5) ^ 1;
      *(uint64_t *)((char *)v47 + 4) = v26;
      if ((operations_research::sat::IntegerTrail::Enqueue(v23, v25, SHIDWORD(v24), 0, 0, v47, 1) & 1) == 0) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v13 = *((void *)this + 3);
    unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (v12 >= (uint64_t)0x8000000000000002) {
      unint64_t v14 = -v12;
    }
    LODWORD(v47[0]) = *((_DWORD *)this + 5) ^ 1;
    *(uint64_t *)((char *)v47 + 4) = v14;
    uint64_t v15 = v47[0];
    unint64_t v16 = HIDWORD(v14);
    uint64_t v17 = *(void *)(*(void *)(v13 + 40) + 12 * (*((_DWORD *)this + 2) ^ 1));
    LODWORD(v47[0]) = *((_DWORD *)this + 2) ^ 1;
    *(uint64_t *)((char *)v47 + 4) = v17;
    if ((operations_research::sat::IntegerTrail::Enqueue(v13, v15, v16, 0, 0, v47, 1) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v27 = *v10;
  uint64_t v28 = v4 / *v10;
  if (v28 <= v7)
  {
    if (v28 >= v7) {
      return 1;
    }
    if (v7 < 1)
    {
      uint64_t v27 = v27 * (v7 - 1) + 1;
    }
    else
    {
      if (v27 >= 0) {
        unint64_t v34 = *v10;
      }
      else {
        unint64_t v34 = -v27;
      }
      int v35 = 63 - __clz(v34);
      int v36 = __clz(v7) ^ 0x3F;
      if (!v27) {
        int v35 = 0;
      }
      int v37 = v35 + v36;
      if (v37 > 61)
      {
        if (v27)
        {
          uint64_t v27 = ((v27 ^ (unint64_t)v7) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          if (v37 <= 0x3E)
          {
            unint64_t v38 = v34 * v7;
            uint64_t v39 = v27 >= 0 ? v38 : -(uint64_t)v38;
            if (v38 < v27) {
              uint64_t v27 = v39;
            }
          }
        }
      }
      else
      {
        v27 *= v7;
      }
    }
    uint64_t v44 = v27;
    if (v27 <= v4) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v44, (int)&v46, "new_min_a > min_a");
    }
    uint64_t v40 = *((void *)this + 3);
    LODWORD(v47[0]) = *((_DWORD *)this + 2);
    *(uint64_t *)((char *)v47 + 4) = v27;
    uint64_t v41 = v47[0];
    uint64_t v42 = *(void *)(*(void *)(v40 + 40) + 12 * *((int *)this + 5));
    LODWORD(v47[0]) = *((_DWORD *)this + 5);
    *(uint64_t *)((char *)v47 + 4) = v42;
    char v33 = operations_research::sat::IntegerTrail::Enqueue(v40, v41, SHIDWORD(v27), 0, 0, v47, 1);
  }
  else
  {
    uint64_t v29 = *((void *)this + 3);
    LODWORD(v47[0]) = *((_DWORD *)this + 5);
    *(uint64_t *)((char *)v47 + 4) = v28;
    uint64_t v30 = v47[0];
    unint64_t v31 = HIDWORD(v28);
    uint64_t v32 = *(void *)(*(void *)(v29 + 40) + 12 * *((int *)this + 2));
    LODWORD(v47[0]) = *((_DWORD *)this + 2);
    *(uint64_t *)((char *)v47 + 4) = v32;
    char v33 = operations_research::sat::IntegerTrail::Enqueue(v29, v30, v31, 0, 0, v47, 1);
  }
  return (v33 & 1) != 0;
}

void sub_23CCFA390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCFA398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCFA3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::FixedDivisionPropagator::RegisterWith(operations_research::sat::FixedDivisionPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  uint64_t v5 = *((unsigned int *)this + 2);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5, v4, 0xFFFFFFFFLL);
  if (v5 != -1) {
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5 ^ 1, v4, 0xFFFFFFFFLL);
  }
  uint64_t v6 = *((unsigned int *)this + 5);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6, v4, 0xFFFFFFFFLL);
  if (v6 != -1)
  {
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6 ^ 1, v4, 0xFFFFFFFFLL);
  }
}

void operations_research::sat::IntegerSumLE::~IntegerSumLE(operations_research::sat::IntegerSumLE *this)
{
  operations_research::sat::IntegerSumLE::~IntegerSumLE(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(void *)this = &unk_26F0C30C8;
  int v2 = (void *)*((void *)this + 26);
  if (v2)
  {
    *((void *)this + 27) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 23);
  if (v3)
  {
    *((void *)this + 24) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 20);
  if (v4)
  {
    *((void *)this + 21) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 17);
  if (v5)
  {
    *((void *)this + 18) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 14);
  if (v6)
  {
    *((void *)this + 15) = v6;
    operator delete(v6);
  }
  int64_t v7 = (void *)*((void *)this + 11);
  if (v7)
  {
    *((void *)this + 12) = v7;
    operator delete(v7);
  }
  int64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }
}

void operations_research::sat::MinPropagator::~MinPropagator(operations_research::sat::MinPropagator *this)
{
  *(void *)this = &unk_26F0C30F8;
  int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26F0C30F8;
  int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::LinMinPropagator::~LinMinPropagator(operations_research::sat::LinMinPropagator *this)
{
  *(void *)this = &unk_26F0C3128;
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 2);
    uint64_t v6 = (void *)*((void *)this + 1);
    if (v5 != v4)
    {
      do
      {
        int64_t v7 = *(void **)(v5 - 32);
        if (v7)
        {
          *(void *)(v5 - 24) = v7;
          operator delete(v7);
        }
        int64_t v8 = *(void **)(v5 - 56);
        if (v8)
        {
          *(void *)(v5 - 48) = v8;
          operator delete(v8);
        }
        v5 -= 56;
      }
      while (v5 != v4);
      uint64_t v6 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v4;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t vars8;

  *(void *)this = &unk_26F0C3128;
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 2);
    uint64_t v6 = (void *)*((void *)this + 1);
    if (v5 != v4)
    {
      do
      {
        int64_t v7 = *(void **)(v5 - 32);
        if (v7)
        {
          *(void *)(v5 - 24) = v7;
          operator delete(v7);
        }
        int64_t v8 = *(void **)(v5 - 56);
        if (v8)
        {
          *(void *)(v5 - 48) = v8;
          operator delete(v8);
        }
        v5 -= 56;
      }
      while (v5 != v4);
      uint64_t v6 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v4;
    operator delete(v6);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::PositiveProductPropagator::~PositiveProductPropagator(operations_research::sat::PositiveProductPropagator *this)
{
}

void operations_research::sat::SquarePropagator::~SquarePropagator(operations_research::sat::SquarePropagator *this)
{
}

void operations_research::sat::DivisionPropagator::~DivisionPropagator(operations_research::sat::DivisionPropagator *this)
{
}

void operations_research::sat::FixedDivisionPropagator::~FixedDivisionPropagator(operations_research::sat::FixedDivisionPropagator *this)
{
}

void operations_research::sat::Model::MyNew<operations_research::sat::RevIntegerValueRepository>()
{
}

void sub_23CCFA8B8(_Unwind_Exception *a1)
{
  *unint64_t v1 = &unk_26F0C3318;
  uint64_t v3 = (void *)v1[5];
  if (v3)
  {
    v1[6] = v3;
    operator delete(v3);
  }
  operations_research::sat::Model::MyNew<operations_research::sat::RevIntRepository>((uint64_t)v1);
  MEMORY[0x23ECF2BC0](v1, 0x10B1C404D499D86);
  _Unwind_Resume(a1);
}

void operations_research::sat::RevIntegerValueRepository::~RevIntegerValueRepository(operations_research::sat::RevIntegerValueRepository *this)
{
  *(void *)this = &unk_26F0C3318;
  int v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26F0C3318;
  int v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::SetLevel(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v3 = (std::vector<int> *)(a1 + 16);
  uint64_t v6 = v5 - v4;
  if (((unint64_t)v6 >> 2) != a2)
  {
    ++*(void *)(a1 + 8);
    unint64_t v7 = a2;
    if ((int)((unint64_t)v6 >> 2) <= a2)
    {
      std::vector<int>::value_type __x = (*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4;
      unint64_t v12 = v6 >> 2;
      std::vector<int>::size_type v13 = a2 - v12;
      if (v7 <= v12)
      {
        if (v7 < v12) {
          *(void *)(a1 + 24) = v4 + 4 * v7;
        }
      }
      else
      {
        std::vector<int>::__append(v3, v13, &__x);
      }
    }
    else
    {
      int64_t v8 = (int *)(v4 + 4 * a2);
      unint64_t v9 = *v8;
      unint64_t v10 = v6 >> 2;
      std::vector<int>::size_type v11 = a2 - v10;
      if (v7 <= v10)
      {
        if (v7 < v10) {
          *(void *)(a1 + 24) = v8;
        }
      }
      else
      {
        std::vector<int>::__append(v3, v11);
      }
      uint64_t v14 = *(void *)(a1 + 40);
      unint64_t v15 = (*(void *)(a1 + 48) - v14) >> 4;
      for (int i = v15 - 1; i >= (int)v9; --i)
        **(void **)(v14 + 16 * i) = *(void *)(v14 + 16 * i + 8);
      if (v9 <= v15)
      {
        if (v9 < v15) {
          *(void *)(a1 + 48) = v14 + 16 * v9;
        }
      }
      else
      {
        std::vector<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::__append((char **)(a1 + 40), v9 - v15);
      }
    }
  }
}

void *operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::~RevRepository(void *a1)
{
  *a1 = &unk_26F0C3318;
  int v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::~RevRepository(void *a1)
{
  *a1 = &unk_26F0C3318;
  int v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::vector<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      std::vector<int>::size_type v11 = (char *)operator new(16 * v10);
    }
    else
    {
      std::vector<int>::size_type v11 = 0;
    }
    std::vector<int>::size_type v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    unint64_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    unint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *operations_research::sat::Model::Delete<operations_research::sat::RevIntegerValueRepository>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C3340;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::RevIntegerValueRepository>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C3340;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C3378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::operator()(uint64_t a1, uint64_t *a2, signed int *a3, void **a4, std::vector<int> **a5)
{
  uint64_t v5 = a1;
  uint64_t v6 = *a2;
  signed int v7 = *a3;
  unint64_t v8 = *a5;
  uint64_t v9 = *(void *)(a1 + 8);
  if ((void *)(v9 + 160) != *a4) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(*a4, *(char **)(v9 + 160), *(char **)(v9 + 168), (uint64_t)(*(void *)(v9 + 168) - *(void *)(v9 + 160)) >> 2);
  }
  v8->__end_ = v8->__begin_;
  *(void *)(v9 + 216) = *(void *)(v9 + 208);
  int v64 = (void **)(v9 + 208);
  unint64_t v10 = *(void *)(v9 + 96) - *(void *)(v9 + 88);
  if ((int)(v10 >> 2) >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (v10 >> 2);
    uint64_t v66 = v8;
    signed int v65 = v7;
    uint64_t v68 = v12;
    while (1)
    {
      int v14 = *(_DWORD *)(*(void *)(v9 + 88) + 4 * v11);
      if ((v14 ^ v6) < 2) {
        goto LABEL_7;
      }
      int TrailIndexOfVarBefore = operations_research::sat::IntegerTrail::FindTrailIndexOfVarBefore(*(void *)(v9 + 48), v14, v7);
      if (TrailIndexOfVarBefore < 0) {
        goto LABEL_7;
      }
      int v16 = TrailIndexOfVarBefore;
      std::vector<int>::pointer end = v8->__end_;
      value = v8->__end_cap_.__value_;
      if (end >= value) {
        break;
      }
      *std::vector<int>::pointer end = TrailIndexOfVarBefore;
      v8->__end_ = end + 1;
      if (*(uint64_t *)(v5 + 16) < 1) {
        goto LABEL_7;
      }
LABEL_33:
      uint64_t v39 = *(void *)(v9 + 112);
      uint64_t v41 = *(char **)(v9 + 216);
      unint64_t v40 = *(void *)(v9 + 224);
      if ((unint64_t)v41 >= v40)
      {
        uint64_t v42 = (char *)*v64;
        uint64_t v43 = v41 - (unsigned char *)*v64;
        uint64_t v44 = v43 >> 3;
        unint64_t v45 = (v43 >> 3) + 1;
        if (v45 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v46 = v40 - (void)v42;
        if (v46 >> 2 > v45) {
          unint64_t v45 = v46 >> 2;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          if (v47 >> 61) {
LABEL_60:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unint64_t v48 = operator new(8 * v47);
          uint64_t v49 = &v48[8 * v44];
          void *v49 = *(void *)(v39 + 8 * v11);
          uint64_t v13 = (uint64_t)(v49 + 1);
          if (v41 != v42)
          {
LABEL_43:
            unint64_t v50 = v41 - 8 - v42;
            if (v50 < 0x58)
            {
              unint64_t v8 = v66;
              goto LABEL_51;
            }
            unint64_t v51 = v41 - &v48[v43];
            unint64_t v8 = v66;
            if (v51 < 0x20) {
              goto LABEL_65;
            }
            uint64_t v52 = (v50 >> 3) + 1;
            uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v54 = &v41[-v53];
            uint64_t v49 = (void *)((char *)v49 - v53);
            uint64_t v55 = &v48[8 * v44 - 16];
            uint64_t v56 = v41 - 16;
            uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v58 = *(_OWORD *)v56;
              *(v55 - 1) = *((_OWORD *)v56 - 1);
              _OWORD *v55 = v58;
              v55 -= 2;
              v56 -= 32;
              v57 -= 4;
            }
            while (v57);
            uint64_t v41 = v54;
            if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_65:
              do
              {
LABEL_51:
                uint64_t v59 = *((void *)v41 - 1);
                v41 -= 8;
                *--uint64_t v49 = v59;
              }
              while (v41 != v42);
            }
LABEL_52:
            *(void *)(v9 + 208) = v49;
            *(void *)(v9 + 216) = v13;
            *(void *)(v9 + 224) = &v48[8 * v47];
            if (v42) {
              operator delete(v42);
            }
            signed int v7 = v65;
            goto LABEL_6;
          }
        }
        else
        {
          unint64_t v48 = 0;
          uint64_t v49 = (void *)(8 * v44);
          *(void *)(8 * v44) = *(void *)(v39 + 8 * v11);
          uint64_t v13 = 8 * v44 + 8;
          if (v41 != v42) {
            goto LABEL_43;
          }
        }
        unint64_t v8 = v66;
        goto LABEL_52;
      }
      *(void *)uint64_t v41 = *(void *)(v39 + 8 * v11);
      uint64_t v13 = (uint64_t)(v41 + 8);
LABEL_6:
      uint64_t v12 = v68;
      *(void *)(v9 + 216) = v13;
LABEL_7:
      if (++v11 == v12) {
        goto LABEL_55;
      }
    }
    uint64_t v19 = v6;
    uint64_t v20 = v5;
    std::vector<int>::pointer begin = v8->__begin_;
    uint64_t v22 = (char *)end - (char *)v8->__begin_;
    uint64_t v23 = v22 >> 2;
    unint64_t v24 = (v22 >> 2) + 1;
    if (v24 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = (char *)value - (char *)begin;
    if (v25 >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v67 = v24;
    if (v24)
    {
      if (v24 >> 62) {
        goto LABEL_60;
      }
      uint64_t v26 = operator new(4 * v24);
      uint64_t v27 = (int *)&v26[4 * v23];
      *uint64_t v27 = v16;
      uint64_t v28 = (uint64_t)(v27 + 1);
      if (end != begin)
      {
LABEL_21:
        unint64_t v29 = (char *)(end - 1) - (char *)begin;
        if (v29 >= 0x2C)
        {
          unint64_t v30 = (char *)end - &v26[v22];
          uint64_t v5 = v20;
          uint64_t v6 = v19;
          uint64_t v12 = v68;
          if (v30 >= 0x20)
          {
            uint64_t v31 = (v29 >> 2) + 1;
            uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
            char v33 = &end[v32 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v27 = (int *)((char *)v27 - v32);
            unint64_t v34 = &v26[4 * v23 - 16];
            int v35 = (long long *)(end - 4);
            uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v37 = *v35;
              *(v34 - 1) = *(v35 - 1);
              *unint64_t v34 = v37;
              v34 -= 2;
              v35 -= 2;
              v36 -= 8;
            }
            while (v36);
            std::vector<int>::pointer end = v33;
            if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_30:
              unint64_t v8 = v66;
              v66->__begin_ = v27;
              v66->__end_ = (std::vector<int>::pointer)v28;
              v66->__end_cap_.__value_ = (int *)&v26[4 * v67];
              if (begin) {
                operator delete(begin);
              }
              signed int v7 = v65;
              v66->__end_ = (std::vector<int>::pointer)v28;
              if (*(uint64_t *)(v5 + 16) < 1) {
                goto LABEL_7;
              }
              goto LABEL_33;
            }
          }
        }
        else
        {
          uint64_t v5 = v20;
          uint64_t v6 = v19;
          uint64_t v12 = v68;
        }
        do
        {
          int v38 = *--end;
          *--uint64_t v27 = v38;
        }
        while (end != begin);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (int *)(4 * v23);
      *(_DWORD *)(4 * v23) = v16;
      uint64_t v28 = 4 * v23 + 4;
      if (end != begin) {
        goto LABEL_21;
      }
    }
    uint64_t v5 = v20;
    uint64_t v6 = v19;
    uint64_t v12 = v68;
    goto LABEL_30;
  }
LABEL_55:
  uint64_t v60 = *(void *)(v5 + 16);
  if (v60 > 0)
  {
    int v61 = *(void **)(v9 + 48);
    uint64_t v62 = *(void *)(v9 + 208);
    uint64_t v63 = (*(void *)(v9 + 216) - v62) >> 3;
    operations_research::sat::IntegerTrail::RelaxLinearReason(v61, v60, v62, v63, v8);
  }
}

uint64_t std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12IntegerSumLE9PropagateEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12IntegerSumLE9PropagateEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12IntegerSumLE9PropagateEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12IntegerSumLE9PropagateEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::target_type()
{
}

char *std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = *(char **)a1;
  uint64_t v6 = (a2 - *(void *)a1) / 12;
  signed int v7 = (char *)(*(void *)a1 + 12 * v6);
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = __src;
  uint64_t v12 = *(unsigned char **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 2)) < a5)
  {
    unint64_t v13 = a5 - 0x5555555555555555 * ((v12 - v5) >> 2);
    if (v13 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 2);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13) {
      uint64_t v15 = v13;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = (char *)operator new(12 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v25 = &v17[12 * v6];
    uint64_t v26 = 12 * a5;
    uint64_t v27 = &v25[12 * a5];
    uint64_t v28 = v25;
    do
    {
      uint64_t v29 = *(void *)v9;
      *((_DWORD *)v28 + 2) = *((_DWORD *)v9 + 2);
      *(void *)uint64_t v28 = v29;
      v28 += 12;
      v9 += 12;
      v26 -= 12;
    }
    while (v26);
    uint64_t v30 = 12 * v16;
    uint64_t v31 = *(char **)a1;
    uint64_t v32 = v25;
    if (*(char **)a1 != v7)
    {
      char v33 = v7;
      uint64_t v32 = v25;
      do
      {
        uint64_t v34 = *(void *)(v33 - 12);
        v33 -= 12;
        int v35 = *((_DWORD *)v33 + 2);
        *(void *)(v32 - 12) = v34;
        v32 -= 12;
        *((_DWORD *)v32 + 2) = v35;
      }
      while (v33 != v31);
      uint64_t v12 = *(unsigned char **)(a1 + 8);
    }
    uint64_t v36 = &v17[v30];
    if (v12 != v7) {
      memmove(v27, v7, v12 - v7);
    }
    long long v37 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v12 - v7];
    *(void *)(a1 + 16) = v36;
    if (v37) {
      operator delete(v37);
    }
    return v25;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - v7) >> 2)) >= a5)
  {
    int64_t v18 = &__src[12 * a5];
    uint64_t v20 = *(char **)(a1 + 8);
LABEL_18:
    unint64_t v21 = &v7[12 * a5];
    unint64_t v22 = (unint64_t)&v20[-12 * a5];
    uint64_t v23 = v20;
    if (v22 < (unint64_t)v12)
    {
      uint64_t v23 = v20;
      do
      {
        uint64_t v24 = *(void *)v22;
        *((_DWORD *)v23 + 2) = *(_DWORD *)(v22 + 8);
        *(void *)uint64_t v23 = v24;
        v23 += 12;
        v22 += 12;
      }
      while (v22 < (unint64_t)v12);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v7[12 * a5], v7, v20 - v21);
    }
    if (v18 != v9) {
      memmove(v7, v9, v18 - v9);
    }
    return v7;
  }
  int64_t v18 = &__src[4 * ((v12 - v7) >> 2)];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[4 * ((v12 - v7) >> 2)], a4 - v18);
  }
  uint64_t v20 = &v12[v19];
  *(void *)(a1 + 8) = &v12[v19];
  if (v12 - v7 >= 1) {
    goto LABEL_18;
  }
  return v7;
}

void std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F0C3408;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3408;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::operator()(uint64_t a1, uint64_t *a2, signed int *a3, void **a4, std::vector<int> **a5)
{
  uint64_t v5 = a1;
  uint64_t v6 = *a2;
  signed int v89 = *a3;
  signed int v7 = *a5;
  unint64_t v8 = *(uint64_t **)(a1 + 8);
  (*a4)[1] = **a4;
  unint64_t v88 = v7;
  v7->__end_ = v7->__begin_;
  unint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16);
  uint64_t v85 = v8;
  unint64_t v10 = 0;
  if ((int)(v9 >> 2) >= 1)
  {
    int v83 = v6;
    unsigned int v84 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = (v9 >> 2);
    unint64_t v81 = 0;
    uint64_t v82 = v12;
    while (1)
    {
      int v13 = *(_DWORD *)(**(void **)(v5 + 16) + 4 * v11);
      if ((v13 ^ v6) < 2) {
        goto LABEL_5;
      }
      uint64_t v6 = v5;
      long long __p = v10;
      int TrailIndexOfVarBefore = operations_research::sat::IntegerTrail::FindTrailIndexOfVarBefore(v8[9], v13, v89);
      int v15 = TrailIndexOfVarBefore;
      if ((TrailIndexOfVarBefore & 0x80000000) == 0) {
        break;
      }
      unint64_t v8 = v85;
      unint64_t v10 = __p;
LABEL_4:
      uint64_t v12 = v82;
      LODWORD(v6) = v83;
LABEL_5:
      if (++v11 == v12) {
        goto LABEL_63;
      }
    }
    unint64_t v16 = v88;
    std::vector<int>::pointer end = v88->__end_;
    value = v88->__end_cap_.__value_;
    if (end < value)
    {
      *std::vector<int>::pointer end = TrailIndexOfVarBefore;
      unint64_t v10 = __p;
      v88->__end_ = end + 1;
      if (*(uint64_t *)(v5 + 32) >= 1) {
        goto LABEL_10;
      }
LABEL_42:
      unint64_t v8 = v85;
      goto LABEL_4;
    }
    std::vector<int>::pointer begin = v88->__begin_;
    uint64_t v22 = (char *)end - (char *)v88->__begin_;
    uint64_t v23 = v22 >> 2;
    unint64_t v24 = (v22 >> 2) + 1;
    if (v24 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = (char *)value - (char *)begin;
    if (v25 >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      if (v26 >> 62) {
        goto LABEL_99;
      }
      uint64_t v27 = operator new(4 * v26);
      unint64_t v16 = v88;
      uint64_t v28 = (int *)&v27[4 * v23];
      *uint64_t v28 = v15;
      uint64_t v29 = (uint64_t)(v28 + 1);
      if (end != begin)
      {
LABEL_21:
        unint64_t v30 = (char *)(end - 1) - (char *)begin;
        if (v30 >= 0x2C)
        {
          unint64_t v36 = (char *)end - &v27[v22];
          uint64_t v5 = v6;
          if (v36 >= 0x20)
          {
            uint64_t v37 = (v30 >> 2) + 1;
            uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v39 = &end[v38 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v28 = (int *)((char *)v28 - v38);
            unint64_t v40 = &v27[4 * v23 - 16];
            uint64_t v41 = (long long *)(end - 4);
            uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v43 = *v41;
              *(v40 - 1) = *(v41 - 1);
              _OWORD *v40 = v43;
              v40 -= 2;
              v41 -= 2;
              v42 -= 8;
            }
            while (v42);
            std::vector<int>::pointer end = v39;
            if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_39:
              v16->__begin_ = v28;
              v16->__end_ = (std::vector<int>::pointer)v29;
              v16->__end_cap_.__value_ = (int *)&v27[4 * v26];
              if (begin) {
                operator delete(begin);
              }
              unint64_t v10 = __p;
              v16->__end_ = (std::vector<int>::pointer)v29;
              if (*(uint64_t *)(v5 + 32) >= 1)
              {
LABEL_10:
                uint64_t v19 = **(void **)(v5 + 24);
                if (v84 < v81)
                {
                  *(void *)unsigned int v84 = *(void *)(v19 + 8 * v11);
                  uint64_t v20 = v84 + 8;
                  unint64_t v8 = v85;
                  uint64_t v12 = v82;
                  LODWORD(v6) = v83;
LABEL_57:
                  unsigned int v84 = v20;
                  goto LABEL_5;
                }
                int64_t v31 = v84 - v10;
                uint64_t v32 = (v84 - v10) >> 3;
                unint64_t v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 61) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                if ((v81 - v10) >> 2 > v33) {
                  unint64_t v33 = (v81 - v10) >> 2;
                }
                if ((unint64_t)(v81 - v10) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v34 = v33;
                }
                if (v34)
                {
                  if (v34 >> 61) {
LABEL_99:
                  }
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  int v35 = operator new(8 * v34);
                  unint64_t v10 = __p;
                }
                else
                {
                  int v35 = 0;
                }
                unint64_t v45 = &v35[8 * v32];
                *(void *)unint64_t v45 = *(void *)(v19 + 8 * v11);
                uint64_t v20 = v45 + 8;
                if (v84 == v10)
                {
                  unint64_t v8 = v85;
                  uint64_t v5 = v6;
                  uint64_t v12 = v82;
                  LODWORD(v6) = v83;
                }
                else
                {
                  unint64_t v46 = v84 - 8 - v10;
                  uint64_t v5 = v6;
                  if (v46 < 0x168)
                  {
                    unint64_t v47 = v84;
                    goto LABEL_52;
                  }
                  if (&v35[v31 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] <= &v35[v31 - 8]
                    && &v84[-(v46 & 0xFFFFFFFFFFFFFFF8) - 8] <= v84 - 8
                    && (unint64_t)(v84 - &v35[v31]) >= 0x20)
                  {
                    uint64_t v49 = (v46 >> 3) + 1;
                    uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
                    unint64_t v47 = &v84[-v50];
                    v45 -= v50;
                    unint64_t v51 = &v35[8 * v32 - 16];
                    uint64_t v52 = v84 - 16;
                    uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v54 = *(_OWORD *)v52;
                      *(v51 - 1) = *((_OWORD *)v52 - 1);
                      *unint64_t v51 = v54;
                      v51 -= 2;
                      v52 -= 32;
                      v53 -= 4;
                    }
                    while (v53);
                    unint64_t v8 = v85;
                    uint64_t v12 = v82;
                    LODWORD(v6) = v83;
                    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_53;
                    }
                  }
                  else
                  {
                    unint64_t v47 = v84;
LABEL_52:
                    unint64_t v8 = v85;
                    uint64_t v12 = v82;
                    LODWORD(v6) = v83;
                    do
                    {
LABEL_53:
                      uint64_t v48 = *((void *)v47 - 1);
                      v47 -= 8;
                      *((void *)v45 - 1) = v48;
                      v45 -= 8;
                    }
                    while (v47 != v10);
                  }
                }
                unint64_t v81 = &v35[8 * v34];
                if (v10) {
                  operator delete(v10);
                }
                unint64_t v10 = v45;
                goto LABEL_57;
              }
              goto LABEL_42;
            }
          }
        }
        else
        {
          uint64_t v5 = v6;
        }
        do
        {
          int v44 = *--end;
          *--uint64_t v28 = v44;
        }
        while (end != begin);
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (int *)(4 * v23);
      *(_DWORD *)(4 * v23) = v15;
      uint64_t v29 = 4 * v23 + 4;
      if (end != begin) {
        goto LABEL_21;
      }
    }
    uint64_t v5 = v6;
    goto LABEL_39;
  }
  unsigned int v84 = 0;
LABEL_63:
  __pa = v10;
  uint64_t v55 = *(void *)(v5 + 32);
  if (v55 >= 1) {
    operations_research::sat::IntegerTrail::RelaxLinearReason((void *)v8[9], v55, (uint64_t)v10, (v84 - v10) >> 3, v88);
  }
  uint64_t v56 = (int *)v8[10];
  uint64_t v57 = (int *)v8[11];
  while (v56 != v57)
  {
    int v59 = operations_research::sat::IntegerTrail::FindTrailIndexOfVarBefore(v8[9], *v56, v89);
    int v60 = v59;
    if ((v59 & 0x80000000) == 0)
    {
      int v61 = v88;
      uint64_t v63 = (char *)v88->__end_;
      uint64_t v62 = v88->__end_cap_.__value_;
      if (v63 >= (char *)v62)
      {
        std::vector<int>::pointer v64 = v88->__begin_;
        uint64_t v65 = v63 - (char *)v88->__begin_;
        uint64_t v66 = v65 >> 2;
        unint64_t v67 = (v65 >> 2) + 1;
        if (v67 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v68 = (char *)v62 - (char *)v64;
        if (v68 >> 1 > v67) {
          unint64_t v67 = v68 >> 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v67;
        }
        if (v69)
        {
          if (v69 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v70 = operator new(4 * v69);
          unint64_t v71 = (int *)&v70[4 * v66];
          *unint64_t v71 = v60;
          uint64_t v58 = (uint64_t)(v71 + 1);
          if (v63 != (char *)v64)
          {
LABEL_81:
            unint64_t v72 = v63 - 4 - (char *)v64;
            if (v72 < 0x2C)
            {
              int v61 = v88;
              goto LABEL_89;
            }
            int v61 = v88;
            if ((unint64_t)(v63 - &v70[v65]) < 0x20) {
              goto LABEL_104;
            }
            uint64_t v73 = (v72 >> 2) + 1;
            uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v75 = &v63[-v74];
            unint64_t v71 = (int *)((char *)v71 - v74);
            BOOL v76 = &v70[4 * v66 - 16];
            uint64_t v77 = v63 - 16;
            uint64_t v78 = v73 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v79 = *(_OWORD *)v77;
              *(v76 - 1) = *((_OWORD *)v77 - 1);
              *BOOL v76 = v79;
              v76 -= 2;
              v77 -= 32;
              v78 -= 8;
            }
            while (v78);
            uint64_t v63 = v75;
            if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_104:
              do
              {
LABEL_89:
                int v80 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *--unint64_t v71 = v80;
              }
              while (v63 != (char *)v64);
            }
LABEL_90:
            v61->__begin_ = v71;
            v61->__end_ = (std::vector<int>::pointer)v58;
            v61->__end_cap_.__value_ = (int *)&v70[4 * v69];
            if (v64) {
              operator delete(v64);
            }
LABEL_67:
            v61->__end_ = (std::vector<int>::pointer)v58;
            unint64_t v8 = v85;
            goto LABEL_68;
          }
        }
        else
        {
          unsigned int v70 = 0;
          unint64_t v71 = (int *)(4 * v66);
          *(_DWORD *)(4 * v66) = v60;
          uint64_t v58 = 4 * v66 + 4;
          if (v63 != (char *)v64) {
            goto LABEL_81;
          }
        }
        int v61 = v88;
        goto LABEL_90;
      }
      *(_DWORD *)uint64_t v63 = v59;
      uint64_t v58 = (uint64_t)(v63 + 4);
      goto LABEL_67;
    }
LABEL_68:
    v56 += 3;
  }
  if (__pa)
  {
    operator delete(__pa);
  }
}

void sub_23CCFBCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16LinMinPropagator25PropagateLinearUpperBoundERKNSt3__16vectorIN3gtl7Int"
                     "TypeINS0_20IntegerVariable_tag_EiEENS2_9allocatorIS7_EEEERKNS3_INS5_INS0_17IntegerValue_tag_ExEENS8"
                     "_ISE_EEEESE_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16LinMinPropagator25PropagateLinearUpperBoundERKNSt3__16vecto"
                                "rIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_9allocatorIS7_EEEERKNS3_INS5_INS0_17In"
                                "tegerValue_tag_ExEENS8_ISE_EEEESE_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16LinMinPropagator25PropagateLinearUpperBoundERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_9allocatorIS7_EEEERKNS3_INS5_INS0_17IntegerValue_tag_ExEENS8_ISE_EEEESE_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16LinMinPropagator25PropagateLinearUpperBoundERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_9allocatorIS7_EEEERKNS3_INS5_INS0_17IntegerValue_tag_ExEENS8_ISE_EEEESE_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::target_type()
{
}

unint64_t operations_research::sat::GreaterOrEqualToMiddleValue(int a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2) + 40);
  uint64_t v5 = *(void *)(v4 + 12 * a1);
  uint64_t v15 = v5;
  uint64_t v6 = -*(void *)(v4 + 12 * (a1 ^ 1));
  uint64_t v14 = v6;
  if (v5 >= v6) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v15, (int)&v14, "var_lb < var_ub");
  }
  BOOL v7 = v6 < v5;
  uint64_t v8 = v6 - v5;
  if (v7) {
    ++v8;
  }
  uint64_t v9 = v8 >> 1;
  if (v9 <= 1) {
    uint64_t v9 = 1;
  }
  unint64_t v10 = (const char *)(v9 + v5);
  uint64_t v11 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a2);
  LODWORD(v13[0]) = a1;
  *(const char **)((char *)v13 + 4) = v10;
  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v11, v13[0], SHIDWORD(v10));
}

void sub_23CCFBE70(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

unint64_t operations_research::sat::SplitAroundGivenValue(unsigned int a1, int64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3) + 40);
  int64_t v7 = *(void *)(v6 + 12 * (int)a1);
  int64_t v8 = -*(void *)(v6 + 12 * (int)(a1 ^ 1));
  uint64_t v9 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>(a3);
  uint64_t v10 = 0;
  BOOL v11 = v8 <= a2 || v7 > a2;
  BOOL v12 = v8 >= a2 && v7 < a2;
  unint64_t v13 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)a1)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + (int)a1));
  unint64_t v14 = v9[9];
  unint64_t v15 = (v14 >> 12) ^ (v13 >> 7);
  uint64_t v16 = 0x101010101010101 * (v13 & 0x7F);
  uint64_t v17 = v9[12];
  while (1)
  {
    uint64_t v18 = v15 & v17;
    uint64_t v19 = *(void *)(v14 + v18);
    unint64_t v20 = ((v19 ^ v16) - 0x101010101010101) & ~(v19 ^ v16) & 0x8080808080808080;
    if (v20) {
      break;
    }
LABEL_11:
    if ((v19 & (~v19 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_17;
    }
    v10 += 8;
    unint64_t v15 = v10 + v18;
  }
  while (1)
  {
    unint64_t v21 = (v18 + (__clz(__rbit64(v20)) >> 3)) & v17;
    if (*(_DWORD *)(v9[10] + 4 * v21) == a1) {
      break;
    }
    v20 &= v20 - 1;
    if (!v20) {
      goto LABEL_11;
    }
  }
  char v22 = v21 == v17 || v11;
  if ((v22 & 1) == 0)
  {
    uint64_t v33 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
    operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
    unint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
    if (a2 >= (uint64_t)0x8000000000000002) {
      unint64_t v36 = -a2;
    }
    LODWORD(v41) = a1 ^ 1;
    HIDWORD(v41) = v36;
    unint64_t v34 = v41;
    unint64_t v35 = HIDWORD(v36);
LABEL_33:
    uint64_t v37 = (unsigned int *)v33;
    goto LABEL_37;
  }
LABEL_17:
  uint64_t v23 = 0;
  int v24 = a1 ^ 1;
  unint64_t v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v24)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v24));
  unint64_t v26 = (v14 >> 12) ^ (v25 >> 7);
  uint64_t v27 = 0x101010101010101 * (v25 & 0x7F);
  while (1)
  {
    uint64_t v28 = v26 & v17;
    uint64_t v29 = *(void *)(v14 + v28);
    unint64_t v30 = ((v29 ^ v27) - 0x101010101010101) & ~(v29 ^ v27) & 0x8080808080808080;
    if (v30) {
      break;
    }
LABEL_21:
    if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_27;
    }
    v23 += 8;
    unint64_t v26 = v23 + v28;
  }
  while (1)
  {
    unint64_t v31 = (v28 + (__clz(__rbit64(v30)) >> 3)) & v17;
    if (*(_DWORD *)(v9[10] + 4 * v31) == v24) {
      break;
    }
    v30 &= v30 - 1;
    if (!v30) {
      goto LABEL_21;
    }
  }
  if (v31 != v17 && v12)
  {
LABEL_29:
    uint64_t v33 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
    operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
    unint64_t v34 = (const char *)__PAIR64__(a2, a1);
    unint64_t v35 = HIDWORD(a2);
    goto LABEL_33;
  }
LABEL_27:
  if (!v11)
  {
    uint64_t v38 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
    operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
    unint64_t v39 = 0x7FFFFFFFFFFFFFFFLL;
    if (a2 >= (uint64_t)0x8000000000000002) {
      unint64_t v39 = -a2;
    }
    unint64_t v34 = (const char *)__PAIR64__(v39, v24);
    unint64_t v35 = HIDWORD(v39);
    uint64_t v37 = (unsigned int *)v38;
LABEL_37:
    return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v37, v34, v35);
  }
  if (v12) {
    goto LABEL_29;
  }
  return 0xFFFFFFFFLL;
}

unint64_t operations_research::sat::SplitAroundLpValue(int a1, uint64_t a2)
{
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a2);
  operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  uint64_t v5 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingDispatcher>(a2);
  uint64_t v6 = 0;
  signed int v7 = a1 & 0xFFFFFFFE;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  uint64_t v9 = *v5;
  uint64_t v10 = v5[1];
  unint64_t v11 = (v8 >> 7) ^ ((unint64_t)*v5 >> 12);
  uint64_t v12 = v5[3];
  uint64_t v13 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    uint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(v9 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_5:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      return 0xFFFFFFFFLL;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  while (1)
  {
    unint64_t v17 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v10 + 16 * v17) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_5;
    }
  }
  if (v17 == v12) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v18 = *(void *)(v10 + 16 * v17 + 8);
  if (!v18 || !*(unsigned char *)(v18 + 20316) || !*(unsigned char *)(v4 + 442) && !*(unsigned char *)(v18 + 20317)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v19 = a1 & 0xFFFFFFFE;
  int64_t v20 = llround(operations_research::sat::LinearProgrammingConstraint::GetSolutionValue(v18, v19));

  return operations_research::sat::SplitAroundGivenValue(v19, v20, a2);
}

unint64_t operations_research::sat::SplitUsingBestSolutionValueInRepository(int a1, absl::lts_2020_02_25 **a2, uint64_t a3)
{
  uint64_t v6 = a2 + 1;
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a2 + 1), (absl::lts_2020_02_25::Mutex *)a2);
  unint64_t v8 = a2[6];
  signed int v7 = a2[7];
  absl::lts_2020_02_25::Mutex::Unlock(v6, v9, v10, v11, v12, v13, v14, v15);
  if (!(-858993459 * ((unint64_t)(v7 - v8) >> 3))) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v17 = a3 + 32;
  uint64_t v18 = *(void **)(a3 + 32);
  do
  {
    unint64_t v19 = v18[4];
    BOOL v20 = v19 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
    if (v19 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d) {
      unint64_t v21 = v18;
    }
    else {
      unint64_t v21 = v18 + 1;
    }
    if (v20) {
      uint64_t v17 = (uint64_t)v18;
    }
    uint64_t v18 = (void *)*v21;
  }
  while (*v21);
  signed int v22 = a1 & 0xFFFFFFFE;
  uint64_t v23 = *(void *)(*(void *)(v17 + 40) + 96);
  if (v22 >= (unint64_t)((*(void *)(*(void *)(v17 + 40) + 104) - v23) >> 2)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v24 = *(unsigned int *)(v23 + 4 * v22);
  if ((v24 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (*operations_research::sat::SplitUsingBestSolutionValueInRepository(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedSolutionRepository<long long> const&,operations_research::sat::Model *)::vlocal__[0] >= 2
    && (operations_research::sat::SplitUsingBestSolutionValueInRepository(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedSolutionRepository<long long> const&,operations_research::sat::Model *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::SplitUsingBestSolutionValueInRepository(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedSolutionRepository<long long> const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v35, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 151);
    unint64_t v25 = (void *)google::LogMessage::stream((google::LogMessage *)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Using solution value for branching.", 35);
    google::LogMessage::~LogMessage((google::LogMessage *)v35);
  }
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v6, v16);
  int64_t v26 = *(void *)(*((void *)a2[6] + 1) + 8 * v24);
  absl::lts_2020_02_25::Mutex::Unlock(v6, v27, v28, v29, v30, v31, v32, v33);
  return operations_research::sat::SplitAroundGivenValue(v22, v26, a3);
}

void sub_23CCFC444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  unint64_t v8 = *(const void **)a1;
  int64_t v9 = *(void *)(a1 + 8) - *(void *)a1;
  if (v9)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(v9);
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    memcpy(v10, v8, v9);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  *(void *)&long long v16 = v6;
  *((void *)&v16 + 1) = v7;
  *(void *)(a3 + 24) = 0;
  uint64_t v12 = operator new(0x30uLL);
  *uint64_t v12 = &unk_26F0C3488;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = 0;
  uint64_t v13 = v11 - v10;
  if (v11 != v10)
  {
    if (v13 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v11 - v10);
    v12[1] = v14;
    uint64_t v15 = &v14[4 * (v13 >> 2)];
    v12[3] = v15;
    memcpy(v14, v10, v11 - v10);
    v12[2] = v15;
  }
  *((_OWORD *)v12 + 2) = v16;
  *(void *)(a3 + 24) = v12;
  if (v10)
  {
    operator delete(v10);
  }
}

void sub_23CCFC5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

double operations_research::sat::SequentialSearch@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v5, *a1, a1[1], (a1[1] - *a1) >> 5);
  *(void *)(a2 + 24) = 0;
  unint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v3 = &unk_26F0C3508;
  double result = *(double *)&v5;
  *(_OWORD *)(v3 + 8) = v5;
  *((void *)v3 + 3) = v6;
  *(void *)(a2 + 24) = v3;
  return result;
}

void sub_23CCFC69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::SequentialValueSelection@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
  uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  uint64_t v10 = (void *)a2[3];
  if (v10)
  {
    if (v10 == a2)
    {
      long long v16 = v15;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v15);
    }
    else
    {
      long long v16 = (void *)(*(uint64_t (**)(void *))(*v10 + 16))(v10);
    }
  }
  else
  {
    long long v16 = 0;
  }
  *(void *)&long long v17 = v8;
  *((void *)&v17 + 1) = v9;
  uint64_t v19 = 0;
  long long v18 = 0uLL;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>(&v18, *a1, a1[1], (a1[1] - *a1) >> 5);
  *(void *)(a4 + 24) = 0;
  uint64_t v11 = operator new(0x50uLL);
  uint64_t v12 = v11;
  *uint64_t v11 = &unk_26F0C3588;
  uint64_t v13 = v11 + 1;
  if (v16)
  {
    if (v16 == v15)
    {
      v11[4] = v13;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      v11[4] = v16;
      long long v16 = 0;
    }
  }
  else
  {
    v11[4] = 0;
  }
  *(_OWORD *)(v12 + 5) = v17;
  *(_OWORD *)(v12 + 7) = v18;
  v12[9] = v19;
  uint64_t v19 = 0;
  long long v18 = 0uLL;
  *(void *)(a4 + 24) = v12;
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *, void *))(v15[0] + 32))(v15, v13);
  }
  if (v16) {
    return (*(uint64_t (**)(void))(*v16 + 40))();
  }
  return result;
}

void sub_23CCFC8F0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CCFC90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCFC920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    unint64_t v3 = (void *)a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      long long v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v9 = (void *)a1[3];
  if (v9 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v9) {
      (*(void (**)(void *))(*v9 + 40))(v9);
    }
    return a1;
  }
}

unint64_t operations_research::sat::ChooseBestObjectiveValue(int a1, uint64_t a2)
{
  uint64_t v4 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>(a2);
  long long v5 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  uint64_t v7 = 0;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a1)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a1));
  unint64_t v9 = v4[9];
  unint64_t v10 = (v9 >> 12) ^ (v8 >> 7);
  uint64_t v11 = 0x101010101010101 * (v8 & 0x7F);
  uint64_t v12 = v4[12];
  while (1)
  {
    uint64_t v13 = v10 & v12;
    uint64_t v14 = *(void *)(v9 + v13);
    unint64_t v15 = ((v14 ^ v11) - 0x101010101010101) & ~(v14 ^ v11) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_5:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_8;
    }
    v7 += 8;
    unint64_t v10 = v7 + v13;
  }
  while (1)
  {
    unint64_t v16 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v12;
    if (*(_DWORD *)(v4[10] + 4 * v16) == a1) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_5;
    }
  }
  if (v16 != v12)
  {
    uint64_t v29 = *(void *)(v6 + 40);
    int64_t v30 = *(void *)(v29 + 12 * a1);
    if (v30 + *(void *)(v29 + 12 * (a1 ^ 1)))
    {
      if (v30 >= (uint64_t)0x8000000000000002) {
        uint64_t v28 = -v30;
      }
      else {
        uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
      }
      LODWORD(v32) = a1 ^ 1;
      goto LABEL_26;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_8:
  uint64_t v17 = 0;
  uint64_t v18 = a1 ^ 1;
  unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v18)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v18));
  unint64_t v20 = (v9 >> 12) ^ (v19 >> 7);
  uint64_t v21 = 0x101010101010101 * (v19 & 0x7F);
  while (1)
  {
    uint64_t v22 = v20 & v12;
    uint64_t v23 = *(void *)(v9 + v22);
    unint64_t v24 = ((v23 ^ v21) - 0x101010101010101) & ~(v23 ^ v21) & 0x8080808080808080;
    if (v24) {
      break;
    }
LABEL_12:
    if ((v23 & (~v23 << 6) & 0x8080808080808080) != 0) {
      return 0xFFFFFFFFLL;
    }
    v17 += 8;
    unint64_t v20 = v17 + v22;
  }
  while (1)
  {
    unint64_t v25 = (v22 + (__clz(__rbit64(v24)) >> 3)) & v12;
    if (*(_DWORD *)(v4[10] + 4 * v25) == v18) {
      break;
    }
    v24 &= v24 - 1;
    if (!v24) {
      goto LABEL_12;
    }
  }
  if (v25 == v12) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v26 = *(void *)(v6 + 40);
  int64_t v27 = *(void *)(v26 + 12 * (int)v18);
  if (!(v27 + *(void *)(v26 + 12 * a1))) {
    return 0xFFFFFFFFLL;
  }
  if (v27 >= (uint64_t)0x8000000000000002) {
    uint64_t v28 = -v27;
  }
  else {
    uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
  }
  LODWORD(v32) = a1;
LABEL_26:
  HIDWORD(v32) = v28;

  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v5, v32, SHIDWORD(v28));
}

void operations_research::sat::IntegerValueSelectionHeuristic(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v6 = (unsigned char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a2);
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  unint64_t v59 = 0;
  uint64_t v7 = (char **)operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintCollection>(a2);
  unint64_t v9 = *v7;
  unint64_t v8 = v7[1];
  if (*v7 != v8)
  {
    unint64_t v10 = v8 - v9 - 8;
    if (v10 >= 8)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = (v10 >> 3) + 1;
      uint64_t v12 = &v9[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v17 = v9 + 8;
      uint64_t v18 = v16 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v14 += (*(void *)(*(v17 - 1) + 19928) - *(void *)(*(v17 - 1) + 19920)) >> 2;
        v15 += (*(void *)(*v17 + 19928) - *(void *)(*v17 + 19920)) >> 2;
        v17 += 2;
        v18 -= 2;
      }
      while (v18);
      int v11 = v15 + v14;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_9;
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = *v7;
    }
    do
    {
      uint64_t v19 = *(void *)v12;
      v12 += 8;
      v11 += (*(void *)(v19 + 19928) - *(void *)(v19 + 19920)) >> 2;
    }
    while (v12 != v8);
LABEL_9:
    int v13 = 2 * v11;
    goto LABEL_10;
  }
  int v13 = 0;
LABEL_10:
  uint64_t v20 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  if (v13 >= (int)(-1431655765 * ((*(void *)(v20 + 48) - *(void *)(v20 + 40)) >> 2)) / 2 && (v6[441] || v6[442]))
  {
    if (*_MergedGlobals_12[0] >= 1
      && (_MergedGlobals_12[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_12, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 267);
      uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Using LP value selection heuristic.", 35);
      google::LogMessage::~LogMessage((google::LogMessage *)&v62);
    }
    uint64_t v62 = (void (**)(void **))&unk_26F0C3608;
    uint64_t v63 = a2;
    uint64_t v65 = (void **)&v62;
    unint64_t v58 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)&v57, &v62);
    if (v65 == (void **)&v62)
    {
      v62[4]((void **)&v62);
      if (!v6[145]) {
        goto LABEL_45;
      }
      goto LABEL_21;
    }
    if (v65) {
      (*((void (**)(void))*v65 + 5))();
    }
  }
  if (!v6[145]) {
    goto LABEL_45;
  }
LABEL_21:
  uint64_t v22 = *(void **)(a2 + 32);
  if (v22)
  {
    uint64_t v23 = a2 + 32;
    do
    {
      unint64_t v24 = v22[4];
      BOOL v25 = v24 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d;
      if (v24 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d) {
        uint64_t v26 = v22;
      }
      else {
        uint64_t v26 = v22 + 1;
      }
      if (v25) {
        uint64_t v23 = (uint64_t)v22;
      }
      uint64_t v22 = (void *)*v26;
    }
    while (*v26);
    if (v23 != a2 + 32
      && *(void *)(v23 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
    {
      uint64_t v27 = *(void *)(v23 + 40);
      if (v27)
      {
        if (*off_26AED0000[0] >= 1
          && (off_26AED0000[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AED0000, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 277);
          uint64_t v28 = (void *)google::LogMessage::stream((google::LogMessage *)&v62);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Using best solution value selection heuristic.", 46);
          google::LogMessage::~LogMessage((google::LogMessage *)&v62);
        }
        uint64_t v62 = (void (**)(void **))&unk_26F0C3698;
        uint64_t v63 = a2;
        uint64_t v64 = v27;
        uint64_t v65 = (void **)&v62;
        unint64_t v29 = v58;
        if (v58 >= v59)
        {
          uint64_t v30 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)&v57, &v62);
        }
        else
        {
          *(void *)(v58 + 24) = v58;
          (*((void (**)(void **, unint64_t))*v65 + 3))(v65, v29);
          uint64_t v30 = v29 + 32;
        }
        unint64_t v58 = v30;
        if (v65 == (void **)&v62)
        {
          v62[4]((void **)&v62);
          if (!v6[146]) {
            goto LABEL_66;
          }
          goto LABEL_46;
        }
        if (v65) {
          (*((void (**)(void))*v65 + 5))();
        }
      }
    }
  }
LABEL_45:
  if (!v6[146]) {
    goto LABEL_66;
  }
LABEL_46:
  uint64_t v31 = *(void **)(a2 + 32);
  if (v31)
  {
    uint64_t v32 = a2 + 32;
    do
    {
      unint64_t v33 = v31[4];
      BOOL v34 = v33 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d;
      if (v33 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d) {
        unint64_t v35 = v31;
      }
      else {
        unint64_t v35 = v31 + 1;
      }
      if (v34) {
        uint64_t v32 = (uint64_t)v31;
      }
      uint64_t v31 = (void *)*v35;
    }
    while (*v35);
    if (v32 != a2 + 32
      && *(void *)(v32 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
    {
      uint64_t v36 = *(void *)(v32 + 40);
      if (v36)
      {
        uint64_t v62 = (void (**)(void **))&unk_26F0C3718;
        uint64_t v63 = a2;
        uint64_t v64 = v36;
        uint64_t v65 = (void **)&v62;
        unint64_t v37 = v58;
        if (v58 >= v59)
        {
          uint64_t v38 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)&v57, &v62);
        }
        else
        {
          *(void *)(v58 + 24) = v58;
          (*((void (**)(void **, unint64_t))*v65 + 3))(v65, v37);
          uint64_t v38 = v37 + 32;
        }
        unint64_t v58 = v38;
        if (v65 == (void **)&v62)
        {
          v62[4]((void **)&v62);
        }
        else if (v65)
        {
          (*((void (**)(void))*v65 + 5))();
        }
      }
    }
  }
LABEL_66:
  if (v6[443])
  {
    if (*off_26AED0008[0] >= 1
      && (off_26AED0008[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AED0008, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v62, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 302);
      unint64_t v39 = (void *)google::LogMessage::stream((google::LogMessage *)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Using objective value selection heuristic.", 42);
      google::LogMessage::~LogMessage((google::LogMessage *)&v62);
    }
    uint64_t v62 = (void (**)(void **))&unk_26F0C3798;
    uint64_t v63 = a2;
    uint64_t v65 = (void **)&v62;
    unint64_t v40 = v58;
    if (v58 >= v59)
    {
      uint64_t v41 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)&v57, &v62);
    }
    else
    {
      *(void *)(v58 + 24) = v58;
      (*((void (**)(void **, unint64_t))*v65 + 3))(v65, v40);
      uint64_t v41 = v40 + 32;
    }
    unint64_t v58 = v41;
    if (v65 == (void **)&v62)
    {
      v62[4]((void **)&v62);
    }
    else if (v65)
    {
      (*((void (**)(void))*v65 + 5))();
    }
  }
  long long __p = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>(&__p, (uint64_t)v57, v58, (uint64_t)(v58 - (void)v57) >> 5);
  uint64_t v42 = a1[3];
  if (!v42) {
    goto LABEL_81;
  }
  if ((void *)v42 != a1)
  {
    uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 16))(v42);
LABEL_81:
    int v61 = (void *)v42;
    goto LABEL_83;
  }
  int v61 = v60;
  (*(void (**)(void *, void *))(*a1 + 24))(a1, v60);
LABEL_83:
  operations_research::sat::SequentialValueSelection((uint64_t *)&__p, v60, a2, a3);
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
    long long v43 = (char *)__p;
    if (__p) {
      goto LABEL_87;
    }
LABEL_98:
    uint64_t v49 = v57;
    if (!v57) {
      return;
    }
    goto LABEL_99;
  }
  if (v61) {
    (*(void (**)(void))(*v61 + 40))();
  }
  long long v43 = (char *)__p;
  if (!__p) {
    goto LABEL_98;
  }
LABEL_87:
  int v44 = v43;
  if (v55 != v43)
  {
    unint64_t v45 = v55 - 32;
    unint64_t v46 = v55 - 32;
    do
    {
      uint64_t v48 = (char *)*((void *)v46 + 3);
      if (v46 == v48)
      {
        (*(void (**)(char *))(*(void *)v46 + 32))(v46);
      }
      else if (v48)
      {
        (*(void (**)(char *))(*(void *)v48 + 40))(v48);
      }
      v45 -= 32;
      BOOL v47 = v46 == v43;
      v46 -= 32;
    }
    while (!v47);
    int v44 = __p;
  }
  uint64_t v55 = v43;
  operator delete(v44);
  uint64_t v49 = v57;
  if (v57)
  {
LABEL_99:
    uint64_t v50 = v49;
    if ((void *)v58 != v49)
    {
      unint64_t v51 = v58 - 32;
      uint64_t v52 = (void *)(v58 - 32);
      do
      {
        uint64_t v53 = (void *)v52[3];
        if (v52 == v53)
        {
          (*(void (**)(void *))(*v52 + 32))(v52);
        }
        else if (v53)
        {
          (*(void (**)(void *))(*v53 + 40))(v53);
        }
        v51 -= 32;
        BOOL v47 = v52 == v49;
        v52 -= 4;
      }
      while (!v47);
      uint64_t v50 = v57;
    }
    unint64_t v58 = (unint64_t)v49;
    operator delete(v50);
  }
}

void sub_23CCFD674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::~vector[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::~vector[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      long long v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        unint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatDecisionPolicy>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatDecisionPolicy>(void)::d) {
      long long v5 = v1;
    }
    else {
      long long v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    unint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::SatDecisionPolicy>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CCFDA0C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F0C40550D4C41);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::PseudoCosts>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PseudoCosts>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PseudoCosts>(void)::d) {
      long long v5 = v1;
    }
    else {
      long long v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::PseudoCosts>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CCFDBCC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1060C405E3B83C8);
  _Unwind_Resume(a1);
}

void *operations_research::sat::RandomizeOnRestartHeuristic@<X0>(operations_research::sat *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v211 = *MEMORY[0x263EF8340];
  uint64_t v176 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
  uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
  unint64_t v9 = operator new(0x20uLL);
  *unint64_t v9 = &unk_26F0C3850;
  v9[1] = v6;
  v9[2] = v7;
  v9[3] = v8;
  v210 = v9;
  unint64_t v10 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v10 = &unk_26F0C3850;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(v9 + 1);
  *((void *)v10 + 3) = v9[3];
  v206 = (void **)v10;
  uint64_t v12 = (char *)this + 32;
  int v11 = (void *)*((void *)this + 4);
  if (!v11) {
    goto LABEL_17;
  }
  int v13 = (char *)this + 32;
  do
  {
    unint64_t v14 = v11[4];
    BOOL v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
    if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = v11 + 1;
    }
    if (v15) {
      int v13 = (char *)v11;
    }
    int v11 = (void *)*v16;
  }
  while (*v16);
  if (v13 == v12
    || *((void *)v13 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d
    || (uint64_t v17 = *((void *)v13 + 5)) == 0
    || *(_DWORD *)(v17 + 16) == -1)
  {
LABEL_17:
    v197 = (double *)&unk_26F0C38D0;
    v200 = &v197;
  }
  else
  {
    v197 = (double *)&unk_26F0C3988;
    v198 = (double *)operations_research::sat::Model::GetOrCreate<operations_research::sat::PseudoCosts>((uint64_t)this);
    unint64_t v9 = v210;
    v199 = this;
    v200 = &v197;
    if (!v210)
    {
      uint64_t v18 = 0;
      goto LABEL_19;
    }
    if (v210 == v209)
    {
      v202 = v201;
      (*(void (**)(void *, void *))(v209[0] + 24))(v209, v201);
      goto LABEL_20;
    }
  }
  uint64_t v18 = (*(uint64_t (**)(void *))(*v9 + 16))(v9);
LABEL_19:
  v202 = (void *)v18;
LABEL_20:
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&__p, (uint64_t)&v197, 2uLL);
  v195[0] = 0;
  v195[1] = 0;
  v196 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(v195, (uint64_t)__p, (uint64_t)v192, (v192 - (unsigned char *)__p) >> 5);
  v208 = 0;
  uint64_t v19 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v19 = &unk_26F0C3508;
  *(_OWORD *)(v19 + 8) = *(_OWORD *)v195;
  *((void *)v19 + 3) = v196;
  v208 = v19;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v193, (uint64_t)&v203, 2uLL);
  if (v208 == v207)
  {
    (*(void (**)(void *))(v207[0] + 32))(v207);
    uint64_t v20 = v206;
    if (v206 != (void **)&v203) {
      goto LABEL_24;
    }
LABEL_39:
    (*((void (**)(operations_research::sat **))v203 + 4))(&v203);
    uint64_t v21 = __p;
    if (__p) {
      goto LABEL_27;
    }
LABEL_40:
    uint64_t v27 = v202;
    if (v202 == v201) {
      goto LABEL_36;
    }
LABEL_41:
    if (v27) {
      (*(void (**)(void *))(*v27 + 40))(v27);
    }
    uint64_t v28 = v200;
    if (v200 == &v197) {
      goto LABEL_37;
    }
    goto LABEL_44;
  }
  if (v208) {
    (*(void (**)(void))(*v208 + 40))();
  }
  uint64_t v20 = v206;
  if (v206 == (void **)&v203) {
    goto LABEL_39;
  }
LABEL_24:
  if (v20) {
    (*((void (**)(void **))*v20 + 5))(v20);
  }
  uint64_t v21 = __p;
  if (!__p) {
    goto LABEL_40;
  }
LABEL_27:
  uint64_t v22 = v21;
  if (v192 != (unsigned char *)v21)
  {
    uint64_t v23 = v192 - 32;
    unint64_t v24 = v192 - 32;
    do
    {
      uint64_t v26 = (void *)v24[3];
      if (v24 == v26)
      {
        (*(void (**)(void *))(*v24 + 32))(v24);
      }
      else if (v26)
      {
        (*(void (**)(void *))(*v26 + 40))(v26);
      }
      v23 -= 32;
      BOOL v25 = v24 == v21;
      v24 -= 4;
    }
    while (!v25);
    uint64_t v22 = __p;
  }
  v192 = v21;
  operator delete(v22);
  uint64_t v27 = v202;
  if (v202 != v201) {
    goto LABEL_41;
  }
LABEL_36:
  (*(void (**)(void *))(v201[0] + 32))(v201);
  uint64_t v28 = v200;
  if (v200 == &v197)
  {
LABEL_37:
    (*((void (**)(double **))v197 + 4))(&v197);
    goto LABEL_46;
  }
LABEL_44:
  if (v28) {
    (*((void (**)(double **))*v28 + 5))(v28);
  }
LABEL_46:
  unint64_t v29 = (double *)operator new(0x10uLL);
  v197 = v29;
  *(_OWORD *)unint64_t v29 = xmmword_23CE8B6E0;
  v198 = v29 + 2;
  v199 = (operations_research::sat *)(v29 + 2);
  std::discrete_distribution<int>::param_type::__init(&v197);
  v195[0] = 0;
  v195[1] = 0;
  v196 = 0;
  v188 = 0;
  v189 = 0;
  v190 = 0;
  v203 = (operations_research::sat *)&unk_26F0C3A08;
  v204 = this;
  v206 = (void **)&v203;
  v195[1] = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v195, &v203);
  if (v206 == (void **)&v203)
  {
    (*((void (**)(operations_research::sat **))v203 + 4))(&v203);
    uint64_t v31 = v189;
    uint64_t v30 = v190;
  }
  else
  {
    if (v206) {
      (*((void (**)(void))*v206 + 5))();
    }
    uint64_t v31 = v189;
    uint64_t v30 = v190;
  }
  uint64_t v32 = (v31 - (unsigned char *)v188) >> 2;
  unint64_t v33 = v32 + 1;
  if ((unint64_t)(v32 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = v30 - (unsigned char *)v188;
  if (v34 >> 1 > v33) {
    unint64_t v33 = v34 >> 1;
  }
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v35)
  {
    if (v35 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v36 = (char *)operator new(4 * v35);
  }
  else
  {
    uint64_t v36 = 0;
  }
  unint64_t v37 = &v36[4 * v32];
  *(_DWORD *)unint64_t v37 = 8;
  v188 = v37;
  v190 = &v36[4 * v35];
  v189 = v37 + 4;
  uint64_t v38 = *(void **)v12;
  if (!*(void *)v12) {
    goto LABEL_144;
  }
  unint64_t v39 = (char *)this + 32;
  unint64_t v40 = *(void **)v12;
  do
  {
    unint64_t v41 = v40[4];
    BOOL v42 = v41 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d;
    if (v41 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d) {
      long long v43 = v40;
    }
    else {
      long long v43 = v40 + 1;
    }
    if (v42) {
      unint64_t v39 = (char *)v40;
    }
    unint64_t v40 = (void *)*v43;
  }
  while (*v43);
  if (v39 != v12
    && *((void *)v39 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
  {
    uint64_t v44 = *((void *)v39 + 5);
    if (v44)
    {
      v203 = (operations_research::sat *)&unk_26F0C3A88;
      v204 = this;
      uint64_t v205 = v44;
      v206 = (void **)&v203;
      unint64_t v45 = (char *)v195[1];
      if (v195[1] >= v196)
      {
        unint64_t v46 = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v195, &v203);
      }
      else
      {
        *((void **)v195[1] + 3) = v195[1];
        (*((void (**)(void **, char *))*v206 + 3))(v206, v45);
        unint64_t v46 = v45 + 32;
      }
      v195[1] = v46;
      if (v206 == (void **)&v203)
      {
        (*((void (**)(operations_research::sat **))v203 + 4))(&v203);
        uint64_t v48 = v189;
        BOOL v47 = v190;
        if (v189 < v190)
        {
LABEL_80:
          *(_DWORD *)uint64_t v48 = 5;
          uint64_t v49 = v48 + 4;
LABEL_102:
          v189 = v49;
          uint64_t v38 = *(void **)v12;
          goto LABEL_103;
        }
      }
      else
      {
        if (v206) {
          (*((void (**)(void))*v206 + 5))();
        }
        uint64_t v48 = v189;
        BOOL v47 = v190;
        if (v189 < v190) {
          goto LABEL_80;
        }
      }
      uint64_t v50 = (char *)v188;
      int64_t v51 = v48 - (unsigned char *)v188;
      uint64_t v52 = (v48 - (unsigned char *)v188) >> 2;
      unint64_t v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v54 = v47 - (unsigned char *)v188;
      if (v54 >> 1 > v53) {
        unint64_t v53 = v54 >> 1;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        if (v55 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v56 = operator new(4 * v55);
      }
      else
      {
        uint64_t v56 = 0;
      }
      uint64_t v57 = &v56[4 * v52];
      *(_DWORD *)uint64_t v57 = 5;
      uint64_t v49 = v57 + 4;
      if (v48 != v50)
      {
        unint64_t v58 = v48 - v50 - 4;
        if (v58 < 0x2C) {
          goto LABEL_276;
        }
        if ((unint64_t)(v48 - v56 - v51) < 0x20) {
          goto LABEL_276;
        }
        uint64_t v59 = (v58 >> 2) + 1;
        uint64_t v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
        int v61 = &v48[-v60];
        v57 -= v60;
        uint64_t v62 = &v56[4 * v52 - 16];
        uint64_t v63 = v48 - 16;
        uint64_t v64 = v59 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v65 = *(_OWORD *)v63;
          *(v62 - 1) = *((_OWORD *)v63 - 1);
          *uint64_t v62 = v65;
          v62 -= 2;
          v63 -= 32;
          v64 -= 8;
        }
        while (v64);
        uint64_t v48 = v61;
        if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_276:
          do
          {
            int v66 = *((_DWORD *)v48 - 1);
            v48 -= 4;
            *((_DWORD *)v57 - 1) = v66;
            v57 -= 4;
          }
          while (v48 != v50);
        }
      }
      v188 = v57;
      v189 = v49;
      v190 = &v56[4 * v55];
      if (v50) {
        operator delete(v50);
      }
      goto LABEL_102;
    }
  }
LABEL_103:
  if (v38)
  {
    unint64_t v67 = (char *)this + 32;
    do
    {
      unint64_t v68 = v38[4];
      BOOL v69 = v68 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d;
      if (v68 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d) {
        unsigned int v70 = v38;
      }
      else {
        unsigned int v70 = v38 + 1;
      }
      if (v69) {
        unint64_t v67 = (char *)v38;
      }
      uint64_t v38 = (void *)*v70;
    }
    while (*v70);
    if (v67 != v12
      && *((void *)v67 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
    {
      uint64_t v71 = *((void *)v67 + 5);
      if (v71)
      {
        v203 = (operations_research::sat *)&unk_26F0C3B08;
        v204 = this;
        uint64_t v205 = v71;
        v206 = (void **)&v203;
        unint64_t v72 = (char *)v195[1];
        if (v195[1] >= v196)
        {
          uint64_t v73 = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v195, &v203);
        }
        else
        {
          *((void **)v195[1] + 3) = v195[1];
          (*((void (**)(void **, char *))*v206 + 3))(v206, v72);
          uint64_t v73 = v72 + 32;
        }
        v195[1] = v73;
        if (v206 == (void **)&v203)
        {
          (*((void (**)(operations_research::sat **))v203 + 4))(&v203);
          uint64_t v75 = v189;
          uint64_t v74 = v190;
          if (v189 < v190)
          {
LABEL_122:
            *(_DWORD *)uint64_t v75 = 3;
            BOOL v76 = v75 + 4;
LABEL_143:
            v189 = v76;
            goto LABEL_144;
          }
        }
        else
        {
          if (v206) {
            (*((void (**)(void))*v206 + 5))();
          }
          uint64_t v75 = v189;
          uint64_t v74 = v190;
          if (v189 < v190) {
            goto LABEL_122;
          }
        }
        uint64_t v77 = (char *)v188;
        int64_t v78 = v75 - (unsigned char *)v188;
        uint64_t v79 = (v75 - (unsigned char *)v188) >> 2;
        unint64_t v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v81 = v74 - (unsigned char *)v188;
        if (v81 >> 1 > v80) {
          unint64_t v80 = v81 >> 1;
        }
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v82 = v80;
        }
        if (v82)
        {
          if (v82 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v83 = operator new(4 * v82);
        }
        else
        {
          int v83 = 0;
        }
        unsigned int v84 = &v83[4 * v79];
        *(_DWORD *)unsigned int v84 = 3;
        BOOL v76 = v84 + 4;
        if (v75 != v77)
        {
          unint64_t v85 = v75 - v77 - 4;
          if (v85 < 0x2C) {
            goto LABEL_277;
          }
          if ((unint64_t)(v75 - v83 - v78) < 0x20) {
            goto LABEL_277;
          }
          uint64_t v86 = (v85 >> 2) + 1;
          uint64_t v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v88 = &v75[-v87];
          v84 -= v87;
          signed int v89 = &v83[4 * v79 - 16];
          v90 = v75 - 16;
          uint64_t v91 = v86 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v92 = *(_OWORD *)v90;
            *(v89 - 1) = *((_OWORD *)v90 - 1);
            _OWORD *v89 = v92;
            v89 -= 2;
            v90 -= 32;
            v91 -= 8;
          }
          while (v91);
          uint64_t v75 = v88;
          if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_277:
            do
            {
              int v93 = *((_DWORD *)v75 - 1);
              v75 -= 4;
              *((_DWORD *)v84 - 1) = v93;
              v84 -= 4;
            }
            while (v75 != v77);
          }
        }
        v188 = v84;
        v189 = v76;
        v190 = &v83[4 * v82];
        if (v77) {
          operator delete(v77);
        }
        goto LABEL_143;
      }
    }
  }
LABEL_144:
  v203 = (operations_research::sat *)&unk_26F0C3B88;
  v204 = this;
  v206 = (void **)&v203;
  uint64_t v94 = (char *)v195[1];
  if (v195[1] >= v196)
  {
    long long v95 = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v195, &v203);
  }
  else
  {
    *((void **)v195[1] + 3) = v195[1];
    (*((void (**)(void **, char *))*v206 + 3))(v206, v94);
    long long v95 = v94 + 32;
  }
  v195[1] = v95;
  if (v206 == (void **)&v203)
  {
    (*((void (**)(operations_research::sat **))v203 + 4))(&v203);
    uint64_t v97 = v189;
    uint64_t v96 = v190;
    if (v189 < v190)
    {
LABEL_151:
      *(_DWORD *)uint64_t v97 = 1;
      unint64_t v98 = v97 + 4;
      goto LABEL_172;
    }
  }
  else
  {
    if (v206) {
      (*((void (**)(void))*v206 + 5))();
    }
    uint64_t v97 = v189;
    uint64_t v96 = v190;
    if (v189 < v190) {
      goto LABEL_151;
    }
  }
  uint64_t v99 = (char *)v188;
  int64_t v100 = v97 - (unsigned char *)v188;
  uint64_t v101 = (v97 - (unsigned char *)v188) >> 2;
  unint64_t v102 = v101 + 1;
  if ((unint64_t)(v101 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v103 = v96 - (unsigned char *)v188;
  if (v103 >> 1 > v102) {
    unint64_t v102 = v103 >> 1;
  }
  if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v104 = v102;
  }
  if (v104)
  {
    if (v104 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v105 = operator new(4 * v104);
  }
  else
  {
    uint64_t v105 = 0;
  }
  v106 = &v105[4 * v101];
  uint64_t v107 = &v105[4 * v104];
  *(_DWORD *)v106 = 1;
  unint64_t v98 = v106 + 4;
  if (v97 != v99)
  {
    unint64_t v108 = v97 - v99 - 4;
    if (v108 < 0x2C) {
      goto LABEL_278;
    }
    if ((unint64_t)(v97 - &v105[v100]) < 0x20) {
      goto LABEL_278;
    }
    uint64_t v109 = (v108 >> 2) + 1;
    uint64_t v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v111 = &v97[-v110];
    v106 -= v110;
    v112 = &v105[4 * v101 - 16];
    uint64_t v113 = v97 - 16;
    uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v115 = *(_OWORD *)v113;
      *(v112 - 1) = *((_OWORD *)v113 - 1);
      _OWORD *v112 = v115;
      v112 -= 2;
      v113 -= 32;
      v114 -= 8;
    }
    while (v114);
    uint64_t v97 = v111;
    if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_278:
      do
      {
        int v116 = *((_DWORD *)v97 - 1);
        v97 -= 4;
        *((_DWORD *)v106 - 1) = v116;
        v106 -= 4;
      }
      while (v97 != v99);
    }
  }
  v188 = v106;
  v189 = v98;
  v190 = v107;
  if (v99) {
    operator delete(v99);
  }
LABEL_172:
  v189 = v98;
  uint64_t v117 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)this);
  uint64_t v118 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)this);
  v203 = (operations_research::sat *)&unk_26F0C3C08;
  v204 = (operations_research::sat *)v117;
  uint64_t v205 = v118;
  v206 = (void **)&v203;
  unint64_t v119 = (char *)v195[1];
  if (v195[1] >= v196)
  {
    v120 = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v195, &v203);
  }
  else
  {
    *((void **)v195[1] + 3) = v195[1];
    (*((void (**)(void **, char *))*v206 + 3))(v206, v119);
    v120 = v119 + 32;
  }
  v195[1] = v120;
  if (v206 == (void **)&v203)
  {
    (*((void (**)(operations_research::sat **))v203 + 4))(&v203);
    v122 = v189;
    uint64_t v121 = (int *)v190;
    if (v189 < v190)
    {
LABEL_179:
      *(_DWORD *)v122 = 1;
      v123 = (int *)(v122 + 4);
      goto LABEL_200;
    }
  }
  else
  {
    if (v206) {
      (*((void (**)(void))*v206 + 5))();
    }
    v122 = v189;
    uint64_t v121 = (int *)v190;
    if (v189 < v190) {
      goto LABEL_179;
    }
  }
  v124 = v188;
  int64_t v125 = v122 - (unsigned char *)v188;
  uint64_t v126 = (v122 - (unsigned char *)v188) >> 2;
  unint64_t v127 = v126 + 1;
  if ((unint64_t)(v126 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v128 = (char *)v121 - (unsigned char *)v188;
  if (v128 >> 1 > v127) {
    unint64_t v127 = v128 >> 1;
  }
  if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v129 = v127;
  }
  if (v129)
  {
    if (v129 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v130 = operator new(4 * v129);
  }
  else
  {
    v130 = 0;
  }
  v131 = (int *)&v130[4 * v126];
  uint64_t v121 = (int *)&v130[4 * v129];
  int *v131 = 1;
  v123 = v131 + 1;
  if (v122 != v124)
  {
    unint64_t v132 = v122 - v124 - 4;
    if (v132 < 0x2C) {
      goto LABEL_279;
    }
    if ((unint64_t)(v122 - &v130[v125]) < 0x20) {
      goto LABEL_279;
    }
    uint64_t v133 = (v132 >> 2) + 1;
    uint64_t v134 = 4 * (v133 & 0x7FFFFFFFFFFFFFF8);
    v135 = &v122[-v134];
    v131 = (int *)((char *)v131 - v134);
    v136 = &v130[4 * v126 - 16];
    v137 = (long long *)(v122 - 16);
    uint64_t v138 = v133 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v139 = *v137;
      *(v136 - 1) = *(v137 - 1);
      _OWORD *v136 = v139;
      v136 -= 2;
      v137 -= 2;
      v138 -= 8;
    }
    while (v138);
    v122 = v135;
    if (v133 != (v133 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_279:
      do
      {
        int v140 = *((_DWORD *)v122 - 1);
        v122 -= 4;
        *--v131 = v140;
      }
      while (v122 != v124);
    }
  }
  v188 = v131;
  v189 = (char *)v123;
  v190 = (char *)v121;
  if (v124)
  {
    operator delete(v124);
    uint64_t v121 = (int *)v190;
  }
LABEL_200:
  v189 = (char *)v123;
  if (v123 < v121)
  {
    int *v123 = 10;
    v141 = v123 + 1;
    goto LABEL_223;
  }
  v142 = (int *)v188;
  int64_t v143 = (char *)v123 - (unsigned char *)v188;
  uint64_t v144 = ((char *)v123 - (unsigned char *)v188) >> 2;
  unint64_t v145 = v144 + 1;
  if ((unint64_t)(v144 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v146 = (char *)v121 - (unsigned char *)v188;
  if (v146 >> 1 > v145) {
    unint64_t v145 = v146 >> 1;
  }
  if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v147 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v147 = v145;
  }
  if (v147)
  {
    if (v147 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v148 = operator new(4 * v147);
  }
  else
  {
    v148 = 0;
  }
  v149 = (int *)&v148[4 * v144];
  v150 = &v148[4 * v147];
  int *v149 = 10;
  v141 = v149 + 1;
  if (v123 != v142)
  {
    unint64_t v151 = (char *)v123 - (char *)v142 - 4;
    if (v151 < 0x2C)
    {
      v152 = v123;
      goto LABEL_220;
    }
    if ((unint64_t)((char *)v123 - v148 - v143) < 0x20)
    {
      v152 = v123;
      do
      {
LABEL_220:
        int v159 = *--v152;
        *--v149 = v159;
      }
      while (v152 != v142);
      goto LABEL_221;
    }
    uint64_t v153 = (v151 >> 2) + 1;
    uint64_t v154 = 4 * (v153 & 0x7FFFFFFFFFFFFFF8);
    v152 = &v123[v154 / 0xFFFFFFFFFFFFFFFCLL];
    v149 = (int *)((char *)v149 - v154);
    v155 = &v148[4 * v144 - 16];
    v156 = v123 - 4;
    uint64_t v157 = v153 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v158 = *(_OWORD *)v156;
      *(v155 - 1) = *((_OWORD *)v156 - 1);
      _OWORD *v155 = v158;
      v155 -= 2;
      v156 -= 8;
      v157 -= 8;
    }
    while (v157);
    if (v153 != (v153 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_220;
    }
  }
LABEL_221:
  v188 = v149;
  v189 = (char *)v141;
  v190 = v150;
  if (v142) {
    operator delete(v142);
  }
LABEL_223:
  v189 = (char *)v141;
  std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<int *>>((uint64_t)&v203, (int *)v188, v141);
  *(void *)v177 = v176;
  *(void *)&v177[8] = this;
  *(void *)&v177[16] = v5;
  *(_DWORD *)&v177[24] = 0;
  uint64_t v179 = 0;
  long long v178 = 0uLL;
  v160 = v197;
  int64_t v161 = (char *)v198 - (char *)v197;
  if (v198 != v197)
  {
    if (v161 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    *(void *)&long long v178 = operator new((char *)v198 - (char *)v197);
    uint64_t v179 = v178 + 8 * (v161 >> 3);
    memcpy((void *)v178, v160, v161);
    *((void *)&v178 + 1) = v179;
  }
  int v180 = 0;
  uint64_t v182 = 0;
  long long v181 = 0uLL;
  v162 = v203;
  int64_t v163 = v204 - v203;
  if (v204 != v203)
  {
    if (v163 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    *(void *)&long long v181 = operator new(v204 - v203);
    uint64_t v182 = v181 + 8 * (v163 >> 3);
    memcpy((void *)v181, v162, v163);
    *((void *)&v181 + 1) = v182;
  }
  long long v183 = 0uLL;
  uint64_t v184 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v183, (uint64_t)v193, (uint64_t)v194, (v194 - (unsigned char *)v193) >> 5);
  long long v185 = 0uLL;
  uint64_t v186 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>(&v185, (uint64_t)v195[0], (uint64_t)v195[1], ((char *)v195[1] - (char *)v195[0]) >> 5);
  *(void *)&long long v187 = v118;
  *((void *)&v187 + 1) = v117;
  *(void *)(a2 + 24) = 0;
  v164 = (char *)operator new(0xA0uLL);
  *(void *)v164 = &unk_26F0C3C88;
  *(_OWORD *)(v164 + 8) = *(_OWORD *)v177;
  *(_OWORD *)(v164 + 20) = *(_OWORD *)&v177[12];
  *(_OWORD *)(v164 + 40) = v178;
  *((void *)v164 + 7) = v179;
  uint64_t v179 = 0;
  long long v178 = 0uLL;
  *((_DWORD *)v164 + 16) = v180;
  *(_OWORD *)(v164 + 72) = v181;
  *((void *)v164 + 11) = v182;
  uint64_t v182 = 0;
  long long v181 = 0uLL;
  *((_OWORD *)v164 + 6) = v183;
  *((void *)v164 + 14) = v184;
  long long v183 = 0uLL;
  uint64_t v184 = 0;
  *(_OWORD *)(v164 + 120) = v185;
  *((void *)v164 + 17) = v186;
  long long v185 = 0uLL;
  uint64_t v186 = 0;
  *((_OWORD *)v164 + 9) = v187;
  *(void *)(a2 + 24) = v164;
  operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5(v177);
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v188)
  {
    v189 = (char *)v188;
    operator delete(v188);
  }
  v165 = v195[0];
  if (v195[0])
  {
    v166 = v195[0];
    if (v195[1] != v195[0])
    {
      v167 = (char *)v195[1] - 32;
      v168 = (char *)v195[1] - 32;
      do
      {
        v169 = (void *)v168[3];
        if (v168 == v169)
        {
          (*(void (**)(void *))(*v168 + 32))(v168);
        }
        else if (v169)
        {
          (*(void (**)(void *))(*v169 + 40))(v169);
        }
        v167 -= 32;
        BOOL v25 = v168 == v165;
        v168 -= 4;
      }
      while (!v25);
      v166 = v195[0];
    }
    v195[1] = v165;
    operator delete(v166);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  v170 = v193;
  if (v193)
  {
    v171 = v193;
    if (v194 != v193)
    {
      v172 = v194 - 32;
      v173 = v194 - 32;
      do
      {
        v174 = (void *)v173[3];
        if (v173 == v174)
        {
          (*(void (**)(void *))(*v173 + 32))(v173);
        }
        else if (v174)
        {
          (*(void (**)(void *))(*v174 + 40))(v174);
        }
        v172 -= 32;
        BOOL v25 = v173 == v170;
        v173 -= 4;
      }
      while (!v25);
      v171 = v193;
    }
    v194 = v170;
    operator delete(v171);
  }
  uint64_t result = v210;
  if (v210 == v209) {
    return (void *)(*(uint64_t (**)(void *))(v209[0] + 32))(v209);
  }
  if (v210) {
    return (void *)(*(uint64_t (**)(void))(*v210 + 40))();
  }
  return result;
}

void sub_23CCFF100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~function((void *)(v39 - 192));
  if (__p) {
    operator delete(__p);
  }
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::~vector[abi:ne180100](&a39);
  unint64_t v41 = *(void **)(v39 - 256);
  if (v41)
  {
    *(void *)(v39 - 248) = v41;
    operator delete(v41);
  }
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::~vector[abi:ne180100](&a36);
  std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~function((void *)(v39 - 128));
  _Unwind_Resume(a1);
}

void *operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    unint64_t v3 = (void *)a1[15];
    BOOL v4 = (void *)a1[14];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      BOOL v4 = (void *)a1[14];
    }
    a1[15] = v2;
    operator delete(v4);
  }
  unint64_t v9 = (void *)a1[11];
  if (v9)
  {
    unint64_t v10 = (void *)a1[12];
    int v11 = (void *)a1[11];
    if (v10 != v9)
    {
      uint64_t v12 = v10 - 4;
      int v13 = v10 - 4;
      do
      {
        unint64_t v14 = (void *)v13[3];
        if (v13 == v14)
        {
          (*(void (**)(void *))(*v13 + 32))(v13);
        }
        else if (v14)
        {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        v12 -= 4;
        BOOL v7 = v13 == v9;
        v13 -= 4;
      }
      while (!v7);
      int v11 = (void *)a1[11];
    }
    a1[12] = v9;
    operator delete(v11);
  }
  BOOL v15 = (void *)a1[8];
  if (v15)
  {
    a1[9] = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)a1[4];
  if (v16)
  {
    a1[5] = v16;
    operator delete(v16);
  }
  return a1;
}

void operations_research::sat::FollowHint(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
  uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  int v11 = *(const void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  int64_t v12 = v10 - *(void *)a1;
  if (v10 != *(void *)a1)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v13 = (char *)operator new(v10 - *(void *)a1);
    unint64_t v14 = &v13[8 * (v12 >> 3)];
    memcpy(v13, v11, v12);
    uint64_t v16 = *(const void **)a2;
    uint64_t v15 = *(void *)(a2 + 8);
    int64_t v17 = v15 - *(void *)a2;
    if (v15 != *(void *)a2) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v19 = 0;
    uint64_t v18 = 0;
    goto LABEL_8;
  }
  unint64_t v14 = 0;
  int v13 = 0;
  uint64_t v16 = *(const void **)a2;
  uint64_t v20 = *(void *)(a2 + 8);
  int64_t v17 = v20 - *(void *)a2;
  if (v20 == *(void *)a2) {
    goto LABEL_7;
  }
LABEL_4:
  if (v17 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (char *)operator new(v17);
  uint64_t v19 = &v18[8 * (v17 >> 3)];
  memcpy(v18, v16, v17);
LABEL_8:
  *(void *)&long long v28 = v8;
  *((void *)&v28 + 1) = v9;
  uint64_t v29 = a3;
  *(void *)(a4 + 24) = 0;
  uint64_t v21 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v21 = &unk_26F0C3D08;
  *((void *)v21 + 1) = 0;
  *((void *)v21 + 2) = 0;
  *((void *)v21 + 3) = 0;
  uint64_t v22 = v14 - v13;
  if (v14 != v13)
  {
    if (v22 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = (char *)operator new(v14 - v13);
    *((void *)v21 + 1) = v23;
    unint64_t v24 = &v23[8 * (v22 >> 3)];
    *((void *)v21 + 3) = v24;
    memcpy(v23, v13, v14 - v13);
    *((void *)v21 + 2) = v24;
  }
  *((void *)v21 + 4) = 0;
  *((void *)v21 + 5) = 0;
  *((void *)v21 + 6) = 0;
  uint64_t v25 = v19 - v18;
  if (v19 != v18)
  {
    if (v25 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = (char *)operator new(v19 - v18);
    *((void *)v21 + 4) = v26;
    uint64_t v27 = &v26[8 * (v25 >> 3)];
    *((void *)v21 + 6) = v27;
    memcpy(v26, v18, v19 - v18);
    *((void *)v21 + 5) = v27;
  }
  *(_OWORD *)(v21 + 56) = v28;
  *((void *)v21 + 9) = v29;
  *(void *)(a4 + 24) = v21;
  if (v18) {
    operator delete(v18);
  }
  if (v13)
  {
    operator delete(v13);
  }
}

void sub_23CCFF724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_23CCFF738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  unint64_t v14 = *v12;
  if (*v12)
  {
    v10[5] = v14;
    operator delete(v14);
  }
  uint64_t v15 = *v11;
  if (*v11)
  {
    v10[2] = v15;
    operator delete(v15);
  }
  operator delete(v10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a10);
  _Unwind_Resume(a1);
}

void sub_23CCFF77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintCollection>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintCollection>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintCollection>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintCollection>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RestartPolicy>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RestartPolicy>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::RestartPolicy>(void)::d)
  {
LABEL_12:
    operations_research::sat::Model::MyNew<operations_research::sat::RestartPolicy>();
  }
  return v2[5];
}

void operations_research::sat::ConfigureSearchHeuristics(operations_research::sat *this, operations_research::sat::Model *a2)
{
  v244[0] = *MEMORY[0x263EF8340];
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristics>((uint64_t)this);
  if (*(void *)(v3 + 80))
  {
    uint64_t v4 = v3;
    *(_DWORD *)(v3 + 48) = 0;
    uint64_t v6 = *(void **)v3;
    uint64_t v5 = *(void *)(v3 + 8);
    if (v5 != *(void *)v3)
    {
      uint64_t v7 = v5 - 32;
      uint64_t v8 = (void *)(v5 - 32);
      do
      {
        uint64_t v10 = (void *)v8[3];
        if (v8 == v10)
        {
          (*(void (**)(void *))(*v8 + 32))(v8);
        }
        else if (v10)
        {
          (*(void (**)(void *))(*v10 + 40))(v10);
        }
        v7 -= 32;
        BOOL v9 = v8 == v6;
        v8 -= 4;
      }
      while (!v9);
    }
    int v11 = (void **)(v4 + 24);
    int64_t v12 = *(void **)(v4 + 24);
    *(void *)(v4 + 8) = v6;
    int v13 = *(void **)(v4 + 32);
    if (v13 != v12)
    {
      unint64_t v14 = v13 - 4;
      uint64_t v15 = v13 - 4;
      do
      {
        uint64_t v16 = (void *)v15[3];
        if (v15 == v16)
        {
          (*(void (**)(void *))(*v15 + 32))(v15);
        }
        else if (v16)
        {
          (*(void (**)(void *))(*v16 + 40))(v16);
        }
        v14 -= 4;
        BOOL v9 = v15 == v12;
        v15 -= 4;
      }
      while (!v9);
    }
    *(void *)(v4 + 32) = v12;
    uint64_t v17 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)this);
    uint64_t v18 = v17;
    uint64_t v19 = v4 + 56;
    switch(*(_DWORD *)(v17 + 124))
    {
      case 0:
        uint64_t v20 = (void ***)&v243;
        v243 = 0;
        if (*(unsigned char *)(v17 + 151))
        {
          operations_research::sat::RandomizeOnRestartHeuristic(this, (uint64_t)&v228);
          uint64_t v21 = v243;
          v243 = 0;
          if (v21 == v242)
          {
            (*(void (**)(void *))(v242[0] + 32))(v242);
            uint64_t v22 = v231;
            uint64_t v23 = (void ***)&v243;
            if (!v231) {
              goto LABEL_124;
            }
          }
          else
          {
            if (v21) {
              (*(void (**)(void *))(*v21 + 40))(v21);
            }
            uint64_t v22 = v231;
            uint64_t v23 = (void ***)&v243;
            if (!v231) {
              goto LABEL_124;
            }
          }
          if (v22 == (void **)&v228)
          {
            v243 = v242;
            v228[3]((void **)&v228, v242);
LABEL_313:
            int64_t v143 = v231;
            if (v231 != (void **)&v228) {
              goto LABEL_314;
            }
            goto LABEL_362;
          }
          uint64_t v23 = &v231;
          v243 = v22;
LABEL_124:
          *uint64_t v23 = 0;
          goto LABEL_313;
        }
        uint64_t v50 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
        uint64_t v51 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
        uint64_t v52 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
        unint64_t v53 = (void **)operator new(0x20uLL);
        *unint64_t v53 = &unk_26F0C3850;
        v53[1] = (void *)v50;
        v53[2] = (void *)v51;
        v53[3] = (void *)v52;
        v231 = v53;
        uint64_t v54 = v243;
        v243 = 0;
        if (v54 == v242)
        {
          (*(void (**)(void *))(v242[0] + 32))(v242);
        }
        else if (v54)
        {
          (*(void (**)(void *))(*v54 + 40))(v54);
        }
        v162 = (void ***)&v243;
        if (!v231) {
          goto LABEL_359;
        }
        if (v231 == (void **)&v228)
        {
          v243 = v242;
          v228[3]((void **)&v228, v242);
        }
        else
        {
          v162 = &v231;
          v243 = v231;
LABEL_359:
          operations_research::sat *v162 = 0;
        }
        int64_t v143 = v231;
        if (v231 != (void **)&v228)
        {
LABEL_314:
          if (v143) {
            (*((void (**)(void **))*v143 + 5))(v143);
          }
          uint64_t v144 = (void **)v243;
          if (!v243) {
            goto LABEL_365;
          }
          goto LABEL_363;
        }
LABEL_362:
        ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
        uint64_t v144 = (void **)v243;
        if (!v243)
        {
LABEL_365:
          v231 = v144;
          goto LABEL_367;
        }
LABEL_363:
        if (v144 != v242)
        {
          uint64_t v144 = (void **)(*((uint64_t (**)(void **))*v144 + 2))(v144);
          goto LABEL_365;
        }
        v231 = (void **)&v228;
        (*(void (**)(void *, void **))(v242[0] + 24))(v242, (void **)&v228);
LABEL_367:
        uint64_t v163 = *(void *)(v4 + 80);
        if (v163)
        {
          if (v163 == v19)
          {
            v233 = v232;
            (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(v4 + 56, v232);
LABEL_372:
            std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v220, (uint64_t)&v228, 2uLL);
            long long v222 = 0uLL;
            unint64_t v223 = 0;
            std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v222, (uint64_t)v220, (uint64_t)v221, (v221 - (unsigned char *)v220) >> 5);
            v240 = 0;
            v164 = (char *)operator new(0x20uLL);
            *(void *)v164 = &unk_26F0C3508;
            *(_OWORD *)(v164 + 8) = v222;
            *((void *)v164 + 3) = v223;
            v240 = (long long *)v164;
            v165 = v243;
            v243 = 0;
            if (v165 == v242)
            {
              (*(void (**)(void *))(v242[0] + 32))(v242);
              v166 = v240;
              v167 = (long long **)&v243;
              if (!v240) {
                goto LABEL_380;
              }
            }
            else
            {
              if (v165) {
                (*(void (**)(void *))(*v165 + 40))(v165);
              }
              v166 = v240;
              v167 = (long long **)&v243;
              if (!v240) {
                goto LABEL_380;
              }
            }
            if (v166 == &v238)
            {
              v243 = v242;
              (*(void (**)(long long *, void *))(v238 + 24))(&v238, v242);
LABEL_382:
              if (v240 == &v238)
              {
                (*(void (**)(long long *))(v238 + 32))(&v238);
              }
              else if (v240)
              {
                (*(void (**)(void))(*(void *)v240 + 40))();
              }
              v168 = v220;
              if (v220)
              {
                v169 = v220;
                if (v221 != v220)
                {
                  v170 = v221 - 32;
                  v171 = v221 - 32;
                  do
                  {
                    v172 = (void *)v171[3];
                    if (v171 == v172)
                    {
                      (*(void (**)(void *))(*v171 + 32))(v171);
                    }
                    else if (v172)
                    {
                      (*(void (**)(void *))(*v172 + 40))(v172);
                    }
                    v170 -= 32;
                    BOOL v9 = v171 == v168;
                    v171 -= 4;
                  }
                  while (!v9);
                  v169 = v220;
                }
                v221 = v168;
                operator delete(v169);
              }
              if (v233 == v232)
              {
                (*(void (**)(void *))(v232[0] + 32))(v232);
                v173 = v231;
                if (v231 != (void **)&v228) {
                  goto LABEL_400;
                }
              }
              else
              {
                if (v233) {
                  (*(void (**)(void))(*v233 + 40))();
                }
                v173 = v231;
                if (v231 != (void **)&v228)
                {
LABEL_400:
                  if (v173) {
                    (*((void (**)(void **))*v173 + 5))(v173);
                  }
                  v174 = v243;
                  if (!v243) {
                    goto LABEL_408;
                  }
LABEL_406:
                  if (v174 == v242)
                  {
                    v237 = v236;
                    (*(void (**)(void *, void *))(v242[0] + 24))(v242, v236);
LABEL_410:
                    operations_research::sat::IntegerValueSelectionHeuristic(v236, (uint64_t)this, (uint64_t)&v228);
                    v175 = v243;
                    v243 = 0;
                    if (v175 == v242)
                    {
                      (*(void (**)(void *))(v242[0] + 32))(v242);
                      uint64_t v176 = v231;
                      if (!v231) {
                        goto LABEL_418;
                      }
                    }
                    else
                    {
                      if (v175) {
                        (*(void (**)(void *))(*v175 + 40))(v175);
                      }
                      uint64_t v176 = v231;
                      if (!v231) {
                        goto LABEL_418;
                      }
                    }
                    if (v176 == (void **)&v228)
                    {
                      v243 = v242;
                      v228[3]((void **)&v228, v242);
LABEL_420:
                      if (v231 == (void **)&v228)
                      {
                        ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
                        v177 = v237;
                        if (v237 != v236) {
                          goto LABEL_424;
                        }
                      }
                      else
                      {
                        if (v231) {
                          (*((void (**)(void))*v231 + 5))();
                        }
                        v177 = v237;
                        if (v237 != v236)
                        {
LABEL_424:
                          if (v177) {
                            (*(void (**)(void *))(*v177 + 40))(v177);
                          }
                          long long v178 = (void **)v243;
                          if (!v243) {
                            goto LABEL_432;
                          }
LABEL_430:
                          if (v178 == v242)
                          {
                            v231 = (void **)&v228;
                            (*(void (**)(void *, void **))(v242[0] + 24))(v242, (void **)&v228);
                            goto LABEL_434;
                          }
                          long long v178 = (void **)(*((uint64_t (**)(void **))*v178 + 2))(v178);
LABEL_432:
                          v231 = v178;
LABEL_434:
                          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>(v4, &v228, v232, 1uLL);
                          if (v231 == (void **)&v228)
                          {
                            ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
                          }
                          else if (v231)
                          {
                            (*((void (**)(void))*v231 + 5))();
                          }
                          uint64_t restarted = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
                          v228 = (void (**)(void **, void *))&unk_26F0C3E78;
                          uint64_t v229 = restarted;
                          v231 = (void **)&v228;
                          std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>(v4 + 24, &v228, v232, 1uLL);
                          goto LABEL_439;
                        }
                      }
                      (*(void (**)(void *))(v236[0] + 32))(v236);
                      long long v178 = (void **)v243;
                      if (!v243) {
                        goto LABEL_432;
                      }
                      goto LABEL_430;
                    }
                    uint64_t v20 = &v231;
                    v243 = v176;
LABEL_418:
                    *uint64_t v20 = 0;
                    goto LABEL_420;
                  }
                  v174 = (void *)(*(uint64_t (**)(void *))(*v174 + 16))(v174);
LABEL_408:
                  v237 = v174;
                  goto LABEL_410;
                }
              }
              ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
              v174 = v243;
              if (!v243) {
                goto LABEL_408;
              }
              goto LABEL_406;
            }
            v167 = &v240;
            v243 = v166;
LABEL_380:
            char *v167 = 0;
            goto LABEL_382;
          }
          uint64_t v163 = (*(uint64_t (**)(uint64_t))(*(void *)v163 + 16))(v163);
        }
        v233 = (void *)v163;
        goto LABEL_372;
      case 1:
        uint64_t v24 = *(void *)(v4 + 80);
        if (!v24) {
          goto LABEL_26;
        }
        if (v24 == v19)
        {
          v231 = (void **)&v228;
          (*(void (**)(uint64_t, void **))(*(void *)v19 + 24))(v4 + 56, (void **)&v228);
        }
        else
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
LABEL_26:
          v231 = (void **)v24;
        }
        uint64_t v61 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
        uint64_t v62 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
        uint64_t v63 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
        v233 = 0;
        uint64_t v64 = operator new(0x20uLL);
        *uint64_t v64 = &unk_26F0C3850;
        v64[1] = v61;
        v64[2] = v62;
        v64[3] = v63;
        v233 = v64;
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&__p, (uint64_t)&v228, 2uLL);
        long long v238 = 0uLL;
        uint64_t v239 = 0;
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v238, (uint64_t)__p, (uint64_t)v219, (v219 - (unsigned char *)__p) >> 5);
        v243 = 0;
        long long v65 = (char *)operator new(0x20uLL);
        *(void *)long long v65 = &unk_26F0C3508;
        *(_OWORD *)(v65 + 8) = v238;
        *((void *)v65 + 3) = v239;
        v243 = v65;
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>(v4, v242, v244, 1uLL);
        if (v243 == v242)
        {
          (*(void (**)(void *))(v242[0] + 32))(v242);
        }
        else if (v243)
        {
          (*(void (**)(void))(*v243 + 40))();
        }
        int v66 = __p;
        if (__p)
        {
          unint64_t v67 = __p;
          if (v219 != __p)
          {
            unint64_t v68 = v219 - 32;
            BOOL v69 = v219 - 32;
            do
            {
              unsigned int v70 = (void *)v69[3];
              if (v69 == v70)
              {
                (*(void (**)(void *))(*v69 + 32))(v69);
              }
              else if (v70)
              {
                (*(void (**)(void *))(*v70 + 40))(v70);
              }
              v68 -= 32;
              BOOL v9 = v69 == v66;
              v69 -= 4;
            }
            while (!v9);
            unint64_t v67 = __p;
          }
          v219 = v66;
          operator delete(v67);
        }
        if (v233 == v232)
        {
          (*(void (**)(void *))(v232[0] + 32))(v232);
          uint64_t v71 = v231;
          if (v231 != (void **)&v228) {
            goto LABEL_109;
          }
        }
        else
        {
          if (v233) {
            (*(void (**)(void))(*v233 + 40))();
          }
          uint64_t v71 = v231;
          if (v231 != (void **)&v228)
          {
LABEL_109:
            if (v71) {
              (*((void (**)(void **))*v71 + 5))(v71);
            }
            if (*(unsigned char *)(v18 + 151)) {
              goto LABEL_112;
            }
LABEL_115:
            v228 = (void (**)(void **, void *))&unk_26F0C3EF8;
            v231 = (void **)&v228;
            std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>((uint64_t)v11, &v228, v232, 1uLL);
            goto LABEL_308;
          }
        }
        ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
        if (*(unsigned char *)(v18 + 151))
        {
LABEL_112:
          uint64_t v72 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
          v228 = (void (**)(void **, void *))&unk_26F0C3E78;
          uint64_t v229 = v72;
          v231 = (void **)&v228;
          std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>((uint64_t)v11, &v228, v232, 1uLL);
          goto LABEL_308;
        }
        goto LABEL_115;
      case 2:
        uint64_t v25 = *(void *)(v4 + 80);
        if (!v25) {
          goto LABEL_30;
        }
        if (v25 == v19)
        {
          v243 = v242;
          (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(v4 + 56, v242);
        }
        else
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
LABEL_30:
          v243 = (void *)v25;
        }
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v209, (uint64_t)v242, 1uLL);
        uint64_t v211 = 0;
        v212 = 0;
        uint64_t v213 = 0;
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v211, (uint64_t)v209, (uint64_t)v210, (v210 - (unsigned char *)v209) >> 5);
        uint64_t v73 = (void **)operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristicsVector>((uint64_t)this);
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>,std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>>((uint64_t *)&v211, v212, *v73, v73[1], ((char *)v73[1] - (char *)*v73) >> 5);
        uint64_t v74 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
        uint64_t v75 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
        uint64_t v76 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
        uint64_t v77 = (void **)operator new(0x20uLL);
        *uint64_t v77 = &unk_26F0C3850;
        v77[1] = (void *)v74;
        v77[2] = (void *)v75;
        v77[3] = (void *)v76;
        v231 = v77;
        uint64_t v78 = *(void *)(v4 + 80);
        if (!v78) {
          goto LABEL_120;
        }
        if (v78 == v19)
        {
          v233 = v232;
          (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(v4 + 56, v232);
        }
        else
        {
          uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 16))(v78);
LABEL_120:
          v233 = (void *)v78;
        }
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v207, (uint64_t)&v228, 2uLL);
        long long v222 = 0uLL;
        unint64_t v223 = 0;
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v222, (uint64_t)v207, (uint64_t)v208, (v208 - (unsigned char *)v207) >> 5);
        v240 = 0;
        int64_t v100 = (char *)operator new(0x20uLL);
        *(void *)int64_t v100 = &unk_26F0C3508;
        *(_OWORD *)(v100 + 8) = v222;
        *((void *)v100 + 3) = v223;
        v240 = (long long *)v100;
        operations_research::sat::CompleteHeuristics((uint64_t *)&v211, &v238, (uint64_t *)&v214);
        uint64_t v101 = *(void **)v4;
        if (*(void *)v4)
        {
          unint64_t v102 = *(void **)(v4 + 8);
          uint64_t v103 = *(void **)v4;
          if (v102 != v101)
          {
            unint64_t v104 = v102 - 4;
            uint64_t v105 = v102 - 4;
            do
            {
              v106 = (void *)v105[3];
              if (v105 == v106)
              {
                (*(void (**)(void *))(*v105 + 32))(v105);
              }
              else if (v106)
              {
                (*(void (**)(void *))(*v106 + 40))(v106);
              }
              v104 -= 4;
              BOOL v9 = v105 == v101;
              v105 -= 4;
            }
            while (!v9);
            uint64_t v103 = *(void **)v4;
          }
          *(void *)(v4 + 8) = v101;
          operator delete(v103);
          *(void *)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
        }
        *(_OWORD *)uint64_t v4 = v214;
        *(void *)(v4 + 16) = v215;
        long long v214 = 0uLL;
        uint64_t v215 = 0;
        if (v240 == &v238)
        {
          (*(void (**)(long long *))(v238 + 32))(&v238);
        }
        else if (v240)
        {
          (*(void (**)(void))(*(void *)v240 + 40))();
        }
        uint64_t v107 = v207;
        if (v207)
        {
          unint64_t v108 = v207;
          if (v208 != v207)
          {
            uint64_t v109 = v208 - 32;
            uint64_t v110 = v208 - 32;
            do
            {
              uint64_t v111 = (void *)v110[3];
              if (v110 == v111)
              {
                (*(void (**)(void *))(*v110 + 32))(v110);
              }
              else if (v111)
              {
                (*(void (**)(void *))(*v111 + 40))(v111);
              }
              v109 -= 32;
              BOOL v9 = v110 == v107;
              v110 -= 4;
            }
            while (!v9);
            unint64_t v108 = v207;
          }
          v208 = v107;
          operator delete(v108);
        }
        if (v233 == v232)
        {
          (*(void (**)(void *))(v232[0] + 32))(v232);
          v112 = v231;
          if (v231 != (void **)&v228)
          {
LABEL_222:
            if (v112) {
              (*((void (**)(void **))*v112 + 5))(v112);
            }
LABEL_226:
            uint64_t v113 = v211;
            if (v211)
            {
              uint64_t v114 = v211;
              if (v212 != v211)
              {
                long long v115 = v212 - 4;
                int v116 = v212 - 4;
                do
                {
                  uint64_t v117 = (void *)v116[3];
                  if (v116 == v117)
                  {
                    (*(void (**)(void *))(*v116 + 32))(v116);
                  }
                  else if (v117)
                  {
                    (*(void (**)(void *))(*v117 + 40))(v117);
                  }
                  v115 -= 4;
                  BOOL v9 = v116 == v113;
                  v116 -= 4;
                }
                while (!v9);
                uint64_t v114 = v211;
              }
              v212 = v113;
              operator delete(v114);
            }
            uint64_t v118 = v209;
            if (v209)
            {
              unint64_t v119 = v209;
              if (v210 != v209)
              {
                v120 = v210 - 32;
                uint64_t v121 = v210 - 32;
                do
                {
                  v122 = (void *)v121[3];
                  if (v121 == v122)
                  {
                    (*(void (**)(void *))(*v121 + 32))(v121);
                  }
                  else if (v122)
                  {
                    (*(void (**)(void *))(*v122 + 40))(v122);
                  }
                  v120 -= 32;
                  BOOL v9 = v121 == v118;
                  v121 -= 4;
                }
                while (!v9);
                unint64_t v119 = v209;
              }
              v210 = v118;
              operator delete(v119);
            }
            if (v243 == v242)
            {
              (*(void (**)(void *))(v242[0] + 32))(v242);
              v123 = *(void **)v4;
              v124 = *(void **)(v4 + 8);
              if (*(void **)v4 != v124)
              {
LABEL_250:
                int64_t v125 = (void ***)(v123 + 3);
                while (1)
                {
                  uint64_t v128 = (void **)(v125 - 3);
                  unint64_t v127 = *v125;
                  if (*v125)
                  {
                    if (v128 == v127)
                    {
                      v227 = v226;
                      (*((void (**)(void **, void *))**v125 + 3))(*v125, v226);
                    }
                    else
                    {
                      v227 = (void *)(*((uint64_t (**)(void **))*v127 + 2))(v127);
                    }
                  }
                  else
                  {
                    v227 = 0;
                  }
                  operations_research::sat::IntegerValueSelectionHeuristic(v226, (uint64_t)this, (uint64_t)&v228);
                  unint64_t v129 = *v125;
                  *int64_t v125 = 0;
                  if (v128 == v129)
                  {
                    (*((void (**)(void ***))*v128 + 4))(v125 - 3);
                    v130 = v231;
                    v131 = v125;
                    if (!v231) {
                      goto LABEL_266;
                    }
                  }
                  else
                  {
                    if (v129) {
                      (*((void (**)(void **))*v129 + 5))(v129);
                    }
                    v130 = v231;
                    v131 = v125;
                    if (!v231) {
                      goto LABEL_266;
                    }
                  }
                  if (v130 != (void **)&v228)
                  {
                    *int64_t v125 = v130;
                    v131 = &v231;
LABEL_266:
                    int *v131 = 0;
                    goto LABEL_268;
                  }
                  *int64_t v125 = v128;
                  (*((void (**)(void **, void ***))*v231 + 3))(v231, v125 - 3);
LABEL_268:
                  if (v231 == (void **)&v228)
                  {
                    ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
                    unint64_t v132 = v227;
                    if (v227 != v226) {
                      goto LABEL_274;
                    }
                  }
                  else
                  {
                    if (v231) {
                      (*((void (**)(void))*v231 + 5))();
                    }
                    unint64_t v132 = v227;
                    if (v227 != v226)
                    {
LABEL_274:
                      if (v132) {
                        (*(void (**)(void *))(*v132 + 40))(v132);
                      }
                      goto LABEL_252;
                    }
                  }
                  (*(void (**)(void *))(v226[0] + 32))(v226);
LABEL_252:
                  uint64_t v126 = v125 + 1;
                  v125 += 4;
                  v123 += 4;
                  if (v126 == v124)
                  {
                    v123 = *(void **)v4;
                    uint64_t v133 = *(char **)(v4 + 8);
                    goto LABEL_279;
                  }
                }
              }
            }
            else
            {
              if (v243) {
                (*(void (**)(void))(*v243 + 40))();
              }
              v123 = *(void **)v4;
              v124 = *(void **)(v4 + 8);
              if (*(void **)v4 != v124) {
                goto LABEL_250;
              }
            }
            uint64_t v133 = (char *)v123;
LABEL_279:
            uint64_t v134 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
            v228 = (void (**)(void **, void *))&unk_26F0C3E78;
            uint64_t v229 = v134;
            v231 = (void **)&v228;
            std::vector<std::function<BOOL ()(void)>>::assign((void **)(v4 + 24), (v133 - (char *)v123) >> 5, (void **)&v228);
            goto LABEL_308;
          }
        }
        else
        {
          if (v233) {
            (*(void (**)(void))(*v233 + 40))();
          }
          v112 = v231;
          if (v231 != (void **)&v228) {
            goto LABEL_222;
          }
        }
        ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
        goto LABEL_226;
      case 3:
        long long v222 = 0uLL;
        unint64_t v223 = 0;
        uint64_t v26 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintCollection>((uint64_t)this);
        uint64_t v27 = *(uint64_t **)v26;
        long long v28 = *(uint64_t **)(v26 + 8);
        if (*(uint64_t **)v26 == v28) {
          goto LABEL_68;
        }
        do
        {
          operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(*v27, &v228);
          uint64_t v29 = *((void *)&v222 + 1);
          if (*((void *)&v222 + 1) >= v223)
          {
            *((void *)&v222 + 1) = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>((uint64_t *)&v222, &v228);
            uint64_t v31 = v231;
            if (v231 == (void **)&v228) {
              goto LABEL_33;
            }
            goto LABEL_45;
          }
          if (!v231)
          {
            uint64_t v30 = (void ***)(*((void *)&v222 + 1) + 24);
LABEL_42:
            *uint64_t v30 = 0;
            *((void *)&v222 + 1) = v29 + 32;
            uint64_t v31 = v231;
            if (v231 == (void **)&v228) {
              goto LABEL_33;
            }
            goto LABEL_45;
          }
          if (v231 != (void **)&v228)
          {
            *(void *)(*((void *)&v222 + 1) + 24) = v231;
            uint64_t v30 = &v231;
            goto LABEL_42;
          }
          *(void *)(*((void *)&v222 + 1) + 24) = *((void *)&v222 + 1);
          (*((void (**)(void **, uint64_t))*v231 + 3))(v231, v29);
          *((void *)&v222 + 1) = v29 + 32;
          uint64_t v31 = v231;
          if (v231 == (void **)&v228)
          {
LABEL_33:
            ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
            goto LABEL_34;
          }
LABEL_45:
          if (v31) {
            (*((void (**)(void **))*v31 + 5))(v31);
          }
LABEL_34:
          ++v27;
        }
        while (v27 != v28);
LABEL_68:
        if ((void)v222 == *((void *)&v222 + 1))
        {
          uint64_t v55 = *(void *)(v4 + 80);
          if (v55)
          {
            if (v55 == v19)
            {
              v231 = (void **)&v228;
              (*(void (**)(uint64_t, void **))(*(void *)v19 + 24))(v4 + 56, (void **)&v228);
              goto LABEL_448;
            }
            uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 16))(v55);
          }
          v231 = (void **)v55;
LABEL_448:
          uint64_t v181 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
          uint64_t v182 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
          uint64_t v183 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
          v233 = 0;
          uint64_t v184 = operator new(0x20uLL);
          *uint64_t v184 = &unk_26F0C3850;
          v184[1] = v181;
          v184[2] = v182;
          v184[3] = v183;
          v233 = v184;
          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v205, (uint64_t)&v228, 2uLL);
          long long v238 = 0uLL;
          uint64_t v239 = 0;
          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v238, (uint64_t)v205, (uint64_t)v206, (v206 - (unsigned char *)v205) >> 5);
          v243 = 0;
          long long v185 = (char *)operator new(0x20uLL);
          *(void *)long long v185 = &unk_26F0C3508;
          *(_OWORD *)(v185 + 8) = v238;
          *((void *)v185 + 3) = v239;
          v243 = v185;
          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>(v4, v242, v244, 1uLL);
          uint64_t v186 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
          *(void *)&long long v238 = &unk_26F0C3E78;
          *((void *)&v238 + 1) = v186;
          v240 = &v238;
          std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>(v4 + 24, &v238, &v241, 1uLL);
          if (v240 == &v238)
          {
            (*(void (**)(long long *))(v238 + 32))(&v238);
          }
          else if (v240)
          {
            (*(void (**)(void))(*(void *)v240 + 40))();
          }
          if (v243 == v242)
          {
            (*(void (**)(void *))(v242[0] + 32))(v242);
          }
          else if (v243)
          {
            (*(void (**)(void))(*v243 + 40))();
          }
          long long v187 = v205;
          if (v205)
          {
            v188 = v205;
            if (v206 != v205)
            {
              v189 = v206 - 32;
              v190 = v206 - 32;
              do
              {
                v191 = (void *)v190[3];
                if (v190 == v191)
                {
                  (*(void (**)(void *))(*v190 + 32))(v190);
                }
                else if (v191)
                {
                  (*(void (**)(void *))(*v191 + 40))(v191);
                }
                v189 -= 32;
                BOOL v9 = v190 == v187;
                v190 -= 4;
              }
              while (!v9);
              v188 = v205;
            }
            v206 = v187;
            operator delete(v188);
          }
          if (v233 == v232)
          {
            (*(void (**)(void *))(v232[0] + 32))(v232);
          }
          else if (v233)
          {
            (*(void (**)(void))(*v233 + 40))();
          }
          if (v231 == (void **)&v228)
          {
            ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
          }
          else if (v231)
          {
            (*((void (**)(void))*v231 + 5))();
          }
          goto LABEL_474;
        }
        uint64_t v40 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
        uint64_t v41 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
        uint64_t v42 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
        long long v43 = (void **)operator new(0x20uLL);
        *long long v43 = &unk_26F0C3850;
        v43[1] = (void *)v40;
        v43[2] = (void *)v41;
        v43[3] = (void *)v42;
        v231 = v43;
        uint64_t v44 = *(void *)(v4 + 80);
        if (!v44) {
          goto LABEL_72;
        }
        if (v44 == v19)
        {
          v233 = v232;
          (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(v4 + 56, v232);
        }
        else
        {
          uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 16))(v44);
LABEL_72:
          v233 = (void *)v44;
        }
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v203, (uint64_t)&v228, 2uLL);
        long long v238 = 0uLL;
        uint64_t v239 = 0;
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v238, (uint64_t)v203, (uint64_t)v204, (v204 - (unsigned char *)v203) >> 5);
        v243 = 0;
        unint64_t v145 = (char *)operator new(0x20uLL);
        *(void *)unint64_t v145 = &unk_26F0C3508;
        *(_OWORD *)(v145 + 8) = v238;
        *((void *)v145 + 3) = v239;
        v243 = v145;
        operations_research::sat::CompleteHeuristics((uint64_t *)&v222, v242, (uint64_t *)&v214);
        uint64_t v146 = *(void **)v4;
        if (*(void *)v4)
        {
          unint64_t v147 = *(void **)(v4 + 8);
          v148 = *(void **)v4;
          if (v147 != v146)
          {
            v149 = v147 - 4;
            v150 = v147 - 4;
            do
            {
              unint64_t v151 = (void *)v150[3];
              if (v150 == v151)
              {
                (*(void (**)(void *))(*v150 + 32))(v150);
              }
              else if (v151)
              {
                (*(void (**)(void *))(*v151 + 40))(v151);
              }
              v149 -= 4;
              BOOL v9 = v150 == v146;
              v150 -= 4;
            }
            while (!v9);
            v148 = *(void **)v4;
          }
          *(void *)(v4 + 8) = v146;
          operator delete(v148);
          *(void *)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
        }
        *(_OWORD *)uint64_t v4 = v214;
        *(void *)(v4 + 16) = v215;
        long long v214 = 0uLL;
        uint64_t v215 = 0;
        if (v243 == v242)
        {
          (*(void (**)(void *))(v242[0] + 32))(v242);
        }
        else if (v243)
        {
          (*(void (**)(void))(*v243 + 40))();
        }
        v152 = v203;
        if (v203)
        {
          uint64_t v153 = v203;
          if (v204 != v203)
          {
            uint64_t v154 = v204 - 32;
            v155 = v204 - 32;
            do
            {
              v156 = (void *)v155[3];
              if (v155 == v156)
              {
                (*(void (**)(void *))(*v155 + 32))(v155);
              }
              else if (v156)
              {
                (*(void (**)(void *))(*v156 + 40))(v156);
              }
              v154 -= 32;
              BOOL v9 = v155 == v152;
              v155 -= 4;
            }
            while (!v9);
            uint64_t v153 = v203;
          }
          v204 = v152;
          operator delete(v153);
        }
        if (v233 == v232)
        {
          (*(void (**)(void *))(v232[0] + 32))(v232);
          uint64_t v157 = v231;
          if (v231 != (void **)&v228) {
            goto LABEL_347;
          }
          goto LABEL_350;
        }
        if (v233) {
          (*(void (**)(void))(*v233 + 40))();
        }
        uint64_t v157 = v231;
        if (v231 == (void **)&v228)
        {
LABEL_350:
          ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
          goto LABEL_351;
        }
LABEL_347:
        if (v157) {
          (*((void (**)(void **))*v157 + 5))(v157);
        }
LABEL_351:
        uint64_t v160 = v4;
        long long v158 = *(void **)v4;
        uint64_t v159 = *(void *)(v160 + 8);
        uint64_t v161 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
        v228 = (void (**)(void **, void *))&unk_26F0C3E78;
        uint64_t v229 = v161;
        v231 = (void **)&v228;
        std::vector<std::function<BOOL ()(void)>>::assign(v11, (v159 - (uint64_t)v158) >> 5, (void **)&v228);
        if (v231 == (void **)&v228)
        {
          ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
        }
        else if (v231)
        {
          (*((void (**)(void))*v231 + 5))();
        }
LABEL_474:
        v192 = (void *)v222;
        if ((void)v222)
        {
          v193 = (void *)v222;
          if (*((void *)&v222 + 1) != (void)v222)
          {
            uint64_t v194 = *((void *)&v222 + 1) - 32;
            v195 = (void *)(*((void *)&v222 + 1) - 32);
            do
            {
              v196 = (void *)v195[3];
              if (v195 == v196)
              {
                (*(void (**)(void *))(*v195 + 32))(v195);
              }
              else if (v196)
              {
                (*(void (**)(void *))(*v196 + 40))(v196);
              }
              v194 -= 32;
              BOOL v9 = v195 == v192;
              v195 -= 4;
            }
            while (!v9);
            v193 = (void *)v222;
          }
          *((void *)&v222 + 1) = v192;
          operator delete(v193);
        }
        return;
      case 4:
        uint64_t v32 = (void *)*((void *)this + 4);
        if (!v32) {
          goto LABEL_73;
        }
        unint64_t v33 = (void *)((char *)this + 32);
        do
        {
          unint64_t v34 = v32[4];
          BOOL v35 = v34 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
          if (v34 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d) {
            uint64_t v36 = v32;
          }
          else {
            uint64_t v36 = v32 + 1;
          }
          if (v35) {
            unint64_t v33 = v32;
          }
          uint64_t v32 = (void *)*v36;
        }
        while (*v36);
        if (v33 == (void *)((char *)this + 32)
          || v33[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d
          || (uint64_t v37 = v33[5]) == 0
          || *(_DWORD *)(v37 + 16) == -1)
        {
LABEL_73:
          v228 = (void (**)(void **, void *))&unk_26F0C38D0;
        }
        else
        {
          v228 = (void (**)(void **, void *))&unk_26F0C3988;
          uint64_t v229 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PseudoCosts>((uint64_t)this);
          v230 = this;
        }
        v231 = (void **)&v228;
        uint64_t v45 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
        uint64_t v46 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
        uint64_t v47 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
        v233 = 0;
        uint64_t v48 = operator new(0x20uLL);
        void *v48 = &unk_26F0C3850;
        v48[1] = v45;
        v48[2] = v46;
        v48[3] = v47;
        v233 = v48;
        uint64_t v49 = *(void *)(v4 + 80);
        if (!v49) {
          goto LABEL_77;
        }
        if (v49 == v19)
        {
          v235 = v234;
          (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(v4 + 56, v234);
        }
        else
        {
          uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 16))(v49);
LABEL_77:
          v235 = (void *)v49;
        }
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v201, (uint64_t)&v228, 3uLL);
        long long v238 = 0uLL;
        uint64_t v239 = 0;
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v238, (uint64_t)v201, (uint64_t)v202, (v202 - (unsigned char *)v201) >> 5);
        v243 = 0;
        uint64_t v87 = (char *)operator new(0x20uLL);
        *(void *)uint64_t v87 = &unk_26F0C3508;
        *(_OWORD *)(v87 + 8) = v238;
        *((void *)v87 + 3) = v239;
        v243 = v87;
        unint64_t v88 = v201;
        if (v201)
        {
          signed int v89 = v201;
          if (v202 != v201)
          {
            v90 = v202 - 32;
            uint64_t v91 = v202 - 32;
            do
            {
              long long v92 = (void *)v91[3];
              if (v91 == v92)
              {
                (*(void (**)(void *))(*v91 + 32))(v91);
              }
              else if (v92)
              {
                (*(void (**)(void *))(*v92 + 40))(v92);
              }
              v90 -= 32;
              BOOL v9 = v91 == v88;
              v91 -= 4;
            }
            while (!v9);
            signed int v89 = v201;
          }
          v202 = v88;
          operator delete(v89);
        }
        if (v235 == v234)
        {
          (*(void (**)(void *))(v234[0] + 32))(v234);
          int v93 = v233;
          if (v233 != v232) {
            goto LABEL_164;
          }
        }
        else
        {
          if (v235) {
            (*(void (**)(void))(*v235 + 40))();
          }
          int v93 = v233;
          if (v233 != v232)
          {
LABEL_164:
            if (v93) {
              (*(void (**)(void *))(*v93 + 40))(v93);
            }
            uint64_t v94 = v231;
            if (v231 != (void **)&v228)
            {
LABEL_167:
              if (v94) {
                (*((void (**)(void **))*v94 + 5))(v94);
              }
              long long v95 = v243;
              if (!v243) {
                goto LABEL_176;
              }
              goto LABEL_174;
            }
LABEL_173:
            ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
            long long v95 = v243;
            if (!v243)
            {
LABEL_176:
              v225 = v95;
              goto LABEL_184;
            }
LABEL_174:
            if (v95 != v242)
            {
              long long v95 = (void *)(*(uint64_t (**)(void *))(*v95 + 16))(v95);
              goto LABEL_176;
            }
            v225 = v224;
            (*(void (**)(void *, void *))(v242[0] + 24))(v242, v224);
LABEL_184:
            operations_research::sat::IntegerValueSelectionHeuristic(v224, (uint64_t)this, (uint64_t)&v228);
            std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>(v4, &v228, v232, 1uLL);
            if (v231 == (void **)&v228)
            {
              ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
              unint64_t v98 = v225;
              if (v225 != v224)
              {
LABEL_188:
                if (v98) {
                  (*(void (**)(void *))(*v98 + 40))(v98);
                }
                goto LABEL_192;
              }
            }
            else
            {
              if (v231) {
                (*((void (**)(void))*v231 + 5))();
              }
              unint64_t v98 = v225;
              if (v225 != v224) {
                goto LABEL_188;
              }
            }
            (*(void (**)(void *))(v224[0] + 32))(v224);
LABEL_192:
            uint64_t v99 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
            v228 = (void (**)(void **, void *))&unk_26F0C3E78;
            uint64_t v229 = v99;
            v231 = (void **)&v228;
            std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>(v4 + 24, &v228, v232, 1uLL);
            goto LABEL_439;
          }
        }
        (*(void (**)(void *))(v232[0] + 32))(v232);
        uint64_t v94 = v231;
        if (v231 != (void **)&v228) {
          goto LABEL_167;
        }
        goto LABEL_173;
      case 5:
        operations_research::sat::RandomizeOnRestartHeuristic(this, (uint64_t)&v228);
        uint64_t v38 = *(void *)(v4 + 80);
        if (!v38) {
          goto LABEL_64;
        }
        if (v38 == v19)
        {
          v233 = v232;
          (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(v4 + 56, v232);
        }
        else
        {
          uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 16))(v38);
LABEL_64:
          v233 = (void *)v38;
        }
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v199, (uint64_t)&v228, 2uLL);
        long long v238 = 0uLL;
        uint64_t v239 = 0;
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v238, (uint64_t)v199, (uint64_t)v200, (v200 - (unsigned char *)v199) >> 5);
        v243 = 0;
        uint64_t v79 = (char *)operator new(0x20uLL);
        *(void *)uint64_t v79 = &unk_26F0C3508;
        *(_OWORD *)(v79 + 8) = v238;
        *((void *)v79 + 3) = v239;
        v243 = v79;
        unint64_t v80 = v199;
        if (v199)
        {
          uint64_t v81 = v199;
          if (v200 != v199)
          {
            unint64_t v82 = v200 - 32;
            int v83 = v200 - 32;
            do
            {
              unsigned int v84 = (void *)v83[3];
              if (v83 == v84)
              {
                (*(void (**)(void *))(*v83 + 32))(v83);
              }
              else if (v84)
              {
                (*(void (**)(void *))(*v84 + 40))(v84);
              }
              v82 -= 32;
              BOOL v9 = v83 == v80;
              v83 -= 4;
            }
            while (!v9);
            uint64_t v81 = v199;
          }
          v200 = v80;
          operator delete(v81);
        }
        if (v233 == v232)
        {
          (*(void (**)(void *))(v232[0] + 32))(v232);
          unint64_t v85 = v231;
          if (v231 != (void **)&v228) {
            goto LABEL_140;
          }
        }
        else
        {
          if (v233) {
            (*(void (**)(void))(*v233 + 40))();
          }
          unint64_t v85 = v231;
          if (v231 != (void **)&v228)
          {
LABEL_140:
            if (v85) {
              (*((void (**)(void **))*v85 + 5))(v85);
            }
            uint64_t v86 = (void **)v243;
            if (!v243) {
              goto LABEL_148;
            }
LABEL_146:
            if (v86 == v242)
            {
              v231 = (void **)&v228;
              (*(void (**)(void *, void **))(v242[0] + 24))(v242, (void **)&v228);
LABEL_178:
              std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>(v4, &v228, v232, 1uLL);
              if (v231 == (void **)&v228)
              {
                ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
              }
              else if (v231)
              {
                (*((void (**)(void))*v231 + 5))();
              }
              uint64_t v96 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
              uint64_t v97 = operator new(0x20uLL);
              *(void *)uint64_t v97 = &unk_26F0C3DC0;
              v97[8] = 1;
              *((_DWORD *)v97 + 3) = 0;
              *((void *)v97 + 2) = v96;
              *((_DWORD *)v97 + 6) = 10;
              v231 = (void **)v97;
              std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>(v4 + 24, &v228, v232, 1uLL);
LABEL_439:
              if (v231 == (void **)&v228)
              {
                ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
                int v180 = v243;
                if (v243 != v242)
                {
LABEL_443:
                  if (v180) {
                    (*(void (**)(void *))(*v180 + 40))(v180);
                  }
                  return;
                }
              }
              else
              {
                if (v231) {
                  (*((void (**)(void))*v231 + 5))();
                }
                int v180 = v243;
                if (v243 != v242) {
                  goto LABEL_443;
                }
              }
              (*(void (**)(void *))(v242[0] + 32))(v242);
              return;
            }
            uint64_t v86 = (void **)(*((uint64_t (**)(void **))*v86 + 2))(v86);
LABEL_148:
            v231 = v86;
            goto LABEL_178;
          }
        }
        ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
        uint64_t v86 = (void **)v243;
        if (!v243) {
          goto LABEL_148;
        }
        goto LABEL_146;
      case 6:
        uint64_t v39 = *(void *)(v4 + 112);
        if (v39)
        {
          if (v39 == v4 + 88)
          {
            v231 = (void **)&v228;
            (*(void (**)(uint64_t, void **))(*(void *)(v4 + 88) + 24))(v4 + 88, (void **)&v228);
          }
          else
          {
            v231 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v39 + 16))(v39);
          }
          uint64_t v56 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
          uint64_t v57 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
          uint64_t v58 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
          v233 = 0;
          uint64_t v59 = operator new(0x20uLL);
          *uint64_t v59 = &unk_26F0C3850;
          v59[1] = v56;
          v59[2] = v57;
          v59[3] = v58;
          v233 = v59;
          uint64_t v60 = *(void *)(v4 + 80);
          if (v60)
          {
            if (v60 == v19)
            {
              v235 = v234;
              (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(v4 + 56, v234);
LABEL_281:
              std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v216, (uint64_t)&v228, 3uLL);
              long long v238 = 0uLL;
              uint64_t v239 = 0;
              std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v238, (uint64_t)v216, (uint64_t)v217, (v217 - (unsigned char *)v216) >> 5);
              v243 = 0;
              v135 = (char *)operator new(0x20uLL);
              *(void *)v135 = &unk_26F0C3508;
              *(_OWORD *)(v135 + 8) = v238;
              *((void *)v135 + 3) = v239;
              v243 = v135;
              std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>(v4, v242, v244, 1uLL);
              if (v243 == v242)
              {
                (*(void (**)(void *))(v242[0] + 32))(v242);
              }
              else if (v243)
              {
                (*(void (**)(void *))(*v243 + 40))(v243);
              }
              v136 = v216;
              if (v216)
              {
                v137 = v216;
                if (v217 != v216)
                {
                  uint64_t v138 = v217 - 32;
                  long long v139 = v217 - 32;
                  do
                  {
                    int v140 = (void *)v139[3];
                    if (v139 == v140)
                    {
                      (*(void (**)(void *))(*v139 + 32))(v139);
                    }
                    else if (v140)
                    {
                      (*(void (**)(void *))(*v140 + 40))(v140);
                    }
                    v138 -= 32;
                    BOOL v9 = v139 == v136;
                    v139 -= 4;
                  }
                  while (!v9);
                  v137 = v216;
                }
                v217 = v136;
                operator delete(v137);
              }
              if (v235 == v234)
              {
                (*(void (**)(void *))(v234[0] + 32))(v234);
                v141 = v233;
                if (v233 != v232) {
                  goto LABEL_299;
                }
              }
              else
              {
                if (v235) {
                  (*(void (**)(void))(*v235 + 40))();
                }
                v141 = v233;
                if (v233 != v232)
                {
LABEL_299:
                  if (v141) {
                    (*(void (**)(void *))(*v141 + 40))(v141);
                  }
                  v142 = v231;
                  if (v231 != (void **)&v228) {
                    goto LABEL_302;
                  }
                  goto LABEL_306;
                }
              }
              (*(void (**)(void *))(v232[0] + 32))(v232);
              v142 = v231;
              if (v231 != (void **)&v228)
              {
LABEL_302:
                if (v142) {
                  (*((void (**)(void **))*v142 + 5))(v142);
                }
                goto LABEL_307;
              }
LABEL_306:
              ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
LABEL_307:
              v228 = (void (**)(void **, void *))&unk_26F0C3F78;
              v231 = (void **)&v228;
              std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>((uint64_t)v11, &v228, v232, 1uLL);
LABEL_308:
              if (v231 == (void **)&v228)
              {
                ((void (*)(void (***)(void **, void *)))v228[4])(&v228);
              }
              else if (v231)
              {
                (*((void (**)(void))*v231 + 5))();
              }
              return;
            }
            uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 16))(v60);
          }
          v235 = (void *)v60;
          goto LABEL_281;
        }
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v228, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 574);
        v198 = (void *)google::LogMessage::stream((google::LogMessage *)&v228);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"Check failed: heuristics.hint_search != nullptr ", 48);
        break;
      default:
        return;
    }
  }
  else
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v228, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 535);
    v197 = (void *)google::LogMessage::stream((google::LogMessage *)&v228);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"Check failed: heuristics.fixed_search != nullptr ", 49);
  }
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v228);
}

void sub_23CD02CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void operations_research::sat::CompleteHeuristics(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::reserve((uint64_t)a3, (a1[1] - *a1) >> 5);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    while (1)
    {
      uint64_t v8 = *(void *)(v6 + 24);
      if (!v8) {
        goto LABEL_8;
      }
      if (v8 != v6) {
        break;
      }
      uint64_t v26 = v25;
      (*(void (**)(void, void *))(**(void **)(v6 + 24) + 24))(*(void *)(v6 + 24), v25);
LABEL_10:
      uint64_t v9 = a2[3];
      if (!v9) {
        goto LABEL_13;
      }
      if ((void *)v9 != a2)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_13:
        long long v28 = (void *)v9;
        goto LABEL_15;
      }
      long long v28 = v27;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v27);
LABEL_15:
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&__p, (uint64_t)v25, 2uLL);
      long long v23 = 0uLL;
      uint64_t v24 = 0;
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v23, (uint64_t)__p, (uint64_t)v22, (v22 - (unsigned char *)__p) >> 5);
      uint64_t v30 = 0;
      uint64_t v10 = (char *)operator new(0x20uLL);
      *(void *)uint64_t v10 = &unk_26F0C3508;
      *(_OWORD *)(v10 + 8) = v23;
      *((void *)v10 + 3) = v24;
      uint64_t v30 = v10;
      unint64_t v11 = a3[1];
      if (v11 < a3[2])
      {
        *(void *)(v11 + 24) = v10;
        uint64_t v30 = 0;
        a3[1] = v11 + 32;
        int64_t v12 = __p;
        if (!__p) {
          goto LABEL_31;
        }
LABEL_22:
        uint64_t v15 = v12;
        if (v22 != (unsigned char *)v12)
        {
          uint64_t v16 = v22 - 32;
          uint64_t v17 = v22 - 32;
          do
          {
            uint64_t v19 = (void *)v17[3];
            if (v17 == v19)
            {
              (*(void (**)(void *))(*v17 + 32))(v17);
            }
            else if (v19)
            {
              (*(void (**)(void *))(*v19 + 40))(v19);
            }
            v16 -= 32;
            BOOL v18 = v17 == v12;
            v17 -= 4;
          }
          while (!v18);
          uint64_t v15 = __p;
        }
        uint64_t v22 = v12;
        operator delete(v15);
        goto LABEL_31;
      }
      uint64_t v13 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>(a3, v29);
      unint64_t v14 = v30;
      a3[1] = v13;
      if (v14 == v29)
      {
        (*(void (**)(void *))(v29[0] + 32))(v29);
        int64_t v12 = __p;
        if (!__p) {
          goto LABEL_31;
        }
        goto LABEL_22;
      }
      if (v14) {
        (*(void (**)(void *))(*v14 + 40))(v14);
      }
      int64_t v12 = __p;
      if (__p) {
        goto LABEL_22;
      }
LABEL_31:
      if (v28 == v27)
      {
        (*(void (**)(void *))(v27[0] + 32))(v27);
        uint64_t v20 = v26;
        if (v26 != v25) {
          goto LABEL_37;
        }
      }
      else
      {
        if (v28) {
          (*(void (**)(void))(*v28 + 40))();
        }
        uint64_t v20 = v26;
        if (v26 != v25)
        {
LABEL_37:
          if (v20) {
            (*(void (**)(void *))(*v20 + 40))(v20);
          }
          goto LABEL_4;
        }
      }
      (*(void (**)(void *))(v25[0] + 32))(v25);
LABEL_4:
      v6 += 32;
      if (v6 == v7) {
        return;
      }
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
LABEL_8:
    uint64_t v26 = (void *)v8;
    goto LABEL_10;
  }
}

void sub_23CD036D0(_Unwind_Exception *a1)
{
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_23CD036E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~function((uint64_t *)va2);
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::~vector[abi:ne180100]((uint64_t *)va);
  std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~function(v3);
  std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~function((uint64_t *)va1);
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::~vector[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void **std::vector<std::function<BOOL ()(void)>>::assign(void **result, unint64_t a2, void **a3)
{
  uint64_t v5 = result;
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = (uint64_t)result[2];
  uint64_t v7 = *result;
  if (a2 <= (v6 - (uint64_t)*result) >> 5)
  {
    uint64_t v14 = (unsigned char *)result[1] - (unsigned char *)v7;
    unint64_t v15 = v14 >> 5;
    if (v14 >> 5 >= a2) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = v14 >> 5;
    }
    for (; v16; --v16)
    {
      uint64_t v17 = (void **)a3[3];
      if (v17)
      {
        if (v17 == a3)
        {
          uint64_t v36 = (void **)v35;
          (*((void (**)(void **, void *))*a3 + 3))(a3, v35);
        }
        else
        {
          uint64_t v36 = (void **)(*((uint64_t (**)(void **))*v17 + 2))(v17);
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v35, v7);
      uint64_t result = v36;
      if (v36 == v35)
      {
        uint64_t result = (void **)(*(uint64_t (**)(void *))(v35[0] + 32))(v35);
      }
      else if (v36)
      {
        uint64_t result = (void **)(*((uint64_t (**)(void))*v36 + 5))();
      }
      v7 += 4;
    }
    if (a2 <= v15)
    {
      uint64_t v21 = (char *)v5[1];
      uint64_t v22 = (uint64_t)*v5 + 32 * a2;
      if (v21 != (char *)v22)
      {
        long long v23 = v21 - 32;
        uint64_t v24 = (void **)(v21 - 32);
        do
        {
          uint64_t result = (void **)v24[3];
          if (v24 == result)
          {
            uint64_t result = (void **)(*((uint64_t (**)(void **))*v24 + 4))(v24);
          }
          else if (result)
          {
            uint64_t result = (void **)(*((uint64_t (**)(void **))*result + 5))(result);
          }
          v23 -= 32;
          BOOL v12 = v24 == (void **)v22;
          v24 -= 4;
        }
        while (!v12);
      }
      v5[1] = (void *)v22;
      return result;
    }
    uint64_t v18 = v5[1];
    uint64_t v19 = (char *)&v18[4 * (a2 - v15)];
    uint64_t v20 = 32 * a2 - 32 * v15;
    while (1)
    {
      uint64_t result = (void **)a3[3];
      if (result)
      {
        if (result == a3)
        {
          v18[3] = v18;
          uint64_t result = (void **)(*(uint64_t (**)(void *, void *))(*(void *)a3[3] + 24))(a3[3], v18);
          goto LABEL_29;
        }
        uint64_t result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
      }
      v18[3] = result;
LABEL_29:
      v18 += 4;
      v20 -= 32;
      if (!v20)
      {
        v5[1] = v19;
        return result;
      }
    }
  }
  if (v7)
  {
    uint64_t v8 = result[1];
    uint64_t v9 = *result;
    if (v8 != v7)
    {
      uint64_t v10 = v8 - 4;
      uint64_t v11 = v8 - 4;
      do
      {
        uint64_t v13 = (void *)v11[3];
        if (v11 == v13)
        {
          (*(void (**)(void *))(*v11 + 32))(v11);
        }
        else if (v13)
        {
          (*(void (**)(void *))(*v13 + 40))(v13);
        }
        v10 -= 4;
        BOOL v12 = v11 == v7;
        v11 -= 4;
      }
      while (!v12);
      uint64_t v9 = *v5;
    }
    v5[1] = v7;
    operator delete(v9);
    uint64_t v6 = 0;
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  if (a2 >> 59) {
    goto LABEL_65;
  }
  uint64_t v25 = v6 >> 4;
  if (v6 >> 4 <= a2) {
    uint64_t v25 = a2;
  }
  BOOL v26 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
  if (!v26) {
    unint64_t v27 = v25;
  }
  if (v27 >> 59) {
LABEL_65:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  uint64_t v28 = 32 * v27;
  uint64_t v29 = (char *)operator new(32 * v27);
  *uint64_t v5 = v29;
  v5[1] = v29;
  v5[2] = &v29[v28];
  uint64_t v30 = &v29[32 * a2];
  uint64_t result = (void **)a3[3];
  if (result)
  {
    uint64_t v31 = 32 * a2 - 32;
LABEL_52:
    if (result != a3)
    {
      uint64_t result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
      goto LABEL_54;
    }
    *((void *)v29 + 3) = v29;
    uint64_t result = (void **)(*((uint64_t (**)(void **, char *))*a3 + 3))(a3, v29);
    while (v31)
    {
      v29 += 32;
      uint64_t result = (void **)a3[3];
      v31 -= 32;
      if (result) {
        goto LABEL_52;
      }
LABEL_54:
      *((void *)v29 + 3) = result;
    }
  }
  else
  {
    if (((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_68;
    }
    uint64_t v32 = ((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    unint64_t v33 = v29 + 56;
    uint64_t v34 = v32 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v33 - 4) = 0;
      *unint64_t v33 = 0;
      v33 += 8;
      v34 -= 2;
    }
    while (v34);
    v29 += 32 * (v32 & 0xFFFFFFFFFFFFFFELL);
    if (v32 != (v32 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_68:
      do
      {
        *((void *)v29 + 3) = 0;
        v29 += 32;
      }
      while (v29 != v30);
    }
  }
  v5[1] = v30;
  return result;
}

void sub_23CD03C10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23CD03C18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristicsVector>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristicsVector>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristicsVector>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristicsVector>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) {
    return;
  }
  if (a2 >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  BOOL v4 = *(unsigned char **)(a1 + 8);
  uint64_t v5 = 32 * a2;
  uint64_t v6 = (char *)operator new(32 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - (unsigned char *)v2];
  if (v4 == (unsigned char *)v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    goto LABEL_20;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v4;
  do
  {
    BOOL v12 = &v8[v9];
    uint64_t v13 = &v4[v9];
    uint64_t v14 = *(char **)&v4[v9 - 8];
    if (!v14)
    {
      uint64_t v11 = v12 - 8;
LABEL_6:
      *(void *)uint64_t v11 = 0;
      goto LABEL_7;
    }
    if (v13 - 32 != v14)
    {
      uint64_t v11 = v10 - 8;
      *((void *)v12 - 1) = v14;
      goto LABEL_6;
    }
    *((void *)v12 - 1) = v12 - 32;
    (*(void (**)(char *))(*((void *)v13 - 4) + 24))(v13 - 32);
LABEL_7:
    v10 -= 32;
    v9 -= 32;
  }
  while (&v4[v9] != (unsigned char *)v2);
  uint64_t v2 = *(void **)a1;
  unint64_t v15 = *(void **)(a1 + 8);
  *(void *)a1 = &v8[v9];
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v15 == v2)
  {
    uint64_t v2 = v15;
    if (v15) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v16 = (char *)(v15 - 4);
    uint64_t v17 = v15 - 4;
    do
    {
      uint64_t v19 = (void *)v17[3];
      if (v17 == v19)
      {
        (*(void (**)(void *))(*v17 + 32))(v17);
      }
      else if (v19)
      {
        (*(void (**)(void *))(*v19 + 40))(v19);
      }
      v16 -= 32;
      BOOL v18 = v17 == v2;
      v17 -= 4;
    }
    while (!v18);
LABEL_20:
    if (v2)
    {
LABEL_21:
      operator delete(v2);
    }
  }
}

uint64_t operations_research::sat::SolveIntegerProblem(operations_research::sat *this, operations_research::sat::Model *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)this);
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 **)(v3 + 120);
  if (v5)
  {
    unsigned __int8 v6 = atomic_load(v5);
    if (v6) {
      return 3;
    }
  }
  if (fmax(*(double *)(v3 + 104) - *(double *)(v3 + 112), 0.0) <= 0.0) {
    return 3;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v3);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = CurrentTimeNanos;
  uint64_t v9 = (int *)(v4 + 32);
  if (*(void *)(v4 + 24) <= CurrentTimeNanos - *(void *)(v4 + 8)) {
    uint64_t v10 = CurrentTimeNanos - *(void *)(v4 + 8);
  }
  else {
    uint64_t v10 = *(void *)(v4 + 24);
  }
  operations_research::RunningMax<long long>::Add((int *)(v4 + 32), v10);
  *(void *)(v4 + 8) = v8;
  if (*(void *)(*(void *)(v4 + 40) + 8 * *(int *)(v4 + 68)) + v8 >= *(void *)(v4 + 16))
  {
    if (!FLAGS_time_limit_use_usertime
      || ((double v12 = *(double *)(v4 + 96), !*(unsigned char *)(v4 + 72))
        ? (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = *(void *)(v4 + 88))
        : (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = absl::lts_2020_02_25::GetCurrentTimeNanos(v11) - *(void *)(v4 + 80) + *(void *)(v4 + 88)),
          double v14 = v12 + (double)v13 * -0.000000001,
          v14 <= 0.0001))
    {
LABEL_13:
      *(void *)(v4 + 16) = 0;
      return 3;
    }
    *(void *)(v4 + 16) = *(void *)(v4 + 8) + (uint64_t)(v14 * 1000000000.0);
  }
  uint64_t v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristics>((uint64_t)this);
  uint64_t v17 = (*(void *)(v16 + 8) - *(void *)v16) >> 5;
  LODWORD(__p[0]) = v17;
  LODWORD(v82) = 0;
  if (!v17) {
    google::MakeCheckOpString<int,int>((int)__p, (int)&v82, "num_policies != 0");
  }
  int v81 = v17;
  __p[0] = (void *)((uint64_t)(*(void *)(v16 + 32) - *(void *)(v16 + 24)) >> 5);
  if (__p[0] != (void *)(int)v17) {
    google::MakeCheckOpString<int,unsigned long>((int)&v81, (int)__p, "num_policies == heuristics.restart_policies.size()");
  }
  BOOL v18 = (void *)*((void *)this + 4);
  if (v18)
  {
    uint64_t v19 = (void *)((char *)this + 32);
    do
    {
      unint64_t v20 = v18[4];
      BOOL v21 = v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
      if (v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d) {
        uint64_t v22 = v18;
      }
      else {
        uint64_t v22 = v18 + 1;
      }
      if (v21) {
        uint64_t v19 = v18;
      }
      BOOL v18 = (void *)*v22;
    }
    while (*v22);
    if (v19 != (void *)((char *)this + 32)
      && v19[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
    {
      uint64_t v23 = v19[5];
      if (v23)
      {
        int v77 = *(_DWORD *)(v23 + 16);
        uint64_t v24 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
        if ((operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v24) & 1) == 0) {
          return *(unsigned __int8 *)(v24 + 496);
        }
        goto LABEL_33;
      }
    }
  }
  int v77 = -1;
  uint64_t v24 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
  if (operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v24))
  {
LABEL_33:
    unint64_t v67 = (void *)((char *)this + 32);
    int v68 = v17;
    int v66 = (operations_research::sat::PseudoCosts *)operations_research::sat::Model::GetOrCreate<operations_research::sat::PseudoCosts>((uint64_t)this);
    uint64_t v72 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)this);
    BOOL v69 = (operations_research::sat::ImpliedBounds *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>((uint64_t)this);
    uint64_t v79 = this;
    uint64_t v25 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)this);
    uint64_t result = operations_research::sat::SatSolver::num_failures((operations_research::sat::SatSolver *)v24);
    uint64_t v75 = result;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v73 = v25;
    uint64_t v74 = *(void *)(v25 + 288);
    int v71 = v77 ^ 1;
    while (1)
    {
      unsigned int v78 = result;
      uint64_t v28 = *(unsigned __int8 **)(v4 + 120);
      if (v28)
      {
        unsigned __int8 v29 = atomic_load(v28);
        if (v29) {
          return 3;
        }
      }
      if (fmax(*(double *)(v4 + 104) - *(double *)(v4 + 112), 0.0) <= 0.0) {
        return 3;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v31 = v30;
      if (*(void *)(v4 + 24) <= v30 - *(void *)(v4 + 8)) {
        uint64_t v32 = v30 - *(void *)(v4 + 8);
      }
      else {
        uint64_t v32 = *(void *)(v4 + 24);
      }
      operations_research::RunningMax<long long>::Add(v9, v32);
      *(void *)(v4 + 8) = v31;
      if (*(void *)(*(void *)(v4 + 40) + 8 * *(int *)(v4 + 68)) + v31 >= *(void *)(v4 + 16))
      {
        if (!FLAGS_time_limit_use_usertime) {
          goto LABEL_13;
        }
        double v34 = *(double *)(v4 + 96);
        if (*(unsigned char *)(v4 + 72))
        {
          double v35 = v34
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v33) - *(void *)(v4 + 80) + *(void *)(v4 + 88))
              * -0.000000001;
          if (v35 <= 0.0001) {
            goto LABEL_13;
          }
        }
        else
        {
          double v35 = v34 + (double)*(uint64_t *)(v4 + 88) * -0.000000001;
          if (v35 <= 0.0001) {
            goto LABEL_13;
          }
        }
        *(void *)(v4 + 16) = *(void *)(v4 + 8) + (uint64_t)(v35 * 1000000000.0);
      }
      if (operations_research::sat::SatSolver::num_failures((operations_research::sat::SatSolver *)v24) - v75 >= v74) {
        return 3;
      }
      uint64_t v36 = *(void *)(*(void *)(v16 + 24) + 32 * *(int *)(v16 + 48) + 24);
      if (!v36) {
        goto LABEL_120;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v36 + 48))(v36))
      {
        if ((operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel((operations_research::sat::SatSolver *)v24) & 1) == 0) {
          return *(unsigned __int8 *)(v24 + 496);
        }
        *(_DWORD *)(v16 + 48) = (*(_DWORD *)(v16 + 48) + 1) % v68;
      }
      if (!*(_DWORD *)(v24 + 304))
      {
        if (!operations_research::sat::ImpliedBounds::EnqueueNewDeductions(v69)) {
          return 1;
        }
        uint64_t v56 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>((uint64_t)v79);
        uint64_t v57 = *v56;
        uint64_t v58 = v56[1];
        if (*v56 != v58)
        {
          while (1)
          {
            uint64_t v59 = *(void *)(v57 + 24);
            if (!v59) {
              break;
            }
            if (((*(uint64_t (**)(uint64_t))(*(void *)v59 + 48))(v59) & 1) == 0) {
              return 1;
            }
            v57 += 32;
            if (v57 == v58) {
              goto LABEL_97;
            }
          }
LABEL_120:
          std::__throw_bad_function_call[abi:ne180100]();
        }
LABEL_97:
        if (*(unsigned char *)(v73 + 135))
        {
          uint64_t v60 = (operations_research::sat::Inprocessing *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Inprocessing>((uint64_t)v79);
          if (!operations_research::sat::Inprocessing::InprocessingRound(v60)) {
            return 1;
          }
        }
      }
      uint64_t v76 = v27;
      while (1)
      {
        uint64_t v37 = *(void *)(*(void *)v16 + 32 * *(int *)(v16 + 48) + 24);
        if (!v37) {
          goto LABEL_120;
        }
        while (1)
        {
          int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 48))(v37);
          if (v38 == -1)
          {
            uint64_t v44 = v26;
            goto LABEL_70;
          }
          unint64_t v39 = (unint64_t)v38 >> 6;
          uint64_t v40 = 3 << (v38 & 0x3E);
          if ((*(void *)(*(void *)(*(void *)(v24 + 208) + 24) + 8 * v39) & v40) == 0) {
            break;
          }
          if (*operations_research::sat::SolveIntegerProblem(operations_research::sat::Model *)::vlocal__ >= 1
            && (operations_research::sat::SolveIntegerProblem(operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)&operations_research::sat::SolveIntegerProblem(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 739);
            uint64_t v41 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
            uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Trying to take a decision that is already assigned!", 51);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" Fix this. Continuing for now...", 32);
            google::LogMessage::~LogMessage((google::LogMessage *)__p);
          }
          uint64_t v37 = *(void *)(*(void *)v16 + 32 * *(int *)(v16 + 48) + 24);
          if (!v37) {
            goto LABEL_120;
          }
        }
        if (*(_DWORD *)(v24 + 304)) {
          break;
        }
        uint64_t v43 = *(void *)(v73 + 160);
        if (v43 < 1) {
          break;
        }
        uint64_t v44 = v26 + 1;
        if (v26 + 1 < v43) {
          goto LABEL_70;
        }
        LODWORD(__p[0]) = v38 >> 1;
        if (!operations_research::sat::ProbeBooleanVariables((BOOL)__p, 1, (uint64_t)v79, 0, 0.1)) {
          return 1;
        }
        uint64_t v26 = 0;
        uint64_t v44 = 0;
        if ((*(void *)(*(void *)(*(void *)(v24 + 208) + 24) + 8 * v39) & v40) == 0) {
          goto LABEL_70;
        }
      }
      uint64_t v44 = v26;
LABEL_70:
      operations_research::sat::GetBoundChanges(v38, (uint64_t)v79, __p);
      if (v77 == -1)
      {
        unint64_t v70 = 0x8000000000000002;
        uint64_t v46 = 0x7FFFFFFFFFFFFFFELL;
        if (v38 == -1)
        {
LABEL_101:
          if (*(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v79)
                        + 455))
          {
            uint64_t v61 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)v79);
            uint64_t v62 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)v79);
            if (*(int *)(v62 + 12) >= 1)
            {
              uint64_t v63 = 0;
              do
                operations_research::sat::SatDecisionPolicy::SetAssignmentPreference(v61, *(_DWORD *)(*(void *)(v62 + 72) + 4 * v63++), 0.0);
              while (v63 < *(int *)(v62 + 12));
            }
          }
          char v64 = 0;
          unsigned int v78 = 2;
          long long v65 = __p[0];
          if (!__p[0]) {
            goto LABEL_107;
          }
          goto LABEL_106;
        }
      }
      else
      {
        uint64_t v45 = *(void *)(v72 + 40);
        unint64_t v70 = *(void *)(v45 + 12 * v77);
        uint64_t v46 = -*(void *)(v45 + 12 * v71);
        if (v38 == -1) {
          goto LABEL_101;
        }
      }
      int v47 = *(_DWORD *)(v24 + 304);
      operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(v24, v38);
      int v48 = *(_DWORD *)(v24 + 304);
      if (!v47 && v48 == 1)
      {
        operations_research::sat::ImpliedBounds::ProcessIntegerTrail((uint64_t)v69, v38);
        int v48 = *(_DWORD *)(v24 + 304);
      }
      if (v77 != -1 && v48 > v47) {
        operations_research::sat::PseudoCosts::UpdateCost(v66, (int **)__p, v46 - v70 + *(void *)(*(void *)(v72 + 40) + 12 * v77) + *(void *)(*(void *)(v72 + 40) + 12 * v71));
      }
      double v49 = operations_research::sat::SatSolver::deterministic_time((operations_research::sat::SatSolver *)v24);
      *(double *)(v4 + 112) = *(double *)(v4 + 112) + v49 - *(double *)(v24 + 1304);
      *(double *)(v24 + 1304) = v49;
      if (operations_research::sat::SatSolver::ReapplyAssumptionsIfNeeded((operations_research::sat::SatSolver *)v24))
      {
        uint64_t v51 = v67;
        uint64_t v52 = (void *)*v67;
        if (*v67)
        {
          do
          {
            unint64_t v53 = v52[4];
            BOOL v54 = v53 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d;
            if (v53 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d) {
              uint64_t v55 = v52;
            }
            else {
              uint64_t v55 = v52 + 1;
            }
            if (v54) {
              uint64_t v51 = v52;
            }
            uint64_t v52 = (void *)*v55;
          }
          while (*v55);
          if (v51 != v67
            && v51[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d
            && v51[5])
          {
            if (v76 >= 99)
            {
              operations_research::sat::RecordLPRelaxationValues(v79, v50);
              uint64_t v76 = 0;
            }
            else
            {
              ++v76;
            }
          }
        }
        char v64 = 1;
        long long v65 = __p[0];
        if (!__p[0]) {
          goto LABEL_107;
        }
      }
      else
      {
        char v64 = 0;
        unsigned int v78 = *(unsigned __int8 *)(v24 + 496);
        long long v65 = __p[0];
        if (!__p[0]) {
          goto LABEL_107;
        }
      }
LABEL_106:
      __p[1] = v65;
      operator delete(v65);
LABEL_107:
      uint64_t v26 = v44;
      uint64_t v9 = (int *)(v4 + 32);
      uint64_t v27 = v76;
      uint64_t result = v78;
      if ((v64 & 1) == 0) {
        return result;
      }
    }
  }
  return *(unsigned __int8 *)(v24 + 496);
}

void sub_23CD048A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD048B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD048B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CD048E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::Inprocessing>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Inprocessing>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Inprocessing>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::Inprocessing>(void)::d)
  {
LABEL_12:
    operations_research::sat::Model::MyNew<operations_research::sat::Inprocessing>();
  }
  return v2[5];
}

uint64_t operations_research::sat::ResetAndSolveIntegerProblem(int **a1, operations_research::sat *a2)
{
  BOOL v4 = (unsigned __int8 *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  if ((operations_research::sat::SatSolver::ResetToLevelZero((operations_research::sat::SatSolver *)v4) & 1) == 0) {
    return v4[496];
  }
  uint64_t v5 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>((uint64_t)a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (*v5 == v7)
  {
LABEL_6:
    if (operations_research::sat::SatSolver::ResetWithGivenAssumptions((uint64_t)v4, a1))
    {
      return operations_research::sat::SolveIntegerProblem(a2, v9);
    }
    return v4[496];
  }
  while (1)
  {
    uint64_t v8 = *(void *)(v6 + 24);
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8) & 1) == 0) {
      return 1;
    }
    v6 += 32;
    if (v6 == v7) {
      goto LABEL_6;
    }
  }
}

void *std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3488;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3488;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  v2[1] = 0;
  void *v2 = &unk_26F0C3488;
  v2[2] = 0;
  v2[3] = 0;
  BOOL v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_23CD04CE4(_Unwind_Exception *a1)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(__n128 *a1, __n128 *a2)
{
  a2->n128_u64[1] = 0;
  a2->n128_u64[0] = (unint64_t)&unk_26F0C3488;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  int64_t v5 = (unsigned char *)a1->n128_u64[1];
  BOOL v4 = (unsigned char *)a1[1].n128_u64[0];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    a2->n128_u64[1] = (unint64_t)v7;
    a2[1].n128_u64[0] = (unint64_t)v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    a2[1].n128_u64[1] = (unint64_t)v8;
    memcpy(v7, v5, v6);
    a2[1].n128_u64[0] = (unint64_t)v8;
  }
  __n128 result = a1[2];
  a2[2] = result;
  return result;
}

void sub_23CD04DB0(_Unwind_Exception *exception_object)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

unint64_t std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 8);
  uint64_t v2 = *(int **)(a1 + 16);
  if (v1 == v2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v4 = *v1;
    int64_t v5 = *(void **)(a1 + 32);
    unint64_t v6 = *(int *)(v5[51] + 4 * v4);
    if (v6 == -1
      || ((*(void *)(*(void *)(v5[117] + 24) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    {
      uint64_t v7 = v5[5];
      int64_t v8 = *(void *)(v7 + 12 * (int)v4);
      if (v8 + *(void *)(v7 + 12 * (int)(v4 ^ 1)))
      {
        unsigned int v9 = v4 ^ 1;
        int64_t v10 = v8 >= (uint64_t)0x8000000000000002 ? -v8 : 0x7FFFFFFFFFFFFFFFLL;
        unint64_t result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(*(unsigned int **)(a1 + 40), (const char *)__PAIR64__(v10, v9), SHIDWORD(v10));
        if (result != -1) {
          break;
        }
      }
    }
    if (++v1 == v2) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat35FirstUnassignedVarAtItsMinHeuristicERKNSt3__16vectorIN3gtl7IntTypeINS0"
                     "_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat35FirstUnassignedVarAtItsMinHeuristicERKNSt3__16vectorIN3gtl7"
                                "IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat35FirstUnassignedVarAtItsMinHeuristicERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat35FirstUnassignedVarAtItsMinHeuristicERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int64_t v5 = result;
    if (a4 >> 59) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t result = operator new(32 * a4);
    int64_t v8 = result;
    *int64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[4 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      while (1)
      {
        int64_t v10 = &v8[v9 / 8];
        uint64_t v11 = a2 + v9;
        uint64_t v12 = *(void *)(a2 + v9 + 24);
        if (v12)
        {
          if (v11 == v12)
          {
            v8[v9 / 8 + 3] = v10;
            unint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)(a2 + v9) + 24))(v11, &v8[v9 / 8]);
            goto LABEL_7;
          }
          unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v12 + 16))(*(void *)(a2 + v9 + 24));
        }
        else
        {
          unint64_t result = 0;
        }
        v10[3] = result;
LABEL_7:
        v9 += 32;
        if (a2 + v9 == a3)
        {
          int64_t v8 = (void *)((char *)v8 + v9);
          break;
        }
      }
    }
    v5[1] = v8;
  }
  return result;
}

void sub_23CD050D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_23CD050E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>();
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3508;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    unint64_t v3 = (void *)a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      int64_t v5 = v3 - 4;
      unint64_t v6 = v3 - 4;
      do
      {
        int64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3508;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    unint64_t v3 = (void *)a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      int64_t v5 = v3 - 4;
      unint64_t v6 = v3 - 4;
      do
      {
        int64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_26F0C3508;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(v2 + 1, *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
  return v2;
}

void sub_23CD05368(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C3508;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(a2 + 1, *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
}

void std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(void **)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v1)
    {
      int64_t v5 = v3 - 4;
      unint64_t v6 = v3 - 4;
      do
      {
        int64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v1;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v1;
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    unint64_t v3 = (void *)__p[2];
    uint64_t v4 = (void *)__p[1];
    if (v3 != v2)
    {
      int64_t v5 = v3 - 4;
      unint64_t v6 = v3 - 4;
      do
      {
        int64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v1 == v2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v1 + 24);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
    if (result != -1) {
      break;
    }
    v1 += 32;
    if (v1 == v2) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16SequentialSearchENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17Lit"
                     "eralIndex_tag_EiEEvEEENS1_9allocatorIS9_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16SequentialSearchENSt3__16vectorINS1_8functionIFN3gtl7IntTyp"
                                "eINS0_17LiteralIndex_tag_EiEEvEEENS1_9allocatorIS9_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16SequentialSearchENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEENS1_9allocatorIS9_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16SequentialSearchENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEENS1_9allocatorIS9_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int64_t v5 = result;
    if (a4 >> 59) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = operator new(32 * a4);
    int64_t v8 = result;
    *int64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[4 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = &v8[v9 / 8];
        uint64_t v11 = a2 + v9;
        uint64_t v12 = *(void *)(a2 + v9 + 24);
        if (v12)
        {
          if (v11 == v12)
          {
            v8[v9 / 8 + 3] = v10;
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)(a2 + v9) + 24))(v11, &v8[v9 / 8]);
            goto LABEL_7;
          }
          uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v12 + 16))(*(void *)(a2 + v9 + 24));
        }
        else
        {
          uint64_t result = 0;
        }
        v10[3] = result;
LABEL_7:
        v9 += 32;
        if (a2 + v9 == a3)
        {
          int64_t v8 = (void *)((char *)v8 + v9);
          break;
        }
      }
    }
    v5[1] = v8;
  }
  return result;
}

void sub_23CD057A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_23CD057B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>();
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      int64_t v5 = **result;
      if (v4 != v3)
      {
        unint64_t v6 = v4 - 4;
        BOOL v7 = v4 - 4;
        do
        {
          uint64_t v9 = (void *)v7[3];
          if (v7 == v9)
          {
            (*(void (**)(void *))(*v7 + 32))(v7);
          }
          else if (v9)
          {
            (*(void (**)(void *))(*v9 + 40))(v9);
          }
          v6 -= 4;
          BOOL v8 = v7 == v3;
          v7 -= 4;
        }
        while (!v8);
        int64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3588;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = (void *)a1[7];
  if (v3)
  {
    uint64_t v4 = (void *)a1[8];
    int64_t v5 = (void *)a1[7];
    if (v4 != v3)
    {
      unint64_t v6 = v4 - 4;
      BOOL v7 = v4 - 4;
      do
      {
        uint64_t v9 = (void *)v7[3];
        if (v7 == v9)
        {
          (*(void (**)(void *))(*v7 + 32))(v7);
        }
        else if (v9)
        {
          (*(void (**)(void *))(*v9 + 40))(v9);
        }
        v6 -= 4;
        BOOL v8 = v7 == v3;
        v7 -= 4;
      }
      while (!v8);
      int64_t v5 = (void *)a1[7];
    }
    a1[8] = v3;
    operator delete(v5);
  }
  uint64_t v10 = (void *)a1[4];
  if (v10 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    return a1;
  }
  else
  {
    if (v10) {
      (*(void (**)(void *))(*v10 + 40))(v10);
    }
    return a1;
  }
}

void std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3588;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = (void *)a1[7];
  if (v3)
  {
    uint64_t v4 = (void *)a1[8];
    int64_t v5 = (void *)a1[7];
    if (v4 != v3)
    {
      unint64_t v6 = v4 - 4;
      BOOL v7 = v4 - 4;
      do
      {
        uint64_t v9 = (void *)v7[3];
        if (v7 == v9)
        {
          (*(void (**)(void *))(*v7 + 32))(v7);
        }
        else if (v9)
        {
          (*(void (**)(void *))(*v9 + 40))(v9);
        }
        v6 -= 4;
        BOOL v8 = v7 == v3;
        v7 -= 4;
      }
      while (!v8);
      int64_t v5 = (void *)a1[7];
    }
    a1[8] = v3;
    operator delete(v5);
  }
  uint64_t v10 = (void *)a1[4];
  if (v10 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v10)
  {
    (*(void (**)(void *))(*v10 + 40))(v10);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x50uLL);
  void *v2 = &unk_26F0C3588;
  std::__compressed_pair_elem<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CD05C18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C3588;
  return std::__compressed_pair_elem<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(void *a1)
{
  uint64_t v2 = a1 + 1;
  unint64_t v3 = (void *)a1[7];
  if (v3)
  {
    uint64_t v4 = (void *)a1[8];
    int64_t v5 = (void *)a1[7];
    if (v4 != v3)
    {
      unint64_t v6 = v4 - 4;
      BOOL v7 = v4 - 4;
      do
      {
        uint64_t v9 = (void *)v7[3];
        if (v7 == v9)
        {
          (*(void (**)(void *))(*v7 + 32))(v7);
        }
        else if (v9)
        {
          (*(void (**)(void *))(*v9 + 40))(v9);
        }
        v6 -= 4;
        BOOL v8 = v7 == v3;
        v7 -= 4;
      }
      while (!v8);
      int64_t v5 = (void *)a1[7];
    }
    a1[8] = v3;
    operator delete(v5);
  }
  uint64_t result = a1[4];
  if ((void *)result == v2)
  {
    uint64_t v12 = *(uint64_t (**)(void *))(*v2 + 32);
    return v12(v2);
  }
  else if (result)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v11();
  }
  return result;
}

void std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 8;
  unint64_t v3 = (void *)*((void *)__p + 7);
  if (v3)
  {
    uint64_t v4 = (void *)*((void *)__p + 8);
    int64_t v5 = (void *)*((void *)__p + 7);
    if (v4 != v3)
    {
      unint64_t v6 = v4 - 4;
      BOOL v7 = v4 - 4;
      do
      {
        uint64_t v9 = (void *)v7[3];
        if (v7 == v9)
        {
          (*(void (**)(void *))(*v7 + 32))(v7);
        }
        else if (v9)
        {
          (*(void (**)(void *))(*v9 + 40))(v9);
        }
        v6 -= 4;
        BOOL v8 = v7 == v3;
        v7 -= 4;
      }
      while (!v8);
      int64_t v5 = (void *)*((void *)__p + 7);
    }
    *((void *)__p + 8) = v3;
    operator delete(v5);
  }
  uint64_t v10 = (char *)*((void *)__p + 4);
  if (v10 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v10)
  {
    (*(void (**)(char *))(*(void *)v10 + 40))(v10);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(void *a1)
{
  uint64_t v2 = a1[4];
  if (!v2) {
LABEL_25:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  if (v3 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = v3;
  int64_t v5 = (void *)a1[5];
  uint64_t v6 = v5[14];
  unint64_t v7 = (unint64_t)(v5[15] - v6) >> 5;
  BOOL v8 = v5 + 7;
  uint64_t v9 = (void *)(v6 + 32 * (int)v3);
  if ((int)v3 >= (int)v7) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t v13 = *v10;
  uint64_t v12 = (int *)(v10 + 1);
  unint64_t v11 = v13;
  if (v13) {
    uint64_t v12 = *(int **)v12;
  }
  if (v11 >= 2)
  {
    unint64_t v15 = &v12[3 * (v11 >> 1)];
    while (1)
    {
      uint64_t v16 = *v12;
      uint64_t v17 = a1[6];
      unint64_t v18 = *(int *)(*(void *)(v17 + 408) + 4 * v16);
      if (v18 == -1
        || ((*(void *)(*(void *)(*(void *)(v17 + 936) + 24) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*(void *)(v17 + 408) + 4 * v16)) & 1) == 0)
      {
        uint64_t v19 = a1[7];
        uint64_t v20 = a1[8];
        if (v19 != v20) {
          break;
        }
      }
LABEL_15:
      v12 += 3;
      if (v12 == v15) {
        goto LABEL_9;
      }
    }
    while (1)
    {
      v24[0] = v16;
      uint64_t v21 = *(void *)(v19 + 24);
      if (!v21) {
        goto LABEL_25;
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v21 + 48))(v21, v24);
      if (v22 != -1) {
        return v22;
      }
      v19 += 32;
      if (v19 == v20) {
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_9:
    if (*operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0::operator() const(void)::vlocal__ >= 2
      && (operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0::operator() const(void)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0::operator() const(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 234);
      double v14 = (void *)google::LogMessage::stream((google::LogMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Value selection: using default decision.", 40);
      google::LogMessage::~LogMessage((google::LogMessage *)v24);
    }
  }
  return v4;
}

void sub_23CD06108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24SequentialValueSelectionENSt3__16vectorINS1_8functionIFN3gtl7IntTypeIN"
                     "S0_17LiteralIndex_tag_EiEENS5_INS0_20IntegerVariable_tag_EiEEEEENS1_9allocatorISB_EEEENS3_IFS7_vEEE"
                     "PNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24SequentialValueSelectionENSt3__16vectorINS1_8functionIFN3gt"
                                "l7IntTypeINS0_17LiteralIndex_tag_EiEENS5_INS0_20IntegerVariable_tag_EiEEEEENS1_9allocato"
                                "rISB_EEEENS3_IFS7_vEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24SequentialValueSelectionENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEENS5_INS0_20IntegerVariable_tag_EiEEEEENS1_9allocatorISB_EEEENS3_IFS7_vEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24SequentialValueSelectionENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEENS5_INS0_20IntegerVariable_tag_EiEEEEENS1_9allocatorISB_EEEENS3_IFS7_vEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>((void *)(a1 + 48), *(void *)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 5);
  return a1;
}

void sub_23CD06258(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3 == v1)
  {
    std::__compressed_pair_elem<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0 const&,0ul>(v1);
    _Unwind_Resume(a1);
  }
  std::__compressed_pair_elem<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0 const&,0ul>(v3);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>(uint64_t *a1, void *a2)
{
  uint64_t v4 = (void *)*a1;
  uint64_t v3 = (void *)a1[1];
  uint64_t v5 = ((uint64_t)v3 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = a1[2] - (void)v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
    uint64_t v11 = (uint64_t)&v10[32 * v5];
    uint64_t v12 = a2 + 3;
    unint64_t v13 = (void *)a2[3];
    if (v13)
    {
LABEL_10:
      if (v13 == a2)
      {
        *(void *)(v11 + 24) = v11;
        (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v11);
        uint64_t v4 = (void *)*a1;
        uint64_t v3 = (void *)a1[1];
        uint64_t v14 = v11;
        if (v3 == (void *)*a1) {
          goto LABEL_26;
        }
      }
      else
      {
        *(void *)(v11 + 24) = v13;
        *uint64_t v12 = 0;
        uint64_t v14 = v11;
        if (v3 == v4) {
          goto LABEL_26;
        }
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 32 * v5;
    uint64_t v12 = a2 + 3;
    unint64_t v13 = (void *)a2[3];
    if (v13) {
      goto LABEL_10;
    }
  }
  *(void *)(v11 + 24) = 0;
  uint64_t v14 = v11;
  if (v3 != v4)
  {
LABEL_17:
    uint64_t v15 = 0;
    uint64_t v16 = v3;
    while (1)
    {
      uint64_t v18 = v11 + v15 * 8;
      uint64_t v19 = &v3[v15];
      uint64_t v20 = (void *)v3[v15 - 1];
      if (v20)
      {
        if (v19 - 4 == v20)
        {
          *(void *)(v18 - 8) = v18 - 32;
          (*(void (**)(void))(*(void *)*(v19 - 1) + 24))(*(v19 - 1));
          goto LABEL_20;
        }
        uint64_t v17 = v16 - 1;
        *(void *)(v18 - 8) = v20;
      }
      else
      {
        uint64_t v17 = (void *)(v18 - 8);
      }
      *uint64_t v17 = 0;
LABEL_20:
      v16 -= 4;
      v15 -= 4;
      if (&v3[v15] == v4)
      {
        uint64_t v14 = v11 + v15 * 8;
        break;
      }
    }
  }
LABEL_26:
  uint64_t v21 = &v10[32 * v9];
  uint64_t v23 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  uint64_t v24 = v11 + 32;
  *a1 = v14;
  a1[1] = v11 + 32;
  a1[2] = (uint64_t)v21;
  if (v22 != v23)
  {
    uint64_t v25 = v22 - 32;
    uint64_t v26 = v22 - 32;
    do
    {
      uint64_t v28 = (char *)*((void *)v26 + 3);
      if (v26 == v28)
      {
        (*(void (**)(char *))(*(void *)v26 + 32))(v26);
      }
      else if (v28)
      {
        (*(void (**)(char *))(*(void *)v28 + 40))(v28);
      }
      v25 -= 32;
      BOOL v27 = v26 == v23;
      v26 -= 32;
    }
    while (!v27);
  }
  if (v23) {
    operator delete(v23);
  }
  return v24;
}

void std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F0C3608;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C3608;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, _DWORD *a2)
{
  return operations_research::sat::SplitAroundLpValue(*a2 & 0xFFFFFFFE, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17L"
                     "iteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntT"
                                "ypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C3698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::SplitUsingBestSolutionValueInRepository(*a2, (absl::lts_2020_02_25 **)(*(void *)(a1 + 16) + 304), *(void *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17L"
                     "iteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntT"
                                "ypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C3718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (*operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2::operator() const(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::vlocal__ >= 1
    && (operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2::operator() const(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2::operator() const(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 293);
    uint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Using relaxation solution value selection heuristic.", 52);
    google::LogMessage::~LogMessage((google::LogMessage *)v6);
  }
  return operations_research::sat::SplitUsingBestSolutionValueInRepository(v3, *(absl::lts_2020_02_25 ***)(a1 + 16), *(void *)(a1 + 8));
}

void sub_23CD0687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17L"
                     "iteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntT"
                                "ypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0C3798;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C3798;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::ChooseBestObjectiveValue(*a2, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17L"
                     "iteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntT"
                                "ypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void *operations_research::sat::Model::Delete<operations_research::sat::SatDecisionPolicy>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SatDecisionPolicy *)a1[1];
  *a1 = &unk_26F0C3818;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatDecisionPolicy::~SatDecisionPolicy(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SatDecisionPolicy>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SatDecisionPolicy *)a1[1];
  *a1 = &unk_26F0C3818;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatDecisionPolicy::~SatDecisionPolicy(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::SatDecisionPolicy::~SatDecisionPolicy(operations_research::sat::SatDecisionPolicy *this)
{
  uint64_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 32);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 29);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 26);
  if (v5)
  {
    *((void *)this + 27) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 23);
  if (v6)
  {
    *((void *)this + 24) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 20);
  if (v7)
  {
    *((void *)this + 21) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 16);
  if (v8)
  {
    *((void *)this + 17) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 12);
  if (v9)
  {
    *((void *)this + 13) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 8);
  if (v10)
  {
    *((void *)this + 9) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 5);
  if (v11)
  {
    *((void *)this + 6) = v11;
    operator delete(v11);
  }
}

void std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F0C3850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(a1 + 16) + 12) == *(_DWORD *)(*(void *)(a1 + 8) + 16)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = operations_research::sat::SatDecisionPolicy::NextBranch(*(std::vector<int> **)(a1 + 24));
  if (((*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 208) + 24)
                   + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v4, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 320);
    unint64_t v3 = (void *)google::LogMessage::stream((google::LogMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !sat_solver->Assignment().LiteralIsAssigned(result) ", 66);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v4);
  }
  return result;
}

void sub_23CD06D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18SatSolverHeuristicEPNS0_5ModelEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat18SatSolverHeuristicEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18SatSolverHeuristicEPNS0_5ModelEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18SatSolverHeuristicEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F0C38D0;
  return result;
}

void std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C38D0;
}

uint64_t std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()()
{
  return 0xFFFFFFFFLL;
}

uint64_t std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void *operations_research::sat::Model::Delete<operations_research::sat::PseudoCosts>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C3950;
  a1[1] = 0;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 24);
    if (v3)
    {
      *(void *)(v2 + 32) = v3;
      operator delete(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1060C405E3B83C8);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PseudoCosts>::~Delete(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_26F0C3950;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 24);
    if (v2)
    {
      *(void *)(v1 + 32) = v2;
      operator delete(v2);
    }
    MEMORY[0x23ECF2BC0](v1, 0x1060C405E3B83C8);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C3988;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3988;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  unint64_t result = operations_research::sat::PseudoCosts::GetBestDecisionVar(*(operations_research::sat::PseudoCosts **)(a1 + 8));
  if (result != -1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    return operations_research::sat::GreaterOrEqualToMiddleValue(result, v3);
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void std::discrete_distribution<int>::param_type::__init(double **a1)
{
  uint64_t v1 = (float64x2_t *)*a1;
  unint64_t v2 = (unint64_t)a1[1];
  if (*a1 != (double *)v2)
  {
    uint64_t v4 = v2 - (void)v1;
    if (v2 - (unint64_t)v1 >= 9)
    {
      double v5 = 0.0;
      unint64_t v6 = *a1;
      if ((unint64_t)(v4 - 8) < 8) {
        goto LABEL_33;
      }
      unint64_t v7 = ((unint64_t)(v4 - 8) >> 3) + 1;
      unint64_t v6 = &v1->f64[v7 & 0x3FFFFFFFFFFFFFFELL];
      uint64_t v8 = &v1->f64[1];
      double v5 = 0.0;
      uint64_t v9 = v7 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        double v5 = v5 + *(v8 - 1) + *v8;
        v8 += 2;
        v9 -= 2;
      }
      while (v9);
      if (v7 != (v7 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_33:
        do
        {
          double v10 = *v6++;
          double v5 = v5 + v10;
        }
        while (v6 != (double *)v2);
      }
      uint64_t v11 = v4 >> 3;
      if ((unint64_t)v1 < v2)
      {
        uint64_t v12 = &v1->f64[1];
        if (v2 > (unint64_t)&v1->f64[1]) {
          uint64_t v12 = a1[1];
        }
        unint64_t v13 = (unint64_t)v12 + ~(unint64_t)v1;
        uint64_t v14 = *a1;
        if (v13 < 0x18) {
          goto LABEL_34;
        }
        uint64_t v15 = (v13 >> 3) + 1;
        uint64_t v14 = &v1->f64[v15 & 0x3FFFFFFFFFFFFFFCLL];
        float64x2_t v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0);
        uint64_t v17 = v1 + 1;
        uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v19 = vdivq_f64(*v17, v16);
          v17[-1] = vdivq_f64(v17[-1], v16);
          *uint64_t v17 = v19;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          do
          {
            *uint64_t v14 = *v14 / v5;
            ++v14;
          }
          while ((unint64_t)v14 < v2);
        }
      }
      size_t v20 = v11 - 1;
      if (v11 == 1)
      {
        uint64_t v23 = 0;
        uint64_t v22 = 0;
        uint64_t v24 = (double *)(v2 - 8);
        if (v1 == (float64x2_t *)(v2 - 8))
        {
LABEL_27:
          *a1 = v22;
          a1[1] = v23;
          a1[2] = (double *)v20;
          if (v1) {
            operator delete(v1);
          }
          return;
        }
      }
      else
      {
        if (v20 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        size_t v21 = v20;
        uint64_t v22 = (double *)operator new(8 * v20);
        size_t v20 = (size_t)&v22[v20];
        bzero(v22, v21 * 8);
        uint64_t v23 = &v22[v21];
        uint64_t v24 = (double *)(v2 - 8);
        if (v1 == (float64x2_t *)(v2 - 8)) {
          goto LABEL_27;
        }
      }
      uint64_t v25 = &v1->f64[1];
      double v26 = v1->f64[0];
      *uint64_t v22 = v1->f64[0];
      if (&v1->f64[1] != v24)
      {
        BOOL v27 = v22 + 1;
        do
        {
          double v28 = *v25++;
          double v26 = v26 + v28;
          *v27++ = v26;
        }
        while (v25 != v24);
      }
      goto LABEL_27;
    }
    a1[1] = (double *)v1;
    std::vector<double>::shrink_to_fit((uint64_t)a1);
  }
}

void sub_23CD07308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::shrink_to_fit(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  unint64_t v2 = *(unsigned char **)a1;
  uint64_t v3 = (uint64_t)&v1[-*(void *)a1];
  uint64_t v4 = v3 >> 3;
  if (v3 >> 3 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) {
    return;
  }
  int64_t v6 = v1 - v2;
  if (v1 == v2)
  {
    uint64_t v8 = 8 * v4;
    uint64_t v9 = 8 * v4;
    goto LABEL_12;
  }
  if (v3 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v7 = (char *)operator new((size_t)&v1[-*(void *)a1]);
  uint64_t v8 = (uint64_t)&v7[8 * v4];
  if ((unint64_t)(v6 - 8) < 0x58)
  {
    uint64_t v9 = (uint64_t)&v7[8 * v4];
    do
    {
LABEL_11:
      uint64_t v17 = *((void *)v1 - 1);
      v1 -= 8;
      *(void *)(v9 - 8) = v17;
      v9 -= 8;
    }
    while (v1 != v2);
    goto LABEL_12;
  }
  uint64_t v9 = (uint64_t)&v7[8 * v4];
  if ((unint64_t)(&v1[-v3] - v7) < 0x20) {
    goto LABEL_11;
  }
  unint64_t v10 = ((unint64_t)(v6 - 8) >> 3) + 1;
  uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v12 = &v1[-v11];
  uint64_t v9 = v8 - v11;
  unint64_t v13 = &v7[8 * v4 - 16];
  uint64_t v14 = (long long *)(v1 - 16);
  uint64_t v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *v14;
    *((_OWORD *)v13 - 1) = *(v14 - 1);
    *(_OWORD *)unint64_t v13 = v16;
    v13 -= 32;
    v14 -= 2;
    v15 -= 4;
  }
  while (v15);
  uint64_t v1 = v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v8;
  if (v2)
  {
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26F0C3A08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C3A08;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, _DWORD *a2)
{
  return operations_research::sat::SplitAroundLpValue(*a2 & 0xFFFFFFFE, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C3A88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3A88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::SplitUsingBestSolutionValueInRepository(*a2, (absl::lts_2020_02_25 **)(*(void *)(a1 + 16) + 304), *(void *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C3B08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3B08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::SplitUsingBestSolutionValueInRepository(*a2, *(absl::lts_2020_02_25 ***)(a1 + 16), *(void *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0C3B88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C3B88;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::GreaterOrEqualToMiddleValue(*a2, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_3") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_3")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C3C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 40);
  int64_t v3 = *(void *)(v2 + 12 * *a2);
  if (!(v3 + *(void *)(v2 + 12 * (*a2 ^ 1)))) {
    return 0xFFFFFFFFLL;
  }
  double v5 = *(unsigned int **)(a1 + 16);
  if (v3 >= (uint64_t)0x8000000000000002) {
    uint64_t v6 = -v3;
  }
  else {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  LODWORD(v7) = *a2 ^ 1;
  HIDWORD(v7) = v6;
  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v5, v7, SHIDWORD(v6));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_4") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_4")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

uint64_t std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<int *>>(uint64_t a1, int *a2, int *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = (double *)operator new(2 * v4);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v7[v4 >> 2];
    if (a2 == a3)
    {
      unint64_t v10 = v7;
    }
    else
    {
      uint64_t v8 = a2;
      if ((unint64_t)(v4 - 4) < 0x1C) {
        goto LABEL_8;
      }
      unint64_t v9 = ((unint64_t)(v4 - 4) >> 2) + 1;
      uint64_t v8 = &a2[v9 & 0x7FFFFFFFFFFFFFF8];
      unint64_t v10 = &v7[v9 & 0x7FFFFFFFFFFFFFF8];
      uint64_t v11 = (float64x2_t *)(v7 + 4);
      uint64_t v12 = a2 + 4;
      uint64_t v13 = v9 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v14 = *((_OWORD *)v12 - 1);
        v15.i64[0] = (int)v14;
        v15.i64[1] = SDWORD1(v14);
        float64x2_t v16 = vcvtq_f64_s64(v15);
        v15.i64[0] = SDWORD2(v14);
        v15.i64[1] = SHIDWORD(v14);
        float64x2_t v17 = vcvtq_f64_s64(v15);
        v15.i64[0] = (int)*(_OWORD *)v12;
        v15.i64[1] = (int)HIDWORD(*(void *)v12);
        float64x2_t v18 = vcvtq_f64_s64(v15);
        v15.i64[0] = (int)*((void *)v12 + 1);
        v15.i64[1] = (int)HIDWORD(*(_OWORD *)v12);
        v11[-2] = v16;
        v11[-1] = v17;
        *uint64_t v11 = v18;
        v11[1] = vcvtq_f64_s64(v15);
        v11 += 4;
        v12 += 8;
        v13 -= 8;
      }
      while (v13);
      v7 += v9 & 0x7FFFFFFFFFFFFFF8;
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_8:
        unint64_t v10 = v7;
        do
        {
          int v19 = *v8++;
          *v10++ = (double)v19;
        }
        while (v8 != a3);
      }
    }
    *(void *)(a1 + 8) = v10;
  }
  std::discrete_distribution<int>::param_type::__init((double **)a1);
  return a1;
}

void sub_23CD07B70(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3C88;
  operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5(a1 + 1);
  return a1;
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3C88;
  operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5(a1 + 1);

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0xA0uLL);
  void *v2 = &unk_26F0C3C88;
  std::__compressed_pair_elem<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CD07C8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C3C88;
  return std::__compressed_pair_elem<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5 const&,0ul>((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  return operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5((void *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(void *a1)
{
  operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5(a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  if (!*(_DWORD *)(*(void *)(a1 + 8) + 304))
  {
    uint64_t v2 = (operations_research::sat *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>(*(void *)(a1 + 16));
    uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(*(void *)(a1 + 16));
    operations_research::sat::RandomizeDecisionHeuristic<operations_research::sat::ModelRandomGenerator>(v2, v3);
    operations_research::sat::SatDecisionPolicy::ResetDecisionHeuristic(*(operations_research::sat::SatDecisionPolicy **)(a1 + 24));
    *(_DWORD *)(a1 + 32) = std::discrete_distribution<int>::operator()<operations_research::sat::ModelRandomGenerator>(a1 + 40, (uint64_t)v2, (double **)(a1 + 40));
    *(_DWORD *)(a1 + 64) = std::discrete_distribution<int>::operator()<operations_research::sat::ModelRandomGenerator>(a1 + 72, (uint64_t)v2, (double **)(a1 + 72));
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 96) + 32 * *(int *)(a1 + 32) + 24);
  if (!v4) {
LABEL_21:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  if (v5 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = v5;
  if (*(int *)(a1 + 64) < (unint64_t)((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))
  {
    uint64_t v7 = *(void *)(a1 + 144);
    uint64_t v8 = *(void *)(v7 + 112);
    unint64_t v9 = (unint64_t)(*(void *)(v7 + 120) - v8) >> 5;
    uint64_t v10 = v7 + 56;
    uint64_t v11 = v8 + 32 * (int)v5;
    uint64_t v12 = (void *)((int)v5 >= (int)v9 ? v10 : v11);
    unint64_t v15 = *v12;
    long long v14 = (int *)(v12 + 1);
    unint64_t v13 = v15;
    if (v15) {
      long long v14 = *(int **)v14;
    }
    if (v13 >= 2)
    {
      uint64_t v16 = 12 * (v13 >> 1);
      while (1)
      {
        uint64_t v17 = *v14;
        uint64_t v18 = *(void *)(a1 + 152);
        unint64_t v19 = *(int *)(*(void *)(v18 + 408) + 4 * v17);
        if (v19 == -1
          || ((*(void *)(*(void *)(*(void *)(v18 + 936) + 24) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*(void *)(v18 + 408) + 4 * v17)) & 1) == 0)
        {
          uint64_t v20 = *(int *)(a1 + 64);
          uint64_t v21 = *(void *)(a1 + 120);
          int v25 = *v14;
          uint64_t v22 = *(void *)(v21 + 32 * v20 + 24);
          if (!v22) {
            goto LABEL_21;
          }
          uint64_t v23 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v22 + 48))(v22, &v25);
          if (v23 != -1) {
            return v23;
          }
        }
        v14 += 3;
        v16 -= 12;
        if (!v16) {
          return v6;
        }
      }
    }
  }
  return v6;
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_5") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_5")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5 const&,0ul>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 12) = *(long long *)((char *)a2 + 12);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 5);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v8;
    unint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 48) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 40) = v9;
  }
  int v10 = *((_DWORD *)a2 + 14);
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = v10;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v12 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v11 = (unsigned char *)*((void *)a2 + 9);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    long long v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v14;
    unint64_t v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 80) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 72) = v15;
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>((void *)(a1 + 88), *((void *)a2 + 11), *((void *)a2 + 12), (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 5);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>((void *)(a1 + 112), *((void *)a2 + 14), *((void *)a2 + 15), (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 5);
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  return a1;
}

void sub_23CD080A8(_Unwind_Exception *exception_object)
{
  if (*v4) {
    std::__compressed_pair_elem<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5 const&,0ul>(v1, *v4, (void **)(v1 + 88));
  }
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v6;
    operator delete(v6);
  }
  int64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t operations_research::sat::RandomizeDecisionHeuristic<operations_research::sat::ModelRandomGenerator>(operations_research::sat *a1, uint64_t a2)
{
  long long v4 = (operations_research::sat *)operations_research::sat::SatParameters_VariableOrder_descriptor(a1);
  uint64_t v5 = v4;
  int v6 = *((_DWORD *)v4 + 11);
  BOOL v7 = __OFSUB__(v6, 1);
  int v8 = v6 - 1;
  if (v8 < 0 != v7)
  {
    int v9 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    HIDWORD(v42) = v8;
    uint64_t v43 = v42;
    long long v4 = (operations_research::sat *)absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v42, (uint64_t)a1, (int *)&v43);
    int v9 = (int)v4;
  }
  int v10 = *(_DWORD *)(*((void *)v5 + 6) + 40 * v9 + 16);
  *(_DWORD *)(a2 + 16) |= 2u;
  *(_DWORD *)(a2 + 64) = v10;
  uint64_t v11 = operations_research::sat::SatParameters_Polarity_descriptor(v4);
  int v12 = *(_DWORD *)(v11 + 44);
  BOOL v7 = __OFSUB__(v12, 1);
  int v13 = v12 - 1;
  if (v13 < 0 != v7)
  {
    int v14 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    HIDWORD(v42) = v13;
    uint64_t v43 = v42;
    int v14 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v42, (uint64_t)a1, (int *)&v43);
  }
  int v15 = *(_DWORD *)(*(void *)(v11 + 48) + 40 * v14 + 16);
  *(_DWORD *)(a2 + 20) |= 0x8000u;
  *(_DWORD *)(a2 + 196) = v15;
  uint64_t v16 = *((void *)a1 + 312);
  unint64_t v17 = (v16 + 1) % 0x270uLL;
  unsigned int v18 = *((_DWORD *)a1 + (v16 + 397) % 0x270uLL) ^ ((*((_DWORD *)a1 + v17) & 0x7FFFFFFE | *((_DWORD *)a1 + v16) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)a1 + v17) << 31) >> 31) & 0x9908B0DF;
  *((_DWORD *)a1 + v16) = v18;
  unsigned int v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
  signed int v20 = (v19 << 15) & 0xEFC60000 ^ v19;
  BOOL v22 = (v20 ^ (v20 >> 18)) != 0x80000000 && v20 >= 0;
  *(_DWORD *)(a2 + 24) |= 1u;
  *(unsigned char *)(a2 + 304) = v22;
  if (v17 == 623) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v17 + 1;
  }
  uint64_t v24 = 4 * v23;
  uint64_t v25 = 397;
  if (v17 >= 0xE3) {
    uint64_t v25 = -227;
  }
  unsigned int v26 = *((_DWORD *)a1 + v17 + v25) ^ ((*((_DWORD *)a1 + v23) & 0x7FFFFFFE | *((_DWORD *)a1 + v17) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)a1 + v23) << 31) >> 31) & 0x9908B0DF;
  *((_DWORD *)a1 + v17) = v26;
  unsigned int v27 = ((v26 ^ (v26 >> 11)) << 7) & 0x9D2C5680 ^ v26 ^ (v26 >> 11);
  unsigned int v28 = (v27 << 15) & 0xEFC60000 ^ v27;
  *(_DWORD *)(a2 + 16) |= 0x10u;
  if (v23 + 1 < 0x270) {
    unint64_t v29 = v23 + 1;
  }
  else {
    unint64_t v29 = v23 - 623;
  }
  int v30 = *((_DWORD *)a1 + v29);
  unsigned int v31 = v30 & 0x7FFFFFFE | *((_DWORD *)a1 + v23) & 0x80000000;
  unint64_t v32 = v23 + 397;
  unint64_t v33 = v23 - 227;
  if (v32 < 0x270) {
    unint64_t v33 = v32;
  }
  unsigned int v34 = *((_DWORD *)a1 + v33) ^ (v31 >> 1) ^ (v30 << 31 >> 31) & 0x9908B0DF;
  *(_DWORD *)((char *)a1 + v24) = v34;
  unsigned int v35 = ((v34 ^ (v34 >> 11)) << 7) & 0x9D2C5680 ^ v34 ^ (v34 >> 11);
  *((void *)a1 + 312) = v29;
  *(_DWORD *)(a2 + 16) |= 8u;
  v36.i32[0] = (v35 << 15) & 0xEFC60000 ^ v35;
  v36.i32[1] = v28;
  int32x2_t v37 = vceq_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32(v36, 0x12uLL), (int8x8_t)v36), (int32x2_t)0x8000000080000000);
  v38.i64[0] = v37.i32[0];
  v38.i64[1] = v37.i32[1];
  int8x16_t v39 = v38;
  int32x2_t v40 = vcgt_s32((int32x2_t)v36, (int32x2_t)-1);
  v38.i64[0] = v40.i32[0];
  v38.i64[1] = v40.i32[1];
  int8x16_t result = vbicq_s8(vandq_s8((int8x16_t)vdupq_n_s64(0x3F847AE147AE147BuLL), v38), v39);
  *(int8x16_t *)(a2 + 72) = result;
  return result;
}

unint64_t std::discrete_distribution<int>::operator()<operations_research::sat::ModelRandomGenerator>(uint64_t a1, uint64_t a2, double **a3)
{
  unint64_t v3 = *a3;
  long long v4 = a3[1];
  uint64_t v5 = *(void *)(a2 + 2496);
  unint64_t v6 = (v5 + 1) % 0x270uLL;
  uint64_t v7 = 4 * v5;
  unsigned int v8 = *(_DWORD *)(a2 + 4 * ((v5 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v5) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + v7) = v8;
  if (v6 == 623) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = v6 + 1;
  }
  uint64_t v10 = 397;
  if (v6 >= 0xE3) {
    uint64_t v10 = -227;
  }
  unsigned int v11 = *(_DWORD *)(a2 + 4 * (v10 + v6)) ^ ((*(_DWORD *)(a2 + 4 * v9) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v6) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v9) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + 4 * v6) = v11;
  *(void *)(a2 + 2496) = v9;
  uint64_t v12 = (char *)v4 - (char *)v3;
  if (v4 != v3)
  {
    unsigned int v13 = ((v8 ^ (v8 >> 11)) << 7) & 0x9D2C5680 ^ v8 ^ (v8 >> 11);
    double v14 = (double)((v13 << 15) & 0xEFC60000 ^ v13 ^ (((v13 << 15) & 0xEFC60000 ^ v13) >> 18));
    unsigned int v15 = ((v11 ^ (v11 >> 11)) << 7) & 0x9D2C5680 ^ v11 ^ (v11 >> 11);
    double v16 = (v14 + (double)((v15 << 15) & 0xEFC60000 ^ v15 ^ (((v15 << 15) & 0xEFC60000 ^ v15) >> 18)) * 4294967300.0)
        * 5.42101086e-20
        + 0.0;
    unint64_t v17 = v12 >> 3;
    long long v4 = v3;
    do
    {
      unint64_t v18 = v17 >> 1;
      unsigned int v19 = &v4[v17 >> 1];
      double v21 = *v19;
      signed int v20 = v19 + 1;
      v17 += ~(v17 >> 1);
      if (v16 < v21) {
        unint64_t v17 = v18;
      }
      else {
        long long v4 = v20;
      }
    }
    while (v17);
  }
  return (unint64_t)((char *)v4 - (char *)v3) >> 3;
}

void *std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3D08;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C3D08;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x50uLL);
  void *v2 = &unk_26F0C3D08;
  std::__compressed_pair_elem<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CD08678(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C3D08;
  return std::__compressed_pair_elem<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

unint64_t std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 != v2)
  {
    for (unint64_t i = 0; i < (v1 - v2) >> 3; ++i)
    {
      uint64_t v5 = *(void *)(a1[4] + 8 * i);
      int v6 = *(_DWORD *)(v2 + 8 * i);
      if (v6 == -1)
      {
        uint64_t v7 = *(int *)(v2 + 8 * i + 4);
        unsigned int v8 = (void *)a1[8];
        unint64_t v9 = *(int *)(v8[51] + 4 * v7);
        if ((v9 == -1
           || ((*(void *)(*(void *)(v8[117] + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          && *(void *)(v8[5] + 12 * (int)v7) + *(void *)(v8[5] + 12 * (int)(v7 ^ 1)))
        {
          if ((v7 & 0xFFFFFFFE) == v7) {
            int64_t v10 = *(void *)(a1[4] + 8 * i);
          }
          else {
            int64_t v10 = -v5;
          }
          unint64_t result = operations_research::sat::SplitAroundGivenValue(v7 & 0xFFFFFFFE, v10, a1[9]);
          if (result != -1) {
            return result;
          }
          uint64_t v2 = a1[1];
          uint64_t v1 = a1[2];
        }
      }
      else if (((*(void *)(*(void *)(a1[7] + 24) + (((unint64_t)(2 * v6) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v6 & 0x1Fu))) & 3) == 0)
      {
        return (v5 != 1) | (2 * v6);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10FollowHintERKNSt3__16vectorINS0_24BooleanOrIntegerVariableENS1_9alloca"
                     "torIS3_EEEERKNS2_IN3gtl7IntTypeINS0_17IntegerValue_tag_ExEENS4_ISC_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat10FollowHintERKNSt3__16vectorINS0_24BooleanOrIntegerVariableE"
                                "NS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_17IntegerValue_tag_ExEENS4_ISC_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10FollowHintERKNSt3__16vectorINS0_24BooleanOrIntegerVariableENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_17IntegerValue_tag_ExEENS4_ISC_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10FollowHintERKNSt3__16vectorINS0_24BooleanOrIntegerVariableENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_17IntegerValue_tag_ExEENS4_ISC_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    unsigned int v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int64_t v10 = *(unsigned char **)(a2 + 24);
  unint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    unsigned int v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 32) = v13;
  }
  long long v14 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v14;
  return a1;
}

void sub_23CD089FC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraintCollection>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C3D88;
  a1[1] = 0;
  if (v2)
  {
    unint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x80C40D6874129);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraintCollection>::~Delete(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_26F0C3D88;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x23ECF2BC0](v1, 0x80C40D6874129);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F0C3DC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C3DC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v3 = operations_research::sat::SatSolver::num_failures(*(operations_research::sat::SatSolver **)(a1 + 16));
  int v4 = v3;
  if (v2)
  {
    BOOL result = 0;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 24) + v4;
    *(unsigned char *)(a1 + 8) = 0;
  }
  else if (v3 >= *(int *)(a1 + 12))
  {
    BOOL result = 1;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    return *(unsigned char *)(a1 + 8) != 0;
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat21RestartEveryKFailuresEiPNS0_9SatSolverEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat21RestartEveryKFailuresEiPNS0_9SatSolverEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat21RestartEveryKFailuresEiPNS0_9SatSolverEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat21RestartEveryKFailuresEiPNS0_9SatSolverEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::target_type()
{
}

void operations_research::sat::Model::MyNew<operations_research::sat::RestartPolicy>()
{
}

void sub_23CD08D78(_Unwind_Exception *a1)
{
  std::deque<int>::~deque[abi:ne180100](v1 + 224);
  std::deque<int>::~deque[abi:ne180100](v1 + 152);
  std::deque<int>::~deque[abi:ne180100](v1 + 80);
  unint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  MEMORY[0x23ECF2BC0](v1, 0x10F0C400998408DLL);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::RestartPolicy>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C3E40;
  a1[1] = 0;
  if (v2)
  {
    std::deque<int>::~deque[abi:ne180100](v2 + 224);
    std::deque<int>::~deque[abi:ne180100](v2 + 152);
    std::deque<int>::~deque[abi:ne180100](v2 + 80);
    unint64_t v3 = *(void **)(v2 + 24);
    if (v3)
    {
      *(void *)(v2 + 32) = v3;
      operator delete(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x10F0C400998408DLL);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::RestartPolicy>::~Delete(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_26F0C3E40;
  a1[1] = 0;
  if (v1)
  {
    std::deque<int>::~deque[abi:ne180100](v1 + 224);
    std::deque<int>::~deque[abi:ne180100](v1 + 152);
    std::deque<int>::~deque[abi:ne180100](v1 + 80);
    uint64_t v2 = *(void **)(v1 + 24);
    if (v2)
    {
      *(void *)(v1 + 32) = v2;
      operator delete(v2);
    }
    MEMORY[0x23ECF2BC0](v1, 0x10F0C400998408DLL);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_26F0C3E78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C3E78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return operations_research::sat::RestartPolicy::ShouldRestart(*(operations_research::sat::RestartPolicy **)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat22SatSolverRestartPolicyEPNS0_5ModelEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat22SatSolverRestartPolicyEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat22SatSolverRestartPolicyEPNS0_5ModelEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat22SatSolverRestartPolicyEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target_type()
{
}

char *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void **)a1;
  if (a4 > (v8 - *(void *)a1) >> 5)
  {
    if (v9)
    {
      int64_t v10 = *(void **)(a1 + 8);
      int64_t v11 = *(void **)a1;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 4;
        unsigned int v13 = v10 - 4;
        do
        {
          unsigned int v15 = (void *)v13[3];
          if (v13 == v15)
          {
            (*(void (**)(void *))(*v13 + 32))(v13);
          }
          else if (v15)
          {
            (*(void (**)(void *))(*v15 + 40))(v15);
          }
          v12 -= 4;
          BOOL v14 = v13 == v9;
          v13 -= 4;
        }
        while (!v14);
        int64_t v11 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 59) {
      goto LABEL_48;
    }
    uint64_t v28 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v28 = a4;
    }
    BOOL v29 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
    if (!v29) {
      unint64_t v30 = v28;
    }
    if (v30 >> 59) {
LABEL_48:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v31 = 32 * v30;
    BOOL result = (char *)operator new(32 * v30);
    unint64_t v32 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v31];
    if (a2 == a3)
    {
LABEL_45:
      *(void *)(a1 + 8) = v32;
      return result;
    }
    uint64_t v33 = 0;
    while (1)
    {
      unsigned int v34 = &v32[v33 * 8];
      unsigned int v35 = (void *)a2[v33 + 3];
      if (v35)
      {
        if (&a2[v33] == v35)
        {
          *(void *)&v32[v33 * 8 + 24] = v34;
          BOOL result = (char *)(*(uint64_t (**)(void))(a2[v33] + 24))();
          goto LABEL_39;
        }
        BOOL result = (char *)(*(uint64_t (**)(void))(*v35 + 16))(a2[v33 + 3]);
      }
      else
      {
        BOOL result = 0;
      }
      *((void *)v34 + 3) = result;
LABEL_39:
      v33 += 4;
      if (&a2[v33] == a3)
      {
        v32 += v33 * 8;
        goto LABEL_45;
      }
    }
  }
  unint64_t v16 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v16 >= a4)
  {
    BOOL result = (char *)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,0>(a2, a3, v9);
    uint64_t v24 = v23;
    uint64_t v25 = *(char **)(a1 + 8);
    if (v25 != v23)
    {
      unsigned int v26 = v25 - 32;
      unsigned int v27 = v25 - 32;
      do
      {
        BOOL result = (char *)*((void *)v27 + 3);
        if (v27 == result)
        {
          BOOL result = (char *)(*(uint64_t (**)(char *))(*(void *)v27 + 32))(v27);
        }
        else if (result)
        {
          BOOL result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 40))(result);
        }
        v26 -= 32;
        BOOL v14 = v27 == v24;
        v27 -= 32;
      }
      while (!v14);
    }
    *(void *)(a1 + 8) = v24;
    return result;
  }
  unint64_t v17 = &a2[4 * v16];
  BOOL result = (char *)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,0>(a2, v17, v9);
  uint64_t v19 = *(void *)(a1 + 8);
  if (v17 == a3) {
    goto LABEL_47;
  }
  uint64_t v20 = 0;
  do
  {
    uint64_t v21 = v19 + v20 * 8;
    BOOL v22 = (char *)&v17[v20];
    BOOL result = (char *)v17[v20 + 3];
    if (!result) {
      goto LABEL_14;
    }
    if (v22 != result)
    {
      BOOL result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 16))(result);
LABEL_14:
      *(void *)(v21 + 24) = result;
      goto LABEL_15;
    }
    *(void *)(v19 + v20 * 8 + 24) = v21;
    BOOL result = (char *)(*(uint64_t (**)(void, uint64_t))(**((void **)v22 + 3) + 24))(*((void *)v22 + 3), v19 + v20 * 8);
LABEL_15:
    v20 += 4;
  }
  while (&v17[v20] != a3);
  v19 += v20 * 8;
LABEL_47:
  *(void *)(a1 + 8) = v19;
  return result;
}

void sub_23CD093AC(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>();
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_23CD093CC(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>();
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,0>(void *a1, void *a2, void *a3)
{
  int v4 = a1;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    int64_t v6 = a1;
    do
    {
      uint64_t v7 = (void *)v4[3];
      if (v7)
      {
        if (v4 == v7)
        {
          int64_t v10 = v9;
          (*(void (**)(void *, void *))(*v4 + 24))(v4, v9);
        }
        else
        {
          int64_t v10 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
        }
      }
      else
      {
        int64_t v10 = 0;
      }
      std::__function::__value_func<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::swap[abi:ne180100](v9, a3);
      if (v10 == v9)
      {
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else if (v10)
      {
        (*(void (**)(void))(*v10 + 40))();
      }
      v4 += 4;
      a3 += 4;
      v6 += 4;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::__function::__value_func<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23CD097FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

char *std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void **)a1;
  if (a4 > (v8 - *(void *)a1) >> 5)
  {
    if (v9)
    {
      int64_t v10 = *(void **)(a1 + 8);
      uint64_t v11 = *(void **)a1;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 4;
        unsigned int v13 = v10 - 4;
        do
        {
          unsigned int v15 = (void *)v13[3];
          if (v13 == v15)
          {
            (*(void (**)(void *))(*v13 + 32))(v13);
          }
          else if (v15)
          {
            (*(void (**)(void *))(*v15 + 40))(v15);
          }
          v12 -= 4;
          BOOL v14 = v13 == v9;
          v13 -= 4;
        }
        while (!v14);
        uint64_t v11 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 59) {
      goto LABEL_48;
    }
    uint64_t v28 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v28 = a4;
    }
    BOOL v29 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
    if (!v29) {
      unint64_t v30 = v28;
    }
    if (v30 >> 59) {
LABEL_48:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v31 = 32 * v30;
    BOOL result = (char *)operator new(32 * v30);
    unint64_t v32 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v31];
    if (a2 == a3)
    {
LABEL_45:
      *(void *)(a1 + 8) = v32;
      return result;
    }
    uint64_t v33 = 0;
    while (1)
    {
      unsigned int v34 = &v32[v33 * 8];
      unsigned int v35 = (void *)a2[v33 + 3];
      if (v35)
      {
        if (&a2[v33] == v35)
        {
          *(void *)&v32[v33 * 8 + 24] = v34;
          BOOL result = (char *)(*(uint64_t (**)(void))(a2[v33] + 24))();
          goto LABEL_39;
        }
        BOOL result = (char *)(*(uint64_t (**)(void))(*v35 + 16))(a2[v33 + 3]);
      }
      else
      {
        BOOL result = 0;
      }
      *((void *)v34 + 3) = result;
LABEL_39:
      v33 += 4;
      if (&a2[v33] == a3)
      {
        v32 += v33 * 8;
        goto LABEL_45;
      }
    }
  }
  unint64_t v16 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v16 >= a4)
  {
    BOOL result = (char *)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)>*,0>(a2, a3, v9);
    uint64_t v24 = v23;
    uint64_t v25 = *(char **)(a1 + 8);
    if (v25 != v23)
    {
      unsigned int v26 = v25 - 32;
      unsigned int v27 = v25 - 32;
      do
      {
        BOOL result = (char *)*((void *)v27 + 3);
        if (v27 == result)
        {
          BOOL result = (char *)(*(uint64_t (**)(char *))(*(void *)v27 + 32))(v27);
        }
        else if (result)
        {
          BOOL result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 40))(result);
        }
        v26 -= 32;
        BOOL v14 = v27 == v24;
        v27 -= 32;
      }
      while (!v14);
    }
    *(void *)(a1 + 8) = v24;
    return result;
  }
  unint64_t v17 = &a2[4 * v16];
  BOOL result = (char *)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)>*,0>(a2, v17, v9);
  uint64_t v19 = *(void *)(a1 + 8);
  if (v17 == a3) {
    goto LABEL_47;
  }
  uint64_t v20 = 0;
  do
  {
    uint64_t v21 = v19 + v20 * 8;
    BOOL v22 = (char *)&v17[v20];
    BOOL result = (char *)v17[v20 + 3];
    if (!result) {
      goto LABEL_14;
    }
    if (v22 != result)
    {
      BOOL result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 16))(result);
LABEL_14:
      *(void *)(v21 + 24) = result;
      goto LABEL_15;
    }
    *(void *)(v19 + v20 * 8 + 24) = v21;
    BOOL result = (char *)(*(uint64_t (**)(void, uint64_t))(**((void **)v22 + 3) + 24))(*((void *)v22 + 3), v19 + v20 * 8);
LABEL_15:
    v20 += 4;
  }
  while (&v17[v20] != a3);
  v19 += v20 * 8;
LABEL_47:
  *(void *)(a1 + 8) = v19;
  return result;
}

void sub_23CD09BA8(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>();
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_23CD09BC8(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>();
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)>*,0>(void *a1, void *a2, void *a3)
{
  int v4 = a1;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    int64_t v6 = a1;
    do
    {
      uint64_t v7 = (void *)v4[3];
      if (v7)
      {
        if (v4 == v7)
        {
          int64_t v10 = v9;
          (*(void (**)(void *, void *))(*v4 + 24))(v4, v9);
        }
        else
        {
          int64_t v10 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
        }
      }
      else
      {
        int64_t v10 = 0;
      }
      std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v9, a3);
      if (v10 == v9)
      {
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else if (v10)
      {
        (*(void (**)(void))(*v10 + 40))();
      }
      v4 += 4;
      a3 += 4;
      v6 += 4;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26F0C3EF8;
  return result;
}

void std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C3EF8;
}

uint64_t std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target_type()
{
}

void std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26F0C3F78;
  return result;
}

void std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C3F78;
}

uint64_t std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::target_type()
{
}

uint64_t std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>(uint64_t *a1, void *a2)
{
  int v4 = (void *)*a1;
  unint64_t v3 = (void *)a1[1];
  uint64_t v5 = ((uint64_t)v3 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = a1[2] - (void)v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int64_t v10 = (char *)operator new(32 * v9);
    uint64_t v11 = (uint64_t)&v10[32 * v5];
    uint64_t v12 = a2 + 3;
    unsigned int v13 = (void *)a2[3];
    if (v13)
    {
LABEL_10:
      if (v13 == a2)
      {
        *(void *)(v11 + 24) = v11;
        (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v11);
        int v4 = (void *)*a1;
        unint64_t v3 = (void *)a1[1];
        uint64_t v14 = v11;
        if (v3 == (void *)*a1) {
          goto LABEL_26;
        }
      }
      else
      {
        *(void *)(v11 + 24) = v13;
        *uint64_t v12 = 0;
        uint64_t v14 = v11;
        if (v3 == v4) {
          goto LABEL_26;
        }
      }
      goto LABEL_17;
    }
  }
  else
  {
    int64_t v10 = 0;
    uint64_t v11 = 32 * v5;
    uint64_t v12 = a2 + 3;
    unsigned int v13 = (void *)a2[3];
    if (v13) {
      goto LABEL_10;
    }
  }
  *(void *)(v11 + 24) = 0;
  uint64_t v14 = v11;
  if (v3 != v4)
  {
LABEL_17:
    uint64_t v15 = 0;
    unint64_t v16 = v3;
    while (1)
    {
      uint64_t v18 = v11 + v15 * 8;
      uint64_t v19 = &v3[v15];
      uint64_t v20 = (void *)v3[v15 - 1];
      if (v20)
      {
        if (v19 - 4 == v20)
        {
          *(void *)(v18 - 8) = v18 - 32;
          (*(void (**)(void))(*(void *)*(v19 - 1) + 24))(*(v19 - 1));
          goto LABEL_20;
        }
        unint64_t v17 = v16 - 1;
        *(void *)(v18 - 8) = v20;
      }
      else
      {
        unint64_t v17 = (void *)(v18 - 8);
      }
      *unint64_t v17 = 0;
LABEL_20:
      v16 -= 4;
      v15 -= 4;
      if (&v3[v15] == v4)
      {
        uint64_t v14 = v11 + v15 * 8;
        break;
      }
    }
  }
LABEL_26:
  uint64_t v21 = &v10[32 * v9];
  unint64_t v23 = (char *)*a1;
  BOOL v22 = (char *)a1[1];
  uint64_t v24 = v11 + 32;
  *a1 = v14;
  a1[1] = v11 + 32;
  a1[2] = (uint64_t)v21;
  if (v22 != v23)
  {
    uint64_t v25 = v22 - 32;
    unsigned int v26 = v22 - 32;
    do
    {
      uint64_t v28 = (char *)*((void *)v26 + 3);
      if (v26 == v28)
      {
        (*(void (**)(char *))(*(void *)v26 + 32))(v26);
      }
      else if (v28)
      {
        (*(void (**)(char *))(*(void *)v28 + 40))(v28);
      }
      v25 -= 32;
      BOOL v27 = v26 == v23;
      v26 -= 32;
    }
    while (!v27);
  }
  if (v23) {
    operator delete(v23);
  }
  return v24;
}

uint64_t std::__split_buffer<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      *(void *)(a1 + 16) = i - 32;
      uint64_t v4 = *(void *)(i - 8);
      if (v4 != i - 32) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)(i - 32) + 32))(i - 32);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v3) {
        goto LABEL_8;
      }
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
LABEL_8:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *operations_research::sat::Model::Delete<operations_research::sat::SearchHeuristicsVector>::~Delete(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26F0C3FF8;
  a1[1] = 0;
  if (v2)
  {
    uint64_t v3 = (void *)*v2;
    if (*v2)
    {
      uint64_t v4 = (void *)v2[1];
      uint64_t v5 = (void *)*v2;
      if (v4 != v3)
      {
        unint64_t v6 = v4 - 4;
        uint64_t v7 = v4 - 4;
        do
        {
          unint64_t v9 = (void *)v7[3];
          if (v7 == v9)
          {
            (*(void (**)(void *))(*v7 + 32))(v7);
          }
          else if (v9)
          {
            (*(void (**)(void *))(*v9 + 40))(v9);
          }
          v6 -= 4;
          BOOL v8 = v7 == v3;
          v7 -= 4;
        }
        while (!v8);
        uint64_t v5 = (void *)*v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x23ECF2BC0](v2, 0x20C40960023A9);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SearchHeuristicsVector>::~Delete(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  *a1 = &unk_26F0C3FF8;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = (void *)*v1;
    if (*v1)
    {
      uint64_t v3 = (void *)v1[1];
      uint64_t v4 = (void *)*v1;
      if (v3 != v2)
      {
        uint64_t v5 = v3 - 4;
        unint64_t v6 = v3 - 4;
        do
        {
          BOOL v8 = (void *)v6[3];
          if (v6 == v8)
          {
            (*(void (**)(void *))(*v6 + 32))(v6);
          }
          else if (v8)
          {
            (*(void (**)(void *))(*v8 + 40))(v8);
          }
          v5 -= 4;
          BOOL v7 = v6 == v2;
          v6 -= 4;
        }
        while (!v7);
        uint64_t v4 = (void *)*v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    MEMORY[0x23ECF2BC0](v1, 0x20C40960023A9);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>,std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>>(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  BOOL v7 = a3;
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[1];
  if (a5 <= (uint64_t)(v9 - v10) >> 5)
  {
    uint64_t v16 = v10 - (void)a2;
    uint64_t v17 = (uint64_t)(v10 - (void)a2) >> 5;
    if (v17 >= a5)
    {
      uint64_t v19 = &a3[4 * a5];
      goto LABEL_39;
    }
    uint64_t v19 = &a3[4 * v17];
    if (v19 == a4)
    {
      a1[1] = v10;
      if (v16 < 1) {
        return v5;
      }
      goto LABEL_39;
    }
    uint64_t v20 = 0;
    while (1)
    {
      unint64_t v22 = v10 + v20 * 8;
      unint64_t v23 = &v19[v20];
      uint64_t v21 = v19[v20 + 3];
      if (v21)
      {
        if (v23 == (void *)v21)
        {
          *(void *)(v10 + v20 * 8 + 24) = v22;
          (*(void (**)(void, unint64_t))(*(void *)v23[3] + 24))(v23[3], v10 + v20 * 8);
          goto LABEL_17;
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
      }
      *(void *)(v22 + 24) = v21;
LABEL_17:
      v20 += 4;
      if (&v19[v20] == a4)
      {
        a1[1] = v10 + v20 * 8;
        if (v16 < 1) {
          return v5;
        }
LABEL_39:
        std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__move_range(a1, (uint64_t)v5, v10, (uint64_t)&v5[4 * a5]);
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> *>,std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> *>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> *,0>(v7, v19, v5);
        return v5;
      }
    }
  }
  uint64_t v11 = *a1;
  unint64_t v12 = a5 + ((uint64_t)(v10 - *a1) >> 5);
  if (v12 >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = v9 - v11;
  if (v13 >> 4 > v12) {
    unint64_t v12 = v13 >> 4;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  int8x16_t v38 = a1 + 2;
  if (v14)
  {
    if (v14 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(32 * v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v24 = &v15[32 * (((uint64_t)v5 - v11) >> 5)];
  long long __p = v15;
  unsigned int v35 = v24;
  uint32x2_t v36 = v24;
  int32x2_t v37 = &v15[32 * v14];
  uint64_t v25 = 32 * a5;
  unsigned int v26 = &v24[32 * a5];
  BOOL v27 = v7;
  do
  {
    uint64_t v28 = v27[3];
    if (!v28) {
      goto LABEL_25;
    }
    if (v27 != (void *)v28)
    {
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
LABEL_25:
      *((void *)v24 + 3) = v28;
      goto LABEL_26;
    }
    *((void *)v24 + 3) = v24;
    (*(void (**)(void *, char *))(*v27 + 24))(v27, v24);
LABEL_26:
    v24 += 32;
    v27 += 4;
    v7 += 4;
    v25 -= 32;
  }
  while (v25);
  uint32x2_t v36 = v26;
  uint64_t v5 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__swap_out_circular_buffer(a1, &__p, v5);
  BOOL v29 = v35;
  while (1)
  {
    unint64_t v30 = v36;
    if (v36 == v29) {
      break;
    }
    uint64_t v31 = v36 - 32;
    v36 -= 32;
    unint64_t v32 = (char *)*((void *)v30 - 1);
    if (v32 == v30 - 32)
    {
      (*(void (**)(char *))(*(void *)v31 + 32))(v31);
    }
    else if (v32)
    {
      (*(void (**)(char *))(*(void *)v32 + 40))(v32);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v5;
}

void sub_23CD0A800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23CD0A814(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>();
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_23CD0A834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__move_range(void *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = result[1];
  uint64_t v7 = (v6 - a4) >> 5;
  unint64_t v8 = a2 + v6 - a4;
  if (v8 < a3)
  {
    unint64_t v10 = (void *)(a2 + 32 * v7 + 24);
    uint64_t v11 = result[1];
    while (1)
    {
      unint64_t v14 = (void *)*v10;
      if (*v10)
      {
        if (v10 - 3 == v14)
        {
          *(void *)(v11 + 24) = v11;
          BOOL result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v10 + 24))(*v10, v11);
          goto LABEL_5;
        }
        *(void *)(v11 + 24) = v14;
        unint64_t v12 = v10;
      }
      else
      {
        unint64_t v12 = (void *)(v11 + 24);
      }
      *unint64_t v12 = 0;
LABEL_5:
      v11 += 32;
      uint64_t v13 = v10 + 1;
      v10 += 4;
      if ((unint64_t)v13 >= a3) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v11 = result[1];
LABEL_11:
  v5[1] = v11;
  if (v6 != a4)
  {
    uint64_t v15 = 0;
    unint64_t v16 = v8;
    uint64_t v17 = -32 * v7;
    do
    {
      uint64_t v18 = (uint64_t *)(v6 + v15 - 8);
      BOOL result = (void *)*v18;
      uint64_t v19 = v6 + v15 - 32;
      *uint64_t v18 = 0;
      if ((void *)v19 == result)
      {
        BOOL result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 32))(v6 + v15 - 32);
        uint64_t v20 = v8 + v15;
        uint64_t v21 = *(void **)(v8 + v15 - 8);
        if (!v21) {
          goto LABEL_14;
        }
      }
      else
      {
        if (result) {
          BOOL result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
        }
        uint64_t v20 = v8 + v15;
        uint64_t v21 = *(void **)(v8 + v15 - 8);
        if (!v21) {
          goto LABEL_14;
        }
      }
      if ((void *)(v8 + v15 - 32) == v21)
      {
        *uint64_t v18 = v19;
        BOOL result = (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v20 - 8) + 24))(*(void *)(v20 - 8), v6 + v15 - 32);
        goto LABEL_15;
      }
      *uint64_t v18 = (uint64_t)v21;
      uint64_t v18 = (uint64_t *)(v16 - 8);
LABEL_14:
      *uint64_t v18 = 0;
LABEL_15:
      v16 -= 32;
      v15 -= 32;
    }
    while (v17 != v15);
  }
  return result;
}

void *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)a2[1];
  uint64_t v7 = (void *)*a1;
  unint64_t v8 = v6;
  if ((void *)*a1 != a3)
  {
    uint64_t v9 = v6 - 1;
    unint64_t v10 = a3;
    while (1)
    {
      unint64_t v12 = (void *)*(v10 - 1);
      uint64_t v13 = v10 - 4;
      uint64_t v11 = v9;
      if (v12)
      {
        if (v13 == v12)
        {
          *uint64_t v9 = v9 - 3;
          (*(void (**)(void))(*(void *)*(v10 - 1) + 24))(*(v10 - 1));
          goto LABEL_5;
        }
        *uint64_t v9 = v12;
        uint64_t v11 = v10 - 1;
      }
      *uint64_t v11 = 0;
LABEL_5:
      v9 -= 4;
      unint64_t v10 = v13;
      if (v13 == v7)
      {
        unint64_t v8 = v9 + 1;
        break;
      }
    }
  }
  a2[1] = v8;
  unint64_t v14 = (void *)a1[1];
  uint64_t v15 = a2[2];
  if (v14 != a3)
  {
    unint64_t v16 = a3 + 3;
    while (1)
    {
      uint64_t v19 = (void *)*v16;
      if (*v16)
      {
        if (v16 - 3 == v19)
        {
          *(void *)(v15 + 24) = v15;
          (*(void (**)(void, uint64_t))(*(void *)*v16 + 24))(*v16, v15);
          goto LABEL_14;
        }
        *(void *)(v15 + 24) = v19;
        uint64_t v17 = v16;
      }
      else
      {
        uint64_t v17 = (void *)(v15 + 24);
      }
      *uint64_t v17 = 0;
LABEL_14:
      v15 += 32;
      uint64_t v18 = v16 + 1;
      v16 += 4;
      if (v18 == v14)
      {
        unint64_t v8 = (void *)a2[1];
        break;
      }
    }
  }
  a2[2] = v15;
  uint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v8;
  a2[1] = v20;
  uint64_t v21 = a1[1];
  a1[1] = a2[2];
  a2[2] = v21;
  uint64_t v22 = a1[2];
  a1[2] = a2[3];
  a2[3] = v22;
  *a2 = a2[1];
  return v6;
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> *>,std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> *>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> *,0>(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = (void *)v6[3];
      if (v7)
      {
        if (v6 == v7)
        {
          unint64_t v10 = v9;
          (*(void (**)(void *, void *))(*v6 + 24))(v6, v9);
        }
        else
        {
          unint64_t v10 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      std::__function::__value_func<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::swap[abi:ne180100](v9, a3);
      if (v10 == v9)
      {
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else if (v10)
      {
        (*(void (**)(void))(*v10 + 40))();
      }
      v6 += 4;
      a3 += 4;
      v4 += 4;
    }
    while (v6 != a2);
    return a2;
  }
  return v4;
}

void operations_research::sat::Model::MyNew<operations_research::sat::Inprocessing>()
{
}

void sub_23CD0AE24(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1070C4066161334);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LiteralWatchers>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LiteralWatchers>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::LiteralWatchers>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CD0AFE4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F3C40FA235325);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::StampingSimplifier>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::StampingSimplifier>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::StampingSimplifier>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::StampingSimplifier>(void)::d)
  {
LABEL_12:
    operations_research::sat::Model::MyNew<operations_research::sat::StampingSimplifier>();
  }
  return v2[5];
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::BlockedClauseSimplifier>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BlockedClauseSimplifier>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BlockedClauseSimplifier>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::BlockedClauseSimplifier>(void)::d)
  {
LABEL_12:
    operations_research::sat::Model::MyNew<operations_research::sat::BlockedClauseSimplifier>();
  }
  return v2[5];
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::BoundedVariableElimination>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BoundedVariableElimination>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BoundedVariableElimination>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::BoundedVariableElimination>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CD0B4B4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F0C40661EC0B5);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::LiteralWatchers>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C4030;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LiteralWatchers>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C4030;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::Model::MyNew<operations_research::sat::StampingSimplifier>()
{
}

void sub_23CD0B674(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1070C4028D124EBLL);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::StampingSimplifier>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::StampingSimplifier *)a1[1];
  *a1 = &unk_26F0C4068;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::StampingSimplifier::~StampingSimplifier(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::StampingSimplifier>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::StampingSimplifier *)a1[1];
  *a1 = &unk_26F0C4068;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::StampingSimplifier::~StampingSimplifier(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::StampingSimplifier::~StampingSimplifier(operations_research::sat::StampingSimplifier *this)
{
  uint64_t v2 = (void *)*((void *)this + 31);
  if (v2)
  {
    *((void *)this + 32) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 28);
  if (v3)
  {
    *((void *)this + 29) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)*((void *)this + 25);
  if (v4)
  {
    *((void *)this + 26) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 22);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 19);
  if (v6)
  {
    *((void *)this + 20) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 16);
  if (v7)
  {
    *((void *)this + 17) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 13);
  if (v8)
  {
    *((void *)this + 14) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 10);
  if (v9)
  {
    *((void *)this + 11) = v9;
    operator delete(v9);
  }
}

void operations_research::sat::Model::MyNew<operations_research::sat::BlockedClauseSimplifier>()
{
}

void sub_23CD0B8C8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F0C40AA11D5BBLL);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::BlockedClauseSimplifier>::~Delete(void *a1)
{
  *a1 = &unk_26F0C40A0;
  BOOL v4 = (void *)a1[1];
  uint64_t v2 = a1 + 1;
  unint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<operations_research::sat::BlockedClauseSimplifier>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::BlockedClauseSimplifier>::~Delete(void *a1)
{
  *a1 = &unk_26F0C40A0;
  unint64_t v3 = (void *)a1[1];
  uint64_t v1 = a1 + 1;
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<operations_research::sat::BlockedClauseSimplifier>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::default_delete<operations_research::sat::BlockedClauseSimplifier>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[23];
    if (v3)
    {
      uint64_t v4 = a2[24];
      uint64_t v5 = (void *)a2[23];
      if (v4 != v3)
      {
        uint64_t v6 = a2[24];
        do
        {
          unint64_t v8 = *(void **)(v6 - 24);
          v6 -= 24;
          uint64_t v7 = v8;
          if (v8)
          {
            *(void *)(v4 - 16) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        uint64_t v5 = (void *)a2[23];
      }
      a2[24] = v3;
      operator delete(v5);
    }
    uint64_t v9 = (void *)a2[20];
    if (v9)
    {
      a2[21] = v9;
      operator delete(v9);
    }
    std::deque<int>::~deque[abi:ne180100]((uint64_t)(a2 + 14));
    unint64_t v10 = (void *)a2[11];
    if (v10) {
      operator delete(v10);
    }
    uint64_t v11 = (void *)a2[8];
    if (v11) {
      operator delete(v11);
    }
    JUMPOUT(0x23ECF2BC0);
  }
}

operations_research::sat::BoundedVariableElimination *operations_research::sat::BoundedVariableElimination::BoundedVariableElimination(operations_research::sat::BoundedVariableElimination *this, operations_research::sat::Model *a2)
{
  *(void *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((void *)this + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2)
                        + 16;
  *((void *)this + 2) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)a2);
  *((void *)this + 3) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>((uint64_t)a2);
  *((void *)this + 4) = operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>((uint64_t)a2);
  *((void *)this + 5) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 6) = v4;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 14) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 24, 1uLL);
  uint64_t v5 = *((void *)this + 27);
  if (*((void *)this + 28) != v5) {
    *((void *)this + 28) = v5;
  }
  *((void *)this + 44) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  return this;
}

void sub_23CD0BB6C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = (void *)v1[27];
  if (v5)
  {
    v1[28] = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      uint64_t v7 = (void *)v1[20];
      if (!v7) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[25] = v6;
  operator delete(v6);
  uint64_t v7 = (void *)v1[20];
  if (!v7)
  {
LABEL_4:
    unint64_t v8 = *v3;
    if (!*v3) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v1[21] = v7;
  operator delete(v7);
  unint64_t v8 = *v3;
  if (!*v3) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::Model::Delete<operations_research::sat::BoundedVariableElimination>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::BoundedVariableElimination *)a1[1];
  *a1 = &unk_26F0C40D8;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::BoundedVariableElimination::~BoundedVariableElimination(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::BoundedVariableElimination>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::BoundedVariableElimination *)a1[1];
  *a1 = &unk_26F0C40D8;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::BoundedVariableElimination::~BoundedVariableElimination(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::BoundedVariableElimination::~BoundedVariableElimination(operations_research::sat::BoundedVariableElimination *this)
{
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 39);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 40);
    uint64_t v5 = (void *)*((void *)this + 39);
    if (v4 != v3)
    {
      uint64_t v6 = *((void *)this + 40);
      do
      {
        unint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = (void *)*((void *)this + 39);
    }
    *((void *)this + 40) = v3;
    operator delete(v5);
  }
  uint64_t v9 = (void *)*((void *)this + 36);
  if (v9)
  {
    *((void *)this + 37) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 33);
  if (v10)
  {
    *((void *)this + 34) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 30);
  if (v11) {
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 27);
  if (v12)
  {
    *((void *)this + 28) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 24);
  if (v13)
  {
    *((void *)this + 25) = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 20);
  if (v14)
  {
    *((void *)this + 21) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 17);
  if (v15) {
    operator delete(v15);
  }
}

void *operations_research::sat::Model::Delete<operations_research::sat::Inprocessing>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C4110;
  a1[1] = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 80);
    if (v3) {
      operator delete(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1070C4066161334);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::Inprocessing>::~Delete(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_26F0C4110;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 80);
    if (v2) {
      operator delete(v2);
    }
    MEMORY[0x23ECF2BC0](v1, 0x1070C4066161334);
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return *(void *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return v0;
}

unint64_t operations_research::sat::IntervalsRepository::CreateInterval(uint64_t *a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  int v19 = a3;
  int v20 = a2;
  int v18 = a4;
  uint64_t v17 = a5;
  int v16 = a6;
  uint64_t v7 = a1 + 5;
  uint64_t v8 = a1[6] - a1[5];
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)(a1 + 5), &v20);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)(v7 + 3), &v19);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)(v7 + 6), &v18);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back((uint64_t)(v7 + 9), &v17);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)(v7 - 3), &v16);
  int v9 = v16;
  if (v16 == -1)
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = (int *)operator new(4uLL);
    *unint64_t v10 = v9;
    uint64_t v11 = v10 + 1;
  }
  uint64_t v12 = v11 - v10;
  operations_research::sat::PrecedencesPropagator::AddArc(a1[1], *(_DWORD *)(a1[5] + 4 * (int)(v8 >> 2)), *(_DWORD *)(a1[8] + 4 * (int)(v8 >> 2)), v17, *(_DWORD *)(a1[11] + 4 * (int)(v8 >> 2)), v10, v12);
  int v13 = *(_DWORD *)(a1[11] + 4 * (int)(v8 >> 2));
  if (v13 == -1) {
    int v14 = -1;
  }
  else {
    int v14 = v13 ^ 1;
  }
  operations_research::sat::PrecedencesPropagator::AddArc(a1[1], *(_DWORD *)(a1[8] + 4 * (int)(v8 >> 2)), *(_DWORD *)(a1[5] + 4 * (int)(v8 >> 2)), -v17, v14, v10, v12);
  if (v10) {
    operator delete(v10);
  }
  return (unint64_t)v8 >> 2;
}

void sub_23CD0C018(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper(uint64_t a1, int **a2, uint64_t a3)
{
  *(void *)a1 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
  *(void *)(a1 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a3);
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v215 = (void **)(a1 + 32);
  *(_OWORD *)(a1 + 80) = 0u;
  v217 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 128) = 0u;
  v218 = (void **)(a1 + 128);
  v216 = (void **)(a1 + 104);
  uint64_t v213 = (void **)(a1 + 152);
  long long v214 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 344) = -1;
  *(void *)(a1 + 352) = -1;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  v219 = (void **)(a1 + 176);
  *(void *)(a1 + 440) = 0;
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(a3);
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
  *(void *)(a1 + 184) = *(void *)(a1 + 176);
  *(void *)(a1 + 160) = *(void *)(a1 + 152);
  *(void *)(a1 + 88) = *(void *)(a1 + 80);
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  uint64_t v8 = *a2;
  v220 = a2[1];
  if (*a2 != v220)
  {
    int v9 = (void *)v7;
    v221 = (void *)v7;
    do
    {
      uint64_t v11 = *v8;
      int v12 = *(_DWORD *)(v9[2] + 4 * v11);
      int v14 = *(char **)(a1 + 136);
      unint64_t v13 = *(void *)(a1 + 144);
      if (v12 == -1)
      {
        if ((unint64_t)v14 < v13)
        {
          *(_DWORD *)int v14 = -1;
          uint64_t v15 = (uint64_t)(v14 + 4);
          goto LABEL_48;
        }
        int v16 = (char *)*v218;
        uint64_t v25 = v14 - (unsigned char *)*v218;
        uint64_t v26 = v25 >> 2;
        unint64_t v27 = (v25 >> 2) + 1;
        if (v27 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v13 - (void)v16;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v27;
        }
        if (v21)
        {
          if (v21 >> 62) {
            goto LABEL_235;
          }
          uint64_t v22 = operator new(4 * v21);
          unint64_t v23 = &v22[4 * v26];
          *unint64_t v23 = -1;
          uint64_t v15 = (uint64_t)(v23 + 1);
          if (v14 == v16) {
            goto LABEL_46;
          }
LABEL_40:
          unint64_t v38 = v14 - 4 - v16;
          if (v38 < 0x2C) {
            goto LABEL_245;
          }
          if ((unint64_t)(v14 - &v22[v25]) < 0x20) {
            goto LABEL_245;
          }
          uint64_t v39 = (v38 >> 2) + 1;
          uint64_t v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v41 = &v14[-v40];
          unint64_t v23 = (_DWORD *)((char *)v23 - v40);
          uint64_t v42 = &v22[4 * v26 - 16];
          uint64_t v43 = v14 - 16;
          uint64_t v44 = v39 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            _OWORD *v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 8;
          }
          while (v44);
          int v14 = v41;
          if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_245:
            do
            {
              int v46 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *--unint64_t v23 = v46;
            }
            while (v14 != v16);
          }
          goto LABEL_46;
        }
        uint64_t v22 = 0;
        unint64_t v23 = (_DWORD *)(4 * v26);
        *(_DWORD *)(4 * v26) = -1;
        uint64_t v15 = 4 * v26 + 4;
        if (v14 != v16) {
          goto LABEL_40;
        }
      }
      else
      {
        if ((unint64_t)v14 < v13)
        {
          *(_DWORD *)int v14 = v12;
          uint64_t v15 = (uint64_t)(v14 + 4);
          goto LABEL_48;
        }
        int v16 = (char *)*v218;
        uint64_t v17 = v14 - (unsigned char *)*v218;
        uint64_t v18 = v17 >> 2;
        unint64_t v19 = (v17 >> 2) + 1;
        if (v19 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v13 - (void)v16;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v22 = operator new(4 * v21);
          unint64_t v23 = &v22[4 * v18];
          *unint64_t v23 = v12;
          uint64_t v15 = (uint64_t)(v23 + 1);
          if (v14 == v16)
          {
LABEL_32:
            int v9 = v221;
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v22 = 0;
          unint64_t v23 = (_DWORD *)(4 * v18);
          *(_DWORD *)(4 * v18) = v12;
          uint64_t v15 = 4 * v18 + 4;
          if (v14 == v16) {
            goto LABEL_32;
          }
        }
        unint64_t v24 = v14 - 4 - v16;
        if (v24 < 0x2C)
        {
          int v9 = v221;
          do
          {
LABEL_37:
            int v37 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *--unint64_t v23 = v37;
          }
          while (v14 != v16);
          goto LABEL_46;
        }
        unint64_t v29 = v14 - &v22[v17];
        int v9 = v221;
        if (v29 < 0x20) {
          goto LABEL_37;
        }
        uint64_t v30 = (v24 >> 2) + 1;
        uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v32 = &v14[-v31];
        unint64_t v23 = (_DWORD *)((char *)v23 - v31);
        uint64_t v33 = &v22[4 * v18 - 16];
        unsigned int v34 = v14 - 16;
        uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *uint64_t v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 8;
        }
        while (v35);
        int v14 = v32;
        if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_37;
        }
      }
LABEL_46:
      *(void *)(a1 + 128) = v23;
      *(void *)(a1 + 136) = v15;
      *(void *)(a1 + 144) = &v22[4 * v21];
      if (v16) {
        operator delete(v16);
      }
LABEL_48:
      *(void *)(a1 + 136) = v15;
      int v47 = *(_DWORD *)(v9[11] + 4 * v11);
      double v49 = *(char **)(a1 + 88);
      unint64_t v48 = *(void *)(a1 + 96);
      if (v47 != -1)
      {
        if ((unint64_t)v49 < v48)
        {
          *(_DWORD *)double v49 = v47;
          uint64_t v50 = (uint64_t)(v49 + 4);
LABEL_83:
          *(void *)(a1 + 88) = v50;
          uint64_t v79 = *(char **)(a1 + 112);
          unint64_t v78 = *(void *)(a1 + 120);
          if ((unint64_t)v79 < v78)
          {
            *(void *)uint64_t v79 = 0;
            unint64_t v80 = v79 + 8;
LABEL_115:
            uint64_t v89 = (uint64_t)v80;
            goto LABEL_137;
          }
          int v81 = (char *)*v216;
          uint64_t v82 = v79 - (unsigned char *)*v216;
          uint64_t v83 = v82 >> 3;
          unint64_t v84 = (v82 >> 3) + 1;
          if (v84 >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v85 = v78 - (void)v81;
          if (v85 >> 2 > v84) {
            unint64_t v84 = v85 >> 2;
          }
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v86 = v84;
          }
          if (v86)
          {
            if (v86 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v87 = operator new(8 * v86);
            unint64_t v88 = &v87[8 * v83];
            *unint64_t v88 = 0;
            uint64_t v89 = (uint64_t)(v88 + 1);
            if (v79 == v81) {
              goto LABEL_135;
            }
LABEL_96:
            unint64_t v90 = v79 - 8 - v81;
            if (v90 < 0x58) {
              goto LABEL_246;
            }
            if ((unint64_t)(v79 - &v87[v82]) < 0x20) {
              goto LABEL_246;
            }
            uint64_t v91 = (v90 >> 3) + 1;
            uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
            int v93 = &v79[-v92];
            unint64_t v88 = (void *)((char *)v88 - v92);
            uint64_t v94 = &v87[8 * v83 - 16];
            long long v95 = v79 - 16;
            uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v97 = *(_OWORD *)v95;
              *(v94 - 1) = *((_OWORD *)v95 - 1);
              *uint64_t v94 = v97;
              v94 -= 2;
              v95 -= 32;
              v96 -= 4;
            }
            while (v96);
            uint64_t v79 = v93;
            if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_246:
              do
              {
                uint64_t v98 = *((void *)v79 - 1);
                v79 -= 8;
                *--unint64_t v88 = v98;
              }
              while (v79 != v81);
            }
            goto LABEL_135;
          }
          uint64_t v87 = 0;
          unint64_t v88 = (void *)(8 * v83);
          *(void *)(8 * v83) = 0;
          uint64_t v89 = 8 * v83 + 8;
          if (v79 != v81) {
            goto LABEL_96;
          }
          goto LABEL_135;
        }
        uint64_t v52 = (char *)*v217;
        uint64_t v53 = v49 - (unsigned char *)*v217;
        uint64_t v54 = v53 >> 2;
        unint64_t v55 = (v53 >> 2) + 1;
        if (v55 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v48 - (void)v52;
        if (v56 >> 1 > v55) {
          unint64_t v55 = v56 >> 1;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          if (v57 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v58 = operator new(4 * v57);
          uint64_t v59 = &v58[4 * v54];
          *uint64_t v59 = v47;
          uint64_t v50 = (uint64_t)(v59 + 1);
          if (v49 != v52)
          {
LABEL_62:
            unint64_t v60 = v49 - 4 - v52;
            if (v60 < 0x2C)
            {
              int v9 = v221;
              goto LABEL_80;
            }
            unint64_t v69 = v49 - &v58[v53];
            int v9 = v221;
            if (v69 < 0x20) {
              goto LABEL_247;
            }
            uint64_t v70 = (v60 >> 2) + 1;
            uint64_t v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v72 = &v49[-v71];
            uint64_t v59 = (_DWORD *)((char *)v59 - v71);
            uint64_t v73 = &v58[4 * v54 - 16];
            uint64_t v74 = v49 - 16;
            uint64_t v75 = v70 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v76 = *(_OWORD *)v74;
              *(v73 - 1) = *((_OWORD *)v74 - 1);
              *uint64_t v73 = v76;
              v73 -= 2;
              v74 -= 32;
              v75 -= 8;
            }
            while (v75);
            double v49 = v72;
            if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_247:
              do
              {
LABEL_80:
                int v77 = *((_DWORD *)v49 - 1);
                v49 -= 4;
                *--uint64_t v59 = v77;
              }
              while (v49 != v52);
            }
LABEL_81:
            *(void *)(a1 + 80) = v59;
            *(void *)(a1 + 88) = v50;
            *(void *)(a1 + 96) = &v58[4 * v57];
            if (v52) {
              operator delete(v52);
            }
            goto LABEL_83;
          }
        }
        else
        {
          uint64_t v58 = 0;
          uint64_t v59 = (_DWORD *)(4 * v54);
          *(_DWORD *)(4 * v54) = v47;
          uint64_t v50 = 4 * v54 + 4;
          if (v49 != v52) {
            goto LABEL_62;
          }
        }
        int v9 = v221;
        goto LABEL_81;
      }
      if ((unint64_t)v49 >= v48)
      {
        uint64_t v61 = (char *)*v217;
        uint64_t v62 = v49 - (unsigned char *)*v217;
        uint64_t v63 = v62 >> 2;
        unint64_t v64 = (v62 >> 2) + 1;
        if (v64 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v65 = v48 - (void)v61;
        if (v65 >> 1 > v64) {
          unint64_t v64 = v65 >> 1;
        }
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v64;
        }
        if (v66)
        {
          if (v66 >> 62) {
LABEL_235:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unint64_t v67 = operator new(4 * v66);
          int v68 = &v67[4 * v63];
          _DWORD *v68 = -1;
          uint64_t v51 = (uint64_t)(v68 + 1);
          if (v49 == v61) {
            goto LABEL_110;
          }
LABEL_104:
          unint64_t v99 = v49 - 4 - v61;
          if (v99 < 0x2C) {
            goto LABEL_248;
          }
          if ((unint64_t)(v49 - &v67[v62]) < 0x20) {
            goto LABEL_248;
          }
          uint64_t v100 = (v99 >> 2) + 1;
          uint64_t v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v102 = &v49[-v101];
          int v68 = (_DWORD *)((char *)v68 - v101);
          uint64_t v103 = &v67[4 * v63 - 16];
          unint64_t v104 = v49 - 16;
          uint64_t v105 = v100 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v106 = *(_OWORD *)v104;
            *(v103 - 1) = *((_OWORD *)v104 - 1);
            *uint64_t v103 = v106;
            v103 -= 2;
            v104 -= 32;
            v105 -= 8;
          }
          while (v105);
          double v49 = v102;
          if (v100 != (v100 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_248:
            do
            {
              int v107 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *--int v68 = v107;
            }
            while (v49 != v61);
          }
        }
        else
        {
          unint64_t v67 = 0;
          int v68 = (_DWORD *)(4 * v63);
          *(_DWORD *)(4 * v63) = -1;
          uint64_t v51 = 4 * v63 + 4;
          if (v49 != v61) {
            goto LABEL_104;
          }
        }
LABEL_110:
        *(void *)(a1 + 80) = v68;
        *(void *)(a1 + 88) = v51;
        *(void *)(a1 + 96) = &v67[4 * v66];
        if (v61) {
          operator delete(v61);
        }
        goto LABEL_112;
      }
      *(_DWORD *)double v49 = -1;
      uint64_t v51 = (uint64_t)(v49 + 4);
LABEL_112:
      *(void *)(a1 + 88) = v51;
      int v108 = *(_DWORD *)(v9[11] + 4 * v11);
      if (v108 == -1)
      {
        uint64_t v109 = *(void *)(v9[14] + 8 * v11);
        uint64_t v111 = *(char **)(a1 + 112);
        unint64_t v110 = *(void *)(a1 + 120);
        if ((unint64_t)v111 < v110)
        {
LABEL_114:
          *(void *)uint64_t v111 = v109;
          unint64_t v80 = v111 + 8;
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v109 = *(void *)(*(void *)(*v9 + 40) + 12 * v108);
        uint64_t v111 = *(char **)(a1 + 112);
        unint64_t v110 = *(void *)(a1 + 120);
        if ((unint64_t)v111 < v110) {
          goto LABEL_114;
        }
      }
      int v81 = (char *)*v216;
      uint64_t v112 = v111 - (unsigned char *)*v216;
      uint64_t v113 = v112 >> 3;
      unint64_t v114 = (v112 >> 3) + 1;
      if (v114 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v115 = v110 - (void)v81;
      if (v115 >> 2 > v114) {
        unint64_t v114 = v115 >> 2;
      }
      if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v86 = v114;
      }
      if (v86)
      {
        if (v86 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v87 = operator new(8 * v86);
        unint64_t v88 = &v87[8 * v113];
        *unint64_t v88 = v109;
        uint64_t v89 = (uint64_t)(v88 + 1);
        if (v111 == v81)
        {
LABEL_129:
          int v9 = v221;
          goto LABEL_135;
        }
      }
      else
      {
        uint64_t v87 = 0;
        unint64_t v88 = (void *)(8 * v113);
        *(void *)(8 * v113) = v109;
        uint64_t v89 = 8 * v113 + 8;
        if (v111 == v81) {
          goto LABEL_129;
        }
      }
      unint64_t v116 = v111 - 8 - v81;
      if (v116 < 0x58)
      {
        int v9 = v221;
        do
        {
LABEL_134:
          uint64_t v125 = *((void *)v111 - 1);
          v111 -= 8;
          *--unint64_t v88 = v125;
        }
        while (v111 != v81);
        goto LABEL_135;
      }
      unint64_t v117 = v111 - &v87[v112];
      int v9 = v221;
      if (v117 < 0x20) {
        goto LABEL_134;
      }
      uint64_t v118 = (v116 >> 3) + 1;
      uint64_t v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
      v120 = &v111[-v119];
      unint64_t v88 = (void *)((char *)v88 - v119);
      uint64_t v121 = &v87[8 * v113 - 16];
      v122 = v111 - 16;
      uint64_t v123 = v118 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v124 = *(_OWORD *)v122;
        *(v121 - 1) = *((_OWORD *)v122 - 1);
        *uint64_t v121 = v124;
        v121 -= 2;
        v122 -= 32;
        v123 -= 4;
      }
      while (v123);
      uint64_t v111 = v120;
      if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_134;
      }
LABEL_135:
      *(void *)(a1 + 104) = v88;
      *(void *)(a1 + 112) = v89;
      *(void *)(a1 + 120) = &v87[8 * v86];
      if (v81) {
        operator delete(v81);
      }
LABEL_137:
      *(void *)(a1 + 112) = v89;
      int v126 = *(_DWORD *)(v9[5] + 4 * v11);
      uint64_t v128 = *(char **)(a1 + 40);
      unint64_t v127 = *(void *)(a1 + 48);
      if ((unint64_t)v128 < v127)
      {
        *(_DWORD *)uint64_t v128 = v126;
        uint64_t v129 = (uint64_t)(v128 + 4);
        goto LABEL_159;
      }
      v130 = (char *)*v215;
      uint64_t v131 = v128 - (unsigned char *)*v215;
      uint64_t v132 = v131 >> 2;
      unint64_t v133 = (v131 >> 2) + 1;
      if (v133 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v134 = v127 - (void)v130;
      if (v134 >> 1 > v133) {
        unint64_t v133 = v134 >> 1;
      }
      if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v135 = v133;
      }
      if (v135)
      {
        if (v135 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v136 = operator new(4 * v135);
        v137 = &v136[4 * v132];
        _DWORD *v137 = v126;
        uint64_t v129 = (uint64_t)(v137 + 1);
        if (v128 == v130)
        {
LABEL_151:
          int v9 = v221;
          goto LABEL_157;
        }
      }
      else
      {
        v136 = 0;
        v137 = (_DWORD *)(4 * v132);
        *(_DWORD *)(4 * v132) = v126;
        uint64_t v129 = 4 * v132 + 4;
        if (v128 == v130) {
          goto LABEL_151;
        }
      }
      unint64_t v138 = v128 - 4 - v130;
      if (v138 < 0x2C)
      {
        int v9 = v221;
        do
        {
LABEL_156:
          int v147 = *((_DWORD *)v128 - 1);
          v128 -= 4;
          *--v137 = v147;
        }
        while (v128 != v130);
        goto LABEL_157;
      }
      unint64_t v139 = v128 - &v136[v131];
      int v9 = v221;
      if (v139 < 0x20) {
        goto LABEL_156;
      }
      uint64_t v140 = (v138 >> 2) + 1;
      uint64_t v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
      v142 = &v128[-v141];
      v137 = (_DWORD *)((char *)v137 - v141);
      int64_t v143 = &v136[4 * v132 - 16];
      uint64_t v144 = v128 - 16;
      uint64_t v145 = v140 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v146 = *(_OWORD *)v144;
        *(v143 - 1) = *((_OWORD *)v144 - 1);
        *int64_t v143 = v146;
        v143 -= 2;
        v144 -= 32;
        v145 -= 8;
      }
      while (v145);
      uint64_t v128 = v142;
      if (v140 != (v140 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_156;
      }
LABEL_157:
      *(void *)(a1 + 32) = v137;
      *(void *)(a1 + 40) = v129;
      *(void *)(a1 + 48) = &v136[4 * v135];
      if (v130) {
        operator delete(v130);
      }
LABEL_159:
      *(void *)(a1 + 40) = v129;
      int v148 = *(_DWORD *)(v9[8] + 4 * v11);
      v150 = *(char **)(a1 + 64);
      unint64_t v149 = *(void *)(a1 + 72);
      if ((unint64_t)v150 < v149)
      {
        *(_DWORD *)v150 = v148;
        uint64_t v151 = (uint64_t)(v150 + 4);
        goto LABEL_181;
      }
      v152 = (char *)*v214;
      uint64_t v153 = v150 - (unsigned char *)*v214;
      uint64_t v154 = v153 >> 2;
      unint64_t v155 = (v153 >> 2) + 1;
      if (v155 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v156 = v149 - (void)v152;
      if (v156 >> 1 > v155) {
        unint64_t v155 = v156 >> 1;
      }
      if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v157 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v157 = v155;
      }
      if (v157)
      {
        if (v157 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v158 = operator new(4 * v157);
        uint64_t v159 = &v158[4 * v154];
        *uint64_t v159 = v148;
        uint64_t v151 = (uint64_t)(v159 + 1);
        if (v150 == v152)
        {
LABEL_173:
          int v9 = v221;
          goto LABEL_179;
        }
      }
      else
      {
        long long v158 = 0;
        uint64_t v159 = (_DWORD *)(4 * v154);
        *(_DWORD *)(4 * v154) = v148;
        uint64_t v151 = 4 * v154 + 4;
        if (v150 == v152) {
          goto LABEL_173;
        }
      }
      unint64_t v160 = v150 - 4 - v152;
      if (v160 < 0x2C)
      {
        int v9 = v221;
        do
        {
LABEL_178:
          int v169 = *((_DWORD *)v150 - 1);
          v150 -= 4;
          *--uint64_t v159 = v169;
        }
        while (v150 != v152);
        goto LABEL_179;
      }
      unint64_t v161 = v150 - &v158[v153];
      int v9 = v221;
      if (v161 < 0x20) {
        goto LABEL_178;
      }
      uint64_t v162 = (v160 >> 2) + 1;
      uint64_t v163 = 4 * (v162 & 0x7FFFFFFFFFFFFFF8);
      v164 = &v150[-v163];
      uint64_t v159 = (_DWORD *)((char *)v159 - v163);
      v165 = &v158[4 * v154 - 16];
      v166 = v150 - 16;
      uint64_t v167 = v162 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v168 = *(_OWORD *)v166;
        *(v165 - 1) = *((_OWORD *)v166 - 1);
        _OWORD *v165 = v168;
        v165 -= 2;
        v166 -= 32;
        v167 -= 8;
      }
      while (v167);
      v150 = v164;
      if (v162 != (v162 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_178;
      }
LABEL_179:
      *(void *)(a1 + 56) = v159;
      *(void *)(a1 + 64) = v151;
      *(void *)(a1 + 72) = &v158[4 * v157];
      if (v152) {
        operator delete(v152);
      }
LABEL_181:
      *(void *)(a1 + 64) = v151;
      int v170 = *(_DWORD *)(v9[5] + 4 * v11) ^ 1;
      v172 = *(int **)(a1 + 160);
      unint64_t v171 = *(void *)(a1 + 168);
      if ((unint64_t)v172 < v171)
      {
        int *v172 = v170;
        uint64_t v173 = (uint64_t)(v172 + 1);
        goto LABEL_203;
      }
      v174 = (int *)*v213;
      uint64_t v175 = (char *)v172 - (unsigned char *)*v213;
      uint64_t v176 = v175 >> 2;
      unint64_t v177 = (v175 >> 2) + 1;
      if (v177 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v178 = v171 - (void)v174;
      if (v178 >> 1 > v177) {
        unint64_t v177 = v178 >> 1;
      }
      if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v179 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v179 = v177;
      }
      if (v179)
      {
        if (v179 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v180 = operator new(4 * v179);
        uint64_t v181 = (int *)&v180[4 * v176];
        *uint64_t v181 = v170;
        uint64_t v173 = (uint64_t)(v181 + 1);
        if (v172 == v174)
        {
LABEL_195:
          int v9 = v221;
          goto LABEL_201;
        }
      }
      else
      {
        int v180 = 0;
        uint64_t v181 = (int *)(4 * v176);
        *(_DWORD *)(4 * v176) = v170;
        uint64_t v173 = 4 * v176 + 4;
        if (v172 == v174) {
          goto LABEL_195;
        }
      }
      unint64_t v182 = (char *)(v172 - 1) - (char *)v174;
      if (v182 < 0x2C)
      {
        int v9 = v221;
        do
        {
LABEL_200:
          int v191 = *--v172;
          *--uint64_t v181 = v191;
        }
        while (v172 != v174);
        goto LABEL_201;
      }
      unint64_t v183 = (char *)v172 - &v180[v175];
      int v9 = v221;
      if (v183 < 0x20) {
        goto LABEL_200;
      }
      uint64_t v184 = (v182 >> 2) + 1;
      uint64_t v185 = 4 * (v184 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v186 = &v172[v185 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v181 = (int *)((char *)v181 - v185);
      long long v187 = &v180[4 * v176 - 16];
      v188 = v172 - 4;
      uint64_t v189 = v184 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v190 = *(_OWORD *)v188;
        *(v187 - 1) = *((_OWORD *)v188 - 1);
        *long long v187 = v190;
        v187 -= 2;
        v188 -= 8;
        v189 -= 8;
      }
      while (v189);
      v172 = v186;
      if (v184 != (v184 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_200;
      }
LABEL_201:
      *(void *)(a1 + 152) = v181;
      *(void *)(a1 + 160) = v173;
      *(void *)(a1 + 168) = &v180[4 * v179];
      if (v174) {
        operator delete(v174);
      }
LABEL_203:
      *(void *)(a1 + 160) = v173;
      int v192 = *(_DWORD *)(v9[8] + 4 * v11) ^ 1;
      uint64_t v194 = *(int **)(a1 + 184);
      unint64_t v193 = *(void *)(a1 + 192);
      if ((unint64_t)v194 >= v193)
      {
        v195 = (int *)*v219;
        uint64_t v196 = (char *)v194 - (unsigned char *)*v219;
        uint64_t v197 = v196 >> 2;
        unint64_t v198 = (v196 >> 2) + 1;
        if (v198 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v199 = v193 - (void)v195;
        if (v199 >> 1 > v198) {
          unint64_t v198 = v199 >> 1;
        }
        if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v200 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v198;
        }
        if (v200)
        {
          if (v200 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v201 = operator new(4 * v200);
          v202 = (int *)&v201[4 * v197];
          int *v202 = v192;
          uint64_t v10 = (uint64_t)(v202 + 1);
          if (v194 == v195) {
            goto LABEL_221;
          }
LABEL_215:
          unint64_t v203 = (char *)(v194 - 1) - (char *)v195;
          if (v203 < 0x2C) {
            goto LABEL_249;
          }
          if ((unint64_t)((char *)v194 - &v201[v196]) < 0x20) {
            goto LABEL_249;
          }
          uint64_t v204 = (v203 >> 2) + 1;
          uint64_t v205 = 4 * (v204 & 0x7FFFFFFFFFFFFFF8);
          v206 = &v194[v205 / 0xFFFFFFFFFFFFFFFCLL];
          v202 = (int *)((char *)v202 - v205);
          v207 = &v201[4 * v197 - 16];
          v208 = v194 - 4;
          uint64_t v209 = v204 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v210 = *(_OWORD *)v208;
            *(v207 - 1) = *((_OWORD *)v208 - 1);
            _OWORD *v207 = v210;
            v207 -= 2;
            v208 -= 8;
            v209 -= 8;
          }
          while (v209);
          uint64_t v194 = v206;
          if (v204 != (v204 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_249:
            do
            {
              int v211 = *--v194;
              *--v202 = v211;
            }
            while (v194 != v195);
          }
        }
        else
        {
          v201 = 0;
          v202 = (int *)(4 * v197);
          *(_DWORD *)(4 * v197) = v192;
          uint64_t v10 = 4 * v197 + 4;
          if (v194 != v195) {
            goto LABEL_215;
          }
        }
LABEL_221:
        *(void *)(a1 + 176) = v202;
        *(void *)(a1 + 184) = v10;
        *(void *)(a1 + 192) = &v201[4 * v200];
        if (v195) {
          operator delete(v195);
        }
        goto LABEL_4;
      }
      int *v194 = v192;
      uint64_t v10 = (uint64_t)(v194 + 1);
LABEL_4:
      *(void *)(a1 + 184) = v10;
      ++v8;
    }
    while (v8 != v220);
  }
  operations_research::sat::SchedulingConstraintHelper::InitSortedVectors((operations_research::sat::SchedulingConstraintHelper *)a1);
  return a1;
}

void sub_23CD0CF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16)
{
  uint64_t v18 = (void *)v16[53];
  if (v18)
  {
    operator delete(v18);
    unint64_t v19 = a16 + 23;
    uint64_t v20 = (void *)v16[48];
    if (!v20)
    {
LABEL_3:
      unint64_t v21 = *v19;
      if (!*v19) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v19 = a16 + 23;
    uint64_t v20 = (void *)v16[48];
    if (!v20) {
      goto LABEL_3;
    }
  }
  v16[49] = v20;
  operator delete(v20);
  unint64_t v21 = *v19;
  if (!*v19)
  {
LABEL_4:
    uint64_t v22 = (void *)v16[40];
    if (!v22) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  v16[46] = v21;
  operator delete(v21);
  uint64_t v22 = (void *)v16[40];
  if (!v22)
  {
LABEL_5:
    unint64_t v23 = (void *)v16[37];
    if (!v23) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  v16[41] = v22;
  operator delete(v22);
  unint64_t v23 = (void *)v16[37];
  if (!v23)
  {
LABEL_6:
    unint64_t v24 = (void *)v16[34];
    if (!v24) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  v16[38] = v23;
  operator delete(v23);
  unint64_t v24 = (void *)v16[34];
  if (!v24)
  {
LABEL_7:
    uint64_t v25 = (void *)v16[31];
    if (!v25) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  v16[35] = v24;
  operator delete(v24);
  uint64_t v25 = (void *)v16[31];
  if (!v25)
  {
LABEL_8:
    uint64_t v26 = (void *)v16[28];
    if (!v26) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  v16[32] = v25;
  operator delete(v25);
  uint64_t v26 = (void *)v16[28];
  if (!v26)
  {
LABEL_9:
    unint64_t v27 = (void *)v16[25];
    if (!v27) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  v16[29] = v26;
  operator delete(v26);
  unint64_t v27 = (void *)v16[25];
  if (!v27)
  {
LABEL_10:
    uint64_t v28 = *a16;
    if (!*a16) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  v16[26] = v27;
  operator delete(v27);
  uint64_t v28 = *a16;
  if (!*a16)
  {
LABEL_11:
    unint64_t v29 = *a10;
    if (!*a10) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  v16[23] = v28;
  operator delete(v28);
  unint64_t v29 = *a10;
  if (!*a10)
  {
LABEL_12:
    uint64_t v30 = *a15;
    if (!*a15) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  v16[20] = v29;
  operator delete(v29);
  uint64_t v30 = *a15;
  if (!*a15)
  {
LABEL_13:
    uint64_t v31 = *a13;
    if (!*a13) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  v16[17] = v30;
  operator delete(v30);
  uint64_t v31 = *a13;
  if (!*a13)
  {
LABEL_14:
    unint64_t v32 = *a14;
    if (!*a14) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  v16[14] = v31;
  operator delete(v31);
  unint64_t v32 = *a14;
  if (!*a14)
  {
LABEL_15:
    uint64_t v33 = *a11;
    if (!*a11) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  v16[11] = v32;
  operator delete(v32);
  uint64_t v33 = *a11;
  if (!*a11)
  {
LABEL_16:
    unsigned int v34 = *a12;
    if (!*a12) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  v16[8] = v33;
  operator delete(v33);
  unsigned int v34 = *a12;
  if (!*a12) {
LABEL_17:
  }
    _Unwind_Resume(exception_object);
LABEL_33:
  v16[5] = v34;
  operator delete(v34);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SchedulingConstraintHelper::InitSortedVectors(operations_research::sat::SchedulingConstraintHelper *this)
{
  uint64_t v3 = (_DWORD **)((char *)this + 200);
  uint64_t v2 = *((void *)this + 25);
  uint64_t v4 = *((void *)this + 5) - *((void *)this + 4);
  unint64_t v5 = (int)(v4 >> 2);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 26) - v2) >> 2);
  if (v5 <= v6)
  {
    if (v5 < v6) {
      *((void *)this + 26) = v2 + 12 * (int)v5;
    }
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 200, v5 - v6);
  }
  uint64_t v7 = *((void *)this + 28);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 29) - v7) >> 2);
  if (v5 <= v8)
  {
    if (v5 < v8) {
      *((void *)this + 29) = v7 + 12 * (int)v5;
    }
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 224, v5 - v8);
  }
  uint64_t v9 = *((void *)this + 31);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 32) - v9) >> 2);
  if (v5 <= v10)
  {
    if (v5 < v10) {
      *((void *)this + 32) = v9 + 12 * (int)v5;
    }
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 248, v5 - v10);
  }
  uint64_t v11 = *((void *)this + 34);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 35) - v11) >> 2);
  if (v5 <= v12)
  {
    if (v5 < v12) {
      *((void *)this + 35) = v11 + 12 * (int)v5;
    }
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 272, v5 - v12);
  }
  uint64_t v13 = *((void *)this + 37);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 38) - v13) >> 2);
  if (v5 <= v14)
  {
    if (v5 < v14) {
      *((void *)this + 38) = v13 + 12 * (int)v5;
    }
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 296, v5 - v14);
  }
  uint64_t v15 = *((void *)this + 40);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 41) - v15) >> 2);
  if (v5 <= v16)
  {
    if (v5 < v16) {
      *((void *)this + 41) = v15 + 12 * (int)v5;
    }
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 320, v5 - v16);
  }
  if ((int)((unint64_t)v4 >> 2) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *v3;
    unint64_t v19 = (_DWORD *)*((void *)this + 28);
    uint64_t v20 = (_DWORD *)*((void *)this + 31);
    unint64_t v21 = (_DWORD *)*((void *)this + 34);
    uint64_t v22 = (_DWORD *)*((void *)this + 37);
    unint64_t v23 = (_DWORD *)*((void *)this + 40);
    do
    {
      *uint64_t v18 = v17;
      v18 += 3;
      *unint64_t v19 = v17;
      v19 += 3;
      *uint64_t v20 = v17;
      v20 += 3;
      *unint64_t v21 = v17;
      v21 += 3;
      *uint64_t v22 = v17;
      v22 += 3;
      *unint64_t v23 = v17;
      v23 += 3;
      ++v17;
    }
    while (((unint64_t)v4 >> 2) != v17);
  }
  *((void *)this + 43) = -1;
  *((void *)this + 44) = -1;
}

operations_research::sat::SchedulingConstraintHelper *operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper(operations_research::sat::SchedulingConstraintHelper *this, int a2, operations_research::sat::Model *a3)
{
  *(void *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a3);
  *((void *)this + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>((uint64_t)a3);
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 2) = v6;
  *((unsigned char *)this + 24) = 1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 43) = -1;
  *((void *)this + 44) = -1;
  *((void *)this + 42) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((void *)this + 55) = 0;
  if (a2)
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 32), a2);
    int v8 = (*((void *)this + 5) - *((void *)this + 4)) >> 2;
    int v9 = a2;
    if (v8 != a2) {
      google::MakeCheckOpString<int,int>((int)&v8, (int)&v9, "NumTasks() == num_tasks");
    }
  }
  else
  {
    int v8 = 0;
    int v9 = 0;
  }
  return this;
}

void sub_23CD0D4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD0D4D4(_Unwind_Exception *exception_object)
{
  unint64_t v5 = (void *)v1[53];
  if (v5)
  {
    operator delete(v5);
    uint64_t v6 = (void *)v1[48];
    if (!v6)
    {
LABEL_3:
      uint64_t v7 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v6 = (void *)v1[48];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[49] = v6;
  operator delete(v6);
  uint64_t v7 = *v3;
  if (!*v3)
  {
LABEL_4:
    int v8 = (void *)v1[40];
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  v1[46] = v7;
  operator delete(v7);
  int v8 = (void *)v1[40];
  if (!v8)
  {
LABEL_5:
    int v9 = (void *)v1[37];
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  v1[41] = v8;
  operator delete(v8);
  int v9 = (void *)v1[37];
  if (!v9)
  {
LABEL_6:
    unint64_t v10 = (void *)v1[34];
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  v1[38] = v9;
  operator delete(v9);
  unint64_t v10 = (void *)v1[34];
  if (!v10)
  {
LABEL_7:
    uint64_t v11 = (void *)v1[31];
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  v1[35] = v10;
  operator delete(v10);
  uint64_t v11 = (void *)v1[31];
  if (!v11)
  {
LABEL_8:
    unint64_t v12 = (void *)v1[28];
    if (!v12) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  v1[32] = v11;
  operator delete(v11);
  unint64_t v12 = (void *)v1[28];
  if (!v12)
  {
LABEL_9:
    uint64_t v13 = (void *)v1[25];
    if (!v13) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  v1[29] = v12;
  operator delete(v12);
  uint64_t v13 = (void *)v1[25];
  if (!v13)
  {
LABEL_10:
    unint64_t v14 = (void *)v1[22];
    if (!v14) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  v1[26] = v13;
  operator delete(v13);
  unint64_t v14 = (void *)v1[22];
  if (!v14)
  {
LABEL_11:
    uint64_t v15 = (void *)v1[19];
    if (!v15) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  v1[23] = v14;
  operator delete(v14);
  uint64_t v15 = (void *)v1[19];
  if (!v15)
  {
LABEL_12:
    unint64_t v16 = (void *)v1[16];
    if (!v16) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  v1[20] = v15;
  operator delete(v15);
  unint64_t v16 = (void *)v1[16];
  if (!v16)
  {
LABEL_13:
    uint64_t v17 = (void *)v1[13];
    if (!v17) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  v1[17] = v16;
  operator delete(v16);
  uint64_t v17 = (void *)v1[13];
  if (!v17)
  {
LABEL_14:
    uint64_t v18 = (void *)v1[10];
    if (!v18) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  v1[14] = v17;
  operator delete(v17);
  uint64_t v18 = (void *)v1[10];
  if (!v18)
  {
LABEL_15:
    unint64_t v19 = (void *)v1[7];
    if (!v19) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  v1[11] = v18;
  operator delete(v18);
  unint64_t v19 = (void *)v1[7];
  if (!v19)
  {
LABEL_16:
    uint64_t v20 = *v2;
    if (!*v2) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  v1[8] = v19;
  operator delete(v19);
  uint64_t v20 = *v2;
  if (!*v2) {
LABEL_17:
  }
    _Unwind_Resume(exception_object);
LABEL_33:
  v1[5] = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SchedulingConstraintHelper::ResetFromSubset(std::vector<int> *this, uint64_t a2, int *a3, unsigned int a4)
{
  p_std::vector<int>::pointer end = &this[1].__end_;
  std::vector<int>::pointer end = this[1].__end_;
  LOBYTE(this[1].__begin_) = *(unsigned char *)(a2 + 24);
  unint64_t v8 = (int)a4;
  unint64_t v9 = this[1].__end_cap_.__value_ - end;
  if ((int)a4 <= v9)
  {
    if ((int)a4 < v9) {
      this[1].__end_cap_.__value_ = &end[a4];
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 32), (int)a4 - v9);
  }
  std::vector<int>::pointer v10 = this[2].__end_;
  unint64_t v11 = this[2].__end_cap_.__value_ - v10;
  if (v8 <= v11)
  {
    if (v8 < v11) {
      this[2].__end_cap_.__value_ = &v10[v8];
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 56), v8 - v11);
  }
  std::vector<int>::pointer v12 = this[7].__end_;
  unint64_t v13 = this[7].__end_cap_.__value_ - v12;
  if (v8 <= v13)
  {
    if (v8 < v13) {
      this[7].__end_cap_.__value_ = &v12[v8];
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 176), v8 - v13);
  }
  std::vector<int>::pointer v14 = this[6].__end_;
  unint64_t v15 = this[6].__end_cap_.__value_ - v14;
  if (v8 <= v15)
  {
    if (v8 < v15) {
      this[6].__end_cap_.__value_ = &v14[v8];
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 152), v8 - v15);
  }
  std::vector<int>::pointer v16 = this[3].__end_;
  unint64_t v17 = this[3].__end_cap_.__value_ - v16;
  if (v8 <= v17)
  {
    if (v8 < v17) {
      this[3].__end_cap_.__value_ = &v16[v8];
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v8 - v17);
  }
  std::vector<int>::pointer v18 = this[4].__end_;
  unint64_t v19 = ((char *)this[4].__end_cap_.__value_ - (char *)v18) >> 3;
  if (v8 <= v19)
  {
    if (v8 < v19) {
      this[4].__end_cap_.__value_ = &v18[2 * v8];
    }
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)&this[4].__end_, v8 - v19);
  }
  std::vector<int>::pointer v20 = this[5].__end_;
  unint64_t v21 = this[5].__end_cap_.__value_ - v20;
  if (v8 <= v21)
  {
    if (v8 < v21) {
      this[5].__end_cap_.__value_ = &v20[v8];
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 128), v8 - v21);
  }
  if ((int)v8 >= 1)
  {
    uint64_t v22 = *(void *)(a2 + 32);
    std::vector<int>::pointer v23 = *p_end;
    uint64_t v24 = *(void *)(a2 + 56);
    std::vector<int>::pointer v25 = this[2].__end_;
    uint64_t v26 = *(void *)(a2 + 176);
    std::vector<int>::pointer v27 = this[7].__end_;
    uint64_t v28 = *(void *)(a2 + 152);
    std::vector<int>::pointer v29 = this[6].__end_;
    uint64_t v30 = *(void *)(a2 + 80);
    std::vector<int>::pointer v31 = this[3].__end_;
    uint64_t v32 = *(void *)(a2 + 104);
    std::vector<int>::pointer v33 = this[4].__end_;
    uint64_t v34 = *(void *)(a2 + 128);
    uint64_t v35 = a4;
    std::vector<int>::pointer v36 = this[5].__end_;
    do
    {
      uint64_t v37 = *a3++;
      *v23++ = *(_DWORD *)(v22 + 4 * v37);
      *v25++ = *(_DWORD *)(v24 + 4 * v37);
      *v27++ = *(_DWORD *)(v26 + 4 * v37);
      *v29++ = *(_DWORD *)(v28 + 4 * v37);
      *v31++ = *(_DWORD *)(v30 + 4 * v37);
      *(void *)std::vector<int>::pointer v33 = *(void *)(v32 + 8 * v37);
      v33 += 2;
      *v36++ = *(_DWORD *)(v34 + 4 * v37);
      --v35;
    }
    while (v35);
  }

  operations_research::sat::SchedulingConstraintHelper::InitSortedVectors((operations_research::sat::SchedulingConstraintHelper *)this);
}

int8x16_t operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(operations_research::sat::SchedulingConstraintHelper *this, int a2)
{
  if (*((unsigned __int8 *)this + 24) != a2)
  {
    *((unsigned char *)this + 24) = a2;
    long long v2 = *((_OWORD *)this + 2);
    *((_OWORD *)this + 2) = *((_OWORD *)this + 11);
    *((_OWORD *)this + 11) = v2;
    uint64_t v3 = *((void *)this + 6);
    *((void *)this + 6) = *((void *)this + 24);
    *((void *)this + 24) = v3;
    long long v4 = *(_OWORD *)((char *)this + 56);
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)this + 152);
    *(_OWORD *)((char *)this + 152) = v4;
    uint64_t v5 = *((void *)this + 9);
    *((void *)this + 9) = *((void *)this + 21);
    *((void *)this + 21) = v5;
    long long v6 = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)((char *)this + 200) = *((_OWORD *)this + 17);
    *((_OWORD *)this + 17) = v6;
    uint64_t v7 = *((void *)this + 27);
    *((void *)this + 27) = *((void *)this + 36);
    *((void *)this + 36) = v7;
    long long v8 = *((_OWORD *)this + 14);
    *((_OWORD *)this + 14) = *(_OWORD *)((char *)this + 248);
    *(_OWORD *)((char *)this + 248) = v8;
    uint64_t v9 = *((void *)this + 30);
    *((void *)this + 30) = *((void *)this + 33);
    *((void *)this + 33) = v9;
    long long v10 = *(_OWORD *)((char *)this + 296);
    *(_OWORD *)((char *)this + 296) = *((_OWORD *)this + 20);
    *((_OWORD *)this + 20) = v10;
    uint64_t v11 = *((void *)this + 39);
    *((void *)this + 39) = *((void *)this + 42);
    *((void *)this + 42) = v11;
    int8x16_t result = vextq_s8(*(int8x16_t *)((char *)this + 344), *(int8x16_t *)((char *)this + 344), 8uLL);
    *(int8x16_t *)((char *)this + 344) = result;
  }
  return result;
}

char *operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingStartMin(operations_research::sat::SchedulingConstraintHelper *this)
{
  long long v2 = (char *)this + 200;
  uint64_t v1 = (char *)*((void *)this + 25);
  uint64_t v3 = *((void *)this + 4);
  unint64_t v4 = *((void *)this + 5) - v3;
  if ((int)(v4 >> 2) >= 1)
  {
    uint64_t v5 = *(void *)(*((void *)this + 1) + 40);
    uint64_t v6 = (v4 >> 2);
    uint64_t v7 = v1 + 4;
    do
    {
      *uint64_t v7 = *(void *)(v5 + 12 * *(int *)(v3 + 4 * *((int *)v7 - 1)));
      uint64_t v7 = (void *)((char *)v7 + 12);
      --v6;
    }
    while (v6);
  }
  long long v8 = (char *)*((void *)this + 26);
  if ((int)(-1431655765 * ((unint64_t)(v8 - v1) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v8 - v1) >> 2), v1, v8, 0);
  }
  else if (v8 - v1 >= 24)
  {
    uint64_t v9 = v8 - 12;
    long long v10 = v1;
    if (v8 - 12 != v1)
    {
      long long v10 = v8 - 12;
      uint64_t v11 = v8 - 12;
      do
      {
        uint64_t v12 = *(void *)(v11 - 12);
        v11 -= 12;
        LODWORD(v23) = HIDWORD(v12);
        HIDWORD(v23) = *((_DWORD *)v11 + 2);
        if (*((void *)v11 + 2) < v23)
        {
          int v13 = *((_DWORD *)v9 + 2);
          uint64_t v14 = *(void *)v9;
          *(void *)uint64_t v9 = *(void *)v11;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v11 + 2);
          *(void *)uint64_t v11 = v14;
          *((_DWORD *)v11 + 2) = v13;
          long long v10 = v9;
        }
        uint64_t v9 = v11;
      }
      while (v11 != v1);
    }
    while (1)
    {
      unint64_t v15 = v10 + 12;
      if (v10 + 12 == v8) {
        break;
      }
      int v16 = *((_DWORD *)v10 + 3);
      uint64_t v17 = *((void *)v10 + 2);
      v10 += 12;
      *(void *)&long long v21 = *(void *)(v15 - 12);
      DWORD2(v21) = *((_DWORD *)v15 - 1);
      if (v17 < *(uint64_t *)((char *)&v21 + 4))
      {
        std::vector<int>::pointer v18 = v15;
        do
        {
          uint64_t v19 = *(void *)(v15 - 12);
          v15 -= 12;
          *(void *)std::vector<int>::pointer v18 = v19;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v18 - 1);
          *(void *)&long long v22 = *((void *)v18 - 3);
          DWORD2(v22) = *((_DWORD *)v18 - 4);
          std::vector<int>::pointer v18 = v15;
        }
        while (v17 < *(uint64_t *)((char *)&v22 + 4));
      }
      *(_DWORD *)unint64_t v15 = v16;
      *(void *)(v15 + 4) = v17;
    }
  }
  return v2;
}

char *operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingEndMin(operations_research::sat::SchedulingConstraintHelper *this)
{
  long long v2 = (char *)this + 224;
  uint64_t v1 = (char *)*((void *)this + 28);
  unint64_t v3 = *((void *)this + 5) - *((void *)this + 4);
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v4 = *((void *)this + 7);
    uint64_t v5 = *(void *)(*((void *)this + 1) + 40);
    uint64_t v6 = (v3 >> 2);
    uint64_t v7 = v1 + 4;
    do
    {
      *uint64_t v7 = *(void *)(v5 + 12 * *(int *)(v4 + 4 * *((int *)v7 - 1)));
      uint64_t v7 = (void *)((char *)v7 + 12);
      --v6;
    }
    while (v6);
  }
  long long v8 = (char *)*((void *)this + 29);
  if ((int)(-1431655765 * ((unint64_t)(v8 - v1) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v8 - v1) >> 2), v1, v8, 0);
  }
  else if (v8 - v1 >= 24)
  {
    uint64_t v9 = v8 - 12;
    long long v10 = v1;
    if (v8 - 12 != v1)
    {
      long long v10 = v8 - 12;
      uint64_t v11 = v8 - 12;
      do
      {
        uint64_t v12 = *(void *)(v11 - 12);
        v11 -= 12;
        LODWORD(v23) = HIDWORD(v12);
        HIDWORD(v23) = *((_DWORD *)v11 + 2);
        if (*((void *)v11 + 2) < v23)
        {
          int v13 = *((_DWORD *)v9 + 2);
          uint64_t v14 = *(void *)v9;
          *(void *)uint64_t v9 = *(void *)v11;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v11 + 2);
          *(void *)uint64_t v11 = v14;
          *((_DWORD *)v11 + 2) = v13;
          long long v10 = v9;
        }
        uint64_t v9 = v11;
      }
      while (v11 != v1);
    }
    while (1)
    {
      unint64_t v15 = v10 + 12;
      if (v10 + 12 == v8) {
        break;
      }
      int v16 = *((_DWORD *)v10 + 3);
      uint64_t v17 = *((void *)v10 + 2);
      v10 += 12;
      *(void *)&long long v21 = *(void *)(v15 - 12);
      DWORD2(v21) = *((_DWORD *)v15 - 1);
      if (v17 < *(uint64_t *)((char *)&v21 + 4))
      {
        std::vector<int>::pointer v18 = v15;
        do
        {
          uint64_t v19 = *(void *)(v15 - 12);
          v15 -= 12;
          *(void *)std::vector<int>::pointer v18 = v19;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v18 - 1);
          *(void *)&long long v22 = *((void *)v18 - 3);
          DWORD2(v22) = *((_DWORD *)v18 - 4);
          std::vector<int>::pointer v18 = v15;
        }
        while (v17 < *(uint64_t *)((char *)&v22 + 4));
      }
      *(_DWORD *)unint64_t v15 = v16;
      *(void *)(v15 + 4) = v17;
    }
  }
  return v2;
}

char *operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(operations_research::sat::SchedulingConstraintHelper *this)
{
  long long v2 = (char *)this + 248;
  uint64_t v1 = (char *)*((void *)this + 31);
  uint64_t v3 = *((void *)this + 4);
  unint64_t v4 = *((void *)this + 5) - v3;
  if ((int)(v4 >> 2) >= 1)
  {
    uint64_t v5 = *(void *)(*((void *)this + 1) + 40);
    uint64_t v6 = (v4 >> 2);
    uint64_t v7 = v1 + 4;
    do
    {
      *uint64_t v7 = -*(void *)(v5 + 12 * (*(_DWORD *)(v3 + 4 * *((int *)v7 - 1)) ^ 1));
      uint64_t v7 = (void *)((char *)v7 + 12);
      --v6;
    }
    while (v6);
  }
  long long v8 = (char *)*((void *)this + 32);
  if ((int)(-1431655765 * ((unint64_t)(v8 - v1) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::greater<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v8 - v1) >> 2), v1, v8, 0);
  }
  else if (v8 - v1 >= 24)
  {
    uint64_t v9 = v8 - 12;
    long long v10 = v1;
    if (v8 - 12 != v1)
    {
      long long v10 = v8 - 12;
      uint64_t v11 = v8 - 12;
      do
      {
        uint64_t v12 = *(void *)(v11 - 12);
        v11 -= 12;
        LODWORD(v23) = HIDWORD(v12);
        HIDWORD(v23) = *((_DWORD *)v11 + 2);
        if (*((void *)v11 + 2) > v23)
        {
          int v13 = *((_DWORD *)v9 + 2);
          uint64_t v14 = *(void *)v9;
          *(void *)uint64_t v9 = *(void *)v11;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v11 + 2);
          *(void *)uint64_t v11 = v14;
          *((_DWORD *)v11 + 2) = v13;
          long long v10 = v9;
        }
        uint64_t v9 = v11;
      }
      while (v11 != v1);
    }
    while (1)
    {
      unint64_t v15 = v10 + 12;
      if (v10 + 12 == v8) {
        break;
      }
      int v16 = *((_DWORD *)v10 + 3);
      uint64_t v17 = *((void *)v10 + 2);
      v10 += 12;
      *(void *)&long long v21 = *(void *)(v15 - 12);
      DWORD2(v21) = *((_DWORD *)v15 - 1);
      if (v17 > *(uint64_t *)((char *)&v21 + 4))
      {
        std::vector<int>::pointer v18 = v15;
        do
        {
          uint64_t v19 = *(void *)(v15 - 12);
          v15 -= 12;
          *(void *)std::vector<int>::pointer v18 = v19;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v18 - 1);
          *(void *)&long long v22 = *((void *)v18 - 3);
          DWORD2(v22) = *((_DWORD *)v18 - 4);
          std::vector<int>::pointer v18 = v15;
        }
        while (v17 > *(uint64_t *)((char *)&v22 + 4));
      }
      *(_DWORD *)unint64_t v15 = v16;
      *(void *)(v15 + 4) = v17;
    }
  }
  return v2;
}

char *operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingEndMax(operations_research::sat::SchedulingConstraintHelper *this)
{
  unint64_t v1 = *((void *)this + 5) - *((void *)this + 4);
  long long v2 = (char *)this + 272;
  uint64_t v3 = (char *)*((void *)this + 34);
  if ((int)(v1 >> 2) >= 1)
  {
    uint64_t v4 = *((void *)this + 7);
    uint64_t v5 = *(void *)(*((void *)this + 1) + 40);
    uint64_t v6 = (v1 >> 2);
    uint64_t v7 = v3 + 4;
    do
    {
      *uint64_t v7 = -*(void *)(v5 + 12 * (*(_DWORD *)(v4 + 4 * *((int *)v7 - 1)) ^ 1));
      uint64_t v7 = (void *)((char *)v7 + 12);
      --v6;
    }
    while (v6);
  }
  long long v8 = (char *)*((void *)this + 35);
  if ((int)(-1431655765 * ((unint64_t)(v8 - v3) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::greater<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v8 - v3) >> 2), v3, v8, 0);
  }
  else if (v8 - v3 >= 24)
  {
    uint64_t v9 = v8 - 12;
    long long v10 = v3;
    if (v8 - 12 != v3)
    {
      long long v10 = v8 - 12;
      uint64_t v11 = v8 - 12;
      do
      {
        uint64_t v12 = *(void *)(v11 - 12);
        v11 -= 12;
        LODWORD(v23) = HIDWORD(v12);
        HIDWORD(v23) = *((_DWORD *)v11 + 2);
        if (*((void *)v11 + 2) > v23)
        {
          int v13 = *((_DWORD *)v9 + 2);
          uint64_t v14 = *(void *)v9;
          *(void *)uint64_t v9 = *(void *)v11;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v11 + 2);
          *(void *)uint64_t v11 = v14;
          *((_DWORD *)v11 + 2) = v13;
          long long v10 = v9;
        }
        uint64_t v9 = v11;
      }
      while (v11 != v3);
    }
    while (1)
    {
      unint64_t v15 = v10 + 12;
      if (v10 + 12 == v8) {
        break;
      }
      int v16 = *((_DWORD *)v10 + 3);
      uint64_t v17 = *((void *)v10 + 2);
      v10 += 12;
      *(void *)&long long v21 = *(void *)(v15 - 12);
      DWORD2(v21) = *((_DWORD *)v15 - 1);
      if (v17 > *(uint64_t *)((char *)&v21 + 4))
      {
        std::vector<int>::pointer v18 = v15;
        do
        {
          uint64_t v19 = *(void *)(v15 - 12);
          v15 -= 12;
          *(void *)std::vector<int>::pointer v18 = v19;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v18 - 1);
          *(void *)&long long v22 = *((void *)v18 - 3);
          DWORD2(v22) = *((_DWORD *)v18 - 4);
          std::vector<int>::pointer v18 = v15;
        }
        while (v17 > *(uint64_t *)((char *)&v22 + 4));
      }
      *(_DWORD *)unint64_t v15 = v16;
      *(void *)(v15 + 4) = v17;
    }
  }
  return v2;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(operations_research::sat::SchedulingConstraintHelper *this)
{
  long long v2 = (void *)*((void *)this + 1);
  uint64_t v3 = v2[107] + v2[106];
  if (v3 > *((void *)this + 43))
  {
    *((void *)this + 43) = v3;
    uint64_t v4 = *((void *)this + 4);
    unint64_t v5 = *((void *)this + 5) - v4;
    if ((int)(v5 >> 2) >= 1)
    {
      uint64_t v6 = v2[5];
      uint64_t v7 = *((void *)this + 7);
      uint64_t v8 = (v5 >> 2);
      uint64_t v9 = *((void *)this + 10);
      long long v10 = (int64_t *)(*((void *)this + 37) + 4);
      int64_t v11 = 0x8000000000000002;
      char v12 = 1;
      do
      {
        uint64_t v16 = *((int *)v10 - 1);
        uint64_t v17 = 4 * v16;
        int v18 = *(_DWORD *)(v9 + 4 * v16);
        if (v18 == -1) {
          int v13 = (void *)(*((void *)this + 13) + 8 * v16);
        }
        else {
          int v13 = (void *)(v6 + 12 * v18);
        }
        int64_t v14 = *(void *)(v6 + 12 * *(int *)(v4 + 4 * v16));
        int64_t v15 = *(void *)(v6 + 12 * *(int *)(v7 + v17)) - *v13;
        if (v14 > v15) {
          int64_t v15 = v14;
        }
        *long long v10 = v15;
        long long v10 = (int64_t *)((char *)v10 + 12);
        v12 &= v15 >= v11;
        int64_t v11 = v15;
        --v8;
      }
      while (v8);
      if ((v12 & 1) == 0)
      {
        uint64_t v19 = (char *)*((void *)this + 37);
        std::vector<int>::pointer v20 = (char *)*((void *)this + 38);
        if ((int)(-1431655765 * ((unint64_t)(v20 - v19) >> 2)) > 32)
        {
          operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v20 - v19) >> 2), v19, v20, 0);
        }
        else if (v20 - v19 >= 24)
        {
          long long v21 = v20 - 12;
          long long v22 = (char *)*((void *)this + 37);
          if (v20 - 12 != v19)
          {
            long long v22 = v20 - 12;
            uint64_t v23 = v20 - 12;
            do
            {
              uint64_t v24 = *(void *)(v23 - 12);
              v23 -= 12;
              LODWORD(v35) = HIDWORD(v24);
              HIDWORD(v35) = *((_DWORD *)v23 + 2);
              if (*((void *)v23 + 2) < v35)
              {
                int v25 = *((_DWORD *)v21 + 2);
                uint64_t v26 = *(void *)v21;
                *(void *)long long v21 = *(void *)v23;
                *((_DWORD *)v21 + 2) = *((_DWORD *)v23 + 2);
                *(void *)uint64_t v23 = v26;
                *((_DWORD *)v23 + 2) = v25;
                long long v22 = v21;
              }
              long long v21 = v23;
            }
            while (v23 != v19);
          }
          while (1)
          {
            std::vector<int>::pointer v27 = v22 + 12;
            if (v22 + 12 == v20) {
              break;
            }
            int v28 = *((_DWORD *)v22 + 3);
            uint64_t v29 = *((void *)v22 + 2);
            v22 += 12;
            *(void *)&long long v33 = *(void *)(v27 - 12);
            DWORD2(v33) = *((_DWORD *)v27 - 1);
            if (v29 < *(uint64_t *)((char *)&v33 + 4))
            {
              uint64_t v30 = v27;
              do
              {
                uint64_t v31 = *(void *)(v27 - 12);
                v27 -= 12;
                *(void *)uint64_t v30 = v31;
                *((_DWORD *)v30 + 2) = *((_DWORD *)v30 - 1);
                *(void *)&long long v34 = *((void *)v30 - 3);
                DWORD2(v34) = *((_DWORD *)v30 - 4);
                uint64_t v30 = v27;
              }
              while (v29 < *(uint64_t *)((char *)&v34 + 4));
            }
            *(_DWORD *)std::vector<int>::pointer v27 = v28;
            *(void *)(v27 + 4) = v29;
          }
        }
      }
    }
  }
  return (uint64_t)this + 296;
}

void operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(void **this, int a2, int a3)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)this, a2);
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)this, a3);
  uint64_t v6 = (std::vector<int> *)this[1];
  uint64_t v7 = this[4];
  int v8 = v7[a2] ^ 1;
  value = v6[1].__end_cap_.__value_;
  uint64_t v10 = *(void *)&value[3 * v8];
  uint64_t v11 = -v10;
  int v12 = *((_DWORD *)this[7] + a3);
  uint64_t v13 = *(void *)&value[3 * v12];
  if (v13 <= -v10)
  {
    uint64_t v14 = a3;
    v90.i64[0] = -v10;
    uint64_t v15 = a3;
    uint64_t v16 = *(void *)&value[3 * v7[v15]];
    int v17 = *(_DWORD *)((char *)this[10] + v15 * 4);
    if (v17 == -1)
    {
      *(void *)uint64_t v87 = *((void *)this[13] + a3) + v16;
      if (*(uint64_t *)v87 < v11) {
        goto LABEL_101;
      }
    }
    else
    {
      *(void *)uint64_t v87 = *(void *)&value[3 * v17] + v16;
      if (*(uint64_t *)v87 < v11) {
LABEL_101:
      }
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v90, (int)v87, "StartMax(before) <= StartMin(after) + DurationMin(after)");
    }
    long long v22 = this + 48;
    unint64_t v23 = *(void *)&value[3 * v8];
    v90.i32[0] = v8;
    *(uint64_t *)((char *)v90.i64 + 4) = v23;
    unint64_t v24 = HIDWORD(v23);
    uint64_t v26 = (char *)this[49];
    int v25 = (char *)this[50];
    if (v26 >= v25)
    {
      int v28 = (char *)*v22;
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v26[-*v22] >> 2);
      unint64_t v30 = v29 + 1;
      if (v29 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v28) >> 2);
      if (2 * v31 > v30) {
        unint64_t v30 = 2 * v31;
      }
      if (v31 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v32 = 0x1555555555555555;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        if (v32 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v33 = (char *)operator new(12 * v32);
      }
      else
      {
        long long v33 = 0;
      }
      uint64_t v40 = &v33[12 * v29];
      *(void *)uint64_t v40 = v90.i64[0];
      *((_DWORD *)v40 + 2) = v24;
      std::vector<int>::pointer v27 = v40 + 12;
      if (v26 != v28)
      {
        do
        {
          uint64_t v41 = *(void *)(v26 - 12);
          v26 -= 12;
          int v42 = *((_DWORD *)v26 + 2);
          *(void *)(v40 - 12) = v41;
          v40 -= 12;
          *((_DWORD *)v40 + 2) = v42;
        }
        while (v26 != v28);
        uint64_t v26 = (char *)*v22;
      }
      this[48] = v40;
      this[49] = v27;
      this[50] = &v33[12 * v32];
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *(void *)uint64_t v26 = v90.i64[0];
      *((_DWORD *)v26 + 2) = HIDWORD(v23);
      std::vector<int>::pointer v27 = v26 + 12;
    }
    this[49] = v27;
    unint64_t v43 = *(void *)(*((void *)this[1] + 5) + 12 * *((int *)this[4] + v14));
    v90.i32[0] = *((_DWORD *)this[4] + v14);
    *(uint64_t *)((char *)v90.i64 + 4) = v43;
    unint64_t v44 = HIDWORD(v43);
    long long v45 = (char *)this[50];
    if (v27 < v45)
    {
      *(void *)std::vector<int>::pointer v27 = v90.i64[0];
      *((_DWORD *)v27 + 2) = HIDWORD(v43);
      int v46 = v27 + 12;
      this[49] = v27 + 12;
      __int32 v47 = *((_DWORD *)this[10] + v14);
      if (v47 == -1) {
        return;
      }
      goto LABEL_56;
    }
    unint64_t v48 = (char *)*v22;
    unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-*v22] >> 2);
    unint64_t v50 = v49 + 1;
    if (v49 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v45 - v48) >> 2);
    if (2 * v51 > v50) {
      unint64_t v50 = 2 * v51;
    }
    if (v51 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v52 = 0x1555555555555555;
    }
    else {
      unint64_t v52 = v50;
    }
    if (v52)
    {
      if (v52 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v53 = (char *)operator new(12 * v52);
    }
    else
    {
      uint64_t v53 = 0;
    }
    uint64_t v54 = &v53[12 * v49];
    unint64_t v55 = &v53[12 * v52];
    *(void *)uint64_t v54 = v90.i64[0];
    *((_DWORD *)v54 + 2) = v44;
    int v46 = v54 + 12;
    if (v27 == v48)
    {
      this[48] = v54;
      this[49] = v46;
      this[50] = v55;
    }
    else
    {
      do
      {
        uint64_t v56 = *(void *)(v27 - 12);
        v27 -= 12;
        int v57 = *((_DWORD *)v27 + 2);
        *(void *)(v54 - 12) = v56;
        v54 -= 12;
        *((_DWORD *)v54 + 2) = v57;
      }
      while (v27 != v48);
      std::vector<int>::pointer v27 = (char *)this[48];
      this[48] = v54;
      this[49] = v46;
      this[50] = v55;
      if (!v27)
      {
LABEL_55:
        this[49] = v46;
        __int32 v47 = *((_DWORD *)this[10] + v14);
        if (v47 == -1) {
          return;
        }
LABEL_56:
        unint64_t v58 = *(void *)(*((void *)this[1] + 5) + 12 * v47);
        v90.i32[0] = v47;
        *(uint64_t *)((char *)v90.i64 + 4) = v58;
        unint64_t v59 = HIDWORD(v58);
        unint64_t v60 = (char *)this[50];
        if (v46 < v60)
        {
          *(void *)int v46 = v90.i64[0];
          *((_DWORD *)v46 + 2) = HIDWORD(v58);
          this[49] = v46 + 12;
          return;
        }
        uint64_t v61 = (char *)*v22;
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v46[-*v22] >> 2);
        unint64_t v63 = v62 + 1;
        if (v62 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v61) >> 2);
        if (2 * v64 > v63) {
          unint64_t v63 = 2 * v64;
        }
        if (v64 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v65 = 0x1555555555555555;
        }
        else {
          unint64_t v65 = v63;
        }
        if (v65)
        {
          if (v65 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v66 = (char *)operator new(12 * v65);
        }
        else
        {
          unint64_t v66 = 0;
        }
        unint64_t v67 = &v66[12 * v62];
        int v68 = &v66[12 * v65];
        *(void *)unint64_t v67 = v90.i64[0];
        *((_DWORD *)v67 + 2) = v59;
        unint64_t v69 = v67 + 12;
        if (v46 == v61)
        {
          this[48] = v67;
          this[49] = v69;
          this[50] = v68;
        }
        else
        {
          do
          {
            uint64_t v70 = *(void *)(v46 - 12);
            v46 -= 12;
            int v71 = *((_DWORD *)v46 + 2);
            *(void *)(v67 - 12) = v70;
            v67 -= 12;
            *((_DWORD *)v67 + 2) = v71;
          }
          while (v46 != v61);
          int v46 = (char *)this[48];
          this[48] = v67;
          this[49] = v69;
          this[50] = v68;
          if (!v46) {
            goto LABEL_74;
          }
        }
        operator delete(v46);
LABEL_74:
        this[49] = v69;
        return;
      }
    }
    operator delete(v27);
    goto LABEL_55;
  }
  *(void *)unint64_t v88 = __PAIR64__(v13, v12);
  *(_DWORD *)&v88[8] = HIDWORD(v13);
  v90.i32[0] = v8;
  *(uint64_t *)((char *)v90.i64 + 4) = v10;
  *(void *)uint64_t v87 = v90.i64[0];
  *(_DWORD *)&v87[8] = HIDWORD(v10);
  if (*(void *)&v88[4] + *(void *)&v87[4] != 1)
  {
    int64x2_t v90 = vdupq_n_s64(1uLL);
    v89[0] = v12;
    v89[1] = v8;
    operations_research::sat::IntegerTrail::AppendRelaxedLinearReason(v6, *(void *)&v88[4] + *(void *)&v87[4] - 1, (uint64_t)&v90, 2, v89, 2, this + 48);
    return;
  }
  int v18 = this + 48;
  std::vector<int>::pointer v20 = (char *)this[49];
  uint64_t v19 = (char *)this[50];
  if (v20 >= v19)
  {
    long long v34 = (char *)*v18;
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v20[-*v18] >> 2);
    unint64_t v36 = v35 + 1;
    if (v35 + 1 > 0x1555555555555555) {
      goto LABEL_104;
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v34) >> 2);
    if (2 * v37 > v36) {
      unint64_t v36 = 2 * v37;
    }
    if (v37 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v38 = 0x1555555555555555;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      if (v38 > 0x1555555555555555) {
        goto LABEL_108;
      }
      uint64_t v39 = (char *)operator new(12 * v38);
    }
    else
    {
      uint64_t v39 = 0;
    }
    uint64_t v72 = &v39[12 * v35];
    *(void *)uint64_t v72 = *(void *)v88;
    *((_DWORD *)v72 + 2) = *(_DWORD *)&v88[8];
    long long v21 = v72 + 12;
    if (v20 != v34)
    {
      do
      {
        uint64_t v73 = *(void *)(v20 - 12);
        v20 -= 12;
        int v74 = *((_DWORD *)v20 + 2);
        *(void *)(v72 - 12) = v73;
        v72 -= 12;
        *((_DWORD *)v72 + 2) = v74;
      }
      while (v20 != v34);
      std::vector<int>::pointer v20 = (char *)*v18;
    }
    this[48] = v72;
    this[49] = v21;
    this[50] = &v39[12 * v38];
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *(void *)std::vector<int>::pointer v20 = *(void *)v88;
    *((_DWORD *)v20 + 2) = *(_DWORD *)&v88[8];
    long long v21 = v20 + 12;
  }
  this[49] = v21;
  uint64_t v75 = (char *)this[50];
  if (v21 < v75)
  {
    *(void *)long long v21 = *(void *)v87;
    *((_DWORD *)v21 + 2) = *(_DWORD *)&v87[8];
    long long v76 = v21 + 12;
    goto LABEL_99;
  }
  int v77 = (char *)*v18;
  unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v21[-*v18] >> 2);
  unint64_t v79 = v78 + 1;
  if (v78 + 1 > 0x1555555555555555) {
LABEL_104:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((v75 - v77) >> 2);
  if (2 * v80 > v79) {
    unint64_t v79 = 2 * v80;
  }
  if (v80 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v81 = 0x1555555555555555;
  }
  else {
    unint64_t v81 = v79;
  }
  if (!v81)
  {
    uint64_t v82 = 0;
    goto LABEL_93;
  }
  if (v81 > 0x1555555555555555) {
LABEL_108:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  uint64_t v82 = (char *)operator new(12 * v81);
LABEL_93:
  uint64_t v83 = &v82[12 * v78];
  unint64_t v84 = &v82[12 * v81];
  *(void *)uint64_t v83 = *(void *)v87;
  *((_DWORD *)v83 + 2) = *(_DWORD *)&v87[8];
  long long v76 = v83 + 12;
  if (v21 == v77)
  {
    this[48] = v83;
    this[49] = v76;
    this[50] = v84;
  }
  else
  {
    do
    {
      uint64_t v85 = *(void *)(v21 - 12);
      v21 -= 12;
      int v86 = *((_DWORD *)v21 + 2);
      *(void *)(v83 - 12) = v85;
      v83 -= 12;
      *((_DWORD *)v83 + 2) = v86;
    }
    while (v21 != v77);
    long long v21 = (char *)this[48];
    this[48] = v83;
    this[49] = v76;
    this[50] = v84;
    if (!v21) {
      goto LABEL_99;
    }
  }
  operator delete(v21);
LABEL_99:
  this[49] = v76;
}

void sub_23CD0E994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SchedulingConstraintHelper::AddOtherReason(operations_research::sat::SchedulingConstraintHelper *this, int a2)
{
  long long v2 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)this + 51);
  if (v2)
  {
    uint64_t v5 = a2;
    uint64_t v6 = *((void *)this + 53);
    unint64_t v7 = (unint64_t)a2 >> 6;
    uint64_t v8 = *(void *)(v6 + 8 * v7);
    if ((v8 & (1 << a2)) == 0)
    {
      *(void *)(v6 + 8 * v7) = v8 | (1 << a2);
      int64_t v9 = *((void *)this + 52);
      operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v2, a2);
      unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      if (v9 >= (uint64_t)0x8000000000000002) {
        unint64_t v10 = -v9;
      }
      LODWORD(v25) = *(_DWORD *)(*((void *)v2 + 4) + 4 * v5) ^ 1;
      HIDWORD(v25) = v10;
      unint64_t v11 = HIDWORD(v10);
      uint64_t v13 = (_DWORD *)*((void *)v2 + 49);
      unint64_t v12 = *((void *)v2 + 50);
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v15 = (_DWORD *)*((void *)v2 + 48);
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v13 - v15) + 1;
        if (v16 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v15) >> 2);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v18 = 0x1555555555555555;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v19 = (char *)operator new(12 * v18);
        }
        else
        {
          uint64_t v19 = 0;
        }
        std::vector<int>::pointer v20 = &v19[4 * (v13 - v15)];
        *(void *)std::vector<int>::pointer v20 = v25;
        *((_DWORD *)v20 + 2) = v11;
        uint64_t v14 = v20 + 12;
        if (v13 != v15)
        {
          do
          {
            uint64_t v21 = *(void *)(v13 - 3);
            v13 -= 3;
            int v22 = v13[2];
            *(void *)(v20 - 12) = v21;
            v20 -= 12;
            *((_DWORD *)v20 + 2) = v22;
          }
          while (v13 != v15);
          uint64_t v13 = (_DWORD *)*((void *)v2 + 48);
        }
        *((void *)v2 + 48) = v20;
        *((void *)v2 + 49) = v14;
        *((void *)v2 + 50) = &v19[12 * v18];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v13 = v25;
        v13[2] = v11;
        uint64_t v14 = v13 + 3;
      }
      *((void *)v2 + 49) = v14;
      unint64_t v23 = (void *)*((void *)this + 51);
      unint64_t v24 = *((void *)this + 52) + 1;
      operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(v23, a2, v24);
    }
  }
}

uint64_t operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteral(void *a1, uint64_t a2, int a3)
{
  if (a1[51])
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v10, (google::glog_internal_namespace_ *)"./ortools/sat/intervals.cc", 267);
    int64_t v9 = (void *)google::LogMessage::stream((google::LogMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: other_helper_ == nullptr ", 39);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v10);
  }
  uint64_t v3 = (char *)a1[45];
  uint64_t v4 = (uint64_t)(a1[46] - (void)v3) >> 2;
  uint64_t v5 = (uint64_t *)a1[48];
  uint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[49] - (void)v5) >> 2);
  uint64_t v7 = a1[1];

  return operations_research::sat::IntegerTrail::Enqueue(v7, a2, a3, v3, v4, v5, v6);
}

void sub_23CD0EC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteralIfTaskPresent(unint64_t *a1, int a2, uint64_t a3, int a4)
{
  int64_t v33 = __PAIR64__(a4, HIDWORD(a3));
  unint64_t v8 = *(int *)(a1[16] + 4 * a2);
  if (v8 != -1
    && ((*(void *)(*(void *)(*a1 + 24) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 & 0x3F ^ 1)) & 1) != 0)
  {
    return 1;
  }
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
  unint64_t v10 = *(int *)(a1[16] + 4 * a2);
  if (v10 == -1) {
    goto LABEL_11;
  }
  unint64_t v11 = a1[1];
  int v12 = *(_DWORD *)(*(void *)(v11 + 408) + 4 * (int)a3);
  int v13 = v12 == -1 ? -1 : v12 ^ 1;
  if (v13 == v10) {
    goto LABEL_11;
  }
  if ((*(void *)(*(void *)(*a1 + 24) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
  {
    operations_research::sat::SchedulingConstraintHelper::AddPresenceReason((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
LABEL_11:
    uint64_t v14 = (char **)a1[51];
    if (v14)
    {
      std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(a1 + 45, (void *)a1[46], v14[45], v14[46], (v14[46] - v14[45]) >> 2);
      std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)(a1 + 48), a1[49], v14[48], v14[49], 0xAAAAAAAAAAAAAAABLL * ((v14[49] - v14[48]) >> 2));
    }
    uint64_t v15 = a1[1];
    unint64_t v16 = (char *)a1[45];
    uint64_t v17 = (uint64_t)(a1[46] - (void)v16) >> 2;
    unint64_t v18 = (uint64_t *)a1[48];
    uint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[49] - (void)v18) >> 2);
    return operations_research::sat::IntegerTrail::Enqueue(v15, a3, a4, v16, v17, v18, v19);
  }
  if (v33 <= -*(void *)(*(void *)(v11 + 40) + 12 * (int)(a3 ^ 1))) {
    return 1;
  }
  unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  if (v33 >= (uint64_t)0x8000000000000003) {
    unint64_t v20 = 1 - v33;
  }
  LODWORD(v34) = a3 ^ 1;
  HIDWORD(v34) = v20;
  unint64_t v21 = HIDWORD(v20);
  unint64_t v23 = (_DWORD *)a1[49];
  unint64_t v22 = a1[50];
  if ((unint64_t)v23 >= v22)
  {
    uint64_t v25 = (_DWORD *)a1[48];
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v23 - v25) + 1;
    if (v26 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v25) >> 2);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    unint64_t v28 = v27 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v26;
    if (v28)
    {
      if (v28 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v29 = (char *)operator new(12 * v28);
    }
    else
    {
      unint64_t v29 = 0;
    }
    unint64_t v30 = &v29[4 * (v23 - v25)];
    *(void *)unint64_t v30 = v34;
    *((_DWORD *)v30 + 2) = v21;
    unint64_t v24 = v30 + 12;
    if (v23 != v25)
    {
      do
      {
        uint64_t v31 = *(void *)(v23 - 3);
        v23 -= 3;
        int v32 = v23[2];
        *(void *)(v30 - 12) = v31;
        v30 -= 12;
        *((_DWORD *)v30 + 2) = v32;
      }
      while (v23 != v25);
      unint64_t v23 = (_DWORD *)a1[48];
    }
    a1[48] = (unint64_t)v30;
    a1[49] = (unint64_t)v24;
    a1[50] = (unint64_t)&v29[12 * v28];
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *(void *)unint64_t v23 = v34;
    v23[2] = v21;
    unint64_t v24 = v23 + 3;
  }
  a1[49] = (unint64_t)v24;
  uint64_t result = operations_research::sat::SchedulingConstraintHelper::PushTaskAbsence((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::PushTaskAbsence(operations_research::sat::SchedulingConstraintHelper *this, int a2)
{
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(this, a2);
  int v4 = *(_DWORD *)(*((void *)this + 16) + 4 * a2);
  if (v4 == -1
    || ((*(void *)(*(void *)(*(void *)this + 24) + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    int v5 = v4 ^ 1;
    uint64_t v7 = (int *)*((void *)this + 46);
    unint64_t v6 = *((void *)this + 47);
    if ((unint64_t)v7 < v6)
    {
      *uint64_t v7 = v5;
      uint64_t v8 = (uint64_t)(v7 + 1);
LABEL_27:
      *((void *)this + 46) = v8;
      return operations_research::sat::SchedulingConstraintHelper::ReportConflict(this);
    }
    int64_t v9 = (int *)*((void *)this + 45);
    uint64_t v10 = v7 - v9;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(4 * v13);
      uint64_t v15 = (int *)&v14[4 * v10];
      unint64_t v16 = &v14[4 * v13];
      *uint64_t v15 = v5;
      uint64_t v8 = (uint64_t)(v15 + 1);
      int64_t v17 = (char *)v7 - (char *)v9;
      if (v7 == v9) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = (int *)(4 * v10);
      unint64_t v16 = 0;
      *(_DWORD *)(4 * v10) = v5;
      uint64_t v8 = 4 * v10 + 4;
      int64_t v17 = (char *)v7 - (char *)v9;
      if (v7 == v9)
      {
LABEL_25:
        *((void *)this + 45) = v15;
        *((void *)this + 46) = v8;
        *((void *)this + 47) = v16;
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_27;
      }
    }
    unint64_t v20 = v17 - 4;
    if (v20 < 0x2C) {
      goto LABEL_34;
    }
    if ((unint64_t)((char *)v9 - v14) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v21 = (v20 >> 2) + 1;
    uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v23 = &v7[v22 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v15 = (int *)((char *)v15 - v22);
    unint64_t v24 = &v14[4 * v10 - 16];
    uint64_t v25 = v7 - 4;
    uint64_t v26 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *unint64_t v24 = v27;
      v24 -= 2;
      v25 -= 8;
      v26 -= 8;
    }
    while (v26);
    uint64_t v7 = v23;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_34:
      do
      {
        int v28 = *--v7;
        *--uint64_t v15 = v28;
      }
      while (v7 != v9);
    }
    goto LABEL_25;
  }
  unint64_t v18 = (char **)*((void *)this + 51);
  if (v18)
  {
    std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>((unint64_t *)this + 45, *((void **)this + 46), v18[45], v18[46], (v18[46] - v18[45]) >> 2);
    std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)this + 384, *((void *)this + 49), v18[48], v18[49], 0xAAAAAAAAAAAAAAABLL * ((v18[49] - v18[48]) >> 2));
    int v4 = *(_DWORD *)(*((void *)this + 16) + 4 * a2);
  }
  operations_research::sat::IntegerTrail::EnqueueLiteral(*((void *)this + 1), v4 ^ 1, *((char **)this + 45), (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2, *((char **)this + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2));
  return 1;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(unint64_t *a1, int a2, uint64_t a3)
{
  LODWORD(v8) = *(_DWORD *)(a1[4] + 4 * a2);
  HIDWORD(v8) = a3;
  uint64_t result = operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteralIfTaskPresent(a1, a2, v8, SHIDWORD(a3));
  if (result)
  {
    unint64_t v6 = *(int *)(a1[16] + 4 * a2);
    if (v6 == -1
      || ((*(void *)(*(void *)(*a1 + 24) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 & 0x3F ^ 1)) & 1) == 0)
    {
      uint64_t v7 = (uint64_t *)a1[2];
      return operations_research::sat::PrecedencesPropagator::PropagateOutgoingArcs(v7, v8);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::DecreaseEndMax(unint64_t *a1, int a2, int64_t a3)
{
  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (a3 >= (uint64_t)0x8000000000000002) {
    uint64_t v5 = -a3;
  }
  LODWORD(v9) = *(_DWORD *)(a1[7] + 4 * a2) ^ 1;
  HIDWORD(v9) = v5;
  uint64_t result = operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteralIfTaskPresent(a1, a2, v9, SHIDWORD(v5));
  if (result)
  {
    unint64_t v7 = *(int *)(a1[16] + 4 * a2);
    if (v7 == -1
      || ((*(void *)(*(void *)(*a1 + 24) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 & 0x3F ^ 1)) & 1) == 0)
    {
      uint64_t v8 = (uint64_t *)a1[2];
      return operations_research::sat::PrecedencesPropagator::PropagateOutgoingArcs(v8, v9);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::ReportConflict(operations_research::sat::SchedulingConstraintHelper *this)
{
  long long v2 = (char **)*((void *)this + 51);
  if (v2)
  {
    std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>((unint64_t *)this + 45, *((void **)this + 46), v2[45], v2[46], (v2[46] - v2[45]) >> 2);
    std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)this + 384, *((void *)this + 49), v2[48], v2[49], 0xAAAAAAAAAAAAAAABLL * ((v2[49] - v2[48]) >> 2));
  }
  uint64_t v3 = *((void *)this + 1);
  int v4 = (char *)*((void *)this + 45);
  uint64_t v5 = (char *)*((void *)this + 46);
  unint64_t v6 = (uint64_t *)*((void *)this + 48);
  uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 49) - (void)v6) >> 2);
  uint64_t v8 = *(void *)(v3 + 936);
  *(void *)(v8 + 144) = 0;
  uint64_t v9 = (void **)(v8 + 96);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v8 + 96), v4, v5, (v5 - v4) >> 2);
  operations_research::sat::IntegerTrail::MergeReasonInto(v3, v6, v7, v9);
  return 0;
}

void operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(operations_research::sat::SchedulingConstraintHelper *this, unsigned int a2, operations_research::sat::GenericLiteralWatcher *a3, int a4, int a5)
{
  unint64_t v5 = *((void *)this + 5) - *((void *)this + 4);
  if ((int)(v5 >> 2) >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5 & 0x3FFFFFFFCLL;
    do
    {
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, *(unsigned int *)(*((void *)this + 4) + v11), a2, 0xFFFFFFFFLL);
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, *(unsigned int *)(*((void *)this + 7) + v11), a2, 0xFFFFFFFFLL);
      if (a4)
      {
        uint64_t v13 = *(unsigned int *)(*((void *)this + 4) + v11);
        if (v13 != -1) {
          operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, v13 ^ 1, a2, 0xFFFFFFFFLL);
        }
      }
      if (a5)
      {
        uint64_t v14 = *(unsigned int *)(*((void *)this + 7) + v11);
        if (v14 != -1) {
          operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, v14 ^ 1, a2, 0xFFFFFFFFLL);
        }
      }
      uint64_t v15 = *(unsigned int *)(*((void *)this + 10) + v11);
      if (v15 != -1) {
        operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, v15, a2, 0xFFFFFFFFLL);
      }
      unint64_t v16 = *(int *)(*((void *)this + 16) + v11);
      if (v16 != -1)
      {
        unint64_t v17 = *(void *)(*(void *)(*(void *)this + 24) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v17 >> v16) & 1) == 0 && ((v17 >> (*(_DWORD *)(*((void *)this + 16) + v11) & 0x3F ^ 1u)) & 1) == 0) {
          operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a3, *(unsigned int *)(*((void *)this + 16) + v11), a2, 0xFFFFFFFFLL);
        }
      }
      v11 += 4;
    }
    while (v12 != v11);
  }
}

char *operations_research::sat::SchedulingConstraintHelper::ImportOtherReasons(operations_research::sat::SchedulingConstraintHelper *this, char **a2)
{
  std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>((unint64_t *)this + 45, *((void **)this + 46), a2[45], a2[46], (a2[46] - a2[45]) >> 2);
  uint64_t v4 = *((void *)this + 49);
  unint64_t v5 = a2[48];
  unint64_t v6 = a2[49];

  return std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)this + 384, v4, v5, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2));
}

void operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::greater<operations_research::sat::TaskTime>>(int a1, char *a2, char *a3, int a4)
{
  if (a3 - a2 >= 24)
  {
    unint64_t v5 = a3 - 12;
    if (a3 - 12 == a2)
    {
      unint64_t v5 = a2;
    }
    else
    {
      unint64_t v6 = a3 - 12;
      uint64_t v7 = a3 - 12;
      do
      {
        uint64_t v8 = *(void *)(v7 - 12);
        v7 -= 12;
        int v9 = *((_DWORD *)v7 + 2);
        *(void *)unint64_t v30 = v8;
        *(_DWORD *)&v30[8] = v9;
        if (*((void *)v7 + 2) > *(uint64_t *)&v30[4])
        {
          int v10 = *((_DWORD *)v6 + 2);
          uint64_t v11 = *(void *)v6;
          *(void *)unint64_t v6 = *(void *)v7;
          *((_DWORD *)v6 + 2) = *((_DWORD *)v7 + 2);
          *(void *)uint64_t v7 = v11;
          *((_DWORD *)v7 + 2) = v10;
          unint64_t v5 = v6;
        }
        unint64_t v6 = v7;
      }
      while (v7 != a2);
    }
    uint64_t v12 = v5 + 12;
    if (v5 + 12 != a3 && a1 >= 1)
    {
      uint64_t v13 = v5;
      do
      {
        int v14 = *((_DWORD *)v13 + 3);
        uint64_t v15 = *((void *)v13 + 2);
        uint64_t v13 = v12;
        --a1;
        int v16 = *((_DWORD *)v12 - 1);
        *(void *)unint64_t v30 = *(void *)(v12 - 12);
        *(_DWORD *)&v30[8] = v16;
        if (v15 <= *(uint64_t *)&v30[4])
        {
          *(_DWORD *)uint64_t v12 = v14;
          *(void *)(v12 + 4) = v15;
          v12 += 12;
          if (v13 + 12 == a3) {
            break;
          }
        }
        else
        {
          unint64_t v17 = v12;
          do
          {
            uint64_t v18 = *(void *)(v12 - 12);
            v12 -= 12;
            *(void *)unint64_t v17 = v18;
            *((_DWORD *)v17 + 2) = *((_DWORD *)v17 - 1);
            --a1;
            uint64_t v19 = *((void *)v17 - 3);
            int v20 = *((_DWORD *)v17 - 4);
            *(void *)unint64_t v30 = v19;
            *(_DWORD *)&v30[8] = v20;
            unint64_t v17 = v12;
          }
          while (v15 > *(uint64_t *)&v30[4]);
          *(_DWORD *)uint64_t v12 = v14;
          *(void *)(v12 + 4) = v15;
          uint64_t v12 = v13 + 12;
          if (v13 + 12 == a3) {
            break;
          }
        }
      }
      while (a1 > 0);
    }
    if (v12 != a3)
    {
      uint64_t v21 = (a3 - v5) >> 2;
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * v21;
      if (a4)
      {
        if (a3 - v5 < 1537)
        {
LABEL_24:
          long long v27 = 0;
          unint64_t v24 = 0;
        }
        else
        {
          unint64_t v23 = (const std::nothrow_t *)MEMORY[0x263F8C180];
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * v21;
          while (1)
          {
            uint64_t v25 = operator new(12 * v24, v23);
            if (v25) {
              break;
            }
            BOOL v26 = v24 > 1;
            v24 >>= 1;
            if (!v26) {
              goto LABEL_24;
            }
          }
          long long v27 = v25;
        }
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v5, a3, (uint64_t)v30, v22, (uint64_t)v27, v24);
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        unint64_t v28 = 126 - 2 * __clz(v22);
        if (v5 == a3) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = v28;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>((uint64_t)v5, (uint64_t *)a3, (uint64_t)v30, v29, 1);
      }
    }
  }
}

void sub_23CD0F7F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(char *result, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    if (a4 == 2)
    {
      *(void *)&long long v39 = *(void *)result;
      DWORD2(v39) = *((_DWORD *)result + 2);
      if (*((void *)a2 - 1) > *(uint64_t *)((char *)&v39 + 4))
      {
        int v8 = *((_DWORD *)result + 2);
        uint64_t v9 = *(void *)result;
        int v10 = *((_DWORD *)a2 - 1);
        *(void *)uint64_t result = *(void *)(a2 - 12);
        *((_DWORD *)result + 2) = v10;
        *(void *)(a2 - 12) = v9;
        *((_DWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v23 = a5;
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = (uint64_t)&result[12 * (a4 >> 1)];
      unint64_t v27 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>((uint64_t)result, v26, a3, v27, a5);
        uint64_t v28 = v23 + 12 * v25;
        uint64_t result = (char *)std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>((uint64_t)&v7[12 * (a4 >> 1)], (uint64_t)a2, a3, a4 - (a4 >> 1), v28);
        unint64_t v29 = v23 + 12 * a4;
        uint64_t v30 = v28;
        while (v30 != v29)
        {
          *(void *)&long long v41 = *(void *)v23;
          DWORD2(v41) = *(_DWORD *)(v23 + 8);
          if (*(void *)(v30 + 4) <= *(uint64_t *)((char *)&v41 + 4))
          {
            uint64_t v31 = *(void *)v23;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(v23 + 8);
            *(void *)uint64_t v7 = v31;
            v7 += 12;
            v23 += 12;
            if (v23 == v28) {
              goto LABEL_26;
            }
          }
          else
          {
            uint64_t v32 = *(void *)v30;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(v30 + 8);
            *(void *)uint64_t v7 = v32;
            v7 += 12;
            v30 += 12;
            if (v23 == v28)
            {
LABEL_26:
              if (v30 != v29)
              {
                uint64_t v33 = 0;
                do
                {
                  uint64_t v34 = &v7[v33];
                  uint64_t v35 = *(void *)(v30 + v33);
                  *((_DWORD *)v34 + 2) = *(_DWORD *)(v30 + v33 + 8);
                  *(void *)uint64_t v34 = v35;
                  v33 += 12;
                }
                while (v30 + v33 != v29);
              }
              return result;
            }
          }
        }
        if (v23 != v28)
        {
          uint64_t v36 = 0;
          do
          {
            unint64_t v37 = &v7[v36];
            uint64_t v38 = *(void *)(v23 + v36);
            *((_DWORD *)v37 + 2) = *(_DWORD *)(v23 + v36 + 8);
            *(void *)unint64_t v37 = v38;
            v36 += 12;
          }
          while (v23 + v36 != v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(result, v26, a3, v27, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(&v7[12 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v23, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v7, &v7[12 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v23, a6);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 12;
      if (result + 12 != a2)
      {
        uint64_t v13 = 0;
        int v14 = result;
        do
        {
          uint64_t v16 = *(void *)v14;
          unsigned int v17 = *((_DWORD *)v14 + 2);
          uint64_t v18 = *((void *)v14 + 2);
          int v14 = v12;
          if (v18 > __SPAIR64__(v17, HIDWORD(v16)))
          {
            int v19 = *(_DWORD *)v12;
            uint64_t v20 = v13;
            do
            {
              uint64_t v21 = &result[v20];
              *(void *)(v21 + 12) = *(void *)&result[v20];
              *((_DWORD *)v21 + 5) = *(_DWORD *)&result[v20 + 8];
              if (!v20)
              {
                uint64_t v15 = (uint64_t)result;
                goto LABEL_10;
              }
              *(void *)&long long v40 = *(void *)(v21 - 12);
              DWORD2(v40) = *((_DWORD *)v21 - 1);
              v20 -= 12;
            }
            while (v18 > *(uint64_t *)((char *)&v40 + 4));
            uint64_t v15 = (uint64_t)&result[v20 + 12];
LABEL_10:
            *(_DWORD *)uint64_t v15 = v19;
            *(void *)(v15 + 4) = v18;
          }
          uint64_t v12 = v14 + 12;
          v13 += 12;
        }
        while (v14 + 12 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v8 = result;
    if (a4 == 2)
    {
      int v10 = (uint64_t *)(a2 - 12);
      *(void *)&long long v38 = *(void *)result;
      DWORD2(v38) = *(_DWORD *)(result + 8);
      uint64_t v11 = (void *)(a5 + 12);
      if (*(void *)(a2 - 8) <= *(uint64_t *)((char *)&v38 + 4))
      {
        uint64_t v23 = *(void *)result;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
        *(void *)a5 = v23;
        uint64_t v24 = *v10;
        *(_DWORD *)(a5 + 20) = *(_DWORD *)(a2 - 4);
        *uint64_t v11 = v24;
      }
      else
      {
        uint64_t v12 = *v10;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a2 - 4);
        *(void *)a5 = v12;
        uint64_t v13 = *(void *)result;
        *(_DWORD *)(a5 + 20) = *(_DWORD *)(result + 8);
        *uint64_t v11 = v13;
      }
    }
    else if (a4 == 1)
    {
      uint64_t v9 = *(void *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(void *)a5 = v9;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v26 = a4 >> 1;
      uint64_t v27 = 12 * (a4 >> 1);
      uint64_t v28 = result + v27;
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(result, result + v27, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v8 + v27, a2, a3, a4 - v26, v5 + v27, a4 - v26);
      uint64_t v29 = v8 + v27;
      while (v29 != a2)
      {
        *(void *)&long long v41 = *(void *)v8;
        DWORD2(v41) = *(_DWORD *)(v8 + 8);
        if (*(void *)(v29 + 4) <= *(uint64_t *)((char *)&v41 + 4))
        {
          uint64_t v30 = *(void *)v8;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v8 + 8);
          *(void *)uint64_t v5 = v30;
          v5 += 12;
          v8 += 12;
          if (v8 == v28) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v31 = *(void *)v29;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v29 + 8);
          *(void *)uint64_t v5 = v31;
          v5 += 12;
          v29 += 12;
          if (v8 == v28)
          {
LABEL_24:
            if (v29 != a2)
            {
              uint64_t v32 = 0;
              do
              {
                uint64_t v33 = v5 + v32;
                uint64_t v34 = *(void *)(v29 + v32);
                *(_DWORD *)(v33 + 8) = *(_DWORD *)(v29 + v32 + 8);
                *(void *)uint64_t v33 = v34;
                v32 += 12;
              }
              while (v29 + v32 != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v28)
      {
        uint64_t v35 = 0;
        do
        {
          uint64_t v36 = v5 + v35;
          uint64_t v37 = *(void *)(v8 + v35);
          *(_DWORD *)(v36 + 8) = *(_DWORD *)(v8 + v35 + 8);
          *(void *)uint64_t v36 = v37;
          v35 += 12;
        }
        while (v8 + v35 != v28);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *(void *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(void *)a5 = v14;
      uint64_t v15 = result + 12;
      if (result + 12 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a5;
        do
        {
          uint64_t v19 = v8;
          uint64_t v20 = v17;
          uint64_t v8 = v15;
          v17 += 12;
          *(void *)&long long v39 = *(void *)v20;
          DWORD2(v39) = *(_DWORD *)(v20 + 8);
          uint64_t v21 = v17;
          if (*(void *)(v19 + 16) > *(uint64_t *)((char *)&v39 + 4))
          {
            *(void *)uint64_t v17 = *(void *)v20;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v20 + 8);
            uint64_t v21 = a5;
            if (v20 != a5)
            {
              uint64_t v22 = v16;
              while (1)
              {
                uint64_t v21 = a5 + v22;
                *(void *)&long long v40 = *(void *)(a5 + v22 - 12);
                DWORD2(v40) = *(_DWORD *)(a5 + v22 - 4);
                if (*(void *)(v19 + 16) <= *(uint64_t *)((char *)&v40 + 4)) {
                  break;
                }
                *(void *)uint64_t v21 = *(void *)(a5 + v22 - 12);
                *(_DWORD *)(v21 + 8) = *(_DWORD *)(a5 + v22 - 4);
                v22 -= 12;
                if (!v22)
                {
                  uint64_t v21 = a5;
                  break;
                }
              }
            }
          }
          uint64_t v18 = *(void *)v8;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v8 + 8);
          *(void *)uint64_t v21 = v18;
          uint64_t v15 = v8 + 12;
          v16 += 12;
        }
        while (v8 + 12 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    uint64_t v12 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v13 = 0;
      uint64_t v14 = -a5;
      while (1)
      {
        uint64_t v15 = &v12[v13];
        *(void *)&long long v65 = *(void *)&v12[v13];
        DWORD2(v65) = *(_DWORD *)&v12[v13 + 8];
        if (*(void *)(a2 + 4) > *(uint64_t *)((char *)&v65 + 4)) {
          break;
        }
        v13 += 12;
        if (__CFADD__(v14++, 1)) {
          return result;
        }
      }
      uint64_t v17 = -v14;
      unint64_t v62 = a3;
      unint64_t v63 = a7;
      uint64_t v61 = a8;
      if (-v14 >= v10)
      {
        if (v14 == -1)
        {
          unint64_t v55 = &v12[v13];
          int v70 = *(_DWORD *)&v12[v13 + 8];
          uint64_t v69 = *(void *)&v12[v13];
          uint64_t v56 = *(void *)a2;
          *((_DWORD *)v55 + 2) = *((_DWORD *)a2 + 2);
          *(void *)unint64_t v55 = v56;
          *(void *)a2 = v69;
          *((_DWORD *)a2 + 2) = v70;
          return result;
        }
        if (v14 > 0) {
          uint64_t v17 = 1 - v14;
        }
        uint64_t v26 = v17 >> 1;
        uint64_t v20 = &v12[12 * (v17 >> 1) + v13];
        unint64_t v25 = a2;
        if (a2 != a3)
        {
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 2);
          unint64_t v25 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v25[12 * (v27 >> 1)];
            uint64_t v30 = *(void *)(v29 + 4);
            uint64_t v31 = v29 + 12;
            v27 += ~(v27 >> 1);
            if (v30 > __SPAIR64__(*(_DWORD *)&v12[12 * v26 + 8 + v13], HIDWORD(*(void *)v20))) {
              unint64_t v25 = v31;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 2);
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v18 = v10;
        }
        else {
          uint64_t v18 = v10 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = a2;
        if (a2 - v12 != v13)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12 - v13) >> 2);
          uint64_t v20 = &v12[v13];
          do
          {
            unint64_t v22 = v21 >> 1;
            uint64_t v23 = &v20[12 * (v21 >> 1)];
            *(void *)&long long v66 = *(void *)v23;
            DWORD2(v66) = *((_DWORD *)v23 + 2);
            uint64_t v24 = v23 + 12;
            v21 += ~(v21 >> 1);
            if (*(void *)&a2[12 * v19 + 4] > *(uint64_t *)((char *)&v66 + 4)) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t v20 = v24;
            }
          }
          while (v21);
        }
        unint64_t v25 = &a2[12 * v19];
        uint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v12 - v13) >> 2);
      }
      a5 = -(v26 + v14);
      uint64_t v60 = v10 - v19;
      uint64_t v32 = v26;
      uint64_t v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::TaskTime *>,std::__wrap_iter<operations_research::sat::TaskTime *>>(v20, a2, v25);
      uint64_t v34 = v32;
      uint64_t v35 = v33;
      if (v34 + v19 >= v10 - (v34 + v19) - v14)
      {
        uint64_t v37 = v25;
        uint64_t v38 = v34;
        a8 = v61;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v33, v37, v62, a4, a5, v60, v63, v61);
        a2 = v20;
        a7 = v63;
        a5 = v38;
        a3 = v35;
        uint64_t v10 = v19;
        uint64_t v12 = v15;
        if (!v19) {
          return result;
        }
      }
      else
      {
        uint64_t v36 = v20;
        a7 = v63;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(&v12[v13], v36, v33, a4, v34, v19, v63, v61);
        a2 = v25;
        a8 = v61;
        a3 = v62;
        v10 -= v19;
        uint64_t v12 = v35;
        if (!v60) {
          return result;
        }
      }
    }
    if (a5 <= v10)
    {
      if (v12 != a2)
      {
        unint64_t v48 = 0;
        do
        {
          unint64_t v49 = &a7[v48];
          uint64_t v50 = *(void *)&v12[v48];
          *((_DWORD *)v49 + 2) = *(_DWORD *)&v12[v48 + 8];
          *(void *)unint64_t v49 = v50;
          v48 += 12;
        }
        while (&v12[v48] != a2);
        if (v48)
        {
          unint64_t v51 = &a7[v48];
          unint64_t v52 = a7;
          while (a2 != a3)
          {
            *(void *)&long long v68 = *(void *)v52;
            DWORD2(v68) = *((_DWORD *)v52 + 2);
            if (*(void *)(a2 + 4) <= *(uint64_t *)((char *)&v68 + 4))
            {
              uint64_t v53 = *(void *)v52;
              *((_DWORD *)v12 + 2) = *((_DWORD *)v52 + 2);
              *(void *)uint64_t v12 = v53;
              v12 += 12;
              v52 += 12;
              if (v51 == v52) {
                return result;
              }
            }
            else
            {
              uint64_t v54 = *(void *)a2;
              *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
              *(void *)uint64_t v12 = v54;
              v12 += 12;
              a2 += 12;
              if (v51 == v52) {
                return result;
              }
            }
          }
          return (char *)memmove(v12, v52, a7 - v52 + v48);
        }
      }
    }
    else if (a3 != a2)
    {
      unint64_t v39 = 0;
      do
      {
        long long v40 = &a7[v39];
        uint64_t v41 = *(void *)&a2[v39];
        *((_DWORD *)v40 + 2) = *(_DWORD *)&a2[v39 + 8];
        *(void *)long long v40 = v41;
        v39 += 12;
      }
      while (&a2[v39] != a3);
      if (v39)
      {
        int v42 = &a7[v39];
        unint64_t v43 = a3 - 12;
        while (a2 != v12)
        {
          *(void *)&long long v67 = *(void *)(a2 - 12);
          DWORD2(v67) = *((_DWORD *)a2 - 1);
          uint64_t v44 = *((void *)v42 - 1);
          BOOL v45 = v44 <= *(void *)((char *)&v67 + 4);
          if (v44 <= *(uint64_t *)((char *)&v67 + 4)) {
            int v46 = v42 - 12;
          }
          else {
            int v46 = a2 - 12;
          }
          if (v45) {
            v42 -= 12;
          }
          else {
            a2 -= 12;
          }
          uint64_t v47 = *(void *)v46;
          *((_DWORD *)v43 + 2) = *((_DWORD *)v46 + 2);
          *(void *)unint64_t v43 = v47;
          v43 -= 12;
          if (v42 == a7) {
            return result;
          }
        }
        uint64_t v57 = 0;
        do
        {
          unint64_t v58 = &v43[v57];
          uint64_t v59 = *(void *)&v42[v57 - 12];
          *((_DWORD *)v58 + 2) = *(_DWORD *)&v42[v57 - 4];
          *(void *)unint64_t v58 = v59;
          v57 -= 12;
        }
        while (&v42[v57] != a7);
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (uint64_t)a2 - v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 2);
          if (!(!v6 & v5))
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                *(void *)&long long v69 = *(void *)v12;
                DWORD2(v69) = *(_DWORD *)(v12 + 8);
                if (*(a2 - 1) > *(uint64_t *)((char *)&v69 + 4))
                {
                  int v79 = *(_DWORD *)(v12 + 8);
                  uint64_t v70 = *(void *)v12;
                  uint64_t v37 = *(uint64_t *)((char *)a2 - 12);
                  *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
                  *(void *)unint64_t v12 = v37;
                  *((_DWORD *)a2 - 1) = v79;
                  *(uint64_t *)((char *)a2 - 12) = v70;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)((char *)a2 - 12));
                break;
              case 4uLL:
                uint64_t v38 = (uint64_t *)(v12 + 12);
                unint64_t v39 = (uint64_t *)(v12 + 24);
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)(v12 + 24));
                *(void *)&long long v71 = *(void *)(v12 + 24);
                DWORD2(v71) = *(_DWORD *)(v12 + 32);
                if (*(a2 - 1) > *(uint64_t *)((char *)&v71 + 4))
                {
                  uint64_t v40 = *v39;
                  int v41 = *(_DWORD *)(v12 + 32);
                  int v42 = *((_DWORD *)a2 - 1);
                  uint64_t *v39 = *(uint64_t *)((char *)a2 - 12);
                  *(_DWORD *)(v12 + 32) = v42;
                  *((_DWORD *)a2 - 1) = v41;
                  *(uint64_t *)((char *)a2 - 12) = v40;
                  *(void *)&long long v72 = *(void *)(v12 + 12);
                  DWORD2(v72) = *(_DWORD *)(v12 + 20);
                  if (*(void *)(v12 + 28) > *(uint64_t *)((char *)&v72 + 4))
                  {
                    int v43 = *(_DWORD *)(v12 + 20);
                    uint64_t v44 = *v38;
                    *uint64_t v38 = *v39;
                    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 32);
                    uint64_t *v39 = v44;
                    *(_DWORD *)(v12 + 32) = v43;
                    *(void *)&long long v73 = *(void *)v12;
                    DWORD2(v73) = *(_DWORD *)(v12 + 8);
                    if (*(void *)(v12 + 16) > *(uint64_t *)((char *)&v73 + 4))
                    {
                      int v80 = *(_DWORD *)(v12 + 8);
                      uint64_t v74 = *(void *)v12;
                      *(void *)unint64_t v12 = *v38;
                      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v12 + 20);
                      *uint64_t v38 = v74;
                      *(_DWORD *)(v12 + 20) = v80;
                    }
                  }
                }
                break;
              case 5uLL:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v12, v12 + 12, v12 + 24, (uint64_t *)(v12 + 36), (uint64_t *)((char *)a2 - 12));
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 287)
          {
            BOOL v45 = (uint64_t *)(v12 + 12);
            BOOL v47 = (uint64_t *)v12 == a2 || v45 == a2;
            if (a5)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                unint64_t v49 = v12;
                do
                {
                  uint64_t v51 = *(void *)v49;
                  unsigned int v52 = *(_DWORD *)(v49 + 8);
                  uint64_t v53 = *(void *)(v49 + 16);
                  unint64_t v49 = (unint64_t)v45;
                  if (v53 > __SPAIR64__(v52, HIDWORD(v51)))
                  {
                    int v54 = *(_DWORD *)v45;
                    uint64_t v55 = v48;
                    do
                    {
                      uint64_t v56 = v12 + v55;
                      *(void *)(v56 + 12) = *(void *)(v12 + v55);
                      *(_DWORD *)(v56 + 20) = *(_DWORD *)(v12 + v55 + 8);
                      if (!v55)
                      {
                        uint64_t v50 = v12;
                        goto LABEL_60;
                      }
                      *(void *)&long long v75 = *(void *)(v56 - 12);
                      DWORD2(v75) = *(_DWORD *)(v56 - 4);
                      v55 -= 12;
                    }
                    while (v53 > *(uint64_t *)((char *)&v75 + 4));
                    uint64_t v50 = v12 + v55 + 12;
LABEL_60:
                    *(_DWORD *)uint64_t v50 = v54;
                    *(void *)(v50 + 4) = v53;
                  }
                  BOOL v45 = (uint64_t *)(v49 + 12);
                  v48 += 12;
                }
                while ((uint64_t *)(v49 + 12) != a2);
              }
            }
            else if (!v47)
            {
              do
              {
                uint64_t v57 = *(void *)v11;
                unsigned int v58 = *(_DWORD *)(v11 + 8);
                uint64_t v59 = *(void *)(v11 + 16);
                uint64_t v11 = (uint64_t)v45;
                if (v59 > __SPAIR64__(v58, HIDWORD(v57)))
                {
                  int v60 = *(_DWORD *)v45;
                  do
                  {
                    uint64_t v61 = v45;
                    uint64_t v62 = *(uint64_t *)((char *)v45 - 12);
                    BOOL v45 = (uint64_t *)((char *)v45 - 12);
                    uint64_t *v61 = v62;
                    *((_DWORD *)v61 + 2) = *((_DWORD *)v61 - 1);
                    *(void *)&long long v76 = *(v61 - 3);
                    DWORD2(v76) = *((_DWORD *)v61 - 4);
                  }
                  while (v59 > *(uint64_t *)((char *)&v76 + 4));
                  *(_DWORD *)BOOL v45 = v60;
                  *(uint64_t *)((char *)v45 + 4) = v59;
                }
                BOOL v45 = (uint64_t *)(v11 + 12);
              }
              while ((uint64_t *)(v11 + 12) != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((uint64_t *)v12 != a2)
            {
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,operations_research::sat::TaskTime*>(v12, a2, a2, a3);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          unint64_t v16 = v12 + 12 * (v14 >> 1);
          if ((unint64_t)v13 < 0x601) {
            break;
          }
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)v11, (uint64_t *)(v11 + 12 * (v14 >> 1)), (uint64_t *)((char *)a2 - 12));
          uint64_t v17 = 12 * v15;
          uint64_t v18 = (uint64_t *)(12 * v15 + v11 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)(v11 + 12), v18, a2 - 3);
          uint64_t v19 = (uint64_t *)(v11 + 12 + v17);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)(v11 + 24), v19, (uint64_t *)((char *)a2 - 36));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v18, (uint64_t *)v16, v19);
          int v77 = *(_DWORD *)(v11 + 8);
          uint64_t v63 = *(void *)v11;
          uint64_t v20 = *(void *)v16;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v16 + 8);
          *(void *)uint64_t v11 = v20;
          *(_DWORD *)(v16 + 8) = v77;
          *(void *)unint64_t v16 = v63;
          --a4;
          if (a5) {
            goto LABEL_13;
          }
LABEL_12:
          *(void *)&long long v64 = *(void *)v11;
          DWORD2(v64) = *(_DWORD *)(v11 + 8);
          if (*(void *)(v11 - 8) > *(uint64_t *)((char *)&v64 + 4)) {
            goto LABEL_13;
          }
          uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::greater<operations_research::sat::TaskTime> &>((uint64_t *)v11, a2);
          unint64_t v12 = result;
          a5 = 0;
        }
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)(v11 + 12 * (v14 >> 1)), (uint64_t *)v11, (uint64_t *)((char *)a2 - 12));
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_12;
        }
LABEL_13:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)v11;
        unsigned int v23 = *(_DWORD *)(v11 + 8);
        do
        {
          *(void *)&long long v65 = *(void *)v11;
          DWORD2(v65) = *(_DWORD *)(v11 + 8);
          uint64_t v24 = *(void *)(v11 + v21 + 16);
          v21 += 12;
        }
        while (v24 > *(uint64_t *)((char *)&v65 + 4));
        unint64_t v25 = v11 + v21;
        uint64_t v26 = a2;
        if (v21 == 12)
        {
          uint64_t v29 = a2;
          while (v25 < (unint64_t)v29)
          {
            unint64_t v27 = (uint64_t *)((char *)v29 - 12);
            *(void *)&long long v67 = *(void *)v11;
            DWORD2(v67) = *(_DWORD *)(v11 + 8);
            uint64_t v30 = *(v29 - 1);
            uint64_t v29 = (uint64_t *)((char *)v29 - 12);
            if (v30 > *(uint64_t *)((char *)&v67 + 4)) {
              goto LABEL_21;
            }
          }
          unint64_t v27 = v29;
          unint64_t v12 = v25;
        }
        else
        {
          do
          {
            unint64_t v27 = (uint64_t *)((char *)v26 - 12);
            *(void *)&long long v66 = *(void *)v11;
            DWORD2(v66) = *(_DWORD *)(v11 + 8);
            uint64_t v28 = *(v26 - 1);
            uint64_t v26 = (uint64_t *)((char *)v26 - 12);
          }
          while (v28 <= *(uint64_t *)((char *)&v66 + 4));
LABEL_21:
          unint64_t v12 = v25;
          if (v25 < (unint64_t)v27)
          {
            unint64_t v31 = (unint64_t)v27;
            do
            {
              int v78 = *(_DWORD *)(v12 + 8);
              uint64_t v68 = *(void *)v12;
              uint64_t v32 = *(void *)v31;
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v31 + 8);
              *(void *)unint64_t v12 = v32;
              *(_DWORD *)(v31 + 8) = v78;
              *(void *)unint64_t v31 = v68;
              do
              {
                uint64_t v33 = *(void *)(v12 + 16);
                v12 += 12;
              }
              while (v33 > __SPAIR64__(v23, HIDWORD(v22)));
              do
              {
                uint64_t v34 = *(void *)(v31 - 8);
                v31 -= 12;
              }
              while (v34 <= __SPAIR64__(v23, HIDWORD(v22)));
            }
            while (v12 < v31);
          }
        }
        if (v12 - 12 != v11)
        {
          uint64_t v35 = *(void *)(v12 - 12);
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 - 4);
          *(void *)uint64_t v11 = v35;
        }
        *(void *)(v12 - 12) = v22;
        *(_DWORD *)(v12 - 4) = v23;
        if (v25 >= (unint64_t)v27) {
          break;
        }
LABEL_32:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>(v11, v12 - 12, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v11, v12 - 12);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v12, (uint64_t)a2);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_32;
      }
    }
    a2 = (uint64_t *)(v12 - 12);
    if (!v36) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)&long long v19 = *a1;
  DWORD2(v19) = *((_DWORD *)a1 + 2);
  if (*(uint64_t *)((char *)a2 + 4) > *(uint64_t *)((char *)&v19 + 4))
  {
    *(void *)&long long v20 = *a2;
    DWORD2(v20) = HIDWORD(*(unint64_t *)((char *)a2 + 4));
    if (*(uint64_t *)((char *)a3 + 4) > *(uint64_t *)((char *)&v20 + 4))
    {
      int v3 = *((_DWORD *)a1 + 2);
      uint64_t v4 = *a1;
      int v5 = *((_DWORD *)a3 + 2);
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = v5;
      *a3 = v4;
      *((_DWORD *)a3 + 2) = v3;
      return 1;
    }
    int v13 = *((_DWORD *)a1 + 2);
    uint64_t v14 = *a1;
    int v15 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v15;
    *a2 = v14;
    *((_DWORD *)a2 + 2) = v13;
    LODWORD(v23) = HIDWORD(v14);
    HIDWORD(v23) = *((_DWORD *)a2 + 2);
    if (*(uint64_t *)((char *)a3 + 4) > v23)
    {
      int v16 = *((_DWORD *)a2 + 2);
      uint64_t v17 = *a2;
      int v18 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v18;
      *a3 = v17;
      *((_DWORD *)a3 + 2) = v16;
      return 2;
    }
    return 1;
  }
  *(void *)&long long v21 = *a2;
  DWORD2(v21) = HIDWORD(*(unint64_t *)((char *)a2 + 4));
  if (*(uint64_t *)((char *)a3 + 4) > *(uint64_t *)((char *)&v21 + 4))
  {
    int v7 = *((_DWORD *)a2 + 2);
    uint64_t v8 = *a2;
    int v9 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v9;
    *a3 = v8;
    *((_DWORD *)a3 + 2) = v7;
    *(void *)&long long v22 = *a1;
    DWORD2(v22) = *((_DWORD *)a1 + 2);
    if (*(uint64_t *)((char *)a2 + 4) > *(uint64_t *)((char *)&v22 + 4))
    {
      int v10 = *((_DWORD *)a1 + 2);
      uint64_t v11 = *a1;
      int v12 = *((_DWORD *)a2 + 2);
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = v12;
      *a2 = v11;
      *((_DWORD *)a2 + 2) = v10;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::greater<operations_research::sat::TaskTime> &>(uint64_t *a1, uint64_t *a2)
{
  int v2 = *(_DWORD *)a1;
  uint64_t v3 = *(uint64_t *)((char *)a1 + 4);
  HIDWORD(v15) = *((_DWORD *)a2 - 1);
  if (v3 <= v15)
  {
    unint64_t v6 = (unint64_t)a1 + 12;
    do
    {
      uint64_t v4 = (uint64_t *)v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      *(void *)&long long v13 = *(void *)v6;
      DWORD2(v13) = *(_DWORD *)(v6 + 8);
      v6 += 12;
    }
    while (v3 <= *(uint64_t *)((char *)&v13 + 4));
  }
  else
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(uint64_t *)((char *)v4 + 12);
      uint64_t v4 = (uint64_t *)((char *)v4 + 12);
      LODWORD(v16) = HIDWORD(v5);
      HIDWORD(v16) = *((_DWORD *)v4 + 2);
    }
    while (v3 <= v16);
  }
  if (v4 < a2)
  {
    do
    {
      uint64_t v7 = *(uint64_t *)((char *)a2 - 12);
      a2 = (uint64_t *)((char *)a2 - 12);
      LODWORD(v17) = HIDWORD(v7);
      HIDWORD(v17) = *((_DWORD *)a2 + 2);
    }
    while (v3 > v17);
  }
  while (v4 < a2)
  {
    int v20 = *((_DWORD *)v4 + 2);
    uint64_t v14 = *v4;
    uint64_t v8 = *a2;
    *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
    *uint64_t v4 = v8;
    *((_DWORD *)a2 + 2) = v20;
    *a2 = v14;
    do
    {
      uint64_t v9 = *(uint64_t *)((char *)v4 + 12);
      uint64_t v4 = (uint64_t *)((char *)v4 + 12);
      LODWORD(v18) = HIDWORD(v9);
      HIDWORD(v18) = *((_DWORD *)v4 + 2);
    }
    while (v3 <= v18);
    do
    {
      uint64_t v10 = *(uint64_t *)((char *)a2 - 12);
      a2 = (uint64_t *)((char *)a2 - 12);
      LODWORD(v19) = HIDWORD(v10);
      HIDWORD(v19) = *((_DWORD *)a2 + 2);
    }
    while (v3 > v19);
  }
  if ((uint64_t *)((char *)v4 - 12) != a1)
  {
    uint64_t v11 = *(uint64_t *)((char *)v4 - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v4 - 1);
    *a1 = v11;
  }
  *((_DWORD *)v4 - 3) = v2;
  *(v4 - 1) = v3;
  return v4;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      *(void *)&long long v29 = *(void *)a1;
      DWORD2(v29) = *(_DWORD *)(a1 + 8);
      if (*(void *)(a2 - 8) > *(uint64_t *)((char *)&v29 + 4))
      {
        int v15 = *(_DWORD *)(a1 + 8);
        uint64_t v16 = *(void *)a1;
        int v17 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v17;
        *(void *)(a2 - 12) = v16;
        *(_DWORD *)(a2 - 4) = v15;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      BOOL result = 1;
      break;
    case 4uLL:
      uint64_t v18 = (uint64_t *)(a1 + 12);
      uint64_t v19 = (uint64_t *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      *(void *)&long long v30 = *(void *)(a1 + 24);
      DWORD2(v30) = *(_DWORD *)(a1 + 32);
      if (*(void *)(a2 - 8) <= *(uint64_t *)((char *)&v30 + 4)) {
        goto LABEL_13;
      }
      int v20 = *(_DWORD *)(a1 + 32);
      uint64_t v21 = *v19;
      int v22 = *(_DWORD *)(a2 - 4);
      *uint64_t v19 = *(void *)(a2 - 12);
      *(_DWORD *)(a1 + 32) = v22;
      *(void *)(a2 - 12) = v21;
      *(_DWORD *)(a2 - 4) = v20;
      *(void *)&long long v31 = *(void *)(a1 + 12);
      DWORD2(v31) = *(_DWORD *)(a1 + 20);
      if (*(void *)(a1 + 28) <= *(uint64_t *)((char *)&v31 + 4)) {
        goto LABEL_13;
      }
      int v23 = *(_DWORD *)(a1 + 20);
      uint64_t v24 = *v18;
      *uint64_t v18 = *v19;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
      *uint64_t v19 = v24;
      *(_DWORD *)(a1 + 32) = v23;
      *(void *)&long long v32 = *(void *)a1;
      DWORD2(v32) = *(_DWORD *)(a1 + 8);
      if (*(void *)(a1 + 16) <= *(uint64_t *)((char *)&v32 + 4)) {
        goto LABEL_13;
      }
      int v25 = *(_DWORD *)(a1 + 8);
      uint64_t v26 = *(void *)a1;
      *(void *)a1 = *v18;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *uint64_t v18 = v26;
      *(_DWORD *)(a1 + 20) = v25;
      BOOL result = 1;
      break;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(a1, a1 + 12, a1 + 24, (uint64_t *)(a1 + 36), (uint64_t *)(a2 - 12));
      BOOL result = 1;
      break;
    default:
      uint64_t v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v7 = a1 + 36;
      if (a1 + 36 == a2)
      {
LABEL_13:
        BOOL result = 1;
      }
      else
      {
        uint64_t v8 = 0;
        int v9 = 0;
        while (1)
        {
          *(void *)&long long v27 = *(void *)v6;
          DWORD2(v27) = *(_DWORD *)(v6 + 8);
          uint64_t v10 = *(void *)(v7 + 4);
          if (v10 > *(uint64_t *)((char *)&v27 + 4)) {
            break;
          }
LABEL_12:
          uint64_t v6 = v7;
          v8 += 12;
          v7 += 12;
          if (v7 == a2) {
            goto LABEL_13;
          }
        }
        int v11 = *(_DWORD *)v7;
        uint64_t v12 = v8;
        do
        {
          uint64_t v13 = a1 + v12;
          *(void *)(v13 + 36) = *(void *)(a1 + v12 + 24);
          *(_DWORD *)(v13 + 44) = *(_DWORD *)(a1 + v12 + 32);
          if (v12 == -24)
          {
            *(_DWORD *)a1 = v11;
            *(void *)(a1 + 4) = v10;
            if (++v9 != 8) {
              goto LABEL_12;
            }
            goto LABEL_22;
          }
          *(void *)&long long v28 = *(void *)(v13 + 12);
          DWORD2(v28) = *(_DWORD *)(v13 + 20);
          v12 -= 12;
        }
        while (v10 > *(uint64_t *)((char *)&v28 + 4));
        uint64_t v14 = a1 + v12;
        *(_DWORD *)(v14 + 36) = v11;
        *(void *)(v14 + 40) = v10;
        if (++v9 != 8) {
          goto LABEL_12;
        }
LABEL_22:
        BOOL result = v7 + 12 == a2;
      }
      break;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  *(void *)&long long v32 = *(void *)a3;
  DWORD2(v32) = *(_DWORD *)(a3 + 8);
  if (*(uint64_t *)((char *)a4 + 4) > *(uint64_t *)((char *)&v32 + 4))
  {
    int v11 = *(_DWORD *)(a3 + 8);
    uint64_t v12 = *(void *)a3;
    int v13 = *((_DWORD *)a4 + 2);
    *(void *)a3 = *a4;
    *(_DWORD *)(a3 + 8) = v13;
    *a4 = v12;
    *((_DWORD *)a4 + 2) = v11;
    *(void *)&long long v33 = *(void *)a2;
    DWORD2(v33) = *(_DWORD *)(a2 + 8);
    if (*(void *)(a3 + 4) > *(uint64_t *)((char *)&v33 + 4))
    {
      int v14 = *(_DWORD *)(a2 + 8);
      uint64_t v15 = *(void *)a2;
      int v16 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = v16;
      *(void *)a3 = v15;
      *(_DWORD *)(a3 + 8) = v14;
      *(void *)&long long v34 = *(void *)a1;
      DWORD2(v34) = *(_DWORD *)(a1 + 8);
      if (*(void *)(a2 + 4) > *(uint64_t *)((char *)&v34 + 4))
      {
        int v17 = *(_DWORD *)(a1 + 8);
        uint64_t v18 = *(void *)a1;
        int v19 = *(_DWORD *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v19;
        *(void *)a2 = v18;
        *(_DWORD *)(a2 + 8) = v17;
      }
    }
  }
  *(void *)&long long v35 = *a4;
  DWORD2(v35) = *((_DWORD *)a4 + 2);
  if (*(uint64_t *)((char *)a5 + 4) > *(uint64_t *)((char *)&v35 + 4))
  {
    int v20 = *((_DWORD *)a4 + 2);
    uint64_t v21 = *a4;
    int v22 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v22;
    *a5 = v21;
    *((_DWORD *)a5 + 2) = v20;
    *(void *)&long long v36 = *(void *)a3;
    DWORD2(v36) = *(_DWORD *)(a3 + 8);
    if (*(uint64_t *)((char *)a4 + 4) > *(uint64_t *)((char *)&v36 + 4))
    {
      int v23 = *(_DWORD *)(a3 + 8);
      uint64_t v24 = *(void *)a3;
      int v25 = *((_DWORD *)a4 + 2);
      *(void *)a3 = *a4;
      *(_DWORD *)(a3 + 8) = v25;
      *a4 = v24;
      *((_DWORD *)a4 + 2) = v23;
      *(void *)&long long v37 = *(void *)a2;
      DWORD2(v37) = *(_DWORD *)(a2 + 8);
      if (*(void *)(a3 + 4) > *(uint64_t *)((char *)&v37 + 4))
      {
        int v26 = *(_DWORD *)(a2 + 8);
        uint64_t v27 = *(void *)a2;
        int v28 = *(_DWORD *)(a3 + 8);
        *(void *)a2 = *(void *)a3;
        *(_DWORD *)(a2 + 8) = v28;
        *(void *)a3 = v27;
        *(_DWORD *)(a3 + 8) = v26;
        *(void *)&long long v38 = *(void *)a1;
        DWORD2(v38) = *(_DWORD *)(a1 + 8);
        if (*(void *)(a2 + 4) > *(uint64_t *)((char *)&v38 + 4))
        {
          int v29 = *(_DWORD *)(a1 + 8);
          uint64_t v30 = *(void *)a1;
          int v31 = *(_DWORD *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = v31;
          *(void *)a2 = v30;
          *(_DWORD *)(a2 + 8) = v29;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,operations_research::sat::TaskTime*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)a2 - a1;
    unint64_t v8 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      unint64_t v10 = (v8 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(a1 + 12 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(a1, a4, v8, v12);
        uint64_t v12 = (uint64_t *)((char *)v12 - 12);
        --v11;
      }
      while (v11);
    }
    int v13 = v5;
    if (v5 != a3)
    {
      if (v7 > 23)
      {
        uint64_t v18 = v5;
        do
        {
          *(void *)&long long v52 = *(void *)a1;
          DWORD2(v52) = *(_DWORD *)(a1 + 8);
          if (*(uint64_t *)((char *)v18 + 4) > *(uint64_t *)((char *)&v52 + 4))
          {
            int v19 = *((_DWORD *)v18 + 2);
            uint64_t v20 = *v18;
            int v21 = *(_DWORD *)(a1 + 8);
            *uint64_t v18 = *(void *)a1;
            *((_DWORD *)v18 + 2) = v21;
            *(void *)a1 = v20;
            *(_DWORD *)(a1 + 8) = v19;
            if (v8 < 3)
            {
              uint64_t v24 = a1 + 12;
              uint64_t v25 = 1;
            }
            else
            {
              uint64_t v22 = *(void *)(a1 + 16);
              *(void *)&long long v53 = *(void *)(a1 + 24);
              DWORD2(v53) = *(_DWORD *)(a1 + 32);
              BOOL v23 = v22 <= *(void *)((char *)&v53 + 4);
              uint64_t v24 = v22 <= *(uint64_t *)((char *)&v53 + 4) ? a1 + 12 : a1 + 24;
              uint64_t v25 = v23 ? 1 : 2;
            }
            uint64_t v26 = *(void *)a1;
            unsigned int v27 = *(_DWORD *)(a1 + 8);
            *(void *)&long long v54 = *(void *)a1;
            DWORD2(v54) = v27;
            if (*(void *)(v24 + 4) <= *(uint64_t *)((char *)&v54 + 4))
            {
              uint64_t v28 = a1;
              do
              {
                uint64_t v29 = v28;
                uint64_t v28 = v24;
                uint64_t v30 = *(void *)v24;
                *(_DWORD *)(v29 + 8) = *(_DWORD *)(v28 + 8);
                *(void *)uint64_t v29 = v30;
                if ((uint64_t)((v8 - 2) >> 1) < v25) {
                  break;
                }
                uint64_t v31 = (2 * v25) | 1;
                uint64_t v24 = a1 + 12 * v31;
                uint64_t v32 = 2 * v25 + 2;
                if (v32 < (uint64_t)v8)
                {
                  *(void *)&long long v55 = *(void *)(v24 + 12);
                  DWORD2(v55) = *(_DWORD *)(v24 + 20);
                  if (*(void *)(a1 + 12 * v31 + 4) > *(uint64_t *)((char *)&v55 + 4))
                  {
                    v24 += 12;
                    uint64_t v31 = v32;
                  }
                }
                uint64_t v25 = v31;
              }
              while (*(void *)(v24 + 4) <= __SPAIR64__(v27, HIDWORD(v26)));
              *(void *)uint64_t v28 = v26;
              *(_DWORD *)(v28 + 8) = v27;
            }
          }
          uint64_t v18 = (uint64_t *)((char *)v18 + 12);
        }
        while (v18 != a3);
      }
      else
      {
        int v14 = v5;
        do
        {
          *(void *)&long long v51 = *(void *)a1;
          DWORD2(v51) = *(_DWORD *)(a1 + 8);
          if (*(uint64_t *)((char *)v14 + 4) > *(uint64_t *)((char *)&v51 + 4))
          {
            int v15 = *((_DWORD *)v14 + 2);
            uint64_t v16 = *v14;
            int v17 = *(_DWORD *)(a1 + 8);
            *int v14 = *(void *)a1;
            *((_DWORD *)v14 + 2) = v17;
            *(void *)a1 = v16;
            *(_DWORD *)(a1 + 8) = v15;
          }
          int v14 = (uint64_t *)((char *)v14 + 12);
        }
        while (v14 != a3);
      }
      int v13 = a3;
    }
    if (v7 >= 13)
    {
      int64_t v33 = v7 / 0xCuLL;
      do
      {
        uint64_t v34 = 0;
        uint64_t v49 = *(void *)a1;
        int v50 = *(_DWORD *)(a1 + 8);
        uint64_t v35 = a1;
        do
        {
          uint64_t v37 = v34 + 1;
          unint64_t v38 = v35 + 12 * (v34 + 1);
          uint64_t v39 = (2 * v34) | 1;
          uint64_t v40 = 2 * v34 + 2;
          if (v40 < v33)
          {
            *(void *)&long long v56 = *(void *)(v38 + 12);
            DWORD2(v56) = *(_DWORD *)(v38 + 20);
            if (*(void *)(v35 + 12 * v37 + 4) > *(uint64_t *)((char *)&v56 + 4))
            {
              v38 += 12;
              uint64_t v39 = v40;
            }
          }
          uint64_t v36 = *(void *)v38;
          *(_DWORD *)(v35 + 8) = *(_DWORD *)(v38 + 8);
          *(void *)uint64_t v35 = v36;
          uint64_t v35 = v38;
          uint64_t v34 = v39;
        }
        while (v39 <= (uint64_t)((unint64_t)(v33 - 2) >> 1));
        uint64_t v5 = (uint64_t *)((char *)v5 - 12);
        if ((uint64_t *)v38 == v5)
        {
          *(_DWORD *)(v38 + 8) = v50;
          *(void *)unint64_t v38 = v49;
        }
        else
        {
          uint64_t v41 = *v5;
          *(_DWORD *)(v38 + 8) = *((_DWORD *)v5 + 2);
          *(void *)unint64_t v38 = v41;
          *uint64_t v5 = v49;
          *((_DWORD *)v5 + 2) = v50;
          uint64_t v42 = v38 - a1 + 12;
          if (v42 >= 13)
          {
            unint64_t v43 = (v42 / 0xCuLL - 2) >> 1;
            uint64_t v44 = *(void *)v38;
            unsigned int v45 = *(_DWORD *)(v38 + 8);
            *(void *)&long long v57 = *(void *)v38;
            DWORD2(v57) = v45;
            if (*(void *)(a1 + 12 * v43 + 4) > *(uint64_t *)((char *)&v57 + 4))
            {
              do
              {
                unint64_t v46 = v38;
                unint64_t v38 = a1 + 12 * v43;
                uint64_t v47 = *(void *)v38;
                *(_DWORD *)(v46 + 8) = *(_DWORD *)(v38 + 8);
                *(void *)unint64_t v46 = v47;
                if (!v43) {
                  break;
                }
                unint64_t v43 = (v43 - 1) >> 1;
              }
              while (*(void *)(a1 + 12 * v43 + 4) > __SPAIR64__(v45, HIDWORD(v44)));
              *(void *)unint64_t v38 = v44;
              *(_DWORD *)(v38 + 8) = v45;
            }
          }
        }
        BOOL v23 = v33-- <= 2;
      }
      while (!v23);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      uint64_t v6 = (uint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        *(void *)&long long v13 = *(uint64_t *)((char *)v6 + 12);
        DWORD2(v13) = *((_DWORD *)v6 + 5);
        if (*(void *)(result + 12 * v5 + 4) > *(uint64_t *)((char *)&v13 + 4))
        {
          uint64_t v6 = (uint64_t *)((char *)v6 + 12);
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      uint64_t v7 = *a4;
      unsigned int v8 = *((_DWORD *)a4 + 2);
      *(void *)&long long v14 = *a4;
      DWORD2(v14) = v8;
      if (*(uint64_t *)((char *)v6 + 4) <= *(uint64_t *)((char *)&v14 + 4))
      {
        do
        {
          int v9 = a4;
          a4 = v6;
          uint64_t v10 = *v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)a4 + 2);
          *int v9 = v10;
          if (v4 < v5) {
            break;
          }
          uint64_t v11 = (2 * v5) | 1;
          uint64_t v6 = (uint64_t *)(result + 12 * v11);
          uint64_t v12 = 2 * v5 + 2;
          if (v12 < a3)
          {
            *(void *)&long long v15 = *(uint64_t *)((char *)v6 + 12);
            DWORD2(v15) = *((_DWORD *)v6 + 5);
            if (*(void *)(result + 12 * v11 + 4) > *(uint64_t *)((char *)&v15 + 4))
            {
              uint64_t v6 = (uint64_t *)((char *)v6 + 12);
              uint64_t v11 = v12;
            }
          }
          uint64_t v5 = v11;
        }
        while (*(uint64_t *)((char *)v6 + 4) <= __SPAIR64__(v8, HIDWORD(v7)));
        *a4 = v7;
        *((_DWORD *)a4 + 2) = v8;
      }
    }
  }
  return result;
}

void operations_research::sat::LinearConstraintBuilder::AddTerm(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = a1 + 4;
  if ((a2 & 1) == 0)
  {
    unsigned int v8 = (char *)a1[5];
    unint64_t v7 = a1[6];
    if ((unint64_t)v8 < v7)
    {
      *(_DWORD *)unsigned int v8 = a2;
      *(void *)(v8 + 4) = a3;
      int v9 = v8 + 12;
LABEL_30:
      a1[5] = v9;
      return;
    }
    long long v15 = (int *)*v6;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*v6] >> 2);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 <= 0x1555555555555555)
    {
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v15) >> 2);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v19 = 0x1555555555555555;
      }
      else {
        unint64_t v19 = v17;
      }
      if (!v19)
      {
        uint64_t v20 = 0;
        goto LABEL_25;
      }
      if (v19 <= 0x1555555555555555)
      {
        uint64_t v20 = (char *)operator new(12 * v19);
LABEL_25:
        unsigned int v27 = &v20[12 * v16];
        *(_DWORD *)unsigned int v27 = a2;
        *(void *)(v27 + 4) = a3;
        int v9 = v27 + 12;
        if (v8 != (char *)v15)
        {
          do
          {
            uint64_t v28 = *(void *)(v8 - 12);
            v8 -= 12;
            int v29 = *((_DWORD *)v8 + 2);
            *(void *)(v27 - 12) = v28;
            v27 -= 12;
            *((_DWORD *)v27 + 2) = v29;
          }
          while (v8 != (char *)v15);
          unsigned int v8 = (char *)*v6;
        }
        a1[4] = v27;
        a1[5] = v9;
        a1[6] = &v20[12 * v19];
        if (v8) {
          operator delete(v8);
        }
        goto LABEL_30;
      }
LABEL_39:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_38:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  int v10 = a2 ^ 1;
  uint64_t v11 = -a3;
  long long v13 = (int *)a1[5];
  unint64_t v12 = a1[6];
  if ((unint64_t)v13 >= v12)
  {
    int v21 = (int *)*v6;
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *v6) >> 2);
    unint64_t v23 = v22 + 1;
    if (v22 + 1 > 0x1555555555555555) {
      goto LABEL_38;
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v21) >> 2);
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v25 = 0x1555555555555555;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      if (v25 > 0x1555555555555555) {
        goto LABEL_39;
      }
      uint64_t v26 = (char *)operator new(12 * v25);
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v30 = &v26[12 * v22];
    *(_DWORD *)uint64_t v30 = v10;
    *(void *)(v30 + 4) = v11;
    long long v14 = v30 + 12;
    if (v13 != v21)
    {
      do
      {
        uint64_t v31 = *(void *)(v13 - 3);
        v13 -= 3;
        int v32 = v13[2];
        *(void *)(v30 - 12) = v31;
        v30 -= 12;
        *((_DWORD *)v30 + 2) = v32;
      }
      while (v13 != v21);
      long long v13 = (int *)*v6;
    }
    a1[4] = v30;
    a1[5] = v14;
    a1[6] = &v26[12 * v25];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *long long v13 = v10;
    *(void *)(v13 + 1) = v11;
    long long v14 = v13 + 3;
  }
  a1[5] = v14;
}

void operations_research::sat::LinearConstraintBuilder::AddTerm(void *a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  if (*a2 != -1)
  {
    unint64_t v7 = a1 + 4;
    if (v6)
    {
      v6 ^= 1u;
      uint64_t v8 = -(*(void *)(a2 + 1) * a3);
      int v10 = (_DWORD *)a1[5];
      unint64_t v17 = a1[6];
      if ((unint64_t)v10 >= v17)
      {
        unint64_t v19 = (_DWORD *)*v7;
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *v7) >> 2);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 <= 0x1555555555555555)
        {
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v19) >> 2);
          if (2 * v22 > v21) {
            unint64_t v21 = 2 * v22;
          }
          if (v22 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v23 = 0x1555555555555555;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            if (v23 > 0x1555555555555555) {
              goto LABEL_41;
            }
            unint64_t v24 = (char *)operator new(12 * v23);
          }
          else
          {
            unint64_t v24 = 0;
          }
          unint64_t v25 = &v24[12 * v20];
          uint64_t v26 = &v24[12 * v23];
          *(_DWORD *)unint64_t v25 = v6;
          *(void *)(v25 + 4) = v8;
          unint64_t v18 = v25 + 12;
          if (v10 == v19) {
            goto LABEL_32;
          }
          do
          {
            uint64_t v29 = *(void *)(v10 - 3);
            v10 -= 3;
            int v30 = v10[2];
            *(void *)(v25 - 12) = v29;
            v25 -= 12;
            *((_DWORD *)v25 + 2) = v30;
          }
          while (v10 != v19);
LABEL_31:
          int v10 = (_DWORD *)*v7;
LABEL_32:
          a1[4] = v25;
          a1[5] = v18;
          a1[6] = v26;
          if (v10) {
            operator delete(v10);
          }
          goto LABEL_34;
        }
LABEL_40:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 1) * a3;
      int v10 = (_DWORD *)a1[5];
      unint64_t v9 = a1[6];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v11 = (_DWORD *)*v7;
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *v7) >> 2);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 <= 0x1555555555555555)
        {
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v11) >> 2);
          if (2 * v14 > v13) {
            unint64_t v13 = 2 * v14;
          }
          if (v14 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v15 = 0x1555555555555555;
          }
          else {
            unint64_t v15 = v13;
          }
          if (!v15)
          {
            unint64_t v16 = 0;
            goto LABEL_25;
          }
          if (v15 <= 0x1555555555555555)
          {
            unint64_t v16 = (char *)operator new(12 * v15);
LABEL_25:
            unint64_t v25 = &v16[12 * v12];
            uint64_t v26 = &v16[12 * v15];
            *(_DWORD *)unint64_t v25 = v6;
            *(void *)(v25 + 4) = v8;
            unint64_t v18 = v25 + 12;
            if (v10 == v11) {
              goto LABEL_32;
            }
            do
            {
              uint64_t v27 = *(void *)(v10 - 3);
              v10 -= 3;
              int v28 = v10[2];
              *(void *)(v25 - 12) = v27;
              v25 -= 12;
              *((_DWORD *)v25 + 2) = v28;
            }
            while (v10 != v11);
            goto LABEL_31;
          }
LABEL_41:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        goto LABEL_40;
      }
    }
    *int v10 = v6;
    *(void *)(v10 + 1) = v8;
    unint64_t v18 = v10 + 3;
LABEL_34:
    a1[5] = v18;
  }
  int64_t v31 = a1[1];
  if (v31 >= (uint64_t)0x8000000000000003) {
    a1[1] = v31 - *(void *)(a2 + 3) * a3;
  }
  uint64_t v32 = a1[2];
  if (v32 <= 0x7FFFFFFFFFFFFFFDLL) {
    a1[2] = v32 - *(void *)(a2 + 3) * a3;
  }
}

uint64_t operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*a1 + 160);
  unint64_t v6 = (unint64_t)(*(void *)(*a1 + 168) - v5) >> 2;
  if (a2 >= (int)v6)
  {
    uint64_t v11 = a2 ^ 1;
    if ((int)v11 < (int)v6)
    {
      int v9 = *(_DWORD *)(v5 + 4 * v11);
      if (v9 != -1) {
        goto LABEL_17;
      }
    }
    return 0;
  }
  int v7 = *(_DWORD *)(v5 + 4 * a2);
  uint64_t v8 = a2 ^ 1;
  if ((int)v8 >= (int)v6)
  {
    if (v7 != -1) {
      goto LABEL_22;
    }
    return 0;
  }
  int v9 = *(_DWORD *)(v5 + 4 * v8);
  if (v7 != -1 && v9 != -1)
  {
    if (v7 > v9) {
      goto LABEL_17;
    }
LABEL_22:
    operations_research::sat::LinearConstraintBuilder::AddTerm(a1, *(_DWORD *)(v5 + 4 * a2), a3);
    return 1;
  }
  if (v7 != -1) {
    goto LABEL_22;
  }
  if (v9 == -1) {
    return 0;
  }
LABEL_17:
  operations_research::sat::LinearConstraintBuilder::AddTerm(a1, v9, -a3);
  int64_t v13 = a1[1];
  if (v13 >= (uint64_t)0x8000000000000003) {
    a1[1] = v13 - a3;
  }
  uint64_t v14 = a1[2];
  if (v14 <= 0x7FFFFFFFFFFFFFFDLL) {
    a1[2] = v14 - a3;
  }
  return 1;
}

void operations_research::sat::CleanTermsAndFillConstraint(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (int *)a1[1];
  unint64_t v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v4) >> 2));
  a2[3] = a2[2];
  a2[6] = a2[5];
  if (v5 == (int *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v4, v5, (uint64_t)&v104, v7, 1);
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 == v8) {
    return;
  }
  unint64_t v99 = (void **)(a2 + 5);
  uint64_t v100 = (void **)(a2 + 2);
  uint64_t v10 = 0;
  int v11 = -1;
  uint64_t v102 = a1[1];
  uint64_t v103 = a2;
  do
  {
    int v12 = *(_DWORD *)v9;
    uint64_t v13 = *(void *)(v9 + 4);
    if (v11 == *(_DWORD *)v9)
    {
      v10 += v13;
      goto LABEL_7;
    }
    if (v11 == (v12 ^ 1))
    {
      v10 -= v13;
      goto LABEL_7;
    }
    if (v10)
    {
      unint64_t v15 = (int *)a2[3];
      unint64_t v14 = a2[4];
      if ((unint64_t)v15 < v14)
      {
        *unint64_t v15 = v11;
        a2[3] = v15 + 1;
        unint64_t v17 = (char *)a2[6];
        unint64_t v16 = a2[7];
        if ((unint64_t)v17 < v16)
        {
LABEL_14:
          *(void *)unint64_t v17 = v10;
          uint64_t v18 = (uint64_t)(v17 + 8);
LABEL_56:
          a2[6] = v18;
          goto LABEL_57;
        }
LABEL_35:
        uint64_t v37 = (char *)*v99;
        uint64_t v38 = v17 - (unsigned char *)*v99;
        uint64_t v39 = v38 >> 3;
        unint64_t v40 = (v38 >> 3) + 1;
        if (v40 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v41 = v16 - (void)v37;
        if (v41 >> 2 > v40) {
          unint64_t v40 = v41 >> 2;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          if (v42 >> 61) {
            goto LABEL_103;
          }
          unint64_t v43 = operator new(8 * v42);
          uint64_t v44 = &v43[8 * v39];
          *uint64_t v44 = v10;
          uint64_t v18 = (uint64_t)(v44 + 1);
          if (v17 != v37) {
            goto LABEL_44;
          }
        }
        else
        {
          unint64_t v43 = 0;
          uint64_t v44 = (void *)(8 * v39);
          *(void *)(8 * v39) = v10;
          uint64_t v18 = 8 * v39 + 8;
          if (v17 != v37)
          {
LABEL_44:
            unint64_t v45 = v17 - 8 - v37;
            if (v45 >= 0x58)
            {
              unint64_t v46 = v17 - &v43[v38];
              a2 = v103;
              if (v46 >= 0x20)
              {
                uint64_t v47 = (v45 >> 3) + 1;
                uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v49 = &v17[-v48];
                uint64_t v44 = (void *)((char *)v44 - v48);
                int v50 = &v43[8 * v39 - 16];
                long long v51 = v17 - 16;
                uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v53 = *(_OWORD *)v51;
                  *(v50 - 1) = *((_OWORD *)v51 - 1);
                  *int v50 = v53;
                  v50 -= 2;
                  v51 -= 32;
                  v52 -= 4;
                }
                while (v52);
                unint64_t v17 = v49;
                if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_53;
                }
              }
            }
            else
            {
              a2 = v103;
            }
            do
            {
              uint64_t v54 = *((void *)v17 - 1);
              v17 -= 8;
              *--uint64_t v44 = v54;
            }
            while (v17 != v37);
LABEL_53:
            a2[5] = v44;
            a2[6] = v18;
            a2[7] = &v43[8 * v42];
            if (v37) {
              operator delete(v37);
            }
            uint64_t v8 = v102;
            goto LABEL_56;
          }
        }
        a2 = v103;
        goto LABEL_53;
      }
      unint64_t v19 = (int *)*v100;
      uint64_t v20 = (char *)v15 - (unsigned char *)*v100;
      uint64_t v21 = v20 >> 2;
      unint64_t v22 = (v20 >> 2) + 1;
      if (v22 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v14 - (void)v19;
      if (v23 >> 1 > v22) {
        unint64_t v22 = v23 >> 1;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v101 = v22;
      if (v22)
      {
        if (v22 >> 62) {
          goto LABEL_103;
        }
        unint64_t v24 = operator new(4 * v22);
        unint64_t v25 = (int *)&v24[4 * v21];
        *unint64_t v25 = v11;
        uint64_t v26 = (uint64_t)(v25 + 1);
        if (v15 != v19)
        {
LABEL_23:
          unint64_t v27 = (char *)(v15 - 1) - (char *)v19;
          if (v27 >= 0x2C)
          {
            unint64_t v28 = (char *)v15 - &v24[v20];
            a2 = v103;
            if (v28 >= 0x20)
            {
              uint64_t v29 = (v27 >> 2) + 1;
              uint64_t v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
              int64_t v31 = &v15[v30 / 0xFFFFFFFFFFFFFFFCLL];
              unint64_t v25 = (int *)((char *)v25 - v30);
              uint64_t v32 = &v24[4 * v21 - 16];
              int64_t v33 = v15 - 4;
              uint64_t v34 = v29 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v35 = *(_OWORD *)v33;
                *(v32 - 1) = *((_OWORD *)v33 - 1);
                *uint64_t v32 = v35;
                v32 -= 2;
                v33 -= 8;
                v34 -= 8;
              }
              while (v34);
              unint64_t v15 = v31;
              if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_32:
                a2[2] = v25;
                a2[3] = v26;
                a2[4] = &v24[4 * v101];
                if (v19) {
                  operator delete(v19);
                }
                uint64_t v8 = v102;
                a2[3] = v26;
                unint64_t v17 = (char *)a2[6];
                unint64_t v16 = a2[7];
                if ((unint64_t)v17 < v16) {
                  goto LABEL_14;
                }
                goto LABEL_35;
              }
            }
          }
          else
          {
            a2 = v103;
          }
          do
          {
            int v36 = *--v15;
            *--unint64_t v25 = v36;
          }
          while (v15 != v19);
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = (int *)(4 * v21);
        *(_DWORD *)(4 * v21) = v11;
        uint64_t v26 = 4 * v21 + 4;
        if (v15 != v19) {
          goto LABEL_23;
        }
      }
      a2 = v103;
      goto LABEL_32;
    }
LABEL_57:
    uint64_t v10 = v13;
    int v11 = v12;
LABEL_7:
    v9 += 12;
  }
  while (v9 != v8);
  if (!v10) {
    return;
  }
  long long v56 = (int *)a2[3];
  unint64_t v55 = a2[4];
  if ((unint64_t)v56 < v55)
  {
    int *v56 = v11;
    uint64_t v57 = (uint64_t)(v56 + 1);
    goto LABEL_80;
  }
  unsigned int v58 = (int *)*v100;
  uint64_t v59 = (char *)v56 - (unsigned char *)*v100;
  uint64_t v60 = v59 >> 2;
  unint64_t v61 = (v59 >> 2) + 1;
  if (v61 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v62 = v55 - (void)v58;
  if (v62 >> 1 > v61) {
    unint64_t v61 = v62 >> 1;
  }
  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v63 = v61;
  }
  if (!v63)
  {
    long long v64 = 0;
    long long v65 = (int *)(4 * v60);
    long long v66 = 0;
    *(_DWORD *)(4 * v60) = v11;
    uint64_t v57 = 4 * v60 + 4;
    int64_t v67 = (char *)v56 - (char *)v58;
    if (v56 == v58) {
      goto LABEL_78;
    }
    goto LABEL_72;
  }
  if (v63 >> 62) {
    goto LABEL_103;
  }
  long long v64 = operator new(4 * v63);
  long long v65 = (int *)&v64[4 * v60];
  long long v66 = &v64[4 * v63];
  *long long v65 = v11;
  uint64_t v57 = (uint64_t)(v65 + 1);
  int64_t v67 = (char *)v56 - (char *)v58;
  if (v56 != v58)
  {
LABEL_72:
    unint64_t v68 = v67 - 4;
    if (v68 < 0x2C) {
      goto LABEL_110;
    }
    if ((unint64_t)((char *)v56 - &v64[v59]) < 0x20) {
      goto LABEL_110;
    }
    uint64_t v69 = (v68 >> 2) + 1;
    uint64_t v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
    long long v71 = &v56[v70 / 0xFFFFFFFFFFFFFFFCLL];
    long long v65 = (int *)((char *)v65 - v70);
    long long v72 = &v64[4 * v60 - 16];
    long long v73 = v56 - 4;
    uint64_t v74 = v69 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v75 = *(_OWORD *)v73;
      *(v72 - 1) = *((_OWORD *)v73 - 1);
      _OWORD *v72 = v75;
      v72 -= 2;
      v73 -= 8;
      v74 -= 8;
    }
    while (v74);
    long long v56 = v71;
    if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_110:
      do
      {
        int v76 = *--v56;
        *--long long v65 = v76;
      }
      while (v56 != v58);
    }
  }
LABEL_78:
  a2[2] = v65;
  a2[3] = v57;
  a2[4] = v66;
  if (v58) {
    operator delete(v58);
  }
LABEL_80:
  a2[3] = v57;
  int v78 = (char *)a2[6];
  unint64_t v77 = a2[7];
  if ((unint64_t)v78 < v77)
  {
    *(void *)int v78 = v10;
    uint64_t v79 = (uint64_t)(v78 + 8);
    goto LABEL_101;
  }
  int v80 = (char *)*v99;
  uint64_t v81 = v78 - (unsigned char *)*v99;
  uint64_t v82 = v81 >> 3;
  unint64_t v83 = (v81 >> 3) + 1;
  if (v83 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v84 = v77 - (void)v80;
  if (v84 >> 2 > v83) {
    unint64_t v83 = v84 >> 2;
  }
  if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v85 = v83;
  }
  if (!v85)
  {
    int v86 = 0;
    uint64_t v87 = (void *)(8 * v82);
    unint64_t v88 = 0;
    *(void *)(8 * v82) = v10;
    uint64_t v79 = 8 * v82 + 8;
    int64_t v89 = v78 - v80;
    if (v78 == v80) {
      goto LABEL_99;
    }
LABEL_93:
    unint64_t v90 = v89 - 8;
    if (v90 < 0x58) {
      goto LABEL_111;
    }
    if ((unint64_t)(v78 - &v86[v81]) < 0x20) {
      goto LABEL_111;
    }
    uint64_t v91 = (v90 >> 3) + 1;
    uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
    int v93 = &v78[-v92];
    uint64_t v87 = (void *)((char *)v87 - v92);
    uint64_t v94 = &v86[8 * v82 - 16];
    long long v95 = v78 - 16;
    uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v97 = *(_OWORD *)v95;
      *(v94 - 1) = *((_OWORD *)v95 - 1);
      *uint64_t v94 = v97;
      v94 -= 2;
      v95 -= 32;
      v96 -= 4;
    }
    while (v96);
    int v78 = v93;
    if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_111:
      do
      {
        uint64_t v98 = *((void *)v78 - 1);
        v78 -= 8;
        *--uint64_t v87 = v98;
      }
      while (v78 != v80);
    }
    goto LABEL_99;
  }
  if (v85 >> 61) {
LABEL_103:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  int v86 = operator new(8 * v85);
  uint64_t v87 = &v86[8 * v82];
  unint64_t v88 = &v86[8 * v85];
  *uint64_t v87 = v10;
  uint64_t v79 = (uint64_t)(v87 + 1);
  int64_t v89 = v78 - v80;
  if (v78 != v80) {
    goto LABEL_93;
  }
LABEL_99:
  a2[5] = v87;
  a2[6] = v79;
  a2[7] = v88;
  if (v80) {
    operator delete(v80);
  }
LABEL_101:
  a2[6] = v79;
}

void operations_research::sat::LinearConstraintBuilder::Build(operations_research::sat::LinearConstraintBuilder *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(a2 + 16) = 0u;
  operations_research::sat::CleanTermsAndFillConstraint((uint64_t *)this + 4, (void *)a2);
}

void sub_23CD122E8(_Unwind_Exception *a1)
{
  operations_research::sat::LinearConstraint::~LinearConstraint(v1);
  _Unwind_Resume(a1);
}

double operations_research::sat::ComputeActivity(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3] - v2;
  if (!v3) {
    return 0.0;
  }
  unint64_t v4 = v3 >> 2;
  uint64_t v5 = a1[5];
  uint64_t v6 = *a2;
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  if (v4 < 2)
  {
    unint64_t v7 = 0;
    double result = 0.0;
LABEL_10:
    int v12 = (uint64_t *)(v5 + 8 * v7);
    unint64_t v13 = v4 - v7;
    unint64_t v14 = (int *)(v2 + 4 * v7);
    do
    {
      uint64_t v16 = *v14++;
      uint64_t v15 = v16;
      uint64_t v17 = *v12++;
      double result = result + (double)v17 * *(double *)(v6 + 8 * v15);
      --v13;
    }
    while (v13);
    return result;
  }
  unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v9 = (int *)(v2 + 4);
  uint64_t v10 = (uint64_t *)(v5 + 8);
  double result = 0.0;
  unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    double result = result
           + *(double *)(v6 + 8 * *(v9 - 1)) * (double)*(v10 - 1)
           + *(double *)(v6 + 8 * *v9) * (double)*v10;
    v9 += 2;
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  if (v4 != v7) {
    goto LABEL_10;
  }
  return result;
}

double operations_research::sat::ComputeL2Norm(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2)
{
  uint64_t v3 = (int64x2_t *)*((void *)this + 5);
  uint64_t v2 = (int64x2_t *)*((void *)this + 6);
  if (v3 == v2) {
    return sqrt(0.0);
  }
  unint64_t v4 = (char *)v2 - (char *)v3 - 8;
  if (v4 < 0x18)
  {
    double v5 = 0.0;
    uint64_t v6 = (uint64_t *)*((void *)this + 5);
    goto LABEL_8;
  }
  uint64_t v8 = (v4 >> 3) + 1;
  uint64_t v6 = &v3->i64[v8 & 0x3FFFFFFFFFFFFFFCLL];
  uint64_t v9 = v3 + 1;
  double v5 = 0.0;
  int64x2_t v10 = vdupq_n_s64(0x7FFFFFFFFFFFFFFDuLL);
  int64x2_t v11 = vdupq_n_s64(0x8000000000000003);
  int8x16_t v12 = (int8x16_t)vdupq_n_s64(0xFFF0000000000000);
  int8x16_t v13 = (int8x16_t)vdupq_n_s64(0x7FF0000000000000uLL);
  uint64_t v14 = v8 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    float64x2_t v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v9[-1], v10), v13, vbslq_s8((int8x16_t)vcgtq_s64(v11, v9[-1]), v12, (int8x16_t)vcvtq_f64_s64(v9[-1])));
    float64x2_t v16 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(*v9, v10), v13, vbslq_s8((int8x16_t)vcgtq_s64(v11, *v9), v12, (int8x16_t)vcvtq_f64_s64(*v9)));
    float64x2_t v17 = vmulq_f64(v15, v15);
    float64x2_t v18 = vmulq_f64(v16, v16);
    double v5 = v5 + v17.f64[0] + v17.f64[1] + v18.f64[0] + v18.f64[1];
    v9 += 2;
    v14 -= 4;
  }
  while (v14);
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
  {
    do
    {
LABEL_8:
      uint64_t v20 = *v6++;
      uint64_t v19 = v20;
      double v21 = (double)v20;
      if (v20 < (uint64_t)0x8000000000000003) {
        double v21 = -INFINITY;
      }
      if (v19 > 0x7FFFFFFFFFFFFFFDLL) {
        double v21 = INFINITY;
      }
      double v5 = v5 + v21 * v21;
    }
    while (v6 != (uint64_t *)v2);
  }
  return sqrt(v5);
}

uint64_t operations_research::sat::ComputeInfinityNorm(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2)
{
  uint64_t v3 = (int64x2_t *)*((void *)this + 5);
  uint64_t v2 = (int64x2_t *)*((void *)this + 6);
  if (v3 == v2) {
    return 0;
  }
  unint64_t v4 = (char *)v2 - (char *)v3 - 8;
  if (v4 >= 0x18)
  {
    uint64_t v7 = (v4 >> 3) + 1;
    uint64_t v6 = &v3->i64[v7 & 0x3FFFFFFFFFFFFFFCLL];
    uint64_t v8 = v3 + 1;
    int64x2_t v9 = 0uLL;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    int64x2_t v11 = 0uLL;
    do
    {
      int64x2_t v12 = vabsq_s64(v8[-1]);
      int64x2_t v13 = vabsq_s64(*v8);
      int64x2_t v9 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v9, v12), (int8x16_t)v9, (int8x16_t)v12);
      int64x2_t v11 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v11, v13), (int8x16_t)v11, (int8x16_t)v13);
      v8 += 2;
      v10 -= 4;
    }
    while (v10);
    int8x16_t v14 = vbslq_s8((int8x16_t)vcgtq_s64(v9, v11), (int8x16_t)v9, (int8x16_t)v11);
    uint64_t v15 = vextq_s8(v14, v14, 8uLL).u64[0];
    uint64_t result = (uint64_t)vbsl_s8((int8x8_t)vcgtd_s64(v14.i64[0], v15), *(int8x8_t *)v14.i8, (int8x8_t)v15);
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFCLL)) {
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v6 = (uint64_t *)v3;
  }
  do
  {
    uint64_t v17 = *v6++;
    uint64_t v16 = v17;
    if (v17 < 0) {
      uint64_t v16 = -v16;
    }
    if (result <= v16) {
      uint64_t result = v16;
    }
  }
  while (v6 != (uint64_t *)v2);
  return result;
}

double operations_research::sat::ScalarProduct(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2, const operations_research::sat::LinearConstraint *a3)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    return 0.0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  unint64_t v9 = v5 >> 2;
  uint64_t v10 = *((void *)a2 + 2);
  double result = 0.0;
  while ((*((void *)a2 + 3) - v10) >> 2 > (unint64_t)v8)
  {
    int v12 = *(_DWORD *)(v3 + 4 * v6);
    int v13 = *(_DWORD *)(v10 + 4 * v8);
    if (v12 == v13)
    {
      uint64_t v14 = *(void *)(*((void *)this + 5) + 8 * v6);
      double v15 = (double)v14;
      double v16 = -INFINITY;
      if (v14 < (uint64_t)0x8000000000000003) {
        double v15 = -INFINITY;
      }
      if (v14 > 0x7FFFFFFFFFFFFFFDLL) {
        double v15 = INFINITY;
      }
      uint64_t v17 = *(void *)(*((void *)a2 + 5) + 8 * v8);
      if (v17 >= (uint64_t)0x8000000000000003) {
        double v16 = (double)v17;
      }
      if (v17 > 0x7FFFFFFFFFFFFFFDLL) {
        double v16 = INFINITY;
      }
      double result = result + v15 * v16;
      ++v7;
      ++v8;
      uint64_t v6 = v7;
      if (v9 <= v7) {
        return result;
      }
    }
    else
    {
      if (v12 <= v13) {
        ++v7;
      }
      else {
        ++v8;
      }
      uint64_t v6 = v7;
      if (v9 <= v7) {
        return result;
      }
    }
  }
  return result;
}

uint64_t *operations_research::sat::DivideByGCD(uint64_t *this, operations_research::sat::LinearConstraint *a2)
{
  uint64_t v3 = (uint64_t *)this[5];
  uint64_t v2 = (uint64_t *)this[6];
  if (v3 == v2) {
    return this;
  }
  uint64_t v4 = 0;
  uint64_t v5 = (uint64_t *)this[5];
  uint64_t v6 = v5;
  do
  {
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (v7 < 0) {
        uint64_t v7 = -v7;
      }
      unint64_t v8 = v4;
      do
      {
        uint64_t v4 = v7;
        uint64_t v7 = v8 % v7;
        unint64_t v8 = v4;
      }
      while (v7);
      if (v4 == 1) {
        return this;
      }
    }
    ++v6;
  }
  while (v6 != v2);
  uint64_t v9 = *this;
  if (*this >= (uint64_t)0x8000000000000003)
  {
    if (v9 / v4 * v4 >= v9) {
      uint64_t v12 = v9 / v4;
    }
    else {
      uint64_t v12 = v9 / v4 + 1;
    }
    *this = v12;
    uint64_t v10 = this[1];
    if (v10 > 0x7FFFFFFFFFFFFFFDLL)
    {
LABEL_13:
      unint64_t v11 = (char *)v2 - (char *)v3 - 8;
      if (v11 >= 8) {
        goto LABEL_20;
      }
      do
LABEL_23:
        *v5++ /= v4;
      while (v5 != v2);
      return this;
    }
  }
  else
  {
    uint64_t v10 = this[1];
    if (v10 > 0x7FFFFFFFFFFFFFFDLL) {
      goto LABEL_13;
    }
  }
  this[1] = v10 / v4 - (v10 / v4 * v4 > v10);
  unint64_t v11 = (char *)v2 - (char *)v3 - 8;
  if (v11 < 8) {
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v13 = (v11 >> 3) + 1;
  uint64_t v5 = &v3[v13 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v14 = v3 + 1;
  uint64_t v15 = v13 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v16 = *v14;
    *(v14 - 1) /= v4;
    *uint64_t v14 = v16 / v4;
    v14 += 2;
    v15 -= 2;
  }
  while (v15);
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_23;
  }
  return this;
}

void operations_research::sat::RemoveZeroTerms(operations_research::sat *this, operations_research::sat::LinearConstraint *a2)
{
  uint64_t v4 = (_DWORD *)*((void *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  uint64_t v3 = (std::vector<int> *)((char *)this + 16);
  unint64_t v6 = v5 - (void)v4;
  unint64_t v7 = (v5 - (uint64_t)v4) >> 2;
  if ((int)v7 < 1)
  {
    int v8 = 0;
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = (uint64_t *)*((void *)this + 5);
    uint64_t v10 = (v6 >> 2);
    unint64_t v11 = v4;
    uint64_t v12 = v9;
    do
    {
      uint64_t v14 = *v12++;
      uint64_t v13 = v14;
      if (v14)
      {
        v4[v8] = *v11;
        v9[v8++] = v13;
      }
      ++v11;
      --v10;
    }
    while (v10);
  }
  unint64_t v15 = v8;
  if (v8 <= v7)
  {
    if (v8 < v7) {
      *((void *)this + 3) = &v4[v8];
    }
  }
  else
  {
    std::vector<int>::__append(v3, v8 - v7);
  }
  uint64_t v16 = *((void *)this + 5);
  unint64_t v17 = (*((void *)this + 6) - v16) >> 3;
  if (v15 <= v17)
  {
    if (v15 < v17) {
      *((void *)this + 6) = v16 + 8 * v15;
    }
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)this + 40, v15 - v17);
  }
}

void *operations_research::sat::MakeAllCoefficientsPositive(void *this, operations_research::sat::LinearConstraint *a2)
{
  uint64_t v2 = (_DWORD *)this[2];
  unint64_t v3 = this[3] - (void)v2;
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v4 = (void *)this[5];
    uint64_t v5 = (v3 >> 2);
    do
    {
      if ((*v4 & 0x8000000000000000) != 0)
      {
        *uint64_t v4 = -*v4;
        *v2 ^= 1u;
      }
      ++v4;
      ++v2;
      --v5;
    }
    while (v5);
  }
  return this;
}

void operations_research::sat::CanonicalizeConstraint(operations_research::sat *this, operations_research::sat::LinearConstraint *a2)
{
  unint64_t v68 = 0;
  long long v66 = (char **)((char *)this + 16);
  unint64_t v3 = *((void *)this + 3) - *((void *)this + 2);
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = (v3 >> 2);
    uint64_t v64 = v8;
    while (1)
    {
      while (1)
      {
        int v10 = *(_DWORD *)&(*v66)[4 * v5];
        if ((v10 & 1) == 0) {
          break;
        }
        v10 ^= 1u;
        uint64_t v11 = -*(void *)(*((void *)this + 5) + 8 * v5);
        if (v4 >= v6)
        {
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v4 - v7) + 1;
          if (v15 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (v6 - v7) > v15) {
            unint64_t v15 = 0x5555555555555556 * (v6 - v7);
          }
          if (0xAAAAAAAAAAAAAAABLL * (v6 - v7) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v13 = 0x1555555555555555;
          }
          else {
            unint64_t v13 = v15;
          }
          if (v13)
          {
            if (v13 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v14 = (char *)operator new(12 * v13);
          }
          else
          {
            uint64_t v14 = 0;
          }
          uint64_t v16 = &v14[4 * (v4 - v7)];
          *(_DWORD *)uint64_t v16 = v10;
          *(void *)(v16 + 4) = v11;
          for (uint64_t i = (int *)v16; v4 != v7; i[2] = v21)
          {
            uint64_t v20 = *(void *)(v4 - 3);
            v4 -= 3;
            int v21 = v4[2];
            *(void *)(i - 3) = v20;
            i -= 3;
          }
          goto LABEL_28;
        }
LABEL_3:
        *uint64_t v4 = v10;
        *(void *)(v4 + 1) = v11;
        uint64_t v9 = v4 + 3;
        ++v5;
        v4 += 3;
        if (v5 == v8) {
          goto LABEL_36;
        }
      }
      uint64_t v11 = *(void *)(*((void *)this + 5) + 8 * v5);
      if (v4 < v6) {
        goto LABEL_3;
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v4 - v7) + 1;
      if (v12 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (v6 - v7) > v12) {
        unint64_t v12 = 0x5555555555555556 * (v6 - v7);
      }
      if (0xAAAAAAAAAAAAAAABLL * (v6 - v7) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x1555555555555555;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v14 = (char *)operator new(12 * v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v16 = &v14[4 * (v4 - v7)];
      *(_DWORD *)uint64_t v16 = v10;
      *(void *)(v16 + 4) = v11;
      for (uint64_t i = (int *)v16; v4 != v7; i[2] = v19)
      {
        uint64_t v18 = *(void *)(v4 - 3);
        v4 -= 3;
        int v19 = v4[2];
        *(void *)(i - 3) = v18;
        i -= 3;
      }
LABEL_28:
      unint64_t v6 = (int *)&v14[12 * v13];
      uint64_t v9 = (int *)(v16 + 12);
      if (v7) {
        operator delete(v7);
      }
      unint64_t v7 = i;
      uint64_t v8 = v64;
      ++v5;
      uint64_t v4 = v9;
      if (v5 == v64)
      {
LABEL_36:
        unint64_t v68 = v9;
        goto LABEL_38;
      }
    }
  }
  uint64_t v9 = 0;
  unint64_t v7 = 0;
LABEL_38:
  unint64_t v22 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v9 - v7));
  int64_t v67 = v7;
  if (v9 == v7) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>((uint64_t)v7, v9, (uint64_t)&v69, v23, 1);
  unint64_t v24 = (char *)*((void *)this + 5);
  *((void *)this + 3) = *((void *)this + 2);
  long long v65 = (void **)((char *)this + 40);
  *((void *)this + 6) = v24;
  if (v7 == v68)
  {
    if (!v7) {
      return;
    }
    goto LABEL_43;
  }
  do
  {
    unint64_t v27 = (char *)*((void *)this + 3);
    unint64_t v26 = *((void *)this + 4);
    if ((unint64_t)v27 < v26)
    {
      *(_DWORD *)unint64_t v27 = *v7;
      uint64_t v28 = (uint64_t)(v27 + 4);
      goto LABEL_68;
    }
    uint64_t v29 = *v66;
    uint64_t v30 = v27 - *v66;
    uint64_t v31 = v30 >> 2;
    unint64_t v32 = (v30 >> 2) + 1;
    if (v32 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v33 = v26 - (void)v29;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      if (v34 >> 62) {
        goto LABEL_97;
      }
      long long v35 = operator new(4 * v34);
      int v36 = (int *)&v35[4 * v31];
      *int v36 = *v7;
      uint64_t v28 = (uint64_t)(v36 + 1);
      if (v27 == v29) {
        goto LABEL_66;
      }
LABEL_60:
      unint64_t v37 = v27 - 4 - v29;
      if (v37 < 0x2C) {
        goto LABEL_106;
      }
      if ((unint64_t)(v27 - &v35[v30]) < 0x20) {
        goto LABEL_106;
      }
      uint64_t v38 = (v37 >> 2) + 1;
      uint64_t v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v40 = &v27[-v39];
      int v36 = (int *)((char *)v36 - v39);
      uint64_t v41 = &v35[4 * v31 - 16];
      unint64_t v42 = v27 - 16;
      uint64_t v43 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *uint64_t v41 = v44;
        v41 -= 2;
        v42 -= 32;
        v43 -= 8;
      }
      while (v43);
      unint64_t v27 = v40;
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_106:
        do
        {
          int v45 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *--int v36 = v45;
        }
        while (v27 != v29);
      }
      goto LABEL_66;
    }
    long long v35 = 0;
    int v36 = (int *)(4 * v31);
    *(_DWORD *)(4 * v31) = *v7;
    uint64_t v28 = 4 * v31 + 4;
    if (v27 != v29) {
      goto LABEL_60;
    }
LABEL_66:
    *((void *)this + 2) = v36;
    *((void *)this + 3) = v28;
    *((void *)this + 4) = &v35[4 * v34];
    if (v29)
    {
      operator delete(v29);
      unint64_t v24 = (char *)*((void *)this + 6);
    }
LABEL_68:
    *((void *)this + 3) = v28;
    unint64_t v46 = *((void *)this + 7);
    if ((unint64_t)v24 < v46)
    {
      *(void *)unint64_t v24 = *(void *)(v7 + 1);
      uint64_t v25 = (uint64_t)(v24 + 8);
      goto LABEL_46;
    }
    uint64_t v47 = (char *)*v65;
    uint64_t v48 = v24 - (unsigned char *)*v65;
    uint64_t v49 = v48 >> 3;
    unint64_t v50 = (v48 >> 3) + 1;
    if (v50 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v51 = v46 - (void)v47;
    if (v51 >> 2 > v50) {
      unint64_t v50 = v51 >> 2;
    }
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v52 = v50;
    }
    if (v52)
    {
      if (v52 >> 61) {
LABEL_97:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      long long v53 = operator new(8 * v52);
      uint64_t v54 = &v53[8 * v49];
      *uint64_t v54 = *(void *)(v7 + 1);
      uint64_t v25 = (uint64_t)(v54 + 1);
      if (v24 == v47) {
        goto LABEL_83;
      }
    }
    else
    {
      long long v53 = 0;
      uint64_t v54 = (void *)(8 * v49);
      *(void *)(8 * v49) = *(void *)(v7 + 1);
      uint64_t v25 = 8 * v49 + 8;
      if (v24 == v47) {
        goto LABEL_83;
      }
    }
    unint64_t v55 = v24 - 8 - v47;
    if (v55 >= 0x168)
    {
      if (&v53[v48 - 8 - (v55 & 0xFFFFFFFFFFFFFFF8)] > &v53[v48 - 8])
      {
        long long v56 = v24;
      }
      else if (&v24[-(v55 & 0xFFFFFFFFFFFFFFF8) - 8] > v24 - 8)
      {
        long long v56 = v24;
      }
      else if ((unint64_t)(v24 - v53 - v48) >= 0x20)
      {
        uint64_t v58 = (v55 >> 3) + 1;
        uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
        long long v56 = &v24[-v59];
        uint64_t v54 = (void *)((char *)v54 - v59);
        uint64_t v60 = &v53[8 * v49 - 16];
        unint64_t v61 = v24 - 16;
        uint64_t v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v63 = *(_OWORD *)v61;
          *(v60 - 1) = *((_OWORD *)v61 - 1);
          *uint64_t v60 = v63;
          v60 -= 2;
          v61 -= 32;
          v62 -= 4;
        }
        while (v62);
        if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_83;
        }
      }
      else
      {
        long long v56 = v24;
      }
    }
    else
    {
      long long v56 = v24;
    }
    do
    {
      uint64_t v57 = *((void *)v56 - 1);
      v56 -= 8;
      *--uint64_t v54 = v57;
    }
    while (v56 != v47);
LABEL_83:
    *((void *)this + 5) = v54;
    *((void *)this + 6) = v25;
    *((void *)this + 7) = &v53[8 * v52];
    if (v47) {
      operator delete(v47);
    }
LABEL_46:
    *((void *)this + 6) = v25;
    v7 += 3;
    unint64_t v24 = (char *)v25;
  }
  while (v7 != v68);
  unint64_t v7 = v67;
  if (v67) {
LABEL_43:
  }
    operator delete(v7);
}

void sub_23CD12F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::CanonicalizeExpr@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 48) = result[6];
  uint64_t v3 = *result;
  if (result[1] != *result)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v85 = (void **)(a2 + 24);
    int v86 = result;
    while (1)
    {
      uint64_t v8 = result[3];
      if ((*(void *)(v8 + 8 * v5) & 0x8000000000000000) != 0)
      {
        int v12 = *(_DWORD *)(v3 + 4 * v5) ^ 1;
        uint64_t v14 = *(int **)(a2 + 8);
        unint64_t v13 = *(void *)(a2 + 16);
        if ((unint64_t)v14 < v13)
        {
          *uint64_t v14 = v12;
          *(void *)(a2 + 8) = v14 + 1;
          uint64_t v15 = -*(void *)(v8 + 8 * v5);
          unint64_t v16 = *(void *)(a2 + 40);
          if ((unint64_t)v4 >= v16) {
            goto LABEL_72;
          }
LABEL_12:
          *(void *)uint64_t v4 = v15;
          unint64_t v6 = v4 + 8;
          goto LABEL_4;
        }
        unint64_t v26 = *(int **)a2;
        uint64_t v27 = (uint64_t)v14 - *(void *)a2;
        uint64_t v28 = v27 >> 2;
        unint64_t v29 = (v27 >> 2) + 1;
        if (v29 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v13 - (void)v26;
        if (v30 >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          if (v31 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v32 = v31;
          uint64_t v33 = operator new(4 * v31);
          unint64_t v31 = v32;
          unint64_t v34 = (int *)&v33[4 * v28];
          *unint64_t v34 = v12;
          uint64_t v35 = (uint64_t)(v34 + 1);
          if (v14 == v26)
          {
LABEL_70:
            *(void *)a2 = v34;
            *(void *)(a2 + 8) = v35;
            *(void *)(a2 + 16) = &v33[4 * v31];
            if (v26)
            {
              operator delete(v26);
              double result = v86;
              uint64_t v65 = v86[3];
              *(void *)(a2 + 8) = v35;
              uint64_t v15 = -*(void *)(v65 + 8 * v5);
              uint64_t v4 = *(char **)(a2 + 32);
              unint64_t v16 = *(void *)(a2 + 40);
              if ((unint64_t)v4 >= v16) {
                goto LABEL_72;
              }
            }
            else
            {
              double result = v86;
              *(void *)(a2 + 8) = v35;
              uint64_t v15 = -*(void *)(v8 + 8 * v5);
              unint64_t v16 = *(void *)(a2 + 40);
              if ((unint64_t)v4 >= v16)
              {
LABEL_72:
                int v45 = (char *)*v85;
                uint64_t v66 = v4 - (unsigned char *)*v85;
                uint64_t v67 = v66 >> 3;
                unint64_t v68 = (v66 >> 3) + 1;
                if (v68 >> 61) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v69 = v16 - (void)v45;
                if (v69 >> 2 > v68) {
                  unint64_t v68 = v69 >> 2;
                }
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v50 = v68;
                }
                if (v50)
                {
                  if (v50 >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v51 = operator new(8 * v50);
                  unint64_t v52 = &v51[8 * v67];
                  *unint64_t v52 = v15;
                  uint64_t v7 = (uint64_t)(v52 + 1);
                  if (v4 == v45) {
                    goto LABEL_86;
                  }
LABEL_83:
                  unint64_t v70 = v4 - 8 - v45;
                  if (v70 < 0x168)
                  {
                    long long v71 = v4;
                    goto LABEL_85;
                  }
                  if (&v51[v66 - 8 - (v70 & 0xFFFFFFFFFFFFFFF8)] > &v51[v66 - 8])
                  {
                    long long v71 = v4;
                    goto LABEL_85;
                  }
                  if (&v4[-(v70 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
                  {
                    long long v71 = v4;
                    goto LABEL_85;
                  }
                  if ((unint64_t)(v4 - &v51[v66]) < 0x20)
                  {
                    long long v71 = v4;
                    goto LABEL_85;
                  }
                  uint64_t v79 = (v70 >> 3) + 1;
                  uint64_t v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
                  long long v71 = &v4[-v80];
                  unint64_t v52 = (void *)((char *)v52 - v80);
                  uint64_t v81 = &v51[8 * v67 - 16];
                  uint64_t v82 = v4 - 16;
                  uint64_t v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v84 = *(_OWORD *)v82;
                    *(v81 - 1) = *((_OWORD *)v82 - 1);
                    _OWORD *v81 = v84;
                    v81 -= 2;
                    v82 -= 32;
                    v83 -= 4;
                  }
                  while (v83);
                  if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_85:
                      uint64_t v72 = *((void *)v71 - 1);
                      v71 -= 8;
                      *--unint64_t v52 = v72;
                    }
                    while (v71 != v45);
                  }
                }
                else
                {
                  uint64_t v51 = 0;
                  unint64_t v52 = (void *)(8 * v67);
                  *(void *)(8 * v67) = v15;
                  uint64_t v7 = 8 * v67 + 8;
                  if (v4 != v45) {
                    goto LABEL_83;
                  }
                }
LABEL_86:
                *(void *)(a2 + 24) = v52;
                *(void *)(a2 + 32) = v7;
                *(void *)(a2 + 40) = &v51[8 * v50];
                if (v45) {
                  operator delete(v45);
                }
                double result = v86;
                goto LABEL_5;
              }
            }
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v33 = 0;
          unint64_t v34 = (int *)(4 * v28);
          *(_DWORD *)(4 * v28) = v12;
          uint64_t v35 = 4 * v28 + 4;
          if (v14 == v26) {
            goto LABEL_70;
          }
        }
        unint64_t v56 = (char *)(v14 - 1) - (char *)v26;
        if (v56 < 0x2C) {
          goto LABEL_117;
        }
        if ((unint64_t)((char *)v14 - &v33[v27]) < 0x20) {
          goto LABEL_117;
        }
        uint64_t v57 = (v56 >> 2) + 1;
        uint64_t v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v59 = &v14[v58 / 0xFFFFFFFFFFFFFFFCLL];
        unint64_t v34 = (int *)((char *)v34 - v58);
        uint64_t v60 = &v33[4 * v28 - 16];
        unint64_t v61 = v14 - 4;
        uint64_t v62 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v63 = *(_OWORD *)v61;
          *(v60 - 1) = *((_OWORD *)v61 - 1);
          *uint64_t v60 = v63;
          v60 -= 2;
          v61 -= 8;
          v62 -= 8;
        }
        while (v62);
        uint64_t v14 = v59;
        if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_117:
          do
          {
            int v64 = *--v14;
            *--unint64_t v34 = v64;
          }
          while (v14 != v26);
        }
        goto LABEL_70;
      }
      int v10 = *(char **)(a2 + 8);
      unint64_t v9 = *(void *)(a2 + 16);
      if ((unint64_t)v10 >= v9) {
        break;
      }
      *(_DWORD *)int v10 = *(_DWORD *)(v3 + 4 * v5);
      *(void *)(a2 + 8) = v10 + 4;
      unint64_t v11 = *(void *)(a2 + 40);
      if ((unint64_t)v4 >= v11) {
        goto LABEL_44;
      }
LABEL_3:
      *(void *)uint64_t v4 = *(void *)(v8 + 8 * v5);
      unint64_t v6 = v4 + 8;
LABEL_4:
      uint64_t v7 = (uint64_t)v6;
LABEL_5:
      *(void *)(a2 + 32) = v7;
      ++v5;
      uint64_t v3 = *result;
      uint64_t v4 = (char *)v7;
      if (v5 >= (uint64_t)(result[1] - *result) >> 2) {
        return result;
      }
    }
    unint64_t v17 = *(char **)a2;
    uint64_t v18 = (uint64_t)&v10[-*(void *)a2];
    uint64_t v19 = v18 >> 2;
    unint64_t v20 = (v18 >> 2) + 1;
    if (v20 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v9 - (void)v17;
    if (v21 >> 1 > v20) {
      unint64_t v20 = v21 >> 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 62) {
        goto LABEL_108;
      }
      uint64_t v23 = operator new(4 * v22);
      unint64_t v24 = &v23[4 * v19];
      *unint64_t v24 = *(_DWORD *)(v3 + 4 * v5);
      uint64_t v25 = (uint64_t)(v24 + 1);
      if (v10 == v17)
      {
LABEL_40:
        *(void *)a2 = v24;
        *(void *)(a2 + 8) = v25;
        *(void *)(a2 + 16) = &v23[4 * v22];
        if (v17)
        {
          operator delete(v17);
          double result = v86;
          uint64_t v8 = v86[3];
          uint64_t v4 = *(char **)(a2 + 32);
          unint64_t v11 = *(void *)(a2 + 40);
          *(void *)(a2 + 8) = v25;
          if ((unint64_t)v4 >= v11) {
            goto LABEL_44;
          }
        }
        else
        {
          double result = v86;
          *(void *)(a2 + 8) = v25;
          unint64_t v11 = *(void *)(a2 + 40);
          if ((unint64_t)v4 >= v11)
          {
LABEL_44:
            int v45 = (char *)*v85;
            uint64_t v46 = v4 - (unsigned char *)*v85;
            uint64_t v47 = v46 >> 3;
            unint64_t v48 = (v46 >> 3) + 1;
            if (v48 >> 61) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v49 = v11 - (void)v45;
            if (v49 >> 2 > v48) {
              unint64_t v48 = v49 >> 2;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v48;
            }
            if (v50)
            {
              if (v50 >> 61) {
LABEL_108:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              uint64_t v51 = operator new(8 * v50);
              unint64_t v52 = &v51[8 * v47];
              *unint64_t v52 = *(void *)(v8 + 8 * v5);
              uint64_t v7 = (uint64_t)(v52 + 1);
              if (v4 == v45) {
                goto LABEL_86;
              }
            }
            else
            {
              uint64_t v51 = 0;
              unint64_t v52 = (void *)(8 * v47);
              *(void *)(8 * v47) = *(void *)(v8 + 8 * v5);
              uint64_t v7 = 8 * v47 + 8;
              if (v4 == v45) {
                goto LABEL_86;
              }
            }
            unint64_t v53 = v4 - 8 - v45;
            if (v53 >= 0x168)
            {
              if (&v51[v46 - 8 - (v53 & 0xFFFFFFFFFFFFFFF8)] > &v51[v46 - 8])
              {
                uint64_t v54 = v4;
              }
              else if (&v4[-(v53 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
              {
                uint64_t v54 = v4;
              }
              else if ((unint64_t)(v4 - v51 - v46) >= 0x20)
              {
                uint64_t v73 = (v53 >> 3) + 1;
                uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v54 = &v4[-v74];
                unint64_t v52 = (void *)((char *)v52 - v74);
                long long v75 = &v51[8 * v47 - 16];
                int v76 = v4 - 16;
                uint64_t v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v78 = *(_OWORD *)v76;
                  *(v75 - 1) = *((_OWORD *)v76 - 1);
                  *long long v75 = v78;
                  v75 -= 2;
                  v76 -= 32;
                  v77 -= 4;
                }
                while (v77);
                if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_86;
                }
              }
              else
              {
                uint64_t v54 = v4;
              }
            }
            else
            {
              uint64_t v54 = v4;
            }
            do
            {
              uint64_t v55 = *((void *)v54 - 1);
              v54 -= 8;
              *--unint64_t v52 = v55;
            }
            while (v54 != v45);
            goto LABEL_86;
          }
        }
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v24 = (_DWORD *)(4 * v19);
      *(_DWORD *)(4 * v19) = *(_DWORD *)(v3 + 4 * v5);
      uint64_t v25 = 4 * v19 + 4;
      if (v10 == v17) {
        goto LABEL_40;
      }
    }
    unint64_t v36 = v10 - 4 - v17;
    if (v36 < 0x2C) {
      goto LABEL_118;
    }
    if ((unint64_t)(v10 - &v23[v18]) < 0x20) {
      goto LABEL_118;
    }
    uint64_t v37 = (v36 >> 2) + 1;
    uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v39 = &v10[-v38];
    unint64_t v24 = (_DWORD *)((char *)v24 - v38);
    unint64_t v40 = &v23[4 * v19 - 16];
    uint64_t v41 = v10 - 16;
    uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      _OWORD *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 8;
    }
    while (v42);
    int v10 = v39;
    if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_118:
      do
      {
        int v44 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--unint64_t v24 = v44;
      }
      while (v10 != v17);
    }
    goto LABEL_40;
  }
  return result;
}

void sub_23CD135FC(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD13610(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD13624(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD13638(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD1364C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD13660(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinExprLowerBound(uint64_t *a1, uint64_t a2)
{
  uint64_t result = a1[6];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1] - *a1;
  if (v5)
  {
    unint64_t v6 = v5 >> 2;
    uint64_t v7 = a1[3];
    uint64_t v8 = *(void *)(a2 + 40);
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    if (v6 < 2)
    {
      unint64_t v9 = 0;
LABEL_9:
      uint64_t v14 = (_DWORD *)(v4 + 4 * v9);
      unint64_t v15 = v6 - v9;
      unint64_t v16 = (uint64_t *)(v7 + 8 * v9);
      do
      {
        uint64_t v18 = *v16++;
        uint64_t v17 = v18;
        LODWORD(v18) = *v14++;
        result += *(void *)(v8 + 12 * (int)v18) * v17;
        --v15;
      }
      while (v15);
      return result;
    }
    uint64_t v10 = 0;
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = (void *)(v7 + 8);
    int v12 = (int *)(v4 + 4);
    unint64_t v13 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      result += *(void *)(v8 + 12 * *(v12 - 1)) * *(v11 - 1);
      v10 += *(void *)(v8 + 12 * *v12) * *v11;
      v11 += 2;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    result += v10;
    if (v6 != v9) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t operations_research::sat::LinExprUpperBound(uint64_t *a1, uint64_t a2)
{
  uint64_t result = a1[6];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1] - *a1;
  if (v5)
  {
    unint64_t v6 = v5 >> 2;
    uint64_t v7 = a1[3];
    uint64_t v8 = *(void *)(a2 + 40);
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    if (v6 < 2)
    {
      unint64_t v9 = 0;
LABEL_9:
      uint64_t v14 = (_DWORD *)(v4 + 4 * v9);
      unint64_t v15 = v6 - v9;
      unint64_t v16 = (uint64_t *)(v7 + 8 * v9);
      do
      {
        uint64_t v18 = *v16++;
        uint64_t v17 = v18;
        LODWORD(v18) = *v14++;
        result -= *(void *)(v8 + 12 * (int)(v18 ^ 1)) * v17;
        --v15;
      }
      while (v15);
      return result;
    }
    uint64_t v10 = 0;
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = (void *)(v7 + 8);
    int v12 = (_DWORD *)(v4 + 4);
    unint64_t v13 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      result -= *(void *)(v8 + 12 * (*(v12 - 1) ^ 1)) * *(v11 - 1);
      v10 -= *(void *)(v8 + 12 * (*v12 ^ 1)) * *v11;
      v11 += 2;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    result += v10;
    if (v6 != v9) {
      goto LABEL_9;
    }
  }
  return result;
}

void operations_research::sat::NegationOf(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  operations_research::sat::NegationOf((int8x16_t **)a1, (int8x16_t **)&v5);
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  if (a2 != a1) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)(a2 + 24), *(char **)(a1 + 24), *(char **)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  }
  *(void *)(a2 + 48) = -*(void *)(a1 + 48);
}

void sub_23CD1388C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD138A0(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::PositiveVarExpr(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 48) = a1[6];
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v4 = a1;
    long long v5 = 0;
    unint64_t v6 = 0;
    unint64_t v85 = (void **)(a2 + 24);
    while (1)
    {
      int v8 = *(_DWORD *)(v3 + 4 * v6);
      if (v8)
      {
        int v12 = v8 ^ 1;
        uint64_t v14 = *(int **)(a2 + 8);
        unint64_t v13 = *(void *)(a2 + 16);
        if ((unint64_t)v14 < v13)
        {
          *uint64_t v14 = v12;
          uint64_t v15 = (uint64_t)(v14 + 1);
LABEL_66:
          *(void *)(a2 + 8) = v15;
          uint64_t v64 = -*(void *)(v4[3] + 8 * v6);
          unint64_t v65 = *(void *)(a2 + 40);
          if ((unint64_t)v5 >= v65)
          {
            int v44 = (char *)*v85;
            uint64_t v66 = v5 - (unsigned char *)*v85;
            uint64_t v67 = v66 >> 3;
            unint64_t v68 = (v66 >> 3) + 1;
            if (v68 >> 61) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v69 = v65 - (void)v44;
            if (v69 >> 2 > v68) {
              unint64_t v68 = v69 >> 2;
            }
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v68;
            }
            if (v49)
            {
              if (v49 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v50 = operator new(8 * v49);
              uint64_t v51 = &v50[8 * v67];
              *uint64_t v51 = v64;
              uint64_t v7 = (uint64_t)(v51 + 1);
              if (v5 == v44) {
                goto LABEL_81;
              }
LABEL_78:
              unint64_t v70 = v5 - 8 - v44;
              if (v70 < 0x168)
              {
                long long v71 = v5;
                goto LABEL_80;
              }
              if (&v50[v66 - 8 - (v70 & 0xFFFFFFFFFFFFFFF8)] > &v50[v66 - 8])
              {
                long long v71 = v5;
                goto LABEL_80;
              }
              if (&v5[-(v70 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
              {
                long long v71 = v5;
                goto LABEL_80;
              }
              if ((unint64_t)(v5 - &v50[v66]) < 0x20)
              {
                long long v71 = v5;
                goto LABEL_80;
              }
              uint64_t v79 = (v70 >> 3) + 1;
              uint64_t v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
              long long v71 = &v5[-v80];
              uint64_t v51 = (void *)((char *)v51 - v80);
              uint64_t v81 = &v50[8 * v67 - 16];
              uint64_t v82 = v5 - 16;
              uint64_t v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v84 = *(_OWORD *)v82;
                *(v81 - 1) = *((_OWORD *)v82 - 1);
                _OWORD *v81 = v84;
                v81 -= 2;
                v82 -= 32;
                v83 -= 4;
              }
              while (v83);
              if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_80:
                  uint64_t v72 = *((void *)v71 - 1);
                  v71 -= 8;
                  *--uint64_t v51 = v72;
                }
                while (v71 != v44);
              }
            }
            else
            {
              unint64_t v50 = 0;
              uint64_t v51 = (void *)(8 * v67);
              *(void *)(8 * v67) = v64;
              uint64_t v7 = 8 * v67 + 8;
              if (v5 != v44) {
                goto LABEL_78;
              }
            }
            goto LABEL_81;
          }
          *(void *)long long v5 = v64;
          uint64_t v7 = (uint64_t)(v5 + 8);
          goto LABEL_4;
        }
        unint64_t v24 = *(int **)a2;
        uint64_t v25 = (uint64_t)v14 - *(void *)a2;
        uint64_t v26 = v25 >> 2;
        unint64_t v27 = (v25 >> 2) + 1;
        if (v27 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v13 - (void)v24;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          if (v29 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v30 = operator new(4 * v29);
          unint64_t v31 = (int *)&v30[4 * v26];
          *unint64_t v31 = v12;
          uint64_t v15 = (uint64_t)(v31 + 1);
          if (v14 != v24)
          {
LABEL_29:
            unint64_t v32 = (char *)(v14 - 1) - (char *)v24;
            if (v32 < 0x2C)
            {
              uint64_t v4 = a1;
              goto LABEL_63;
            }
            unint64_t v55 = (char *)v14 - &v30[v25];
            uint64_t v4 = a1;
            if (v55 < 0x20) {
              goto LABEL_113;
            }
            uint64_t v56 = (v32 >> 2) + 1;
            uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v58 = &v14[v57 / 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v31 = (int *)((char *)v31 - v57);
            uint64_t v59 = &v30[4 * v26 - 16];
            uint64_t v60 = v14 - 4;
            uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v62 = *(_OWORD *)v60;
              *(v59 - 1) = *((_OWORD *)v60 - 1);
              *uint64_t v59 = v62;
              v59 -= 2;
              v60 -= 8;
              v61 -= 8;
            }
            while (v61);
            uint64_t v14 = v58;
            if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_113:
              do
              {
LABEL_63:
                int v63 = *--v14;
                *--unint64_t v31 = v63;
              }
              while (v14 != v24);
            }
LABEL_64:
            *(void *)a2 = v31;
            *(void *)(a2 + 8) = v15;
            *(void *)(a2 + 16) = &v30[4 * v29];
            if (v24)
            {
              operator delete(v24);
              long long v5 = *(char **)(a2 + 32);
            }
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v30 = 0;
          unint64_t v31 = (int *)(4 * v26);
          *(_DWORD *)(4 * v26) = v12;
          uint64_t v15 = 4 * v26 + 4;
          if (v14 != v24) {
            goto LABEL_29;
          }
        }
        uint64_t v4 = a1;
        goto LABEL_64;
      }
      uint64_t v10 = *(char **)(a2 + 8);
      unint64_t v9 = *(void *)(a2 + 16);
      if ((unint64_t)v10 >= v9) {
        break;
      }
      *(_DWORD *)uint64_t v10 = v8;
      uint64_t v11 = (uint64_t)(v10 + 4);
LABEL_40:
      *(void *)(a2 + 8) = v11;
      uint64_t v42 = v4[3];
      unint64_t v43 = *(void *)(a2 + 40);
      if ((unint64_t)v5 >= v43)
      {
        int v44 = (char *)*v85;
        uint64_t v45 = v5 - (unsigned char *)*v85;
        uint64_t v46 = v45 >> 3;
        unint64_t v47 = (v45 >> 3) + 1;
        if (v47 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v48 = v43 - (void)v44;
        if (v48 >> 2 > v47) {
          unint64_t v47 = v48 >> 2;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          if (v49 >> 61) {
LABEL_104:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unint64_t v50 = operator new(8 * v49);
          uint64_t v51 = &v50[8 * v46];
          *uint64_t v51 = *(void *)(v42 + 8 * v6);
          uint64_t v7 = (uint64_t)(v51 + 1);
          if (v5 != v44) {
            goto LABEL_51;
          }
        }
        else
        {
          unint64_t v50 = 0;
          uint64_t v51 = (void *)(8 * v46);
          *(void *)(8 * v46) = *(void *)(v42 + 8 * v6);
          uint64_t v7 = 8 * v46 + 8;
          if (v5 != v44)
          {
LABEL_51:
            unint64_t v52 = v5 - 8 - v44;
            uint64_t v4 = a1;
            if (v52 >= 0x168)
            {
              if (&v50[v45 - 8 - (v52 & 0xFFFFFFFFFFFFFFF8)] > &v50[v45 - 8])
              {
                unint64_t v53 = v5;
              }
              else if (&v5[-(v52 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
              {
                unint64_t v53 = v5;
              }
              else if ((unint64_t)(v5 - v50 - v45) >= 0x20)
              {
                uint64_t v73 = (v52 >> 3) + 1;
                uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v53 = &v5[-v74];
                uint64_t v51 = (void *)((char *)v51 - v74);
                long long v75 = &v50[8 * v46 - 16];
                int v76 = v5 - 16;
                uint64_t v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v78 = *(_OWORD *)v76;
                  *(v75 - 1) = *((_OWORD *)v76 - 1);
                  *long long v75 = v78;
                  v75 -= 2;
                  v76 -= 32;
                  v77 -= 4;
                }
                while (v77);
                if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_81;
                }
              }
              else
              {
                unint64_t v53 = v5;
              }
            }
            else
            {
              unint64_t v53 = v5;
            }
            do
            {
              uint64_t v54 = *((void *)v53 - 1);
              v53 -= 8;
              *--uint64_t v51 = v54;
            }
            while (v53 != v44);
LABEL_81:
            *(void *)(a2 + 24) = v51;
            *(void *)(a2 + 32) = v7;
            *(void *)(a2 + 40) = &v50[8 * v49];
            if (v44) {
              operator delete(v44);
            }
            goto LABEL_4;
          }
        }
        uint64_t v4 = a1;
        goto LABEL_81;
      }
      *(void *)long long v5 = *(void *)(v42 + 8 * v6);
      uint64_t v7 = (uint64_t)(v5 + 8);
      uint64_t v4 = a1;
LABEL_4:
      *(void *)(a2 + 32) = v7;
      ++v6;
      uint64_t v3 = *v4;
      long long v5 = (char *)v7;
      if (v6 >= (v4[1] - *v4) >> 2) {
        return;
      }
    }
    unint64_t v16 = *(int **)a2;
    uint64_t v17 = (uint64_t)&v10[-*(void *)a2];
    uint64_t v18 = v17 >> 2;
    unint64_t v19 = (v17 >> 2) + 1;
    if (v19 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v9 - (void)v16;
    if (v20 >> 1 > v19) {
      unint64_t v19 = v20 >> 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 62) {
        goto LABEL_104;
      }
      unint64_t v22 = operator new(4 * v21);
      uint64_t v4 = a1;
      uint64_t v23 = &v22[4 * v18];
      *uint64_t v23 = *(_DWORD *)(v3 + 4 * v6);
      uint64_t v11 = (uint64_t)(v23 + 1);
      if (v10 == (char *)v16) {
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v22 = 0;
      uint64_t v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v18) = v8;
      uint64_t v11 = 4 * v18 + 4;
      if (v10 == (char *)v16)
      {
LABEL_38:
        *(void *)a2 = v23;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v22[4 * v21];
        if (v16)
        {
          operator delete(v16);
          long long v5 = *(char **)(a2 + 32);
        }
        goto LABEL_40;
      }
    }
    unint64_t v33 = v10 - 4 - (char *)v16;
    if (v33 < 0x2C) {
      goto LABEL_114;
    }
    if ((unint64_t)(v10 - &v22[v17]) < 0x20) {
      goto LABEL_114;
    }
    uint64_t v34 = (v33 >> 2) + 1;
    uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v36 = &v10[-v35];
    uint64_t v23 = (_DWORD *)((char *)v23 - v35);
    uint64_t v37 = &v22[4 * v18 - 16];
    uint64_t v38 = v10 - 16;
    uint64_t v39 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *uint64_t v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 8;
    }
    while (v39);
    uint64_t v10 = v36;
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_114:
      do
      {
        int v41 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--uint64_t v23 = v41;
      }
      while (v10 != (char *)v16);
    }
    goto LABEL_38;
  }
}

void sub_23CD13F18(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD13F2C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD13F40(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD13F54(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD13F68(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CD13F7C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::GetCoefficient(int a1, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = v2 - *a2;
  if (v2 == *a2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v3 >> 2;
  if ((unint64_t)(v3 >> 2) <= 1) {
    uint64_t v5 = 1;
  }
  while (1)
  {
    int v6 = *(_DWORD *)(*a2 + 4 * v4);
    if (v6 == a1) {
      return *(void *)(a2[3] + 8 * v4);
    }
    if (v6 == (a1 ^ 1)) {
      break;
    }
    if (v5 == ++v4) {
      return 0;
    }
  }
  return -*(void *)(a2[3] + 8 * v4);
}

uint64_t operations_research::sat::GetCoefficientOfPositiveVar(int a1, void *a2)
{
  if (a1)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint.cc", 343);
    uint64_t v7 = (void *)google::LogMessage::stream((google::LogMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: VariableIsPositive(var) ", 38);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
  }
  uint64_t v2 = a2[1];
  uint64_t v3 = v2 - *a2;
  if (v2 == *a2) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = v3 >> 2;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  while (*(_DWORD *)(*a2 + 4 * v4) != a1)
  {
    if (v5 == ++v4) {
      return 0;
    }
  }
  return *(void *)(a2[3] + 8 * v4);
}

void sub_23CD14094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  unint64_t v65 = a2 - 3;
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v25 = *(a2 - 3);
          int v26 = *(_DWORD *)v10;
          if (v25 >= *(_DWORD *)v10)
          {
            if (v26 < v25) {
              return result;
            }
            uint64_t v28 = *((void *)a2 - 1);
            uint64_t v27 = *(void *)(v10 + 4);
            if (v28 >= v27) {
              return result;
            }
          }
          else
          {
            uint64_t v27 = *(void *)(v10 + 4);
            uint64_t v28 = *((void *)a2 - 1);
          }
          *(_DWORD *)uint64_t v10 = v25;
          *(a2 - 3) = v26;
          *(void *)(v10 + 4) = v28;
          *((void *)a2 - 1) = v27;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v10, (int *)(v10 + 12), v65);
        case 4uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v10, (int *)(v10 + 12), (int *)(v10 + 24));
          int v29 = *(a2 - 3);
          int v30 = *(_DWORD *)(v10 + 24);
          if (v29 >= v30)
          {
            if (v30 < v29) {
              return result;
            }
            uint64_t v32 = *((void *)a2 - 1);
            uint64_t v31 = *(void *)(v10 + 28);
            if (v32 >= v31) {
              return result;
            }
          }
          else
          {
            uint64_t v31 = *(void *)(v10 + 28);
            uint64_t v32 = *((void *)a2 - 1);
          }
          *(_DWORD *)(v10 + 24) = v29;
          *(a2 - 3) = v30;
          *(void *)(v10 + 28) = v32;
          *((void *)a2 - 1) = v31;
          int v33 = *(_DWORD *)(v10 + 24);
          int v34 = *(_DWORD *)(v10 + 12);
          if (v33 >= v34)
          {
            if (v34 < v33) {
              return result;
            }
            uint64_t v36 = *(void *)(v10 + 28);
            uint64_t v35 = *(void *)(v10 + 16);
            if (v36 >= v35) {
              return result;
            }
          }
          else
          {
            uint64_t v35 = *(void *)(v10 + 16);
            uint64_t v36 = *(void *)(v10 + 28);
          }
          *(_DWORD *)(v10 + 12) = v33;
          *(_DWORD *)(v10 + 24) = v34;
          *(void *)(v10 + 16) = v36;
          *(void *)(v10 + 28) = v35;
          int v37 = *(_DWORD *)v10;
          if (v33 >= *(_DWORD *)v10)
          {
            if (v37 < v33) {
              return result;
            }
            uint64_t v38 = *(void *)(v10 + 4);
            if (v36 >= v38) {
              return result;
            }
          }
          else
          {
            uint64_t v38 = *(void *)(v10 + 4);
          }
          *(_DWORD *)uint64_t v10 = v33;
          *(_DWORD *)(v10 + 12) = v37;
          *(void *)(v10 + 4) = v36;
          *(void *)(v10 + 16) = v38;
          return result;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v10, v10 + 12, v10 + 24, v10 + 36, v65);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 287) {
      break;
    }
    if (v12 == 1)
    {
      if ((int *)v10 != a2)
      {
        unint64_t v54 = (v15 - 2) >> 1;
        unint64_t v55 = v54 + 1;
        uint64_t v56 = (int *)(v10 + 12 * v54);
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v10, a3, v15, v56);
          v56 -= 3;
          --v55;
        }
        while (v55);
        unint64_t v57 = v14 / 0xCuLL;
        do
        {
          uint64_t result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v10, (uint64_t)a2, a3, v57);
          a2 -= 3;
        }
        while (v57-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (int *)(v10 + 12 * (v15 >> 1));
    if ((unint64_t)v14 < 0x601)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v17, (int *)v10, v65);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v10, v17, v65);
      uint64_t v18 = v10 + 12 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v10 + 12), (int *)(v18 - 12), a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v10 + 24), (int *)(v10 + 12 + 12 * v16), a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v18 - 12), v17, (int *)(v10 + 12 + 12 * v16));
      int v19 = *(_DWORD *)v10;
      *(_DWORD *)uint64_t v10 = *v17;
      *uint64_t v17 = v19;
      uint64_t v20 = *(void *)(v10 + 4);
      *(void *)(v10 + 4) = *(void *)(v18 + 4);
      *(void *)(v18 + 4) = v20;
      if (a5) {
        goto LABEL_15;
      }
    }
    int v21 = *(_DWORD *)(v10 - 12);
    if (v21 >= *(_DWORD *)v10 && (*(_DWORD *)v10 < v21 || *(void *)(v10 - 8) >= *(void *)(v10 + 4)))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>((int *)v10, a2);
      unint64_t v11 = result;
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>((int *)v10, (unint64_t)a2);
    if ((v23 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v10, v22);
    unint64_t v11 = v22 + 12;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v22 + 12, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (int *)v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_18:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v10, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 12;
      goto LABEL_20;
    }
  }
  uint64_t v39 = (int *)(v10 + 12);
  BOOL v41 = (int *)v10 == a2 || v39 == a2;
  if (a5)
  {
    if (v41) {
      return result;
    }
    uint64_t v42 = 0;
    uint64_t v43 = v10;
LABEL_50:
    uint64_t v44 = v43;
    uint64_t v43 = (uint64_t)v39;
    int v45 = *(_DWORD *)(v44 + 12);
    int v46 = *(_DWORD *)v44;
    if (v45 >= *(_DWORD *)v44)
    {
      if (v46 < v45) {
        goto LABEL_49;
      }
      uint64_t v47 = *(void *)(v44 + 16);
      uint64_t v48 = *(void *)(v44 + 4);
      if (v47 >= v48) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v47 = *(void *)(v44 + 16);
      uint64_t v48 = *(void *)(v44 + 4);
    }
    *(_DWORD *)(v44 + 12) = v46;
    *(void *)(v43 + 4) = v48;
    uint64_t v49 = v10;
    if (v44 == v10) {
      goto LABEL_48;
    }
    uint64_t v50 = v42;
    while (1)
    {
      int v53 = *(_DWORD *)(v10 + v50 - 12);
      if (v45 >= v53)
      {
        if (v53 < v45)
        {
          uint64_t v49 = v10 + v50;
          goto LABEL_48;
        }
        uint64_t v51 = *(void *)(v10 + v50 - 8);
        if (v47 >= v51)
        {
          uint64_t v49 = v44;
LABEL_48:
          *(_DWORD *)uint64_t v49 = v45;
          *(void *)(v49 + 4) = v47;
LABEL_49:
          uint64_t v39 = (int *)(v43 + 12);
          v42 += 12;
          if ((int *)(v43 + 12) == a2) {
            return result;
          }
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v51 = *(void *)(v10 + v50 - 8);
      }
      v44 -= 12;
      uint64_t v52 = v10 + v50;
      *(_DWORD *)uint64_t v52 = v53;
      *(void *)(v52 + 4) = v51;
      v50 -= 12;
      if (!v50)
      {
        uint64_t v49 = v10;
        goto LABEL_48;
      }
    }
  }
  if (!v41)
  {
    for (uint64_t i = v10 + 4; ; i += 12)
    {
      uint64_t v60 = v10;
      uint64_t v10 = (uint64_t)v39;
      int v61 = *(_DWORD *)(v60 + 12);
      int v62 = *(_DWORD *)v60;
      if (v61 < *(_DWORD *)v60) {
        break;
      }
      if (v62 >= v61)
      {
        uint64_t v63 = *(void *)(v60 + 16);
        if (v63 < *(void *)(v60 + 4)) {
          goto LABEL_84;
        }
      }
LABEL_79:
      uint64_t v39 = (int *)(v10 + 12);
      if ((int *)(v10 + 12) == a2) {
        return result;
      }
    }
    uint64_t v63 = *(void *)(v60 + 16);
LABEL_84:
    for (uint64_t j = i; ; j -= 12)
    {
      *(_DWORD *)(j + 8) = v62;
      *(void *)(j + 12) = *(void *)j;
      int v62 = *(_DWORD *)(j - 16);
      if (v61 >= v62 && (v62 < v61 || v63 >= *(void *)(j - 12))) {
        break;
      }
    }
    *(_DWORD *)(j - 4) = v61;
    *(void *)uint64_t j = v63;
    goto LABEL_79;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v19 = *(_DWORD *)(a2 - 12);
      int v20 = *(_DWORD *)a1;
      if (v19 < *(_DWORD *)a1)
      {
        uint64_t v21 = *(void *)(a1 + 4);
        uint64_t v22 = *(void *)(a2 - 8);
LABEL_24:
        *(_DWORD *)a1 = v19;
        *(_DWORD *)(a2 - 12) = v20;
        *(void *)(a1 + 4) = v22;
        *(void *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        uint64_t v22 = *(void *)(a2 - 8);
        uint64_t v21 = *(void *)(a1 + 4);
        if (v22 < v21) {
          goto LABEL_24;
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      int v23 = *(_DWORD *)(a2 - 12);
      int v24 = *(_DWORD *)(a1 + 24);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        uint64_t v26 = *(void *)(a2 - 8);
        uint64_t v25 = *(void *)(a1 + 28);
        if (v26 >= v25) {
          return 1;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(a1 + 28);
        uint64_t v26 = *(void *)(a2 - 8);
      }
      *(_DWORD *)(a1 + 24) = v23;
      *(_DWORD *)(a2 - 12) = v24;
      *(void *)(a1 + 28) = v26;
      *(void *)(a2 - 8) = v25;
      int v27 = *(_DWORD *)(a1 + 24);
      int v28 = *(_DWORD *)(a1 + 12);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        uint64_t v30 = *(void *)(a1 + 28);
        uint64_t v29 = *(void *)(a1 + 16);
        if (v30 >= v29) {
          return 1;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(a1 + 16);
        uint64_t v30 = *(void *)(a1 + 28);
      }
      *(_DWORD *)(a1 + 12) = v27;
      *(_DWORD *)(a1 + 24) = v28;
      *(void *)(a1 + 16) = v30;
      *(void *)(a1 + 28) = v29;
      int v31 = *(_DWORD *)a1;
      if (v27 < *(_DWORD *)a1)
      {
        uint64_t v32 = *(void *)(a1 + 4);
LABEL_46:
        *(_DWORD *)a1 = v27;
        *(_DWORD *)(a1 + 12) = v31;
        *(void *)(a1 + 4) = v30;
        BOOL result = 1;
        *(void *)(a1 + 16) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        uint64_t v32 = *(void *)(a1 + 4);
        if (v30 < v32) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(a1, a1 + 12, a1 + 24, a1 + 36, (int *)(a2 - 12));
      return 1;
    default:
      uint64_t v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      uint64_t v7 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        int v11 = *(_DWORD *)v7;
        int v12 = *(_DWORD *)v6;
        if (*(_DWORD *)v7 >= *(_DWORD *)v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          uint64_t v13 = *(void *)(v7 + 4);
          uint64_t v14 = *(void *)(v6 + 4);
          if (v13 >= v14) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v13 = *(void *)(v7 + 4);
          uint64_t v14 = *(void *)(v6 + 4);
        }
        *(_DWORD *)uint64_t v7 = v12;
        *(void *)(v7 + 4) = v14;
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          uint64_t v17 = a1 + v15;
          int v18 = *(_DWORD *)(a1 + v15 + 12);
          if (v11 < v18)
          {
            uint64_t v16 = *(void *)(v17 + 16);
LABEL_13:
            v6 -= 12;
            *(_DWORD *)(v17 + 24) = v18;
            *(void *)(a1 + v15 + 28) = v16;
            v15 -= 12;
            if (v15 == -24)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          uint64_t v16 = *(void *)(a1 + v15 + 16);
          if (v13 >= v16)
          {
            uint64_t v10 = a1 + v15 + 24;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *(_DWORD *)uint64_t v10 = v11;
        *(void *)(v10 + 4) = v13;
        if (++v9 == 8) {
          return v7 + 12 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 12;
        v7 += 12;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

void operations_research::sat::LinearConstraintManager::~LinearConstraintManager(operations_research::sat::LinearConstraintManager *this)
{
  if (*((uint64_t *)this + 16) >= 1
    && *_MergedGlobals_13[0] >= 2
    && (_MergedGlobals_13[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_13, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 47);
    uint64_t v2 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"num_merged_constraints: ", 24);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*((uint64_t *)this + 17) >= 1
    && *off_26AED0018[0] >= 2
    && (off_26AED0018[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AED0018, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 50);
    uint64_t v3 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_shortened_constraints: ", 27);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*((uint64_t *)this + 18) >= 1
    && *off_26AED0020[0] >= 2
    && (off_26AED0020[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AED0020, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 53);
    uint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"num_splitted_constraints: ", 26);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*((uint64_t *)this + 19) >= 1
    && *off_26AED0028[0] >= 2
    && (off_26AED0028[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AED0028, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 56);
    char v5 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_coeff_strenghtening: ", 25);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*(unsigned char *)(*(void *)this + 99))
  {
    if (*((uint64_t *)this + 20) >= 1)
    {
      google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 59);
      uint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Total cuts added: ", 18);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v26);
      uint64_t v7 = (operations_research::sat::LinearConstraintManager *)*((void *)this + 21);
      if (v7 != (operations_research::sat::LinearConstraintManager *)((char *)this + 176))
      {
        do
        {
          google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 61);
          uint64_t v8 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Added ", 6);
          int v9 = (void *)std::ostream::operator<<();
          uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" cuts of type '", 15);
          int v11 = *((char *)v7 + 55);
          if (v11 >= 0) {
            uint64_t v12 = (uint64_t)v7 + 32;
          }
          else {
            uint64_t v12 = *((void *)v7 + 4);
          }
          if (v11 >= 0) {
            uint64_t v13 = *((unsigned __int8 *)v7 + 55);
          }
          else {
            uint64_t v13 = *((void *)v7 + 5);
          }
          uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"'.", 2);
          google::LogMessage::~LogMessage((google::LogMessage *)v26);
          uint64_t v15 = (operations_research::sat::LinearConstraintManager *)*((void *)v7 + 1);
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = *(operations_research::sat::LinearConstraintManager **)v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (operations_research::sat::LinearConstraintManager *)*((void *)v7 + 2);
              BOOL v17 = *(void *)v16 == (void)v7;
              uint64_t v7 = v16;
            }
            while (!v17);
          }
          uint64_t v7 = v16;
        }
        while (v16 != (operations_research::sat::LinearConstraintManager *)((char *)this + 176));
      }
    }
  }
  int v18 = (void *)*((void *)this + 26);
  if (v18)
  {
    *((void *)this + 27) = v18;
    operator delete(v18);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)this + 168, *((char **)this + 22));
  if (*((void *)this + 13))
  {
    operator delete(*((void **)this + 10));
    *((void *)this + 15) = 0;
    *((void *)this + 10) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    *((void *)this + 13) = 0;
  }
  int v19 = (void *)*((void *)this + 14);
  if (v19) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v19);
  }
  int v20 = (void *)*((void *)this + 7);
  if (v20)
  {
    *((void *)this + 8) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *((void *)this + 4);
  if (v21)
  {
    uint64_t v22 = *((void *)this + 5);
    int v23 = (void *)*((void *)this + 4);
    if (v22 != v21)
    {
      do
      {
        int v24 = *(void **)(v22 - 88);
        if (v24)
        {
          *(void *)(v22 - 80) = v24;
          operator delete(v24);
        }
        uint64_t v25 = *(void **)(v22 - 112);
        if (v25)
        {
          *(void *)(v22 - 104) = v25;
          operator delete(v25);
        }
        v22 -= 128;
      }
      while (v22 != v21);
      int v23 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v21;
    operator delete(v23);
  }
}

void operations_research::sat::LinearConstraintManager::RescaleActiveCounts(operations_research::sat::LinearConstraintManager *this, double a2)
{
  uint64_t v2 = *((void *)this + 4);
  unint64_t v3 = *((void *)this + 5) - v2;
  if ((int)(v3 >> 7) >= 1)
  {
    unint64_t v4 = (v3 >> 7);
    if (v4 < 2)
    {
      unint64_t v5 = 0;
LABEL_7:
      uint64_t v10 = (double *)(v2 + (v5 << 7) + 112);
      unint64_t v11 = v5 - v4;
      do
      {
        *uint64_t v10 = *v10 * a2;
        v10 += 16;
      }
      while (!__CFADD__(v11++, 1));
      goto LABEL_10;
    }
    uint64_t v6 = (v3 >> 7) & 1;
    unint64_t v5 = v4 - v6;
    uint64_t v7 = (double *)(v2 + 240);
    unint64_t v8 = v4 - v6;
    do
    {
      double v9 = *v7 * a2;
      *(v7 - 16) = *(v7 - 16) * a2;
      *uint64_t v7 = v9;
      v7 += 32;
      v8 -= 2;
    }
    while (v8);
    if (v6) {
      goto LABEL_7;
    }
  }
LABEL_10:
  *((double *)this + 31) = *((double *)this + 31) * a2;
  if (*operations_research::sat::LinearConstraintManager::RescaleActiveCounts(double)::vlocal__ > 1
    && (operations_research::sat::LinearConstraintManager::RescaleActiveCounts(double)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearConstraintManager::RescaleActiveCounts(double)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 72);
    uint64_t v13 = (void *)google::LogMessage::stream((google::LogMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Rescaled active counts by ", 26);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v14);
  }
}

void sub_23CD14FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(char **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(void *)a2 == v3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64) - v5;
  unint64_t v7 = v6 >> 2;
  int v8 = v3 - v2 - (v6 >> 2);
  if ((int)(v6 >> 2) < 1)
  {
    int v9 = 0;
    uint64_t v20 = 0;
    BOOL v21 = v7 == 0;
    goto LABEL_12;
  }
  int v9 = 0;
  uint64_t v10 = ((unint64_t)v6 >> 2);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(int **)(a1 + 56);
  int v13 = v8;
  do
  {
    while (1)
    {
      int v15 = *v12++;
      int v14 = v15;
      char v16 = v2[v13];
      uint64_t v17 = v15;
      int v18 = (void *)(v11 + ((uint64_t)v15 << 7) + 72);
      if (v16)
      {
        *int v18 = 0;
        break;
      }
      uint64_t v19 = (*v18)++;
      if (v19 < *(int *)(*(void *)a1 + 456)) {
        break;
      }
      *(unsigned char *)(v11 + (v17 << 7) + 89) = 0;
      ++v13;
      if (!--v10) {
        goto LABEL_9;
      }
    }
    *(_DWORD *)(v5 + 4 * v9) = v14;
    v2[v9++ + (uint64_t)v8] = v16;
    ++v13;
    --v10;
  }
  while (v10);
LABEL_9:
  uint64_t v20 = v9;
  BOOL v21 = v9 >= v7;
  if (v9 > v7)
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 56), v9 - v7);
    goto LABEL_14;
  }
LABEL_12:
  if (!v21) {
    *(void *)(a1 + 64) = v5 + 4 * v20;
  }
LABEL_14:
  unint64_t v22 = v20 + v8;
  int v23 = *(char **)a2;
  int v24 = *(char **)(a2 + 8);
  unint64_t v25 = (unint64_t)&v24[-*(void *)a2];
  size_t v26 = v22 - v25;
  if (v22 > v25)
  {
    uint64_t v27 = *(void *)(a2 + 16);
    if (v27 - (uint64_t)v24 >= v26)
    {
      bzero(*(void **)(a2 + 8), v22 - v25);
      *(void *)(a2 + 8) = &v24[v26];
      goto LABEL_44;
    }
    if ((v22 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v28 = v27 - (void)v23;
    uint64_t v29 = 2 * v28;
    if (2 * v28 <= v22) {
      uint64_t v29 = v22;
    }
    if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v30 = v29;
    }
    int v31 = operator new(v30);
    uint64_t v32 = &v31[v30];
    uint64_t v48 = &v31[v22];
    int v33 = &v31[v25];
    bzero(&v31[v25], v26);
    if (v24 == v23)
    {
      v31 += v25;
      goto LABEL_42;
    }
    if (v25 >= 8 && (unint64_t)(v23 - v31) >= 0x20)
    {
      if (v25 >= 0x20)
      {
        unint64_t v34 = v25 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v35 = v24 - 16;
        uint64_t v36 = &v31[v24 - 16 - v23];
        unint64_t v37 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v38 = *(_OWORD *)v35;
          *(v36 - 1) = *((_OWORD *)v35 - 1);
          *uint64_t v36 = v38;
          v36 -= 2;
          v35 -= 32;
          v37 -= 32;
        }
        while (v37);
        if (v25 == v34) {
          goto LABEL_42;
        }
        if ((v25 & 0x18) != 0) {
          goto LABEL_35;
        }
        v33 -= v34;
        v24 -= v34;
      }
      else
      {
        unint64_t v34 = 0;
LABEL_35:
        v33 -= v25 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v39 = &v24[-v34 - 8];
        int64_t v40 = v39 - v23;
        unint64_t v41 = v34 - (v25 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v42 = *(void *)v39;
          v39 -= 8;
          *(void *)&v31[v40] = v42;
          v40 -= 8;
          v41 += 8;
        }
        while (v41);
        v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
        if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_42:
          *(void *)a2 = v31;
          *(void *)(a2 + 8) = v48;
          *(void *)(a2 + 16) = v32;
          if (v23) {
            operator delete(v23);
          }
          goto LABEL_44;
        }
      }
    }
    uint64_t v43 = v33 - 1;
    do
    {
      char v44 = *--v24;
      *v43-- = v44;
    }
    while (v24 != v23);
    goto LABEL_42;
  }
  if (v22 < v25) {
    *(void *)(a2 + 8) = &v23[v22];
  }
LABEL_44:
  if ((int)v7 - v9 < 1) {
    return 0;
  }
  if (*operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints(operations_research::glop::BasisState *)::vlocal__ > 1
    && (operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints(operations_research::glop::BasisState *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints(operations_research::glop::BasisState *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v49, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 114);
    int v45 = (void *)google::LogMessage::stream((google::LogMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Removed ", 8);
    int v46 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" constraints", 12);
    google::LogMessage::~LogMessage((google::LogMessage *)v49);
  }
  return 1;
}

void sub_23CD15328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::LinearConstraintManager::Add(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v3 = a2 + 2;
  if (a2[2] == a2[3])
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v68, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 124);
    unint64_t v65 = (void *)google::LogMessage::stream((google::LogMessage *)&v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: !ct.vars.empty() ", 31);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v68);
  }
  operations_research::sat::LinearConstraintManager::SimplifyConstraint((operations_research::sat::LinearConstraintManager *)a1, (operations_research::sat::LinearConstraint *)a2);
  operations_research::sat::DivideByGCD(a2, v7);
  operations_research::sat::CanonicalizeConstraint((operations_research::sat *)a2, v8);
  uint64_t v12 = 0;
  unint64_t v13 = *(void *)(a1 + 80);
  unint64_t v67 = v10;
  unint64_t v14 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v10)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v10));
  unint64_t v15 = v14 >> 7;
  unint64_t v16 = (v14 >> 7) ^ (v13 >> 12);
  uint64_t v17 = *(void *)(a1 + 104);
  uint64_t v18 = 0x101010101010101 * (v14 & 0x7F);
  uint64_t v19 = *(void *)(a1 + 88);
  for (unint64_t i = v16; ; unint64_t i = v12 + v21)
  {
    unint64_t v21 = i & v17;
    uint64_t v22 = *(void *)(v13 + v21);
    unint64_t v23 = ((v22 ^ v18) - 0x101010101010101) & ~(v22 ^ v18) & 0x8080808080808080;
    if (v23) {
      break;
    }
LABEL_6:
    if ((v22 & (~v22 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_37;
    }
    v12 += 8;
  }
  while (1)
  {
    unint64_t v24 = (v21 + (__clz(__rbit64(v23)) >> 3)) & v17;
    if (*(void *)(v19 + 16 * v24) == v10) {
      break;
    }
    v23 &= v23 - 1;
    if (!v23) {
      goto LABEL_6;
    }
  }
  if (v24 != v17)
  {
    for (j = 0; ; unint64_t v16 = j + v26)
    {
      unint64_t v26 = v16 & v17;
      uint64_t v27 = *(void *)(v13 + v26);
      unint64_t v28 = ((v27 ^ v18) - 0x101010101010101) & ~(v27 ^ v18) & 0x8080808080808080;
      if (v28) {
        break;
      }
LABEL_13:
      if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v29 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert((uint64_t *)(a1 + 80), v14);
        uint64_t v19 = *(void *)(a1 + 88);
        uint64_t v30 = v19 + 16 * v29;
        *(void *)uint64_t v30 = v67;
        *(_DWORD *)(v30 + 8) = 0;
        goto LABEL_16;
      }
      j += 8;
    }
    while (1)
    {
      unint64_t v29 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v17;
      if (*(void *)(v19 + 16 * v29) == v67) {
        break;
      }
      v28 &= v28 - 1;
      if (!v28) {
        goto LABEL_13;
      }
    }
LABEL_16:
    unint64_t v31 = *(unsigned int *)(v19 + 16 * v29 + 8);
    uint64_t v32 = *(void *)(a1 + 32);
    int v33 = (void *)(v32 + ((uint64_t)(int)v31 << 7));
    uint64_t v35 = (char *)v33[2];
    unint64_t v34 = (char *)v33[3];
    uint64_t v36 = (_DWORD *)a2[2];
    if (v34 - v35 == a2[3] - (void)v36)
    {
      if (v35 == v34)
      {
LABEL_20:
        long long v38 = (char *)v33[5];
        unint64_t v37 = (char *)v33[6];
        uint64_t v39 = (void *)a2[5];
        if (v37 - v38 == a2[6] - (void)v39)
        {
          if (v38 == v37)
          {
LABEL_24:
            if (a3) {
              *a3 = 0;
            }
            uint64_t v40 = *a2;
            if (*a2 > *v33)
            {
              if (*(unsigned char *)(v32 + ((uint64_t)(int)v31 << 7) + 89)) {
                *(unsigned char *)(a1 + 16) = 1;
              }
              *int v33 = v40;
              if (a3) {
                *a3 = 1;
              }
            }
            uint64_t v41 = a2[1];
            if (v41 < v33[1])
            {
              if (*(unsigned char *)(v32 + ((uint64_t)(int)v31 << 7) + 89)) {
                *(unsigned char *)(a1 + 16) = 1;
              }
              v33[1] = v41;
              if (a3) {
                *a3 = 1;
              }
            }
            ++*(void *)(a1 + 128);
            return v31;
          }
          while (*(void *)v38 == *v39)
          {
            v38 += 8;
            ++v39;
            if (v38 == v37) {
              goto LABEL_24;
            }
          }
        }
      }
      else
      {
        while (*(_DWORD *)v35 == *v36)
        {
          v35 += 4;
          ++v36;
          if (v35 == v34) {
            goto LABEL_20;
          }
        }
      }
    }
  }
LABEL_37:
  unint64_t v66 = v14;
  if (a3) {
    *a3 = 1;
  }
  uint64_t v42 = *(void *)(a1 + 32);
  uint64_t v43 = *(void *)(a1 + 40);
  memset((char *)v75 + 8, 0, 17);
  *((void *)&v73 + 1) = 0;
  *(void *)&long long v74 = 0;
  WORD4(v74) = 0;
  uint64_t v44 = a2[4];
  long long v45 = *((_OWORD *)a2 + 1);
  long long v68 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v69 = v45;
  uint64_t v70 = v44;
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = 0;
  uint64_t v46 = a2[7];
  *(_OWORD *)long long __p = *(_OWORD *)(a2 + 5);
  uint64_t v72 = v46;
  *(void *)&long long v73 = 0;
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  double v47 = operations_research::sat::ComputeL2Norm((operations_research::sat *)&v68, v11);
  uint64_t v48 = 0;
  unint64_t v31 = (unint64_t)(v43 - v42) >> 7;
  *(double *)&long long v73 = v47;
  *(void *)&v75[0] = v67;
  unint64_t v49 = *(void *)(a1 + 80);
  unint64_t v50 = v15 ^ (v49 >> 12);
  uint64_t v51 = *(void *)(a1 + 104);
  while (1)
  {
    unint64_t v52 = v50 & v51;
    uint64_t v53 = *(void *)(v49 + v52);
    unint64_t v54 = ((v53 ^ v18) - 0x101010101010101) & ~(v53 ^ v18) & 0x8080808080808080;
    if (v54) {
      break;
    }
LABEL_44:
    if ((v53 & (~v53 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v56 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert((uint64_t *)(a1 + 80), v66);
      uint64_t v55 = *(void *)(a1 + 88);
      uint64_t v57 = v55 + 16 * v56;
      *(void *)uint64_t v57 = v67;
      *(_DWORD *)(v57 + 8) = 0;
      goto LABEL_47;
    }
    v48 += 8;
    unint64_t v50 = v48 + v52;
  }
  uint64_t v55 = *(void *)(a1 + 88);
  while (1)
  {
    unint64_t v56 = (v52 + (__clz(__rbit64(v54)) >> 3)) & v51;
    if (*(void *)(v55 + 16 * v56) == v67) {
      break;
    }
    v54 &= v54 - 1;
    if (!v54) {
      goto LABEL_44;
    }
  }
LABEL_47:
  *(_DWORD *)(v55 + 16 * v56 + 8) = v31;
  *(void *)&v75[1] = *(void *)(a1 + 248);
  unint64_t v58 = *(void *)(a1 + 40);
  if (v58 >= *(void *)(a1 + 48))
  {
    int v62 = std::vector<operations_research::sat::LinearConstraintManager::ConstraintInfo>::__push_back_slow_path<operations_research::sat::LinearConstraintManager::ConstraintInfo>((void **)(a1 + 32), (uint64_t)&v68);
    uint64_t v63 = __p[0];
    *(void *)(a1 + 40) = v62;
    if (v63)
    {
      __p[1] = v63;
      operator delete(v63);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v58 = v68;
    *(void *)(v58 + 16) = 0;
    *(void *)(v58 + 24) = 0;
    *(void *)(v58 + 32) = 0;
    *(void *)(v58 + 40) = 0;
    *(_OWORD *)(v58 + 16) = *(_OWORD *)v69;
    *(void *)(v58 + 32) = v70;
    v69[0] = 0;
    v69[1] = 0;
    uint64_t v70 = 0;
    *(void *)(v58 + 48) = 0;
    *(void *)(v58 + 56) = 0;
    *(_OWORD *)(v58 + 40) = *(_OWORD *)__p;
    *(void *)(v58 + 56) = v72;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v72 = 0;
    long long v59 = v73;
    long long v60 = v74;
    long long v61 = v75[0];
    *(_OWORD *)(v58 + 105) = *(_OWORD *)((char *)v75 + 9);
    *(_OWORD *)(v58 + 80) = v60;
    *(_OWORD *)(v58 + 96) = v61;
    *(_OWORD *)(v58 + 64) = v59;
    *(void *)(a1 + 40) = v58 + 128;
  }
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  return v31;
}

void sub_23CD1583C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_23CD15850(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::LinearConstraintManager::SimplifyConstraint(operations_research::sat::LinearConstraintManager *this, operations_research::sat::LinearConstraint *a2)
{
  uint64_t v5 = (int *)*((void *)a2 + 2);
  unint64_t v4 = (std::vector<int> *)((char *)a2 + 16);
  uint64_t v6 = *((void *)a2 + 3) - (void)v5;
  unint64_t v7 = v6 >> 2;
  if ((int)(v6 >> 2) < 1)
  {
    uint64_t result = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v38 = *(void *)a2;
    if (*(uint64_t *)a2 <= 0) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = (uint64_t *)*((void *)a2 + 5);
  uint64_t v13 = *(void *)(*((void *)this + 1) + 144);
  uint64_t v14 = ((unint64_t)v6 >> 2);
  uint64_t v15 = v14;
  unint64_t v16 = (int *)*((void *)a2 + 2);
  do
  {
    int v18 = *v16++;
    int v17 = v18;
    uint64_t v20 = *v12++;
    uint64_t v19 = v20;
    uint64_t v21 = *(void *)(v13 + 20 * v17);
    uint64_t v22 = *(void *)(v13 + 20 * (v17 ^ 1));
    if (v21 + v22)
    {
      uint64_t v23 = -v22;
      ++v8;
      if (v19 >= 0) {
        uint64_t v24 = v19;
      }
      else {
        uint64_t v24 = -v19;
      }
      if (v11 <= v24) {
        uint64_t v11 = v24;
      }
      if (v19 < 1)
      {
        v9 += v19 * v23;
        v10 += v21 * v19;
      }
      else
      {
        v9 += v21 * v19;
        v10 += v19 * v23;
      }
    }
    --v15;
  }
  while (v15);
  if (v8 >= (int)v7)
  {
    uint64_t result = 0;
    uint64_t v38 = *(void *)a2;
    if (v9 >= *(void *)a2) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
  int v25 = 0;
  ++*((void *)this + 17);
  unint64_t v26 = (uint64_t *)*((void *)a2 + 5);
  uint64_t v27 = *(void *)(*((void *)this + 1) + 144);
  unint64_t v28 = v26;
  unint64_t v29 = v5;
  do
  {
    int v31 = *v29++;
    int v30 = v31;
    uint64_t v33 = *v28++;
    uint64_t v32 = v33;
    uint64_t v34 = *(void *)(v27 + 20 * v30);
    if (v34 + *(void *)(v27 + 20 * (v30 ^ 1)))
    {
      v5[v25] = v30;
      v26[v25++] = v32;
      goto LABEL_15;
    }
    uint64_t v35 = v34 * v32;
    if (*(void *)a2 > (int64_t)0x8000000000000002)
    {
      *(void *)a2 -= v35;
      uint64_t v36 = *((void *)a2 + 1);
      if (v36 > 0x7FFFFFFFFFFFFFFDLL) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v36 = *((void *)a2 + 1);
      if (v36 > 0x7FFFFFFFFFFFFFFDLL) {
        goto LABEL_15;
      }
    }
    *((void *)a2 + 1) = v36 - v35;
LABEL_15:
    --v14;
  }
  while (v14);
  unint64_t v39 = v25;
  if (v25 <= v7)
  {
    if (v25 < v7) {
      *((void *)a2 + 3) = &v5[v25];
    }
  }
  else
  {
    std::vector<int>::__append(v4, v25 - v7);
  }
  uint64_t v40 = *((void *)a2 + 5);
  unint64_t v41 = (*((void *)a2 + 6) - v40) >> 3;
  if (v39 <= v41)
  {
    if (v39 < v41) {
      *((void *)a2 + 6) = v40 + 8 * v39;
    }
    uint64_t result = 1;
    uint64_t v38 = *(void *)a2;
    if (v9 < *(void *)a2) {
      goto LABEL_38;
    }
LABEL_33:
    *(void *)a2 = 0x8000000000000002;
    uint64_t v42 = (void *)((char *)a2 + 8);
    uint64_t v43 = *((void *)a2 + 1);
    if (v10 <= v43)
    {
      void *v42 = 0x7FFFFFFFFFFFFFFELL;
LABEL_51:
      *((void *)a2 + 3) = *((void *)a2 + 2);
      *((void *)a2 + 6) = *((void *)a2 + 5);
      return 1;
    }
LABEL_40:
    if (v43 == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_51;
    }
    if (v11 <= v10 - v43) {
      goto LABEL_58;
    }
    ++*((void *)this + 19);
    uint64_t v44 = (int *)*((void *)a2 + 2);
    unint64_t v45 = *((void *)a2 + 3) - (void)v44;
    if ((int)(v45 >> 2) < 1)
    {
LABEL_57:
      uint64_t result = 1;
      goto LABEL_58;
    }
    uint64_t v46 = v10 - *((void *)a2 + 1);
    double v47 = (uint64_t *)*((void *)a2 + 5);
    uint64_t v48 = *((void *)a2 + 1) - v10;
    uint64_t v49 = (v45 >> 2);
    while (1)
    {
      uint64_t v51 = *v47;
      uint64_t v52 = *v47 - v46;
      if (*v47 > v46)
      {
        uint64_t v50 = *(void *)(*(void *)(*((void *)this + 1) + 144) + 20 * (*v44 ^ 1));
        uint64_t *v47 = v46;
      }
      else
      {
        uint64_t v52 = v48 - v51;
        if (v48 <= v51) {
          goto LABEL_46;
        }
        uint64_t v50 = *(void *)(*(void *)(*((void *)this + 1) + 144) + 20 * *v44);
        uint64_t *v47 = v48;
      }
      *v42 += v50 * v52;
LABEL_46:
      ++v47;
      ++v44;
      if (!--v49) {
        goto LABEL_57;
      }
    }
  }
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)a2 + 40, v39 - v41);
  uint64_t result = 1;
  uint64_t v38 = *(void *)a2;
  if (v9 >= *(void *)a2) {
    goto LABEL_33;
  }
LABEL_38:
  uint64_t v42 = (void *)((char *)a2 + 8);
  uint64_t v43 = *((void *)a2 + 1);
  if (v10 <= v43)
  {
    void *v42 = 0x7FFFFFFFFFFFFFFELL;
    if (v38 != 0x8000000000000002) {
      goto LABEL_59;
    }
    goto LABEL_51;
  }
  if (v38 == 0x8000000000000002) {
    goto LABEL_40;
  }
  if (v43 == 0x7FFFFFFFFFFFFFFELL) {
    goto LABEL_59;
  }
  if (v11 > v10 - v43) {
    ++*((void *)this + 18);
  }
LABEL_58:
  uint64_t v38 = *(void *)a2;
  if (*(void *)a2 != 0x8000000000000002)
  {
LABEL_59:
    if (v11 > v38 - v9)
    {
      if (*v42 == 0x7FFFFFFFFFFFFFFELL)
      {
        ++*((void *)this + 19);
        uint64_t v53 = (int *)*((void *)a2 + 2);
        unint64_t v54 = *((void *)a2 + 3) - (void)v53;
        if ((int)(v54 >> 2) >= 1)
        {
          uint64_t v55 = *(void *)a2 - v9;
          unint64_t v56 = (uint64_t *)*((void *)a2 + 5);
          uint64_t v57 = v9 - *(void *)a2;
          for (uint64_t i = (v54 >> 2); i; --i)
          {
            uint64_t v61 = *v56;
            uint64_t v62 = v55 - *v56;
            if (v55 < *v56)
            {
              uint64_t v59 = *(void *)(*(void *)(*((void *)this + 1) + 144) + 20 * *v53);
              uint64_t *v56 = v55;
              uint64_t v60 = v59 * v62;
            }
            else
            {
              if (v61 >= v57) {
                goto LABEL_65;
              }
              uint64_t v63 = *(void *)(*(void *)(*((void *)this + 1) + 144) + 20 * (*v53 ^ 1));
              uint64_t *v56 = v57;
              uint64_t v60 = v63 * (v61 + v55);
            }
            *(void *)a2 += v60;
LABEL_65:
            ++v56;
            ++v53;
          }
        }
        return 1;
      }
      else
      {
        ++*((void *)this + 18);
      }
    }
  }
  return result;
}

uint64_t operations_research::sat::LinearConstraintManager::DebugCheckConstraint(operations_research::sat::LinearConstraintManager *this, const operations_research::sat::LinearConstraint *a2)
{
  uint64_t v2 = *((void *)this + 30);
  uint64_t v5 = *(void **)(v2 + 32);
  uint64_t v3 = (void *)(v2 + 32);
  unint64_t v4 = v5;
  if (!v5) {
    return 1;
  }
  uint64_t v6 = v3;
  unint64_t v7 = v4;
  do
  {
    unint64_t v8 = v7[4];
    BOOL v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d;
    if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v7 + 1;
    }
    if (v9) {
      uint64_t v6 = v7;
    }
    unint64_t v7 = (void *)*v10;
  }
  while (*v10);
  if (v6 == v3
    || v6[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d
    || !v6[5])
  {
    return 1;
  }
  do
  {
    unint64_t v11 = v4[4];
    BOOL v12 = v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d;
    if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d) {
      uint64_t v13 = v4;
    }
    else {
      uint64_t v13 = v4 + 1;
    }
    if (v12) {
      uint64_t v3 = v4;
    }
    unint64_t v4 = (void *)*v13;
  }
  while (*v13);
  uint64_t v14 = (uint64_t *)v3[5];
  uint64_t v15 = *v14;
  if (*v14 == v14[1]) {
    return 1;
  }
  uint64_t v16 = *((void *)a2 + 2);
  uint64_t v17 = *((void *)a2 + 3) - v16;
  if (v17)
  {
    unint64_t v18 = v17 >> 2;
    uint64_t v19 = *((void *)a2 + 5);
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    if (v18 >= 2)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v24 = (int *)(v16 + 4);
      int v25 = (void *)(v19 + 8);
      unint64_t v26 = v18 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v22 += *(void *)(v15 + 8 * *(v24 - 1)) * *(v25 - 1);
        v23 += *(void *)(v15 + 8 * *v24) * *v25;
        v24 += 2;
        v25 += 2;
        v26 -= 2;
      }
      while (v26);
      uint64_t v21 = v23 + v22;
      if (v18 == v20) {
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v27 = (uint64_t *)(v19 + 8 * v20);
    unint64_t v28 = v18 - v20;
    unint64_t v29 = (int *)(v16 + 4 * v20);
    do
    {
      uint64_t v31 = *v29++;
      uint64_t v30 = v31;
      uint64_t v32 = *v27++;
      v21 += *(void *)(v15 + 8 * v30) * v32;
      --v28;
    }
    while (v28);
  }
  else
  {
    uint64_t v21 = 0;
  }
LABEL_32:
  if (v21 > *((void *)a2 + 1) || v21 < *(void *)a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v39, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 690);
    uint64_t v34 = (void *)google::LogMessage::stream((google::LogMessage *)v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"activity ", 9);
    uint64_t v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" not in [", 9);
    uint64_t v36 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)",", 1);
    unint64_t v37 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"]", 1);
    google::LogMessage::~LogMessage((google::LogMessage *)v39);
    return 0;
  }
  return 1;
}

void sub_23CD15ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t operations_research::sat::anonymous namespace'::ComputeHashOfTerms(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::LinearConstraint *a2)
{
  uint64_t v2 = (int *)*((void *)this + 2);
  unint64_t v3 = *((void *)this + 3) - (void)v2;
  if ((int)(v3 >> 2) < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t result = 0;
  unint64_t v7 = (uint64_t *)*((void *)this + 5);
  uint64_t v8 = (v3 >> 2);
  do
  {
    uint64_t v9 = *v2++;
    unint64_t v10 = (v5 + 0x1F73E299748A907ELL + v9) ^ (result >> 43);
    unint64_t v11 = (v5 - 0x1F73E299748A907ELL - v10) ^ (v10 << 9);
    unint64_t v12 = (result - (v10 + v11)) ^ (v11 >> 8);
    unint64_t v13 = (v10 - (v11 + v12)) ^ (v12 >> 38);
    unint64_t v14 = (v11 - (v12 + v13)) ^ (v13 << 23);
    unint64_t v15 = (v12 - (v13 + v14)) ^ (v14 >> 5);
    unint64_t v16 = (v13 - (v14 + v15)) ^ (v15 >> 35);
    unint64_t v17 = (v14 - (v15 + v16)) ^ (v16 << 49);
    unint64_t v18 = (v15 - (v16 + v17)) ^ (v17 >> 11);
    unint64_t v19 = (v16 - (v17 + v18)) ^ (v18 >> 12);
    unint64_t v20 = (v17 - (v18 + v19)) ^ (v19 << 18);
    unint64_t v21 = v18 - (v19 + v20);
    unint64_t v22 = v21 ^ (v20 >> 22);
    uint64_t v23 = *v7++;
    uint64_t v24 = (v23 + 0x1F73E299748A907ELL - v22) ^ (v21 >> 43);
    unint64_t v25 = (0xE08C1D668B756F82 - (v22 + v24)) ^ (v24 << 9);
    unint64_t v26 = (v22 - (v24 + v25)) ^ (v25 >> 8);
    unint64_t v27 = (v24 - (v25 + v26)) ^ (v26 >> 38);
    unint64_t v28 = (v25 - (v26 + v27)) ^ (v27 << 23);
    unint64_t v29 = (v26 - (v27 + v28)) ^ (v28 >> 5);
    unint64_t v30 = (v27 - (v28 + v29)) ^ (v29 >> 35);
    unint64_t v31 = (v28 - (v29 + v30)) ^ (v30 << 49);
    unint64_t v32 = (v29 - (v30 + v31)) ^ (v31 >> 11);
    unint64_t v33 = (v30 - (v31 + v32)) ^ (v32 >> 12);
    unint64_t result = (v32 - (v33 + ((v31 - (v32 + v33)) ^ (v33 << 18)))) ^ (((v31 - (v32 + v33)) ^ (v33 << 18)) >> 22);
    uint64_t v5 = -(uint64_t)result;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t operations_research::sat::LinearConstraintManager::ComputeObjectiveParallelism(uint64_t result, int a2)
{
  if (!*(unsigned char *)(result + 192))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v29, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 167);
    unint64_t v28 = (void *)google::LogMessage::stream((google::LogMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: objective_is_defined_ ", 36);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v29);
  }
  if (!*(unsigned char *)(result + 193))
  {
    uint64_t v5 = *(double **)(result + 208);
    unint64_t v4 = *(double **)(result + 216);
    if (v5 == v4)
    {
      double v7 = 0.0;
      goto LABEL_13;
    }
    unint64_t v6 = (char *)v4 - (char *)v5 - 8;
    if (v6 >= 8)
    {
      uint64_t v9 = (v6 >> 3) + 1;
      uint64_t v8 = &v5[v9 & 0x3FFFFFFFFFFFFFFELL];
      unint64_t v10 = v5 + 1;
      double v7 = 0.0;
      uint64_t v11 = v9 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        double v7 = v7 + *(v10 - 1) * *(v10 - 1) + *v10 * *v10;
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        double v13 = sqrt(v7);
        *(double *)(result + 200) = v13;
        *(unsigned char *)(result + 193) = 1;
        unint64_t v3 = (double *)(result + 200);
        v29[0] = 0;
        if (v13 <= 0.0) {
          goto LABEL_29;
        }
        goto LABEL_14;
      }
    }
    else
    {
      double v7 = 0.0;
      uint64_t v8 = *(double **)(result + 208);
    }
    do
    {
      double v12 = *v8++;
      double v7 = v7 + v12 * v12;
    }
    while (v8 != v4);
    goto LABEL_13;
  }
  double v2 = *(double *)(result + 200);
  unint64_t v3 = (double *)(result + 200);
  v29[0] = 0;
  if (v2 <= 0.0) {
LABEL_29:
  }
    google::MakeCheckOpString<double,double>((int)v3, (int)v29, "objective_l2_norm_ > 0.0");
LABEL_14:
  uint64_t v14 = *(void *)(result + 32);
  uint64_t v15 = v14 + ((uint64_t)a2 << 7);
  *(unsigned char *)(v15 + 88) = 1;
  double v16 = *(double *)(v15 + 64);
  double v17 = 0.0;
  if (v16 != 0.0)
  {
    uint64_t v18 = *(void *)(v15 + 16);
    uint64_t v19 = *(void *)(v15 + 24);
    uint64_t v20 = v19 - v18;
    if (v19 != v18)
    {
      uint64_t v21 = 0;
      unint64_t v22 = v20 >> 2;
      uint64_t v23 = *(void *)(result + 208);
      unint64_t v24 = (unint64_t)(*(void *)(result + 216) - v23) >> 3;
      if (v22 <= 1) {
        unint64_t v22 = 1;
      }
      unint64_t result = 0x7FFFFFFFFFFFFFFDLL;
      do
      {
        uint64_t v25 = *(int *)(v18 + 4 * v21);
        if ((int)v25 < (int)v24)
        {
          uint64_t v26 = *(void *)(*(void *)(v15 + 40) + 8 * v21);
          double v27 = (double)v26;
          if (v26 < (uint64_t)0x8000000000000003) {
            double v27 = -INFINITY;
          }
          if (v26 > 0x7FFFFFFFFFFFFFFDLL) {
            double v27 = INFINITY;
          }
          double v17 = v17 + v27 * *(double *)(v23 + 8 * v25);
        }
        ++v21;
      }
      while (v22 != v21);
    }
    double v17 = fabs(v17 / (v16 * *v3));
  }
  *(double *)(v14 + ((uint64_t)a2 << 7) + 80) = v17;
  return result;
}

void sub_23CD162A8(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD162B0(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::LinearConstraintManager::AddCut(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a2 + 1;
  if (*((void *)a2 + 2) == *((void *)a2 + 3)) {
    return 0;
  }
  double v11 = operations_research::sat::ComputeActivity(a2, a4);
  uint64_t v13 = *(void *)a2;
  uint64_t v12 = *((void *)a2 + 1);
  double v14 = (double)v12;
  double v15 = -INFINITY;
  if (v12 < (uint64_t)0x8000000000000003) {
    double v14 = -INFINITY;
  }
  if (v12 > 0x7FFFFFFFFFFFFFFDLL) {
    double v14 = INFINITY;
  }
  double v16 = v11 - v14;
  if (v13 >= (uint64_t)0x8000000000000003) {
    double v15 = (double)v13;
  }
  if (v13 > 0x7FFFFFFFFFFFFFFDLL) {
    double v15 = INFINITY;
  }
  double v17 = v15 - v11;
  double v18 = v16 >= v17 ? v16 : v17;
  if (v18 / operations_research::sat::ComputeL2Norm((operations_research::sat *)a2, v10) < 0.00001) {
    return 0;
  }
  char v47 = 0;
  long long v20 = a2[1];
  long long v42 = *a2;
  *(_OWORD *)uint64_t v43 = v20;
  uint64_t v44 = *((void *)a2 + 4);
  v5[1] = 0;
  v5[2] = 0;
  *uint64_t v5 = 0;
  *(_OWORD *)long long __p = *(long long *)((char *)a2 + 40);
  uint64_t v46 = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  int v21 = operations_research::sat::LinearConstraintManager::Add(a1, &v42, &v47);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  BOOL v19 = v47 != 0;
  if (v47)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + ((uint64_t)v21 << 7) + 120) = 1;
    if (*operations_research::sat::LinearConstraintManager::AddCut(operations_research::sat::LinearConstraint,std::string,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,std::string)::vlocal__ >= 1
      && (operations_research::sat::LinearConstraintManager::AddCut(operations_research::sat::LinearConstraint,std::string,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,std::string)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::LinearConstraintManager::AddCut(operations_research::sat::LinearConstraint,std::string,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,std::string)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 229);
      unint64_t v22 = (void *)google::LogMessage::stream((google::LogMessage *)v41);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Cut '", 5);
      int v24 = *(char *)(a3 + 23);
      if (v24 >= 0) {
        uint64_t v25 = a3;
      }
      else {
        uint64_t v25 = *(void *)a3;
      }
      if (v24 >= 0) {
        uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v26 = *(void *)(a3 + 8);
      }
      double v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"'", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" size=", 6);
      unint64_t v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" max_magnitude=", 15);
      operations_research::sat::ComputeInfinityNorm((operations_research::sat *)(*(void *)(a1 + 32) + ((uint64_t)v21 << 7)), v30);
      unint64_t v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" norm=", 6);
      unint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" violation=", 11);
      unint64_t v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" eff=", 5);
      uint64_t v34 = (void *)std::ostream::operator<<();
      uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" ", 1);
      int v36 = *(char *)(a5 + 23);
      if (v36 >= 0) {
        uint64_t v37 = a5;
      }
      else {
        uint64_t v37 = *(void *)a5;
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(a5 + 23);
      }
      else {
        uint64_t v38 = *(void *)(a5 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
      google::LogMessage::~LogMessage((google::LogMessage *)v41);
    }
    ++*(void *)(a1 + 160);
    ++*(_DWORD *)(a1 + 256);
    v41[0] = (long long *)a3;
    unint64_t v39 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 168), (const void **)a3, (uint64_t)&std::piecewise_construct, v41);
    ++*((_DWORD *)v39 + 14);
  }
  return v19;
}

void sub_23CD165EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_23CD16600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(operations_research::sat::LinearConstraintManager *this)
{
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  long long v84 = 0;
  uint64_t v1 = *((void *)this + 4);
  int v76 = (uint64_t *)((char *)this + 32);
  uint64_t v2 = *((void *)this + 5);
  if ((int)((unint64_t)(v2 - v1) >> 7) < 1) {
    return;
  }
  unint64_t v3 = this;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  double v7 = 0;
  uint64_t v8 = (uint64_t)v83;
  do
  {
    uint64_t v9 = v1 + (v5 << 7);
    if (*(unsigned char *)(v9 + 120) && !*(unsigned char *)(v9 + 89))
    {
      unint64_t v10 = (void *)(v1 + (v5 << 7) + 112);
      if (v4 < v6)
      {
        *(void *)unint64_t v4 = *v10;
        v4 += 8;
        uint64_t v8 = (uint64_t)v4;
        goto LABEL_4;
      }
      uint64_t v11 = (v4 - v7) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
      {
        uint64_t v83 = (char *)v8;
        long long v84 = v6;
        uint64_t v82 = v7;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      long long v74 = v6;
      if ((v6 - v7) >> 2 > v12) {
        unint64_t v12 = (v6 - v7) >> 2;
      }
      if ((unint64_t)(v6 - v7) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 61)
        {
          uint64_t v83 = (char *)v8;
          long long v84 = v74;
          uint64_t v82 = v7;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        double v14 = operator new(8 * v13);
        double v15 = &v14[8 * v11];
        *(void *)double v15 = *v10;
        uint64_t v8 = (uint64_t)(v15 + 8);
        if (v4 != v7)
        {
LABEL_17:
          unint64_t v16 = v4 - 8 - v7;
          if (v16 < 0x168
            || &v14[v4 - v7 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[v4 - v7 - 8]
            || &v4[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8
            || (unint64_t)(v7 - v14) < 0x20)
          {
            double v17 = v4;
            unint64_t v3 = this;
          }
          else
          {
            uint64_t v20 = (v16 >> 3) + 1;
            uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
            double v17 = &v4[-v21];
            v15 -= v21;
            unint64_t v22 = &v14[8 * v11 - 16];
            uint64_t v23 = v4 - 16;
            uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
            unint64_t v3 = this;
            do
            {
              long long v25 = *(_OWORD *)v23;
              *(v22 - 1) = *((_OWORD *)v23 - 1);
              *unint64_t v22 = v25;
              v22 -= 2;
              v23 -= 32;
              v24 -= 4;
            }
            while (v24);
            if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_20:
              unint64_t v6 = &v14[8 * v13];
              if (v7)
              {
LABEL_21:
                BOOL v19 = (char *)v8;
                operator delete(v7);
                uint64_t v8 = (uint64_t)v19;
                uint64_t v1 = *((void *)v3 + 4);
                uint64_t v2 = *((void *)v3 + 5);
                unint64_t v4 = v19;
LABEL_25:
                double v7 = v15;
                goto LABEL_4;
              }
LABEL_24:
              unint64_t v4 = (char *)v8;
              goto LABEL_25;
            }
          }
          do
          {
            uint64_t v18 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v17 != v7);
          goto LABEL_20;
        }
      }
      else
      {
        double v14 = 0;
        double v15 = (char *)(8 * v11);
        *(void *)(8 * v11) = *v10;
        uint64_t v8 = 8 * v11 + 8;
        if (v4 != v7) {
          goto LABEL_17;
        }
      }
      unint64_t v3 = this;
      unint64_t v6 = &v14[8 * v13];
      if (v7) {
        goto LABEL_21;
      }
      goto LABEL_24;
    }
LABEL_4:
    ++v5;
  }
  while (v5 < (int)((unint64_t)(v2 - v1) >> 7));
  uint64_t v83 = (char *)v8;
  long long v84 = v6;
  uint64_t v82 = v7;
  if (v7 == v4) {
    goto LABEL_94;
  }
  std::__sort<std::__less<double,double> &,double *>();
  unint64_t v26 = *(int *)(*(void *)v3 + 564);
  if (v26 >= (v83 - v82) >> 3)
  {
    double v27 = INFINITY;
    unint64_t v28 = *((void *)v3 + 13);
    if (v28 < 0x80) {
      goto LABEL_36;
    }
    goto LABEL_41;
  }
  double v27 = *(double *)&v82[8 * v26];
  unint64_t v28 = *((void *)v3 + 13);
  if (v28 >= 0x80)
  {
LABEL_41:
    operator delete(*((void **)v3 + 10));
    unint64_t v28 = 0;
    *((void *)v3 + 15) = 0;
    *((void *)v3 + 10) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)v3 + 11) = 0;
    *((void *)v3 + 12) = 0;
    *((void *)v3 + 13) = 0;
    goto LABEL_42;
  }
LABEL_36:
  if (v28)
  {
    *((void *)v3 + 12) = 0;
    memset(*((void **)v3 + 10), 128, v28 + 8);
    *(unsigned char *)(*((void *)v3 + 10) + *((void *)v3 + 13)) = -1;
    unint64_t v28 = *((void *)v3 + 13);
    uint64_t v29 = v28 - (v28 >> 3);
    if (v28 == 7) {
      uint64_t v29 = 6;
    }
    *((void *)v3 + 15) = v29 - *((void *)v3 + 12);
  }
LABEL_42:
  unint64_t v30 = (unint64_t *)*((void *)v3 + 14);
  if (v30)
  {
    v30[1] = 0;
    *unint64_t v30 = v28;
    v30[4] = 0;
    void v30[2] = 0;
    uint64_t v32 = *((void *)v3 + 4);
    uint64_t v31 = *((void *)v3 + 5);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v79 = 0;
    unint64_t v33 = v31 - v32;
    uint64_t v34 = (v31 - v32) >> 7;
    if (v31 == v32) {
      goto LABEL_71;
    }
LABEL_44:
    if ((v33 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v35 = (char *)operator new(v33 >> 5);
    uint64_t v79 = v35;
    uint64_t v81 = &v35[4 * v34];
    bzero(v35, v33 >> 5);
    uint64_t v80 = &v35[v33 >> 5];
    if ((int)(v33 >> 7) >= 1) {
      goto LABEL_46;
    }
LABEL_72:
    int v75 = 0;
    uint64_t v38 = this;
    uint64_t v65 = 0;
    BOOL v66 = v34 == 0;
  }
  else
  {
    uint64_t v32 = *((void *)v3 + 4);
    uint64_t v31 = *((void *)v3 + 5);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v79 = 0;
    unint64_t v33 = v31 - v32;
    uint64_t v34 = (v31 - v32) >> 7;
    if (v31 != v32) {
      goto LABEL_44;
    }
LABEL_71:
    uint64_t v35 = 0;
    if ((int)(v33 >> 7) < 1) {
      goto LABEL_72;
    }
LABEL_46:
    uint64_t v36 = 0;
    int v75 = 0;
    int v37 = 0;
    uint64_t v38 = this;
    do
    {
      while (1)
      {
        uint64_t v48 = v32 + (v36 << 7);
        if (!*(unsigned char *)(v48 + 120)
          || *(unsigned char *)(v48 + 89)
          || *(double *)(v32 + (v36 << 7) + 112) > v27
          || v75 >= *(_DWORD *)(*(void *)v38 + 564))
        {
          break;
        }
        ++v75;
        ++v36;
        uint64_t v47 = v31 - v32;
        if (v36 >= (int)((unint64_t)(v31 - v32) >> 7)) {
          goto LABEL_68;
        }
      }
      if (v36 != v37)
      {
        uint64_t v49 = v32 + ((uint64_t)v37 << 7);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v48;
        uint64_t v50 = *(void **)(v49 + 16);
        if (v50)
        {
          *(void *)(v49 + 24) = v50;
          operator delete(v50);
          *(void *)(v49 + 16) = 0;
          *(void *)(v49 + 24) = 0;
          *(void *)(v49 + 32) = 0;
        }
        uint64_t v51 = *(void **)(v49 + 40);
        *(_OWORD *)(v49 + 16) = *(_OWORD *)(v48 + 16);
        *(void *)(v49 + 32) = *(void *)(v48 + 32);
        *(void *)(v48 + 16) = 0;
        *(void *)(v48 + 24) = 0;
        *(void *)(v48 + 32) = 0;
        if (v51)
        {
          *(void *)(v49 + 48) = v51;
          operator delete(v51);
          *(void *)(v49 + 40) = 0;
          *(void *)(v49 + 48) = 0;
          *(void *)(v49 + 56) = 0;
        }
        *(_OWORD *)(v49 + 40) = *(_OWORD *)(v48 + 40);
        *(void *)(v49 + 56) = *(void *)(v48 + 56);
        *(void *)(v48 + 40) = 0;
        *(void *)(v48 + 48) = 0;
        *(void *)(v48 + 56) = 0;
        uint64_t v52 = (_OWORD *)(v32 + ((uint64_t)v37 << 7));
        uint64_t v53 = (_OWORD *)(v32 + (v36 << 7));
        long long v55 = v53[5];
        long long v54 = v53[6];
        long long v56 = v53[4];
        *(_OWORD *)((char *)v52 + 105) = *(_OWORD *)((char *)v53 + 105);
        v52[5] = v55;
        v52[6] = v54;
        v52[4] = v56;
        uint64_t v38 = this;
        uint64_t v32 = *v76;
      }
      uint64_t v44 = 0;
      *(_DWORD *)&v35[4 * v36] = v37;
      uint64_t v57 = v32 + ((uint64_t)v37 << 7);
      uint64_t v60 = *(void *)(v57 + 96);
      uint64_t v59 = (void *)(v57 + 96);
      uint64_t v58 = v60;
      unint64_t v61 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v60)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v60));
      unint64_t v62 = *((void *)v38 + 10);
      unint64_t v45 = (v61 >> 7) ^ (v62 >> 12);
      uint64_t v63 = *((void *)v38 + 13);
      while (1)
      {
        unint64_t v39 = v45 & v63;
        uint64_t v40 = *(void *)(v62 + (v45 & v63));
        unint64_t v41 = ((v40 ^ (0x101010101010101 * (v61 & 0x7F))) - 0x101010101010101) & ~(v40 ^ (0x101010101010101
                                                                                            * (v61 & 0x7F))) & 0x8080808080808080;
        if (v41) {
          break;
        }
LABEL_51:
        if ((v40 & (~v40 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v43 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert((uint64_t *)this + 10, v61);
          uint64_t v42 = *((void *)v38 + 11);
          uint64_t v46 = v42 + 16 * v43;
          *(void *)uint64_t v46 = *v59;
          *(_DWORD *)(v46 + 8) = 0;
          uint64_t v32 = *((void *)v38 + 4);
          goto LABEL_54;
        }
        v44 += 8;
        unint64_t v45 = v44 + v39;
      }
      uint64_t v42 = *((void *)v38 + 11);
      while (1)
      {
        unint64_t v43 = (v39 + (__clz(__rbit64(v41)) >> 3)) & v63;
        if (*(void *)(v42 + 16 * v43) == v58) {
          break;
        }
        v41 &= v41 - 1;
        if (!v41) {
          goto LABEL_51;
        }
      }
LABEL_54:
      *(_DWORD *)(v42 + 16 * v43 + 8) = v37++;
      uint64_t v31 = *((void *)v38 + 5);
      ++v36;
      uint64_t v47 = v31 - v32;
    }
    while (v36 < (int)((unint64_t)(v31 - v32) >> 7));
LABEL_68:
    unint64_t v64 = v47 >> 7;
    uint64_t v65 = v37;
    BOOL v66 = v37 >= v64;
    if (v37 > v64)
    {
      std::vector<operations_research::sat::LinearConstraintManager::ConstraintInfo>::__append((uint64_t)v76, v37 - v64);
      goto LABEL_82;
    }
  }
  if (!v66)
  {
    uint64_t v67 = v32 + (v65 << 7);
    while (v31 != v67)
    {
      long long v68 = *(void **)(v31 - 88);
      if (v68)
      {
        *(void *)(v31 - 80) = v68;
        operator delete(v68);
      }
      uint64_t v69 = *(void **)(v31 - 112);
      if (v69)
      {
        *(void *)(v31 - 104) = v69;
        operator delete(v69);
      }
      v31 -= 128;
    }
    *((void *)this + 5) = v67;
    uint64_t v38 = this;
  }
LABEL_82:
  uint64_t v70 = (int *)*((void *)v38 + 7);
  uint64_t v71 = *((void *)v38 + 8) - (void)v70;
  if (v71)
  {
    unint64_t v72 = v71 >> 2;
    if (v72 <= 1) {
      unint64_t v72 = 1;
    }
    do
    {
      *uint64_t v70 = *(_DWORD *)&v35[4 * *v70];
      ++v70;
      --v72;
    }
    while (v72);
  }
  if (v75 > 0
    && *operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(void)::vlocal__ >= 1
    && (operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v78, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 292);
    long long v73 = (void *)google::LogMessage::stream((google::LogMessage *)v78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Constraint manager cleanup: #deleted:", 37);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v78);
  }
  *((_DWORD *)v38 + 64) -= v75;
  if (v35) {
    operator delete(v35);
  }
  unint64_t v4 = v82;
LABEL_94:
  if (v4)
  {
    uint64_t v83 = v4;
    operator delete(v4);
  }
}

void sub_23CD16D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20)
{
  if (v20) {
    operator delete(v20);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearConstraintManager::SetObjectiveCoefficient(uint64_t a1, int a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v4 = (uint64_t *)(a1 + 208);
    uint64_t v3 = *(void *)(a1 + 208);
    *(unsigned char *)(a1 + 192) = 1;
    if (a2) {
      uint64_t v5 = -a3;
    }
    else {
      uint64_t v5 = a3;
    }
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (*(void *)(a1 + 216) - v3) >> 3;
    if (v7 <= v6)
    {
      unint64_t v8 = a2 | 1;
      uint64_t v10 = 0;
      if (v8 <= v7)
      {
        if (v8 < v7) {
          *(void *)(a1 + 216) = v3 + 8 * v8;
        }
      }
      else
      {
        std::vector<double>::__append(a1 + 208, v8 - v7, &v10);
        uint64_t v3 = *v4;
      }
    }
    double v9 = (double)v5;
    if (v5 < (uint64_t)0x8000000000000003) {
      double v9 = -INFINITY;
    }
    if (v5 > 0x7FFFFFFFFFFFFFFDLL) {
      double v9 = INFINITY;
    }
    *(double *)(v3 + 8 * v6) = v9;
  }
}

BOOL operations_research::sat::LinearConstraintManager::ChangeLp(operations_research::sat::LinearConstraintManager *this, uint64_t *a2, uint64_t a3)
{
  if (*off_26AED0030[0] >= 3
    && (off_26AED0030[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AED0030, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v217, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 440);
    unint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)&v217);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Enter ChangeLP, scan ", 21);
    unint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" constraints", 12);
    google::LogMessage::~LogMessage((google::LogMessage *)&v217);
  }
  uint64_t v201 = a3;
  memset(&v217, 0, sizeof(v217));
  long long v214 = 0;
  uint64_t v215 = 0;
  v216 = 0;
  long long __p = 0;
  v212 = 0;
  uint64_t v213 = 0;
  uint64_t v8 = *(void *)(*((void *)this + 1) + 864);
  uint64_t v10 = *((void *)this + 3);
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 3) = v8;
  if ((int)((unint64_t)(*((void *)this + 5) - v9) >> 7) >= 1)
  {
    uint64_t v11 = 0;
    char v202 = 0;
    v206 = (uint64_t *)((char *)this + 80);
    unint64_t v203 = a2;
    uint64_t v204 = v10;
    while (1)
    {
      if (v8 > v10)
      {
        int v21 = operations_research::sat::LinearConstraintManager::SimplifyConstraint(this, (operations_research::sat::LinearConstraint *)(v9 + (v11 << 7)));
        uint64_t v9 = *((void *)this + 4);
        if (v21)
        {
          operations_research::sat::DivideByGCD((uint64_t *)(v9 + (v11 << 7)), v22);
          uint64_t v23 = (operations_research::sat *)(*((void *)this + 4) + (v11 << 7));
          *((unsigned char *)v23 + 88) = 0;
          double v25 = operations_research::sat::ComputeL2Norm(v23, v24);
          uint64_t v26 = *((void *)this + 4) + (v11 << 7);
          *(double *)(v26 + 64) = v25;
          if (*(unsigned char *)(v26 + 89)) {
            *((unsigned char *)this + 16) = 1;
          }
          absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::erase<unsigned long>(v206, (void *)(v26 + 96));
          uint64_t v9 = *((void *)this + 4);
          double v27 = (void *)(v9 + (v11 << 7));
          uint64_t v17 = 0;
          v27[12] = v29;
          unint64_t v30 = v27 + 12;
          unint64_t v31 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v29)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v29));
          unint64_t v32 = *((void *)this + 10);
          unint64_t v18 = (v31 >> 7) ^ (v32 >> 12);
          uint64_t v33 = *((void *)this + 13);
          while (1)
          {
            unint64_t v12 = v18 & v33;
            uint64_t v13 = *(void *)(v32 + (v18 & v33));
            unint64_t v14 = ((v13 ^ (0x101010101010101 * (v31 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                                * (v31 & 0x7F))) & 0x8080808080808080;
            if (v14) {
              break;
            }
LABEL_11:
            if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v16 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert(v206, v31);
              uint64_t v15 = *((void *)this + 11);
              uint64_t v19 = v15 + 16 * v16;
              *(void *)uint64_t v19 = *v30;
              *(_DWORD *)(v19 + 8) = 0;
              uint64_t v9 = *((void *)this + 4);
              goto LABEL_14;
            }
            v17 += 8;
            unint64_t v18 = v17 + v12;
          }
          uint64_t v15 = *((void *)this + 11);
          while (1)
          {
            unint64_t v16 = (v12 + (__clz(__rbit64(v14)) >> 3)) & v33;
            if (*(void *)(v15 + 16 * v16) == v29) {
              break;
            }
            v14 &= v14 - 1;
            if (!v14) {
              goto LABEL_11;
            }
          }
LABEL_14:
          *(_DWORD *)(v15 + 16 * v16 + 8) = v11;
        }
      }
      uint64_t v20 = v9 + (v11 << 7);
      if (*(unsigned char *)(v20 + 89)) {
        goto LABEL_16;
      }
      double v34 = operations_research::sat::ComputeActivity((void *)v20, a2);
      uint64_t v9 = *((void *)this + 4);
      uint64_t v35 = (uint64_t *)(v9 + (v11 << 7));
      uint64_t v36 = v35[1];
      double v37 = (double)*v35;
      double v38 = -INFINITY;
      if (*v35 < (uint64_t)0x8000000000000003) {
        double v37 = -INFINITY;
      }
      if (*v35 > 0x7FFFFFFFFFFFFFFDLL) {
        double v37 = INFINITY;
      }
      double v39 = v37 - v34;
      if (v36 >= (uint64_t)0x8000000000000003) {
        double v38 = (double)v36;
      }
      if (v36 > 0x7FFFFFFFFFFFFFFDLL) {
        double v38 = INFINITY;
      }
      double v40 = v34 - v38;
      double v41 = v39 >= v40 ? v39 : v40;
      if (v41 < 0.000001) {
        goto LABEL_16;
      }
      v35[9] = 0;
      std::vector<int>::pointer end = v217.__end_;
      if (v217.__end_ < v217.__end_cap_.__value_)
      {
        *v217.__end_ = v11;
        unint64_t v43 = end + 1;
        goto LABEL_55;
      }
      std::vector<int>::pointer begin = v217.__begin_;
      int64_t v45 = (char *)v217.__end_ - (char *)v217.__begin_;
      int64_t v46 = v217.__end_ - v217.__begin_;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int64_t v48 = (char *)v217.__end_cap_.__value_ - (char *)v217.__begin_;
      if (((char *)v217.__end_cap_.__value_ - (char *)v217.__begin_) >> 1 > v47) {
        unint64_t v47 = v48 >> 1;
      }
      unint64_t v49 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v47;
      if (v49) {
        break;
      }
      uint64_t v50 = 0;
      uint64_t v51 = (int *)(4 * v46);
      *(_DWORD *)(4 * v46) = v11;
      unint64_t v43 = (int *)(4 * v46 + 4);
      if (end != begin) {
        goto LABEL_47;
      }
LABEL_53:
      v217.__begin_ = v51;
      v217.__end_ = v43;
      v217.__end_cap_.__value_ = (int *)&v50[4 * v49];
      if (begin)
      {
        operator delete(begin);
        uint64_t v9 = *((void *)this + 4);
      }
LABEL_55:
      v217.__end_ = v43;
      unint64_t v61 = v215;
      double v62 = v41 / *(double *)(v9 + (v11 << 7) + 64);
      if (v215 < v216)
      {
        *uint64_t v215 = v62;
        uint64_t v63 = (uint64_t)(v61 + 1);
        a2 = v203;
        goto LABEL_76;
      }
      unint64_t v64 = (double *)v214;
      int64_t v65 = (char *)v215 - (unsigned char *)v214;
      uint64_t v66 = ((char *)v215 - (unsigned char *)v214) >> 3;
      unint64_t v67 = v66 + 1;
      a2 = v203;
      if ((unint64_t)(v66 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v68 = (char *)v216 - (unsigned char *)v214;
      if (((char *)v216 - (unsigned char *)v214) >> 2 > v67) {
        unint64_t v67 = v68 >> 2;
      }
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v67;
      }
      if (v69)
      {
        if (v69 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v70 = (char *)operator new(8 * v69);
        uint64_t v71 = (double *)&v70[8 * v66];
        *uint64_t v71 = v62;
        uint64_t v63 = (uint64_t)(v71 + 1);
        if (v61 == v64) {
          goto LABEL_74;
        }
LABEL_68:
        unint64_t v72 = (char *)(v61 - 1) - (char *)v64;
        if (v72 < 0x58) {
          goto LABEL_272;
        }
        if ((unint64_t)((char *)v61 - &v70[v65]) < 0x20) {
          goto LABEL_272;
        }
        uint64_t v73 = (v72 >> 3) + 1;
        uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
        int v75 = &v61[v74 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v71 = (double *)((char *)v71 - v74);
        int v76 = &v70[8 * v66 - 16];
        uint64_t v77 = v61 - 2;
        uint64_t v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v79 = *(_OWORD *)v77;
          *((_OWORD *)v76 - 1) = *((_OWORD *)v77 - 1);
          *(_OWORD *)int v76 = v79;
          v76 -= 32;
          v77 -= 4;
          v78 -= 4;
        }
        while (v78);
        unint64_t v61 = v75;
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_272:
          do
          {
            uint64_t v80 = *((void *)v61-- - 1);
            *((void *)v71-- - 1) = v80;
          }
          while (v61 != v64);
        }
        goto LABEL_74;
      }
      uint64_t v70 = 0;
      uint64_t v71 = (double *)(8 * v66);
      *(double *)(8 * v66) = v62;
      uint64_t v63 = 8 * v66 + 8;
      if (v61 != v64) {
        goto LABEL_68;
      }
LABEL_74:
      long long v214 = v71;
      v216 = (double *)&v70[8 * v69];
      if (v64) {
        operator delete(v64);
      }
LABEL_76:
      uint64_t v215 = (double *)v63;
      uint64_t v81 = v212;
      if (v212 >= v213)
      {
        uint64_t v83 = (char *)__p;
        int64_t v84 = v212 - (unsigned char *)__p;
        uint64_t v85 = (v212 - (unsigned char *)__p) >> 3;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v87 = v213 - (unsigned char *)__p;
        if ((v213 - (unsigned char *)__p) >> 2 > v86) {
          unint64_t v86 = v87 >> 2;
        }
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v86;
        }
        if (v88)
        {
          if (v88 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int64_t v89 = (char *)operator new(8 * v88);
          unint64_t v90 = &v89[8 * v85];
          *(void *)unint64_t v90 = 0x3FF0000000000000;
          uint64_t v82 = (uint64_t)(v90 + 8);
          if (v81 == v83) {
            goto LABEL_95;
          }
LABEL_89:
          unint64_t v91 = v81 - 8 - v83;
          if (v91 < 0x58) {
            goto LABEL_273;
          }
          if ((unint64_t)(v81 - &v89[v84]) < 0x20) {
            goto LABEL_273;
          }
          uint64_t v92 = (v91 >> 3) + 1;
          uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v94 = &v81[-v93];
          v90 -= v93;
          long long v95 = &v89[8 * v85 - 16];
          uint64_t v96 = v81 - 16;
          uint64_t v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *(_OWORD *)v96;
            *((_OWORD *)v95 - 1) = *((_OWORD *)v96 - 1);
            *(_OWORD *)long long v95 = v98;
            v95 -= 32;
            v96 -= 32;
            v97 -= 4;
          }
          while (v97);
          uint64_t v81 = v94;
          if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_273:
            do
            {
              uint64_t v99 = *((void *)v81 - 1);
              v81 -= 8;
              *((void *)v90 - 1) = v99;
              v90 -= 8;
            }
            while (v81 != v83);
          }
        }
        else
        {
          int64_t v89 = 0;
          unint64_t v90 = (char *)(8 * v85);
          *(void *)(8 * v85) = 0x3FF0000000000000;
          uint64_t v82 = 8 * v85 + 8;
          if (v81 != v83) {
            goto LABEL_89;
          }
        }
LABEL_95:
        long long __p = v90;
        uint64_t v213 = &v89[8 * v88];
        if (v83) {
          operator delete(v83);
        }
        goto LABEL_97;
      }
      *(void *)v212 = 0x3FF0000000000000;
      uint64_t v82 = (uint64_t)(v81 + 8);
LABEL_97:
      uint64_t v10 = v204;
      v212 = (char *)v82;
      uint64_t v9 = *((void *)this + 4);
      if (*((unsigned char *)this + 192))
      {
        if (!*(unsigned char *)(v9 + (v11 << 7) + 88))
        {
          operations_research::sat::LinearConstraintManager::ComputeObjectiveParallelism((uint64_t)this, v11);
          uint64_t v9 = *((void *)this + 4);
          uint64_t v10 = v204;
        }
      }
      else
      {
        *(void *)(v9 + (v11 << 7) + 80) = 0;
      }
      uint64_t v100 = v9 + (v11 << 7);
      *(double *)(v100 + 104) = *(v215 - 1) + *(double *)(v100 + 80);
      if (*(unsigned char *)(v100 + 120))
      {
        double v101 = *((double *)this + 31) + *(double *)(v100 + 112);
        *(double *)(v100 + 112) = v101;
        if (v101 > *(double *)(*(void *)this + 552)) {
          char v202 = 1;
        }
      }
LABEL_16:
      if (++v11 >= (int)((unint64_t)(*((void *)this + 5) - v9) >> 7)) {
        goto LABEL_105;
      }
    }
    if (v49 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v50 = operator new(4 * v49);
    uint64_t v51 = (int *)&v50[4 * v46];
    *uint64_t v51 = v11;
    unint64_t v43 = v51 + 1;
    if (end == begin) {
      goto LABEL_53;
    }
LABEL_47:
    unint64_t v52 = (char *)(end - 1) - (char *)begin;
    if (v52 < 0x2C) {
      goto LABEL_274;
    }
    if ((unint64_t)((char *)end - &v50[v45]) < 0x20) {
      goto LABEL_274;
    }
    uint64_t v53 = (v52 >> 2) + 1;
    uint64_t v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
    long long v55 = &end[v54 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v51 = (int *)((char *)v51 - v54);
    long long v56 = &v50[4 * v46 - 16];
    uint64_t v57 = (long long *)(end - 4);
    uint64_t v58 = v53 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v59 = *v57;
      *(v56 - 1) = *(v57 - 1);
      _OWORD *v56 = v59;
      v56 -= 2;
      v57 -= 2;
      v58 -= 8;
    }
    while (v58);
    std::vector<int>::pointer end = v55;
    if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_274:
      do
      {
        int v60 = *--end;
        *--uint64_t v51 = v60;
      }
      while (end != begin);
    }
    goto LABEL_53;
  }
  char v202 = 0;
LABEL_105:
  if (v201)
  {
    uint64_t v102 = (int *)*((void *)this + 7);
    unint64_t v103 = *((void *)this + 8) - (void)v102;
    unint64_t v104 = v103 >> 2;
    char v105 = v202;
    if ((int)(v103 >> 2) >= 1)
    {
      uint64_t v106 = (v103 >> 2);
      int v107 = (unsigned __int8 *)(*(void *)v201 + (int)(*(_DWORD *)(v201 + 8) - *(void *)v201 - v104));
      do
      {
        if (*v107++)
        {
          uint64_t v109 = v9 + ((uint64_t)*v102 << 7);
          if (*(unsigned char *)(v109 + 120))
          {
            double v110 = *((double *)this + 31) + *(double *)(v109 + 112);
            *(double *)(v109 + 112) = v110;
            if (v110 > *(double *)(*(void *)this + 552)) {
              char v105 = 1;
            }
          }
        }
        ++v102;
        --v106;
      }
      while (v106);
    }
  }
  else
  {
    char v105 = v202;
  }
  uint64_t v111 = *(void *)this;
  if (v105)
  {
    double v112 = *(double *)(v111 + 552);
    *(double *)v208 = v112;
    uint64_t v209 = 0;
    if (v112 <= 0.0) {
      google::MakeCheckOpString<double,double>((int)v208, (int)&v209, "sat_parameters_.cut_max_active_count_value() > 0.0");
    }
    operations_research::sat::LinearConstraintManager::RescaleActiveCounts(this, 1.0 / v112);
    uint64_t v111 = *(void *)this;
  }
  *((double *)this + 31) = *((double *)this + 31) * (1.0 / *(double *)(v111 + 568));
  if (operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints((uint64_t)this, v201))*((unsigned char *)this + 16) = 1; {
  int v114 = *(_DWORD *)(*(void *)this + 460);
  }
  if (*((void *)this + 7) == *((void *)this + 8)) {
    int v114 = 1000;
  }
  if (v114 >= (int)((unint64_t)((char *)v217.__end_ - (char *)v217.__begin_) >> 2)) {
    int v115 = (unint64_t)((char *)v217.__end_ - (char *)v217.__begin_) >> 2;
  }
  else {
    int v115 = v114;
  }
  if (*off_26AED0038[0] >= 3
    && (off_26AED0038[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AED0038, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v208, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 569);
    unint64_t v116 = (void *)google::LogMessage::stream((google::LogMessage *)v208);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"   - size = ", 12);
    unint64_t v117 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)", limit = ", 10);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v208);
  }
  uint64_t v118 = v217.__begin_;
  uint64_t v119 = v217.__end_;
  v208[0] = (uint64_t)this;
  unint64_t v120 = v217.__end_ - v217.__begin_;
  if ((char *)v217.__end_ - (char *)v217.__begin_ < 513)
  {
LABEL_132:
    std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(v118, v119, v208, v120, 0, 0, v113);
    unint64_t v127 = 4 * v115;
    if (v127 >= v217.__end_ - v217.__begin_) {
      goto LABEL_143;
    }
    goto LABEL_135;
  }
  uint64_t v121 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  unint64_t v122 = v217.__end_ - v217.__begin_;
  while (1)
  {
    uint64_t v123 = (int *)operator new(4 * v122, v121);
    if (v123) {
      break;
    }
    BOOL v124 = v122 > 1;
    v122 >>= 1;
    if (!v124) {
      goto LABEL_132;
    }
  }
  uint64_t v128 = v123;
  std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(v118, v119, v208, v120, v123, v122, v113);
  operator delete(v128);
  unint64_t v127 = 4 * v115;
  if (v127 < v217.__end_ - v217.__begin_)
  {
LABEL_135:
    if (*off_26AED0040[0] >= 3)
    {
      if (off_26AED0040[0] != &google::kLogSiteUninitialized
        || (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep inited = google::InitVLOG3__((google *)off_26AED0040, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)3), inited))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v208, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 578);
        uint64_t v129 = (void *)google::LogMessage::stream((google::LogMessage *)v208);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Resize candidate constraints from ", 34);
        v130 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" down to ", 9);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v208);
      }
    }
    unint64_t v131 = v217.__end_ - v217.__begin_;
    if (v127 <= v131)
    {
      if (v127 < v131) {
        v217.__end_ = &v217.__begin_[v127];
      }
    }
    else
    {
      std::vector<int>::__append(&v217, v127 - v131);
    }
  }
LABEL_143:
  if (v115 < 1) {
    goto LABEL_248;
  }
  if (v217.__end_ == v217.__begin_)
  {
    do
      --v115;
    while (v115);
    int v134 = 0;
LABEL_210:
    if (v134 >= 1)
    {
      if (*off_26AED0048[0] >= 2
        && (off_26AED0048[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AED0048, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v208, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 649);
        v174 = (void *)google::LogMessage::stream((google::LogMessage *)v208);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"Added ", 6);
        uint64_t v175 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)" constraints.", 13);
        google::LogMessage::~LogMessage((google::LogMessage *)v208);
      }
      uint64_t v176 = *(char **)v201;
      unint64_t v177 = *(char **)(v201 + 8);
      unint64_t v178 = (unint64_t)&v177[-*(void *)v201];
      unint64_t v179 = v134 + (int)v178;
      unint64_t v180 = v179 - v178;
      if (v179 > v178)
      {
        uint64_t v181 = *(void *)(v201 + 16);
        if (v181 - (uint64_t)v177 >= v180)
        {
          bzero(v177, v179 - v178);
          *(void *)(v201 + 8) = &v177[v180];
          goto LABEL_248;
        }
        if ((v179 & 0x80000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v182 = v181 - (void)v176;
        uint64_t v183 = 2 * v182;
        if (2 * v182 <= v179) {
          uint64_t v183 = v179;
        }
        if (v182 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v184 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v184 = v183;
        }
        uint64_t v185 = (char *)operator new(v184);
        uint64_t v186 = &v185[v178];
        bzero(&v185[v178], v179 - v178);
        if (v177 == v176) {
          goto LABEL_246;
        }
        if (v178 >= 8 && (unint64_t)(v176 - v185) >= 0x20)
        {
          if (v178 < 0x20)
          {
            unint64_t v187 = 0;
            goto LABEL_238;
          }
          unint64_t v187 = v178 & 0xFFFFFFFFFFFFFFE0;
          long long v190 = v177 - 16;
          int v191 = &v185[v177 - 16 - v176];
          unint64_t v192 = v178 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v193 = *(_OWORD *)v190;
            *((_OWORD *)v191 - 1) = *((_OWORD *)v190 - 1);
            *(_OWORD *)int v191 = v193;
            v191 -= 32;
            v190 -= 32;
            v192 -= 32;
          }
          while (v192);
          if (v178 == v187) {
            goto LABEL_245;
          }
          if ((v178 & 0x18) != 0)
          {
LABEL_238:
            v186 -= v178 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v194 = &v177[-v187 - 8];
            int64_t v195 = v194 - v176;
            unint64_t v196 = v187 - (v178 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v197 = *(void *)v194;
              v194 -= 8;
              *(void *)&v185[v195] = v197;
              v195 -= 8;
              v196 += 8;
            }
            while (v196);
            v177 -= v178 & 0xFFFFFFFFFFFFFFF8;
            if (v178 == (v178 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_245;
            }
            goto LABEL_243;
          }
          v186 -= v187;
          v177 -= v187;
        }
LABEL_243:
        unint64_t v198 = v186 - 1;
        do
        {
          char v199 = *--v177;
          *v198-- = v199;
        }
        while (v177 != v176);
LABEL_245:
        uint64_t v186 = v185;
LABEL_246:
        *(void *)uint64_t v201 = v186;
        *(void *)(v201 + 8) = &v185[v179];
        *(void *)(v201 + 16) = &v185[v184];
        if (v176) {
          operator delete(v176);
        }
        goto LABEL_248;
      }
      if (v179 < v178) {
        *(void *)(v201 + 8) = &v176[v179];
      }
    }
LABEL_248:
    if (*((_DWORD *)this + 64) > *(_DWORD *)(*(void *)this + 400)) {
      operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(this);
    }
    if (*((unsigned char *)this + 16))
    {
      *((unsigned char *)this + 16) = 0;
      BOOL v188 = 1;
      uint64_t v189 = __p;
      if (!__p) {
        goto LABEL_253;
      }
    }
    else
    {
      BOOL v188 = 0;
      uint64_t v189 = __p;
      if (!__p) {
        goto LABEL_253;
      }
    }
LABEL_252:
    operator delete(v189);
    goto LABEL_253;
  }
  uint64_t v205 = (void **)((char *)this + 56);
  int v132 = 0;
  int v133 = 0;
  int v134 = 0;
  int v135 = -1;
LABEL_146:
  while (v217.__end_ == v217.__begin_)
  {
    if (++v132 == v115) {
      goto LABEL_210;
    }
  }
  int v207 = v134;
  uint64_t v136 = 0;
  int v137 = -1;
  double v138 = 0.0;
  while (1)
  {
    if (v133 < 99)
    {
      ++v133;
      uint64_t v145 = v217.__begin_[v136];
      uint64_t v146 = *((void *)this + 4);
      int v147 = (const operations_research::sat::LinearConstraint *)(v146 + (v145 << 7));
      if (*((unsigned char *)v147 + 89)) {
        goto LABEL_153;
      }
      goto LABEL_172;
    }
    uint64_t v140 = *((void *)this + 29);
    uint64_t v141 = *(unsigned __int8 **)(v140 + 120);
    if (v141)
    {
      unsigned __int8 v142 = atomic_load(v141);
      if (v142) {
        goto LABEL_229;
      }
    }
    if (fmax(*(double *)(v140 + 104) - *(double *)(v140 + 112), 0.0) <= 0.0) {
      goto LABEL_229;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
    if (*(void *)(v140 + 24) <= CurrentTimeNanos - *(void *)(v140 + 8)) {
      uint64_t v144 = CurrentTimeNanos - *(void *)(v140 + 8);
    }
    else {
      uint64_t v144 = *(void *)(v140 + 24);
    }
    operations_research::RunningMax<long long>::Add((int *)(v140 + 32), v144);
    *(void *)(v140 + 8) = CurrentTimeNanos;
    if (*(void *)(*(void *)(v140 + 40) + 8 * *(int *)(v140 + 68)) + CurrentTimeNanos < *(void *)(v140 + 16))
    {
      int v133 = 0;
      uint64_t v145 = v217.__begin_[v136];
      uint64_t v146 = *((void *)this + 4);
      int v147 = (const operations_research::sat::LinearConstraint *)(v146 + (v145 << 7));
      if (*((unsigned char *)v147 + 89)) {
        goto LABEL_153;
      }
      goto LABEL_172;
    }
    if (!FLAGS_time_limit_use_usertime) {
      goto LABEL_228;
    }
    double v148 = *(double *)(v140 + 96);
    if (!*(unsigned char *)(v140 + 72)) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep inited = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
    double v149 = v148 + (double)(inited - *(void *)(v140 + 80) + *(void *)(v140 + 88)) * -0.000000001;
    if (v149 <= 0.0001) {
      goto LABEL_228;
    }
LABEL_171:
    int v133 = 0;
    *(void *)(v140 + 16) = *(void *)(v140 + 8) + (uint64_t)(v149 * 1000000000.0);
    uint64_t v145 = v217.__begin_[v136];
    uint64_t v146 = *((void *)this + 4);
    int v147 = (const operations_research::sat::LinearConstraint *)(v146 + (v145 << 7));
    if (*((unsigned char *)v147 + 89)) {
      goto LABEL_153;
    }
LABEL_172:
    if (v135 != -1)
    {
      double v150 = operations_research::sat::ScalarProduct((operations_research::sat *)(v146 + ((uint64_t)v135 << 7)), v147, v126);
      uint64_t v146 = *((void *)this + 4);
      double v151 = 1.0 - fabs(v150) / (*(double *)(v146 + ((uint64_t)v135 << 7) + 64) * *(double *)(v146 + (v145 << 7) + 64));
      v152 = (double *)__p;
      if (v151 >= *((double *)__p + v136)) {
        double v151 = *((double *)__p + v136);
      }
      *((double *)__p + v136) = v151;
      if (v151 < *(double *)(*(void *)this + 432)) {
        goto LABEL_153;
      }
LABEL_178:
      double v210 = 0.0;
      double v153 = v152[v136] + *(double *)(v146 + (v145 << 7) + 104);
      double v210 = v153;
      v208[0] = 0;
      if (v153 < 0.0) {
        google::MakeCheckOpString<double,double>((int)&v210, (int)v208, "score >= 0.0");
      }
      if (v153 > v138 || v137 == -1)
      {
        int v137 = v145;
        double v138 = v153;
      }
      goto LABEL_153;
    }
    v152 = (double *)__p;
    if (*((double *)__p + v136) >= *(double *)(*(void *)this + 432)) {
      goto LABEL_178;
    }
LABEL_153:
    if (++v136 >= (unint64_t)(v217.__end_ - v217.__begin_))
    {
      if (v137 == -1)
      {
        int v134 = v207;
        if (++v132 != v115) {
          goto LABEL_146;
        }
        goto LABEL_210;
      }
      *(unsigned char *)(*((void *)this + 4) + ((uint64_t)v137 << 7) + 89) = 1;
      *((unsigned char *)this + 16) = 1;
      unint64_t v155 = (int *)*((void *)this + 8);
      unint64_t v154 = *((void *)this + 9);
      if ((unint64_t)v155 < v154)
      {
        int *v155 = v137;
        uint64_t v156 = (uint64_t)(v155 + 1);
        goto LABEL_206;
      }
      unint64_t v157 = (int *)*v205;
      uint64_t v158 = (char *)v155 - (unsigned char *)*v205;
      uint64_t v159 = v158 >> 2;
      unint64_t v160 = (v158 >> 2) + 1;
      if (v160 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v161 = v154 - (void)v157;
      if (v161 >> 1 > v160) {
        unint64_t v160 = v161 >> 1;
      }
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v162 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v162 = v160;
      }
      if (v162)
      {
        if (v162 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v163 = v162;
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep inited = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(4 * v162);
        unint64_t v162 = v163;
        v164 = (int *)(inited + 4 * v159);
        int *v164 = v137;
        uint64_t v156 = (uint64_t)(v164 + 1);
        if (v155 == v157) {
          goto LABEL_204;
        }
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep inited = 0;
        v164 = (int *)(4 * v159);
        *(_DWORD *)(4 * v159) = v137;
        uint64_t v156 = 4 * v159 + 4;
        if (v155 == v157)
        {
LABEL_204:
          *((void *)this + 7) = v164;
          *((void *)this + 8) = v156;
          *((void *)this + 9) = inited + 4 * v162;
          if (v157) {
            operator delete(v157);
          }
LABEL_206:
          *((void *)this + 8) = v156;
          int v134 = v207 + 1;
          ++v132;
          int v135 = v137;
          if (v132 != v115) {
            goto LABEL_146;
          }
          goto LABEL_210;
        }
      }
      unint64_t v165 = (char *)(v155 - 1) - (char *)v157;
      if (v165 < 0x2C) {
        goto LABEL_275;
      }
      if ((unint64_t)v155 - inited - v158 < 0x20) {
        goto LABEL_275;
      }
      uint64_t v166 = (v165 >> 2) + 1;
      uint64_t v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
      long long v168 = &v155[v167 / 0xFFFFFFFFFFFFFFFCLL];
      v164 = (int *)((char *)v164 - v167);
      int v169 = (_OWORD *)(inited + 4 * v159 - 16);
      int v170 = v155 - 4;
      uint64_t v171 = v166 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v172 = *(_OWORD *)v170;
        *(v169 - 1) = *((_OWORD *)v170 - 1);
        _OWORD *v169 = v172;
        v169 -= 2;
        v170 -= 8;
        v171 -= 8;
      }
      while (v171);
      unint64_t v155 = v168;
      if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_275:
        do
        {
          int v173 = *--v155;
          *--v164 = v173;
        }
        while (v155 != v157);
      }
      goto LABEL_204;
    }
  }
  double v149 = v148 + (double)*(uint64_t *)(v140 + 88) * -0.000000001;
  if (v149 > 0.0001) {
    goto LABEL_171;
  }
LABEL_228:
  *(void *)(v140 + 16) = 0;
LABEL_229:
  BOOL v188 = *((unsigned char *)this + 16) != 0;
  uint64_t v189 = __p;
  if (__p) {
    goto LABEL_252;
  }
LABEL_253:
  if (v214) {
    operator delete(v214);
  }
  if (v217.__begin_)
  {
    v217.__end_ = v217.__begin_;
    operator delete(v217.__begin_);
  }
  return v188;
}

void sub_23CD18184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD1818C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    double v27 = a22;
    if (!a22)
    {
LABEL_3:
      unint64_t v28 = a25;
      if (!a25) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    double v27 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  operator delete(v27);
  unint64_t v28 = a25;
  if (!a25) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::erase<unsigned long>(uint64_t *a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v4 = *a1;
  unint64_t v5 = (v3 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v6 = a1[3];
  uint64_t v7 = 0x101010101010101 * (v3 & 0x7F);
  while (1)
  {
    uint64_t v8 = v5 & v6;
    uint64_t v9 = *(void *)(v4 + (v5 & v6));
    unint64_t v10 = ((v9 ^ v7) - 0x101010101010101) & ~(v9 ^ v7) & 0x8080808080808080;
    if (v10) {
      break;
    }
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v2 += 8;
    unint64_t v5 = v2 + v8;
  }
  while (1)
  {
    unint64_t v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v6;
    if (*(void *)(a1[1] + 16 * v11) == *a2) {
      break;
    }
    v10 &= v10 - 1;
    if (!v10) {
      goto LABEL_5;
    }
  }
  if (v11 == v6) {
    return 0;
  }
  --a1[2];
  uint64_t v13 = *(void *)(v4 + ((v11 - 8) & v6));
  unint64_t v14 = *(void *)(v4 + v11) & (~*(void *)(v4 + v11) << 6) & 0x8080808080808080;
  unint64_t v15 = v13 & (~v13 << 6) & 0x8080808080808080;
  if (v15) {
    BOOL v16 = v14 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    uint64_t v20 = 0;
    char v17 = -2;
  }
  else
  {
    unsigned int v18 = (__clz(v15) >> 3) + (__clz(__rbit64(v14)) >> 3);
    BOOL v19 = v18 >= 8;
    uint64_t v20 = v18 < 8;
    if (v19) {
      char v17 = -2;
    }
    else {
      char v17 = 0x80;
    }
  }
  *(unsigned char *)(v4 + v11) = v17;
  *(unsigned char *)((a1[3] & (v11 - 8)) + (a1[3] & 7) + *a1 + 1) = v17;
  uint64_t v21 = a1[4];
  a1[5] += v20;
  if (!v21) {
    return 1;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t result = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
  return result;
}

void operations_research::sat::LinearConstraintManager::AddAllConstraintsToLp(operations_research::sat::LinearConstraintManager *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v1 = *((void *)this + 5);
  if ((int)((unint64_t)(v1 - v2) >> 7) >= 1)
  {
    uint64_t v4 = 0;
    unint64_t v28 = (void **)((char *)this + 56);
    while (1)
    {
      uint64_t v6 = v2 + (v4 << 7);
      int v8 = *(unsigned __int8 *)(v6 + 89);
      uint64_t v7 = (unsigned char *)(v6 + 89);
      if (v8) {
        goto LABEL_5;
      }
      *uint64_t v7 = 1;
      unint64_t v10 = (char *)*((void *)this + 8);
      unint64_t v9 = *((void *)this + 9);
      if ((unint64_t)v10 >= v9) {
        break;
      }
      *(_DWORD *)unint64_t v10 = v4;
      uint64_t v5 = (uint64_t)(v10 + 4);
LABEL_4:
      *((void *)this + 8) = v5;
LABEL_5:
      if (++v4 >= (int)((unint64_t)(v1 - v2) >> 7)) {
        return;
      }
    }
    unint64_t v11 = (char *)*v28;
    uint64_t v12 = v10 - (unsigned char *)*v28;
    uint64_t v13 = v12 >> 2;
    unint64_t v14 = (v12 >> 2) + 1;
    if (v14 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v9 - (void)v11;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v17 = operator new(4 * v16);
      unsigned int v18 = &v17[4 * v13];
      *unsigned int v18 = v4;
      uint64_t v5 = (uint64_t)(v18 + 1);
      if (v10 == v11) {
        goto LABEL_25;
      }
    }
    else
    {
      char v17 = 0;
      unsigned int v18 = (_DWORD *)(4 * v13);
      *(_DWORD *)(4 * v13) = v4;
      uint64_t v5 = 4 * v13 + 4;
      if (v10 == v11)
      {
LABEL_25:
        *((void *)this + 7) = v18;
        *((void *)this + 8) = v5;
        *((void *)this + 9) = &v17[4 * v16];
        if (v11)
        {
          operator delete(v11);
          uint64_t v2 = *((void *)this + 4);
          uint64_t v1 = *((void *)this + 5);
        }
        goto LABEL_4;
      }
    }
    unint64_t v19 = v10 - 4 - v11;
    if (v19 < 0x2C) {
      goto LABEL_33;
    }
    if ((unint64_t)(v10 - &v17[v12]) < 0x20) {
      goto LABEL_33;
    }
    uint64_t v20 = (v19 >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v22 = &v10[-v21];
    unsigned int v18 = (_DWORD *)((char *)v18 - v21);
    uint64_t v23 = &v17[4 * v13 - 16];
    uint64_t v24 = v10 - 16;
    uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    unint64_t v10 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_33:
      do
      {
        int v27 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--unsigned int v18 = v27;
      }
      while (v10 != v11);
    }
    goto LABEL_25;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unsigned int v18 = &v5[16 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v18));
      uint64_t v20 = *a1;
      uint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

char *std::vector<operations_research::sat::LinearConstraintManager::ConstraintInfo>::__push_back_slow_path<operations_research::sat::LinearConstraintManager::ConstraintInfo>(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 7;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 6 > v4) {
    unint64_t v4 = v6 >> 6;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 57) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    unint64_t v8 = 0;
  }
  long long v9 = *(_OWORD *)(a2 + 16);
  uint64_t v10 = &v8[128 * v3];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v9;
  unint64_t v11 = &v8[128 * v7];
  *((void *)v10 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v10 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 80);
  long long v14 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v10 + 105) = *(_OWORD *)(a2 + 105);
  *((_OWORD *)v10 + 5) = v13;
  *((_OWORD *)v10 + 6) = v14;
  *((_OWORD *)v10 + 4) = v12;
  uint64_t v15 = v10 + 128;
  unint64_t v16 = (char *)*a1;
  char v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v10;
    a1[1] = v15;
    a1[2] = v11;
    if (!v17) {
      return v15;
    }
    goto LABEL_23;
  }
  uint64_t v18 = 0;
  do
  {
    unint64_t v19 = &v10[v18];
    uint64_t v20 = &v17[v18];
    *((_OWORD *)v19 - 8) = *(_OWORD *)&v17[v18 - 128];
    *((void *)v19 - 13) = 0;
    *((void *)v19 - 12) = 0;
    *((_OWORD *)v19 - 7) = *(_OWORD *)&v17[v18 - 112];
    *((void *)v19 - 12) = *(void *)&v17[v18 - 96];
    *((void *)v20 - 14) = 0;
    *((void *)v20 - 13) = 0;
    *((void *)v20 - 12) = 0;
    *((void *)v19 - 10) = 0;
    *((void *)v19 - 9) = 0;
    *(_OWORD *)(v19 - 88) = *(_OWORD *)&v17[v18 - 88];
    *((void *)v19 - 9) = *(void *)&v17[v18 - 72];
    *((void *)v20 - 11) = 0;
    *((void *)v20 - 10) = 0;
    *((void *)v20 - 9) = 0;
    long long v21 = *(_OWORD *)&v17[v18 - 64];
    long long v22 = *(_OWORD *)&v17[v18 - 48];
    long long v23 = *(_OWORD *)&v17[v18 - 32];
    *(_OWORD *)(v19 - 23) = *(_OWORD *)&v17[v18 - 23];
    *((_OWORD *)v19 - 3) = v22;
    *((_OWORD *)v19 - 2) = v23;
    *((_OWORD *)v19 - 4) = v21;
    v18 -= 128;
  }
  while (&v17[v18] != v16);
  uint64_t v24 = (char *)*a1;
  char v17 = (char *)a1[1];
  *a1 = &v10[v18];
  a1[1] = v15;
  a1[2] = v11;
  if (v17 != v24)
  {
    do
    {
      uint64_t v25 = (void *)*((void *)v17 - 11);
      if (v25)
      {
        *((void *)v17 - 10) = v25;
        operator delete(v25);
      }
      long long v26 = (void *)*((void *)v17 - 14);
      if (v26)
      {
        *((void *)v17 - 13) = v26;
        operator delete(v26);
      }
      v17 -= 128;
    }
    while (v17 != v24);
    char v17 = v24;
  }
  if (v17) {
LABEL_23:
  }
    operator delete(v17);
  return v15;
}

void google::MakeCheckOpString<double,double>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CD18B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::vector<operations_research::sat::LinearConstraintManager::ConstraintInfo>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 7);
      v5 += 128 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(char **)a1;
    uint64_t v7 = (uint64_t)&v5[-*(void *)a1] >> 7;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 57) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 6 > v8) {
      unint64_t v8 = v9 >> 6;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 57) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(v10 << 7);
    }
    else
    {
      unint64_t v11 = 0;
    }
    long long v12 = &v11[128 * v7];
    size_t v13 = a2 << 7;
    long long v14 = &v11[128 * v10];
    bzero(v12, v13);
    uint64_t v15 = &v12[v13];
    if (v5 == v6)
    {
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_27;
    }
    uint64_t v16 = 0;
    do
    {
      char v17 = &v12[v16];
      uint64_t v18 = &v5[v16];
      *((_OWORD *)v17 - 8) = *(_OWORD *)&v5[v16 - 128];
      *((void *)v17 - 13) = 0;
      *((void *)v17 - 12) = 0;
      *((_OWORD *)v17 - 7) = *(_OWORD *)&v5[v16 - 112];
      *((void *)v17 - 12) = *(void *)&v5[v16 - 96];
      *((void *)v18 - 14) = 0;
      *((void *)v18 - 13) = 0;
      *((void *)v18 - 12) = 0;
      *((void *)v17 - 10) = 0;
      *((void *)v17 - 9) = 0;
      *(_OWORD *)(v17 - 88) = *(_OWORD *)&v5[v16 - 88];
      *((void *)v17 - 9) = *(void *)&v5[v16 - 72];
      *((void *)v18 - 11) = 0;
      *((void *)v18 - 10) = 0;
      *((void *)v18 - 9) = 0;
      long long v19 = *(_OWORD *)&v5[v16 - 64];
      long long v20 = *(_OWORD *)&v5[v16 - 48];
      long long v21 = *(_OWORD *)&v5[v16 - 32];
      *(_OWORD *)(v17 - 23) = *(_OWORD *)&v5[v16 - 23];
      *((_OWORD *)v17 - 3) = v20;
      *((_OWORD *)v17 - 2) = v21;
      *((_OWORD *)v17 - 4) = v19;
      v16 -= 128;
    }
    while (&v5[v16] != v6);
    long long v22 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    *(void *)a1 = &v12[v16];
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v14;
    if (v5 != v22)
    {
      do
      {
        long long v23 = (void *)*((void *)v5 - 11);
        if (v23)
        {
          *((void *)v5 - 10) = v23;
          operator delete(v23);
        }
        uint64_t v24 = (void *)*((void *)v5 - 14);
        if (v24)
        {
          *((void *)v5 - 13) = v24;
          operator delete(v24);
        }
        v5 -= 128;
      }
      while (v5 != v22);
      uint64_t v5 = v22;
    }
    if (v5)
    {
LABEL_27:
      operator delete(v5);
    }
  }
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(int *a1, int *a2, uint64_t *a3, unint64_t a4, int *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v9 = (__n128 *)a1;
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      uint64_t v11 = *a1;
      uint64_t v12 = *(void *)(*a3 + 32);
      result.n128_u64[0] = *(void *)(v12 + (v10 << 7) + 104);
      if (result.n128_f64[0] > *(double *)(v12 + (v11 << 7) + 104))
      {
        *a1 = v10;
        *(a2 - 1) = v11;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      unint64_t v24 = a4 >> 1;
      uint64_t v25 = &a1[a4 >> 1];
      unint64_t v26 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        __n128 v28 = std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(a1, v25, a3, v26, a5, result);
        unint64_t v29 = &a5[v24];
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>((int *)v9 + (a4 >> 1), a2, a3, a4 - (a4 >> 1), v29, v28).n128_u64[0];
        uint64_t v30 = *a3;
        unint64_t v31 = v29;
        unint64_t v32 = a5;
        uint64_t v33 = v9;
        double v34 = &a5[a4];
        do
        {
          if (v31 == v34)
          {
            if (v32 == v29) {
              return result;
            }
            unint64_t v52 = (char *)&a5[v24] - (char *)v32 - 4;
            if (v52 >= 0x1C && (unint64_t)((char *)v9 - (char *)v32) >= 0x20)
            {
              unint64_t v56 = 0;
              uint64_t v57 = (v52 >> 2) + 1;
              uint64_t v58 = v57 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v53 = &v32[v58];
              uint64_t v54 = (__n128 *)((char *)v33 + v58 * 4);
              uint64_t v59 = v57 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                int v60 = &v33[v56 / 4];
                uint64_t result = *(__n128 *)&v32[v56];
                __n128 v61 = *(__n128 *)&v32[v56 + 4];
                *int v60 = result;
                v60[1] = v61;
                v56 += 8;
                v59 -= 8;
              }
              while (v59);
              if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8)) {
                return result;
              }
            }
            else
            {
              uint64_t v53 = v32;
              uint64_t v54 = v33;
            }
            do
            {
              unsigned __int32 v55 = *v53++;
              v54->n128_u32[0] = v55;
              uint64_t v54 = (__n128 *)((char *)v54 + 4);
            }
            while (v53 != v29);
            return result;
          }
          uint64_t v35 = v31;
          uint64_t v36 = *v31;
          uint64_t v37 = *v32;
          uint64_t v38 = *(void *)(v30 + 32);
          result.n128_u64[0] = *(void *)(v38 + (v36 << 7) + 104);
          double v39 = *(double *)(v38 + (v37 << 7) + 104);
          if (result.n128_f64[0] > v39) {
            LODWORD(v37) = v36;
          }
          v32 += result.n128_f64[0] <= v39;
          unint64_t v31 = &v35[result.n128_f64[0] > v39];
          v33->n128_u32[0] = v37;
          uint64_t v33 = (__n128 *)((char *)v33 + 4);
          uint64_t v9 = (__n128 *)((char *)v9 + 4);
        }
        while (v32 != v29);
        if (v31 != v34)
        {
          uint64_t v40 = -4;
          if (result.n128_f64[0] <= v39) {
            uint64_t v40 = 0;
          }
          unint64_t v41 = (char *)&a5[a4] - (char *)v35 + v40 - 4;
          if (v41 < 0x3C || (unint64_t)((char *)v9 - (char *)&v35[result.n128_f64[0] > v39]) < 0x20) {
            goto LABEL_50;
          }
          unint64_t v42 = 0;
          uint64_t v43 = (v41 >> 2) + 1;
          uint64_t v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v31 = (int *)((char *)v31 + v44);
          int64_t v45 = (__n128 *)((char *)v33 + v44);
          char v46 = result.n128_f64[0] > v39 ? 1 : 2;
          unint64_t v47 = &v35[v46 & 1];
          uint64_t v48 = v43 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            unint64_t v49 = &v33[v42 / 4];
            uint64_t result = *(__n128 *)&v47[v42];
            __n128 v50 = *(__n128 *)&v47[v42 + 4];
            __n128 *v49 = result;
            v49[1] = v50;
            v42 += 8;
            v48 -= 8;
          }
          while (v48);
          uint64_t v33 = v45;
          if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_50:
            do
            {
              unsigned __int32 v51 = *v31++;
              v33->n128_u32[0] = v51;
              uint64_t v33 = (__n128 *)((char *)v33 + 4);
            }
            while (v31 != v34);
          }
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(a1, v25, a3, v26, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>((char *)v9 + 4 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(v9, (int *)v9 + (a4 >> 1), a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v27).n128_u64[0];
      }
    }
    else if (a1 != a2)
    {
      long long v14 = a1 + 1;
      if (a1 + 1 != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(*a3 + 32);
        char v17 = a1;
        do
        {
          uint64_t v19 = *v17;
          char v17 = v14;
          uint64_t v20 = *v14;
          result.n128_u64[0] = *(void *)(v16 + (v20 << 7) + 104);
          if (result.n128_f64[0] > *(double *)(v16 + (v19 << 7) + 104))
          {
            uint64_t v21 = v15;
            do
            {
              *(int *)((char *)a1 + v21 + 4) = v19;
              if (!v21)
              {
                uint64_t v18 = a1;
                goto LABEL_10;
              }
              uint64_t v19 = *(int *)((char *)a1 + v21 - 4);
              v21 -= 4;
            }
            while (result.n128_f64[0] > *(double *)(v16 + (v19 << 7) + 104));
            uint64_t v18 = (int *)((char *)a1 + v21 + 4);
LABEL_10:
            *uint64_t v18 = v20;
          }
          long long v14 = v17 + 1;
          v15 += 4;
        }
        while (v17 + 1 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(int *a1, int *a2, uint64_t *a3, unint64_t a4, int *a5, __n128 result)
{
  if (a4)
  {
    uint64_t v6 = a5;
    unint64_t v8 = a1;
    if (a4 == 1)
    {
LABEL_8:
      *uint64_t v6 = *v8;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v11 = *(a2 - 1);
      uint64_t v12 = *(void *)(*a3 + 32);
      result.n128_u64[0] = *(void *)(v12 + (v11 << 7) + 104);
      double v13 = *(double *)(v12 + ((uint64_t)*a1 << 7) + 104);
      if (result.n128_f64[0] <= v13) {
        LODWORD(v11) = *a1;
      }
      *a5 = v11;
      uint64_t v6 = a5 + 1;
      if (result.n128_f64[0] <= v13) {
        unint64_t v8 = a2 - 1;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v27 = a4 >> 1;
      uint64_t v28 = a4 >> 1;
      unint64_t v29 = &a1[v28];
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(a1, &a1[v28], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(&v8[v28], a2, a3, a4 - v27, &v6[v28], a4 - v27);
      uint64_t v30 = *a3;
      unint64_t v31 = (char *)v6;
      unint64_t v32 = (char *)v8;
      uint64_t v33 = &v8[v28];
      do
      {
        if (v33 == a2)
        {
          if (v32 == (char *)v29) {
            return result;
          }
          unint64_t v50 = (char *)&v8[v27] - v32 - 4;
          if (v50 >= 0x1C && (unint64_t)(v31 - v32) >= 0x20)
          {
            uint64_t v54 = 0;
            uint64_t v55 = (v50 >> 2) + 1;
            uint64_t v56 = v55 & 0x7FFFFFFFFFFFFFF8;
            unsigned __int32 v51 = &v6[v56];
            unint64_t v52 = (int *)&v32[v56 * 4];
            uint64_t v57 = v55 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              uint64_t v58 = &v6[v54];
              uint64_t result = *(__n128 *)&v32[v54 * 4];
              long long v59 = *(_OWORD *)&v32[v54 * 4 + 16];
              *(__n128 *)uint64_t v58 = result;
              *((_OWORD *)v58 + 1) = v59;
              v54 += 8;
              v57 -= 8;
            }
            while (v57);
            if (v55 == (v55 & 0x7FFFFFFFFFFFFFF8)) {
              return result;
            }
          }
          else
          {
            unsigned __int32 v51 = v6;
            unint64_t v52 = (int *)v32;
          }
          do
          {
            int v53 = *v52++;
            *v51++ = v53;
          }
          while (v52 != v29);
          return result;
        }
        double v34 = v33;
        uint64_t v35 = *v33;
        uint64_t v36 = *(int *)v32;
        uint64_t v37 = *(void *)(v30 + 32);
        result.n128_u64[0] = *(void *)(v37 + (v35 << 7) + 104);
        double v38 = *(double *)(v37 + (v36 << 7) + 104);
        if (result.n128_f64[0] > v38) {
          LODWORD(v36) = v35;
        }
        uint64_t v33 = &v34[result.n128_f64[0] > v38];
        v32 += 4 * (result.n128_f64[0] <= v38);
        *v6++ = v36;
        v31 += 4;
      }
      while (v32 != (char *)v29);
      if (v33 != a2)
      {
        uint64_t v39 = -4;
        if (result.n128_f64[0] <= v38) {
          uint64_t v39 = 0;
        }
        unint64_t v40 = (char *)a2 - (char *)v34 + v39 - 4;
        if (v40 < 0x3C) {
          goto LABEL_49;
        }
        if ((unint64_t)(v31 - (char *)&v34[result.n128_f64[0] > v38]) < 0x20) {
          goto LABEL_49;
        }
        uint64_t v41 = 0;
        uint64_t v42 = (v40 >> 2) + 1;
        uint64_t v43 = v42 & 0x7FFFFFFFFFFFFFF8;
        uint64_t v44 = &v6[v43];
        uint64_t v33 = (int *)((char *)v33 + v43 * 4);
        int64_t v45 = &v34[result.n128_f64[0] > v38];
        uint64_t v46 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          unint64_t v47 = &v6[v41];
          uint64_t result = *(__n128 *)&v45[v41];
          long long v48 = *(_OWORD *)&v45[v41 + 4];
          *(__n128 *)unint64_t v47 = result;
          *((_OWORD *)v47 + 1) = v48;
          v41 += 8;
          v46 -= 8;
        }
        while (v46);
        uint64_t v6 = v44;
        if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_49:
          do
          {
            int v49 = *v33++;
            *v6++ = v49;
          }
          while (v33 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      uint64_t v14 = *a3;
      uint64_t v15 = a1 + 1;
      *a5 = *a1;
      if (a1 + 1 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(v14 + 32);
        uint64_t v18 = a5;
        uint64_t v19 = a5;
        do
        {
          while (1)
          {
            uint64_t v21 = *v19++;
            int v20 = v21;
            uint64_t v22 = *v15;
            result.n128_u64[0] = *(void *)(v17 + (v22 << 7) + 104);
            if (result.n128_f64[0] > *(double *)(v17 + (v21 << 7) + 104)) {
              break;
            }
            *uint64_t v19 = v22;
            ++v15;
            v16 += 4;
            uint64_t v18 = v19;
            if (v15 == a2) {
              return result;
            }
          }
          v18[1] = v20;
          long long v23 = a5;
          if (v18 != a5)
          {
            uint64_t v24 = v16;
            while (1)
            {
              long long v23 = (int *)((char *)a5 + v24);
              uint64_t v25 = *(int *)((char *)a5 + v24 - 4);
              result.n128_u64[0] = *(void *)(v17 + ((uint64_t)*v15 << 7) + 104);
              if (result.n128_f64[0] <= *(double *)(v17 + (v25 << 7) + 104)) {
                break;
              }
              *long long v23 = v25;
              v24 -= 4;
              if (!v24)
              {
                long long v23 = a5;
                break;
              }
            }
          }
          int v26 = *v15++;
          *long long v23 = v26;
          v16 += 4;
          uint64_t v18 = v19;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(__n128 *a1, int *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v15 = 0;
    uint64_t v16 = *a2;
    uint64_t v17 = *(void *)(*a4 + 32);
    result.n128_u64[0] = *(void *)(v17 + (v16 << 7) + 104);
    uint64_t v18 = -a5;
    while (1)
    {
      uint64_t v19 = a1->n128_i32[v15 / 4];
      if (result.n128_f64[0] > *(double *)(v17 + (v19 << 7) + 104)) {
        break;
      }
      v15 += 4;
      if (__CFADD__(v18++, 1)) {
        return result;
      }
    }
    uint64_t v21 = (__n128 *)((char *)a1 + v15);
    if (-v18 >= v10)
    {
      if (v18 == -1)
      {
        a1->n128_u32[v15 / 4] = v16;
        *a2 = v19;
        return result;
      }
      if (v18 <= 0) {
        uint64_t v39 = -v18;
      }
      else {
        uint64_t v39 = 1 - v18;
      }
      uint64_t v31 = v39 >> 1;
      uint64_t v25 = (int *)((char *)a1 + 4 * (v39 >> 1) + v15);
      uint64_t v24 = a2;
      if (a2 != a3)
      {
        unint64_t v40 = a3 - a2;
        uint64_t v24 = a2;
        do
        {
          unint64_t v41 = v40 >> 1;
          uint64_t v42 = &v24[v40 >> 1];
          uint64_t v44 = *v42;
          uint64_t v43 = v42 + 1;
          v40 += ~(v40 >> 1);
          if (*(double *)(v17 + (v44 << 7) + 104) > *(double *)(v17 + ((uint64_t)*v25 << 7) + 104)) {
            uint64_t v24 = v43;
          }
          else {
            unint64_t v40 = v41;
          }
        }
        while (v40);
      }
      uint64_t v23 = v24 - a2;
      if (v25 != a2)
      {
LABEL_22:
        uint64_t v32 = (char *)v24 - (char *)a2;
        if (v24 == a2)
        {
          a2 = v25;
        }
        else
        {
          uint64_t v33 = v25 + 1;
          uint64_t v118 = v23;
          if (v25 + 1 == a2)
          {
            int v111 = *v25;
            int v114 = a7;
            unint64_t v116 = a4;
            int64_t v45 = a3;
            uint64_t v113 = v31;
            memmove(v25, a2, (char *)v24 - (char *)a2);
            a4 = v116;
            uint64_t v23 = v118;
            uint64_t v31 = v113;
            a7 = v114;
            uint64_t v21 = (__n128 *)((char *)a1 + v15);
            a3 = v45;
            a2 = (int *)((char *)v25 + v32);
            *(int *)((char *)v25 + v32) = v111;
          }
          else
          {
            uint64_t v34 = v31;
            uint64_t v35 = a2 + 1;
            if (a2 + 1 == v24)
            {
              int v46 = *(v24 - 1);
              a2 = v25 + 1;
              if (v24 - 1 != v25)
              {
                int v115 = a7;
                unint64_t v117 = a4;
                unint64_t v47 = a3;
                int v112 = *(v24 - 1);
                memmove(v25 + 1, v25, (char *)(v24 - 1) - (char *)v25);
                int v46 = v112;
                uint64_t v21 = (__n128 *)((char *)a1 + v15);
                a7 = v115;
                a4 = v117;
                a3 = v47;
              }
              *uint64_t v25 = v46;
              uint64_t v31 = v34;
              uint64_t v23 = v118;
            }
            else
            {
              uint64_t v36 = a2 - v25;
              if (v36 == v32 >> 2)
              {
                do
                {
                  int v37 = *(v33 - 1);
                  *(v33 - 1) = *(v35 - 1);
                  *(v35 - 1) = v37;
                  if (v33 == a2) {
                    break;
                  }
                  ++v33;
                }
                while (v35++ != v24);
              }
              else
              {
                uint64_t v48 = v32 >> 2;
                uint64_t v49 = a2 - v25;
                do
                {
                  uint64_t v50 = v49;
                  uint64_t v49 = v48;
                  uint64_t v48 = v50 % v48;
                }
                while (v48);
                if (v49)
                {
                  unsigned __int32 v51 = &v25[v49];
                  do
                  {
                    int v53 = *--v51;
                    int v52 = v53;
                    uint64_t v54 = &v51[v36];
                    uint64_t v55 = v51;
                    do
                    {
                      uint64_t v56 = v54;
                      int *v55 = *v54;
                      uint64_t v57 = v24 - v54;
                      BOOL v58 = __OFSUB__(v36, v57);
                      uint64_t v60 = v36 - v57;
                      char v59 = (v60 < 0) ^ v58;
                      uint64_t v54 = &v25[v60];
                      if (v59) {
                        uint64_t v54 = &v56[v36];
                      }
                      uint64_t v55 = v56;
                    }
                    while (v54 != v51);
                    int *v56 = v52;
                  }
                  while (v51 != v25);
                }
                a2 = &v25[v32 >> 2];
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v22 = v10;
      }
      else {
        uint64_t v22 = v10 + 1;
      }
      uint64_t v23 = v22 >> 1;
      uint64_t v24 = &a2[v22 >> 1];
      uint64_t v25 = a2;
      if ((char *)a2 - (char *)a1 != v15)
      {
        unint64_t v26 = (uint64_t)((char *)a2 - (char *)a1 - v15) >> 2;
        uint64_t v25 = (int *)((char *)a1 + v15);
        do
        {
          unint64_t v27 = v26 >> 1;
          uint64_t v28 = &v25[v26 >> 1];
          uint64_t v30 = *v28;
          unint64_t v29 = v28 + 1;
          v26 += ~(v26 >> 1);
          if (*(double *)(v17 + ((uint64_t)*v24 << 7) + 104) > *(double *)(v17 + (v30 << 7) + 104)) {
            unint64_t v26 = v27;
          }
          else {
            uint64_t v25 = v29;
          }
        }
        while (v26);
      }
      uint64_t v31 = (uint64_t)((char *)v25 - (char *)a1 - v15) >> 2;
      if (v25 != a2) {
        goto LABEL_22;
      }
    }
    a2 = v24;
LABEL_57:
    a5 = -(v31 + v18);
    uint64_t v61 = v10 - v23;
    if (v31 + v23 >= v10 - (v31 + v23) - v18)
    {
      uint64_t v66 = a2;
      unint64_t v67 = v24;
      uint64_t v68 = a4;
      uint64_t v69 = v31;
      uint64_t v70 = v23;
      uint64_t v71 = a7;
      a1 = v21;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(a2, v67, a3);
      a4 = v68;
      a7 = v71;
      a2 = v25;
      uint64_t v72 = v70;
      a5 = v69;
      a3 = v66;
      uint64_t v10 = v72;
      if (!v72) {
        return result;
      }
    }
    else
    {
      double v62 = (__n128 *)((char *)a1 + v15);
      uint64_t v63 = a4;
      unint64_t v64 = a7;
      int64_t v65 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(v62, v25, a2);
      a4 = v63;
      a3 = v65;
      a7 = v64;
      a1 = (__n128 *)a2;
      a2 = v24;
      uint64_t v10 = v61;
      if (!v61) {
        return result;
      }
    }
  }
  if (a5 <= v10)
  {
    if (a1 != (__n128 *)a2)
    {
      unint64_t v83 = (char *)a2 - (char *)a1 - 4;
      int64_t v84 = a7;
      uint64_t v85 = (int *)a1;
      if (v83 < 0x1C) {
        goto LABEL_109;
      }
      int64_t v84 = a7;
      uint64_t v85 = (int *)a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20) {
        goto LABEL_109;
      }
      uint64_t v86 = (v83 >> 2) + 1;
      uint64_t v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
      int64_t v84 = &a7[v87];
      uint64_t v85 = (int *)((char *)a1 + v87);
      unint64_t v88 = a1 + 1;
      int64_t v89 = (__n128 *)(a7 + 16);
      uint64_t v90 = v86 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        uint64_t result = v88[-1];
        __n128 v91 = *v88;
        v89[-1] = result;
        __n128 *v89 = v91;
        v88 += 2;
        v89 += 2;
        v90 -= 8;
      }
      while (v90);
      if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_109:
        do
        {
          int v92 = *v85++;
          *(_DWORD *)int64_t v84 = v92;
          v84 += 4;
        }
        while (v85 != a2);
      }
      if (v84 != a7)
      {
        uint64_t v93 = *a4;
        while (a2 != a3)
        {
          uint64_t v94 = *a2;
          uint64_t v95 = *(void *)(v93 + 32);
          result.n128_u64[0] = *(void *)(v95 + (v94 << 7) + 104);
          double v96 = *(double *)(v95 + ((uint64_t)*(int *)a7 << 7) + 104);
          if (result.n128_f64[0] <= v96) {
            LODWORD(v94) = *(_DWORD *)a7;
          }
          a2 += result.n128_f64[0] > v96;
          a7 += 4 * (result.n128_f64[0] <= v96);
          a1->n128_u32[0] = v94;
          a1 = (__n128 *)((char *)a1 + 4);
          if (a7 == v84) {
            return result;
          }
        }
        memmove(a1, a7, v84 - a7);
      }
    }
    return result;
  }
  int64_t v73 = (char *)a3 - (char *)a2;
  if (a3 == a2) {
    return result;
  }
  unint64_t v74 = v73 - 4;
  if ((unint64_t)(v73 - 4) < 0x1C)
  {
    int v75 = a7;
    int v76 = a2;
    do
    {
LABEL_89:
      int v97 = *v76++;
      *(_DWORD *)int v75 = v97;
      v75 += 4;
    }
    while (v76 != a3);
    goto LABEL_90;
  }
  int v75 = a7;
  int v76 = a2;
  if ((unint64_t)(a7 - (char *)a2) < 0x20) {
    goto LABEL_89;
  }
  uint64_t v77 = (v74 >> 2) + 1;
  uint64_t v78 = v77 & 0x7FFFFFFFFFFFFFF8;
  int v75 = &a7[v78 * 4];
  int v76 = &a2[v78];
  long long v79 = (__n128 *)(a2 + 4);
  uint64_t v80 = (__n128 *)(a7 + 16);
  uint64_t v81 = v77 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    uint64_t result = v79[-1];
    __n128 v82 = *v79;
    v80[-1] = result;
    __n128 *v80 = v82;
    v79 += 2;
    v80 += 2;
    v81 -= 8;
  }
  while (v81);
  if (v77 != (v77 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_89;
  }
LABEL_90:
  if (v75 != a7)
  {
    long long v98 = a3;
    while (a2 != (int *)a1)
    {
      uint64_t v99 = *(a2 - 1);
      uint64_t v100 = *(void *)(*a4 + 32);
      result.n128_u64[0] = *(void *)(v100 + ((uint64_t)*((int *)v75 - 1) << 7) + 104);
      if (result.n128_f64[0] > *(double *)(v100 + (v99 << 7) + 104))
      {
        --a2;
      }
      else
      {
        LODWORD(v99) = *((_DWORD *)v75 - 1);
        v75 -= 4;
      }
      *--a3 = v99;
      --v98;
      if (v75 == a7) {
        return result;
      }
    }
    unint64_t v101 = v75 - a7 - 4;
    if (v101 < 0x2C || (unint64_t)(v75 - (char *)v98) < 0x20)
    {
      uint64_t v102 = (int *)v75;
      unint64_t v103 = a3;
      goto LABEL_101;
    }
    uint64_t v106 = 0;
    uint64_t v107 = (v101 >> 2) + 1;
    uint64_t v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v102 = (int *)&v75[-v108];
    unint64_t v103 = &a3[v108 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v109 = v107 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      uint64_t result = *(__n128 *)&v75[v106 * 4 - 16];
      double v110 = &a3[v106];
      *((_OWORD *)v110 - 2) = *(_OWORD *)&v75[v106 * 4 - 32];
      *((__n128 *)v110 - 1) = result;
      v106 -= 8;
      v109 -= 8;
    }
    while (v109);
    if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_101:
      unint64_t v104 = v103 - 1;
      do
      {
        int v105 = *--v102;
        *v104-- = v105;
      }
      while (v102 != (int *)a7);
    }
  }
  return result;
}

operations_research::sat::LinearProgrammingConstraint *operations_research::sat::LinearProgrammingConstraint::LinearProgrammingConstraint(operations_research::sat::LinearProgrammingConstraint *this, operations_research::sat::Model *a2)
{
  *(void *)this = &unk_26F0C4148;
  *((void *)this + 1) = &unk_26F0C4180;
  operations_research::sat::LinearConstraintManager::LinearConstraintManager((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 16), a2);
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  operations_research::glop::LinearProgram::LinearProgram((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 360));
  operations_research::glop::RevisedSimplex::RevisedSimplex((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  *((void *)this + 2419) = 500;
  operations_research::glop::SparseMatrixScaler::SparseMatrixScaler((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 19360));
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 1214) = _Q0;
  *((_OWORD *)this + 1215) = 0u;
  *((_OWORD *)this + 1216) = 0u;
  *((_OWORD *)this + 1217) = 0u;
  *((_OWORD *)this + 1218) = 0u;
  *((_OWORD *)this + 1219) = 0u;
  *((_OWORD *)this + 1220) = 0u;
  *((_OWORD *)this + 1221) = 0u;
  *((_OWORD *)this + 1222) = 0u;
  *((_OWORD *)this + 1223) = 0u;
  *((_OWORD *)this + 1224) = 0u;
  *((_OWORD *)this + 1225) = 0u;
  *((_OWORD *)this + 1226) = 0u;
  *((_OWORD *)this + 1227) = 0u;
  *((_OWORD *)this + 1228) = 0u;
  *((_OWORD *)this + 1229) = 0u;
  *((_DWORD *)this + 4920) = 0;
  *(_OWORD *)((char *)this + 19688) = 0u;
  *(_OWORD *)((char *)this + 19704) = 0u;
  *(_OWORD *)((char *)this + 19720) = 0u;
  *(_OWORD *)((char *)this + 19736) = 0u;
  *(_OWORD *)((char *)this + 19752) = 0u;
  *(_OWORD *)((char *)this + 19768) = 0u;
  *(_OWORD *)((char *)this + 19784) = 0u;
  *(_OWORD *)((char *)this + 19800) = 0u;
  *(_OWORD *)((char *)this + 19816) = 0u;
  *(_OWORD *)((char *)this + 19832) = 0u;
  *(_OWORD *)((char *)this + 19848) = 0u;
  *(_OWORD *)((char *)this + 19864) = 0u;
  *(_OWORD *)((char *)this + 19880) = 0u;
  *(_OWORD *)((char *)this + 19896) = 0u;
  *(_OWORD *)((char *)this + 19912) = 0u;
  *(_OWORD *)((char *)this + 19928) = 0u;
  *((void *)this + 2493) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 19981) = 0u;
  *((_OWORD *)this + 1248) = 0u;
  *((_OWORD *)this + 1247) = 0u;
  *((void *)this + 2500) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((void *)this + 2501) = a2;
  *((void *)this + 2502) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((void *)this + 2503) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  *((void *)this + 2504) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((void *)this + 2505) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristicsVector>((uint64_t)a2);
  *((void *)this + 2506) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  *((void *)this + 2507) = operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>((uint64_t)a2);
  uint64_t v9 = *((void *)this + 2503);
  uint64_t v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>((uint64_t)a2);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>((uint64_t)this + 20064, 0, 0, 0);
  *((void *)this + 2514) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 20120) = 0u;
  *(_OWORD *)((char *)this + 20136) = 0u;
  *((void *)this + 2519) = 0;
  *((void *)this + 2520) = v9;
  *((void *)this + 2521) = v10;
  *((void *)this + 2522) = 0;
  *((void *)this + 2524) = 0;
  *((void *)this + 2523) = 0;
  *((void *)this + 2525) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingDispatcher>((uint64_t)a2);
  *((_OWORD *)this + 1263) = 0u;
  *((_OWORD *)this + 1264) = 0u;
  *((_OWORD *)this + 1265) = 0u;
  *((_OWORD *)this + 1266) = 0u;
  *(_OWORD *)((char *)this + 20268) = 0u;
  *((void *)this + 2536) = 0;
  *((void *)this + 2538) = 0;
  *((void *)this + 2537) = 0;
  *(void *)((char *)this + 20310) = 0;
  *(_OWORD *)((char *)this + 20328) = 0u;
  *(_OWORD *)((char *)this + 20344) = 0u;
  *(_OWORD *)((char *)this + 20360) = 0u;
  *(_OWORD *)((char *)this + 20376) = 0u;
  *(_OWORD *)((char *)this + 20385) = 0u;
  *((void *)this + 2551) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintLpSolution>((uint64_t)a2);
  *((unsigned char *)this + 20416) = 0;
  *((void *)this + 2553) = 0;
  *((_OWORD *)this + 1277) = 0u;
  *((unsigned char *)this + 20448) = 0;
  *(_OWORD *)((char *)this + 20452) = 0u;
  *(_OWORD *)((char *)this + 20468) = 0u;
  *(_OWORD *)((char *)this + 20484) = 0u;
  *(_OWORD *)((char *)this + 20500) = 0u;
  *(_OWORD *)((char *)this + 20516) = 0u;
  *(_OWORD *)((char *)this + 20532) = 0u;
  *(_OWORD *)((char *)this + 20548) = 0u;
  *(_OWORD *)((char *)this + 20564) = 0u;
  *((void *)this + 2573) = &unk_26F0C2FE8;
  *((_OWORD *)this + 1287) = 0u;
  *((_OWORD *)this + 1288) = 0u;
  *((_OWORD *)this + 1289) = 0u;
  *((_OWORD *)this + 1290) = 0u;
  *((_OWORD *)this + 1291) = 0u;
  *((_OWORD *)this + 1292) = 0u;
  *((unsigned char *)this + 20688) = 0;
  *((_DWORD *)this + 5173) = 1;
  *(_OWORD *)((char *)this + 20696) = 0u;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v13, 0);
  v14 |= 1u;
  char v15 = 1;
  operations_research::glop::RevisedSimplex::SetParameters((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840), (const operations_research::glop::GlopParameters *)v13);
  uint64_t v11 = *((void *)this + 2500);
  if (*(unsigned char *)(v11 + 156) || *(_DWORD *)(v11 + 124) == 3) {
    *((unsigned char *)this + 20448) = 1;
  }
  operations_research::sat::IntegerTrail::RegisterReversibleClass(*((void **)this + 2503), (uint64_t)this + 20584);
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)v13);
  return this;
}

void sub_23CD19E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, operations_research::sat::IntegerRoundingCutHelper *a11, operations_research::sat::LinearConstraint *a12, void **a13, operations_research::sat::LinearConstraintManager *a14, operations_research::glop::RevisedSimplex *a15, char a16)
{
  uint64_t v25 = *(void **)(v16 + 20648);
  if (v25)
  {
    *(void *)(v16 + 20656) = v25;
    operator delete(v25);
    operations_research::RevRepository<int>::~RevRepository(v17);
    unint64_t v26 = *(void **)(v16 + 20552);
    if (!v26)
    {
LABEL_3:
      unint64_t v27 = *(void **)(v16 + 20528);
      if (!v27) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else
  {
    operations_research::RevRepository<int>::~RevRepository(v17);
    unint64_t v26 = *(void **)(v16 + 20552);
    if (!v26) {
      goto LABEL_3;
    }
  }
  *(void *)(v16 + 20560) = v26;
  operator delete(v26);
  unint64_t v27 = *(void **)(v16 + 20528);
  if (!v27)
  {
LABEL_4:
    uint64_t v28 = *(void **)(v16 + 20504);
    if (!v28) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  *(void *)(v16 + 20536) = v27;
  operator delete(v27);
  uint64_t v28 = *(void **)(v16 + 20504);
  if (!v28)
  {
LABEL_5:
    unint64_t v29 = *(void **)(v16 + 20480);
    if (!v29) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  *(void *)(v16 + 20512) = v28;
  operator delete(v28);
  unint64_t v29 = *(void **)(v16 + 20480);
  if (!v29)
  {
LABEL_6:
    uint64_t v30 = *(void **)(v16 + 20456);
    if (!v30) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_26:
  *(void *)(v16 + 20488) = v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v16 + 20456);
  if (!v30)
  {
LABEL_8:
    std::vector<operations_research::sat::CutGenerator>::~vector[abi:ne180100](v22);
    uint64_t v31 = *(void **)(v16 + 20376);
    if (v31)
    {
      *(void *)(v16 + 20384) = v31;
      operator delete(v31);
      uint64_t v32 = *(void **)(v16 + 20352);
      if (!v32)
      {
LABEL_10:
        uint64_t v33 = *v20;
        if (!*v20) {
          goto LABEL_11;
        }
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v32 = *(void **)(v16 + 20352);
      if (!v32) {
        goto LABEL_10;
      }
    }
    *(void *)(v16 + 20360) = v32;
    operator delete(v32);
    uint64_t v33 = *v20;
    if (!*v20)
    {
LABEL_11:
      std::vector<std::unique_ptr<operations_research::sat::IntegerSumLE>>::~vector[abi:ne180100](v23);
      uint64_t v34 = *(void **)(v16 + 20256);
      if (!v34) {
        goto LABEL_12;
      }
      goto LABEL_19;
    }
LABEL_18:
    *(void *)(v16 + 20336) = v33;
    operator delete(v33);
    std::vector<std::unique_ptr<operations_research::sat::IntegerSumLE>>::~vector[abi:ne180100](v23);
    uint64_t v34 = *(void **)(v16 + 20256);
    if (!v34)
    {
LABEL_12:
      uint64_t v35 = *(void **)(v16 + 20232);
      if (!v35) {
        goto LABEL_13;
      }
      goto LABEL_20;
    }
LABEL_19:
    *(void *)(v16 + 20264) = v34;
    operator delete(v34);
    uint64_t v35 = *(void **)(v16 + 20232);
    if (!v35)
    {
LABEL_13:
      uint64_t v36 = *v19;
      if (!*v19)
      {
LABEL_15:
        operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor(v21);
        absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::~flat_hash_map(a10);
        int v37 = *(void **)(v16 + 19920);
        if (v37)
        {
          *(void *)(v16 + 19928) = v37;
          operator delete(v37);
          double v38 = *(void **)(v16 + 19896);
          if (!v38)
          {
LABEL_30:
            uint64_t v39 = *(void **)(v16 + 19872);
            if (!v39) {
              goto LABEL_31;
            }
            goto LABEL_43;
          }
        }
        else
        {
          double v38 = *(void **)(v16 + 19896);
          if (!v38) {
            goto LABEL_30;
          }
        }
        *(void *)(v16 + 19904) = v38;
        operator delete(v38);
        uint64_t v39 = *(void **)(v16 + 19872);
        if (!v39)
        {
LABEL_31:
          unint64_t v40 = *(void **)(v16 + 19848);
          if (!v40) {
            goto LABEL_32;
          }
          goto LABEL_44;
        }
LABEL_43:
        *(void *)(v16 + 19880) = v39;
        operator delete(v39);
        unint64_t v40 = *(void **)(v16 + 19848);
        if (!v40)
        {
LABEL_32:
          unint64_t v41 = *(void **)(v16 + 19824);
          if (!v41) {
            goto LABEL_33;
          }
          goto LABEL_45;
        }
LABEL_44:
        *(void *)(v16 + 19856) = v40;
        operator delete(v40);
        unint64_t v41 = *(void **)(v16 + 19824);
        if (!v41)
        {
LABEL_33:
          uint64_t v42 = (operations_research::sat::LinearConstraint *)(v16 + 19712);
          uint64_t v43 = *(void **)(v16 + 19800);
          if (!v43) {
            goto LABEL_34;
          }
          goto LABEL_46;
        }
LABEL_45:
        *(void *)(v16 + 19832) = v41;
        operator delete(v41);
        uint64_t v42 = (operations_research::sat::LinearConstraint *)(v16 + 19712);
        uint64_t v43 = *(void **)(v16 + 19800);
        if (!v43)
        {
LABEL_34:
          uint64_t v44 = *(void **)(v16 + 19776);
          if (!v44) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
LABEL_46:
        *(void *)(v16 + 19808) = v43;
        operator delete(v43);
        uint64_t v44 = *(void **)(v16 + 19776);
        if (!v44)
        {
LABEL_36:
          operations_research::sat::LinearConstraint::~LinearConstraint(v42);
          operations_research::sat::IntegerRoundingCutHelper::~IntegerRoundingCutHelper(a11);
          operations_research::sat::LinearConstraint::~LinearConstraint(a12);
          operations_research::glop::RevisedSimplex::~RevisedSimplex(a15);
          operations_research::glop::LinearProgram::~LinearProgram(a13);
          int64_t v45 = *(void **)(v16 + 336);
          if (v45)
          {
            *(void *)(v16 + 344) = v45;
            operator delete(v45);
            gtl::ITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::sat::FeasibilityPump::LinearConstraintInternal,std::allocator<operations_research::sat::FeasibilityPump::LinearConstraintInternal>>::~ITIVector((void **)(v16 + 312));
            int v46 = *v18;
            if (!*v18)
            {
LABEL_38:
              operations_research::sat::LinearConstraintManager::~LinearConstraintManager(a14);
              _Unwind_Resume(a1);
            }
          }
          else
          {
            gtl::ITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::sat::FeasibilityPump::LinearConstraintInternal,std::allocator<operations_research::sat::FeasibilityPump::LinearConstraintInternal>>::~ITIVector((void **)(v16 + 312));
            int v46 = *v18;
            if (!*v18) {
              goto LABEL_38;
            }
          }
          *(void *)(v16 + 288) = v46;
          operator delete(v46);
          operations_research::sat::LinearConstraintManager::~LinearConstraintManager(a14);
          _Unwind_Resume(a1);
        }
LABEL_35:
        *(void *)(v16 + 19784) = v44;
        operator delete(v44);
        goto LABEL_36;
      }
LABEL_14:
      *(void *)(v16 + 20216) = v36;
      operator delete(v36);
      goto LABEL_15;
    }
LABEL_20:
    *(void *)(v16 + 20240) = v35;
    operator delete(v35);
    uint64_t v36 = *v19;
    if (!*v19) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_7:
  *(void *)(v16 + 20464) = v30;
  operator delete(v30);
  goto LABEL_8;
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintLpSolution>(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  unint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintLpSolution>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintLpSolution>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      unint64_t v2 = v1;
    }
    unint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintLpSolution>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void **std::vector<operations_research::sat::CutGenerator>::~vector[abi:ne180100](void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (!*a1) {
    return a1;
  }
  unint64_t v3 = (char *)a1[1];
  BOOL v4 = *a1;
  if (v3 == v2) {
    goto LABEL_13;
  }
  uint64_t v5 = v3 - 32;
  do
  {
    uint64_t v6 = (char *)*((void *)v3 - 1);
    if (v3 - 32 == v6)
    {
      (*(void (**)(char *))(*((void *)v3 - 4) + 32))(v3 - 32);
      uint64_t v7 = (void *)*((void *)v3 - 7);
      if (!v7) {
        goto LABEL_4;
      }
LABEL_11:
      *((void *)v3 - 6) = v7;
      operator delete(v7);
      goto LABEL_4;
    }
    if (v6) {
      (*(void (**)(char *))(*(void *)v6 + 40))(v6);
    }
    uint64_t v7 = (void *)*((void *)v3 - 7);
    if (v7) {
      goto LABEL_11;
    }
LABEL_4:
    v3 -= 56;
    v5 -= 56;
  }
  while (v3 != v2);
  BOOL v4 = *a1;
LABEL_13:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

void *std::vector<std::unique_ptr<operations_research::sat::IntegerSumLE>>::~vector[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    BOOL v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      BOOL v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint(operations_research::sat::LinearProgrammingConstraint *this)
{
  *(void *)this = &unk_26F0C4148;
  *((void *)this + 1) = &unk_26F0C4180;
  if (*operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint()::vlocal__ >= 1
    && (operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint()::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint()::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v46, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 83);
    unint64_t v2 = (void *)google::LogMessage::stream((google::LogMessage *)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Total number of simplex iterations: ", 36);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v46);
  }
  unint64_t v3 = (void *)*((void *)this + 2581);
  if (v3)
  {
    *((void *)this + 2582) = v3;
    operator delete(v3);
  }
  *((void *)this + 2573) = &unk_26F0C2FE8;
  BOOL v4 = (void *)*((void *)this + 2578);
  if (v4)
  {
    *((void *)this + 2579) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2575);
  if (v5)
  {
    *((void *)this + 2576) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 2569);
  if (v6)
  {
    *((void *)this + 2570) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 2566);
  if (v7)
  {
    *((void *)this + 2567) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 2563);
  if (v8)
  {
    *((void *)this + 2564) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 2560);
  if (v9)
  {
    *((void *)this + 2561) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 2557);
  if (v10)
  {
    *((void *)this + 2558) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *((void *)this + 2553);
  if (!v11) {
    goto LABEL_34;
  }
  uint64_t v12 = *((void *)this + 2554);
  double v13 = (void *)*((void *)this + 2553);
  if (v12 == v11) {
    goto LABEL_33;
  }
  uint64_t v14 = v12 - 32;
  do
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (v12 - 32 == v15)
    {
      (*(void (**)(uint64_t))(*(void *)(v12 - 32) + 32))(v12 - 32);
      uint64_t v16 = *(void **)(v12 - 56);
      if (!v16) {
        goto LABEL_24;
      }
LABEL_31:
      *(void *)(v12 - 48) = v16;
      operator delete(v16);
      goto LABEL_24;
    }
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
    }
    uint64_t v16 = *(void **)(v12 - 56);
    if (v16) {
      goto LABEL_31;
    }
LABEL_24:
    v12 -= 56;
    v14 -= 56;
  }
  while (v12 != v11);
  double v13 = (void *)*((void *)this + 2553);
LABEL_33:
  *((void *)this + 2554) = v11;
  operator delete(v13);
LABEL_34:
  uint64_t v17 = (void *)*((void *)this + 2547);
  if (v17)
  {
    *((void *)this + 2548) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 2544);
  if (v18)
  {
    *((void *)this + 2545) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 2541);
  if (v19)
  {
    *((void *)this + 2542) = v19;
    operator delete(v19);
  }
  int v20 = (void *)*((void *)this + 2536);
  if (v20)
  {
    uint64_t v21 = (void *)*((void *)this + 2537);
    uint64_t v22 = (void *)*((void *)this + 2536);
    if (v21 != v20)
    {
      do
      {
        uint64_t v24 = *--v21;
        uint64_t v23 = v24;
        *uint64_t v21 = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
        }
      }
      while (v21 != v20);
      uint64_t v22 = (void *)*((void *)this + 2536);
    }
    *((void *)this + 2537) = v20;
    operator delete(v22);
  }
  uint64_t v25 = (void *)*((void *)this + 2532);
  if (v25)
  {
    *((void *)this + 2533) = v25;
    operator delete(v25);
  }
  unint64_t v26 = (void *)*((void *)this + 2529);
  if (v26)
  {
    *((void *)this + 2530) = v26;
    operator delete(v26);
  }
  unint64_t v27 = (void *)*((void *)this + 2526);
  if (v27)
  {
    *((void *)this + 2527) = v27;
    operator delete(v27);
  }
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 20064));
  if (*((void *)this + 2496))
  {
    operator delete(*((void **)this + 2493));
    *((void *)this + 2493) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 2498) = 0;
    *((void *)this + 2494) = 0;
    *((void *)this + 2496) = 0;
    *((void *)this + 2495) = 0;
  }
  uint64_t v28 = (void *)*((void *)this + 2497);
  if (v28) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v28);
  }
  unint64_t v29 = (void *)*((void *)this + 2490);
  if (v29)
  {
    *((void *)this + 2491) = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)*((void *)this + 2487);
  if (v30)
  {
    *((void *)this + 2488) = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)*((void *)this + 2484);
  if (v31)
  {
    *((void *)this + 2485) = v31;
    operator delete(v31);
  }
  uint64_t v32 = (void *)*((void *)this + 2481);
  if (v32)
  {
    *((void *)this + 2482) = v32;
    operator delete(v32);
  }
  uint64_t v33 = (void *)*((void *)this + 2478);
  if (v33)
  {
    *((void *)this + 2479) = v33;
    operator delete(v33);
  }
  uint64_t v34 = (void *)*((void *)this + 2475);
  if (v34)
  {
    *((void *)this + 2476) = v34;
    operator delete(v34);
  }
  uint64_t v35 = (void *)*((void *)this + 2472);
  if (v35)
  {
    *((void *)this + 2473) = v35;
    operator delete(v35);
  }
  uint64_t v36 = (void *)*((void *)this + 2469);
  if (v36)
  {
    *((void *)this + 2470) = v36;
    operator delete(v36);
  }
  int v37 = (void *)*((void *)this + 2466);
  if (v37)
  {
    *((void *)this + 2467) = v37;
    operator delete(v37);
  }
  operations_research::sat::IntegerRoundingCutHelper::~IntegerRoundingCutHelper((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 19440));
  double v38 = (void *)*((void *)this + 2425);
  if (v38)
  {
    *((void *)this + 2426) = v38;
    operator delete(v38);
  }
  uint64_t v39 = (void *)*((void *)this + 2422);
  if (v39)
  {
    *((void *)this + 2423) = v39;
    operator delete(v39);
  }
  operations_research::glop::RevisedSimplex::~RevisedSimplex((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  operations_research::glop::LinearProgram::~LinearProgram((void **)this + 45);
  unint64_t v40 = (void *)*((void *)this + 42);
  if (v40)
  {
    *((void *)this + 43) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *((void *)this + 39);
  if (v41)
  {
    uint64_t v42 = *((void *)this + 40);
    uint64_t v43 = (void *)*((void *)this + 39);
    if (v42 != v41)
    {
      do
      {
        uint64_t v44 = *(void **)(v42 - 24);
        if (v44)
        {
          *(void *)(v42 - 16) = v44;
          operator delete(v44);
        }
        v42 -= 40;
      }
      while (v42 != v41);
      uint64_t v43 = (void *)*((void *)this + 39);
    }
    *((void *)this + 40) = v41;
    operator delete(v43);
  }
  int64_t v45 = (void *)*((void *)this + 35);
  if (v45)
  {
    *((void *)this + 36) = v45;
    operator delete(v45);
  }
  operations_research::sat::LinearConstraintManager::~LinearConstraintManager((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 16));
}

{
  uint64_t vars8;

  operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint(this);

  JUMPOUT(0x23ECF2BC0);
}

void non-virtual thunk to'operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint(operations_research::sat::LinearProgrammingConstraint *this)
{
}

{
  uint64_t vars8;

  operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint((operations_research::sat::LinearProgrammingConstraint *)((char *)this - 8));

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::LinearProgrammingConstraint::AddLinearConstraint(operations_research::sat::LinearProgrammingConstraint *this, int **a2)
{
  BOOL v4 = (char *)this + 16;
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)v8, (const operations_research::sat::LinearConstraint *)a2);
  operations_research::sat::LinearConstraintManager::Add((uint64_t)v4, v8, 0);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  while (v6 != v5)
  {
    int v7 = *v6++;
    operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable((uint64_t)this, v7 & 0xFFFFFFFE);
  }
}

void sub_23CD1AA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (uint64_t *)(a1 + 19944);
  unint64_t v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  unint64_t v7 = *(void *)(a1 + 19944);
  unint64_t v8 = v6 >> 7;
  unint64_t v9 = (v6 >> 7) ^ (v7 >> 12);
  uint64_t v10 = *(void *)(a1 + 19968);
  uint64_t v11 = 0x101010101010101 * (v6 & 0x7F);
  for (unint64_t i = v9; ; unint64_t i = v4 + v13)
  {
    unint64_t v13 = i & v10;
    uint64_t v14 = *(void *)(v7 + v13);
    unint64_t v15 = ((v14 ^ v11) - 0x101010101010101) & ~(v14 ^ v11) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_6:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v4 += 8;
  }
  uint64_t v16 = *(void *)(a1 + 19952);
  while (1)
  {
    unint64_t v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v10;
    if (*(_DWORD *)(v16 + 8 * v17) == a2) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_6;
    }
  }
  if (v17 != v10) {
    return *(unsigned int *)(v16 + 8 * v17 + 4);
  }
LABEL_9:
  uint64_t v18 = 0;
  uint64_t v19 = (void **)(a1 + 19920);
  uint64_t v20 = (*(void *)(a1 + 19928) - *(void *)(a1 + 19920)) >> 2;
  uint64_t v21 = (uint64_t *)(a1 + 20064);
  unint64_t v22 = *(void *)(a1 + 20064);
  unint64_t v23 = v8 ^ (v22 >> 12);
  uint64_t v24 = *(void *)(a1 + 20088);
  while (1)
  {
    unint64_t v25 = v23 & v24;
    uint64_t v26 = *(void *)(v22 + v25);
    unint64_t v27 = ((v26 ^ v11) - 0x101010101010101) & ~(v26 ^ v11) & 0x8080808080808080;
    if (v27) {
      break;
    }
LABEL_13:
    if ((v26 & (~v26 << 6) & 0x8080808080808080) != 0)
    {
      *(_DWORD *)(*(void *)(a1 + 20072)
                + 4
                * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::prepare_insert(v21, v6)) = a2;
      unint64_t v7 = *(void *)(a1 + 19944);
      uint64_t v10 = *(void *)(a1 + 19968);
      unint64_t v9 = v8 ^ (v7 >> 12);
      goto LABEL_17;
    }
    v18 += 8;
    unint64_t v23 = v18 + v25;
  }
  while (*(_DWORD *)(*(void *)(a1 + 20072) + 4 * ((v25 + (__clz(__rbit64(v27)) >> 3)) & v24)) != a2)
  {
    v27 &= v27 - 1;
    if (!v27) {
      goto LABEL_13;
    }
  }
LABEL_17:
  for (j = 0; ; unint64_t v9 = j + v30)
  {
    unint64_t v30 = v9 & v10;
    uint64_t v31 = *(void *)(v7 + v30);
    unint64_t v32 = ((v31 ^ v11) - 0x101010101010101) & ~(v31 ^ v11) & 0x8080808080808080;
    if (v32) {
      break;
    }
LABEL_22:
    if ((v31 & (~v31 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v34 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::prepare_insert(v5, v6);
      uint64_t v33 = *(void *)(a1 + 19952);
      uint64_t v35 = (_DWORD *)(v33 + 8 * v34);
      *uint64_t v35 = a2;
      v35[1] = 0;
      goto LABEL_25;
    }
    j += 8;
  }
  uint64_t v33 = *(void *)(a1 + 19952);
  while (1)
  {
    unint64_t v34 = (v30 + (__clz(__rbit64(v32)) >> 3)) & v10;
    if (*(_DWORD *)(v33 + 8 * v34) == a2) {
      break;
    }
    v32 &= v32 - 1;
    if (!v32) {
      goto LABEL_22;
    }
  }
LABEL_25:
  uint64_t v114 = v20;
  *(_DWORD *)(v33 + 8 * v34 + 4) = v20;
  uint64_t v36 = *(char **)(a1 + 19928);
  unint64_t v37 = *(void *)(a1 + 19936);
  if ((unint64_t)v36 < v37)
  {
    *(_DWORD *)uint64_t v36 = a2;
    uint64_t v38 = (uint64_t)(v36 + 4);
    goto LABEL_46;
  }
  uint64_t v39 = (char *)*v19;
  uint64_t v40 = v36 - (unsigned char *)*v19;
  uint64_t v41 = v40 >> 2;
  unint64_t v42 = (v40 >> 2) + 1;
  if (v42 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v43 = v37 - (void)v39;
  if (v43 >> 1 > v42) {
    unint64_t v42 = v43 >> 1;
  }
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v44 = v42;
  }
  if (v44)
  {
    if (v44 >> 62) {
      goto LABEL_103;
    }
    int64_t v45 = operator new(4 * v44);
    int v46 = &v45[4 * v41];
    unint64_t v47 = &v45[4 * v44];
    *int v46 = a2;
    uint64_t v38 = (uint64_t)(v46 + 1);
    int64_t v48 = v36 - v39;
    if (v36 == v39) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  int64_t v45 = 0;
  int v46 = (_DWORD *)(4 * v41);
  unint64_t v47 = 0;
  *(_DWORD *)(4 * v41) = a2;
  uint64_t v38 = 4 * v41 + 4;
  int64_t v48 = v36 - v39;
  if (v36 != v39)
  {
LABEL_38:
    unint64_t v49 = v48 - 4;
    if (v49 < 0x2C) {
      goto LABEL_107;
    }
    if ((unint64_t)(v36 - v45 - v40) < 0x20) {
      goto LABEL_107;
    }
    uint64_t v50 = (v49 >> 2) + 1;
    uint64_t v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
    int v52 = &v36[-v51];
    int v46 = (_DWORD *)((char *)v46 - v51);
    int v53 = &v45[4 * v41 - 16];
    uint64_t v54 = v36 - 16;
    uint64_t v55 = v50 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v56 = *(_OWORD *)v54;
      *(v53 - 1) = *((_OWORD *)v54 - 1);
      *int v53 = v56;
      v53 -= 2;
      v54 -= 32;
      v55 -= 8;
    }
    while (v55);
    uint64_t v36 = v52;
    if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_107:
      do
      {
        int v57 = *((_DWORD *)v36 - 1);
        v36 -= 4;
        *--int v46 = v57;
      }
      while (v36 != v39);
    }
  }
LABEL_44:
  *(void *)(a1 + 19920) = v46;
  *(void *)(a1 + 19928) = v38;
  *(void *)(a1 + 19936) = v47;
  if (v39) {
    operator delete(v39);
  }
LABEL_46:
  *(void *)(a1 + 19928) = v38;
  BOOL v58 = *(char **)(a1 + 20336);
  unint64_t v59 = *(void *)(a1 + 20344);
  if ((unint64_t)v58 >= v59)
  {
    uint64_t v61 = *(char **)(a1 + 20328);
    uint64_t v62 = (v58 - v61) >> 3;
    unint64_t v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61) {
      goto LABEL_102;
    }
    uint64_t v64 = v59 - (void)v61;
    if (v64 >> 2 > v63) {
      unint64_t v63 = v64 >> 2;
    }
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v65 = v63;
    }
    if (v65)
    {
      if (v65 >> 61) {
        goto LABEL_103;
      }
      uint64_t v66 = operator new(8 * v65);
    }
    else
    {
      uint64_t v66 = 0;
    }
    unint64_t v67 = &v66[8 * v62];
    uint64_t v68 = &v66[8 * v65];
    *unint64_t v67 = 0x7FF0000000000000;
    uint64_t v60 = v67 + 1;
    if (v58 != v61)
    {
      unint64_t v69 = v58 - v61 - 8;
      if (v69 < 0x58) {
        goto LABEL_108;
      }
      if ((unint64_t)(v61 - v66) < 0x20) {
        goto LABEL_108;
      }
      uint64_t v70 = (v69 >> 3) + 1;
      uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v72 = &v58[-v71];
      unint64_t v67 = (void *)((char *)v67 - v71);
      int64_t v73 = &v66[8 * v62 - 16];
      unint64_t v74 = v58 - 16;
      uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        *int64_t v73 = v76;
        v73 -= 2;
        v74 -= 32;
        v75 -= 4;
      }
      while (v75);
      BOOL v58 = v72;
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_108:
        do
        {
          uint64_t v77 = *((void *)v58 - 1);
          v58 -= 8;
          *--unint64_t v67 = v77;
        }
        while (v58 != v61);
      }
    }
    *(void *)(a1 + 20328) = v67;
    *(void *)(a1 + 20336) = v60;
    *(void *)(a1 + 20344) = v68;
    if (v61) {
      operator delete(v61);
    }
  }
  else
  {
    *(void *)BOOL v58 = 0x7FF0000000000000;
    uint64_t v60 = v58 + 8;
  }
  *(void *)(a1 + 20336) = v60;
  uint64_t v78 = *(char **)(a1 + 20360);
  unint64_t v79 = *(void *)(a1 + 20368);
  if ((unint64_t)v78 < v79)
  {
    *(void *)uint64_t v78 = 0;
    uint64_t v80 = (uint64_t)(v78 + 8);
    goto LABEL_88;
  }
  uint64_t v81 = *(char **)(a1 + 20352);
  uint64_t v82 = (v78 - v81) >> 3;
  unint64_t v83 = v82 + 1;
  if ((unint64_t)(v82 + 1) >> 61) {
LABEL_102:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  uint64_t v84 = v79 - (void)v81;
  if (v84 >> 2 > v83) {
    unint64_t v83 = v84 >> 2;
  }
  if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v85 = v83;
  }
  if (!v85)
  {
    uint64_t v86 = 0;
    uint64_t v87 = (void *)(8 * v82);
    unint64_t v88 = 0;
    *(void *)(8 * v82) = 0;
    uint64_t v80 = 8 * v82 + 8;
    int64_t v89 = v78 - v81;
    if (v78 == v81) {
      goto LABEL_86;
    }
LABEL_80:
    unint64_t v90 = v89 - 8;
    if (v90 < 0x58) {
      goto LABEL_109;
    }
    if ((unint64_t)(v81 - v86) < 0x20) {
      goto LABEL_109;
    }
    uint64_t v91 = (v90 >> 3) + 1;
    uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v93 = &v78[-v92];
    uint64_t v87 = (void *)((char *)v87 - v92);
    uint64_t v94 = &v86[8 * v82 - 16];
    uint64_t v95 = v78 - 16;
    uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v97 = *(_OWORD *)v95;
      *(v94 - 1) = *((_OWORD *)v95 - 1);
      *uint64_t v94 = v97;
      v94 -= 2;
      v95 -= 32;
      v96 -= 4;
    }
    while (v96);
    uint64_t v78 = v93;
    if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_109:
      do
      {
        uint64_t v98 = *((void *)v78 - 1);
        v78 -= 8;
        *--uint64_t v87 = v98;
      }
      while (v78 != v81);
    }
    goto LABEL_86;
  }
  if (v85 >> 61) {
LABEL_103:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  uint64_t v86 = operator new(8 * v85);
  uint64_t v87 = &v86[8 * v82];
  unint64_t v88 = &v86[8 * v85];
  *uint64_t v87 = 0;
  uint64_t v80 = (uint64_t)(v87 + 1);
  int64_t v89 = v78 - v81;
  if (v78 != v81) {
    goto LABEL_80;
  }
LABEL_86:
  *(void *)(a1 + 20352) = v87;
  *(void *)(a1 + 20360) = v80;
  *(void *)(a1 + 20368) = v88;
  if (v81) {
    operator delete(v81);
  }
LABEL_88:
  uint64_t v99 = 0;
  *(void *)(a1 + 20360) = v80;
  uint64_t v100 = *(void **)(a1 + 20200);
  unint64_t v101 = v8 ^ (*v100 >> 12);
  uint64_t v102 = v100[3];
  uint64_t v28 = v114;
  while (1)
  {
    unint64_t v103 = v101 & v102;
    uint64_t v104 = *(void *)(*v100 + v103);
    unint64_t v105 = ((v104 ^ v11) - 0x101010101010101) & ~(v104 ^ v11) & 0x8080808080808080;
    if (v105) {
      break;
    }
LABEL_93:
    if ((v104 & (~v104 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v107 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::prepare_insert(*(uint64_t **)(a1 + 20200), v6);
      uint64_t v106 = v100[1];
      uint64_t v108 = v106 + 16 * v107;
      *(_DWORD *)uint64_t v108 = a2;
      *(void *)(v108 + 8) = 0;
      goto LABEL_96;
    }
    v99 += 8;
    unint64_t v101 = v99 + v103;
  }
  uint64_t v106 = v100[1];
  while (1)
  {
    unint64_t v107 = (v103 + (__clz(__rbit64(v105)) >> 3)) & v102;
    if (*(_DWORD *)(v106 + 16 * v107) == a2) {
      break;
    }
    v105 &= v105 - 1;
    if (!v105) {
      goto LABEL_93;
    }
  }
LABEL_96:
  *(void *)(v106 + 16 * v107 + 8) = a1;
  uint64_t v109 = *(uint64_t **)(a1 + 20408);
  uint64_t v110 = *v109;
  unint64_t v111 = (v109[1] - *v109) >> 3;
  if (v111 <= (a2 | 1))
  {
    unint64_t v112 = (a2 | 1) + 1;
    uint64_t v115 = 0;
    if (v112 <= v111)
    {
      if (v112 < v111) {
        v109[1] = v110 + 8 * v112;
      }
    }
    else
    {
      std::vector<double>::__append((uint64_t)v109, v112 - v111, &v115);
    }
  }
  return v28;
}

void operations_research::sat::LinearProgrammingConstraint::SetObjectiveCoefficient(uint64_t a1, int a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 20416))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 127);
    uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: !lp_constraint_is_registered_ ", 44);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v22);
  }
  *(unsigned char *)(a1 + 19992) = 1;
  unsigned int v5 = a2 & 0xFFFFFFFE;
  if (a2) {
    uint64_t v6 = -a3;
  }
  else {
    uint64_t v6 = a3;
  }
  operations_research::sat::LinearConstraintManager::SetObjectiveCoefficient(a1 + 16, a2 & 0xFFFFFFFE, v6);
  int MirrorVariable = operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable(a1, v5);
  int v8 = MirrorVariable;
  uint64_t v10 = *(_DWORD **)(a1 + 288);
  unint64_t v9 = *(void *)(a1 + 296);
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = *(_DWORD **)(a1 + 280);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v10 - v12) + 1;
    if (v13 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v12) >> 2);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x1555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v16 = (char *)operator new(12 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v17 = &v16[4 * (v10 - v12)];
    *(_DWORD *)unint64_t v17 = v8;
    *(void *)(v17 + 4) = v6;
    uint64_t v11 = v17 + 12;
    if (v10 != v12)
    {
      do
      {
        uint64_t v18 = *(void *)(v10 - 3);
        v10 -= 3;
        int v19 = v10[2];
        *(void *)(v17 - 12) = v18;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v19;
      }
      while (v10 != v12);
      uint64_t v10 = *(_DWORD **)(a1 + 280);
    }
    *(void *)(a1 + 280) = v17;
    *(void *)(a1 + 288) = v11;
    *(void *)(a1 + 296) = &v16[12 * v15];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v10 = MirrorVariable;
    *(void *)(v10 + 1) = v6;
    uint64_t v11 = v10 + 3;
  }
  *(void *)(a1 + 288) = v11;
  if (a3 >= 0) {
    uint64_t v20 = a3;
  }
  else {
    uint64_t v20 = -a3;
  }
  if (*(void *)(a1 + 304) > v20) {
    uint64_t v20 = *(void *)(a1 + 304);
  }
  *(void *)(a1 + 304) = v20;
}

void sub_23CD1B324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(operations_research::sat::LinearProgrammingConstraint *this)
{
  unint64_t v1 = this;
  uint64_t v2 = *((void *)this + 39);
  for (uint64_t i = *((void *)this + 40); i != v2; i -= 40)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  *((void *)v1 + 40) = v2;
  *((void *)v1 + 43) = *((void *)v1 + 42);
  unsigned int v5 = (int *)*((void *)v1 + 9);
  uint64_t v98 = (int *)*((void *)v1 + 10);
  uint64_t v100 = v1;
  if (v5 != v98)
  {
    uint64_t v96 = (void **)((char *)v1 + 312);
    uint64_t v97 = (uint64_t)v1 + 336;
    do
    {
      uint64_t v10 = *v5;
      uint64_t v11 = *((void *)v1 + 6);
      uint64_t v106 = 0;
      *(_OWORD *)uint64_t v104 = 0u;
      *(_OWORD *)long long __p = 0u;
      unint64_t v12 = *((void *)v1 + 40);
      if (v12 >= *((void *)v1 + 41))
      {
        unint64_t v13 = std::vector<operations_research::sat::FeasibilityPump::LinearConstraintInternal>::__push_back_slow_path<operations_research::sat::FeasibilityPump::LinearConstraintInternal>(v96, (uint64_t)v104);
        unint64_t v14 = __p[0];
        *((void *)v1 + 40) = v13;
        if (v14)
        {
          __p[1] = v14;
          operator delete(v14);
          unint64_t v13 = (char *)*((void *)v1 + 40);
        }
      }
      else
      {
        *(void *)(v12 + 32) = 0;
        *(_OWORD *)unint64_t v12 = 0uLL;
        *(_OWORD *)(v12 + 16) = 0uLL;
        *(_OWORD *)(v12 + 16) = *(_OWORD *)__p;
        *(void *)(v12 + 32) = v106;
        unint64_t v13 = (char *)(v12 + 40);
        *((void *)v1 + 40) = v12 + 40;
      }
      unint64_t v15 = (uint64_t *)(v11 + (v10 << 7));
      *((void *)v13 - 5) = *v15;
      *((void *)v13 - 4) = v15[1];
      uint64_t v17 = v15[2];
      uint64_t v16 = v15[3];
      v102[0] = 0;
      uint64_t v19 = *v15;
      uint64_t v18 = v15[1];
      if (*v15 > v18)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v104, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 167);
        uint64_t v94 = (void *)google::LogMessage::stream((google::LogMessage *)v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Trivial infeasible bound in an LP constraint", 44);
        google::LogMessage::~LogMessage((google::LogMessage *)v104);
        return 0;
      }
      if (v19 <= (uint64_t)0x8000000000000002)
      {
        uint64_t v21 = 0;
        uint64_t v99 = v5;
        if (v18 > 0x7FFFFFFFFFFFFFFDLL) {
          goto LABEL_32;
        }
      }
      else
      {
        if (v19 >= 0) {
          uint64_t v20 = *v15;
        }
        else {
          uint64_t v20 = -v19;
        }
        if (v19) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        v102[0] = v21;
        uint64_t v18 = v15[1];
        uint64_t v99 = v5;
        if (v18 > 0x7FFFFFFFFFFFFFFDLL) {
          goto LABEL_32;
        }
      }
      if (v18 < 0) {
        uint64_t v18 = -v18;
      }
      if (v21 > v18) {
        uint64_t v18 = v21;
      }
      v102[0] = v18;
LABEL_32:
      unint64_t v22 = v16 - v17;
      if ((int)(v22 >> 2) >= 1)
      {
        uint64_t v23 = 0;
        unint64_t v101 = (void **)(v13 - 24);
        uint64_t v24 = (v22 >> 2);
        do
        {
          int v26 = *(_DWORD *)(v15[2] + 4 * v23);
          uint64_t v27 = *(void *)(v15[5] + 8 * v23);
          if (v26) {
            uint64_t v28 = -v27;
          }
          else {
            uint64_t v28 = *(void *)(v15[5] + 8 * v23);
          }
          unsigned int v29 = v26 & 0xFFFFFFFE;
          if (v27 >= 0) {
            uint64_t v30 = *(void *)(v15[5] + 8 * v23);
          }
          else {
            uint64_t v30 = -v27;
          }
          if (v102[0] > v30) {
            uint64_t v30 = v102[0];
          }
          v102[0] = v30;
          int MirrorVariable = operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable((uint64_t)v1, v29);
          int v32 = MirrorVariable;
          unint64_t v34 = (char *)*((void *)v13 - 2);
          unint64_t v33 = *((void *)v13 - 1);
          if ((unint64_t)v34 < v33)
          {
            *(_DWORD *)unint64_t v34 = MirrorVariable;
            *(void *)(v34 + 4) = v28;
            unint64_t v25 = v34 + 12;
          }
          else
          {
            uint64_t v35 = (char *)*v101;
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (unsigned char *)*v101) >> 2);
            unint64_t v37 = v36 + 1;
            if (v36 + 1 > 0x1555555555555555) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v35) >> 2);
            if (2 * v38 > v37) {
              unint64_t v37 = 2 * v38;
            }
            if (v38 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v39 = 0x1555555555555555;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              if (v39 > 0x1555555555555555) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v40 = (char *)operator new(12 * v39);
            }
            else
            {
              uint64_t v40 = 0;
            }
            uint64_t v41 = &v40[12 * v36];
            *(_DWORD *)uint64_t v41 = v32;
            *(void *)(v41 + 4) = v28;
            unint64_t v42 = v41;
            if (v34 != v35)
            {
              unint64_t v1 = v100;
              do
              {
                uint64_t v43 = *(void *)(v34 - 12);
                v34 -= 12;
                int v44 = *((_DWORD *)v34 + 2);
                *(void *)(v42 - 12) = v43;
                v42 -= 12;
                *((_DWORD *)v42 + 2) = v44;
              }
              while (v34 != v35);
              unint64_t v34 = (char *)*v101;
              int64_t v45 = &v40[12 * v39];
              unint64_t v25 = v41 + 12;
              *((void *)v13 - 3) = v42;
              *((void *)v13 - 2) = v41 + 12;
              *((void *)v13 - 1) = v45;
              if (!v34) {
                goto LABEL_35;
              }
LABEL_61:
              operator delete(v34);
              goto LABEL_35;
            }
            unint64_t v1 = v100;
            int v46 = &v40[12 * v39];
            unint64_t v25 = v41 + 12;
            *((void *)v13 - 3) = v41;
            *((void *)v13 - 2) = v41 + 12;
            *((void *)v13 - 1) = v46;
            if (v34) {
              goto LABEL_61;
            }
          }
LABEL_35:
          *((void *)v13 - 2) = v25;
          ++v23;
        }
        while (v23 != v24);
      }
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(v97, v102);
      uint64_t v6 = *((void *)v13 - 3);
      unint64_t v7 = (int *)*((void *)v13 - 2);
      unint64_t v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 2));
      if (v7 == (int *)v6) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v8;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v6, v7, (uint64_t)v104, v9, 1);
      unsigned int v5 = v99 + 1;
    }
    while (v99 + 1 != v98);
  }
  unint64_t v47 = (operations_research::sat::LinearProgrammingConstraint *)((char *)v1 + 360);
  operations_research::glop::LinearProgram::Clear((operations_research::sat::LinearProgrammingConstraint *)((char *)v1 + 360));
  if (*((void *)v1 + 2491) != *((void *)v1 + 2490))
  {
    unint64_t v48 = 0;
    do
    {
      LODWORD(v104[0]) = v48;
      int NewVariable = operations_research::glop::LinearProgram::CreateNewVariable((operations_research::sat::LinearProgrammingConstraint *)((char *)v1 + 360));
      if (LODWORD(v104[0]) != NewVariable) {
        google::MakeCheckOpString<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>((int)v104, (int)&NewVariable, "glop::ColIndex(i) == lp_data_.CreateNewVariable()");
      }
      ++v48;
    }
    while (v48 < (uint64_t)(*((void *)v1 + 2491) - *((void *)v1 + 2490)) >> 2);
  }
  uint64_t v49 = *((void *)v1 + 35);
  for (uint64_t j = *((void *)v1 + 36); v49 != j; v49 += 12)
  {
    uint64_t v51 = *(void *)(v49 + 4);
    double v52 = (double)v51;
    if (v51 < (uint64_t)0x8000000000000003) {
      double v52 = -INFINITY;
    }
    if (v51 > 0x7FFFFFFFFFFFFFFDLL) {
      double v52 = INFINITY;
    }
    operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v47, *(_DWORD *)v49, v52);
  }
  int v53 = (uint64_t *)*((void *)v100 + 39);
  for (k = (uint64_t *)*((void *)v100 + 40); v53 != k; v53 += 5)
  {
    int NewConstraint = operations_research::glop::LinearProgram::CreateNewConstraint(v47);
    uint64_t v56 = v53[1];
    double v57 = (double)*v53;
    double v58 = -INFINITY;
    if (*v53 < (uint64_t)0x8000000000000003) {
      double v57 = -INFINITY;
    }
    if (*v53 > 0x7FFFFFFFFFFFFFFDLL) {
      double v57 = INFINITY;
    }
    if (v56 >= (uint64_t)0x8000000000000003) {
      double v58 = (double)v56;
    }
    if (v56 > 0x7FFFFFFFFFFFFFFDLL) {
      double v58 = INFINITY;
    }
    int v59 = NewConstraint;
    operations_research::glop::LinearProgram::SetConstraintBounds((uint64_t)v47, NewConstraint, v57, v58);
    uint64_t v60 = v53[2];
    for (uint64_t m = v53[3]; v60 != m; v60 += 12)
    {
      uint64_t v62 = *(void *)(v60 + 4);
      double v63 = (double)v62;
      if (v62 < (uint64_t)0x8000000000000003) {
        double v63 = -INFINITY;
      }
      if (v62 > 0x7FFFFFFFFFFFFFFDLL) {
        double v63 = INFINITY;
      }
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v47, v59, *(_DWORD *)v60, v63);
    }
  }
  *((unsigned char *)v100 + 801) = 1;
  unint64_t v64 = *((void *)v100 + 2491) - *((void *)v100 + 2490);
  if ((int)(v64 >> 2) >= 1)
  {
    uint64_t v65 = 0;
    uint64_t v66 = (v64 >> 2);
    do
    {
      int v67 = *(_DWORD *)(*((void *)v100 + 2490) + 4 * v65);
      uint64_t v68 = *(void *)(*((void *)v100 + 2503) + 144);
      uint64_t v69 = *(void *)(v68 + 20 * v67);
      double v70 = (double)v69;
      double v71 = -INFINITY;
      if (v69 < (uint64_t)0x8000000000000003) {
        double v70 = -INFINITY;
      }
      if (v69 > 0x7FFFFFFFFFFFFFFDLL) {
        double v70 = INFINITY;
      }
      uint64_t v72 = *(void *)(v68 + 20 * (v67 ^ 1));
      if (v72 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v71 = (double)-v72;
      }
      if (v72 < (uint64_t)0x8000000000000003) {
        double v71 = INFINITY;
      }
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v47, v65++, v70, v71);
    }
    while (v66 != v65);
  }
  v74.n128_f64[0] = operations_research::glop::LpScalingHelper::Scale((operations_research::sat::LinearProgrammingConstraint *)((char *)v100 + 19360), (float64x2_t **)v47);
  unint64_t v75 = *((void *)v100 + 2491) - *((void *)v100 + 2490);
  if ((int)(v75 >> 2) >= 1)
  {
    uint64_t v76 = 0;
    uint64_t v77 = (v75 >> 2);
    do
    {
      int v78 = *(_DWORD *)(*((void *)v100 + 2490) + 4 * v76);
      uint64_t v79 = *(void *)(*((void *)v100 + 2503) + 40);
      uint64_t v80 = *(void *)(v79 + 12 * v78);
      double v81 = (double)v80;
      if (v80 < (uint64_t)0x8000000000000003) {
        double v81 = -INFINITY;
      }
      if (v80 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v82 = v81;
      }
      else {
        double v82 = INFINITY;
      }
      uint64_t v83 = *(void *)(v79 + 12 * (v78 ^ 1));
      double v84 = (double)-v83;
      if (v83 > 0x7FFFFFFFFFFFFFFDLL) {
        double v84 = -INFINITY;
      }
      if (v83 >= (uint64_t)0x8000000000000003) {
        double v85 = v84;
      }
      else {
        double v85 = INFINITY;
      }
      double v86 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)v100 + 19360, v76);
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v47, v76++, v86 * v82, v86 * v85);
    }
    while (v77 != v76);
  }
  uint64_t v87 = 1;
  *((unsigned char *)v100 + 801) = 1;
  operations_research::glop::LinearProgram::AddSlackVariablesWhereNecessary(v47, 0, v73, v74);
  if (*operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(void)::vlocal__ > 0
    && (operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v102, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 229);
    unint64_t v88 = (void *)google::LogMessage::stream((google::LogMessage *)v102);
    int64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"LP relaxation: ", 15);
    operations_research::glop::LinearProgram::GetDimensionString(v47, (uint64_t)v104);
    if (SHIBYTE(__p[0]) >= 0) {
      unint64_t v90 = v104;
    }
    else {
      unint64_t v90 = (void **)v104[0];
    }
    if (SHIBYTE(__p[0]) >= 0) {
      uint64_t v91 = HIBYTE(__p[0]);
    }
    else {
      uint64_t v91 = (uint64_t)v104[1];
    }
    uint64_t v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)". ", 2);
    uint64_t v93 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)" Managed constraints.", 21);
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v104[0]);
    }
    google::LogMessage::~LogMessage((google::LogMessage *)v102);
    return 1;
  }
  return v87;
}

void sub_23CD1BB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD1BB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD1BB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD1BB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD1BB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void sub_23CD1BB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching(operations_research::TimeLimit **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0xFFF0000000000000;
  *(void *)(a2 + 16) = 0x8000000000000002;
  uint64_t v4 = (operations_research::glop::RevisedSimplex *)(this + 105);
  uint64_t State = operations_research::glop::RevisedSimplex::GetState((operations_research::glop::RevisedSimplex *)(this + 105));
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  unint64_t v7 = *(const void **)State;
  uint64_t v6 = *(void *)(State + 8);
  size_t v8 = v6 - *(void *)State;
  if (v6 != *(void *)State)
  {
    if ((v8 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v6 - *(void *)State);
    uint64_t v10 = &v9[v8];
    uint64_t v21 = v9;
    uint64_t v23 = &v9[v8];
    memcpy(v9, v7, v8);
    unint64_t v22 = v10;
  }
  operations_research::glop::RevisedSimplex::Solve(v4, (const operations_research::glop::LinearProgram *)(this + 45), this[2502], (uint64_t)&v18);
  this[2588] = (operations_research::TimeLimit *)((char *)this[2588]
                                                + operations_research::glop::RevisedSimplex::GetNumberOfIterations(v4));
  operations_research::glop::RevisedSimplex::LoadStateForNextSolve((uint64_t)v4, (char **)&v21);
  if (v18)
  {
    if (*operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching(void)::vlocal__[0] >= 1
      && (operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching(void)::vlocal__[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 243);
      uint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
      unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"The LP solver encountered an error: ", 36);
      if ((v20 & 0x80u) == 0) {
        unint64_t v13 = __p;
      }
      else {
        unint64_t v13 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v14 = v20;
      }
      else {
        uint64_t v14 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      google::LogMessage::~LogMessage((google::LogMessage *)v17);
    }
    *(unsigned char *)a2 = 9;
    if ((char)v20 < 0) {
      goto LABEL_19;
    }
  }
  else
  {
    int ProblemStatus = operations_research::glop::RevisedSimplex::GetProblemStatus(v4);
    *(unsigned char *)a2 = ProblemStatus;
    if ((ProblemStatus & 0xFFFFFFF7) != 0)
    {
      if (((char)v20 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    double ObjectiveValue = operations_research::glop::RevisedSimplex::GetObjectiveValue(v4);
    *(double *)(a2 + 8) = ObjectiveValue;
    *(void *)(a2 + 16) = vcvtpd_s64_f64(ObjectiveValue + -0.0001);
    if ((char)v20 < 0) {
LABEL_19:
    }
      operator delete(__p[0]);
  }
LABEL_20:
  if (v21)
  {
    unint64_t v22 = v21;
    operator delete(v21);
  }
}

void sub_23CD1BDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::FillReducedCostReasonIn(void *a1, void *a2, uint64_t a3)
{
  unsigned int v5 = *(int **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  unint64_t v6 = a1[2491] - a1[2490];
  if ((int)(v6 >> 2) >= 1)
  {
    unint64_t v7 = a2;
    uint64_t v8 = 0;
    uint64_t v9 = (v6 >> 2);
    do
    {
      double v11 = *(double *)(*v7 + 8 * v8);
      if (v11 <= 0.000001)
      {
        if (v11 >= -0.000001) {
          goto LABEL_5;
        }
        v35[0] = *(_DWORD *)(a1[2490] + 4 * v8) ^ 1;
        *(void *)&v35[1] = *(void *)(*(void *)(a1[2503] + 40) + 12 * v35[0]);
        uint64_t v12 = *(void *)v35;
        uint64_t v13 = HIDWORD(*(void *)&v35[1]);
        unint64_t v23 = *(void *)(a3 + 16);
        if ((unint64_t)v5 < v23)
        {
LABEL_3:
          *(void *)unsigned int v5 = v12;
          v5[2] = v13;
          uint64_t v10 = v5 + 3;
          goto LABEL_4;
        }
        uint64_t v24 = *(int **)a3;
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a3) >> 2);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x1555555555555555) {
LABEL_45:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v24) >> 2);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v19 = 0x1555555555555555;
        }
        else {
          unint64_t v19 = v26;
        }
        if (v19)
        {
          if (v19 > 0x1555555555555555) {
LABEL_46:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unsigned __int8 v20 = (char *)operator new(12 * v19);
          uint64_t v21 = (uint64_t)&v20[12 * v25];
          *(void *)uint64_t v21 = *(void *)v35;
          *(_DWORD *)(v21 + 8) = v35[2];
          uint64_t v22 = v21;
          if (v5 == v24)
          {
LABEL_40:
            unint64_t v7 = a2;
            uint64_t v10 = (int *)(v21 + 12);
            *(void *)a3 = v22;
            *(void *)(a3 + 8) = v21 + 12;
            *(void *)(a3 + 16) = &v20[12 * v19];
            if (!v5) {
              goto LABEL_4;
            }
LABEL_38:
            operator delete(v5);
            goto LABEL_4;
          }
        }
        else
        {
          unsigned __int8 v20 = 0;
          uint64_t v21 = 4 * (((uint64_t)v5 - *(void *)a3) >> 2);
          *(void *)uint64_t v21 = *(void *)v35;
          *(_DWORD *)(v21 + 8) = v35[2];
          uint64_t v22 = 12 * v25;
          if (v5 == v24) {
            goto LABEL_40;
          }
        }
        unint64_t v7 = a2;
        do
        {
          uint64_t v30 = *(void *)(v5 - 3);
          v5 -= 3;
          int v31 = v5[2];
          *(void *)(v22 - 12) = v30;
          v22 -= 12;
          *(_DWORD *)(v22 + 8) = v31;
        }
        while (v5 != v24);
      }
      else
      {
        *(_DWORD *)unint64_t v34 = *(_DWORD *)(a1[2490] + 4 * v8);
        *(void *)&v34[4] = *(void *)(*(void *)(a1[2503] + 40) + 12 * *(int *)v34);
        uint64_t v12 = *(void *)v34;
        uint64_t v13 = HIDWORD(*(void *)&v34[4]);
        unint64_t v14 = *(void *)(a3 + 16);
        if ((unint64_t)v5 < v14) {
          goto LABEL_3;
        }
        unint64_t v15 = *(int **)a3;
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a3) >> 2);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0x1555555555555555) {
          goto LABEL_45;
        }
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v15) >> 2);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v19 = 0x1555555555555555;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          if (v19 > 0x1555555555555555) {
            goto LABEL_46;
          }
          unsigned __int8 v20 = (char *)operator new(12 * v19);
          uint64_t v21 = (uint64_t)&v20[12 * v16];
          *(void *)uint64_t v21 = *(void *)v34;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)&v34[8];
          uint64_t v22 = v21;
          if (v5 == v15) {
            goto LABEL_40;
          }
        }
        else
        {
          unsigned __int8 v20 = 0;
          uint64_t v21 = 4 * (((uint64_t)v5 - *(void *)a3) >> 2);
          *(void *)uint64_t v21 = *(void *)v34;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)&v34[8];
          uint64_t v22 = 12 * v16;
          if (v5 == v15) {
            goto LABEL_40;
          }
        }
        unint64_t v7 = a2;
        do
        {
          uint64_t v28 = *(void *)(v5 - 3);
          v5 -= 3;
          int v29 = v5[2];
          *(void *)(v22 - 12) = v28;
          v22 -= 12;
          *(_DWORD *)(v22 + 8) = v29;
        }
        while (v5 != v15);
      }
      unsigned int v5 = *(int **)a3;
      uint64_t v10 = (int *)(v21 + 12);
      *(void *)a3 = v22;
      *(void *)(a3 + 8) = v21 + 12;
      *(void *)(a3 + 16) = &v20[12 * v19];
      if (v5) {
        goto LABEL_38;
      }
LABEL_4:
      *(void *)(a3 + 8) = v10;
      unsigned int v5 = v10;
LABEL_5:
      ++v8;
    }
    while (v8 != v9);
  }
  uint64_t v32 = a1[2503];

  operations_research::sat::IntegerTrail::RemoveLevelZeroBounds(v32, (int **)a3);
}

uint64_t operations_research::sat::LinearProgrammingConstraint::BranchOnVar(uint64_t a1, int a2)
{
  v46[0] = a2;
  double v3 = *(double *)(*(void *)(a1 + 20328)
                 + 8
                 * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)(a1 + 19944), v46));
  *(void *)(a1 + 20216) = *(void *)(a1 + 20208);
  unint64_t v4 = *(void *)(a1 + 19928) - *(void *)(a1 + 19920);
  if ((int)(v4 >> 2) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (v4 >> 2);
    do
    {
      int v7 = *(_DWORD *)(*(void *)(a1 + 19920) + 4 * v5);
      uint64_t v8 = *(void *)(*(void *)(a1 + 20024) + 40);
      uint64_t v9 = *(void *)(v8 + 12 * v7);
      double v10 = (double)v9;
      if (v9 < (uint64_t)0x8000000000000003) {
        double v10 = -INFINITY;
      }
      if (v9 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v11 = v10;
      }
      else {
        double v11 = INFINITY;
      }
      uint64_t v12 = *(void *)(v8 + 12 * (v7 ^ 1));
      double v13 = (double)-v12;
      if (v12 > 0x7FFFFFFFFFFFFFFDLL) {
        double v13 = -INFINITY;
      }
      if (v12 >= (uint64_t)0x8000000000000003) {
        double v14 = v13;
      }
      else {
        double v14 = INFINITY;
      }
      double v15 = operations_research::glop::LpScalingHelper::VariableScalingFactor(a1 + 19360, v5);
      operations_research::glop::LinearProgram::SetVariableBounds(a1 + 360, v5++, v15 * v11, v15 * v14);
    }
    while (v6 != v5);
  }
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 20024) + 40) + 12 * *(int *)(a1 + 19993));
  int MirrorVariable = operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable(a1, a2);
  uint64_t v18 = *(void *)(*(void *)(a1 + 20024) + 40);
  uint64_t v19 = *(void *)(v18 + 12 * a2);
  double v20 = (double)v19;
  if (v19 < (uint64_t)0x8000000000000003) {
    double v20 = -INFINITY;
  }
  if (v19 <= 0x7FFFFFFFFFFFFFFDLL) {
    double v21 = v20;
  }
  else {
    double v21 = INFINITY;
  }
  uint64_t v22 = *(void *)(v18 + 12 * (a2 ^ 1));
  double v23 = (double)-v22;
  if (v22 > 0x7FFFFFFFFFFFFFFDLL) {
    double v23 = -INFINITY;
  }
  if (v22 >= (uint64_t)0x8000000000000003) {
    double v24 = v23;
  }
  else {
    double v24 = INFINITY;
  }
  int v25 = MirrorVariable;
  double v26 = operations_research::glop::LpScalingHelper::VariableScalingFactor(a1 + 19360, MirrorVariable);
  if (v3 < v21 || v3 > v24) {
    return 0;
  }
  double v30 = v26;
  double v31 = floor(v3);
  operations_research::glop::LinearProgram::SetVariableBounds(a1 + 360, v25, v26 * v21, v31 * v26);
  operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching((operations_research::TimeLimit **)a1, (uint64_t)v46);
  int v32 = LOBYTE(v46[0]);
  if (!LOBYTE(v46[0]) || LOBYTE(v46[0]) == 8)
  {
    if (v47 <= v16) {
      return 0;
    }
    uint64_t v28 = 0;
    double v33 = ceil(v3);
  }
  else
  {
    if (LOBYTE(v46[0]) != 5) {
      return 0;
    }
    LODWORD(v44[0]) = a2;
    *(uint64_t *)((char *)v44 + 4) = vcvtpd_s64_f64(v3);
    if ((operations_research::sat::IntegerTrail::Enqueue(*(void *)(a1 + 20024), v44[0], v44[1], 0, 0, *(uint64_t **)(a1 + 20208), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 20216) - *(void *)(a1 + 20208)) >> 2)) & 1) == 0)return 0; {
    double v33 = ceil(v3);
    }
    uint64_t v28 = 1;
  }
  operations_research::glop::LinearProgram::SetVariableBounds(a1 + 360, v25, v33 * v30, v30 * v24);
  operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching((operations_research::TimeLimit **)a1, (uint64_t)v44);
  int v34 = LOBYTE(v44[0]);
  if (!LOBYTE(v44[0]) || LOBYTE(v44[0]) == 8)
  {
    if (v45 <= v16) {
      return v28;
    }
  }
  else
  {
    if (LOBYTE(v44[0]) != 5) {
      return v28;
    }
    if (v32 != 5)
    {
      if ((uint64_t)v31 >= (uint64_t)0x8000000000000002) {
        uint64_t v35 = -(uint64_t)v31;
      }
      else {
        uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
      }
      LODWORD(v48[0]) = a2 ^ 1;
      *(uint64_t *)((char *)v48 + 4) = v35;
      if ((operations_research::sat::IntegerTrail::Enqueue(*(void *)(a1 + 20024), v48[0], SHIDWORD(v35), 0, 0, *(uint64_t **)(a1 + 20208), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 20216) - *(void *)(a1 + 20208)) >> 2)) & 1) == 0)return v28; {
      uint64_t v28 = 1;
      }
    }
  }
  if (v32 == 5 && v34 == 5)
  {
    uint64_t v36 = *(void *)(a1 + 20024);
    unint64_t v37 = *(uint64_t **)(a1 + 20208);
    uint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 20216) - (void)v37) >> 2);
    uint64_t v39 = *(void *)(v36 + 936);
    uint64_t v40 = *(void *)(v39 + 96);
    v39 += 96;
    *(void *)(v39 + 48) = 0;
    *(void *)(v39 + 8) = v40;
    operations_research::sat::IntegerTrail::MergeReasonInto(v36, v37, v38, (void **)v39);
    return 0;
  }
  if (v32 == 5)
  {
    uint64_t v41 = v45;
  }
  else if (v34 == 5)
  {
    uint64_t v41 = v47;
  }
  else
  {
    uint64_t v41 = v45;
    if (v45 >= v47) {
      uint64_t v41 = v47;
    }
  }
  if (v41 > v16)
  {
    LODWORD(v48[0]) = *(_DWORD *)(a1 + 19993);
    *(uint64_t *)((char *)v48 + 4) = v41;
    return v28 | operations_research::sat::IntegerTrail::Enqueue(*(void *)(a1 + 20024), v48[0], SHIDWORD(v41), 0, 0, *(uint64_t **)(a1 + 20208), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(a1 + 20216) - *(void *)(a1 + 20208)) >> 2));
  }
  return v28;
}

double operations_research::sat::LinearProgrammingConstraint::GetSolutionValue(uint64_t a1, int a2)
{
  int v3 = a2;
  return *(double *)(*(void *)(a1 + 20328)
                   + 8
                   * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)(a1 + 19944), &v3));
}

void operations_research::sat::LinearProgrammingConstraint::RegisterWith(operations_research::sat::LinearProgrammingConstraint *this, operations_research::sat::Model *a2)
{
  v50[1] = *MEMORY[0x263EF8340];
  unint64_t v4 = (char *)this + 19992;
  *((unsigned char *)this + 20416) = 1;
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintCollection>((uint64_t)a2);
  uint64_t v6 = (char **)v5;
  uint64_t v8 = (char *)v5[1];
  unint64_t v7 = v5[2];
  uint64_t v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(void *)uint64_t v8 = this;
    uint64_t v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  double v11 = (char *)*v5;
  uint64_t v12 = (uint64_t)&v8[-*v5];
  uint64_t v13 = v12 >> 3;
  unint64_t v14 = (v12 >> 3) + 1;
  if (v14 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = v7 - (void)v11;
  if (v15 >> 2 > v14) {
    unint64_t v14 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v17 = operator new(8 * v16);
    uint64_t v18 = &v17[8 * v13];
    uint64_t v19 = &v17[8 * v16];
    *(void *)uint64_t v18 = this;
    uint64_t v10 = (uint64_t)(v18 + 8);
    double v20 = (char *)(v8 - v11);
    if (v8 == v11) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  unint64_t v17 = 0;
  uint64_t v18 = (char *)(8 * v13);
  uint64_t v19 = 0;
  *(void *)(8 * v13) = this;
  uint64_t v10 = 8 * v13 + 8;
  double v20 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    unint64_t v21 = (unint64_t)(v20 - 8);
    if (v21 < 0x58) {
      goto LABEL_69;
    }
    if ((unint64_t)(v8 - v17 - v12) < 0x20) {
      goto LABEL_69;
    }
    uint64_t v22 = (v21 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v9 = &v8[-v23];
    v18 -= v23;
    double v24 = &v17[8 * v13 - 16];
    int v25 = v8 - 16;
    uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *double v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_69:
      do
      {
        uint64_t v28 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v18 - 1) = v28;
        v18 -= 8;
      }
      while (v9 != v11);
    }
    uint64_t v9 = *v6;
  }
LABEL_21:
  *uint64_t v6 = v18;
  v6[1] = (char *)v10;
  v6[2] = v19;
  if (v9) {
    operator delete(v9);
  }
LABEL_23:
  uint64_t v29 = *((void *)this + 35);
  double v30 = (int *)*((void *)this + 36);
  unint64_t v31 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - v29) >> 2));
  v6[1] = (char *)v10;
  if (v30 == (int *)v29) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v29, v30, (uint64_t)v49, v32, 1);
  if (!*(unsigned char *)(*((void *)this + 2500) + 440)) {
    operations_research::sat::LinearConstraintManager::AddAllConstraintsToLp((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 16));
  }
  if ((operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(this) & 1) == 0)
  {
    *(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2) + 496) = 1;
    return;
  }
  double v33 = (operations_research::sat::GenericLiteralWatcher *)operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)a2);
  unsigned int v34 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v33, (uint64_t)this);
  unint64_t v35 = *((void *)this + 2491) - *((void *)this + 2490);
  if ((int)(v35 >> 2) >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = (v35 >> 2);
    do
    {
      uint64_t v38 = *(unsigned int *)(*((void *)this + 2490) + 4 * v36);
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v33, v38, v34, v36);
      if (v38 != -1) {
        operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v33, v38 ^ 1, v34, v36);
      }
      ++v36;
    }
    while (v37 != v36);
  }
  if (*v4)
  {
    uint64_t v39 = *(unsigned int *)(v4 + 1);
    if (v39 != -1) {
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v33, v39 ^ 1, v34, 0xFFFFFFFFLL);
    }
  }
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v33, v34, 2);
  operations_research::sat::GenericLiteralWatcher::AlwaysCallAtLevelZero(v33, v34);
  if (*((void *)this + 2491) - *((void *)this + 2490) >= 0x4DuLL)
  {
    uint64_t v40 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristicsVector>((uint64_t)a2);
    operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(this, a2, (uint64_t)v49);
    unint64_t v41 = v40[1];
    if (v41 >= v40[2])
    {
      uint64_t v43 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>(v40, v49);
    }
    else
    {
      if (v50[0])
      {
        if ((void *)v50[0] == v49)
        {
          *(void *)(v41 + 24) = v41;
          (*(void (**)(void, unint64_t))(*(void *)v50[0] + 24))(v50[0], v41);
          v40[1] = v41 + 32;
          uint64_t v44 = v50[0];
          if ((void *)v50[0] != v49)
          {
LABEL_47:
            if (v44) {
              (*(void (**)(uint64_t))(*(void *)v44 + 40))(v44);
            }
LABEL_51:
            operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(this, a2, (uint64_t)v49);
            unint64_t v45 = v40[1];
            if (v45 >= v40[2])
            {
              uint64_t v47 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>(v40, v49);
            }
            else
            {
              if (v50[0])
              {
                if ((void *)v50[0] == v49)
                {
                  *(void *)(v45 + 24) = v45;
                  (*(void (**)(void *, unint64_t))(v49[0] + 24))(v49, v45);
                  v40[1] = v45 + 32;
                  uint64_t v48 = v50[0];
                  if ((void *)v50[0] != v49)
                  {
LABEL_59:
                    if (v48) {
                      (*(void (**)(uint64_t))(*(void *)v48 + 40))(v48);
                    }
                    goto LABEL_63;
                  }
                  goto LABEL_62;
                }
                int v46 = v50;
                *(void *)(v45 + 24) = v50[0];
              }
              else
              {
                int v46 = (void *)(v45 + 24);
              }
              *int v46 = 0;
              uint64_t v47 = v45 + 32;
            }
            v40[1] = v47;
            uint64_t v48 = v50[0];
            if ((void *)v50[0] != v49) {
              goto LABEL_59;
            }
LABEL_62:
            (*(void (**)(void *))(v49[0] + 32))(v49);
            goto LABEL_63;
          }
LABEL_50:
          (*(void (**)(void *))(v49[0] + 32))(v49);
          goto LABEL_51;
        }
        unint64_t v42 = v50;
        *(void *)(v41 + 24) = v50[0];
      }
      else
      {
        unint64_t v42 = (void *)(v41 + 24);
      }
      void *v42 = 0;
      uint64_t v43 = v41 + 32;
    }
    v40[1] = v43;
    uint64_t v44 = v50[0];
    if ((void *)v50[0] != v49) {
      goto LABEL_47;
    }
    goto LABEL_50;
  }
LABEL_63:
  operations_research::sat::IntegerTrail::RegisterReversibleClass(*((void **)this + 2503), (uint64_t)this + 8);
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(v33, v34, (int *)this + 5070);
}

void sub_23CD1CAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::LinearProgrammingConstraint *this@<X0>, operations_research::sat::Model *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  unint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v4 = (int *)*((void *)this + 2490);
  uint64_t v5 = (int *)*((void *)this + 2491);
  if (v4 != v5)
  {
    uint64_t v6 = this;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = v65;
    while (1)
    {
      int v11 = *v4;
      uint64_t v12 = *(void *)(*((void *)v6 + 2503) + 40);
      if (!*(void *)(v12 + 12 * *v4) && *(void *)(v12 + 12 * (v11 ^ 1)) == -1)
      {
        if (v7 >= v8)
        {
          uint64_t v13 = v7;
          uint64_t v14 = v7 - v9;
          uint64_t v15 = v14 >> 2;
          unint64_t v16 = (v14 >> 2) + 1;
          if (v16 >> 62)
          {
            uint64_t v65 = v10;
            uint64_t v66 = v8;
            unint64_t v64 = v9;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v8 - v9) >> 1 > v16) {
            unint64_t v16 = (v8 - v9) >> 1;
          }
          if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            if (v17 >> 62)
            {
              uint64_t v65 = v10;
              uint64_t v66 = v8;
              unint64_t v64 = v9;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v18 = v17;
            uint64_t v19 = (char *)operator new(4 * v17);
            unint64_t v17 = v18;
            double v20 = &v19[4 * v15];
            *(_DWORD *)double v20 = v11;
            uint64_t v10 = (uint64_t)(v20 + 4);
            if (v13 != v9)
            {
LABEL_17:
              unint64_t v21 = v13 - 4 - v9;
              if (v21 < 0xBC)
              {
                uint64_t v22 = v13;
                uint64_t v6 = this;
                goto LABEL_25;
              }
              if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4]
                || &v13[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4
                || (unint64_t)(v13 - &v19[v14]) < 0x20)
              {
                uint64_t v22 = v13;
                uint64_t v6 = this;
                goto LABEL_25;
              }
              uint64_t v26 = (v21 >> 2) + 1;
              uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v22 = &v13[-v27];
              v20 -= v27;
              uint64_t v28 = &v19[4 * v15 - 16];
              uint64_t v29 = v13 - 16;
              uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v31 = *(_OWORD *)v29;
                *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
                *(_OWORD *)uint64_t v28 = v31;
                v28 -= 32;
                v29 -= 32;
                v30 -= 8;
              }
              while (v30);
              uint64_t v6 = this;
              if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_25:
                  int v23 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *((_DWORD *)v20 - 1) = v23;
                  v20 -= 4;
                }
                while (v22 != v9);
              }
LABEL_26:
              uint64_t v8 = &v19[4 * v17];
              if (v9)
              {
                double v24 = v9;
                int v25 = (char *)v10;
                operator delete(v24);
                uint64_t v10 = (uint64_t)v25;
                unint64_t v7 = v25;
              }
              else
              {
                unint64_t v7 = (char *)v10;
              }
              uint64_t v9 = v20;
              goto LABEL_4;
            }
          }
          else
          {
            uint64_t v19 = 0;
            double v20 = (char *)(4 * v15);
            *(_DWORD *)(4 * v15) = v11;
            uint64_t v10 = 4 * v15 + 4;
            if (v13 != v9) {
              goto LABEL_17;
            }
          }
          uint64_t v6 = this;
          goto LABEL_26;
        }
        *(_DWORD *)unint64_t v7 = v11;
        v7 += 4;
        uint64_t v10 = (uint64_t)v7;
      }
LABEL_4:
      if (++v4 == v5)
      {
        uint64_t v65 = v10;
        uint64_t v66 = v8;
        int v3 = a2;
        unint64_t v64 = v9;
        uint64_t v32 = operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__;
        if (*operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__ <= 0) {
          goto LABEL_40;
        }
        goto LABEL_37;
      }
    }
  }
  unint64_t v7 = 0;
  uint64_t v9 = 0;
  unint64_t v64 = 0;
  uint64_t v32 = operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__;
  if (*operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__ <= 0) {
    goto LABEL_40;
  }
LABEL_37:
  if (v32 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
  {
    double v33 = google::LogMessage::LogMessage((google::LogMessage *)&v61, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2417);
    unsigned int v34 = (void *)google::LogMessage::stream(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"HeuristicLPPseudoCostBinary has ", 32);
    unint64_t v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" variables.", 11);
    google::LogMessage::~LogMessage((google::LogMessage *)&v61);
  }
LABEL_40:
  int64_t v36 = v7 - v9;
  int64_t v37 = (v7 - v9) << 30;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  double v63 = 0;
  if (v37)
  {
    if (v37 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v38 = (char *)operator new((2 * (v7 - v9)) & 0x7FFFFFFFFLL);
    size_t v39 = 8 * (int)(v36 >> 2);
    uint64_t v40 = &v38[v39];
    uint64_t v61 = v38;
    double v63 = &v38[v39];
    bzero(v38, v39);
    uint64_t v62 = v40;
    unint64_t v41 = (char *)operator new(v36 & 0x3FFFFFFFFLL);
    bzero(v41, v36 & 0x3FFFFFFFFLL);
    unint64_t v42 = &v41[v36 & 0x3FFFFFFFFLL];
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v38 = 0;
    unint64_t v41 = 0;
    unint64_t v42 = 0;
  }
  uint64_t v55 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  LODWORD(v59) = 0;
  int64_t v43 = v40 - v38;
  if (v40 == v38)
  {
    unint64_t v45 = 0;
    uint64_t v54 = 0;
    int64_t v46 = v42 - v41;
    if (v46) {
      goto LABEL_47;
    }
  }
  else
  {
    if (v43 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v44 = (char *)operator new(v40 - v38);
    unint64_t v45 = &v44[8 * (v43 >> 3)];
    uint64_t v54 = v44;
    memcpy(v44, v38, v43);
    int64_t v46 = v42 - v41;
    if (v46)
    {
LABEL_47:
      if (v46 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = v7;
      uint64_t v48 = (char *)operator new(v46);
      uint64_t v49 = &v48[4 * (v46 >> 2)];
      memcpy(v48, v41, v46);
      if (v47 != v9) {
        goto LABEL_49;
      }
LABEL_53:
      uint64_t v51 = 0;
      uint64_t v50 = 0;
      goto LABEL_54;
    }
  }
  double v52 = v7;
  uint64_t v49 = 0;
  uint64_t v48 = 0;
  if (v52 == v9) {
    goto LABEL_53;
  }
LABEL_49:
  if (v36 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v50 = (char *)operator new(v36);
  uint64_t v51 = &v50[4 * (v36 >> 2)];
  memcpy(v50, v9, v36);
LABEL_54:
  *(void *)&long long v60 = this;
  *((void *)&v60 + 1) = v55;
  *(void *)(a3 + 24) = 0;
  int v53 = (char *)operator new(0x68uLL);
  *(void *)int v53 = &unk_26F0C4398;
  HIDWORD(v59) = (unint64_t)v36 >> 2;
  *((void *)v53 + 1) = v59;
  *((void *)v53 + 2) = v54;
  *((void *)v53 + 3) = v45;
  *((void *)v53 + 4) = v45;
  *((void *)v53 + 5) = v48;
  *((void *)v53 + 6) = v49;
  *((void *)v53 + 7) = v49;
  *((void *)v53 + 8) = v50;
  *((void *)v53 + 9) = v51;
  *((void *)v53 + 10) = v51;
  *(_OWORD *)(v53 + 88) = v60;
  *(void *)(a3 + 24) = v53;
  if (v41) {
    operator delete(v41);
  }
  if (v38) {
    operator delete(v38);
  }
  if (v9)
  {
    uint64_t v65 = (uint64_t)v9;
    operator delete(v9);
  }
}

void sub_23CD1D110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::LinearProgrammingConstraint *this@<X0>, operations_research::sat::Model *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = this;
  uint64_t v39 = *((void *)this + 2503);
  uint64_t v38 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  int64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  unint64_t v4 = (int *)*((void *)v3 + 2490);
  uint64_t v5 = (int *)*((void *)v3 + 2491);
  if (v4 != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = v44;
    while (1)
    {
      int v10 = *v4;
      uint64_t v11 = *(void *)(*((void *)v3 + 2503) + 40);
      if (!*(void *)(v11 + 12 * *v4) && *(void *)(v11 + 12 * (v10 ^ 1)) == -1)
      {
        if (v6 >= v7)
        {
          uint64_t v12 = (v6 - v8) >> 2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
          {
            uint64_t v44 = v9;
            unint64_t v45 = v7;
            int64_t v43 = v8;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v7 - v8) >> 1 > v13) {
            unint64_t v13 = (v7 - v8) >> 1;
          }
          if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14)
          {
            if (v14 >> 62)
            {
              uint64_t v44 = v9;
              unint64_t v45 = v7;
              int64_t v43 = v8;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v15 = v3;
            unint64_t v16 = v14;
            unint64_t v17 = operator new(4 * v14);
            unint64_t v14 = v16;
            int v3 = v15;
            unint64_t v18 = &v17[4 * v12];
            *(_DWORD *)unint64_t v18 = v10;
            uint64_t v9 = (uint64_t)(v18 + 4);
            if (v6 == v8) {
              goto LABEL_22;
            }
LABEL_19:
            unint64_t v19 = v6 - 4 - v8;
            if (v19 < 0xBC)
            {
              double v20 = v6;
              goto LABEL_21;
            }
            if (&v17[v6 - v8 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[v6 - v8 - 4])
            {
              double v20 = v6;
              goto LABEL_21;
            }
            if (&v6[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4)
            {
              double v20 = v6;
              goto LABEL_21;
            }
            if ((unint64_t)(v8 - v17) < 0x20)
            {
              double v20 = v6;
              goto LABEL_21;
            }
            uint64_t v25 = (v19 >> 2) + 1;
            uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
            double v20 = &v6[-v26];
            v18 -= v26;
            uint64_t v27 = &v17[4 * v12 - 16];
            uint64_t v28 = v6 - 16;
            uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *uint64_t v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 8;
            }
            while (v29);
            if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_21:
                int v21 = *((_DWORD *)v20 - 1);
                v20 -= 4;
                *((_DWORD *)v18 - 1) = v21;
                v18 -= 4;
              }
              while (v20 != v8);
            }
          }
          else
          {
            unint64_t v17 = 0;
            unint64_t v18 = (char *)(4 * v12);
            *(_DWORD *)(4 * v12) = v10;
            uint64_t v9 = 4 * v12 + 4;
            if (v6 != v8) {
              goto LABEL_19;
            }
          }
LABEL_22:
          unint64_t v7 = &v17[4 * v14];
          if (v8)
          {
            uint64_t v22 = v8;
            int v23 = (char *)v9;
            uint64_t v24 = v7;
            operator delete(v22);
            unint64_t v7 = v24;
            uint64_t v9 = (uint64_t)v23;
            uint64_t v6 = v23;
          }
          else
          {
            uint64_t v6 = (char *)v9;
          }
          uint64_t v8 = v18;
          goto LABEL_4;
        }
        *(_DWORD *)uint64_t v6 = v10;
        v6 += 4;
        uint64_t v9 = (uint64_t)v6;
      }
LABEL_4:
      if (++v4 == v5)
      {
        uint64_t v44 = v9;
        unint64_t v45 = v7;
        int64_t v43 = v8;
        long long v31 = operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__;
        if (*operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__ <= 0) {
          goto LABEL_42;
        }
        goto LABEL_39;
      }
    }
  }
  uint64_t v6 = 0;
  uint64_t v8 = 0;
  int64_t v43 = 0;
  long long v31 = operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__;
  if (*operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__ <= 0) {
    goto LABEL_42;
  }
LABEL_39:
  if (v31 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v42, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2368);
    uint64_t v32 = (void *)google::LogMessage::stream((google::LogMessage *)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"HeuristicLPMostInfeasibleBinary has ", 36);
    double v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" variables.", 11);
    google::LogMessage::~LogMessage((google::LogMessage *)v42);
  }
LABEL_42:
  int64_t v34 = v6 - v8;
  if (v6 == v8)
  {
    int64_t v36 = 0;
    unint64_t v35 = 0;
  }
  else
  {
    if (v34 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v35 = (char *)operator new(v6 - v8);
    int64_t v36 = &v35[4 * (v34 >> 2)];
    memcpy(v35, v8, v34);
  }
  *(void *)&long long v41 = v39;
  *((void *)&v41 + 1) = v38;
  *(void *)(a3 + 24) = 0;
  int64_t v37 = (char *)operator new(0x38uLL);
  *(void *)int64_t v37 = &unk_26F0C4318;
  *((void *)v37 + 1) = v3;
  *((void *)v37 + 2) = v35;
  *((void *)v37 + 3) = v36;
  *((void *)v37 + 4) = v36;
  *(_OWORD *)(v37 + 40) = v41;
  *(void *)(a3 + 24) = v37;
  if (v8)
  {
    uint64_t v44 = (uint64_t)v8;
    operator delete(v8);
  }
}

void sub_23CD1D654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (v24) {
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

double operations_research::sat::LinearProgrammingConstraint::SetLevel(operations_research::sat::LinearProgrammingConstraint *this, int a2)
{
  unint64_t v4 = (char *)this + 20280;
  unint64_t v5 = *((int *)this + 5070);
  uint64_t v6 = (void *)*((void *)this + 2537);
  uint64_t v7 = *((void *)this + 2536);
  unint64_t v8 = ((uint64_t)v6 - v7) >> 3;
  unint64_t v9 = v5 - v8;
  if (v5 <= v8)
  {
    if (v5 < v8)
    {
      uint64_t v11 = (void *)(v7 + 8 * v5);
      while (v6 != v11)
      {
        uint64_t v13 = *--v6;
        uint64_t v12 = v13;
        *uint64_t v6 = 0;
        if (v13) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v12 + 8))(v12, v9);
        }
      }
      *((void *)this + 2537) = v11;
    }
  }
  else
  {
    std::vector<std::unique_ptr<operations_research::sat::IntegerSumLE>>::__append((void **)this + 2536, v9);
  }
  if (v4[36] && *((_DWORD *)v4 + 8) > a2) {
    v4[36] = 0;
  }
  if (!a2)
  {
    unint64_t v14 = (char *)*((void *)this + 2547);
    uint64_t v15 = (char *)*((void *)this + 2548);
    if (v14 != v15)
    {
      v4[36] = 1;
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)this + 2541, v14, v15, (v15 - v14) >> 3);
      *((_DWORD *)v4 + 8) = 0;
      unint64_t v16 = (double *)*((void *)this + 2541);
      uint64_t v17 = *((void *)this + 2542) - (void)v16;
      if (v17)
      {
        unint64_t v18 = v17 >> 3;
        unint64_t v19 = (int *)*((void *)this + 2490);
        uint64_t v20 = **((void **)this + 2551);
        if (v18 <= 1) {
          unint64_t v18 = 1;
        }
        do
        {
          uint64_t v22 = *v19++;
          uint64_t v21 = v22;
          *(double *)(v20 + 8 * v22) = *v16;
          double v23 = *v16++;
          double result = -v23;
          *(double *)(v20 + 8 * (v21 ^ 1)) = -v23;
          --v18;
        }
        while (v18);
      }
    }
  }
  return result;
}

double non-virtual thunk to'operations_research::sat::LinearProgrammingConstraint::SetLevel(operations_research::sat::LinearProgrammingConstraint *this, int a2)
{
  return operations_research::sat::LinearProgrammingConstraint::SetLevel((operations_research::sat::LinearProgrammingConstraint *)((char *)this - 8), a2);
}

char *operations_research::sat::LinearProgrammingConstraint::AddCutGenerator(uint64_t a1, void *a2)
{
  unint64_t v4 = (int *)*a2;
  unint64_t v5 = (int *)a2[1];
  if ((int *)*a2 != v5)
  {
    do
    {
      int v6 = *v4++;
      operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable(a1, v6 & 0xFFFFFFFE);
    }
    while (v4 != v5);
  }
  uint64_t v7 = *(void **)(a1 + 20432);
  if ((unint64_t)v7 >= *(void *)(a1 + 20440))
  {
    double result = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>((void **)(a1 + 20424), (uint64_t)a2);
    *(void *)(a1 + 20432) = result;
    return result;
  }
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  v7[2] = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v8 = a2 + 6;
  unint64_t v9 = (void *)a2[6];
  if (!v9)
  {
    unint64_t v8 = v7 + 6;
    goto LABEL_9;
  }
  if (v9 != a2 + 3)
  {
    v7[6] = v9;
LABEL_9:
    *unint64_t v8 = 0;
    double result = (char *)(v7 + 7);
    *(void *)(a1 + 20432) = v7 + 7;
    return result;
  }
  v7[6] = v7 + 3;
  (*(void (**)(void))(*(void *)*v8 + 24))();
  double result = (char *)(v7 + 7);
  *(void *)(a1 + 20432) = v7 + 7;
  return result;
}

uint64_t operations_research::sat::LinearProgrammingConstraint::IncrementalPropagate(uint64_t a1, int **a2)
{
  if (*(unsigned char *)(a1 + 20316)
    && ((*(_DWORD *)(*(void *)(a1 + 20032) + 8) & 0xFFFFFFE) != 0 || *(unsigned char *)(a1 + 20400)))
  {
    uint64_t v2 = *a2;
    int v3 = a2[1];
    if (*a2 == v3) {
      return 1;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 20024) + 40);
    while (1)
    {
      uint64_t v5 = *v2;
      int v6 = *(_DWORD *)(*(void *)(a1 + 19920) + 4 * v5);
      uint64_t v7 = *(void *)(v4 + 12 * v6);
      double v8 = (double)v7 + -0.0001;
      double v9 = -INFINITY;
      if (v7 < (uint64_t)0x8000000000000003) {
        double v8 = -INFINITY;
      }
      uint64_t v10 = *(void *)(v4 + 12 * (v6 ^ 1));
      if (v10 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v9 = (double)-v10 + 0.0001;
      }
      double v11 = *(double *)(*(void *)(a1 + 20328) + 8 * v5);
      if (v7 > 0x7FFFFFFFFFFFFFFDLL) {
        double v8 = INFINITY;
      }
      if (v10 < (uint64_t)0x8000000000000003) {
        double v9 = INFINITY;
      }
      if (v11 < v8 || v11 > v9) {
        break;
      }
      if (++v2 == v3) {
        return 1;
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

BOOL operations_research::sat::LinearProgrammingConstraint::SolveLp(operations_research::sat::LinearProgrammingConstraint *this)
{
  uint64_t v2 = (char *)this + 20312;
  if ((*(_DWORD *)(*((void *)this + 2504) + 8) & 0xFFFFFFE) == 0) {
    *((unsigned char *)this + 20400) = 0;
  }
  operations_research::glop::RevisedSimplex::Solve((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840), (operations_research::sat::LinearProgrammingConstraint *)((char *)this + 360), *((operations_research::TimeLimit **)this + 2502), (uint64_t)&v23);
  *((void *)this + 2588) += operations_research::glop::RevisedSimplex::GetNumberOfIterations((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  int v3 = v23;
  if (v23)
  {
    if (*_MergedGlobals_14[0] >= 1
      && (_MergedGlobals_14[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_14, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 517);
      uint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v22);
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"The LP solver encountered an error: ", 36);
      if ((v25 & 0x80u) == 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      if ((v25 & 0x80u) == 0) {
        uint64_t v7 = v25;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      google::LogMessage::~LogMessage((google::LogMessage *)v22);
    }
    operations_research::glop::RevisedSimplex::ClearStateForNextSolve((uint64_t)this + 840);
  }
  else
  {
    int ProblemNumCols = operations_research::glop::RevisedSimplex::GetProblemNumCols((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
    if (ProblemNumCols < 1)
    {
      int v10 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 0;
      uint64_t v11 = ProblemNumCols;
      do
      {
        if (operations_research::glop::RevisedSimplex::GetReducedCost((uint64_t)this + 840, v9) == 0.0
          && operations_research::glop::RevisedSimplex::GetVariableStatus((uint64_t)this + 840, v9))
        {
          ++v10;
        }
        ++v9;
      }
      while (v11 != v9);
    }
    v2[376] = (double)(int)operations_research::glop::RevisedSimplex::GetProblemNumCols((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840))
            * 0.3 <= (double)v10;
    operations_research::sat::IncrementalAverage::AddData((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 20672), (double)v10);
    if (*((double *)this + 2584) >= 1000.0
      && *off_26AED0058[0] >= 2
      && (off_26AED0058[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AED0058, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 523);
      uint64_t v12 = (void *)google::LogMessage::stream((google::LogMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"High average degeneracy: ", 25);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v22);
    }
    if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)))
    {
      v2[4] = 1;
      int v13 = (*(_DWORD *)(*((void *)this + 2504) + 8) >> 1) & 0x7FFFFFF;
      *(_DWORD *)uint64_t v2 = v13;
      unint64_t v14 = *((void *)this + 2491) - *((void *)this + 2490);
      if ((int)(v14 >> 2) >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = (v14 >> 2);
        do
        {
          double VariableValue = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)this + 840, v15);
          double v18 = operations_research::glop::LpScalingHelper::UnscaleVariableValue((uint64_t)this + 19360, v15, VariableValue);
          *(double *)(*((void *)this + 2541) + 8 * v15) = v18;
          uint64_t v19 = *(int *)(*((void *)this + 2490) + 4 * v15);
          uint64_t v20 = **((void **)this + 2551);
          *(double *)(v20 + 8 * v19) = v18;
          *(double *)(v20 + 8 * (v19 ^ 1)) = -v18;
          ++v15;
        }
        while (v16 != v15);
        int v13 = *(_DWORD *)v2;
      }
      if (!v13) {
        std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)this + 2547, *((char **)this + 2541), *((char **)this + 2542), (uint64_t)(*((void *)this + 2542) - *((void *)this + 2541)) >> 3);
      }
    }
  }
  if ((char)v25 < 0) {
    operator delete(__p[0]);
  }
  return v3 == 0;
}

void sub_23CD1DD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  a4[3] = a4[2];
  uint64_t v5 = (char *)a4[5];
  uint64_t v49 = (void **)(a4 + 5);
  uint64_t v50 = (void **)(a4 + 2);
  a4[6] = v5;
  unint64_t v6 = a2[1] - *a2;
  if ((int)(v6 >> 3) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v53 = (v6 >> 3);
    do
    {
      uint64_t v9 = *(void *)(*a2 + 8 * v7);
      if (!v9) {
        goto LABEL_5;
      }
      int v10 = *(_DWORD *)(*(void *)(a1 + 19920) + 4 * v7);
      uint64_t v12 = (char *)a4[3];
      unint64_t v11 = a4[4];
      if ((unint64_t)v12 < v11)
      {
        *(_DWORD *)uint64_t v12 = v10;
        uint64_t v13 = (uint64_t)(v12 + 4);
        goto LABEL_25;
      }
      unint64_t v14 = (char *)*v50;
      uint64_t v15 = v12 - (unsigned char *)*v50;
      uint64_t v16 = v15 >> 2;
      unint64_t v17 = (v15 >> 2) + 1;
      if (v17 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v11 - (void)v14;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v51 = v17;
      if (v17)
      {
        if (v17 >> 62) {
          goto LABEL_56;
        }
        uint64_t v19 = operator new(4 * v17);
        uint64_t v20 = &v19[4 * v16];
        *uint64_t v20 = v10;
        uint64_t v13 = (uint64_t)(v20 + 1);
        if (v12 == v14)
        {
LABEL_37:
          a4[2] = v20;
          a4[3] = v13;
          a4[4] = &v19[4 * v51];
          if (v14) {
            goto LABEL_24;
          }
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = (_DWORD *)(4 * v16);
        *(_DWORD *)(4 * v16) = v10;
        uint64_t v13 = 4 * v16 + 4;
        if (v12 == v14) {
          goto LABEL_37;
        }
      }
      unint64_t v21 = v12 - 4 - v14;
      if (v21 < 0x2C) {
        goto LABEL_61;
      }
      if ((unint64_t)(v12 - &v19[v15]) < 0x20) {
        goto LABEL_61;
      }
      uint64_t v22 = (v21 >> 2) + 1;
      uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v24 = &v12[-v23];
      uint64_t v20 = (_DWORD *)((char *)v20 - v23);
      unsigned __int8 v25 = &v19[4 * v16 - 16];
      uint64_t v26 = v12 - 16;
      uint64_t v27 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *unsigned __int8 v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 8;
      }
      while (v27);
      uint64_t v12 = v24;
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_61:
        do
        {
          int v29 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *--uint64_t v20 = v29;
        }
        while (v12 != v14);
      }
      a4[2] = v20;
      a4[3] = v13;
      a4[4] = &v19[4 * v51];
      if (v14)
      {
LABEL_24:
        operator delete(v14);
        uint64_t v5 = (char *)a4[6];
      }
LABEL_25:
      a4[3] = v13;
      unint64_t v30 = a4[7];
      if ((unint64_t)v5 >= v30)
      {
        long long v31 = (char *)*v49;
        uint64_t v32 = v5 - (unsigned char *)*v49;
        uint64_t v33 = v32 >> 3;
        unint64_t v34 = (v32 >> 3) + 1;
        if (v34 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v35 = v30 - (void)v31;
        if (v35 >> 2 > v34) {
          unint64_t v34 = v35 >> 2;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          if (v36 >> 61) {
LABEL_56:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          int64_t v37 = operator new(8 * v36);
          uint64_t v38 = &v37[8 * v33];
          *uint64_t v38 = v9;
          uint64_t v8 = (uint64_t)(v38 + 1);
          if (v5 == v31) {
            goto LABEL_43;
          }
LABEL_40:
          unint64_t v39 = v5 - 8 - v31;
          if (v39 < 0x168)
          {
            uint64_t v40 = v5;
            goto LABEL_42;
          }
          if (&v37[v32 - 8 - (v39 & 0xFFFFFFFFFFFFFFF8)] > &v37[v32 - 8])
          {
            uint64_t v40 = v5;
            goto LABEL_42;
          }
          if (&v5[-(v39 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
          {
            uint64_t v40 = v5;
            goto LABEL_42;
          }
          if ((unint64_t)(v5 - v37 - v32) < 0x20)
          {
            uint64_t v40 = v5;
            goto LABEL_42;
          }
          uint64_t v42 = (v39 >> 3) + 1;
          uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v40 = &v5[-v43];
          uint64_t v38 = (void *)((char *)v38 - v43);
          uint64_t v44 = &v37[8 * v33 - 16];
          unint64_t v45 = v5 - 16;
          uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *uint64_t v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 4;
          }
          while (v46);
          if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_42:
              uint64_t v41 = *((void *)v40 - 1);
              v40 -= 8;
              *--uint64_t v38 = v41;
            }
            while (v40 != v31);
          }
        }
        else
        {
          int64_t v37 = 0;
          uint64_t v38 = (void *)(8 * v33);
          *(void *)(8 * v33) = v9;
          uint64_t v8 = 8 * v33 + 8;
          if (v5 != v31) {
            goto LABEL_40;
          }
        }
LABEL_43:
        a4[5] = v38;
        a4[6] = v8;
        a4[7] = &v37[8 * v36];
        if (v31) {
          operator delete(v31);
        }
        goto LABEL_4;
      }
      *(void *)uint64_t v5 = v9;
      uint64_t v8 = (uint64_t)(v5 + 8);
LABEL_4:
      a4[6] = v8;
      uint64_t v5 = (char *)v8;
LABEL_5:
      ++v7;
    }
    while (v7 != v53);
  }
  *a4 = 0x8000000000000002;
  a4[1] = a3;
}

BOOL operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v578 = *MEMORY[0x263EF8340];
  uint64_t v569 = 0;
  v529 = (uint64_t *)(a1 + 19776);
  if ((operations_research::sat::LinearProgrammingConstraint::ComputeNewLinearConstraint((void *)a1, a3, (uint64_t *)(a1 + 19776), &v569) & 1) == 0)
  {
    if (*off_26AED0060[0] < 1
      || off_26AED0060[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_26AED0060, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
    {
      return 0;
    }
    google::LogMessage::LogMessage((google::LogMessage *)&v565, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 595);
    unint64_t v14 = (void *)google::LogMessage::stream((google::LogMessage *)&v565);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Issue, overflow!", 16);
    goto LABEL_20;
  }
  operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint(a1, v529, v569, (void *)(a1 + 19712));
  uint64_t v6 = operations_research::sat::ComputeInfinityNorm((operations_research::sat *)(a1 + 19712), v5);
  double v7 = (double)v6;
  if (v6 < (uint64_t)0x8000000000000003) {
    double v7 = -INFINITY;
  }
  if (v6 <= 0x7FFFFFFFFFFFFFFDLL) {
    double v8 = v7;
  }
  else {
    double v8 = INFINITY;
  }
  double v9 = operations_research::sat::ComputeActivity((void *)(a1 + 19712), *(uint64_t **)(a1 + 20408));
  uint64_t v10 = *(void *)(a1 + 19720);
  double v11 = (double)v10;
  if (v10 < (uint64_t)0x8000000000000003) {
    double v11 = -INFINITY;
  }
  if (v10 > 0x7FFFFFFFFFFFFFFDLL) {
    double v11 = INFINITY;
  }
  if (vabdd_f64(v9, v11) / v8 > 0.0001)
  {
    if (*off_26AED0068[0] < 1
      || off_26AED0068[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_26AED0068, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
    {
      return 0;
    }
    google::LogMessage::LogMessage((google::LogMessage *)&v565, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 609);
    uint64_t v12 = (void *)google::LogMessage::stream((google::LogMessage *)&v565);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Cut not tight ", 14);
    operations_research::sat::ComputeActivity((void *)(a1 + 19712), *(uint64_t **)(a1 + 20408));
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
    std::ostream::operator<<();
LABEL_20:
    google::LogMessage::~LogMessage((google::LogMessage *)&v565);
    return 0;
  }
  if ((operations_research::sat::LinearConstraintManager::DebugCheckConstraint((operations_research::sat::LinearConstraintManager *)(a1 + 16), (const operations_research::sat::LinearConstraint *)(a1 + 19712)) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v565, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 613);
    v520 = (void *)google::LogMessage::stream((google::LogMessage *)&v565);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v520, (uint64_t)"Check failed: constraint_manager_.DebugCheckConstraint(cut_) ", 61);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v565);
  }
  unint64_t v17 = *(void **)(a1 + 20408);
  unint64_t v18 = v17[1] - *v17;
  uint64_t v19 = (v18 >> 3) & 1;
  unint64_t v541 = v18 >> 3;
  if (((v18 >> 3) & 0x80000000) != 0) {
    LODWORD(v19) = -(int)v19;
  }
  LODWORD(v565) = v19;
  LODWORD(v575) = 0;
  if (v19) {
    google::MakeCheckOpString<int,int>((int)&v565, (int)&v575, "first_new_var.value() % 2 == 0");
  }
  *(_OWORD *)v567 = 0u;
  long long v568 = 0u;
  long long v565 = 0u;
  *(_OWORD *)v566 = 0u;
  v562 = 0;
  v563 = 0;
  uint64_t v564 = 0;
  v559 = 0;
  v560 = 0;
  uint64_t v561 = 0;
  operations_research::sat::ImpliedBoundsProcessor::ProcessUpperBoundedConstraintWithSlackCreation(a1 + 20064, 0, v18 >> 3, v17, (void *)(a1 + 19712), (uint64_t)&v562, (uint64_t)&v559);
  unint64_t v21 = (uint64_t *)v559;
  uint64_t v22 = v560;
  if (v559 != v560)
  {
    do
    {
      operations_research::sat::DivideByGCD(v21, v20);
      if ((operations_research::sat::LinearConstraintManager::DebugCheckConstraint((operations_research::sat::LinearConstraintManager *)(a1 + 16), (const operations_research::sat::LinearConstraint *)v21) & 1) == 0)
      {
        v516 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v575, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 641);
        v517 = (void *)google::LogMessage::stream(v516);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v517, (uint64_t)"Check failed: constraint_manager_.DebugCheckConstraint(ib_cut) ", 63);
        goto LABEL_652;
      }
      operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v554, (const operations_research::sat::LinearConstraint *)v21);
      char v553 = 2;
      strcpy((char *)v552, "IB");
      uint64_t v23 = *(uint64_t **)(a1 + 20408);
      char v551 = 0;
      LOBYTE(v550) = 0;
      operations_research::sat::LinearConstraintManager::AddCut(a1 + 16, &v554, (uint64_t)v552, v23, (uint64_t)&v550);
      if (v551 < 0)
      {
        operator delete(v550);
        if (v553 < 0)
        {
LABEL_38:
          operator delete(v552[0]);
          uint64_t v24 = __p;
          if (!__p) {
            goto LABEL_35;
          }
LABEL_34:
          v558 = v24;
          operator delete(v24);
          goto LABEL_35;
        }
      }
      else if (v553 < 0)
      {
        goto LABEL_38;
      }
      uint64_t v24 = __p;
      if (__p) {
        goto LABEL_34;
      }
LABEL_35:
      if (v555)
      {
        v556 = v555;
        operator delete(v555);
      }
      v21 += 8;
    }
    while (v21 != v22);
  }
  uint64_t v521 = a1 + 16;
  uint64_t v522 = a2;
  v523 = (uint64_t *)(a1 + 19712);
  v534 = (char **)(a1 + 19800);
  *(void *)(a1 + 19808) = *(void *)(a1 + 19800);
  v532 = (uint64_t *)(a1 + 19824);
  *(void *)(a1 + 19832) = *(void *)(a1 + 19824);
  v531 = (uint64_t *)(a1 + 19848);
  *(void *)(a1 + 19856) = *(void *)(a1 + 19848);
  unsigned __int8 v25 = *(int **)(a1 + 19728);
  uint64_t v26 = *(int **)(a1 + 19736);
  v538 = v26;
  while (v25 != v26)
  {
    uint64_t v29 = *v25;
    if ((int)v29 >= (int)v541)
    {
      if (v29)
      {
        v518 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v575, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 658);
        v519 = (void *)google::LogMessage::stream(v518);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v519, (uint64_t)"Check failed: VariableIsPositive(var) ", 38);
LABEL_652:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v575);
      }
      if ((int)v29 >= (int)v541) {
        int v34 = v29 - v541;
      }
      else {
        int v34 = v29 - v541 + 1;
      }
      uint64_t v35 = (char *)v562;
      unint64_t v36 = (char *)v562 + 56 * (v34 >> 1) + 48;
      int64_t v37 = *(char **)(a1 + 19808);
      unint64_t v38 = *(void *)(a1 + 19816);
      if ((unint64_t)v37 < v38)
      {
        *(void *)int64_t v37 = *v36;
        uint64_t v39 = (uint64_t)(v37 + 8);
        goto LABEL_132;
      }
      uint64_t v48 = *v534;
      uint64_t v49 = v37 - *v534;
      uint64_t v50 = v49 >> 3;
      unint64_t v51 = (v49 >> 3) + 1;
      if (v51 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v52 = v38 - (void)v48;
      if (v52 >> 2 > v51) {
        unint64_t v51 = v52 >> 2;
      }
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53)
      {
        if (v53 >> 61) {
          goto LABEL_655;
        }
        uint64_t v54 = operator new(8 * v53);
        uint64_t v55 = &v54[8 * v50];
        void *v55 = *v36;
        uint64_t v39 = (uint64_t)(v55 + 1);
        if (v37 == v48) {
          goto LABEL_130;
        }
LABEL_124:
        unint64_t v108 = v37 - 8 - v48;
        if (v108 < 0x58) {
          goto LABEL_683;
        }
        if ((unint64_t)(v37 - &v54[v49]) < 0x20) {
          goto LABEL_683;
        }
        uint64_t v109 = (v108 >> 3) + 1;
        uint64_t v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v111 = &v37[-v110];
        uint64_t v55 = (void *)((char *)v55 - v110);
        unint64_t v112 = &v54[8 * v50 - 16];
        uint64_t v113 = v37 - 16;
        uint64_t v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v115 = *(_OWORD *)v113;
          *(v112 - 1) = *((_OWORD *)v113 - 1);
          _OWORD *v112 = v115;
          v112 -= 2;
          v113 -= 32;
          v114 -= 4;
        }
        while (v114);
        int64_t v37 = v111;
        if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_683:
          do
          {
            uint64_t v116 = *((void *)v37 - 1);
            v37 -= 8;
            *--uint64_t v55 = v116;
          }
          while (v37 != v48);
        }
      }
      else
      {
        uint64_t v54 = 0;
        uint64_t v55 = (void *)(8 * v50);
        *(void *)(8 * v50) = *v36;
        uint64_t v39 = 8 * v50 + 8;
        if (v37 != v48) {
          goto LABEL_124;
        }
      }
LABEL_130:
      *(void *)(a1 + 19800) = v55;
      *(void *)(a1 + 19808) = v39;
      *(void *)(a1 + 19816) = &v54[8 * v53];
      if (v48) {
        operator delete(v48);
      }
LABEL_132:
      uint64_t v117 = (uint64_t)v34 >> 1;
      *(void *)(a1 + 19808) = v39;
      uint64_t v118 = &v35[56 * (int)v117 + 32];
      uint64_t v119 = *(char **)(a1 + 19832);
      unint64_t v120 = *(void *)(a1 + 19840);
      if ((unint64_t)v119 < v120)
      {
        *(void *)uint64_t v119 = *(void *)v118;
        uint64_t v121 = (uint64_t)(v119 + 8);
LABEL_153:
        *(void *)(a1 + 19832) = v121;
        unint64_t v139 = &v35[56 * (int)v117 + 40];
        uint64_t v140 = *(char **)(a1 + 19856);
        unint64_t v141 = *(void *)(a1 + 19864);
        if ((unint64_t)v140 < v141)
        {
          *(void *)uint64_t v140 = *(void *)v139;
          uint64_t v27 = v140 + 8;
          goto LABEL_42;
        }
        uint64_t v91 = (char *)*v531;
        uint64_t v142 = (uint64_t)&v140[-*v531];
        uint64_t v143 = v142 >> 3;
        unint64_t v144 = (v142 >> 3) + 1;
        if (v144 >> 61) {
LABEL_667:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v145 = v141 - (void)v91;
        if (v145 >> 2 > v144) {
          unint64_t v144 = v145 >> 2;
        }
        if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v96 = v144;
        }
        if (v96)
        {
          if (v96 >> 61) {
LABEL_655:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v97 = operator new(8 * v96);
          uint64_t v98 = &v97[8 * v143];
          *uint64_t v98 = *(void *)v139;
          uint64_t v28 = (uint64_t)(v98 + 1);
          if (v140 == v91) {
            goto LABEL_172;
          }
LABEL_166:
          unint64_t v146 = v140 - 8 - v91;
          if (v146 < 0x58) {
            goto LABEL_684;
          }
          if ((unint64_t)(v140 - &v97[v142]) < 0x20) {
            goto LABEL_684;
          }
          uint64_t v147 = (v146 >> 3) + 1;
          uint64_t v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
          double v149 = &v140[-v148];
          uint64_t v98 = (void *)((char *)v98 - v148);
          double v150 = &v97[8 * v143 - 16];
          double v151 = v140 - 16;
          uint64_t v152 = v147 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v153 = *(_OWORD *)v151;
            *(v150 - 1) = *((_OWORD *)v151 - 1);
            _OWORD *v150 = v153;
            v150 -= 2;
            v151 -= 32;
            v152 -= 4;
          }
          while (v152);
          uint64_t v140 = v149;
          if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_684:
            do
            {
              uint64_t v154 = *((void *)v140 - 1);
              v140 -= 8;
              *--uint64_t v98 = v154;
            }
            while (v140 != v91);
          }
          goto LABEL_172;
        }
        uint64_t v97 = 0;
        uint64_t v98 = (void *)(8 * v143);
        *(void *)(8 * v143) = *(void *)v139;
        uint64_t v28 = 8 * v143 + 8;
        if (v140 != v91) {
          goto LABEL_166;
        }
        goto LABEL_172;
      }
      unint64_t v122 = (char *)*v532;
      uint64_t v123 = (uint64_t)&v119[-*v532];
      uint64_t v124 = v123 >> 3;
      unint64_t v125 = (v123 >> 3) + 1;
      if (v125 >> 61) {
        goto LABEL_667;
      }
      uint64_t v126 = v120 - (void)v122;
      if (v126 >> 2 > v125) {
        unint64_t v125 = v126 >> 2;
      }
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v127 = v125;
      }
      if (v127)
      {
        if (v127 >> 61) {
          goto LABEL_655;
        }
        uint64_t v128 = operator new(8 * v127);
        uint64_t v129 = &v128[8 * v124];
        *uint64_t v129 = *(void *)v118;
        uint64_t v121 = (uint64_t)(v129 + 1);
        if (v119 == v122) {
          goto LABEL_151;
        }
LABEL_145:
        unint64_t v130 = v119 - 8 - v122;
        if (v130 < 0x58) {
          goto LABEL_685;
        }
        if ((unint64_t)(v119 - &v128[v123]) < 0x20) {
          goto LABEL_685;
        }
        uint64_t v131 = (v130 >> 3) + 1;
        uint64_t v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        int v133 = &v119[-v132];
        uint64_t v129 = (void *)((char *)v129 - v132);
        int v134 = &v128[8 * v124 - 16];
        int v135 = v119 - 16;
        uint64_t v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v137 = *(_OWORD *)v135;
          *(v134 - 1) = *((_OWORD *)v135 - 1);
          *int v134 = v137;
          v134 -= 2;
          v135 -= 32;
          v136 -= 4;
        }
        while (v136);
        uint64_t v119 = v133;
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_685:
          do
          {
            uint64_t v138 = *((void *)v119 - 1);
            v119 -= 8;
            *--uint64_t v129 = v138;
          }
          while (v119 != v122);
        }
      }
      else
      {
        uint64_t v128 = 0;
        uint64_t v129 = (void *)(8 * v124);
        *(void *)(8 * v124) = *(void *)v118;
        uint64_t v121 = 8 * v124 + 8;
        if (v119 != v122) {
          goto LABEL_145;
        }
      }
LABEL_151:
      *(void *)(a1 + 19824) = v129;
      *(void *)(a1 + 19832) = v121;
      *(void *)(a1 + 19840) = &v128[8 * v127];
      if (v122) {
        operator delete(v122);
      }
      goto LABEL_153;
    }
    uint64_t v30 = **(void **)(a1 + 20408);
    long long v31 = *(char **)(a1 + 19808);
    unint64_t v32 = *(void *)(a1 + 19816);
    if ((unint64_t)v31 < v32)
    {
      *(void *)long long v31 = *(void *)(v30 + 8 * v29);
      uint64_t v33 = (uint64_t)(v31 + 8);
      goto LABEL_83;
    }
    uint64_t v40 = *v534;
    uint64_t v41 = v31 - *v534;
    uint64_t v42 = v41 >> 3;
    unint64_t v43 = (v41 >> 3) + 1;
    if (v43 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v44 = v32 - (void)v40;
    if (v44 >> 2 > v43) {
      unint64_t v43 = v44 >> 2;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v43;
    }
    if (v45)
    {
      if (v45 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v46 = operator new(8 * v45);
      long long v47 = &v46[8 * v42];
      void *v47 = *(void *)(v30 + 8 * v29);
      uint64_t v33 = (uint64_t)(v47 + 1);
      if (v31 == v40) {
        goto LABEL_81;
      }
LABEL_75:
      unint64_t v56 = v31 - 8 - v40;
      if (v56 < 0x58) {
        goto LABEL_686;
      }
      if ((unint64_t)(v31 - &v46[v41]) < 0x20) {
        goto LABEL_686;
      }
      uint64_t v57 = (v56 >> 3) + 1;
      uint64_t v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v59 = &v31[-v58];
      long long v47 = (void *)((char *)v47 - v58);
      long long v60 = &v46[8 * v42 - 16];
      uint64_t v61 = v31 - 16;
      uint64_t v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v63 = *(_OWORD *)v61;
        *(v60 - 1) = *((_OWORD *)v61 - 1);
        *long long v60 = v63;
        v60 -= 2;
        v61 -= 32;
        v62 -= 4;
      }
      while (v62);
      long long v31 = v59;
      if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_686:
        do
        {
          uint64_t v64 = *((void *)v31 - 1);
          v31 -= 8;
          *--long long v47 = v64;
        }
        while (v31 != v40);
      }
      goto LABEL_81;
    }
    uint64_t v46 = 0;
    long long v47 = (void *)(8 * v42);
    *(void *)(8 * v42) = *(void *)(v30 + 8 * v29);
    uint64_t v33 = 8 * v42 + 8;
    if (v31 != v40) {
      goto LABEL_75;
    }
LABEL_81:
    *(void *)(a1 + 19800) = v47;
    *(void *)(a1 + 19808) = v33;
    *(void *)(a1 + 19816) = &v46[8 * v45];
    if (v40) {
      operator delete(v40);
    }
LABEL_83:
    *(void *)(a1 + 19808) = v33;
    uint64_t v65 = *(void *)(a1 + 20024);
    uint64_t v66 = *(void *)(*(void *)(v65 + 40) + 12 * (int)v29);
    int v67 = *(char **)(a1 + 19832);
    unint64_t v68 = *(void *)(a1 + 19840);
    if ((unint64_t)v67 >= v68)
    {
      double v70 = (char *)*v532;
      uint64_t v71 = (uint64_t)&v67[-*v532];
      uint64_t v72 = v71 >> 3;
      unint64_t v73 = (v71 >> 3) + 1;
      if (v73 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v74 = v68 - (void)v70;
      if (v74 >> 2 > v73) {
        unint64_t v73 = v74 >> 2;
      }
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v75 = v73;
      }
      if (v75)
      {
        if (v75 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v76 = v75;
        uint64_t v77 = operator new(8 * v75);
        unint64_t v75 = v76;
        int v78 = &v77[8 * v72];
        *int v78 = v66;
        uint64_t v69 = (uint64_t)(v78 + 1);
        if (v67 == v70) {
          goto LABEL_102;
        }
LABEL_96:
        unint64_t v79 = v67 - 8 - v70;
        if (v79 < 0x58) {
          goto LABEL_687;
        }
        if ((unint64_t)(v67 - &v77[v71]) < 0x20) {
          goto LABEL_687;
        }
        uint64_t v80 = (v79 >> 3) + 1;
        uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
        double v82 = &v67[-v81];
        int v78 = (void *)((char *)v78 - v81);
        uint64_t v83 = &v77[8 * v72 - 16];
        double v84 = v67 - 16;
        uint64_t v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v86 = *(_OWORD *)v84;
          *(v83 - 1) = *((_OWORD *)v84 - 1);
          *uint64_t v83 = v86;
          v83 -= 2;
          v84 -= 32;
          v85 -= 4;
        }
        while (v85);
        int v67 = v82;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_687:
          do
          {
            uint64_t v87 = *((void *)v67 - 1);
            v67 -= 8;
            *--int v78 = v87;
          }
          while (v67 != v70);
        }
      }
      else
      {
        uint64_t v77 = 0;
        int v78 = (void *)(8 * v72);
        *(void *)(8 * v72) = v66;
        uint64_t v69 = 8 * v72 + 8;
        if (v67 != v70) {
          goto LABEL_96;
        }
      }
LABEL_102:
      *(void *)(a1 + 19824) = v78;
      *(void *)(a1 + 19832) = v69;
      *(void *)(a1 + 19840) = &v77[8 * v75];
      if (v70)
      {
        operator delete(v70);
        uint64_t v65 = *(void *)(a1 + 20024);
      }
      goto LABEL_104;
    }
    *(void *)int v67 = v66;
    uint64_t v69 = (uint64_t)(v67 + 8);
LABEL_104:
    *(void *)(a1 + 19832) = v69;
    uint64_t v88 = -*(void *)(*(void *)(v65 + 40) + 12 * (int)(v29 ^ 1));
    int64_t v89 = *(char **)(a1 + 19856);
    unint64_t v90 = *(void *)(a1 + 19864);
    if ((unint64_t)v89 < v90)
    {
      *(void *)int64_t v89 = v88;
      uint64_t v27 = v89 + 8;
LABEL_42:
      uint64_t v28 = (uint64_t)v27;
      goto LABEL_43;
    }
    uint64_t v91 = (char *)*v531;
    uint64_t v92 = (uint64_t)&v89[-*v531];
    uint64_t v93 = v92 >> 3;
    unint64_t v94 = (v92 >> 3) + 1;
    if (v94 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v95 = v90 - (void)v91;
    if (v95 >> 2 > v94) {
      unint64_t v94 = v95 >> 2;
    }
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v96 = v94;
    }
    if (v96)
    {
      if (v96 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v97 = operator new(8 * v96);
      uint64_t v98 = &v97[8 * v93];
      *uint64_t v98 = v88;
      uint64_t v28 = (uint64_t)(v98 + 1);
      if (v89 == v91) {
        goto LABEL_172;
      }
LABEL_116:
      unint64_t v99 = v89 - 8 - v91;
      if (v99 < 0x58) {
        goto LABEL_688;
      }
      if ((unint64_t)(v89 - &v97[v92]) < 0x20) {
        goto LABEL_688;
      }
      uint64_t v100 = (v99 >> 3) + 1;
      uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v102 = &v89[-v101];
      uint64_t v98 = (void *)((char *)v98 - v101);
      unint64_t v103 = &v97[8 * v93 - 16];
      uint64_t v104 = v89 - 16;
      uint64_t v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v106 = *(_OWORD *)v104;
        *(v103 - 1) = *((_OWORD *)v104 - 1);
        *unint64_t v103 = v106;
        v103 -= 2;
        v104 -= 32;
        v105 -= 4;
      }
      while (v105);
      int64_t v89 = v102;
      if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_688:
        do
        {
          uint64_t v107 = *((void *)v89 - 1);
          v89 -= 8;
          *--uint64_t v98 = v107;
        }
        while (v89 != v91);
      }
      goto LABEL_172;
    }
    uint64_t v97 = 0;
    uint64_t v98 = (void *)(8 * v93);
    *(void *)(8 * v93) = v88;
    uint64_t v28 = 8 * v93 + 8;
    if (v89 != v91) {
      goto LABEL_116;
    }
LABEL_172:
    *(void *)(a1 + 19848) = v98;
    *(void *)(a1 + 19856) = v28;
    *(void *)(a1 + 19864) = &v97[8 * v96];
    if (v91) {
      operator delete(v91);
    }
LABEL_43:
    *(void *)(a1 + 19856) = v28;
    ++v25;
    uint64_t v26 = v538;
  }
  int v530 = v541 + 1840700270 * ((unint64_t)(v563 - (unsigned char *)v562) >> 3);
  *(void *)(a1 + 19880) = *(void *)(a1 + 19872);
  v528 = (void **)(a1 + 19896);
  *(void *)(a1 + 19904) = *(void *)(a1 + 19896);
  uint64_t v155 = *a3;
  uint64_t v539 = a3[1];
  if (*a3 != v539)
  {
    v526 = (void **)(a1 + 19728);
    v525 = (void **)(a1 + 19872);
    v524 = (void **)(a1 + 19752);
    while (1)
    {
      int v158 = *(_DWORD *)v155;
      uint64_t v159 = *(void *)(v155 + 4);
      if (operations_research::glop::RevisedSimplex::GetConstraintStatus(a1 + 840, *(_DWORD *)v155) == 1) {
        goto LABEL_179;
      }
      unint64_t v160 = *(char **)(a1 + 19808);
      unint64_t v161 = *(void *)(a1 + 19816);
      if ((unint64_t)v160 < v161)
      {
        *(void *)unint64_t v160 = 0;
        uint64_t v162 = (uint64_t)(v160 + 8);
        goto LABEL_202;
      }
      unint64_t v163 = *v534;
      uint64_t v164 = v160 - *v534;
      uint64_t v165 = v164 >> 3;
      unint64_t v166 = (v164 >> 3) + 1;
      if (v166 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v167 = v161 - (void)v163;
      if (v167 >> 2 > v166) {
        unint64_t v166 = v167 >> 2;
      }
      unint64_t v168 = (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v166;
      if (v168) {
        break;
      }
      int v169 = 0;
      int v170 = (void *)(8 * v165);
      *(void *)(8 * v165) = 0;
      uint64_t v162 = 8 * v165 + 8;
      if (v160 != v163) {
        goto LABEL_194;
      }
LABEL_200:
      *(void *)(a1 + 19800) = v170;
      *(void *)(a1 + 19808) = v162;
      *(void *)(a1 + 19816) = &v169[8 * v168];
      if (v163) {
        operator delete(v163);
      }
LABEL_202:
      *(void *)(a1 + 19808) = v162;
      int v180 = (((*(void *)(a1 + 19880) - *(void *)(a1 + 19872)) >> 1) & 0xFFFFFFFE) + v530;
      uint64_t v181 = *(char **)(a1 + 19736);
      unint64_t v182 = *(void *)(a1 + 19744);
      if ((unint64_t)v181 < v182)
      {
        *(_DWORD *)uint64_t v181 = v180;
        uint64_t v183 = (uint64_t)(v181 + 4);
        goto LABEL_224;
      }
      int v184 = v158;
      uint64_t v185 = v159;
      uint64_t v186 = v155;
      unint64_t v187 = (char *)*v526;
      uint64_t v188 = v181 - (unsigned char *)*v526;
      uint64_t v189 = v188 >> 2;
      unint64_t v190 = (v188 >> 2) + 1;
      if (v190 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v191 = v182 - (void)v187;
      if (v191 >> 1 > v190) {
        unint64_t v190 = v191 >> 1;
      }
      if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v192 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v192 = v190;
      }
      if (v192)
      {
        if (v192 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v193 = v192;
        uint64_t v194 = operator new(4 * v192);
        unint64_t v192 = v193;
        int64_t v195 = &v194[4 * v189];
        _DWORD *v195 = v180;
        uint64_t v183 = (uint64_t)(v195 + 1);
        if (v181 == v187)
        {
LABEL_216:
          uint64_t v155 = v186;
          uint64_t v159 = v185;
          int v158 = v184;
          goto LABEL_222;
        }
      }
      else
      {
        uint64_t v194 = 0;
        int64_t v195 = (_DWORD *)(4 * v189);
        *(_DWORD *)(4 * v189) = v180;
        uint64_t v183 = 4 * v189 + 4;
        if (v181 == v187) {
          goto LABEL_216;
        }
      }
      unint64_t v196 = v181 - 4 - v187;
      if (v196 < 0x2C)
      {
        uint64_t v155 = v186;
        uint64_t v159 = v185;
        int v158 = v184;
        do
        {
LABEL_221:
          int v205 = *((_DWORD *)v181 - 1);
          v181 -= 4;
          *--int64_t v195 = v205;
        }
        while (v181 != v187);
        goto LABEL_222;
      }
      unint64_t v197 = v181 - &v194[v188];
      uint64_t v155 = v186;
      uint64_t v159 = v185;
      int v158 = v184;
      if (v197 < 0x20) {
        goto LABEL_221;
      }
      uint64_t v198 = (v196 >> 2) + 1;
      uint64_t v199 = 4 * (v198 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v200 = &v181[-v199];
      int64_t v195 = (_DWORD *)((char *)v195 - v199);
      uint64_t v201 = &v194[4 * v189 - 16];
      char v202 = v181 - 16;
      uint64_t v203 = v198 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v204 = *(_OWORD *)v202;
        *(v201 - 1) = *((_OWORD *)v202 - 1);
        _OWORD *v201 = v204;
        v201 -= 2;
        v202 -= 32;
        v203 -= 8;
      }
      while (v203);
      uint64_t v181 = v200;
      if (v198 != (v198 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_221;
      }
LABEL_222:
      *(void *)(a1 + 19728) = v195;
      *(void *)(a1 + 19736) = v183;
      *(void *)(a1 + 19744) = &v194[4 * v192];
      if (v187) {
        operator delete(v187);
      }
LABEL_224:
      *(void *)(a1 + 19736) = v183;
      v206 = *(int **)(a1 + 19880);
      unint64_t v207 = *(void *)(a1 + 19888);
      if ((unint64_t)v206 < v207)
      {
        int *v206 = v158;
        uint64_t v208 = (uint64_t)(v206 + 1);
        goto LABEL_245;
      }
      uint64_t v209 = (int *)*v525;
      uint64_t v210 = (char *)v206 - (unsigned char *)*v525;
      uint64_t v211 = v210 >> 2;
      unint64_t v212 = (v210 >> 2) + 1;
      if (v212 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v213 = v207 - (void)v209;
      if (v213 >> 1 > v212) {
        unint64_t v212 = v213 >> 1;
      }
      if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v214 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v214 = v212;
      }
      if (v214)
      {
        if (v214 >> 62) {
          goto LABEL_656;
        }
        uint64_t v215 = operator new(4 * v214);
        v216 = (int *)&v215[4 * v211];
        int *v216 = v158;
        uint64_t v208 = (uint64_t)(v216 + 1);
        if (v206 == v209) {
          goto LABEL_243;
        }
LABEL_237:
        unint64_t v217 = (char *)(v206 - 1) - (char *)v209;
        if (v217 < 0x2C) {
          goto LABEL_689;
        }
        if ((unint64_t)((char *)v206 - &v215[v210]) < 0x20) {
          goto LABEL_689;
        }
        uint64_t v218 = (v217 >> 2) + 1;
        uint64_t v219 = 4 * (v218 & 0x7FFFFFFFFFFFFFF8);
        v220 = &v206[v219 / 0xFFFFFFFFFFFFFFFCLL];
        v216 = (int *)((char *)v216 - v219);
        v221 = &v215[4 * v211 - 16];
        long long v222 = v206 - 4;
        uint64_t v223 = v218 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v224 = *(_OWORD *)v222;
          *(v221 - 1) = *((_OWORD *)v222 - 1);
          _OWORD *v221 = v224;
          v221 -= 2;
          v222 -= 8;
          v223 -= 8;
        }
        while (v223);
        v206 = v220;
        if (v218 != (v218 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_689:
          do
          {
            int v225 = *--v206;
            *--v216 = v225;
          }
          while (v206 != v209);
        }
        goto LABEL_243;
      }
      uint64_t v215 = 0;
      v216 = (int *)(4 * v211);
      *(_DWORD *)(4 * v211) = v158;
      uint64_t v208 = 4 * v211 + 4;
      if (v206 != v209) {
        goto LABEL_237;
      }
LABEL_243:
      *(void *)(a1 + 19872) = v216;
      *(void *)(a1 + 19880) = v208;
      *(void *)(a1 + 19888) = &v215[4 * v214];
      if (v209) {
        operator delete(v209);
      }
LABEL_245:
      *(void *)(a1 + 19880) = v208;
      v226 = *(uint64_t **)(a1 + 19760);
      unint64_t v227 = *(void *)(a1 + 19768);
      BOOL v228 = __OFSUB__(v226, v227);
      if ((unint64_t)v226 < v227)
      {
        uint64_t *v226 = v159;
        uint64_t v229 = (uint64_t)(v226 + 1);
        goto LABEL_266;
      }
      v230 = (uint64_t *)*v524;
      uint64_t v231 = (char *)v226 - (unsigned char *)*v524;
      uint64_t v232 = v231 >> 3;
      unint64_t v233 = (v231 >> 3) + 1;
      if (v233 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v234 = v227 - (void)v230;
      if (v234 >> 2 > v233) {
        unint64_t v233 = v234 >> 2;
      }
      if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v235 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v235 = v233;
      }
      if (v235)
      {
        if (v235 >> 61) {
LABEL_656:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        v236 = operator new(8 * v235);
        v237 = (uint64_t *)&v236[8 * v232];
        uint64_t *v237 = v159;
        uint64_t v229 = (uint64_t)(v237 + 1);
        BOOL v228 = __OFSUB__(v226, v230);
        if (v226 == v230) {
          goto LABEL_264;
        }
LABEL_258:
        unint64_t v238 = (char *)(v226 - 1) - (char *)v230;
        if (v238 < 0x58) {
          goto LABEL_690;
        }
        if ((unint64_t)((char *)v226 - &v236[v231]) < 0x20) {
          goto LABEL_690;
        }
        uint64_t v239 = (v238 >> 3) + 1;
        uint64_t v240 = v239 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v241 = 8 * (v239 & 0x3FFFFFFFFFFFFFFCLL);
        v242 = &v226[v241 / 0xFFFFFFFFFFFFFFF8];
        v237 = (uint64_t *)((char *)v237 - v241);
        v243 = &v236[8 * v232 - 16];
        v244 = v226 - 2;
        uint64_t v245 = v239 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v246 = *(_OWORD *)v244;
          *(v243 - 1) = *((_OWORD *)v244 - 1);
          _OWORD *v243 = v246;
          v243 -= 2;
          v244 -= 4;
          v245 -= 4;
        }
        while (v245);
        v226 = v242;
        BOOL v228 = __OFSUB__(v239, v240);
        if (v239 != v240)
        {
LABEL_690:
          do
          {
            uint64_t v247 = *--v226;
            *--v237 = v247;
            BOOL v228 = __OFSUB__(v226, v230);
          }
          while (v226 != v230);
        }
        goto LABEL_264;
      }
      v236 = 0;
      v237 = (uint64_t *)(8 * v232);
      *(void *)(8 * v232) = v159;
      uint64_t v229 = 8 * v232 + 8;
      BOOL v228 = __OFSUB__(v226, v230);
      if (v226 != v230) {
        goto LABEL_258;
      }
LABEL_264:
      *(void *)(a1 + 19752) = v237;
      *(void *)(a1 + 19760) = v229;
      *(void *)(a1 + 19768) = &v236[8 * v235];
      if (v230) {
        operator delete(v230);
      }
LABEL_266:
      *(void *)(a1 + 19760) = v229;
      v248 = (uint64_t *)(*(void *)(a1 + 312) + 40 * v158);
      unint64_t v249 = v248[1];
      uint64_t v250 = *v248;
      if (((((v249 - *v248) ^ v249) & (*v248 ^ v249) & 0x8000000000000000) != 0) != v228) {
        uint64_t v251 = (v249 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v251 = v249 - *v248;
      }
      v252 = *(char **)(a1 + 19904);
      unint64_t v253 = *(void *)(a1 + 19912);
      if (v159 >= 1)
      {
        if ((unint64_t)v252 < v253)
        {
          *(void *)v252 = v249;
          uint64_t v254 = (uint64_t)(v252 + 8);
          goto LABEL_303;
        }
        v256 = (char *)*v528;
        uint64_t v257 = v252 - (unsigned char *)*v528;
        uint64_t v258 = v257 >> 3;
        unint64_t v259 = (v257 >> 3) + 1;
        if (v259 >> 61) {
          goto LABEL_672;
        }
        uint64_t v260 = v253 - (void)v256;
        if (v260 >> 2 > v259) {
          unint64_t v259 = v260 >> 2;
        }
        if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v261 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v261 = v259;
        }
        if (v261)
        {
          if (v261 >> 61) {
            goto LABEL_658;
          }
          v262 = operator new(8 * v261);
          v263 = &v262[8 * v258];
          void *v263 = v248[1];
          uint64_t v254 = (uint64_t)(v263 + 1);
          if (v252 == v256) {
            goto LABEL_301;
          }
LABEL_295:
          unint64_t v272 = v252 - 8 - v256;
          if (v272 < 0x58) {
            goto LABEL_691;
          }
          if ((unint64_t)(v252 - &v262[v257]) < 0x20) {
            goto LABEL_691;
          }
          uint64_t v273 = (v272 >> 3) + 1;
          uint64_t v274 = 8 * (v273 & 0x3FFFFFFFFFFFFFFCLL);
          v275 = &v252[-v274];
          v263 = (void *)((char *)v263 - v274);
          v276 = &v262[8 * v258 - 16];
          v277 = v252 - 16;
          uint64_t v278 = v273 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v279 = *(_OWORD *)v277;
            *(v276 - 1) = *((_OWORD *)v277 - 1);
            _OWORD *v276 = v279;
            v276 -= 2;
            v277 -= 32;
            v278 -= 4;
          }
          while (v278);
          v252 = v275;
          if (v273 != (v273 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_691:
            do
            {
              uint64_t v280 = *((void *)v252 - 1);
              v252 -= 8;
              *--v263 = v280;
            }
            while (v252 != v256);
          }
        }
        else
        {
          v262 = 0;
          v263 = (void *)(8 * v258);
          *(void *)(8 * v258) = v249;
          uint64_t v254 = 8 * v258 + 8;
          if (v252 != v256) {
            goto LABEL_295;
          }
        }
LABEL_301:
        *(void *)(a1 + 19896) = v263;
        *(void *)(a1 + 19904) = v254;
        *(void *)(a1 + 19912) = &v262[8 * v261];
        if (v256) {
          operator delete(v256);
        }
LABEL_303:
        *(void *)(a1 + 19904) = v254;
        v281 = *(char **)(a1 + 19832);
        unint64_t v282 = *(void *)(a1 + 19840);
        if ((unint64_t)v281 < v282)
        {
          *(void *)v281 = 0;
          uint64_t v283 = (uint64_t)(v281 + 8);
LABEL_324:
          *(void *)(a1 + 19832) = v283;
          v301 = *(uint64_t **)(a1 + 19856);
          unint64_t v302 = *(void *)(a1 + 19864);
          if ((unint64_t)v301 >= v302)
          {
            v303 = (char *)*v531;
            uint64_t v304 = (uint64_t)v301 - *v531;
            uint64_t v305 = v304 >> 3;
            unint64_t v306 = (v304 >> 3) + 1;
            if (v306 >> 61) {
LABEL_672:
            }
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            uint64_t v307 = v302 - (void)v303;
            if (v307 >> 2 > v306) {
              unint64_t v306 = v307 >> 2;
            }
            if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v308 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v308 = v306;
            }
            if (v308)
            {
              if (v308 >> 61) {
LABEL_658:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              v309 = operator new(8 * v308);
              v310 = (uint64_t *)&v309[8 * v305];
              uint64_t *v310 = v251;
              uint64_t v157 = (uint64_t)(v310 + 1);
              if (v301 == (uint64_t *)v303) {
                goto LABEL_393;
              }
            }
            else
            {
              v309 = 0;
              v310 = (uint64_t *)(8 * v305);
              *(void *)(8 * v305) = v251;
              uint64_t v157 = 8 * v305 + 8;
              if (v301 == (uint64_t *)v303) {
                goto LABEL_393;
              }
            }
            unint64_t v311 = (char *)(v301 - 1) - v303;
            if (v311 < 0x58) {
              goto LABEL_692;
            }
            if ((unint64_t)((char *)v301 - &v309[v304]) < 0x20) {
              goto LABEL_692;
            }
            uint64_t v312 = (v311 >> 3) + 1;
            uint64_t v313 = 8 * (v312 & 0x3FFFFFFFFFFFFFFCLL);
            v314 = &v301[v313 / 0xFFFFFFFFFFFFFFF8];
            v310 = (uint64_t *)((char *)v310 - v313);
            v315 = &v309[8 * v305 - 16];
            v316 = v301 - 2;
            uint64_t v317 = v312 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v318 = *(_OWORD *)v316;
              *(v315 - 1) = *((_OWORD *)v316 - 1);
              _OWORD *v315 = v318;
              v315 -= 2;
              v316 -= 4;
              v317 -= 4;
            }
            while (v317);
            v301 = v314;
            if (v312 != (v312 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_692:
              do
              {
                uint64_t v319 = *--v301;
                *--v310 = v319;
              }
              while (v301 != (uint64_t *)v303);
            }
            goto LABEL_393;
          }
          uint64_t *v301 = v251;
          uint64_t v156 = v301 + 1;
          goto LABEL_177;
        }
        v284 = (char *)*v532;
        uint64_t v285 = (uint64_t)&v281[-*v532];
        uint64_t v286 = v285 >> 3;
        unint64_t v287 = (v285 >> 3) + 1;
        if (v287 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v288 = v282 - (void)v284;
        if (v288 >> 2 > v287) {
          unint64_t v287 = v288 >> 2;
        }
        if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v289 = v287;
        }
        if (v289)
        {
          if (v289 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v290 = operator new(8 * v289);
          v291 = &v290[8 * v286];
          void *v291 = 0;
          uint64_t v283 = (uint64_t)(v291 + 1);
          if (v281 == v284) {
            goto LABEL_322;
          }
LABEL_316:
          unint64_t v292 = v281 - 8 - v284;
          if (v292 < 0x58) {
            goto LABEL_693;
          }
          if ((unint64_t)(v281 - &v290[v285]) < 0x20) {
            goto LABEL_693;
          }
          uint64_t v293 = (v292 >> 3) + 1;
          uint64_t v294 = 8 * (v293 & 0x3FFFFFFFFFFFFFFCLL);
          v295 = &v281[-v294];
          v291 = (void *)((char *)v291 - v294);
          v296 = &v290[8 * v286 - 16];
          v297 = v281 - 16;
          uint64_t v298 = v293 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v299 = *(_OWORD *)v297;
            *(v296 - 1) = *((_OWORD *)v297 - 1);
            _OWORD *v296 = v299;
            v296 -= 2;
            v297 -= 32;
            v298 -= 4;
          }
          while (v298);
          v281 = v295;
          if (v293 != (v293 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_693:
            do
            {
              uint64_t v300 = *((void *)v281 - 1);
              v281 -= 8;
              *--v291 = v300;
            }
            while (v281 != v284);
          }
        }
        else
        {
          v290 = 0;
          v291 = (void *)(8 * v286);
          *(void *)(8 * v286) = 0;
          uint64_t v283 = 8 * v286 + 8;
          if (v281 != v284) {
            goto LABEL_316;
          }
        }
LABEL_322:
        *(void *)(a1 + 19824) = v291;
        *(void *)(a1 + 19832) = v283;
        *(void *)(a1 + 19840) = &v290[8 * v289];
        if (v284) {
          operator delete(v284);
        }
        goto LABEL_324;
      }
      if ((unint64_t)v252 < v253)
      {
        *(void *)v252 = v250;
        uint64_t v255 = (uint64_t)(v252 + 8);
        goto LABEL_352;
      }
      v264 = (char *)*v528;
      uint64_t v265 = v252 - (unsigned char *)*v528;
      uint64_t v266 = v265 >> 3;
      unint64_t v267 = (v265 >> 3) + 1;
      if (v267 >> 61) {
        goto LABEL_672;
      }
      uint64_t v268 = v253 - (void)v264;
      if (v268 >> 2 > v267) {
        unint64_t v267 = v268 >> 2;
      }
      if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v269 = v267;
      }
      if (v269)
      {
        if (v269 >> 61) {
          goto LABEL_658;
        }
        v270 = operator new(8 * v269);
        v271 = (uint64_t *)&v270[8 * v266];
        uint64_t *v271 = *v248;
        uint64_t v255 = (uint64_t)(v271 + 1);
        if (v252 == v264) {
          goto LABEL_350;
        }
LABEL_344:
        unint64_t v320 = v252 - 8 - v264;
        if (v320 < 0x58) {
          goto LABEL_694;
        }
        if ((unint64_t)(v252 - &v270[v265]) < 0x20) {
          goto LABEL_694;
        }
        uint64_t v321 = (v320 >> 3) + 1;
        uint64_t v322 = 8 * (v321 & 0x3FFFFFFFFFFFFFFCLL);
        v323 = &v252[-v322];
        v271 = (uint64_t *)((char *)v271 - v322);
        v324 = &v270[8 * v266 - 16];
        v325 = v252 - 16;
        uint64_t v326 = v321 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v327 = *(_OWORD *)v325;
          *(v324 - 1) = *((_OWORD *)v325 - 1);
          _OWORD *v324 = v327;
          v324 -= 2;
          v325 -= 32;
          v326 -= 4;
        }
        while (v326);
        v252 = v323;
        if (v321 != (v321 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_694:
          do
          {
            uint64_t v328 = *((void *)v252 - 1);
            v252 -= 8;
            *--v271 = v328;
          }
          while (v252 != v264);
        }
        goto LABEL_350;
      }
      v270 = 0;
      v271 = (uint64_t *)(8 * v266);
      *(void *)(8 * v266) = v250;
      uint64_t v255 = 8 * v266 + 8;
      if (v252 != v264) {
        goto LABEL_344;
      }
LABEL_350:
      *(void *)(a1 + 19896) = v271;
      *(void *)(a1 + 19904) = v255;
      *(void *)(a1 + 19912) = &v270[8 * v269];
      if (v264) {
        operator delete(v264);
      }
LABEL_352:
      *(void *)(a1 + 19904) = v255;
      uint64_t v329 = -v251;
      v330 = *(char **)(a1 + 19832);
      unint64_t v331 = *(void *)(a1 + 19840);
      if ((unint64_t)v330 >= v331)
      {
        uint64_t v333 = v155;
        v334 = (char *)*v532;
        uint64_t v335 = (uint64_t)&v330[-*v532];
        uint64_t v336 = v335 >> 3;
        unint64_t v337 = (v335 >> 3) + 1;
        if (v337 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v338 = v331 - (void)v334;
        if (v338 >> 2 > v337) {
          unint64_t v337 = v338 >> 2;
        }
        if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v339 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v339 = v337;
        }
        if (v339)
        {
          if (v339 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v340 = operator new(8 * v339);
          v341 = (uint64_t *)&v340[8 * v336];
          uint64_t *v341 = v329;
          uint64_t v332 = (uint64_t)(v341 + 1);
          if (v330 != v334)
          {
LABEL_363:
            unint64_t v342 = v330 - 8 - v334;
            if (v342 < 0x58)
            {
              uint64_t v155 = v333;
              goto LABEL_371;
            }
            unint64_t v343 = v330 - &v340[v335];
            uint64_t v155 = v333;
            if (v343 < 0x20) {
              goto LABEL_695;
            }
            uint64_t v344 = (v342 >> 3) + 1;
            uint64_t v345 = 8 * (v344 & 0x3FFFFFFFFFFFFFFCLL);
            v346 = &v330[-v345];
            v341 = (uint64_t *)((char *)v341 - v345);
            v347 = &v340[8 * v336 - 16];
            v348 = v330 - 16;
            uint64_t v349 = v344 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v350 = *(_OWORD *)v348;
              *(v347 - 1) = *((_OWORD *)v348 - 1);
              _OWORD *v347 = v350;
              v347 -= 2;
              v348 -= 32;
              v349 -= 4;
            }
            while (v349);
            v330 = v346;
            if (v344 != (v344 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_695:
              do
              {
LABEL_371:
                uint64_t v351 = *((void *)v330 - 1);
                v330 -= 8;
                *--v341 = v351;
              }
              while (v330 != v334);
            }
LABEL_372:
            *(void *)(a1 + 19824) = v341;
            *(void *)(a1 + 19832) = v332;
            *(void *)(a1 + 19840) = &v340[8 * v339];
            if (v334) {
              operator delete(v334);
            }
            goto LABEL_374;
          }
        }
        else
        {
          v340 = 0;
          v341 = (uint64_t *)(8 * v336);
          *(void *)(8 * v336) = v329;
          uint64_t v332 = 8 * v336 + 8;
          if (v330 != v334) {
            goto LABEL_363;
          }
        }
        uint64_t v155 = v333;
        goto LABEL_372;
      }
      *(void *)v330 = v329;
      uint64_t v332 = (uint64_t)(v330 + 8);
LABEL_374:
      *(void *)(a1 + 19832) = v332;
      v352 = *(char **)(a1 + 19856);
      unint64_t v353 = *(void *)(a1 + 19864);
      if ((unint64_t)v352 >= v353)
      {
        v303 = (char *)*v531;
        uint64_t v354 = (uint64_t)&v352[-*v531];
        uint64_t v355 = v354 >> 3;
        unint64_t v356 = (v354 >> 3) + 1;
        if (v356 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v357 = v353 - (void)v303;
        if (v357 >> 2 > v356) {
          unint64_t v356 = v357 >> 2;
        }
        if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v308 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v308 = v356;
        }
        if (v308)
        {
          if (v308 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v309 = operator new(8 * v308);
          v310 = (uint64_t *)&v309[8 * v355];
          uint64_t *v310 = 0;
          uint64_t v157 = (uint64_t)(v310 + 1);
          if (v352 == v303) {
            goto LABEL_393;
          }
LABEL_387:
          unint64_t v358 = v352 - 8 - v303;
          if (v358 < 0x58) {
            goto LABEL_696;
          }
          if ((unint64_t)(v352 - &v309[v354]) < 0x20) {
            goto LABEL_696;
          }
          uint64_t v359 = (v358 >> 3) + 1;
          uint64_t v360 = 8 * (v359 & 0x3FFFFFFFFFFFFFFCLL);
          v361 = &v352[-v360];
          v310 = (uint64_t *)((char *)v310 - v360);
          v362 = &v309[8 * v355 - 16];
          v363 = v352 - 16;
          uint64_t v364 = v359 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v365 = *(_OWORD *)v363;
            *(v362 - 1) = *((_OWORD *)v363 - 1);
            _OWORD *v362 = v365;
            v362 -= 2;
            v363 -= 32;
            v364 -= 4;
          }
          while (v364);
          v352 = v361;
          if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_696:
            do
            {
              uint64_t v366 = *((void *)v352 - 1);
              v352 -= 8;
              *--v310 = v366;
            }
            while (v352 != v303);
          }
        }
        else
        {
          v309 = 0;
          v310 = (uint64_t *)(8 * v355);
          *(void *)(8 * v355) = 0;
          uint64_t v157 = 8 * v355 + 8;
          if (v352 != v303) {
            goto LABEL_387;
          }
        }
LABEL_393:
        *(void *)(a1 + 19848) = v310;
        *(void *)(a1 + 19856) = v157;
        *(void *)(a1 + 19864) = &v309[8 * v308];
        if (v303) {
          operator delete(v303);
        }
        goto LABEL_178;
      }
      *(void *)v352 = 0;
      uint64_t v156 = v352 + 8;
LABEL_177:
      uint64_t v157 = (uint64_t)v156;
LABEL_178:
      *(void *)(a1 + 19856) = v157;
LABEL_179:
      v155 += 12;
      if (v155 == v539) {
        goto LABEL_395;
      }
    }
    if (v168 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v169 = operator new(8 * v168);
    int v170 = &v169[8 * v165];
    void *v170 = 0;
    uint64_t v162 = (uint64_t)(v170 + 1);
    if (v160 == v163) {
      goto LABEL_200;
    }
LABEL_194:
    unint64_t v171 = v160 - 8 - v163;
    if (v171 < 0x58) {
      goto LABEL_697;
    }
    if ((unint64_t)(v160 - &v169[v164]) < 0x20) {
      goto LABEL_697;
    }
    uint64_t v172 = (v171 >> 3) + 1;
    uint64_t v173 = 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
    v174 = &v160[-v173];
    int v170 = (void *)((char *)v170 - v173);
    uint64_t v175 = &v169[8 * v165 - 16];
    uint64_t v176 = v160 - 16;
    uint64_t v177 = v172 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v178 = *(_OWORD *)v176;
      *(v175 - 1) = *((_OWORD *)v176 - 1);
      _OWORD *v175 = v178;
      v175 -= 2;
      v176 -= 32;
      v177 -= 4;
    }
    while (v177);
    unint64_t v160 = v174;
    if (v172 != (v172 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_697:
      do
      {
        uint64_t v179 = *((void *)v160 - 1);
        v160 -= 8;
        *--int v170 = v179;
      }
      while (v160 != v163);
    }
    goto LABEL_200;
  }
LABEL_395:
  operations_research::sat::IntegerRoundingCutHelper::ComputeCut((int **)(a1 + 19440), *(int *)(*(void *)(a1 + 20000) + 448), v534, v532, v531, (void *)(a1 + 20064), v523);
  uint64_t v367 = *(void *)(a1 + 19736);
  uint64_t v368 = *(void *)(a1 + 19728);
  uint64_t v369 = v367 - v368;
  if (v367 == v368)
  {
    double v372 = 0.0;
  }
  else
  {
    uint64_t v370 = 0;
    unint64_t v371 = v369 >> 2;
    if (v371 <= 1) {
      unint64_t v371 = 1;
    }
    double v372 = 0.0;
    do
    {
      uint64_t v373 = *(int *)(v368 + 4 * v370);
      if ((int)v373 < (int)v541)
      {
        uint64_t v374 = *(void *)(*(void *)(a1 + 19752) + 8 * v370);
        double v375 = (double)v374;
        if (v374 < (uint64_t)0x8000000000000003) {
          double v375 = -INFINITY;
        }
        if (v374 > 0x7FFFFFFFFFFFFFFDLL) {
          double v375 = INFINITY;
        }
        double v372 = v372 + v375 * *(double *)(**(void **)(a1 + 20408) + 8 * v373);
      }
      ++v370;
    }
    while (v371 != v370);
  }
  uint64_t v376 = *(void *)(a1 + 19720);
  double v377 = (double)v376;
  if (v376 < (uint64_t)0x8000000000000003) {
    double v377 = -INFINITY;
  }
  if (v376 > 0x7FFFFFFFFFFFFFFDLL) {
    double v377 = INFINITY;
  }
  double v378 = v372 - v377;
  if (v372 - v377 < 0.0001)
  {
    if (*off_26AED0070[0] < 3
      || off_26AED0070[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_26AED0070, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)3))
    {
      goto LABEL_627;
    }
    v379 = google::LogMessage::LogMessage((google::LogMessage *)&v575, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 722);
    v380 = (void *)google::LogMessage::stream(v379);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v380, (uint64_t)"Bad cut ", 8);
    v381 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v381, (uint64_t)" <= ", 4);
    std::ostream::operator<<();
LABEL_626:
    google::LogMessage::~LogMessage((google::LogMessage *)&v575);
LABEL_627:
    BOOL v15 = 0;
    goto LABEL_628;
  }
  unint64_t v382 = (uint64_t)(*(void *)(a1 + 19928) - *(void *)(a1 + 19920)) >> 2;
  unint64_t v575 = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)v529, v382, (uint64_t *)&v575);
  uint64_t v383 = *(void *)(a1 + 19720);
  uint64_t v384 = *(void *)(a1 + 19728);
  if (*(void *)(a1 + 19736) == v384) {
    goto LABEL_591;
  }
  unint64_t v385 = 0;
  int v386 = 0;
  int v387 = 0;
  v388 = (uint64_t *)(a1 + 19944);
  while (2)
  {
    int v389 = *(_DWORD *)(v384 + 4 * v385);
    int v390 = v389 - v541;
    if (v389 < (int)v541)
    {
      LODWORD(v575) = v389 & 0xFFFFFFFE;
      v391 = (int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v388, (int *)&v575);
      uint64_t v392 = *(void *)(*(void *)(a1 + 19752) + 8 * v385);
      if (v389) {
        uint64_t v392 = -v392;
      }
      *(void *)(*(void *)(a1 + 19776) + 8 * *v391) += v392;
      goto LABEL_419;
    }
    int v393 = v389 - v530;
    if (v389 >= v530)
    {
      if (v393 >= 0) {
        int v435 = v389 - v530;
      }
      else {
        int v435 = v393 + 1;
      }
      uint64_t v436 = *(void *)(*(void *)(a1 + 19752) + 8 * v385);
      uint64_t v437 = -v436;
      uint64_t v438 = *(void *)(a1 + 312) + 40 * *(int *)(*(void *)(a1 + 19872) + 4 * (v435 >> 1));
      v439 = *(int **)(v438 + 16);
      v440 = *(int **)(v438 + 24);
      if (v439 != v440)
      {
        if (v436 >= 0) {
          unint64_t v441 = *(void *)(*(void *)(a1 + 19752) + 8 * v385);
        }
        else {
          unint64_t v441 = -v436;
        }
        int v442 = 63 - __clz(v441);
        uint64_t v443 = *v529;
        if (v436) {
          int v444 = v442;
        }
        else {
          int v444 = 0;
        }
        if (v436)
        {
          while (1)
          {
            uint64_t v445 = *(void *)(v439 + 1);
            if (v445 >= 0) {
              unint64_t v446 = *(void *)(v439 + 1);
            }
            else {
              unint64_t v446 = -v445;
            }
            int v447 = 63 - __clz(v446);
            uint64_t v448 = *v439;
            if (!v445) {
              int v447 = 0;
            }
            int v449 = v447 + v444;
            BOOL v450 = __OFSUB__(v449, 61);
            if (v449 > 61)
            {
              if (v445)
              {
                uint64_t v445 = ((v445 ^ (unint64_t)v437) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                unint64_t v451 = v446 * v441;
                if (v449 > 0x3E || v451 >= v445)
                {
                  BOOL v450 = __OFSUB__(v445 - 0x7FFFFFFFFFFFFFFFLL, 2);
                  if ((unint64_t)(v445 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
                    goto LABEL_622;
                  }
                }
                else
                {
                  if (v445 >= 0) {
                    uint64_t v445 = v451;
                  }
                  else {
                    uint64_t v445 = -(uint64_t)v451;
                  }
                  BOOL v450 = __OFSUB__(v445 - 0x7FFFFFFFFFFFFFFFLL, 2);
                  if ((unint64_t)(v445 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
                    goto LABEL_622;
                  }
                }
              }
            }
            else
            {
              v445 *= v437;
              BOOL v450 = __OFSUB__(v445 - 0x7FFFFFFFFFFFFFFFLL, 2);
              if ((unint64_t)(v445 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
                goto LABEL_622;
              }
            }
            uint64_t v453 = *(void *)(v443 + 8 * v448);
            uint64_t v454 = v453 + v445;
            uint64_t v455 = (v453 + v445) ^ v445;
            uint64_t v456 = (v453 + v445) ^ v453;
            uint64_t v457 = ((unint64_t)v445 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            if ((v455 & v456) < 0 == v450) {
              uint64_t v457 = v454;
            }
            if ((unint64_t)(v457 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
              break;
            }
            *(void *)(v443 + 8 * v448) = v457;
            v439 += 3;
            if (v439 == v440) {
              goto LABEL_529;
            }
          }
        }
        else
        {
          while ((unint64_t)(*(void *)(v443 + 8 * *v439) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v439 += 3;
            if (v439 == v440) {
              goto LABEL_529;
            }
          }
        }
        goto LABEL_622;
      }
      if (v436 >= 0) {
        unint64_t v441 = *(void *)(*(void *)(a1 + 19752) + 8 * v385);
      }
      else {
        unint64_t v441 = -v436;
      }
      int v442 = 63 - __clz(v441);
LABEL_529:
      uint64_t v458 = (uint64_t)v435 >> 1;
      uint64_t v459 = *((void *)*v528 + v458);
      if (v459 >= 0) {
        unint64_t v460 = *((void *)*v528 + v458);
      }
      else {
        unint64_t v460 = -v459;
      }
      int v461 = 63 - __clz(v460);
      if (!v459) {
        int v461 = 0;
      }
      if (!v436) {
        int v442 = 0;
      }
      int v462 = v461 + v442;
      BOOL v463 = __OFSUB__(v462, 61);
      if (v462 > 61)
      {
        uint64_t v464 = 0;
        if (!v436 || !v459) {
          goto LABEL_549;
        }
        uint64_t v464 = ((v459 ^ (unint64_t)v437) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v465 = v460 * v441;
        if (v462 <= 0x3E && v465 < v464)
        {
          if (v464 >= 0) {
            uint64_t v464 = v460 * v441;
          }
          else {
            uint64_t v464 = -(uint64_t)v465;
          }
        }
      }
      else
      {
        uint64_t v464 = v459 * v437;
      }
      BOOL v463 = __OFSUB__(v464 - 0x7FFFFFFFFFFFFFFFLL, 2);
      if ((unint64_t)(v464 - 0x7FFFFFFFFFFFFFFFLL) < 2)
      {
LABEL_622:
        if (*off_26AED0078[0] < 1
          || off_26AED0078[0] == &google::kLogSiteUninitialized
          && !google::InitVLOG3__((google *)off_26AED0078, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
        {
          goto LABEL_627;
        }
        v503 = google::LogMessage::LogMessage((google::LogMessage *)&v575, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 792);
        v504 = (void *)google::LogMessage::stream(v503);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v504, (uint64_t)"Overflow in slack removal.", 26);
        goto LABEL_626;
      }
LABEL_549:
      uint64_t v467 = v464 + v383;
      uint64_t v468 = (v464 + v383) ^ v464;
      uint64_t v469 = (v464 + v383) ^ v383;
      uint64_t v470 = ((unint64_t)v464 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if ((v468 & v469) < 0 != v463) {
        uint64_t v383 = v470;
      }
      else {
        uint64_t v383 = v467;
      }
      if ((unint64_t)(v383 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
      {
        ++v386;
        goto LABEL_419;
      }
      goto LABEL_622;
    }
    uint64_t v540 = *(void *)(*(void *)(a1 + 19752) + 8 * v385);
    if (v390 >= 0) {
      int v394 = v389 - v541;
    }
    else {
      int v394 = v390 + 1;
    }
    LODWORD(v572[0]) = v394 >> 1;
    unint64_t v575 = 0x6DB6DB6DB6DB6DB7 * ((v563 - (unsigned char *)v562) >> 3);
    unint64_t v395 = (uint64_t)v394 >> 1;
    if (v575 <= v395) {
      google::MakeCheckOpString<int,unsigned long>((int)v572, (int)&v575, "index < ib_slack_infos.size()");
    }
    unint64_t v575 = 0;
    uint64_t v576 = 0;
    v577 = 0;
    uint64_t v537 = (uint64_t)v394 >> 1;
    v396 = (uint64_t *)((char *)v562 + 56 * (int)v395);
    uint64_t v398 = *v396;
    uint64_t v397 = v396[1];
    if (*v396 == v397)
    {
      v413 = 0;
LABEL_555:
      int v415 = v537;
      uint64_t v414 = v540;
      if (v540 >= 0) {
        unint64_t v416 = v540;
      }
      else {
        unint64_t v416 = -v540;
      }
      int v417 = 63 - __clz(v416);
LABEL_563:
      v472 = (char *)v562 + 56 * v415;
      uint64_t v473 = *((void *)v472 + 3);
      if (v473 >= 0) {
        unint64_t v474 = *((void *)v472 + 3);
      }
      else {
        unint64_t v474 = -v473;
      }
      int v475 = 63 - __clz(v474);
      if (v473) {
        int v476 = v475;
      }
      else {
        int v476 = 0;
      }
      uint64_t v477 = -v473;
      if (!v414) {
        int v417 = 0;
      }
      int v478 = v476 + v417;
      BOOL v479 = __OFSUB__(v478, 61);
      if (v478 > 61)
      {
        uint64_t v480 = 0;
        if (!v414 || !v473) {
          goto LABEL_583;
        }
        uint64_t v480 = ((v414 ^ (unint64_t)v477) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v481 = v474 * v416;
        if (v478 <= 0x3E && v481 < v480)
        {
          if (v480 >= 0) {
            uint64_t v480 = v481;
          }
          else {
            uint64_t v480 = -(uint64_t)v481;
          }
        }
      }
      else
      {
        uint64_t v480 = v414 * v477;
      }
      BOOL v479 = __OFSUB__(v480 - 0x7FFFFFFFFFFFFFFFLL, 2);
      if ((unint64_t)(v480 - 0x7FFFFFFFFFFFFFFFLL) < 2)
      {
LABEL_587:
        int v434 = 0;
        int v387 = 1;
        goto LABEL_588;
      }
LABEL_583:
      uint64_t v483 = v480 + v383;
      uint64_t v484 = (v480 + v383) ^ v480;
      uint64_t v485 = (v480 + v383) ^ v383;
      uint64_t v486 = ((unint64_t)v480 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if ((v484 & v485) < 0 != v479) {
        uint64_t v483 = v486;
      }
      if ((unint64_t)(v483 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v434 = 1;
        uint64_t v383 = v483;
        goto LABEL_588;
      }
      goto LABEL_587;
    }
    int v527 = v387;
    int v533 = v386;
    uint64_t v535 = v383;
    v399 = 0;
    do
    {
      while (1)
      {
        LODWORD(v573[0]) = *(_DWORD *)v398 & 0xFFFFFFFE;
        v400 = (int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v388, (int *)v573);
        uint64_t v401 = (*(unsigned char *)v398 & 1) != 0 ? -*(void *)(v398 + 4) : *(void *)(v398 + 4);
        int v402 = *v400;
        if (v399 >= (int *)v577) {
          break;
        }
        int *v399 = v402;
        *(void *)(v399 + 1) = v401;
        v399 += 3;
        uint64_t v576 = (uint64_t)v399;
        v398 += 12;
        if (v398 == v397) {
          goto LABEL_453;
        }
      }
      v403 = v388;
      unint64_t v404 = v575;
      unint64_t v405 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v399 - v575) >> 2) + 1;
      if (v405 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)&v577[-v575] >> 2) > v405) {
        unint64_t v405 = 0x5555555555555556 * ((uint64_t)&v577[-v575] >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v577[-v575] >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v406 = 0x1555555555555555;
      }
      else {
        unint64_t v406 = v405;
      }
      if (v406)
      {
        if (v406 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v407 = (char *)operator new(12 * v406);
        uint64_t v408 = (uint64_t)&v407[4 * ((uint64_t)((uint64_t)v399 - v404) >> 2)];
        *(_DWORD *)uint64_t v408 = v402;
        *(void *)(v408 + 4) = v401;
        if (v399 == (int *)v404)
        {
LABEL_449:
          v412 = v399;
          unint64_t v409 = v408;
          goto LABEL_450;
        }
      }
      else
      {
        v407 = 0;
        uint64_t v408 = 4 * ((uint64_t)((uint64_t)v399 - v575) >> 2);
        *(_DWORD *)uint64_t v408 = v402;
        *(void *)(v408 + 4) = v401;
        if (v399 == (int *)v404) {
          goto LABEL_449;
        }
      }
      unint64_t v409 = v408;
      do
      {
        uint64_t v410 = *(void *)(v399 - 3);
        v399 -= 3;
        int v411 = v399[2];
        *(void *)(v409 - 12) = v410;
        v409 -= 12;
        *(_DWORD *)(v409 + 8) = v411;
      }
      while (v399 != (int *)v404);
      v412 = (void *)v575;
LABEL_450:
      v399 = (int *)(v408 + 12);
      unint64_t v575 = v409;
      uint64_t v576 = v408 + 12;
      v577 = &v407[12 * v406];
      v388 = v403;
      if (v412) {
        operator delete(v412);
      }
      uint64_t v576 = (uint64_t)v399;
      v398 += 12;
    }
    while (v398 != v397);
LABEL_453:
    v413 = (void *)v575;
    if ((int *)v575 == v399)
    {
      uint64_t v383 = v535;
      int v386 = v533;
      int v387 = v527;
      goto LABEL_555;
    }
    int v415 = v537;
    uint64_t v414 = v540;
    if (v540 >= 0) {
      unint64_t v416 = v540;
    }
    else {
      unint64_t v416 = -v540;
    }
    int v417 = 63 - __clz(v416);
    uint64_t v418 = *v529;
    if (v540) {
      int v419 = v417;
    }
    else {
      int v419 = 0;
    }
    v420 = (int *)v575;
    if (v540)
    {
      while (1)
      {
        uint64_t v421 = *(void *)(v420 + 1);
        if (v421 >= 0) {
          unint64_t v422 = *(void *)(v420 + 1);
        }
        else {
          unint64_t v422 = -v421;
        }
        int v423 = 63 - __clz(v422);
        uint64_t v424 = *v420;
        if (!v421) {
          int v423 = 0;
        }
        int v425 = v423 + v419;
        BOOL v426 = __OFSUB__(v425, 61);
        if (v425 > 61)
        {
          if (v421)
          {
            uint64_t v421 = ((v421 ^ (unint64_t)v540) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            unint64_t v427 = v422 * v416;
            if (v425 > 0x3E || v427 >= v421)
            {
              BOOL v426 = __OFSUB__(v421 - 0x7FFFFFFFFFFFFFFFLL, 2);
              if ((unint64_t)(v421 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
                break;
              }
            }
            else
            {
              if (v421 >= 0) {
                uint64_t v421 = v427;
              }
              else {
                uint64_t v421 = -(uint64_t)v427;
              }
              BOOL v426 = __OFSUB__(v421 - 0x7FFFFFFFFFFFFFFFLL, 2);
              if ((unint64_t)(v421 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
                break;
              }
            }
          }
        }
        else
        {
          v421 *= v540;
          BOOL v426 = __OFSUB__(v421 - 0x7FFFFFFFFFFFFFFFLL, 2);
          if ((unint64_t)(v421 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
            break;
          }
        }
        uint64_t v429 = *(void *)(v418 + 8 * v424);
        uint64_t v430 = v429 + v421;
        uint64_t v431 = (v429 + v421) ^ v421;
        uint64_t v432 = (v429 + v421) ^ v429;
        uint64_t v433 = ((unint64_t)v421 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        if ((v431 & v432) < 0 == v426) {
          uint64_t v433 = v430;
        }
        if ((unint64_t)(v433 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
          break;
        }
        *(void *)(v418 + 8 * v424) = v433;
        v420 += 3;
        if (v420 == v399) {
          goto LABEL_562;
        }
      }
    }
    else
    {
      v471 = (int *)v575;
      while ((unint64_t)(*(void *)(v418 + 8 * *v471) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v471 += 3;
        if (v471 == v399)
        {
LABEL_562:
          uint64_t v383 = v535;
          int v386 = v533;
          int v387 = v527;
          goto LABEL_563;
        }
      }
    }
    int v434 = 0;
    int v387 = 1;
    uint64_t v383 = v535;
    int v386 = v533;
LABEL_588:
    if (v413)
    {
      uint64_t v576 = (uint64_t)v413;
      operator delete(v413);
    }
    if (v434)
    {
LABEL_419:
      ++v385;
      uint64_t v384 = *(void *)(a1 + 19728);
      if (v385 >= (*(void *)(a1 + 19736) - v384) >> 2) {
        break;
      }
      continue;
    }
    break;
  }
  if (v387) {
    goto LABEL_622;
  }
LABEL_591:
  if (*off_26AED0080[0] >= 3
    && (off_26AED0080[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AED0080, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)3)))
  {
    v487 = google::LogMessage::LogMessage((google::LogMessage *)&v575, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 796);
    v488 = (void *)google::LogMessage::stream(v487);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v488, (uint64_t)" num_slack: ", 12);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v575);
  }
  operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint(a1, v529, v383, v523);
  unint64_t v575 = (unint64_t)"num_ib_substitutions=";
  uint64_t v576 = 21;
  v490 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)(0x6DB6DB6DB6DB6DB7 * ((v563 - (unsigned char *)v562) >> 3)), v574, v489);
  v573[0] = v574;
  v573[1] = v490 - v574;
  v572[0] = " num_lifted_BOOLeans=";
  v572[1] = 21;
  v492 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*(unsigned int *)(a1 + 19680), v571, v491);
  v570[0] = v571;
  v570[1] = v492 - v571;
  absl::lts_2020_02_25::StrCat((uint64_t)&v575, (uint64_t)v573, (uint64_t)v572, (uint64_t)v570, &v549);
  double v494 = operations_research::sat::ComputeActivity(v523, *(uint64_t **)(a1 + 20408));
  uint64_t v495 = *(void *)(a1 + 19720);
  double v496 = (double)v495;
  if (v495 < (uint64_t)0x8000000000000003) {
    double v496 = -INFINITY;
  }
  if (v495 > 0x7FFFFFFFFFFFFFFDLL) {
    double v496 = INFINITY;
  }
  if (vabdd_f64(v378, v494 - v496) >= 0.0001
    && *off_26AED0088[0] >= 1
    && (off_26AED0088[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AED0088, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
  {
    v497 = google::LogMessage::LogMessage((google::LogMessage *)&v575, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 808);
    v498 = (void *)google::LogMessage::stream(v497);
    v499 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v498, (uint64_t)"Violation discrepancy after slack removal. ", 43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v499, (uint64_t)" before = ", 10);
    v500 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v500, (uint64_t)" after = ", 9);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v575);
  }
  operations_research::sat::DivideByGCD(v523, v493);
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v544, (const operations_research::sat::LinearConstraint *)v523);
  if (*(char *)(v522 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v543, *(const std::string::value_type **)v522, *(void *)(v522 + 8));
  }
  else {
    std::string v543 = *(std::string *)v522;
  }
  v501 = *(uint64_t **)(a1 + 20408);
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v542, v549.__r_.__value_.__l.__data_, v549.__r_.__value_.__l.__size_);
  }
  else {
    std::string v542 = v549;
  }
  BOOL v15 = operations_research::sat::LinearConstraintManager::AddCut(v521, &v544, (uint64_t)&v543, v501, (uint64_t)&v542);
  if ((SHIBYTE(v542.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v543.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_612;
    }
LABEL_619:
    operator delete(v543.__r_.__value_.__l.__data_);
    v502 = v547;
    if (!v547) {
      goto LABEL_614;
    }
LABEL_613:
    v548 = v502;
    operator delete(v502);
    goto LABEL_614;
  }
  operator delete(v542.__r_.__value_.__l.__data_);
  if (SHIBYTE(v543.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_619;
  }
LABEL_612:
  v502 = v547;
  if (v547) {
    goto LABEL_613;
  }
LABEL_614:
  if (v545)
  {
    v546 = v545;
    operator delete(v545);
  }
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v549.__r_.__value_.__l.__data_);
  }
LABEL_628:
  v505 = (uint64_t *)v559;
  if (v559)
  {
    v506 = v560;
    v507 = v559;
    if (v560 != v559)
    {
      do
      {
        v508 = (void *)*(v506 - 3);
        if (v508)
        {
          *(v506 - 2) = (uint64_t)v508;
          operator delete(v508);
        }
        v509 = (void *)*(v506 - 6);
        if (v509)
        {
          *(v506 - 5) = (uint64_t)v509;
          operator delete(v509);
        }
        v506 -= 8;
      }
      while (v506 != v505);
      v507 = v559;
    }
    v560 = v505;
    operator delete(v507);
  }
  v510 = (char *)v562;
  if (v562)
  {
    v511 = v563;
    v512 = v562;
    if (v563 != v562)
    {
      v513 = v563;
      do
      {
        v515 = (void *)*((void *)v513 - 7);
        v513 -= 56;
        v514 = v515;
        if (v515)
        {
          *((void *)v511 - 6) = v514;
          operator delete(v514);
        }
        v511 = v513;
      }
      while (v513 != v510);
      v512 = v562;
    }
    v563 = v510;
    operator delete(v512);
  }
  if (v567[1]) {
    operator delete(v567[1]);
  }
  if (v566[0]) {
    operator delete(v566[0]);
  }
  return v15;
}

void sub_23CD20B00()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CD20B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void sub_23CD20B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t operations_research::sat::LinearProgrammingConstraint::ComputeNewLinearConstraint(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *a4 = 0;
  unint64_t v8 = (uint64_t)(a1[2491] - a1[2490]) >> 2;
  v50[0] = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)a3, v8, v50);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10) {
    return 1;
  }
  uint64_t v11 = a1[39];
  while (1)
  {
    int v12 = *(_DWORD *)v9;
    uint64_t v13 = *(void *)(v9 + 4);
    int v51 = v12;
    v50[0] = 0xCCCCCCCCCCCCCCCDLL * ((a1[40] - v11) >> 3);
    if (v12 >= SLODWORD(v50[0])) {
      google::MakeCheckOpString<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,unsigned long>((int)&v51, (int)v50, "row < integer_lp_.size()");
    }
    unint64_t v14 = (uint64_t *)(v11 + 40 * v12);
    BOOL v15 = (int *)v14[2];
    uint64_t v16 = (int *)v14[3];
    if (v15 != v16) {
      break;
    }
    if (v13 >= 0) {
      unint64_t v17 = v13;
    }
    else {
      unint64_t v17 = -v13;
    }
    int v18 = 63 - __clz(v17);
LABEL_45:
    int v34 = (uint64_t *)(v11 + 40 * v12 + 8);
    if (v13 <= 0) {
      int v34 = v14;
    }
    uint64_t v35 = *v34;
    if (v13) {
      int v36 = v18;
    }
    else {
      int v36 = 0;
    }
    if (v35 >= 0) {
      unint64_t v37 = v35;
    }
    else {
      unint64_t v37 = -v35;
    }
    int v38 = 63 - __clz(v37);
    if (!v35) {
      int v38 = 0;
    }
    int v39 = v38 + v36;
    BOOL v40 = __OFSUB__(v39, 61);
    if (v39 > 61)
    {
      unint64_t v41 = 0;
      if (v13 && v35)
      {
        uint64_t v43 = ((v35 ^ (unint64_t)v13) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v44 = v37 * v17;
        if (v39 > 0x3E || v44 >= v43) {
          return 0;
        }
        unint64_t v41 = v43 >= 0 ? v44 : -(uint64_t)v44;
        BOOL v40 = __OFSUB__(v41 - 0x7FFFFFFFFFFFFFFFLL, 2);
        if (v41 - 0x7FFFFFFFFFFFFFFFLL < 2) {
          return 0;
        }
      }
    }
    else
    {
      unint64_t v41 = v35 * v13;
      unint64_t v42 = v35 * v13 - 0x7FFFFFFFFFFFFFFFLL;
      BOOL v40 = __OFSUB__(v42, 2);
      if (v42 < 2) {
        return 0;
      }
    }
    uint64_t v46 = *a4 + v41;
    unint64_t v47 = v46 ^ v41;
    uint64_t v48 = (v41 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if (((v47 & (v46 ^ *a4) & 0x8000000000000000) != 0) == v40) {
      uint64_t v48 = v46;
    }
    if ((unint64_t)(v48 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
      return 0;
    }
    *a4 = v48;
    v9 += 12;
    if (v9 == v10) {
      return 1;
    }
  }
  if (v13 >= 0) {
    unint64_t v17 = v13;
  }
  else {
    unint64_t v17 = -v13;
  }
  int v18 = 63 - __clz(v17);
  uint64_t v19 = *a3;
  if (v13) {
    int v20 = v18;
  }
  else {
    int v20 = 0;
  }
  if (v13)
  {
    while (1)
    {
      uint64_t v21 = *(void *)(v15 + 1);
      if (v21 >= 0) {
        unint64_t v22 = *(void *)(v15 + 1);
      }
      else {
        unint64_t v22 = -v21;
      }
      int v23 = 63 - __clz(v22);
      uint64_t v24 = *v15;
      if (!v21) {
        int v23 = 0;
      }
      int v25 = v23 + v20;
      BOOL v26 = __OFSUB__(v25, 61);
      if (v25 > 61)
      {
        if (v21)
        {
          uint64_t v21 = ((v21 ^ (unint64_t)v13) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v27 = v22 * v17;
          if (v25 > 0x3E || v27 >= v21)
          {
            BOOL v26 = __OFSUB__(v21 - 0x7FFFFFFFFFFFFFFFLL, 2);
            if ((unint64_t)(v21 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
              return 0;
            }
          }
          else
          {
            if (v21 >= 0) {
              uint64_t v21 = v27;
            }
            else {
              uint64_t v21 = -(uint64_t)v27;
            }
            BOOL v26 = __OFSUB__(v21 - 0x7FFFFFFFFFFFFFFFLL, 2);
            if ((unint64_t)(v21 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
              return 0;
            }
          }
        }
      }
      else
      {
        v21 *= v13;
        BOOL v26 = __OFSUB__(v21 - 0x7FFFFFFFFFFFFFFFLL, 2);
        if ((unint64_t)(v21 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
          return 0;
        }
      }
      uint64_t v29 = *(void *)(v19 + 8 * v24);
      uint64_t v30 = v29 + v21;
      uint64_t v31 = (v29 + v21) ^ v21;
      uint64_t v32 = (v29 + v21) ^ v29;
      uint64_t v33 = ((unint64_t)v21 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if ((v31 & v32) < 0 == v26) {
        uint64_t v33 = v30;
      }
      if ((unint64_t)(v33 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
        break;
      }
      *(void *)(v19 + 8 * v24) = v33;
      v15 += 3;
      if (v15 == v16) {
        goto LABEL_45;
      }
    }
  }
  else
  {
    while ((unint64_t)(*(void *)(v19 + 8 * *v15) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v15 += 3;
      if (v15 == v16) {
        goto LABEL_45;
      }
    }
  }
  return 0;
}

void sub_23CD21020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **std::vector<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (char *)a1[1];
      do
      {
        double v7 = (void *)*((void *)v5 - 7);
        v5 -= 56;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 6) = v6;
          operator delete(v6);
        }
        int v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::LinearProgrammingConstraint::AddCGCuts(operations_research::sat::LinearProgrammingConstraint *this)
{
  LODWORD(v28[0]) = (*(_DWORD *)(*((void *)this + 2504) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(__p) = 0;
  if (LODWORD(v28[0])) {
    google::MakeCheckOpString<int,int>((int)v28, (int)&__p, "trail_->CurrentDecisionLevel() == 0");
  }
  uint64_t v2 = *((unsigned int *)this + 96);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (char *)this + 19360;
    unint64_t v22 = (char *)this + 8680;
    uint64_t __sz = 8 * v2;
    int v20 = (char *)this + 19360;
    while (1)
    {
      int Basis = operations_research::glop::RevisedSimplex::GetBasis((uint64_t)this + 840, v3);
      double VariableValue = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)this + 840, Basis);
      double v7 = operations_research::glop::LpScalingHelper::UnscaleVariableValue((uint64_t)v4, Basis, VariableValue);
      if (vabdd_f64(v7, round(v7)) < 0.01 || Basis >= (int)((*((void *)this + 2491) - *((void *)this + 2490)) >> 2)) {
        goto LABEL_6;
      }
      UnitRowLeftInverse = (void *)operations_research::glop::UpdateRow::ComputeAndGetUnitRowLeftInverse((uint64_t)v22, v3);
      uint64_t v9 = (float64x2_t *)operator new(__sz);
      v28[0] = (uint64_t)v9;
      v28[2] = (uint64_t)&v9->f64[v2];
      bzero(v9, __sz);
      uint64_t v10 = 0;
      int v11 = 0;
      v28[1] = (uint64_t)&v9->f64[v2];
      do
      {
        while (1)
        {
          while (1)
          {
            double v12 = *(double *)(*UnitRowLeftInverse + 8 * v10);
            v9->f64[v10] = v12;
            if (fabs(v12) >= 1.0e-12) {
              break;
            }
            v9->f64[v10++] = 0.0;
            if (v2 == v10) {
              goto LABEL_22;
            }
          }
          if (!operations_research::glop::RevisedSimplex::GetConstraintStatus((uint64_t)this + 840, v10)) {
            break;
          }
          if (v9->f64[v10] != 0.0) {
            ++v11;
          }
          if (v2 == ++v10) {
            goto LABEL_22;
          }
        }
        if (*operations_research::sat::LinearProgrammingConstraint::AddCGCuts(void)::vlocal__ >= 1
          && (operations_research::sat::LinearProgrammingConstraint::AddCGCuts(void)::vlocal__ != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::AddCGCuts(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 848);
          uint64_t v13 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"BASIC row not expected! ", 24);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
        v9->f64[v10++] = 0.0;
      }
      while (v2 != v10);
LABEL_22:
      if (v11) {
        break;
      }
LABEL_4:
      operator delete(v9);
LABEL_5:
      uint64_t v4 = v20;
LABEL_6:
      if (++v3 == v2) {
        return;
      }
    }
    uint64_t v27 = 0;
    operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(this, 0, v28, (double *)&v27, 52, &__p);
    char v24 = 2;
    strcpy(v23, "CG");
    operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints((uint64_t)this, (uint64_t)v23, (uint64_t *)&__p);
    if (__p)
    {
      BOOL v26 = __p;
      operator delete(__p);
    }
    if (v2 >= 4)
    {
      BOOL v15 = v9 + 1;
      uint64_t v16 = v2 & 0xFFFFFFFC;
      do
      {
        float64x2_t v17 = vnegq_f64(*v15);
        v15[-1] = vnegq_f64(v15[-1]);
        *BOOL v15 = v17;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      uint64_t v14 = v2 & 0xFFFFFFFC;
      if (v14 == v2) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v18 = v2 - v14;
    uint64_t v19 = &v9->f64[v14];
    do
    {
      *uint64_t v19 = -*v19;
      ++v19;
      --v18;
    }
    while (v18);
LABEL_32:
    operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(this, 0, v28, (double *)&v27, 52, &__p);
    char v24 = 2;
    strcpy(v23, "CG");
    operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints((uint64_t)this, (uint64_t)v23, (uint64_t *)&__p);
    if (__p)
    {
      BOOL v26 = __p;
      operator delete(__p);
    }
    uint64_t v9 = (float64x2_t *)v28[0];
    if (!v28[0]) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
}

void sub_23CD21464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD2146C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = a20;
    if (!a20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v21 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(void *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, double *a4@<X3>, int a5@<W4>, void **a6@<X8>)
{
  long long __p = 0;
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if ((int)((unint64_t)(v8 - *a3) >> 3) >= 1)
  {
    int v11 = 0;
    double v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    double v15 = 0.0;
    while (1)
    {
      double v18 = *(double *)(v9 + 8 * v14);
      if (fabs(v18) >= 1.0e-12
        && (v18 <= 0.0 || *(uint64_t *)(a1[39] + 40 * v14 + 8) <= 0x7FFFFFFFFFFFFFFDLL)
        && (v18 >= 0.0 || *(void *)(a1[39] + 40 * v14) >= (int64_t)0x8000000000000003))
      {
        break;
      }
LABEL_9:
      if (++v14 >= (int)((unint64_t)(v8 - v9) >> 3)) {
        goto LABEL_34;
      }
    }
    double v19 = operations_research::glop::LpScalingHelper::UnscaleDualValue((uint64_t)(a1 + 2420), v14, v18);
    double v20 = v19;
    if (v13 < (double *)v12)
    {
      *(_DWORD *)uint64_t v13 = v14;
      v13[1] = v19;
      v13 += 2;
LABEL_4:
      uint64_t v16 = *(void *)(a1[42] + 8 * v14);
      double v17 = (double)v16;
      if (v16 < (uint64_t)0x8000000000000003) {
        double v17 = -INFINITY;
      }
      if (v16 > 0x7FFFFFFFFFFFFFFDLL) {
        double v17 = INFINITY;
      }
      double v15 = v15 + v17 * fabs(v20);
      uint64_t v9 = *a3;
      uint64_t v8 = a3[1];
      goto LABEL_9;
    }
    uint64_t v21 = ((char *)v13 - (char *)v11) >> 4;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v12 - (char *)v11) >> 3 > v22) {
      unint64_t v22 = (v12 - (char *)v11) >> 3;
    }
    if ((unint64_t)(v12 - (char *)v11) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23)
    {
      if (v23 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v24 = (char *)operator new(16 * v23);
      uint64_t v25 = (uint64_t)&v24[16 * v21];
      *(_DWORD *)uint64_t v25 = v14;
      *(double *)(v25 + 8) = v20;
      if (v13 != v11)
      {
LABEL_25:
        uint64_t v26 = v25;
        do
        {
          uint64_t v27 = (double *)(v26 - 16);
          *(_OWORD *)(v26 - 16) = *((_OWORD *)v13 - 1);
          v13 -= 2;
          v26 -= 16;
        }
        while (v13 != v11);
        double v12 = &v24[16 * v23];
        uint64_t v13 = (double *)(v25 + 16);
        long long __p = v27;
        if (!v11) {
          goto LABEL_29;
        }
LABEL_28:
        operator delete(v11);
LABEL_29:
        int v11 = v27;
        goto LABEL_4;
      }
    }
    else
    {
      char v24 = 0;
      uint64_t v25 = 16 * v21;
      *(_DWORD *)uint64_t v25 = v14;
      *(double *)(v25 + 8) = v19;
      if (v13 != v11) {
        goto LABEL_25;
      }
    }
    uint64_t v27 = (double *)v25;
    double v12 = &v24[16 * v23];
    uint64_t v13 = (double *)(v25 + 16);
    long long __p = (double *)v25;
    if (!v11) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v13 = 0;
  double v15 = 0.0;
LABEL_34:
  if (a2)
  {
    uint64_t v28 = a1[38];
    double v29 = (double)v28;
    if (v28 < (uint64_t)0x8000000000000003) {
      double v29 = -INFINITY;
    }
    if (v28 > 0x7FFFFFFFFFFFFFFDLL) {
      double v29 = INFINITY;
    }
    double v15 = v15 + v29;
  }
  uint64_t v30 = a4;
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (v15 != 0.0)
  {
    double v32 = 1.0;
    double v33 = ldexp(1.0, a5) / v15;
    do
    {
      double v34 = v32;
      double v32 = v32 + v32;
    }
    while (v32 <= v33);
    *a4 = v34;
    uint64_t v31 = __p;
    if (__p == v13) {
      goto LABEL_43;
    }
    uint64_t v35 = 0;
    while (1)
    {
      unint64_t v37 = llround(v31[1] * *v30);
      if (!v37) {
        goto LABEL_53;
      }
      int v38 = *(_DWORD *)v31;
      unint64_t v39 = (unint64_t)a6[2];
      if ((unint64_t)v35 < v39)
      {
        *(_DWORD *)uint64_t v35 = v38;
        *(void *)(v35 + 4) = v37;
        int v36 = v35 + 12;
      }
      else
      {
        BOOL v40 = (char *)*a6;
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (unsigned char *)*a6) >> 2);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (void)v40) >> 2);
        if (2 * v43 > v42) {
          unint64_t v42 = 2 * v43;
        }
        if (v43 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v44 = 0x1555555555555555;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44)
        {
          if (v44 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v45 = (char *)operator new(12 * v44);
        }
        else
        {
          unint64_t v45 = 0;
        }
        uint64_t v46 = &v45[12 * v41];
        *(_DWORD *)uint64_t v46 = v38;
        *(void *)(v46 + 4) = v37;
        unint64_t v47 = v46;
        if (v35 == v40)
        {
          uint64_t v30 = a4;
          int v36 = v46 + 12;
          *a6 = v46;
          a6[1] = v46 + 12;
          a6[2] = &v45[12 * v44];
          if (!v35) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v30 = a4;
          do
          {
            uint64_t v48 = *(void *)(v35 - 12);
            v35 -= 12;
            int v49 = *((_DWORD *)v35 + 2);
            *(void *)(v47 - 12) = v48;
            v47 -= 12;
            *((_DWORD *)v47 + 2) = v49;
          }
          while (v35 != v40);
          uint64_t v35 = (char *)*a6;
          int v36 = v46 + 12;
          *a6 = v47;
          a6[1] = v46 + 12;
          a6[2] = &v45[12 * v44];
          if (!v35) {
            goto LABEL_52;
          }
        }
        operator delete(v35);
      }
LABEL_52:
      a6[1] = v36;
      uint64_t v35 = v36;
LABEL_53:
      v31 += 2;
      if (v31 == v13) {
        goto LABEL_42;
      }
    }
  }
  *a4 = 1.0;
LABEL_42:
  uint64_t v31 = __p;
LABEL_43:
  if (v31)
  {
    operator delete(v31);
  }
}

void sub_23CD2199C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (v14)
  {
    *(void *)(v13 + 8) = v14;
    operator delete(v14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::AddMirCuts(operations_research::sat::LinearProgrammingConstraint *this)
{
  uint64_t v401 = *MEMORY[0x263EF8340];
  int v382 = (*(_DWORD *)(*((void *)this + 2504) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v398) = 0;
  if (v382) {
    google::MakeCheckOpString<int,int>((int)&v382, (int)&v398, "trail_->CurrentDecisionLevel() == 0");
  }
  uint64_t v1 = *((void *)this + 2491);
  uint64_t v2 = *((void *)this + 2490);
  int v393 = 0;
  int v394 = 0;
  uint64_t v392 = 0;
  uint64_t v3 = v1 - v2;
  if (v1 == v2) {
    goto LABEL_7;
  }
  if ((unint64_t)v3 >= 0x7FFFFFFFFFFFFFFDLL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = operator new(2 * v3);
  size_t v5 = v3 >> 2;
  uint64_t v6 = (char *)&v4[v5];
  uint64_t v392 = v4;
  int v394 = (char *)&v4[v5];
  bzero(v4, v5 * 8);
  int v393 = v6;
  if ((int)(v3 >> 2) <= 0)
  {
LABEL_7:
    int v382 = 0;
    uint64_t v384 = 0;
    unint64_t v385 = 0;
    uint64_t v383 = 0;
  }
  else
  {
    int v382 = v3 >> 2;
    unint64_t v7 = v382 + 63;
    uint64_t v384 = 0;
    unint64_t v385 = 0;
    uint64_t v383 = 0;
    if (v7 >= 0x40)
    {
      unint64_t v8 = v7 >> 6;
      size_t v9 = 8 * (v7 >> 6);
      uint64_t v383 = operator new(v9);
      unint64_t v385 = (char *)v383 + 8 * v8;
      bzero(v383, v9);
      uint64_t v384 = (char *)v383 + v9;
    }
  }
  int v386 = &v382;
  uint64_t v388 = 0;
  int v389 = 0;
  uint64_t v387 = 0xFFFFFFFFLL;
  int v390 = 0;
  v391 = 0;
  unint64_t v10 = *((int *)this + 96);
  v379 = 0;
  v380 = 0;
  v381 = 0;
  uint64_t v376 = 0;
  double v377 = 0;
  double v378 = 0;
  unint64_t v342 = v10;
  if (v10)
  {
    if ((v10 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = 8 * v10;
    unint64_t v12 = v10;
    uint64_t v13 = (char *)operator new(8 * v10);
    uint64_t v14 = &v13[8 * v12];
    uint64_t v376 = v13;
    double v378 = v14;
    bzero(v13, v11);
    uint64_t v15 = 0;
    double v377 = v14;
    uint64_t v16 = (char *)this + 840;
    uint64_t v17 = v12;
    do
    {
      unsigned int ConstraintStatus = operations_research::glop::RevisedSimplex::GetConstraintStatus((uint64_t)v16, v15);
      unsigned int v20 = ConstraintStatus;
      if ((ConstraintStatus | 4) != 4)
      {
        if ((ConstraintStatus & 0xFFFFFFFD) == 1)
        {
          uint64_t v21 = v380;
          if (v380 >= v381)
          {
            unint64_t v23 = (char *)v379;
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v380 - (unsigned char *)v379) >> 2);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x1555555555555555) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v381 - (unsigned char *)v379) >> 2) > v25) {
              unint64_t v25 = 0x5555555555555556 * ((v381 - (unsigned char *)v379) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v381 - (unsigned char *)v379) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v26 = 0x1555555555555555;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26)
            {
              if (v26 > 0x1555555555555555) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v27 = (char *)operator new(12 * v26);
            }
            else
            {
              uint64_t v27 = 0;
            }
            uint64_t v28 = &v27[4 * ((v380 - (unsigned char *)v379) >> 2)];
            *(_DWORD *)uint64_t v28 = v15;
            *(void *)(v28 + 4) = 1;
            double v29 = &v27[12 * v24];
            if (v21 != v23)
            {
              do
              {
                uint64_t v30 = *(void *)(v21 - 12);
                v21 -= 12;
                int v31 = *((_DWORD *)v21 + 2);
                *(void *)(v29 - 12) = v30;
                v29 -= 12;
                *((_DWORD *)v29 + 2) = v31;
              }
              while (v21 != v23);
              uint64_t v21 = (char *)v379;
            }
            unint64_t v22 = v28 + 12;
            v379 = v29;
            v380 = v28 + 12;
            v381 = &v27[12 * v26];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *(_DWORD *)v380 = v15;
            *(void *)(v21 + 4) = 1;
            unint64_t v22 = v21 + 12;
          }
          v380 = v22;
        }
        if (v20 <= 2)
        {
          double v32 = v380;
          if (v380 < v381)
          {
            *(_DWORD *)v380 = v15;
            *(void *)(v32 + 4) = -1;
            double v18 = v32 + 12;
          }
          else
          {
            double v33 = (char *)v379;
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v380 - (unsigned char *)v379) >> 2);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0x1555555555555555) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v381 - (unsigned char *)v379) >> 2) > v35) {
              unint64_t v35 = 0x5555555555555556 * ((v381 - (unsigned char *)v379) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v381 - (unsigned char *)v379) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v36 = 0x1555555555555555;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36)
            {
              if (v36 > 0x1555555555555555) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v37 = (char *)operator new(12 * v36);
            }
            else
            {
              unint64_t v37 = 0;
            }
            int v38 = &v37[4 * ((v380 - (unsigned char *)v379) >> 2)];
            *(_DWORD *)int v38 = v15;
            *(void *)(v38 + 4) = -1;
            unint64_t v39 = &v37[12 * v34];
            if (v32 != v33)
            {
              do
              {
                uint64_t v40 = *(void *)(v32 - 12);
                v32 -= 12;
                int v41 = *((_DWORD *)v32 + 2);
                *(void *)(v39 - 12) = v40;
                v39 -= 12;
                *((_DWORD *)v39 + 2) = v41;
              }
              while (v32 != v33);
              double v32 = (char *)v379;
            }
            double v18 = v38 + 12;
            v379 = v39;
            v380 = v38 + 12;
            v381 = &v37[12 * v36];
            if (v32) {
              operator delete(v32);
            }
          }
          v380 = v18;
        }
        *((double *)v376 + v15) = fmax(fabs(operations_research::glop::RevisedSimplex::GetDualValue((uint64_t)v16, v15)), 0.00000001);
      }
      ++v15;
    }
    while (v15 != v17);
    unint64_t v43 = (int *)v379;
    unint64_t v42 = (int *)v380;
  }
  else
  {
    unint64_t v42 = 0;
    unint64_t v43 = 0;
  }
  uint64_t v373 = 0;
  uint64_t v374 = 0;
  double v375 = 0;
  memset(v372, 0, sizeof(v372));
  uint64_t v369 = 0;
  uint64_t v370 = 0;
  unint64_t v371 = 0;
  if (v43 != v42)
  {
    unint64_t v44 = (char *)this + 840;
    unint64_t v343 = v42;
    while (1)
    {
      unint64_t v45 = *(double **)v43;
      LODWORD(v399) = v43[2];
      uint64_t v398 = v45;
      std::vector<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::__assign_with_size[abi:ne180100]<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const*,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const*>((char **)&v369, (char *)&v398, (char *)&v399 + 4, 1uLL);
      uint64_t v345 = v43;
      HIBYTE(v400) = 5;
      strcpy((char *)&v398, "MIR_1");
      if (!operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints((uint64_t)this, (uint64_t)&v398, (uint64_t *)&v369))break; {
LABEL_56:
      }
      unint64_t v43 = v345 + 3;
      if (v345 + 3 == v343)
      {
        if (v369)
        {
          uint64_t v370 = (char *)v369;
          operator delete(v369);
        }
        if (v372[0]) {
          operator delete(v372[0]);
        }
        goto LABEL_436;
      }
    }
    uint64_t v46 = (int *)v389;
    unint64_t v47 = (int *)v390;
    if (v389 != v390)
    {
      uint64_t v48 = v392;
      unint64_t v49 = v390 - (unsigned char *)v389 - 4;
      uint64_t v50 = (v49 >> 2) + 1;
      int v51 = (int *)v389;
      if (v49 < 4) {
        goto LABEL_474;
      }
      int v51 = (int *)((char *)v389 + 4 * (v50 & 0x7FFFFFFFFFFFFFFELL));
      uint64_t v52 = (int *)((char *)v389 + 4);
      uint64_t v53 = v50 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v54 = *v52;
        v48[*(v52 - 1)] = 0;
        v48[v54] = 0;
        v52 += 2;
        v53 -= 2;
      }
      while (v53);
      if (v50 != (v50 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_474:
        do
        {
          uint64_t v55 = *v51++;
          v48[v55] = 0;
        }
        while (v51 != v47);
      }
      unint64_t v56 = (char *)v383;
      uint64_t v57 = v46;
      if (v49 < 4) {
        goto LABEL_475;
      }
      uint64_t v57 = &v46[v50 & 0x7FFFFFFFFFFFFFFELL];
      uint64_t v58 = v46 + 1;
      uint64_t v59 = v50 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        unint64_t v60 = ((unint64_t)*v58 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(void *)&v56[((unint64_t)*(v58 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
        *(void *)&v56[v60] = 0;
        v58 += 2;
        v59 -= 2;
      }
      while (v59);
      if (v50 != (v50 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_475:
        do
        {
          unint64_t v61 = *v57++;
          *(void *)&v56[(v61 >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
        }
        while (v57 != v47);
      }
    }
    int v390 = (char *)v46;
    uint64_t v62 = *((void *)this + 39) + 40 * *v43;
    uint64_t v64 = *(int **)(v62 + 16);
    long long v63 = *(int **)(v62 + 24);
    if (v64 != v63)
    {
      uint64_t v65 = *(void *)(v345 + 1);
      uint64_t v354 = *(int **)(v62 + 24);
      uint64_t v352 = v65;
      while (1)
      {
        int v67 = *v64;
        uint64_t v68 = *(void *)(v64 + 1);
        unint64_t v69 = (unint64_t)*v64 >> 6;
        uint64_t v70 = *((void *)v383 + v69);
        if ((v70 & (1 << *v64)) != 0) {
          goto LABEL_73;
        }
        *((void *)v383 + v69) = v70 | (1 << v67);
        uint64_t v71 = v390;
        if (v390 >= v391) {
          break;
        }
        *(_DWORD *)int v390 = v67;
        uint64_t v66 = (uint64_t)(v71 + 4);
LABEL_72:
        int v390 = (char *)v66;
LABEL_73:
        v392[v67] += v68 * v65;
        v64 += 3;
        if (v64 == v63) {
          goto LABEL_96;
        }
      }
      uint64_t v72 = (char *)v389;
      int64_t v73 = v390 - (unsigned char *)v389;
      uint64_t v74 = (v390 - (unsigned char *)v389) >> 2;
      unint64_t v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v76 = v391 - (unsigned char *)v389;
      if ((v391 - (unsigned char *)v389) >> 1 > v75) {
        unint64_t v75 = v76 >> 1;
      }
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v77 = v75;
      }
      if (v77)
      {
        if (v77 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v78 = (char *)operator new(4 * v77);
        unint64_t v79 = &v78[4 * v74];
        *(_DWORD *)unint64_t v79 = v67;
        uint64_t v66 = (uint64_t)(v79 + 4);
        if (v71 == v72) {
          goto LABEL_93;
        }
      }
      else
      {
        int v78 = 0;
        unint64_t v79 = (char *)(4 * v74);
        *(_DWORD *)(4 * v74) = v67;
        uint64_t v66 = 4 * v74 + 4;
        if (v71 == v72)
        {
LABEL_93:
          int v389 = v79;
          int v390 = (char *)v66;
          v391 = &v78[4 * v77];
          if (v72) {
            operator delete(v72);
          }
          unint64_t v44 = (char *)this + 840;
          long long v63 = v354;
          uint64_t v65 = v352;
          goto LABEL_72;
        }
      }
      unint64_t v80 = v71 - 4 - v72;
      if (v80 < 0x2C) {
        goto LABEL_476;
      }
      if ((unint64_t)(v71 - &v78[v73]) < 0x20) {
        goto LABEL_476;
      }
      uint64_t v81 = (v80 >> 2) + 1;
      uint64_t v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v83 = &v71[-v82];
      v79 -= v82;
      double v84 = &v78[4 * v74 - 16];
      uint64_t v85 = v71 - 16;
      uint64_t v86 = v81 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v87 = *(_OWORD *)v85;
        *((_OWORD *)v84 - 1) = *((_OWORD *)v85 - 1);
        *(_OWORD *)double v84 = v87;
        v84 -= 32;
        v85 -= 32;
        v86 -= 8;
      }
      while (v86);
      uint64_t v71 = v83;
      if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_476:
        do
        {
          int v88 = *((_DWORD *)v71 - 1);
          v71 -= 4;
          *((_DWORD *)v79 - 1) = v88;
          v79 -= 4;
        }
        while (v71 != v72);
      }
      goto LABEL_93;
    }
LABEL_96:
    LOBYTE(v398) = 0;
    std::vector<BOOL>::assign((char **)v372, v342, &v398);
    unsigned int v89 = 0;
    *(void *)((char *)v372[0] + (((unint64_t)*v345 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v345;
    unint64_t v90 = (void *)((char *)this + 360);
    while (1)
    {
      uint64_t v374 = (double *)v373;
      uint64_t v366 = 0;
      uint64_t v367 = 0;
      uint64_t v368 = 0;
      uint64_t v91 = (int *)v389;
      uint64_t v92 = (int *)v390;
      if (v389 == v390) {
        goto LABEL_56;
      }
      unsigned int v353 = v89;
      uint64_t v93 = 0;
      uint64_t v355 = 0;
      unint64_t v94 = 0;
      uint64_t v95 = 0;
      do
      {
        int v97 = *v91;
        uint64_t v98 = v392[*v91];
        if (v98)
        {
          if (v98 < 0) {
            uint64_t v98 = -v98;
          }
          if (v95 <= v98) {
            uint64_t v95 = v98;
          }
          if (*(int *)(operations_research::glop::LinearProgram::GetSparseColumn(v90, *v91) + 8) >= 2
            && !operations_research::glop::RevisedSimplex::GetVariableStatus((uint64_t)v44, v97))
          {
            uint64_t v99 = *(int *)(*((void *)this + 2490) + 4 * v97);
            double v100 = *(double *)(**((void **)this + 2551) + 8 * v99);
            uint64_t v101 = *(void *)(*((void *)this + 2503) + 40);
            uint64_t v102 = *(void *)(v101 + 12 * (int)v99);
            double v103 = (double)v102;
            double v104 = -INFINITY;
            if (v102 < (uint64_t)0x8000000000000003) {
              double v103 = -INFINITY;
            }
            if (v102 > 0x7FFFFFFFFFFFFFFDLL) {
              double v103 = INFINITY;
            }
            uint64_t v105 = *(void *)(v101 + 12 * (int)(v99 ^ 1));
            if (v105 <= 0x7FFFFFFFFFFFFFFDLL) {
              double v104 = (double)-v105;
            }
            if (v105 < (uint64_t)0x8000000000000003) {
              double v104 = INFINITY;
            }
            double v106 = v104 - v100;
            double v107 = v100 - v103;
            double v108 = v107 >= v106 ? v106 : v107;
            if (v108 > 0.01)
            {
              uint64_t v109 = v374;
              if (v374 < v375)
              {
                *uint64_t v374 = v108;
                uint64_t v374 = v109 + 1;
                if (v94 >= v355) {
                  goto LABEL_145;
                }
LABEL_99:
                *(_DWORD *)unint64_t v94 = v97;
                uint64_t v96 = (uint64_t)(v94 + 4);
                unint64_t v90 = (void *)((char *)this + 360);
LABEL_100:
                uint64_t v367 = (char *)v96;
                unint64_t v94 = (char *)v96;
                goto LABEL_101;
              }
              long long v350 = v94;
              uint64_t v110 = (double *)v373;
              int64_t v111 = (char *)v374 - (unsigned char *)v373;
              uint64_t v112 = ((char *)v374 - (unsigned char *)v373) >> 3;
              unint64_t v113 = v112 + 1;
              if ((unint64_t)(v112 + 1) >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v114 = (char *)v375 - (unsigned char *)v373;
              if (((char *)v375 - (unsigned char *)v373) >> 2 > v113) {
                unint64_t v113 = v114 >> 2;
              }
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v113;
              }
              if (v115)
              {
                if (v115 >> 61) {
                  goto LABEL_451;
                }
                unint64_t v116 = v115;
                uint64_t v117 = (char *)operator new(8 * v115);
                unint64_t v115 = v116;
                uint64_t v118 = (double *)&v117[8 * v112];
                double *v118 = v108;
                uint64_t v119 = (uint64_t)(v118 + 1);
                if (v109 != v110)
                {
LABEL_133:
                  unint64_t v120 = (char *)(v109 - 1) - (char *)v110;
                  if (v120 < 0x58)
                  {
                    unint64_t v94 = v350;
                    goto LABEL_141;
                  }
                  unint64_t v121 = (char *)v109 - &v117[v111];
                  unint64_t v94 = v350;
                  if (v121 < 0x20) {
                    goto LABEL_477;
                  }
                  uint64_t v122 = (v120 >> 3) + 1;
                  uint64_t v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v124 = &v109[v123 / 0xFFFFFFFFFFFFFFF8];
                  uint64_t v118 = (double *)((char *)v118 - v123);
                  unint64_t v125 = &v117[8 * v112 - 16];
                  uint64_t v126 = v109 - 2;
                  uint64_t v127 = v122 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v128 = *(_OWORD *)v126;
                    *((_OWORD *)v125 - 1) = *((_OWORD *)v126 - 1);
                    *(_OWORD *)unint64_t v125 = v128;
                    v125 -= 32;
                    v126 -= 4;
                    v127 -= 4;
                  }
                  while (v127);
                  uint64_t v109 = v124;
                  if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_477:
                    do
                    {
LABEL_141:
                      uint64_t v129 = *((void *)v109-- - 1);
                      *((void *)v118-- - 1) = v129;
                    }
                    while (v109 != v110);
                  }
LABEL_142:
                  uint64_t v373 = v118;
                  uint64_t v374 = (double *)v119;
                  double v375 = (double *)&v117[8 * v115];
                  if (v110) {
                    operator delete(v110);
                  }
                  unint64_t v44 = (char *)this + 840;
                  uint64_t v374 = (double *)v119;
                  if (v94 < v355) {
                    goto LABEL_99;
                  }
LABEL_145:
                  uint64_t v130 = (v94 - v93) >> 2;
                  unint64_t v131 = v130 + 1;
                  if ((unint64_t)(v130 + 1) >> 62) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v355 - v93) >> 1 > v131) {
                    unint64_t v131 = (v355 - v93) >> 1;
                  }
                  if ((unint64_t)(v355 - v93) >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v132 = v131;
                  }
                  if (v132)
                  {
                    if (v132 >> 62) {
LABEL_451:
                    }
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    unint64_t v133 = v132;
                    int v134 = operator new(4 * v132);
                    unint64_t v132 = v133;
                    int v135 = (int *)&v134[4 * v130];
                    int *v135 = v97;
                    uint64_t v96 = (uint64_t)(v135 + 1);
                    if (v94 != v93)
                    {
LABEL_154:
                      unint64_t v136 = v94 - 4 - v93;
                      if (v136 < 0xBC
                        || &v134[v94 - v93 - 4 - (v136 & 0xFFFFFFFFFFFFFFFCLL)] > &v134[v94 - v93 - 4]
                        || &v94[-(v136 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v94 - 4
                        || (unint64_t)(v93 - v134) < 0x20)
                      {
                        long long v137 = v94;
                        unint64_t v90 = (void *)((char *)this + 360);
                      }
                      else
                      {
                        uint64_t v139 = (v136 >> 2) + 1;
                        uint64_t v140 = 4 * (v139 & 0x7FFFFFFFFFFFFFF8);
                        long long v137 = &v94[-v140];
                        int v135 = (int *)((char *)v135 - v140);
                        unint64_t v141 = &v134[4 * v130 - 16];
                        uint64_t v142 = v94 - 16;
                        uint64_t v143 = v139 & 0x7FFFFFFFFFFFFFF8;
                        unint64_t v90 = (void *)((char *)this + 360);
                        do
                        {
                          long long v144 = *(_OWORD *)v142;
                          *(v141 - 1) = *((_OWORD *)v142 - 1);
                          _OWORD *v141 = v144;
                          v141 -= 2;
                          v142 -= 32;
                          v143 -= 8;
                        }
                        while (v143);
                        if (v139 == (v139 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_157:
                          uint64_t v366 = v135;
                          uint64_t v367 = (char *)v96;
                          uint64_t v355 = &v134[4 * v132];
                          uint64_t v368 = v355;
                          if (v93) {
                            goto LABEL_158;
                          }
                          goto LABEL_159;
                        }
                      }
                      do
                      {
                        int v138 = *((_DWORD *)v137 - 1);
                        v137 -= 4;
                        *--int v135 = v138;
                      }
                      while (v137 != v93);
                      goto LABEL_157;
                    }
                  }
                  else
                  {
                    int v134 = 0;
                    int v135 = (int *)(4 * v130);
                    *(_DWORD *)(4 * v130) = v97;
                    uint64_t v96 = 4 * v130 + 4;
                    if (v94 != v93) {
                      goto LABEL_154;
                    }
                  }
                  unint64_t v90 = (void *)((char *)this + 360);
                  uint64_t v366 = v135;
                  uint64_t v367 = (char *)v96;
                  uint64_t v355 = &v134[4 * v132];
                  uint64_t v368 = v355;
                  if (v93) {
LABEL_158:
                  }
                    operator delete(v93);
LABEL_159:
                  uint64_t v93 = (char *)v135;
                  unint64_t v44 = (char *)this + 840;
                  goto LABEL_100;
                }
              }
              else
              {
                uint64_t v117 = 0;
                uint64_t v118 = (double *)(8 * v112);
                *(double *)(8 * v112) = v108;
                uint64_t v119 = 8 * v112 + 8;
                if (v109 != v110) {
                  goto LABEL_133;
                }
              }
              unint64_t v94 = v350;
              goto LABEL_142;
            }
          }
        }
LABEL_101:
        ++v91;
      }
      while (v91 != v92);
      uint64_t v145 = v366;
      if (v366 == (int *)v94)
      {
        int v165 = 13;
        unsigned int v166 = v353;
        if (v94) {
          goto LABEL_303;
        }
        goto LABEL_304;
      }
      unint64_t v146 = v373;
      v396 = 0;
      v397[0] = 0;
      unint64_t v395 = 0;
      int64_t v147 = (char *)v374 - (unsigned char *)v373;
      if (v374 == v373)
      {
        uint64_t v167 = 0;
        goto LABEL_198;
      }
      if (v147 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v148 = (unint64_t)operator new((char *)v374 - (unsigned char *)v373);
      uint64_t v149 = v147 >> 3;
      unint64_t v395 = (double *)v148;
      v396 = (double *)v148;
      v397[0] = v148 + 8 * (v147 >> 3);
      memmove((void *)v148, v146, v147);
      v396 = (double *)(v148 + 8 * (v147 >> 3));
      if ((unint64_t)v147 < 9)
      {
        v396 = (double *)v148;
        std::vector<double>::shrink_to_fit((uint64_t)&v395);
        goto LABEL_197;
      }
      uint64_t v150 = 0;
      uint64_t v151 = 8 * v149;
      double v152 = 0.0;
      do
      {
        double v152 = v152 + *(double *)(v148 + v150);
        v150 += 8;
      }
      while (v151 != v150);
      if (v147 >= 1)
      {
        unint64_t v153 = (v147 & 0xFFFFFFFFFFFFFFF8) + v148;
        if (v153 <= v148 + 8) {
          unint64_t v153 = v148 + 8;
        }
        unint64_t v154 = v153 + ~v148;
        uint64_t v155 = (double *)v148;
        if (v154 < 0x18) {
          goto LABEL_478;
        }
        uint64_t v156 = (v154 >> 3) + 1;
        uint64_t v155 = (double *)(v148 + 8 * (v156 & 0x3FFFFFFFFFFFFFFCLL));
        float64x2_t v157 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v152, 0);
        int v158 = (float64x2_t *)(v148 + 16);
        uint64_t v159 = v156 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v160 = vdivq_f64(*v158, v157);
          v158[-1] = vdivq_f64(v158[-1], v157);
          *int v158 = v160;
          v158 += 2;
          v159 -= 4;
        }
        while (v159);
        if (v156 != (v156 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_478:
          do
          {
            double *v155 = *v155 / v152;
            ++v155;
          }
          while ((unint64_t)v155 < v148 + 8 * (v147 >> 3));
        }
      }
      uint64_t v398 = 0;
      uint64_t v399 = 0;
      v400 = 0;
      unint64_t v161 = v149 - 1;
      if (v149 == 1)
      {
        unint64_t v163 = 0;
        uint64_t v164 = 0;
        uint64_t v162 = 0;
        if (!v161) {
          goto LABEL_196;
        }
LABEL_193:
        double v168 = *(double *)v148;
        double *v162 = *(double *)v148;
        if (v161 != 1)
        {
          int v169 = (double *)(v148 + 8);
          uint64_t v170 = v151 - 16;
          unint64_t v171 = v162 + 1;
          do
          {
            double v172 = *v169++;
            double v168 = v168 + v172;
            *v171++ = v168;
            v170 -= 8;
          }
          while (v170);
        }
        goto LABEL_196;
      }
      if (v161 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v162 = (double *)operator new(8 * v161);
      unint64_t v163 = &v162[v161];
      bzero(v162, 8 * v161);
      uint64_t v164 = v163;
      if (v161) {
        goto LABEL_193;
      }
LABEL_196:
      unint64_t v395 = v162;
      v396 = v164;
      v397[0] = v163;
      operator delete((void *)v148);
LABEL_197:
      uint64_t v167 = v395;
      unint64_t v44 = (char *)this + 840;
LABEL_198:
      uint64_t v173 = *((void *)this + 2507);
      v174 = v396;
      uint64_t v175 = *(void *)(v173 + 2496);
      unint64_t v176 = (v175 + 1) % 0x270uLL;
      uint64_t v177 = 4 * v175;
      uint64_t v178 = 4 * v176;
      unsigned int v179 = *(_DWORD *)(v173 + 4 * ((v175 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(v173 + 4 * v176) & 0x7FFFFFFE | *(_DWORD *)(v173 + 4 * v175) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v173 + 4 * v176) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(v173 + v177) = v179;
      if (v176 == 623) {
        unint64_t v180 = 0;
      }
      else {
        unint64_t v180 = v176 + 1;
      }
      uint64_t v181 = 397;
      if (v176 >= 0xE3) {
        uint64_t v181 = -227;
      }
      unsigned int v182 = *(_DWORD *)(v173 + 4 * (v181 + v176)) ^ ((*(_DWORD *)(v173 + 4 * v180) & 0x7FFFFFFE | *(_DWORD *)(v173 + 4 * v176) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v173 + 4 * v180) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(v173 + v178) = v182;
      *(void *)(v173 + 2496) = v180;
      uint64_t v183 = (char *)v174 - (char *)v167;
      if (v174 != v167)
      {
        unsigned int v184 = ((v179 ^ (v179 >> 11)) << 7) & 0x9D2C5680 ^ v179 ^ (v179 >> 11);
        double v185 = (double)((v184 << 15) & 0xEFC60000 ^ v184 ^ (((v184 << 15) & 0xEFC60000 ^ v184) >> 18));
        unsigned int v186 = ((v182 ^ (v182 >> 11)) << 7) & 0x9D2C5680 ^ v182 ^ (v182 >> 11);
        double v187 = (v185
              + (double)((v186 << 15) & 0xEFC60000 ^ v186 ^ (((v186 << 15) & 0xEFC60000 ^ v186) >> 18)) * 4294967300.0)
             * 5.42101086e-20
             + 0.0;
        unint64_t v188 = v183 >> 3;
        v174 = v167;
        do
        {
          unint64_t v189 = v188 >> 1;
          unint64_t v190 = &v174[v188 >> 1];
          double v192 = *v190;
          uint64_t v191 = v190 + 1;
          v188 += ~(v188 >> 1);
          if (v187 < v192) {
            unint64_t v188 = v189;
          }
          else {
            v174 = v191;
          }
        }
        while (v188);
      }
      int v193 = v145[(int)((unint64_t)((char *)v174 - (char *)v167) >> 3)];
      if (v167)
      {
        v396 = v167;
        operator delete(v167);
      }
      v363 = 0;
      uint64_t v364 = 0;
      long long v365 = 0;
      uint64_t v374 = (double *)v373;
      int v348 = v193;
      SparseColumn = (void *)operations_research::glop::LinearProgram::GetSparseColumn(v90, v193);
      uint64_t v195 = SparseColumn[1];
      if (v195 < 1)
      {
        int v165 = 13;
        unsigned int v166 = v353;
        goto LABEL_302;
      }
      long long __p = 0;
      uint64_t v351 = 0;
      unint64_t v356 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = SparseColumn[3];
      uint64_t v198 = SparseColumn[4];
      uint64_t v199 = v348;
      uint64_t v347 = v198;
      while (2)
      {
        int v201 = *(_DWORD *)(v197 + 4 * v196);
        unsigned int v202 = operations_research::glop::RevisedSimplex::GetConstraintStatus((uint64_t)v44, v201);
        if ((v202 | 4) == 4) {
          goto LABEL_215;
        }
        uint64_t v203 = v201;
        unint64_t v204 = (unint64_t)v201 >> 6;
        uint64_t v205 = *((void *)v372[0] + v204);
        if ((v205 & (1 << v201)) != 0) {
          goto LABEL_215;
        }
        *((void *)v372[0] + v204) = v205 | (1 << v201);
        if ((v202 & 0xFFFFFFFD) != 1)
        {
          if (v202 > 2) {
            goto LABEL_215;
          }
          LOBYTE(v208) = 0;
LABEL_229:
          uint64_t v210 = v392[v199];
          if (*(double *)(v198 + 8 * v196) <= 0.0)
          {
            if (v210 < 0) {
              LOBYTE(v208) = 1;
            }
            if (!v208) {
              goto LABEL_215;
            }
          }
          else
          {
            if (v210 > 0) {
              LOBYTE(v208) = 1;
            }
            if (!v208) {
              goto LABEL_215;
            }
          }
LABEL_237:
          uint64_t v211 = v356;
          if (v356 < v351)
          {
            *v356++ = v201;
            uint64_t v364 = (uint64_t)(v211 + 1);
            unint64_t v212 = v375;
            uint64_t v213 = v376;
            unint64_t v214 = v374;
            if (v374 >= v375) {
              goto LABEL_263;
            }
LABEL_213:
            *unint64_t v214 = *(double *)&v213[v203];
            uint64_t v200 = (uint64_t)(v214 + 1);
            uint64_t v198 = v347;
LABEL_214:
            uint64_t v374 = (double *)v200;
            goto LABEL_215;
          }
          int64_t v215 = (char *)v356 - (char *)__p;
          uint64_t v216 = v356 - __p;
          unint64_t v217 = v216 + 1;
          if ((unint64_t)(v216 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v351 - (char *)__p) >> 1 > v217) {
            unint64_t v217 = ((char *)v351 - (char *)__p) >> 1;
          }
          if ((unint64_t)((char *)v351 - (char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v218 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v218 = v217;
          }
          if (v218)
          {
            if (v218 >> 62) {
              goto LABEL_455;
            }
            unint64_t v219 = v218;
            v220 = (char *)operator new(4 * v218);
            v221 = v356;
            unint64_t v218 = v219;
            long long v222 = (int *)&v220[4 * v216];
            *long long v222 = v201;
            uint64_t v223 = (uint64_t)(v222 + 1);
            long long v224 = __p;
            if (v356 != __p)
            {
LABEL_249:
              int v225 = v221 - 1;
              v226 = v221;
              unint64_t v227 = (char *)(v221 - 1) - (char *)v224;
              if (v227 < 0xBC)
              {
                BOOL v228 = v226;
                goto LABEL_257;
              }
              if (&v220[v215 - 4 - (v227 & 0xFFFFFFFFFFFFFFFCLL)] <= &v220[v215 - 4]
                && (int *)((char *)v225 - (v227 & 0xFFFFFFFFFFFFFFFCLL)) <= v225
                && (unint64_t)((char *)v225 - &v220[v215] + 4) >= 0x20)
              {
                uint64_t v251 = (v227 >> 2) + 1;
                uint64_t v252 = 4 * (v251 & 0x7FFFFFFFFFFFFFF8);
                BOOL v228 = &v356[v252 / 0xFFFFFFFFFFFFFFFCLL];
                long long v222 = (int *)((char *)v222 - v252);
                unint64_t v253 = &v220[4 * v216 - 16];
                uint64_t v254 = v356 - 4;
                uint64_t v255 = v251 & 0x7FFFFFFFFFFFFFF8;
                long long v224 = __p;
                do
                {
                  long long v256 = *(_OWORD *)v254;
                  *((_OWORD *)v253 - 1) = *((_OWORD *)v254 - 1);
                  *(_OWORD *)unint64_t v253 = v256;
                  v253 -= 32;
                  v254 -= 8;
                  v255 -= 8;
                }
                while (v255);
                unint64_t v44 = (char *)this + 840;
                if (v251 != (v251 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_258;
                }
              }
              else
              {
                BOOL v228 = v356;
LABEL_257:
                unint64_t v44 = (char *)this + 840;
                long long v224 = __p;
                do
                {
LABEL_258:
                  int v229 = *--v228;
                  *--long long v222 = v229;
                }
                while (v228 != v224);
              }
LABEL_259:
              v363 = v222;
              uint64_t v364 = v223;
              uint64_t v351 = (int *)&v220[4 * v218];
              long long v365 = v351;
              if (!v224)
              {
                long long __p = v222;
                unint64_t v356 = (int *)v223;
                uint64_t v364 = v223;
                unint64_t v212 = v375;
                uint64_t v213 = v376;
                unint64_t v214 = v374;
                if (v374 >= v375) {
                  goto LABEL_263;
                }
                goto LABEL_213;
              }
              v230 = (int *)v223;
              operator delete(v224);
              long long __p = v222;
              unint64_t v356 = v230;
              uint64_t v364 = (uint64_t)v230;
              unint64_t v212 = v375;
              uint64_t v213 = v376;
              unint64_t v214 = v374;
              if (v374 < v375) {
                goto LABEL_213;
              }
LABEL_263:
              uint64_t v346 = v199;
              uint64_t v231 = (double *)v373;
              int64_t v232 = (char *)v214 - (unsigned char *)v373;
              uint64_t v233 = ((char *)v214 - (unsigned char *)v373) >> 3;
              unint64_t v234 = v233 + 1;
              if ((unint64_t)(v233 + 1) >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v235 = (char *)v212 - (unsigned char *)v373;
              if (v235 >> 2 > v234) {
                unint64_t v234 = v235 >> 2;
              }
              if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v236 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v236 = v234;
              }
              if (v236)
              {
                int64_t v344 = (char *)v214 - (unsigned char *)v373;
                if (v236 >> 61) {
LABEL_455:
                }
                  std::__throw_bad_array_new_length[abi:ne180100]();
                uint64_t v237 = ((char *)v214 - (unsigned char *)v373) >> 3;
                unint64_t v238 = v213;
                unint64_t v239 = v236;
                uint64_t v240 = operator new(8 * v236);
                unint64_t v236 = v239;
                uint64_t v233 = v237;
                int64_t v232 = v344;
                uint64_t v241 = &v240[8 * v237];
                *uint64_t v241 = v238[v203];
                uint64_t v200 = (uint64_t)(v241 + 1);
                if (v214 != v231)
                {
LABEL_272:
                  unint64_t v242 = (char *)(v214 - 1) - (char *)v231;
                  uint64_t v198 = v347;
                  if (v242 < 0x58)
                  {
                    uint64_t v199 = v346;
                    goto LABEL_280;
                  }
                  uint64_t v199 = v346;
                  if ((unint64_t)((char *)v214 - &v240[v232]) < 0x20) {
                    goto LABEL_479;
                  }
                  uint64_t v243 = (v242 >> 3) + 1;
                  uint64_t v244 = 8 * (v243 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v245 = &v214[v244 / 0xFFFFFFFFFFFFFFF8];
                  uint64_t v241 = (void *)((char *)v241 - v244);
                  long long v246 = &v240[8 * v233 - 16];
                  uint64_t v247 = v214 - 2;
                  uint64_t v248 = v243 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v249 = *(_OWORD *)v247;
                    *(v246 - 1) = *((_OWORD *)v247 - 1);
                    *long long v246 = v249;
                    v246 -= 2;
                    v247 -= 4;
                    v248 -= 4;
                  }
                  while (v248);
                  unint64_t v214 = v245;
                  if (v243 != (v243 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_479:
                    do
                    {
LABEL_280:
                      uint64_t v250 = *((void *)v214-- - 1);
                      *--uint64_t v241 = v250;
                    }
                    while (v214 != v231);
                  }
LABEL_281:
                  uint64_t v373 = v241;
                  uint64_t v374 = (double *)v200;
                  double v375 = (double *)&v240[8 * v236];
                  if (v231) {
                    operator delete(v231);
                  }
                  unint64_t v44 = (char *)this + 840;
                  goto LABEL_214;
                }
              }
              else
              {
                uint64_t v240 = 0;
                uint64_t v241 = (void *)(8 * v233);
                *(void *)(8 * v233) = v213[v203];
                uint64_t v200 = 8 * v233 + 8;
                if (v214 != v231) {
                  goto LABEL_272;
                }
              }
              uint64_t v199 = v346;
              uint64_t v198 = v347;
              goto LABEL_281;
            }
          }
          else
          {
            v220 = 0;
            v221 = v356;
            long long v222 = (int *)(4 * v216);
            *(_DWORD *)(4 * v216) = v201;
            uint64_t v223 = 4 * v216 + 4;
            long long v224 = __p;
            if (v356 != __p) {
              goto LABEL_249;
            }
          }
          unint64_t v44 = (char *)this + 840;
          goto LABEL_259;
        }
        uint64_t v206 = v392[v199];
        BOOL v207 = v206 <= 0;
        BOOL v208 = v206 < 0;
        int v209 = !v207;
        if (*(double *)(v198 + 8 * v196) <= 0.0) {
          BOOL v208 = v209;
        }
        if (v202 < 3) {
          goto LABEL_229;
        }
        if (v208) {
          goto LABEL_237;
        }
LABEL_215:
        if (++v196 != v195) {
          continue;
        }
        break;
      }
      uint64_t v257 = v363;
      uint64_t v258 = v356;
      if (v363 == v356)
      {
        int v165 = 13;
        unint64_t v90 = (void *)((char *)this + 360);
        unsigned int v166 = v353;
        if (!v356) {
          goto LABEL_302;
        }
        goto LABEL_301;
      }
      unint64_t v259 = v373;
      uint64_t v399 = 0;
      v400 = 0;
      uint64_t v398 = 0;
      int64_t v260 = (char *)v374 - (unsigned char *)v373;
      if (v374 != v373)
      {
        if (v260 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v398 = (double *)operator new((char *)v374 - (unsigned char *)v373);
        uint64_t v399 = (uint64_t)v398;
        unint64_t v261 = &v398[v260 >> 3];
        v400 = v261;
        memmove(v398, v259, v260);
        uint64_t v399 = (uint64_t)v261;
        unint64_t v44 = (char *)this + 840;
      }
      std::discrete_distribution<int>::param_type::__init(&v398);
      int v263 = v257[(int)std::discrete_distribution<int>::operator()<operations_research::sat::ModelRandomGenerator>((uint64_t)&v398, *((void *)this + 2507), &v398)];
      if (v398)
      {
        uint64_t v399 = (uint64_t)v398;
        operator delete(v398);
      }
      int v264 = v263;
      uint64_t v265 = *((void *)this + 39) + 40 * v263;
      uint64_t v266 = *(void *)(v265 + 16);
      uint64_t v267 = *(void *)(v265 + 24);
      if (v266 == v267)
      {
LABEL_297:
        uint64_t v362 = 0;
        LODWORD(v398) = 0;
LABEL_298:
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v362, (int)&v398, "to_combine_coeff != 0");
      }
      while (*(_DWORD *)v266 != v348)
      {
        v266 += 12;
        if (v266 == v267) {
          goto LABEL_297;
        }
      }
      uint64_t v362 = *(void *)(v266 + 4);
      uint64_t v268 = v362;
      LODWORD(v398) = 0;
      if (!v362) {
        goto LABEL_298;
      }
      uint64_t v361 = v392[v199];
      uint64_t v269 = v361;
      LODWORD(v398) = 0;
      if (!v361) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v361, (int)&v398, "mult2 != 0");
      }
      if (v362 <= 0)
      {
        uint64_t v268 = -v362;
        uint64_t v270 = -v362;
LABEL_311:
        if (v269 >= 0) {
          unint64_t v271 = v269;
        }
        else {
          unint64_t v271 = -v269;
        }
        do
        {
          uint64_t v272 = v271;
          unint64_t v271 = v270 % v271;
          uint64_t v270 = v272;
        }
        while (v271);
        uint64_t v360 = v272;
        uint64_t v270 = v272;
      }
      else
      {
        uint64_t v361 = -v361;
        uint64_t v269 = v361;
        uint64_t v270 = v362;
        if (v361) {
          goto LABEL_311;
        }
        uint64_t v360 = v362;
        LODWORD(v398) = 0;
      }
      uint64_t v273 = v268 / v270;
      if (v268 / v270 >= 0) {
        unint64_t v274 = v268 / v270;
      }
      else {
        unint64_t v274 = -v273;
      }
      int v275 = 63 - __clz(v274);
      if (v273) {
        int v276 = v275;
      }
      else {
        int v276 = 0;
      }
      if (v95 >= 0) {
        unint64_t v277 = v95;
      }
      else {
        unint64_t v277 = -v95;
      }
      int v278 = 63 - __clz(v277);
      uint64_t v279 = v269 / v270;
      uint64_t v361 = v269 / v270;
      if (v95) {
        int v280 = v278;
      }
      else {
        int v280 = 0;
      }
      unsigned int v281 = v276 + v280;
      if (v276 + v280 <= 61)
      {
        unint64_t v282 = v274 * v95;
        goto LABEL_333;
      }
      unint64_t v282 = 0;
      if (v95)
      {
        unsigned int v166 = v353;
        if (v273)
        {
          if (v281 <= 0x3E)
          {
            unint64_t v282 = v274 * v277;
            if (v274 * v277 >= 0x7FFFFFFFFFFFFFFFLL) {
              unint64_t v282 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }
          else
          {
            unint64_t v282 = 0x7FFFFFFFFFFFFFFFLL;
          }
        }
      }
      else
      {
LABEL_333:
        unsigned int v166 = v353;
      }
      if (v279 >= 0) {
        unint64_t v283 = v279;
      }
      else {
        unint64_t v283 = -v279;
      }
      int v284 = 63 - __clz(v283);
      uint64_t v285 = *(void *)(*((void *)this + 42) + 8 * v263);
      if (!v279) {
        int v284 = 0;
      }
      if (v285 >= 0) {
        unint64_t v286 = *(void *)(*((void *)this + 42) + 8 * v263);
      }
      else {
        unint64_t v286 = -v285;
      }
      int v287 = 63 - __clz(v286);
      if (!v285) {
        int v287 = 0;
      }
      int v288 = v287 + v284;
      BOOL v289 = __OFSUB__(v288, 61);
      if (v288 > 61)
      {
        uint64_t v290 = 0;
        if (v279)
        {
          if (v285)
          {
            uint64_t v290 = ((unint64_t)v285 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            BOOL v289 = __OFSUB__(v288, 62);
            if (v288 <= 0x3E)
            {
              unint64_t v295 = v286 * v283;
              BOOL v289 = __OFSUB__(v295, v290);
              if (v295 < v290)
              {
                BOOL v289 = 0;
                if (v290 >= 0) {
                  uint64_t v290 = v295;
                }
                else {
                  uint64_t v290 = -(uint64_t)v295;
                }
              }
            }
          }
        }
      }
      else
      {
        uint64_t v290 = v285 * v283;
      }
      uint64_t v291 = v290 + v282;
      unint64_t v292 = (v290 + v282) ^ v282;
      unint64_t v293 = (v290 + v282) ^ v290;
      uint64_t v294 = (v282 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if (((v292 & v293 & 0x8000000000000000) != 0) == v289) {
        uint64_t v294 = v291;
      }
      if (v294 == 0x7FFFFFFFFFFFFFFFLL)
      {
        int v165 = 13;
        unint64_t v90 = (void *)((char *)this + 360);
        uint64_t v258 = v363;
        if (!v363) {
          goto LABEL_302;
        }
        goto LABEL_301;
      }
      v296 = (char *)v369;
      v297 = v370;
      uint64_t v298 = (char *)v369;
      if (v369 != v370)
      {
        do
        {
          *(void *)(v298 + 4) *= v273;
          v298 += 12;
        }
        while (v298 != v297);
        uint64_t v279 = v361;
      }
      if (v297 >= v371)
      {
        unint64_t v300 = 0xAAAAAAAAAAAAAAABLL * ((v297 - v296) >> 2) + 1;
        if (v300 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v371 - v296) >> 2) > v300) {
          unint64_t v300 = 0x5555555555555556 * ((v371 - v296) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v371 - v296) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v301 = 0x1555555555555555;
        }
        else {
          unint64_t v301 = v300;
        }
        if (v301)
        {
          if (v301 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v302 = (char *)operator new(12 * v301);
        }
        else
        {
          unint64_t v302 = 0;
        }
        v303 = &v302[4 * ((v297 - v296) >> 2)];
        *(_DWORD *)v303 = v263;
        *(void *)(v303 + 4) = v279;
        uint64_t v304 = v303;
        if (v296 == v297)
        {
          unint64_t v90 = (void *)((char *)this + 360);
          unsigned int v166 = v353;
        }
        else
        {
          unint64_t v90 = (void *)((char *)this + 360);
          unsigned int v166 = v353;
          do
          {
            uint64_t v305 = *(void *)(v297 - 12);
            v297 -= 12;
            int v306 = *((_DWORD *)v297 + 2);
            *(void *)(v304 - 12) = v305;
            v304 -= 12;
            *((_DWORD *)v304 + 2) = v306;
          }
          while (v297 != v296);
          v296 = (char *)v369;
        }
        long long v299 = v303 + 12;
        uint64_t v369 = v304;
        uint64_t v370 = v303 + 12;
        unint64_t v371 = &v302[12 * v301];
        unint64_t v44 = (char *)this + 840;
        if (v296) {
          operator delete(v296);
        }
      }
      else
      {
        *(_DWORD *)v297 = v263;
        *(void *)(v297 + 4) = v279;
        long long v299 = v297 + 12;
        unint64_t v90 = (void *)((char *)this + 360);
        unint64_t v44 = (char *)this + 840;
      }
      uint64_t v370 = v299;
      uint64_t v398 = (double *)"MIR_";
      uint64_t v399 = 4;
      uint64_t v307 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)(v166 + 2), v397, v262);
      unint64_t v395 = (double *)v397;
      v396 = (double *)(v307 - (unsigned char *)v397);
      absl::lts_2020_02_25::StrCat((uint64_t)&v398, (uint64_t)&v395, &v359);
      BOOL v308 = operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints((uint64_t)this, (uint64_t)&v359, (uint64_t *)&v369);
      char v309 = v308;
      if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v359.__r_.__value_.__l.__data_);
        if (v166 == 4) {
          char v311 = 1;
        }
        else {
          char v311 = v309;
        }
        if (v311)
        {
LABEL_392:
          int v165 = 13;
          uint64_t v258 = v363;
          if (!v363) {
            goto LABEL_302;
          }
          goto LABEL_301;
        }
      }
      else
      {
        char v310 = v166 == 4 || v308;
        if (v310) {
          goto LABEL_392;
        }
      }
      uint64_t v312 = (int *)v389;
      uint64_t v313 = (int *)v390;
      if (v389 != v390)
      {
        v314 = v392;
        do
        {
          uint64_t v315 = *v312++;
          v314[v315] *= v273;
        }
        while (v312 != v313);
      }
      uint64_t v316 = *((void *)this + 39) + 40 * v264;
      long long v318 = *(int **)(v316 + 16);
      uint64_t v317 = *(int **)(v316 + 24);
      if (v318 != v317)
      {
        uint64_t v357 = *(int **)(v316 + 24);
        while (2)
        {
          int v320 = *v318;
          uint64_t v321 = *(void *)(v318 + 1);
          unint64_t v322 = (unint64_t)*v318 >> 6;
          uint64_t v323 = *((void *)v383 + v322);
          if ((v323 & (1 << *v318)) != 0) {
            goto LABEL_405;
          }
          *((void *)v383 + v322) = v323 | (1 << v320);
          v324 = v390;
          if (v390 >= v391)
          {
            v325 = (char *)v389;
            int64_t v326 = v390 - (unsigned char *)v389;
            uint64_t v327 = (v390 - (unsigned char *)v389) >> 2;
            unint64_t v328 = v327 + 1;
            if ((unint64_t)(v327 + 1) >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v329 = v391 - (unsigned char *)v389;
            if ((v391 - (unsigned char *)v389) >> 1 > v328) {
              unint64_t v328 = v329 >> 1;
            }
            if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v330 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v330 = v328;
            }
            if (v330)
            {
              if (v330 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v331 = (char *)operator new(4 * v330);
              uint64_t v332 = &v331[4 * v327];
              *(_DWORD *)uint64_t v332 = v320;
              uint64_t v319 = (uint64_t)(v332 + 4);
              if (v324 == v325)
              {
LABEL_425:
                int v389 = v332;
                int v390 = (char *)v319;
                v391 = &v331[4 * v330];
                if (v325) {
                  operator delete(v325);
                }
                unint64_t v44 = (char *)this + 840;
                uint64_t v317 = v357;
LABEL_404:
                int v390 = (char *)v319;
                unint64_t v90 = (void *)((char *)this + 360);
LABEL_405:
                v392[v320] += v361 * v321;
                v318 += 3;
                if (v318 == v317)
                {
                  int v165 = 0;
                  unsigned int v166 = v353;
                  uint64_t v258 = v363;
                  if (!v363) {
                    goto LABEL_302;
                  }
LABEL_301:
                  uint64_t v364 = (uint64_t)v258;
                  operator delete(v258);
                  goto LABEL_302;
                }
                continue;
              }
            }
            else
            {
              unint64_t v331 = 0;
              uint64_t v332 = (char *)(4 * v327);
              *(_DWORD *)(4 * v327) = v320;
              uint64_t v319 = 4 * v327 + 4;
              if (v324 == v325) {
                goto LABEL_425;
              }
            }
            unint64_t v333 = v324 - 4 - v325;
            if (v333 < 0x2C) {
              goto LABEL_480;
            }
            if ((unint64_t)(v324 - &v331[v326]) < 0x20) {
              goto LABEL_480;
            }
            uint64_t v334 = (v333 >> 2) + 1;
            uint64_t v335 = 4 * (v334 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v336 = &v324[-v335];
            v332 -= v335;
            unint64_t v337 = &v331[4 * v327 - 16];
            uint64_t v338 = v324 - 16;
            uint64_t v339 = v334 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v340 = *(_OWORD *)v338;
              *((_OWORD *)v337 - 1) = *((_OWORD *)v338 - 1);
              *(_OWORD *)unint64_t v337 = v340;
              v337 -= 32;
              v338 -= 32;
              v339 -= 8;
            }
            while (v339);
            v324 = v336;
            if (v334 != (v334 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_480:
              do
              {
                int v341 = *((_DWORD *)v324 - 1);
                v324 -= 4;
                *((_DWORD *)v332 - 1) = v341;
                v332 -= 4;
              }
              while (v324 != v325);
            }
            goto LABEL_425;
          }
          break;
        }
        *(_DWORD *)int v390 = v320;
        uint64_t v319 = (uint64_t)(v324 + 4);
        goto LABEL_404;
      }
      int v165 = 0;
      uint64_t v258 = v363;
      if (v363) {
        goto LABEL_301;
      }
LABEL_302:
      unint64_t v94 = (char *)v366;
      if (v366)
      {
LABEL_303:
        uint64_t v367 = v94;
        operator delete(v94);
      }
LABEL_304:
      if (!v165)
      {
        unsigned int v89 = v166 + 1;
        if (v166 < 4) {
          continue;
        }
      }
      goto LABEL_56;
    }
  }
LABEL_436:
  if (v373)
  {
    uint64_t v374 = (double *)v373;
    operator delete(v373);
  }
  if (v376) {
    operator delete(v376);
  }
  if (v379)
  {
    v380 = (char *)v379;
    operator delete(v379);
  }
  if (v389)
  {
    int v390 = (char *)v389;
    operator delete(v389);
  }
  if (v383)
  {
    uint64_t v384 = (char *)v383;
    operator delete(v383);
  }
  if (v392) {
    operator delete(v392);
  }
}

void sub_23CD236A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

void sub_23CD236B0()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CD236B8()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CD236C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,_Unwind_Exception *exception_object,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36)
  {
    operator delete(a36);
    long long v63 = a39;
    if (!a39)
    {
LABEL_5:
      uint64_t v64 = a42;
      if (!a42) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else
  {
    long long v63 = a39;
    if (!a39) {
      goto LABEL_5;
    }
  }
  operator delete(v63);
  uint64_t v64 = a42;
  if (!a42)
  {
LABEL_6:
    uint64_t v65 = a45;
    if (!a45) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v64);
  uint64_t v65 = a45;
  if (!a45)
  {
LABEL_7:
    uint64_t v66 = a48;
    if (!a48) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v65);
  uint64_t v66 = a48;
  if (!a48)
  {
LABEL_8:
    int v67 = exception_object;
    if (!exception_object) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v66);
  int v67 = exception_object;
  if (!exception_object)
  {
LABEL_9:
    uint64_t v68 = a61;
    if (!a61) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v67);
  uint64_t v68 = a61;
  if (!a61)
  {
LABEL_10:
    unint64_t v69 = a55;
    if (!a55) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v68);
  unint64_t v69 = a55;
  if (!a55)
  {
LABEL_11:
    uint64_t v70 = *(void **)(v61 - 248);
    if (!v70) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v69);
  uint64_t v70 = *(void **)(v61 - 248);
  if (!v70) {
LABEL_12:
  }
    _Unwind_Resume(a1);
LABEL_21:
  operator delete(v70);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinearProgrammingConstraint::UpdateSimplexIterationLimit(uint64_t this, uint64_t a2, uint64_t a3)
{
  if (*(int *)(*(void *)(this + 20000) + 396) >= 2)
  {
    uint64_t v5 = this;
    uint64_t v6 = (operations_research::glop::RevisedSimplex *)(this + 840);
    int ProblemNumCols = operations_research::glop::RevisedSimplex::GetProblemNumCols((operations_research::glop::RevisedSimplex *)(this + 840));
    if (ProblemNumCols < 1)
    {
      int v9 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v10 = ProblemNumCols;
      do
      {
        if (operations_research::glop::RevisedSimplex::GetReducedCost((uint64_t)v6, v8) == 0.0
          && operations_research::glop::RevisedSimplex::GetVariableStatus((uint64_t)v6, v8))
        {
          ++v9;
        }
        ++v8;
      }
      while (v10 != v8);
    }
    size_t v11 = (unsigned char *)(v5 + 20688);
    *(unsigned char *)(v5 + 20688) = (double)(int)operations_research::glop::RevisedSimplex::GetProblemNumCols(v6) * 0.3 <= (double)v9;
    this = operations_research::glop::RevisedSimplex::GetProblemNumCols(v6);
    if ((int)this >= 1)
    {
      unint64_t v12 = (int)this;
      uint64_t v13 = 10 * v9 / (int)this;
      this = operations_research::glop::RevisedSimplex::GetProblemStatus(v6);
      if (this == 8)
      {
        if (*v11)
        {
          if (v13 <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v13;
          }
LABEL_22:
          uint64_t v15 = *(void *)(v5 + 19352) / v14;
          goto LABEL_23;
        }
        uint64_t v15 = 2 * *(void *)(v5 + 19352);
      }
      else
      {
        this = operations_research::glop::RevisedSimplex::GetProblemStatus(v6);
        if (!this)
        {
          if (!*v11)
          {
            uint64_t v15 = v12 / 0x28;
            goto LABEL_23;
          }
          uint64_t v14 = 2 * v13;
          if (2 * v13 <= 1) {
            uint64_t v14 = 1;
          }
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(v5 + 19352);
      }
LABEL_23:
      if (v15 >= a3) {
        uint64_t v15 = a3;
      }
      if (v15 <= a2) {
        uint64_t v15 = a2;
      }
      *(void *)(v5 + 19352) = v15;
    }
  }
  return this;
}

uint64_t operations_research::sat::LinearProgrammingConstraint::Propagate(operations_research::sat::LinearProgrammingConstraint *this)
{
  unint64_t v3 = *((void *)this + 2491) - *((void *)this + 2490);
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 >> 2);
    char v1 = 3;
    do
    {
      int v6 = *(_DWORD *)(*((void *)this + 2490) + 4 * v4);
      uint64_t v7 = *(void *)(*((void *)this + 2503) + 40);
      uint64_t v8 = *(void *)(v7 + 12 * v6);
      double v9 = (double)v8;
      if (v8 < (uint64_t)0x8000000000000003) {
        double v9 = -INFINITY;
      }
      if (v8 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v10 = v9;
      }
      else {
        double v10 = INFINITY;
      }
      uint64_t v11 = *(void *)(v7 + 12 * (v6 ^ 1));
      double v12 = (double)-v11;
      if (v11 > 0x7FFFFFFFFFFFFFFDLL) {
        double v12 = -INFINITY;
      }
      if (v11 >= (uint64_t)0x8000000000000003) {
        double v13 = v12;
      }
      else {
        double v13 = INFINITY;
      }
      double v14 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)this + 19360, v4);
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)this + 360, v4++, v14 * v10, v14 * v13);
    }
    while (v5 != v4);
  }
  operations_research::glop::GlopParameters::GlopParameters((operations_research::glop::GlopParameters *)v92, (operations_research::sat::LinearProgrammingConstraint *)((char *)this + 12456));
  if ((*(_DWORD *)(*((void *)this + 2504) + 8) & 0xFFFFFFE) == 0)
  {
    int v16 = v93 | 0x4000000;
    v93 |= 0x4000000u;
    uint64_t v96 = 2000;
    if (!*(unsigned char *)(*((void *)this + 2500) + 503)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v15 = *((void *)this + 2419);
  int v16 = v93 | 0x4000000;
  v93 |= 0x4000000u;
  uint64_t v96 = v15;
  if (*(unsigned char *)(*((void *)this + 2500) + 503))
  {
LABEL_16:
    char v97 = 0;
    int v93 = v16 | 0x600;
    v94 |= 2u;
    int64x2_t v95 = vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
  }
LABEL_17:
  operations_research::glop::RevisedSimplex::SetParameters((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840), (const operations_research::glop::GlopParameters *)v92);
  operations_research::glop::RevisedSimplex::NotifyThatMatrixIsUnchangedForNextSolve((uint64_t)this + 840);
  if (!operations_research::sat::LinearProgrammingConstraint::SolveLp(this)) {
    goto LABEL_110;
  }
  int v88 = (char *)this + 19992;
  int v17 = 1;
  if ((*(_DWORD *)(*((void *)this + 2504) + 8) & 0xFFFFFFE) == 0) {
    int v17 = *(_DWORD *)(*((void *)this + 2500) + 560);
  }
  int v18 = 0;
  while (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840))
       && v18 < v17)
  {
    if (*((void *)this + 39) == *((void *)this + 40)) {
      goto LABEL_42;
    }
    if ((*(_DWORD *)(*((void *)this + 2504) + 8) & 0xFFFFFFE) == 0)
    {
      unint64_t v19 = *((void *)this + 2517);
      if (v19 < 0x80)
      {
        if (v19)
        {
          *((void *)this + 2516) = 0;
          memset(*((void **)this + 2514), 128, v19 + 8);
          *(unsigned char *)(*((void *)this + 2514) + *((void *)this + 2517)) = -1;
          unint64_t v19 = *((void *)this + 2517);
          uint64_t v20 = v19 - (v19 >> 3);
          if (v19 == 7) {
            uint64_t v20 = 6;
          }
          *((void *)this + 2519) = v20 - *((void *)this + 2516);
        }
      }
      else
      {
        operator delete(*((void **)this + 2514));
        unint64_t v19 = 0;
        *((void *)this + 2514) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *((void *)this + 2519) = 0;
        *((void *)this + 2516) = 0;
        *((void *)this + 2517) = 0;
        *((void *)this + 2515) = 0;
      }
      uint64_t v21 = (unint64_t *)*((void *)this + 2518);
      if (v21)
      {
        v21[1] = 0;
        *uint64_t v21 = v19;
        v21[4] = 0;
        v21[2] = 0;
        uint64_t v22 = *((void *)this + 2500);
        if (*(unsigned char *)(v22 + 446))
        {
LABEL_34:
          operations_research::sat::LinearProgrammingConstraint::AddMirCuts(this);
          uint64_t v22 = *((void *)this + 2500);
        }
      }
      else
      {
        uint64_t v22 = *((void *)this + 2500);
        if (*(unsigned char *)(v22 + 446)) {
          goto LABEL_34;
        }
      }
      if (*(unsigned char *)(v22 + 445)) {
        operations_research::sat::LinearProgrammingConstraint::AddCGCuts(this);
      }
    }
    uint64_t v23 = *((void *)this + 2553);
    uint64_t v24 = *((void *)this + 2554);
    if (v23 != v24
      && ((*(_DWORD *)(*((void *)this + 2504) + 8) & 0xFFFFFFE) == 0 || !*(unsigned char *)(*((void *)this + 2500) + 123)))
    {
      do
      {
        uint64_t v25 = *((void *)this + 2551);
        *(void *)&long long __p = (char *)this + 16;
        uint64_t v26 = *(void *)(v23 + 48);
        if (!v26) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v26 + 48))(v26, v25, &__p);
        v23 += 56;
      }
      while (v23 != v24);
    }
LABEL_42:
    uint64_t State = operations_research::glop::RevisedSimplex::GetState((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
    long long __p = 0uLL;
    size_t v91 = 0;
    double v29 = *(const void **)State;
    uint64_t v28 = *(void *)(State + 8);
    size_t v30 = v28 - *(void *)State;
    if (v28 != *(void *)State)
    {
      if ((v30 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      *(void *)&long long __p = operator new(v28 - *(void *)State);
      *((void *)&__p + 1) = __p;
      size_t v31 = __p + v30;
      size_t v91 = __p + v30;
      memcpy((void *)__p, v29, v30);
      *((void *)&__p + 1) = v31;
    }
    if (!operations_research::sat::LinearConstraintManager::ChangeLp((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 16), *((uint64_t **)this + 2551), (uint64_t)&__p))
    {
      if ((*(_DWORD *)(*((void *)this + 2504) + 8) & 0xFFFFFFE) == 0) {
        *((unsigned char *)this + 20400) = 1;
      }
      int v36 = 3;
      unint64_t v37 = (void *)__p;
      if (!(void)__p) {
        goto LABEL_21;
      }
LABEL_62:
      *((void *)&__p + 1) = v37;
      operator delete(v37);
      goto LABEL_21;
    }
    operations_research::glop::RevisedSimplex::LoadStateForNextSolve((uint64_t)this + 840, (char **)&__p);
    if ((operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(this) & 1) == 0)
    {
      uint64_t v38 = *((void *)this + 2503);
      uint64_t v39 = *(void *)(v38 + 936);
      uint64_t v40 = *(void *)(v39 + 96);
      v39 += 96;
      *(void *)(v39 + 48) = 0;
      *(void *)(v39 + 8) = v40;
      operations_research::sat::IntegerTrail::MergeReasonInto(v38, 0, 0, (void **)v39);
      char v1 = 0;
      int v36 = 1;
      unint64_t v37 = (void *)__p;
      if (!(void)__p) {
        goto LABEL_21;
      }
      goto LABEL_62;
    }
    operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
    if (operations_research::sat::LinearProgrammingConstraint::SolveLp(this))
    {
      if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840))
        && *off_26AED0090[0] >= 1
        && (off_26AED0090[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AED0090, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1251);
        double v32 = (void *)google::LogMessage::stream((google::LogMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Relaxation improvement ", 23);
        double v33 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" -> ", 4);
        operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
        unint64_t v34 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" diff: ", 7);
        operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
        unint64_t v35 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" level: ", 8);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)&v89);
      }
      int v36 = 0;
      unint64_t v37 = (void *)__p;
      if (!(void)__p) {
        goto LABEL_21;
      }
      goto LABEL_62;
    }
    int v36 = 1;
    char v1 = 1;
    unint64_t v37 = (void *)__p;
    if ((void)__p) {
      goto LABEL_62;
    }
LABEL_21:
    ++v18;
    if (v36)
    {
      if (v36 != 3) {
        goto LABEL_111;
      }
      break;
    }
  }
  if (operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)) == 5)
  {
    if (*(unsigned char *)(*((void *)this + 2500) + 503))
    {
      if (!operations_research::sat::LinearProgrammingConstraint::FillExactDualRayReason(this)) {
        goto LABEL_110;
      }
    }
    else
    {
      DualRayRowCombination = (void *)operations_research::glop::RevisedSimplex::GetDualRayRowCombination((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
      operations_research::sat::LinearProgrammingConstraint::FillReducedCostReasonIn(this, DualRayRowCombination, (uint64_t)this + 20208);
    }
    uint64_t v48 = *((void *)this + 2503);
    unint64_t v49 = (uint64_t *)*((void *)this + 2526);
    uint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2527) - (void)v49) >> 2);
    uint64_t v51 = *(void *)(v48 + 936);
    uint64_t v52 = *(void *)(v51 + 96);
    v51 += 96;
    *(void *)(v51 + 48) = 0;
    *(void *)(v51 + 8) = v52;
    operations_research::sat::IntegerTrail::MergeReasonInto(v48, v49, v50, (void **)v51);
LABEL_84:
    char v1 = 0;
  }
  else
  {
    operations_research::sat::LinearProgrammingConstraint::UpdateSimplexIterationLimit((uint64_t)this, 10, 1000);
    if (*v88
      && (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840))
       || operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)) == 8))
    {
      double ObjectiveValue = operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
      int64_t v42 = vcvtpd_s64_f64(ObjectiveValue + -0.0001);
      if (*(unsigned char *)(*((void *)this + 2500) + 503))
      {
        if ((operations_research::sat::LinearProgrammingConstraint::ExactLpReasonning(this) & 1) == 0) {
          goto LABEL_84;
        }
        if (v42 > *(void *)(*(void *)(*((void *)this + 2503) + 40) + 12 * *(int *)((char *)this + 19993))
          && *off_26AED0098[0] >= 2
          && (off_26AED0098[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AED0098, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1298);
          unint64_t v43 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"LP objective [ ", 15);
          unint64_t v44 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
          unint64_t v45 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" ] approx_lb += ", 16);
          uint64_t v46 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" gap: ", 6);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
      }
      else
      {
        ReducedCosts = (void *)operations_research::glop::RevisedSimplex::GetReducedCosts((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
        operations_research::sat::LinearProgrammingConstraint::FillReducedCostReasonIn(this, ReducedCosts, (uint64_t)this + 20208);
        uint64_t v54 = *(void *)(*(void *)(*((void *)this + 2503) + 40) + 12 * (*(_DWORD *)((char *)this + 19993) ^ 1));
        double v55 = (double)-v54;
        if (v54 > 0x7FFFFFFFFFFFFFFDLL) {
          double v55 = -INFINITY;
        }
        if (v54 < (uint64_t)0x8000000000000003) {
          double v55 = INFINITY;
        }
        operations_research::sat::LinearProgrammingConstraint::ReducedCostStrengtheningDeductions(this, v55 - ObjectiveValue);
        if (*((void *)this + 2529) != *((void *)this + 2530))
        {
          std::vector<operations_research::sat::IntegerLiteral>::__assign_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral*,operations_research::sat::IntegerLiteral*>((void *)this + 2532, *((char **)this + 2526), *((char **)this + 2527), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2527) - *((void *)this + 2526)) >> 2));
          uint64_t v56 = *(void *)(*(void *)(*((void *)this + 2503) + 40) + 12
                                                                         * (*(_DWORD *)((char *)this + 19993) ^ 1));
          LODWORD(__p) = *(_DWORD *)((char *)this + 19993) ^ 1;
          *(void *)((char *)&__p + 4) = v56;
          *(void *)&long long v89 = __p;
          DWORD2(v89) = HIDWORD(v56);
          std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100]((void **)this + 2532, (uint64_t *)&v89);
        }
        uint64_t v57 = *((void *)this + 2503);
        if (*(void *)(*(void *)(v57 + 40) + 12 * *(int *)((char *)this + 19993)) < v42)
        {
          LODWORD(__p) = *(_DWORD *)((char *)this + 19993);
          *(void *)((char *)&__p + 4) = v42;
          if ((operations_research::sat::IntegerTrail::Enqueue(v57, __p, SHIDWORD(v42), 0, 0, *((uint64_t **)this + 2526), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2527) - *((void *)this + 2526)) >> 2)) & 1) == 0)goto LABEL_84; {
        }
          }
        uint64_t v58 = *((void *)this + 2529);
        uint64_t v59 = *((void *)this + 2530);
        if (v58 != v59)
        {
          int v60 = -858993459
              * ((*(void *)(*((void *)this + 2503) + 152) - *(void *)(*((void *)this + 2503) + 144)) >> 2);
          do
          {
            int64_t v42 = v42 & 0xFFFFFFFF00000000 | *(unsigned int *)(v58 + 8);
            if ((operations_research::sat::IntegerTrail::Enqueue(*((void *)this + 2503), *(void *)v58, v42, 0, 0, *((uint64_t **)this + 2532), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2533) - *((void *)this + 2532)) >> 2), v60) & 1) == 0)goto LABEL_84; {
            v58 += 12;
            }
          }
          while (v58 != v59);
        }
      }
    }
    if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)))
    {
      if (!*((unsigned char *)this + 20316))
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1340);
        long long v87 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Check failed: lp_solution_is_set_ ", 34);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
      }
      *((double *)this + 2540) = operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
      *((unsigned char *)this + 20317) = 1;
      unint64_t v61 = *((void *)this + 2491) - *((void *)this + 2490);
      if ((int)(v61 >> 2) >= 1)
      {
        uint64_t v62 = 0;
        uint64_t v63 = (v61 >> 2);
        do
        {
          double ReducedCost = operations_research::glop::RevisedSimplex::GetReducedCost((uint64_t)this + 840, v62);
          *(double *)(*((void *)this + 2544) + 8 * v62) = operations_research::glop::LpScalingHelper::UnscaleReducedCost((uint64_t)this + 19360, v62, ReducedCost);
          double v65 = *(double *)(*((void *)this + 2541) + 8 * v62);
          if (vabdd_f64(v65, round(v65)) > 0.0001) {
            *((unsigned char *)this + 20317) = 0;
          }
          ++v62;
        }
        while (v63 != v62);
      }
      if (*((unsigned char *)this + 20448)) {
        operations_research::sat::LinearProgrammingConstraint::UpdateAverageReducedCosts(this);
      }
    }
    uint64_t v66 = *((void *)this + 2500);
    if (*(unsigned char *)(v66 + 156))
    {
      if (*v88)
      {
        if ((*(_DWORD *)(*((void *)this + 2504) + 8) & 0xFFFFFFE) == 0 && !*((unsigned char *)this + 20688))
        {
          if (*((unsigned char *)this + 20316))
          {
            if (!*((unsigned char *)this + 20317) && *(int *)(v66 + 396) >= 2)
            {
              if (*((unsigned char *)this + 20448))
              {
                if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)))
                {
                  uint64_t v68 = *((void *)this + 2587) + 1;
                  *((void *)this + 2587) = v68;
                  if (v68 >= *((int *)this + 5173))
                  {
                    *((void *)this + 2587) = 0;
                    unint64_t v69 = *((void *)this + 2491) - *((void *)this + 2490);
                    long long __p = 0uLL;
                    size_t v91 = 0;
                    if ((int)(v69 >> 2) <= 0) {
                      goto LABEL_151;
                    }
                    uint64_t v70 = 0;
                    uint64_t v71 = (v69 >> 2);
                    do
                    {
                      int v72 = *(_DWORD *)(*((void *)this + 2490) + 4 * v70);
                      LODWORD(v89) = v72 & 0xFFFFFFFE;
                      double v73 = *(double *)(*((void *)this + 2541)
                                      + 8
                                      * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2493, (int *)&v89));
                      if (vabdd_f64(v73, round(v73)) > 0.0001)
                      {
                        uint64_t v74 = *((void *)this + 2503);
                        unint64_t v75 = *(int *)(*(void *)(v74 + 408) + 4 * v72);
                        if (v75 == -1
                          || ((*(void *)(*(void *)(*(void *)(v74 + 936) + 24)
                                         + ((v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*(void *)(v74 + 408)
                                                                                             + 4 * v72)) & 1) == 0)
                        {
                          *(double *)&long long v89 = -*(double *)(*((void *)this + 2569) + 8 * v70);
                          *((void *)&v89 + 1) = v72 & 0xFFFFFFFE;
                          uint64_t v76 = (long long *)std::lower_bound[abi:ne180100]<std::__wrap_iter<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>((double *)__p, *((double **)&__p + 1), (uint64_t)&v89);
                          std::vector<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::insert((char **)&__p, v76, &v89);
                          if (*((void *)&__p + 1) - (void)__p >= 0x31uLL) {
                            std::vector<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize((uint64_t *)&__p, 3uLL);
                          }
                        }
                      }
                      ++v70;
                    }
                    while (v71 != v70);
                    long long v77 = __p;
                    if ((void)__p == *((void *)&__p + 1)) {
                      goto LABEL_151;
                    }
                    int v78 = *(_DWORD *)(__p + 8);
                    if (*off_26AED00A0[0] >= 2
                      && (off_26AED00A0[0] != &google::kLogSiteUninitialized
                       || google::InitVLOG3__((google *)off_26AED00A0, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
                    {
                      google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1411);
                      unint64_t v79 = (void *)google::LogMessage::stream((google::LogMessage *)&v89);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Branching on: ", 14);
                      std::ostream::operator<<();
                      google::LogMessage::~LogMessage((google::LogMessage *)&v89);
                    }
                    int v80 = operations_research::sat::LinearProgrammingConstraint::BranchOnVar((uint64_t)this, v78);
                    char v81 = v80;
                    if (!v80) {
                      goto LABEL_151;
                    }
                    if (*off_26AED00A8[0] >= 2
                      && (off_26AED00A8[0] != &google::kLogSiteUninitialized
                       || google::InitVLOG3__((google *)off_26AED00A8, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
                    {
                      google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1413);
                      uint64_t v82 = (void *)google::LogMessage::stream((google::LogMessage *)&v89);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Branching successful.", 21);
                      google::LogMessage::~LogMessage((google::LogMessage *)&v89);
                    }
                    uint64_t v83 = v77 + 16;
                    if ((void)v77 + 16 != *((void *)&v77 + 1))
                    {
                      while (1)
                      {
                        int v84 = *(_DWORD *)(v83 + 8);
                        if (*off_26AED00A0[0] >= 2
                          && (off_26AED00A0[0] != &google::kLogSiteUninitialized
                           || google::InitVLOG3__((google *)off_26AED00A0, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
                        {
                          google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1411);
                          uint64_t v85 = (void *)google::LogMessage::stream((google::LogMessage *)&v89);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Branching on: ", 14);
                          std::ostream::operator<<();
                          google::LogMessage::~LogMessage((google::LogMessage *)&v89);
                        }
                        if (!operations_research::sat::LinearProgrammingConstraint::BranchOnVar((uint64_t)this, v84))break; {
                        if (*off_26AED00A8[0] >= 2
                        }
                          && (off_26AED00A8[0] != &google::kLogSiteUninitialized
                           || google::InitVLOG3__((google *)off_26AED00A8, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
                        {
                          google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1413);
                          uint64_t v86 = (void *)google::LogMessage::stream((google::LogMessage *)&v89);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Branching successful.", 21);
                          google::LogMessage::~LogMessage((google::LogMessage *)&v89);
                        }
                        v83 += 16;
                        if (v83 == *((void *)&v77 + 1)) {
                          goto LABEL_152;
                        }
                      }
                      if ((v81 & 1) == 0) {
LABEL_151:
                      }
                        *((_DWORD *)this + 5173) *= 2;
                    }
LABEL_152:
                    if ((void)__p)
                    {
                      *((void *)&__p + 1) = __p;
                      operator delete((void *)__p);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_110:
    char v1 = 1;
  }
LABEL_111:
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)v92);
  return v1 & 1;
}

void sub_23CD249B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)&a15);
    _Unwind_Resume(a1);
  }
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)&a15);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::LinearProgrammingConstraint::FillExactDualRayReason(operations_research::sat::LinearProgrammingConstraint *this)
{
  uint64_t v18 = 0;
  DualRay = (uint64_t *)operations_research::glop::RevisedSimplex::GetDualRay((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(this, 0, DualRay, (double *)&v18, 62, v17);
  uint64_t v16 = 0;
  if (operations_research::sat::LinearProgrammingConstraint::ComputeNewLinearConstraint(this, (uint64_t *)v17, (uint64_t *)this + 2472, &v16))
  {
    operations_research::sat::LinearProgrammingConstraint::AdjustNewLinearConstraint(this, (int **)v17, (uint64_t *)this + 2472, &v16);
    *(_OWORD *)long long __p = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    *(_OWORD *)double v13 = 0u;
    operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint((uint64_t)this, (void *)this + 2472, v16, &v12);
    operations_research::sat::DivideByGCD((uint64_t *)&v12, v3);
    operations_research::sat::LinearProgrammingConstraint::PreventOverflow(this, (operations_research::sat::LinearConstraint *)&v12, 62);
    uint64_t ImpliedLowerBound = operations_research::sat::LinearProgrammingConstraint::GetImpliedLowerBound(this, (const operations_research::sat::LinearConstraint *)&v12);
    BOOL v5 = ImpliedLowerBound > *((void *)&v12 + 1);
    if (ImpliedLowerBound <= *((uint64_t *)&v12 + 1))
    {
      if (*off_26AED00C8[0] >= 1
        && (off_26AED00C8[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AED00C8, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1907);
        uint64_t v7 = (void *)google::LogMessage::stream((google::LogMessage *)v11);
        uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LP exact dual ray not infeasible,", 33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" implied_lb: ", 13);
        double v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ub: ", 5);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v11);
      }
    }
    else
    {
      operations_research::sat::LinearProgrammingConstraint::SetImpliedLowerBoundReason((uint64_t)this, &v12, ImpliedLowerBound + ~*((void *)&v12 + 1));
    }
    if (__p[1])
    {
      *(void **)&long long v15 = __p[1];
      operator delete(__p[1]);
    }
    if (v13[0])
    {
      v13[1] = v13[0];
      operator delete(v13[0]);
    }
  }
  else
  {
    if (*off_26AED00C0[0] >= 1
      && (off_26AED00C0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AED00C0, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v12, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1890);
      int v6 = (void *)google::LogMessage::stream((google::LogMessage *)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Isse while computing the exact dual ray reason. Aborting.", 57);
      google::LogMessage::~LogMessage((google::LogMessage *)&v12);
    }
    BOOL v5 = 0;
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  return v5;
}

void sub_23CD24D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  BOOL v5 = *(void **)(v3 - 80);
  if (v5)
  {
    *(void *)(v3 - 72) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinearProgrammingConstraint::ExactLpReasonning(operations_research::sat::LinearProgrammingConstraint *this)
{
  *((void *)this + 2527) = *((void *)this + 2526);
  *((void *)this + 2530) = *((void *)this + 2529);
  *((void *)this + 2533) = *((void *)this + 2532);
  uint64_t v2 = (char *)this + 840;
  unsigned int ProblemNumRows = operations_research::glop::RevisedSimplex::GetProblemNumRows((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  int v84 = 0;
  if (ProblemNumRows)
  {
    unsigned int v4 = ProblemNumRows;
    uint64_t v5 = ProblemNumRows;
    if ((ProblemNumRows & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v6 = 8 * ProblemNumRows;
    uint64_t v7 = (char *)operator new(v6);
    uint64_t v82 = v7;
    int v84 = &v7[8 * v4];
    bzero(v7, 8 * v5);
    uint64_t v8 = 0;
    uint64_t v83 = &v7[v6];
    do
    {
      *(double *)&v7[8 * v8] = -operations_research::glop::RevisedSimplex::GetDualValue((uint64_t)v2, v8);
      ++v8;
    }
    while (v5 != v8);
  }
  else
  {
    uint64_t v7 = 0;
  }
  double v81 = 0.0;
  operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(this, 1, (uint64_t *)&v82, &v81, 62, v80);
  uint64_t v79 = 0;
  if (operations_research::sat::LinearProgrammingConstraint::ComputeNewLinearConstraint(this, (uint64_t *)v80, (uint64_t *)this + 2472, &v79))
  {
    uint64_t v9 = llround(v81);
    if (v9)
    {
      double v10 = (int *)*((void *)this + 35);
      uint64_t v11 = (int *)*((void *)this + 36);
      if (v10 != v11)
      {
        uint64_t v12 = *((void *)this + 2472);
        if (v9 >= 0) {
          unint64_t v13 = v9;
        }
        else {
          unint64_t v13 = -v9;
        }
        int v14 = __clz(v13) ^ 0x3F;
        do
        {
          uint64_t v15 = *(void *)(v10 + 1);
          if (v15 >= 0) {
            unint64_t v16 = *(void *)(v10 + 1);
          }
          else {
            unint64_t v16 = -v15;
          }
          int v17 = 63 - __clz(v16);
          uint64_t v18 = *v10;
          if (!v15) {
            int v17 = 0;
          }
          int v19 = v17 + v14;
          BOOL v20 = __OFSUB__(v19, 61);
          if (v19 > 61)
          {
            if (v15)
            {
              uint64_t v15 = ((v15 ^ (unint64_t)v9) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              unint64_t v21 = v16 * v13;
              if (v19 > 0x3E || v21 >= v15)
              {
                BOOL v20 = __OFSUB__(v15 - 0x7FFFFFFFFFFFFFFFLL, 2);
                if ((unint64_t)(v15 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
                  goto LABEL_38;
                }
              }
              else
              {
                if (v15 >= 0) {
                  uint64_t v15 = v21;
                }
                else {
                  uint64_t v15 = -(uint64_t)v21;
                }
                BOOL v20 = __OFSUB__(v15 - 0x7FFFFFFFFFFFFFFFLL, 2);
                if ((unint64_t)(v15 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
                  goto LABEL_38;
                }
              }
            }
          }
          else
          {
            v15 *= v9;
            BOOL v20 = __OFSUB__(v15 - 0x7FFFFFFFFFFFFFFFLL, 2);
            if ((unint64_t)(v15 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
              goto LABEL_38;
            }
          }
          uint64_t v23 = *(void *)(v12 + 8 * v18);
          uint64_t v24 = v23 + v15;
          uint64_t v25 = (v23 + v15) ^ v15;
          uint64_t v26 = (v23 + v15) ^ v23;
          uint64_t v27 = ((unint64_t)v15 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          if ((v25 & v26) < 0 == v20) {
            uint64_t v27 = v24;
          }
          if ((unint64_t)(v27 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
          {
LABEL_38:
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v75, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1853);
            uint64_t v28 = (void *)google::LogMessage::stream((google::LogMessage *)&v75);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: AddLinearExpressionMultiple(obj_scale, integer_objective_, &tmp_dense_vector_) ", 93);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v75);
          }
          *(void *)(v12 + 8 * v18) = v27;
          v10 += 3;
        }
        while (v10 != v11);
      }
      operations_research::sat::LinearProgrammingConstraint::AdjustNewLinearConstraint(this, (int **)v80, (uint64_t *)this + 2472, &v79);
      *(_OWORD *)long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      *(_OWORD *)uint64_t v76 = 0u;
      operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint((uint64_t)this, (void *)this + 2472, v79, &v75);
      size_t v31 = (_DWORD *)((char *)this + 19993);
      double v32 = (char *)v76[1];
      if (v76[1] >= v77[0])
      {
        unint64_t v35 = v76[0];
        int64_t v36 = (char *)v76[1] - (char *)v76[0];
        int64_t v37 = ((char *)v76[1] - (char *)v76[0]) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v39 = (char *)v77[0] - (char *)v76[0];
        if (((char *)v77[0] - (char *)v76[0]) >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          if (v40 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v41 = operator new(4 * v40);
        }
        else
        {
          int v41 = 0;
        }
        int64_t v42 = &v41[4 * v37];
        _DWORD *v42 = *v31;
        double v33 = v42 + 1;
        if (v32 != v35)
        {
          unint64_t v43 = v32 - v35 - 4;
          if (v43 < 0x2C) {
            goto LABEL_104;
          }
          if ((unint64_t)(v32 - v41 - v36) < 0x20) {
            goto LABEL_104;
          }
          uint64_t v44 = (v43 >> 2) + 1;
          uint64_t v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v46 = &v32[-v45];
          int64_t v42 = (_DWORD *)((char *)v42 - v45);
          unint64_t v47 = &v41[4 * v37 - 16];
          uint64_t v48 = v32 - 16;
          uint64_t v49 = v44 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            _OWORD *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 8;
          }
          while (v49);
          double v32 = v46;
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_104:
            do
            {
              int v51 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *--int64_t v42 = v51;
            }
            while (v32 != v35);
          }
        }
        v76[0] = v42;
        v76[1] = v33;
        v77[0] = &v41[4 * v40];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(_DWORD *)v76[1] = *v31;
        double v33 = v32 + 4;
      }
      v76[1] = v33;
      uint64_t v52 = -v9;
      uint64_t v53 = (unsigned char *)v78;
      if ((unint64_t)v78 < *((void *)&v78 + 1))
      {
        *(void *)long long v78 = v52;
        uint64_t v54 = (uint64_t)(v53 + 8);
        goto LABEL_91;
      }
      double v55 = v77[1];
      uint64_t v56 = v78 - (unint64_t)v77[1];
      uint64_t v57 = (uint64_t)(v78 - (unint64_t)v77[1]) >> 3;
      unint64_t v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int64_t v59 = *((void *)&v78 + 1) - (unint64_t)v77[1];
      if ((uint64_t)(*((void *)&v78 + 1) - (unint64_t)v77[1]) >> 2 > v58) {
        unint64_t v58 = v59 >> 2;
      }
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        if (v60 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v61 = (char *)operator new(8 * v60);
        uint64_t v62 = (uint64_t *)&v61[8 * v57];
        uint64_t v63 = &v61[8 * v60];
        *uint64_t v62 = v52;
        uint64_t v54 = (uint64_t)(v62 + 1);
        int64_t v64 = v53 - v55;
        if (v53 == v55) {
          goto LABEL_89;
        }
      }
      else
      {
        unint64_t v61 = 0;
        uint64_t v62 = (uint64_t *)(8 * v57);
        uint64_t v63 = 0;
        *(void *)(8 * v57) = v52;
        uint64_t v54 = 8 * v57 + 8;
        int64_t v64 = v53 - v55;
        if (v53 == v55)
        {
LABEL_89:
          v77[1] = v62;
          *(void *)&long long v78 = v54;
          *((void *)&v78 + 1) = v63;
          if (v55) {
            operator delete(v55);
          }
LABEL_91:
          *(void *)&long long v78 = v54;
          operations_research::sat::DivideByGCD((uint64_t *)&v75, v30);
          operations_research::sat::LinearProgrammingConstraint::PreventOverflow(this, (operations_research::sat::LinearConstraint *)&v75, 62);
          operator new();
        }
      }
      unint64_t v65 = v64 - 8;
      if (v65 < 0x58) {
        goto LABEL_105;
      }
      if ((unint64_t)(v53 - v61 - v56) < 0x20) {
        goto LABEL_105;
      }
      uint64_t v66 = (v65 >> 3) + 1;
      uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v68 = &v53[-v67];
      uint64_t v62 = (uint64_t *)((char *)v62 - v67);
      unint64_t v69 = &v61[8 * v57 - 16];
      uint64_t v70 = (long long *)(v53 - 16);
      uint64_t v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v72 = *v70;
        *((_OWORD *)v69 - 1) = *(v70 - 1);
        *(_OWORD *)unint64_t v69 = v72;
        v69 -= 32;
        v70 -= 2;
        v71 -= 4;
      }
      while (v71);
      uint64_t v53 = v68;
      if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_105:
        do
        {
          uint64_t v73 = *((void *)v53 - 1);
          v53 -= 8;
          *--uint64_t v62 = v73;
        }
        while (v53 != v55);
      }
      goto LABEL_89;
    }
    if (*off_26AED00B8[0] >= 1
      && (off_26AED00B8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AED00B8, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v75, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1849);
      unint64_t v34 = (void *)google::LogMessage::stream((google::LogMessage *)&v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Overflow during exact LP reasoning. scaling=", 44);
      std::ostream::operator<<();
      goto LABEL_49;
    }
  }
  else if (*off_26AED00B0[0] >= 1 {
         && (off_26AED00B0[0] != &google::kLogSiteUninitialized
  }
          || google::InitVLOG3__((google *)off_26AED00B0, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v75, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1841);
    double v29 = (void *)google::LogMessage::stream((google::LogMessage *)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Issue while computing the exact LP reason. Aborting.", 52);
LABEL_49:
    google::LogMessage::~LogMessage((google::LogMessage *)&v75);
  }
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
  if (v7) {
    operator delete(v7);
  }
  return 1;
}

void sub_23CD25518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (v24)
  {
    *(void *)(v25 - 120) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::ReducedCostStrengtheningDeductions(operations_research::sat::LinearProgrammingConstraint *this, double a2)
{
  *((void *)this + 2530) = *((void *)this + 2529);
  unint64_t v2 = *((void *)this + 2491) - *((void *)this + 2490);
  if ((int)(v2 >> 2) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)((char *)this + 20232);
    size_t v6 = (char *)this + 840;
    uint64_t v7 = (char *)this + 19360;
    uint64_t v8 = (v2 >> 2);
    double v9 = a2 / *((double *)this + 99);
    uint64_t v49 = (char *)this + 19360;
    do
    {
      int v11 = *(_DWORD *)(*((void *)this + 2490) + 4 * v4);
      double ReducedCost = operations_research::glop::RevisedSimplex::GetReducedCost((uint64_t)v6, v4);
      double VariableValue = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)v6, v4);
      if (ReducedCost == 0.0) {
        goto LABEL_5;
      }
      double v14 = operations_research::glop::LpScalingHelper::UnscaleVariableValue((uint64_t)v7, v4, VariableValue + v9 / ReducedCost);
      if (ReducedCost <= 0.000001)
      {
        if (ReducedCost >= -0.000001) {
          goto LABEL_5;
        }
        uint64_t v31 = *(void *)(*(void *)(*((void *)this + 2503) + 40) + 12 * v11);
        double v32 = (double)v31;
        if (v31 < (uint64_t)0x8000000000000003) {
          double v32 = -INFINITY;
        }
        if (v31 > 0x7FFFFFFFFFFFFFFDLL) {
          double v32 = INFINITY;
        }
        double v33 = ceil(v14 + -0.0001);
        if (v33 <= v32) {
          goto LABEL_5;
        }
        *(_DWORD *)int v51 = v11;
        *(void *)&v51[4] = (uint64_t)v33;
        unint64_t v20 = *(void *)v51;
        unint64_t v21 = (unint64_t)(uint64_t)v33 >> 32;
        uint64_t v22 = (_DWORD *)*((void *)this + 2530);
        unint64_t v34 = *((void *)this + 2531);
        if ((unint64_t)v22 >= v34)
        {
          unint64_t v35 = v5;
          int64_t v36 = (_DWORD *)*v5;
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *v5) >> 2);
          unint64_t v38 = v37 + 1;
          if (v37 + 1 > 0x1555555555555555) {
LABEL_56:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (void)v36) >> 2);
          if (2 * v39 > v38) {
            unint64_t v38 = 2 * v39;
          }
          if (v39 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v40 = 0x1555555555555555;
          }
          else {
            unint64_t v40 = v38;
          }
          unint64_t v48 = v40;
          if (v40)
          {
            if (v40 > 0x1555555555555555) {
LABEL_57:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            size_t v30 = (char *)operator new(12 * v40);
          }
          else
          {
            size_t v30 = 0;
          }
          int v41 = &v30[12 * v37];
          *(void *)int v41 = *(void *)v51;
          *((_DWORD *)v41 + 2) = v21;
          int64_t v42 = v41;
          uint64_t v5 = v35;
          if (v22 == v36) {
            goto LABEL_52;
          }
          unint64_t v43 = v48;
          uint64_t v7 = v49;
          do
          {
            uint64_t v46 = *(void *)(v22 - 3);
            v22 -= 3;
            int v47 = v22[2];
            *(void *)(v42 - 12) = v46;
            v42 -= 12;
            *((_DWORD *)v42 + 2) = v47;
          }
          while (v22 != v36);
LABEL_51:
          uint64_t v22 = (_DWORD *)*v5;
LABEL_53:
          *((void *)this + 2529) = v42;
          double v10 = v41 + 12;
          *((void *)this + 2530) = v41 + 12;
          *((void *)this + 2531) = &v30[12 * v43];
          if (v22) {
            operator delete(v22);
          }
          goto LABEL_4;
        }
      }
      else
      {
        int v15 = v11 ^ 1;
        uint64_t v16 = *(void *)(*(void *)(*((void *)this + 2503) + 40) + 12 * (v11 ^ 1));
        double v17 = (double)-v16;
        if (v16 > 0x7FFFFFFFFFFFFFFDLL) {
          double v17 = -INFINITY;
        }
        if (v16 < (uint64_t)0x8000000000000003) {
          double v17 = INFINITY;
        }
        double v18 = floor(v14 + 0.0001);
        if (v18 >= v17) {
          goto LABEL_5;
        }
        if ((uint64_t)v18 >= (uint64_t)0x8000000000000002) {
          unint64_t v19 = -(uint64_t)v18;
        }
        else {
          unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        unint64_t v50 = __PAIR64__(v19, v15);
        unint64_t v20 = __PAIR64__(v19, v15);
        unint64_t v21 = HIDWORD(v19);
        uint64_t v22 = (_DWORD *)*((void *)this + 2530);
        unint64_t v23 = *((void *)this + 2531);
        if ((unint64_t)v22 >= v23)
        {
          uint64_t v24 = v5;
          uint64_t v25 = (_DWORD *)*v5;
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *v5) >> 2);
          unint64_t v27 = v26 + 1;
          if (v26 + 1 > 0x1555555555555555) {
            goto LABEL_56;
          }
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v25) >> 2);
          if (2 * v28 > v27) {
            unint64_t v27 = 2 * v28;
          }
          if (v28 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v29 = 0x1555555555555555;
          }
          else {
            unint64_t v29 = v27;
          }
          unint64_t v48 = v29;
          if (v29)
          {
            if (v29 > 0x1555555555555555) {
              goto LABEL_57;
            }
            size_t v30 = (char *)operator new(12 * v29);
          }
          else
          {
            size_t v30 = 0;
          }
          int v41 = &v30[12 * v26];
          *(void *)int v41 = v50;
          *((_DWORD *)v41 + 2) = v21;
          int64_t v42 = v41;
          uint64_t v5 = v24;
          if (v22 != v25)
          {
            unint64_t v43 = v48;
            uint64_t v7 = v49;
            do
            {
              uint64_t v44 = *(void *)(v22 - 3);
              v22 -= 3;
              int v45 = v22[2];
              *(void *)(v42 - 12) = v44;
              v42 -= 12;
              *((_DWORD *)v42 + 2) = v45;
            }
            while (v22 != v25);
            goto LABEL_51;
          }
LABEL_52:
          unint64_t v43 = v48;
          uint64_t v7 = v49;
          goto LABEL_53;
        }
      }
      *(void *)uint64_t v22 = v20;
      v22[2] = v21;
      double v10 = v22 + 3;
      uint64_t v7 = v49;
LABEL_4:
      *((void *)this + 2530) = v10;
LABEL_5:
      ++v4;
    }
    while (v4 != v8);
  }
}

uint64_t operations_research::sat::LinearProgrammingConstraint::UpdateAverageReducedCosts(operations_research::sat::LinearProgrammingConstraint *this)
{
  unint64_t v2 = (int *)((char *)this + 20452);
  unint64_t v3 = *((void *)this + 2491) - *((void *)this + 2490);
  unint64_t v4 = v3 >> 2;
  uint64_t v5 = (void *)((char *)this + 20480);
  unint64_t v6 = (uint64_t)(*((void *)this + 2561) - *((void *)this + 2560)) >> 3;
  unint64_t v7 = (int)((uint64_t)v3 >> 2);
  if (v7 > v6)
  {
    *(void *)std::vector<int>::value_type __x = 0;
    std::vector<double>::__append((uint64_t)this + 20480, v7 - v6, (uint64_t *)__x);
    __x[0] = 0;
    uint64_t v8 = *((void *)this + 2566);
    unint64_t v9 = (*((void *)this + 2567) - v8) >> 2;
    if (v7 <= v9)
    {
      if (v7 < v9) {
        *((void *)this + 2567) = v8 + 4 * v7;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 20528), v7 - v9, __x);
    }
    *(void *)std::vector<int>::value_type __x = 0;
    uint64_t v10 = *((void *)this + 2557);
    unint64_t v11 = (*((void *)this + 2558) - v10) >> 3;
    if (v7 <= v11)
    {
      if (v7 < v11) {
        *((void *)this + 2558) = v10 + 8 * v7;
      }
    }
    else
    {
      std::vector<double>::__append((uint64_t)this + 20456, v7 - v11, (uint64_t *)__x);
    }
    __x[0] = 0;
    uint64_t v12 = *((void *)this + 2563);
    unint64_t v13 = (*((void *)this + 2564) - v12) >> 2;
    if (v7 <= v13)
    {
      if (v7 < v13) {
        *((void *)this + 2564) = v12 + 4 * v7;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 20504), v7 - v13, __x);
    }
    *(void *)std::vector<int>::value_type __x = 0;
    uint64_t v14 = *((void *)this + 2569);
    unint64_t v15 = (*((void *)this + 2570) - v14) >> 3;
    if (v7 <= v15)
    {
      if (v7 < v15) {
        *((void *)this + 2570) = v14 + 8 * v7;
      }
    }
    else
    {
      std::vector<double>::__append((uint64_t)this + 20552, v7 - v15, (uint64_t *)__x);
    }
  }
  int v16 = *v2 + 1;
  int *v2 = v16;
  unint64_t v17 = (v3 >> 2);
  if (v16 == 10000)
  {
    if ((int)v4 >= 1)
    {
      unint64_t v18 = *((void *)this + 2557);
      unint64_t v19 = *((void *)this + 2563);
      unint64_t v20 = *((void *)this + 2560);
      unint64_t v21 = *((void *)this + 2566);
      if (v17 >= 4)
      {
        unint64_t v22 = 0;
        _CF = v19 >= v21 + 4 * v17 || v21 >= v19 + 4 * v17;
        char v60 = !_CF;
        if ((v20 >= v18 + 8 * v17 || v18 >= v20 + 8 * v17) && (v60 & 1) == 0)
        {
          uint64_t v62 = (v3 >> 2) & 1;
          unint64_t v22 = v17 - v62;
          __asm { FMOV            V0.2D, #0.5 }
          unint64_t v67 = v17 - v62;
          uint64_t v68 = (uint32x2_t *)*((void *)this + 2566);
          unint64_t v69 = (float64x2_t *)*((void *)this + 2560);
          uint64_t v70 = (uint32x2_t *)*((void *)this + 2563);
          uint64_t v71 = (float64x2_t *)*((void *)this + 2557);
          do
          {
            *uint64_t v71 = vmulq_f64(*v71, _Q0);
            ++v71;
            *uint64_t v70 = (uint32x2_t)vshr_n_s32((int32x2_t)vsra_n_u32(*v70, *v70, 0x1FuLL), 1uLL);
            ++v70;
            float64x2_t *v69 = vmulq_f64(*v69, _Q0);
            ++v69;
            uint32x2_t *v68 = (uint32x2_t)vshr_n_s32((int32x2_t)vsra_n_u32(*v68, *v68, 0x1FuLL), 1uLL);
            ++v68;
            v67 -= 2;
          }
          while (v67);
          if (!v62) {
            goto LABEL_25;
          }
        }
      }
      else
      {
        unint64_t v22 = 0;
      }
      unint64_t v23 = (double *)(v18 + 8 * v22);
      uint64_t v24 = (int *)(v19 + 4 * v22);
      uint64_t v25 = (double *)(v20 + 8 * v22);
      unint64_t v26 = (int *)(v21 + 4 * v22);
      unint64_t v27 = v22 - v17;
      do
      {
        *unint64_t v23 = *v23 * 0.5;
        ++v23;
        *v24++ /= 2;
        *uint64_t v25 = *v25 * 0.5;
        ++v25;
        *v26++ /= 2;
        _CF = __CFADD__(v27++, 1);
      }
      while (!_CF);
    }
LABEL_25:
    int *v2 = 0;
  }
  if ((int)v4 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *((void *)this + 2490);
    size_t v30 = (void *)*((void *)this + 2503);
    uint64_t v31 = v30[51];
    do
    {
      uint64_t v33 = *(int *)(v29 + 4 * v28);
      unint64_t v34 = *(int *)(v31 + 4 * v33);
      if (v34 == -1
        || ((*(void *)(*(void *)(v30[117] + 24) + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
      {
        if (*(void *)(v30[5] + 12 * (int)v33) + *(void *)(v30[5] + 12 * (int)(v33 ^ 1)))
        {
          double v35 = *(double *)(*((void *)this + 2544) + 8 * v28);
          if (fabs(v35) >= 0.0001)
          {
            if (v35 >= 0.0)
            {
              *(double *)(*((void *)this + 2557) + 8 * v28) = v35 + *(double *)(*((void *)this + 2557) + 8 * v28);
              double v32 = (char *)this + 20504;
            }
            else
            {
              *(double *)(*v5 + 8 * v28) = *(double *)(*v5 + 8 * v28) - v35;
              double v32 = (char *)this + 20528;
            }
            ++*(_DWORD *)(*(void *)v32 + 4 * v28);
          }
        }
      }
      ++v28;
    }
    while (v17 != v28);
  }
  operations_research::RevRepository<int>::SetLevel((void *)this + 2573, 0);
  operations_research::RevRepository<int>::SetLevel((void *)this + 2573, (*(_DWORD *)(*((void *)this + 2504) + 8) >> 1) & 0x7FFFFFF);
  v2[31] = 0;
  int64_t v36 = (double *)*((void *)this + 2581);
  *((void *)this + 2582) = v36;
  if ((int)v4 >= 1)
  {
    uint64_t v37 = 0;
    unint64_t v38 = (double **)((char *)this + 20648);
    while (1)
    {
      int v40 = *(_DWORD *)(*((void *)this + 2563) + 4 * v37);
      if (v40 < 1)
      {
        double v41 = 0.0;
        int v42 = *(_DWORD *)(*((void *)this + 2566) + 4 * v37);
        if (v42 <= 0)
        {
LABEL_50:
          uint64_t v44 = *((void *)this + 2569);
          double v43 = 0.0;
          goto LABEL_51;
        }
      }
      else
      {
        double v41 = *(double *)(*((void *)this + 2557) + 8 * v37) / (double)v40;
        int v42 = *(_DWORD *)(*((void *)this + 2566) + 4 * v37);
        if (v42 <= 0) {
          goto LABEL_50;
        }
      }
      double v43 = *(double *)(*((void *)this + 2560) + 8 * v37) / (double)v42;
      uint64_t v44 = *((void *)this + 2569);
      if (v40 >= 1)
      {
        if (v43 < v41) {
          double v41 = v43;
        }
        *(double *)(v44 + 8 * v37) = v41;
        if (v41 <= 0.0) {
          goto LABEL_41;
        }
        goto LABEL_52;
      }
LABEL_51:
      double v41 = (v41 + v43) * 0.5;
      *(double *)(v44 + 8 * v37) = v41;
      if (v41 <= 0.0) {
        goto LABEL_41;
      }
LABEL_52:
      double v45 = -v41;
      unint64_t v46 = *((void *)this + 2583);
      if ((unint64_t)v36 >= v46)
      {
        int v47 = *v38;
        uint64_t v48 = ((char *)v36 - (char *)*v38) >> 4;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = v46 - (void)v47;
        if (v50 >> 3 > v49) {
          unint64_t v49 = v50 >> 3;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          if (v51 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v52 = (char *)operator new(16 * v51);
          uint64_t v53 = (uint64_t)&v52[16 * v48];
          *(double *)uint64_t v53 = v45;
          *(_DWORD *)(v53 + 8) = v37;
          uint64_t v54 = v53;
          if (v36 == v47) {
            goto LABEL_66;
          }
          do
          {
LABEL_64:
            *(_OWORD *)(v54 - 16) = *((_OWORD *)v36 - 1);
            v54 -= 16;
            v36 -= 2;
          }
          while (v36 != v47);
          int64_t v36 = *v38;
        }
        else
        {
          uint64_t v52 = 0;
          uint64_t v53 = 16 * v48;
          *(double *)uint64_t v53 = v45;
          *(_DWORD *)(v53 + 8) = v37;
          uint64_t v54 = 16 * v48;
          if (v36 != v47) {
            goto LABEL_64;
          }
        }
LABEL_66:
        *((void *)this + 2581) = v54;
        unint64_t v39 = (double *)(v53 + 16);
        *((void *)this + 2582) = v53 + 16;
        *((void *)this + 2583) = &v52[16 * v51];
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_40;
      }
      *int64_t v36 = v45;
      *((_DWORD *)v36 + 2) = v37;
      unint64_t v39 = v36 + 2;
LABEL_40:
      *((void *)this + 2582) = v39;
      int64_t v36 = v39;
LABEL_41:
      if (++v37 == v17)
      {
        uint64_t v55 = (uint64_t)*v38;
        goto LABEL_70;
      }
    }
  }
  uint64_t v55 = (uint64_t)v36;
LABEL_70:
  unint64_t v56 = 126 - 2 * __clz(((uint64_t)v36 - v55) >> 4);
  if (v36 == (double *)v55) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = v56;
  }
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v55, (unint64_t)v36, (uint64_t)__x, v57, 1);
}

double *std::lower_bound[abi:ne180100]<std::__wrap_iter<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>(double *result, double *a2, uint64_t a3)
{
  if (a2 != result)
  {
    unint64_t v3 = ((char *)a2 - (char *)result) >> 4;
    double v4 = *(double *)a3;
    do
    {
      unint64_t v5 = v3 >> 1;
      unint64_t v6 = &result[2 * (v3 >> 1)];
      if (*v6 < v4 || v4 >= *v6 && SLODWORD(result[2 * v5 + 1]) < *(_DWORD *)(a3 + 8))
      {
        double result = v6 + 2;
        unint64_t v5 = v3 + ~v5;
      }
      unint64_t v3 = v5;
    }
    while (v5);
  }
  return result;
}

char *std::vector<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::insert(char **a1, long long *a2, long long *a3)
{
  unint64_t v6 = (long long *)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (char *)a2 - *a1;
  uint64_t v8 = v7 >> 4;
  unint64_t v9 = (long long *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (long long *)v5)
    {
      *unint64_t v9 = *a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      unint64_t v11 = v9 + 1;
      uint64_t v12 = (long long *)(v5 - 16);
      unint64_t v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v14 = *v12++;
          *(_OWORD *)unint64_t v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        uint64_t v15 = (uint64_t)(v5 - (void)v11) >> 4;
        int v16 = (_DWORD *)(v5 - 8);
        uint64_t v17 = v15;
        do
        {
          *((void *)v16 - 1) = *(void *)&v9[v17 - 1];
          *int v16 = DWORD2(v9[v17 - 1]);
          v16 -= 4;
          --v17;
        }
        while (v17 * 16);
      }
      BOOL v19 = v9 <= a3 && v13 > (char *)a3;
      unint64_t v20 = &a3[v19];
      *(void *)unint64_t v9 = *(void *)v20;
      DWORD2(v6[v8]) = *((_DWORD *)v20 + 2);
    }
    return (char *)v9;
  }
  unint64_t v21 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v21 >> 60) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v23 = v10 - (void)v6;
  if (v23 >> 3 > v21) {
    unint64_t v21 = v23 >> 3;
  }
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v24 = v21;
  }
  if (v24)
  {
    if (v24 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v25 = (char *)operator new(16 * v24);
    unint64_t v26 = &v25[16 * v8];
    unint64_t v27 = &v25[16 * v24];
    if (v8 != v24) {
      goto LABEL_37;
    }
    goto LABEL_27;
  }
  uint64_t v25 = 0;
  unint64_t v26 = (char *)(16 * v8);
  unint64_t v27 = 0;
  if (!v8)
  {
LABEL_27:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v29 = 1;
      }
      else {
        unint64_t v29 = v7 >> 3;
      }
      if (v29 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      size_t v30 = (char *)operator new(16 * v29);
      unint64_t v26 = &v30[16 * (v29 >> 2)];
      unint64_t v27 = &v30[16 * v29];
      if (v25)
      {
        uint64_t v31 = &v30[16 * v29];
        operator delete(v25);
        unint64_t v27 = v31;
        unint64_t v6 = (long long *)*a1;
      }
    }
    else
    {
      unint64_t v28 = v8 + 2;
      if (v8 >= -1) {
        unint64_t v28 = v8 + 1;
      }
      v26 -= 16 * (v28 >> 1);
    }
  }
LABEL_37:
  *(_OWORD *)unint64_t v26 = *a3;
  double v32 = v26 + 16;
  uint64_t v33 = v26;
  if (v6 != v9)
  {
    unint64_t v34 = v9;
    double v35 = v26;
    do
    {
      uint64_t v33 = v35 - 16;
      *((_OWORD *)v35 - 1) = *--v34;
      v35 -= 16;
    }
    while (v34 != v6);
  }
  for (uint64_t i = (long long *)a1[1]; v9 != i; v32 += 16)
  {
    long long v37 = *v9++;
    *(_OWORD *)double v32 = v37;
  }
  unint64_t v38 = *a1;
  *a1 = v33;
  a1[1] = v32;
  a1[2] = v27;
  if (v38) {
    operator delete(v38);
  }
  return v26;
}

void sub_23CD26290(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 4;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::pair<int *,int>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 16 * a2;
  }
}

uint64_t operations_research::sat::LinearProgrammingConstraint::GetImpliedLowerBound(operations_research::sat::LinearProgrammingConstraint *this, const operations_research::sat::LinearConstraint *a2)
{
  unint64_t v2 = *((void *)a2 + 3) - *((void *)a2 + 2);
  if ((int)(v2 >> 2) < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = (v2 >> 2);
  while (1)
  {
    int v6 = *(_DWORD *)(*((void *)a2 + 2) + 4 * v3);
    uint64_t v7 = *(void *)(*((void *)a2 + 5) + 8 * v3);
    uint64_t v26 = v7;
    int v25 = 0;
    if (!v7) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v26, (int)&v25, "coeff != 0");
    }
    uint64_t v8 = *((void *)this + 2503);
    if (v7 <= 0) {
      uint64_t v9 = -*(void *)(*(void *)(v8 + 40) + 12 * (v6 ^ 1));
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v8 + 40) + 12 * v6);
    }
    if (v7 >= 0) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = -v7;
    }
    int v11 = 63 - __clz(v10);
    if (v9 >= 0) {
      unint64_t v12 = v9;
    }
    else {
      unint64_t v12 = -v9;
    }
    int v13 = 63 - __clz(v12);
    if (!v9) {
      int v13 = 0;
    }
    int v14 = v13 + v11;
    BOOL v15 = __OFSUB__(v14, 61);
    if (v14 <= 61)
    {
      uint64_t v16 = v9 * v7;
      unint64_t v17 = v9 * v7 - 0x7FFFFFFFFFFFFFFFLL;
      BOOL v15 = __OFSUB__(v17, 2);
      if (v17 < 2) {
        return 0x8000000000000002;
      }
      goto LABEL_26;
    }
    uint64_t v16 = 0;
    if (!v9) {
      goto LABEL_26;
    }
    uint64_t v16 = ((v9 ^ (unint64_t)v7) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v18 = v12 * v10;
    if (v14 <= 0x3E && v18 < v16) {
      break;
    }
    BOOL v15 = __OFSUB__(v16 - 0x7FFFFFFFFFFFFFFFLL, 2);
    if ((unint64_t)(v16 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
      return 0x8000000000000002;
    }
LABEL_26:
    uint64_t v20 = v16 + v4;
    uint64_t v21 = (v16 + v4) ^ v16;
    uint64_t v22 = (v16 + v4) ^ v4;
    uint64_t v23 = ((unint64_t)v16 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if ((v21 & v22) < 0 != v15) {
      uint64_t v4 = v23;
    }
    else {
      uint64_t v4 = v20;
    }
    if ((unint64_t)(v4 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL) {
      return 0x8000000000000002;
    }
    if (v5 == ++v3) {
      return v4;
    }
  }
  if (v16 >= 0) {
    uint64_t v16 = v12 * v10;
  }
  else {
    uint64_t v16 = -(uint64_t)v18;
  }
  BOOL v15 = __OFSUB__(v16 - 0x7FFFFFFFFFFFFFFFLL, 2);
  if ((unint64_t)(v16 - 0x7FFFFFFFFFFFFFFFLL) >= 2) {
    goto LABEL_26;
  }
  return 0x8000000000000002;
}

void sub_23CD264D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::LinearProgrammingConstraint::PreventOverflow(operations_research::sat::LinearProgrammingConstraint *this, operations_research::sat::LinearConstraint *a2, int a3)
{
  uint64_t v5 = (std::vector<int> *)((char *)a2 + 16);
  int v6 = (_DWORD *)*((void *)a2 + 2);
  uint64_t v7 = *((void *)a2 + 1);
  double v8 = (double)-v7;
  if (v7 > 0x7FFFFFFFFFFFFFFDLL) {
    double v8 = -INFINITY;
  }
  if (v7 < (uint64_t)0x8000000000000003) {
    double v8 = INFINITY;
  }
  double v9 = fmin(v8, 0.0);
  double v10 = fmax(v8, 0.0);
  uint64_t v11 = *((void *)a2 + 3) - (void)v6;
  unint64_t v12 = v11 >> 2;
  if ((int)(v11 >> 2) >= 1)
  {
    int v13 = (uint64_t *)*((void *)a2 + 5);
    uint64_t v14 = ((unint64_t)v11 >> 2);
    uint64_t v15 = *(void *)(*((void *)this + 2503) + 40);
    uint64_t v16 = (int *)*((void *)a2 + 2);
    do
    {
      int v18 = *v16++;
      int v17 = v18;
      uint64_t v20 = *v13++;
      uint64_t v19 = v20;
      double v21 = (double)v20;
      double v22 = -INFINITY;
      if (v20 < (uint64_t)0x8000000000000003) {
        double v21 = -INFINITY;
      }
      if (v19 > 0x7FFFFFFFFFFFFFFDLL) {
        double v21 = INFINITY;
      }
      uint64_t v23 = *(void *)(v15 + 12 * v17);
      double v24 = (double)v23;
      if (v23 < (uint64_t)0x8000000000000003) {
        double v24 = -INFINITY;
      }
      uint64_t v25 = *(void *)(v15 + 12 * (v17 ^ 1));
      if (v23 > 0x7FFFFFFFFFFFFFFDLL) {
        double v24 = INFINITY;
      }
      if (v25 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v22 = (double)-v25;
      }
      double v26 = v21 * v24;
      if (v25 < (uint64_t)0x8000000000000003) {
        double v22 = INFINITY;
      }
      double v27 = v21 * v22;
      if (v27 >= v26) {
        double v28 = v26;
      }
      else {
        double v28 = v27;
      }
      double v9 = v9 + fmin(v28, 0.0);
      if (v26 >= v27) {
        double v27 = v26;
      }
      double v10 = v10 + fmax(v27, 0.0);
      --v14;
    }
    while (v14);
  }
  double v29 = -v9;
  if (v10 < v29) {
    double v10 = v29;
  }
  uint64_t v30 = vcvtpd_s64_f64(ldexp(v10, -a3));
  if (v30 >= 2)
  {
    if ((int)v12 < 1)
    {
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      int v31 = 0;
    }
    else
    {
      int v31 = 0;
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      unint64_t v34 = (uint64_t *)*((void *)a2 + 5);
      uint64_t v35 = *(void *)(*((void *)this + 2503) + 144);
      uint64_t v36 = ((unint64_t)v11 >> 2);
      long long v37 = v6;
      unint64_t v38 = v34;
      do
      {
        uint64_t v39 = *v38++;
        uint64_t v40 = v39 / v30 - (v39 / v30 * v30 > v39);
        unsigned long long v41 = v39 - v40 * (unsigned __int128)(unint64_t)v30;
        LODWORD(v39) = *v37++;
        int v42 = v39;
        uint64_t v43 = *(void *)(v35 + 20 * (int)v39);
        uint64_t v44 = (v41 * v43) >> 64;
        uint64_t v45 = v41 * v43;
        BOOL v46 = __CFADD__(v45, v32);
        v32 += v45;
        v33 += v46 + v44;
        if (v40)
        {
          v6[v31] = v42;
          v34[v31++] = v40;
        }
        --v36;
      }
      while (v36);
    }
    unint64_t v47 = v31;
    if (v31 <= v12)
    {
      if (v31 < v12) {
        *((void *)a2 + 3) = &v6[v31];
      }
    }
    else
    {
      std::vector<int>::__append(v5, v31 - v12);
    }
    uint64_t v48 = *((void *)a2 + 5);
    unint64_t v49 = (*((void *)a2 + 6) - v48) >> 3;
    if (v47 <= v49)
    {
      if (v47 < v49) {
        *((void *)a2 + 6) = v48 + 8 * v47;
      }
    }
    else
    {
      std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)a2 + 40, v47 - v49);
    }
    signed long long v50 = *((uint64_t *)a2 + 1) - __PAIR128__(v33, v32);
    uint64_t v51 = __divti3();
    *((void *)a2 + 1) = v51 - (v50 < (__int128)(__PAIR128__(v52, v51) * v30));
  }
}

void operations_research::sat::LinearProgrammingConstraint::SetImpliedLowerBoundReason(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v79 = 0;
  uint64_t v80 = a3;
  uint64_t v4 = (char **)(a1 + 20208);
  *(void *)(a1 + 20216) = *(void *)(a1 + 20208);
  long long __p = 0;
  long long v78 = 0;
  unint64_t v5 = a2[3] - a2[2];
  if ((int)(v5 >> 2) >= 1)
  {
    uint64_t v6 = 0;
    long long v72 = (char **)(a1 + 20208);
    uint64_t v73 = (v5 >> 2);
    while (1)
    {
      while (1)
      {
        int v7 = *(_DWORD *)(a2[2] + 4 * v6);
        uint64_t v8 = *(void *)(a2[5] + 8 * v6);
        uint64_t v76 = v8;
        *(_DWORD *)long long v75 = 0;
        if (!v8) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v76, (int)v75, "coeff != 0");
        }
        if (v8 <= 0) {
          break;
        }
        double v9 = v78;
        if (v78 < v79)
        {
          *(void *)long long v78 = v8;
          uint64_t v10 = (uint64_t)(v9 + 8);
          goto LABEL_29;
        }
        uint64_t v11 = (char *)__p;
        int64_t v12 = v78 - (unsigned char *)__p;
        uint64_t v13 = (v78 - (unsigned char *)__p) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v79 - (unsigned char *)__p;
        if ((v79 - (unsigned char *)__p) >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v17 = (char *)operator new(8 * v16);
          int v18 = (uint64_t *)&v17[8 * v13];
          *int v18 = v8;
          uint64_t v10 = (uint64_t)(v18 + 1);
          if (v9 == v11) {
            goto LABEL_26;
          }
LABEL_17:
          unint64_t v19 = v9 - 8 - v11;
          if (v19 < 0x58) {
            goto LABEL_101;
          }
          if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
            goto LABEL_101;
          }
          uint64_t v20 = (v19 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          double v22 = &v9[-v21];
          int v18 = (uint64_t *)((char *)v18 - v21);
          uint64_t v23 = &v17[8 * v13 - 16];
          double v24 = v9 - 16;
          uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
            *(_OWORD *)uint64_t v23 = v26;
            v23 -= 32;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          double v9 = v22;
          if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_101:
            do
            {
              uint64_t v27 = *((void *)v9 - 1);
              v9 -= 8;
              *--int v18 = v27;
            }
            while (v9 != v11);
          }
          goto LABEL_26;
        }
        int v17 = 0;
        int v18 = (uint64_t *)(8 * v13);
        *(void *)(8 * v13) = v8;
        uint64_t v10 = 8 * v13 + 8;
        if (v9 != v11) {
          goto LABEL_17;
        }
LABEL_26:
        long long __p = v18;
        long long v78 = (char *)v10;
        uint64_t v79 = &v17[8 * v16];
        if (v11) {
          operator delete(v11);
        }
        uint64_t v4 = v72;
LABEL_29:
        long long v78 = (char *)v10;
        unint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 20024) + 40) + 12 * v7);
        *(_DWORD *)long long v75 = v7;
        *(void *)&v75[4] = v28;
        uint64_t v29 = *(void *)v75;
        unint64_t v30 = HIDWORD(v28);
        int v31 = *(char **)(a1 + 20216);
        unint64_t v32 = *(void *)(a1 + 20224);
        if ((unint64_t)v31 < v32) {
          goto LABEL_3;
        }
        unint64_t v33 = *v4;
        unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *v4) >> 2);
        unint64_t v35 = v34 + 1;
        if (v34 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (void)v33) >> 2);
        if (2 * v36 > v35) {
          unint64_t v35 = 2 * v36;
        }
        if (v36 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v37 = 0x1555555555555555;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          if (v37 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v38 = (char *)operator new(12 * v37);
        }
        else
        {
          unint64_t v38 = 0;
        }
        uint64_t v39 = &v38[12 * v34];
        *(void *)uint64_t v39 = *(void *)v75;
        *((_DWORD *)v39 + 2) = v30;
        uint64_t v40 = v39;
        if (v31 == v33) {
          goto LABEL_80;
        }
        do
        {
          uint64_t v41 = *(void *)(v31 - 12);
          v31 -= 12;
          int v42 = *((_DWORD *)v31 + 2);
          *(void *)(v40 - 12) = v41;
          v40 -= 12;
          *((_DWORD *)v40 + 2) = v42;
        }
        while (v31 != v33);
LABEL_79:
        int v31 = *v4;
LABEL_80:
        *(void *)(a1 + 20208) = v40;
        uint64_t v71 = v39 + 12;
        *(void *)(a1 + 20216) = v39 + 12;
        *(void *)(a1 + 20224) = &v38[12 * v37];
        if (v31) {
          operator delete(v31);
        }
        *(void *)(a1 + 20216) = v71;
        if (++v6 == v73)
        {
LABEL_83:
          a3 = v80;
          goto LABEL_84;
        }
      }
      uint64_t v43 = -v8;
      uint64_t v44 = v78;
      if (v78 < v79)
      {
        *(void *)long long v78 = v43;
        uint64_t v45 = (uint64_t)(v44 + 8);
        uint64_t v4 = v72;
        goto LABEL_66;
      }
      BOOL v46 = (char *)__p;
      int64_t v47 = v78 - (unsigned char *)__p;
      uint64_t v48 = (v78 - (unsigned char *)__p) >> 3;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v50 = v79 - (unsigned char *)__p;
      if ((v79 - (unsigned char *)__p) >> 2 > v49) {
        unint64_t v49 = v50 >> 2;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        if (v51 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v52 = (char *)operator new(8 * v51);
        uint64_t v53 = (uint64_t *)&v52[8 * v48];
        *uint64_t v53 = v43;
        uint64_t v45 = (uint64_t)(v53 + 1);
        if (v44 != v46)
        {
LABEL_55:
          unint64_t v54 = v44 - 8 - v46;
          uint64_t v4 = v72;
          if (v54 < 0x58) {
            goto LABEL_102;
          }
          if ((unint64_t)(v44 - &v52[v47]) < 0x20) {
            goto LABEL_102;
          }
          uint64_t v55 = (v54 >> 3) + 1;
          uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v57 = &v44[-v56];
          uint64_t v53 = (uint64_t *)((char *)v53 - v56);
          unint64_t v58 = &v52[8 * v48 - 16];
          int64_t v59 = v44 - 16;
          uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v61 = *(_OWORD *)v59;
            *((_OWORD *)v58 - 1) = *((_OWORD *)v59 - 1);
            *(_OWORD *)unint64_t v58 = v61;
            v58 -= 32;
            v59 -= 32;
            v60 -= 4;
          }
          while (v60);
          uint64_t v44 = v57;
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_102:
            do
            {
              uint64_t v62 = *((void *)v44 - 1);
              v44 -= 8;
              *--uint64_t v53 = v62;
            }
            while (v44 != v46);
          }
          goto LABEL_64;
        }
      }
      else
      {
        unint64_t v52 = 0;
        uint64_t v53 = (uint64_t *)(8 * v48);
        *(void *)(8 * v48) = v43;
        uint64_t v45 = 8 * v48 + 8;
        if (v44 != v46) {
          goto LABEL_55;
        }
      }
      uint64_t v4 = v72;
LABEL_64:
      long long __p = v53;
      long long v78 = (char *)v45;
      uint64_t v79 = &v52[8 * v51];
      if (v46) {
        operator delete(v46);
      }
LABEL_66:
      long long v78 = (char *)v45;
      unint64_t v63 = *(void *)(*(void *)(*(void *)(a1 + 20024) + 40) + 12 * (v7 ^ 1));
      *(_DWORD *)long long v75 = v7 ^ 1;
      *(void *)&v75[4] = v63;
      uint64_t v29 = *(void *)v75;
      unint64_t v30 = HIDWORD(v63);
      int v31 = *(char **)(a1 + 20216);
      unint64_t v64 = *(void *)(a1 + 20224);
      if ((unint64_t)v31 >= v64)
      {
        unint64_t v65 = *v4;
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *v4) >> 2);
        unint64_t v67 = v66 + 1;
        if (v66 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (void)v65) >> 2);
        if (2 * v68 > v67) {
          unint64_t v67 = 2 * v68;
        }
        if (v68 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v37 = 0x1555555555555555;
        }
        else {
          unint64_t v37 = v67;
        }
        if (v37)
        {
          if (v37 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v38 = (char *)operator new(12 * v37);
        }
        else
        {
          unint64_t v38 = 0;
        }
        uint64_t v39 = &v38[12 * v66];
        *(void *)uint64_t v39 = *(void *)v75;
        *((_DWORD *)v39 + 2) = v30;
        uint64_t v40 = v39;
        if (v31 == v65) {
          goto LABEL_80;
        }
        do
        {
          uint64_t v69 = *(void *)(v31 - 12);
          v31 -= 12;
          int v70 = *((_DWORD *)v31 + 2);
          *(void *)(v40 - 12) = v69;
          v40 -= 12;
          *((_DWORD *)v40 + 2) = v70;
        }
        while (v31 != v65);
        goto LABEL_79;
      }
LABEL_3:
      *(void *)int v31 = v29;
      *((_DWORD *)v31 + 2) = v30;
      *(void *)(a1 + 20216) = v31 + 12;
      if (++v6 == v73) {
        goto LABEL_83;
      }
    }
  }
LABEL_84:
  *(_DWORD *)long long v75 = 0;
  if (a3 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v80, (int)v75, "slack >= 0");
  }
  if (a3 > 0) {
    operations_research::sat::IntegerTrail::RelaxLinearReason(*(std::vector<int> **)(a1 + 20024), a3, (uint64_t)__p, (v78 - (unsigned char *)__p) >> 3, v4);
  }
  operations_research::sat::IntegerTrail::RemoveLevelZeroBounds(*(void *)(a1 + 20024), (int **)v4);
  if (__p)
  {
    long long v78 = (char *)__p;
    operator delete(__p);
  }
}

void sub_23CD26E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD26E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::LinearProgrammingConstraint::AdjustNewLinearConstraint(void *result, int **a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = *(void *)(v4 + 1);
      if (!v7) {
        goto LABEL_3;
      }
      int v8 = *v4;
      uint64_t v9 = v6[39];
      uint64_t v10 = *(void *)(v9 + 40 * *v4);
      uint64_t v11 = *(void *)(v9 + 40 * *v4 + 8);
      if (v11 == v10)
      {
        uint64_t v12 = 1000000000000000000;
        uint64_t v13 = 1000000000000000000;
        if (v7 > 0) {
          goto LABEL_13;
        }
      }
      else
      {
        if (v7 >= 1)
        {
          if ((unint64_t)v7 >= 0xDE0B6B3A7640000) {
            uint64_t v13 = 1000000000000000000;
          }
          else {
            uint64_t v13 = *(void *)(v4 + 1);
          }
          uint64_t v12 = 1000000000000000000;
LABEL_13:
          if (v11) {
            goto LABEL_19;
          }
          goto LABEL_37;
        }
        if ((unint64_t)-v7 < 0xDE0B6B3A7640000) {
          uint64_t v12 = -v7;
        }
        else {
          uint64_t v12 = 1000000000000000000;
        }
      }
      uint64_t v11 = *(void *)(v9 + 40 * v8);
      uint64_t v13 = 1000000000000000000;
      if (v10)
      {
LABEL_19:
        uint64_t v14 = *a4;
        double result = (void *)v11;
        if (v11 >= 0) {
          unint64_t v15 = v11;
        }
        else {
          unint64_t v15 = -v11;
        }
        BOOL v16 = v14 <= 0;
        if (v14 < 0) {
          uint64_t v14 = -v14;
        }
        int v17 = !v16;
        unint64_t v18 = (1000000000000000000 - v14) & ~((1000000000000000000 - v14) >> 63);
        uint64_t v19 = (__PAIR128__(v18 / v15, v18) - v18 / v15 * v15) >> 64;
        int64_t v20 = 0xDE0B6B3A7640000 / v15 - (0xDE0B6B3A7640000 / v15 * v15 > 0xDE0B6B3A7640000);
        if (((v11 > 0) ^ v17))
        {
          if (v19 < v13) {
            uint64_t v13 = v19;
          }
          if (v20 < v12) {
            uint64_t v12 = v20;
          }
        }
        else
        {
          if (v19 < v12) {
            uint64_t v12 = v19;
          }
          if (v20 < v13) {
            uint64_t v13 = v20;
          }
        }
      }
LABEL_37:
      double v21 = (double)v11;
      if (v11 < (uint64_t)0x8000000000000003) {
        double v21 = -INFINITY;
      }
      if (v11 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v22 = v21;
      }
      else {
        double v22 = INFINITY;
      }
      uint64_t v23 = v9 + 40 * v8;
      double v24 = *(int **)(v23 + 16);
      uint64_t v25 = *(int **)(v23 + 24);
      for (double i = v22; v24 != v25; v24 += 3)
      {
        while (1)
        {
          uint64_t v48 = *v24;
          uint64_t v49 = *(void *)(v24 + 1);
          uint64_t v77 = v49;
          if (v49 >= 0) {
            unint64_t v50 = v49;
          }
          else {
            unint64_t v50 = -v49;
          }
          int v76 = 0;
          if (!v49) {
            google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v77, (int)&v76, "coeff != 0");
          }
          int v51 = *(_DWORD *)(v6[2490] + 4 * v48);
          uint64_t v52 = *(void *)(v6[2503] + 40);
          uint64_t v53 = *(void *)(v52 + 12 * v51);
          uint64_t v54 = *(void *)(v52 + 12 * (v51 ^ 1));
          uint64_t v55 = -v54;
          uint64_t v56 = *(void *)(*a3 + 8 * v48);
          if (v56) {
            break;
          }
          BOOL v57 = 0xDE0B6B3A7640000 / v50 * v50 > 0xDE0B6B3A7640000;
          uint64_t v58 = 0xDE0B6B3A7640000 / v50 - v57;
          if (v58 < v12) {
            uint64_t v12 = 0xDE0B6B3A7640000 / v50 - v57;
          }
          if (v58 < v13) {
            uint64_t v13 = 0xDE0B6B3A7640000 / v50 - v57;
          }
          double v59 = (double)v77;
          double v60 = -INFINITY;
          if (v77 >= (uint64_t)0x8000000000000003) {
            double v61 = (double)v77;
          }
          else {
            double v61 = -INFINITY;
          }
          if (v54 <= 0x7FFFFFFFFFFFFFFDLL) {
            double v62 = (double)v55;
          }
          else {
            double v62 = -INFINITY;
          }
          if (v54 < (uint64_t)0x8000000000000003) {
            double v62 = INFINITY;
          }
          double v63 = i - v61 * v62;
          double v64 = (double)v53;
          if (v53 >= (uint64_t)0x8000000000000003) {
            double v65 = (double)v53;
          }
          else {
            double v65 = -INFINITY;
          }
          if (v53 > 0x7FFFFFFFFFFFFFFDLL) {
            double v65 = INFINITY;
          }
          double v66 = v22 - v61 * v65;
          if ((unint64_t)v77 > 0x7FFFFFFFFFFFFFFDLL) {
            double v59 = INFINITY;
          }
          if (v53 < (uint64_t)0x8000000000000003) {
            double v64 = -INFINITY;
          }
          if (v53 > 0x7FFFFFFFFFFFFFFDLL) {
            double v64 = INFINITY;
          }
          double v67 = i - v59 * v64;
          if (v54 <= 0x7FFFFFFFFFFFFFFDLL) {
            double v60 = (double)v55;
          }
          if (v54 < (uint64_t)0x8000000000000003) {
            double v60 = INFINITY;
          }
          double v68 = v22 - v59 * v60;
          if (v77 >= 1) {
            double v22 = v68;
          }
          else {
            double v22 = v66;
          }
          if (v77 >= 1) {
            double i = v67;
          }
          else {
            double i = v63;
          }
          v24 += 3;
          if (v24 == v25) {
            goto LABEL_43;
          }
        }
        BOOL v31 = v56 <= 0;
        if (v56 >= 0) {
          unint64_t v32 = *(void *)(*a3 + 8 * v48);
        }
        else {
          unint64_t v32 = -v56;
        }
        BOOL v33 = v56 > 0;
        if (v31) {
          uint64_t v34 = v55;
        }
        else {
          uint64_t v34 = v53;
        }
        if (v32 >= 0x721F494C589BFFFELL) {
          uint64_t v35 = 0x721F494C589BFFFELL;
        }
        else {
          uint64_t v35 = v32;
        }
        uint64_t v36 = v35 + 1000000000000000000;
        if (v53 == v55) {
          unint64_t v37 = v36;
        }
        else {
          unint64_t v37 = v32;
        }
        uint64_t v38 = (__PAIR128__(v37 / v50, v37) - v37 / v50 * v50) >> 64;
        unint64_t v39 = (1000000000000000000 - v32) & ~((uint64_t)(1000000000000000000 - v32) >> 63);
        uint64_t v40 = (__PAIR128__(v39 / v50, v39) - v39 / v50 * v50) >> 64;
        int v41 = v33 ^ (v77 > 0);
        BOOL v42 = v41 == 0;
        if (v41) {
          uint64_t v43 = v40;
        }
        else {
          uint64_t v43 = v38;
        }
        if (v42) {
          uint64_t v38 = v40;
        }
        if (v43 < v13) {
          uint64_t v13 = v43;
        }
        double v44 = (double)v77;
        if (v38 < v12) {
          uint64_t v12 = v38;
        }
        double v45 = -INFINITY;
        if (v77 < (uint64_t)0x8000000000000003) {
          double v44 = -INFINITY;
        }
        if (v77 > 0x7FFFFFFFFFFFFFFDLL) {
          double v44 = INFINITY;
        }
        if (v34 >= (uint64_t)0x8000000000000003) {
          double v45 = (double)v34;
        }
        if (v34 > 0x7FFFFFFFFFFFFFFDLL) {
          double v45 = INFINITY;
        }
        double v46 = i - v44 * v45;
        double v47 = v22 - v44 * v45;
        if (v34)
        {
          double v22 = v47;
          double i = v46;
        }
      }
LABEL_43:
      uint64_t v27 = v12 & ~(v12 >> 63);
      BOOL v29 = i > -1.0 || v12 < 1;
      if (v22 >= 1.0 && v13 > 0)
      {
        if (v29) {
          goto LABEL_136;
        }
        double v69 = (double)v13;
        double v70 = INFINITY;
        if ((unint64_t)v13 > 0x7FFFFFFFFFFFFFFDLL) {
          double v69 = INFINITY;
        }
        double v71 = fabs(v22 * v69);
        if (v12 <= 0x7FFFFFFFFFFFFFFDLL) {
          double v70 = (double)v12;
        }
        if (v71 > fabs(i * v70)) {
LABEL_136:
        }
          uint64_t v27 = -v13;
LABEL_137:
        *(void *)(v4 + 1) += v27;
        *a4 += v27 * v11;
        uint64_t v72 = v6[39] + 40 * v8;
        uint64_t v73 = *(int **)(v72 + 16);
        uint64_t v74 = *(int **)(v72 + 24);
        if (v73 != v74)
        {
          uint64_t v75 = *a3;
          do
          {
            *(void *)(v75 + 8 * *v73) += *(void *)(v73 + 1) * v27;
            v73 += 3;
          }
          while (v73 != v74);
        }
        goto LABEL_3;
      }
      if (!v29) {
        goto LABEL_137;
      }
LABEL_3:
      v4 += 3;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_23CD273D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SeparateSubtourInequalities(uint64_t a1, uint64_t *a2, void *a3, void *a4, uint64_t *a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)a1 < 3) {
    return;
  }
  uint64_t v11 = a1;
  uint64_t v13 = *a4;
  uint64_t v12 = a4[1];
  unint64_t v343 = 0;
  int64_t v344 = 0;
  unint64_t v342 = 0;
  uint64_t v14 = v12 - v13;
  if (v12 == v13)
  {
    unint64_t v15 = 0;
  }
  else
  {
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = (char *)operator new(2 * v14);
    unint64_t v342 = v15;
    int64_t v344 = &v15[8 * (v14 >> 2)];
    bzero(v15, 2 * v14);
    unint64_t v343 = &v15[2 * v14];
  }
  uint64_t v339 = 0;
  long long v340 = 0;
  int v341 = 0;
  uint64_t v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a10);
  uint64_t v18 = *a4;
  uint64_t v17 = a4[1];
  BOOL v308 = a4;
  uint64_t v309 = v11;
  if (v17 != *a4)
  {
    uint64_t v19 = v16;
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    double v22 = 0;
    uint64_t v23 = 0;
    double v24 = 0;
    uint64_t v25 = 0;
    long long v26 = 0;
    size_t v322 = (size_t)v340;
    uint64_t v317 = v16;
    while (1)
    {
      long long __p = (int *)v23;
      uint64_t v29 = *(int *)(v18 + 4 * v21);
      uint64_t v30 = *(void *)(v19 + 160);
      unint64_t v31 = (unint64_t)(*(void *)(v19 + 168) - v30) >> 2;
      if ((int)v29 >= (int)v31 || (uint64_t v32 = *(int *)(v30 + 4 * v29), v32 == -1))
      {
        int v34 = v29 ^ 1;
        if (v34 >= (int)v31) {
          int v35 = -1;
        }
        else {
          int v35 = *(_DWORD *)(v30 + 4 * v34);
        }
        uint64_t v23 = (char *)__p;
        double v33 = 1.0 - *(double *)(*a5 + 8 * v35);
        *(double *)&v15[8 * v21] = v33;
        if (v33 < 0.000001) {
          goto LABEL_10;
        }
      }
      else
      {
        double v33 = *(double *)(*a5 + 8 * v32);
        uint64_t v23 = (char *)__p;
        *(double *)&v15[8 * v21] = v33;
        if (v33 < 0.000001) {
          goto LABEL_10;
        }
      }
      uint64_t v36 = v24;
      int v37 = *(_DWORD *)(*a2 + 4 * v21);
      int v38 = *(_DWORD *)(*a3 + 4 * v21);
      if (v36 < (double *)v25)
      {
        *(_DWORD *)uint64_t v36 = v37;
        *((_DWORD *)v36 + 1) = v38;
        v36[1] = v33;
        double v24 = v36 + 2;
        if (v20 >= (unint64_t)v22) {
          goto LABEL_36;
        }
        goto LABEL_8;
      }
      unint64_t v39 = v22;
      uint64_t v40 = ((char *)v36 - v23) >> 4;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60)
      {
        long long v340 = (int *)v322;
        int v341 = v22;
        uint64_t v339 = v26;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v42 = v15;
      uint64_t v43 = v36;
      if ((v25 - v23) >> 3 > v41) {
        unint64_t v41 = (v25 - v23) >> 3;
      }
      if ((unint64_t)(v25 - v23) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v41;
      }
      if (v44)
      {
        if (v44 >> 60)
        {
          long long v340 = (int *)v322;
          int v341 = v39;
          uint64_t v339 = v26;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        double v45 = (char *)operator new(16 * v44);
        uint64_t v23 = (char *)__p;
        uint64_t v46 = (uint64_t)&v45[16 * v40];
        *(_DWORD *)uint64_t v46 = v37;
        *(_DWORD *)(v46 + 4) = v38;
        *(double *)(v46 + 8) = v33;
        if (v43 == (double *)__p)
        {
LABEL_51:
          uint64_t v49 = (int *)v46;
          unint64_t v15 = v42;
          uint64_t v25 = &v45[16 * v44];
          double v24 = (double *)(v46 + 16);
          double v22 = v39;
          if (v23) {
            goto LABEL_34;
          }
          goto LABEL_35;
        }
      }
      else
      {
        double v45 = 0;
        uint64_t v46 = 16 * v40;
        *(_DWORD *)uint64_t v46 = v37;
        *(_DWORD *)(v46 + 4) = v38;
        *(double *)(v46 + 8) = v33;
        if (v36 == (double *)v23) {
          goto LABEL_51;
        }
      }
      double v47 = v43;
      uint64_t v48 = v46;
      unint64_t v15 = v42;
      do
      {
        uint64_t v49 = (int *)(v48 - 16);
        *(_OWORD *)(v48 - 16) = *((_OWORD *)v47 - 1);
        v47 -= 2;
        v48 -= 16;
      }
      while (v47 != (double *)v23);
      uint64_t v25 = &v45[16 * v44];
      double v24 = (double *)(v46 + 16);
      double v22 = v39;
      if (v23) {
LABEL_34:
      }
        operator delete(v23);
LABEL_35:
      uint64_t v23 = (char *)v49;
      uint64_t v19 = v317;
      if (v20 >= (unint64_t)v22)
      {
LABEL_36:
        uint64_t v50 = (uint64_t)(v20 - (void)v26) >> 4;
        unint64_t v51 = v50 + 1;
        __pa = (int *)v23;
        if ((unint64_t)(v50 + 1) >> 60)
        {
          long long v340 = (int *)v322;
          int v341 = v22;
          uint64_t v339 = v26;
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v52 = v24;
        if ((v22 - (unsigned char *)v26) >> 3 > v51) {
          unint64_t v51 = (v22 - (unsigned char *)v26) >> 3;
        }
        if ((unint64_t)(v22 - (unsigned char *)v26) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          if (v53 >> 60)
          {
            long long v340 = (int *)v322;
            int v341 = v22;
            uint64_t v339 = v26;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v54 = (char *)operator new(16 * v53);
          uint64_t v23 = (char *)__pa;
          uint64_t v55 = (uint64_t)&v54[16 * v50];
          *(double *)uint64_t v55 = v33;
          *(_DWORD *)(v55 + 8) = v21;
          if ((void *)v20 != v26)
          {
LABEL_45:
            uint64_t v56 = v55;
            do
            {
              BOOL v57 = (void *)(v56 - 16);
              *(_OWORD *)(v56 - 16) = *(_OWORD *)(v20 - 16);
              v20 -= 16;
              v56 -= 16;
            }
            while ((void *)v20 != v26);
            double v22 = &v54[16 * v53];
            unint64_t v20 = v55 + 16;
            if (v26)
            {
LABEL_48:
              operator delete(v26);
              uint64_t v23 = (char *)__pa;
            }
LABEL_49:
            long long v26 = v57;
            uint64_t v27 = v308;
            double v24 = v52;
            goto LABEL_9;
          }
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v55 = 16 * v50;
          *(double *)uint64_t v55 = v33;
          *(_DWORD *)(v55 + 8) = v21;
          if ((void *)v20 != v26) {
            goto LABEL_45;
          }
        }
        BOOL v57 = (void *)v55;
        double v22 = &v54[16 * v53];
        unint64_t v20 = v55 + 16;
        if (v26) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
LABEL_8:
      *(double *)unint64_t v20 = v33;
      *(_DWORD *)(v20 + 8) = v21;
      v20 += 16;
      uint64_t v27 = v308;
LABEL_9:
      unint64_t v28 = v27;
      uint64_t v18 = *v27;
      uint64_t v17 = v28[1];
      size_t v322 = v20;
LABEL_10:
      if (++v21 >= (unint64_t)((v17 - v18) >> 2))
      {
        __pb = (double *)v23;
        long long v340 = (int *)v322;
        int v341 = v22;
        uint64_t v11 = v309;
        goto LABEL_58;
      }
    }
  }
  unint64_t v20 = 0;
  long long v26 = 0;
  double v24 = 0;
  __pb = 0;
LABEL_58:
  unint64_t v58 = 126 - 2 * __clz((uint64_t)(v20 - (void)v26) >> 4);
  uint64_t v339 = v26;
  if ((void *)v20 == v26) {
    uint64_t v59 = 0;
  }
  else {
    uint64_t v59 = v58;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*,false>((uint64_t)v26, v20, (uint64_t)&v351, v59, 1);
  size_t v60 = 4 * v11;
  double v61 = (int32x4_t *)operator new(v60);
  double v62 = &v61->i8[v60];
  uint64_t v336 = v61;
  uint64_t v338 = v62;
  bzero(v61, v60);
  uint64_t v305 = (char *)v61;
  double v63 = &v61->i8[v60];
  unint64_t v337 = &v61->i8[v60];
  double v64 = (int32x4_t *)operator new(v60);
  unint64_t v333 = v64;
  uint64_t v335 = &v64->i8[v60];
  bzero(v64, v60);
  size_t __sz = v60;
  double v65 = &v64->i8[v60];
  uint64_t v334 = &v64->i32[v60 / 4];
  if (v11 < 8)
  {
    uint64_t v66 = 0;
    double v67 = v61;
    double v68 = &v64->i8[4 * v11];
    do
    {
LABEL_66:
      uint64_t v76 = v66;
      v67->i32[v76] = v66;
      v64->i32[v76] = v66++;
    }
    while (v11 != v66);
    goto LABEL_67;
  }
  uint64_t v66 = v11 & 0xFFFFFFF8;
  double v69 = v61 + 1;
  int32x4_t v70 = (int32x4_t)xmmword_23CE7EC40;
  double v71 = v64 + 1;
  v72.i64[0] = 0x400000004;
  v72.i64[1] = 0x400000004;
  v73.i64[0] = 0x800000008;
  v73.i64[1] = 0x800000008;
  uint64_t v74 = v66;
  do
  {
    int32x4_t v75 = vaddq_s32(v70, v72);
    v69[-1] = v70;
    int32x4_t *v69 = v75;
    v71[-1] = v70;
    *double v71 = v75;
    int32x4_t v70 = vaddq_s32(v70, v73);
    v69 += 2;
    v71 += 2;
    v74 -= 8;
  }
  while (v74);
  double v67 = v61;
  double v68 = &v64->i8[4 * v11];
  if (v66 != v11) {
    goto LABEL_66;
  }
LABEL_67:
  unint64_t v294 = v11;
  long long v78 = (int *)v339;
  uint64_t v77 = v340;
  uint64_t v315 = v24;
  if (v339 != v340)
  {
    int v79 = v11;
    int v306 = v340;
    while (1)
    {
      if (v79 == 2) {
        goto LABEL_137;
      }
      uint64_t v81 = v78[2];
      __int32 v82 = *(_DWORD *)(*a2 + 4 * v81);
      uint64_t v83 = v82;
      do
      {
        int v84 = v82;
        __int32 v82 = v64->i32[v82];
      }
      while (v82 != v84);
      uint64_t v85 = &v64->i32[v83];
      for (int i = *v85; *v85 != v84; int i = *v85)
      {
        __int32 *v85 = v84;
        uint64_t v85 = &v64->i32[i];
      }
      uint64_t v87 = v84;
      __int32 v88 = *(_DWORD *)(*a3 + 4 * v81);
      uint64_t v89 = v88;
      do
      {
        int v90 = v88;
        __int32 v88 = v64->i32[v88];
      }
      while (v88 != v90);
      size_t v91 = &v64->i32[v89];
      for (int j = *v91; *v91 != v90; int j = *v91)
      {
        *size_t v91 = v90;
        size_t v91 = &v64->i32[j];
      }
      if (v84 != v90) {
        break;
      }
LABEL_71:
      v78 += 4;
      if (v78 == v77) {
        goto LABEL_137;
      }
    }
    int v93 = (char *)v336;
    int64_t v94 = v63 - (unsigned char *)v336;
    uint64_t v95 = (v63 - (unsigned char *)v336) >> 2;
    int v323 = v79;
    uint64_t v318 = v84;
    if (v63 < v62)
    {
      *(_DWORD *)double v63 = v95;
      uint64_t v96 = (uint64_t)(v63 + 4);
      uint64_t v11 = v309;
      goto LABEL_99;
    }
    unint64_t v97 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 62) {
      goto LABEL_414;
    }
    if ((v62 - (unsigned char *)v336) >> 1 > v97) {
      unint64_t v97 = (v62 - (unsigned char *)v336) >> 1;
    }
    if ((unint64_t)(v62 - (unsigned char *)v336) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v98 = v97;
    }
    unint64_t v302 = v68;
    if (v98)
    {
      if (v98 >> 62) {
        goto LABEL_412;
      }
      uint64_t v99 = v65;
      double v100 = operator new(4 * v98);
      double v24 = v315;
      double v65 = v99;
      uint64_t v101 = &v100[4 * v95];
      _DWORD *v101 = v95;
      uint64_t v96 = (uint64_t)(v101 + 1);
      if (v63 != v93)
      {
LABEL_93:
        unint64_t v102 = v63 - 4 - v93;
        if (v102 < 0xBC
          || (unint64_t v118 = v94 & 0xFFFFFFFFFFFFFFFCLL,
              &v100[(v94 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v102 & 0xFFFFFFFFFFFFFFFCLL)] > &v100[(v94 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                            - 4]))
        {
          double v103 = v63;
          uint64_t v11 = v309;
        }
        else
        {
          uint64_t v11 = v309;
          if (&v63[-(v102 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v63 - 4)
          {
            double v103 = v63;
          }
          else if (v63 - v100 - v118 >= 0x20)
          {
            uint64_t v125 = (v102 >> 2) + 1;
            uint64_t v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
            double v103 = &v63[-v126];
            uint64_t v101 = (_DWORD *)((char *)v101 - v126);
            uint64_t v127 = &v100[4 * v95 - 16];
            long long v128 = v63 - 16;
            uint64_t v129 = v125 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v130 = *(_OWORD *)v128;
              *(v127 - 1) = *((_OWORD *)v128 - 1);
              *uint64_t v127 = v130;
              v127 -= 2;
              v128 -= 32;
              v129 -= 8;
            }
            while (v129);
            if (v125 == (v125 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_96:
              uint64_t v336 = v101;
              uint64_t v105 = &v100[4 * v98];
              uint64_t v338 = v105;
              if (!v93)
              {
LABEL_98:
                int v93 = (char *)v101;
                uint64_t v77 = v306;
                int v79 = v323;
                double v62 = v105;
                double v68 = v302;
                uint64_t v87 = v318;
LABEL_99:
                unint64_t v337 = (char *)v96;
                *(_DWORD *)&v93[4 * v90] = v95;
                *(_DWORD *)&v93[4 * v87] = v95;
                uint64_t v305 = v93;
                if (v65 < v68)
                {
                  *(_DWORD *)double v65 = v95;
                  double v64 = (int32x4_t *)v333;
                  uint64_t v80 = (uint64_t)(v65 + 4);
LABEL_70:
                  uint64_t v334 = (__int32 *)v80;
                  --v79;
                  v64->i32[v90] = v95;
                  double v65 = (char *)v80;
                  double v63 = (char *)v96;
                  v64->i32[v87] = v95;
                  goto LABEL_71;
                }
                uint64_t v298 = v62;
                double v107 = (char *)v333;
                int64_t v108 = v65 - (unsigned char *)v333;
                uint64_t v109 = (v65 - (unsigned char *)v333) >> 2;
                unint64_t v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 62) {
LABEL_414:
                }
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                if ((v68 - (unsigned char *)v333) >> 1 > v110) {
                  unint64_t v110 = (v68 - (unsigned char *)v333) >> 1;
                }
                if ((unint64_t)(v68 - (unsigned char *)v333) >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v111 = v110;
                }
                if (v111)
                {
                  if (v111 >> 62) {
LABEL_412:
                  }
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  uint64_t v112 = v65;
                  unint64_t v113 = operator new(4 * v111);
                  double v65 = v112;
                  double v64 = (int32x4_t *)&v113[4 * v109];
                  v64->i32[0] = v95;
                  uint64_t v80 = (uint64_t)v64->i64 + 4;
                  if (v65 != v107)
                  {
LABEL_109:
                    unint64_t v114 = v65 - 4 - v107;
                    if (v114 < 0xBC
                      || &v113[v108 - 4 - (v114 & 0xFFFFFFFFFFFFFFFCLL)] > &v113[v108 - 4]
                      || &v65[-(v114 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v65 - 4
                      || (unint64_t)(v65 - v113 - v108) < 0x20)
                    {
                      unint64_t v115 = v65;
                      uint64_t v11 = v309;
                      double v24 = v315;
                    }
                    else
                    {
                      uint64_t v119 = (v114 >> 2) + 1;
                      uint64_t v120 = 4 * (v119 & 0x7FFFFFFFFFFFFFF8);
                      unint64_t v115 = &v65[-v120];
                      double v64 = (int32x4_t *)((char *)v64 - v120);
                      unint64_t v121 = &v113[4 * v109 - 16];
                      uint64_t v122 = v65 - 16;
                      uint64_t v123 = v119 & 0x7FFFFFFFFFFFFFF8;
                      double v24 = v315;
                      do
                      {
                        long long v124 = *(_OWORD *)v122;
                        *(v121 - 1) = *((_OWORD *)v122 - 1);
                        *unint64_t v121 = v124;
                        v121 -= 2;
                        v122 -= 32;
                        v123 -= 8;
                      }
                      while (v123);
                      uint64_t v11 = v309;
                      if (v119 == (v119 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_112:
                        double v68 = &v113[4 * v111];
                        unint64_t v333 = v64;
                        uint64_t v335 = v68;
                        if (!v107)
                        {
LABEL_114:
                          uint64_t v77 = v306;
                          int v79 = v323;
                          double v62 = v298;
                          uint64_t v87 = v318;
                          goto LABEL_70;
                        }
LABEL_113:
                        uint64_t v117 = v68;
                        operator delete(v107);
                        double v68 = v117;
                        goto LABEL_114;
                      }
                    }
                    do
                    {
                      __int32 v116 = *((_DWORD *)v115 - 1);
                      v115 -= 4;
                      v64[-1].i32[3] = v116;
                      double v64 = (int32x4_t *)((char *)v64 - 4);
                    }
                    while (v115 != v107);
                    goto LABEL_112;
                  }
                }
                else
                {
                  unint64_t v113 = 0;
                  double v64 = (int32x4_t *)(4 * v109);
                  *(_DWORD *)(4 * v109) = v95;
                  uint64_t v80 = 4 * v109 + 4;
                  if (v65 != v107) {
                    goto LABEL_109;
                  }
                }
                uint64_t v11 = v309;
                double v24 = v315;
                double v68 = &v113[4 * v111];
                unint64_t v333 = v64;
                uint64_t v335 = v68;
                if (!v107) {
                  goto LABEL_114;
                }
                goto LABEL_113;
              }
LABEL_97:
              double v106 = v65;
              operator delete(v93);
              double v65 = v106;
              goto LABEL_98;
            }
          }
          else
          {
            double v103 = v63;
          }
        }
        do
        {
          int v104 = *((_DWORD *)v103 - 1);
          v103 -= 4;
          *--uint64_t v101 = v104;
        }
        while (v103 != v93);
        goto LABEL_96;
      }
    }
    else
    {
      double v100 = 0;
      uint64_t v101 = (_DWORD *)(4 * v95);
      *(_DWORD *)(4 * v95) = v95;
      uint64_t v96 = 4 * v95 + 4;
      if (v63 != v93) {
        goto LABEL_93;
      }
    }
    uint64_t v11 = v309;
    uint64_t v336 = v101;
    uint64_t v105 = &v100[4 * v98];
    uint64_t v338 = v105;
    if (!v93) {
      goto LABEL_98;
    }
    goto LABEL_97;
  }
LABEL_137:
  unint64_t v131 = operator new(__sz);
  bzero(v131, __sz);
  unint64_t v330 = 0;
  unint64_t v331 = 0;
  uint64_t v332 = 0;
  unint64_t v132 = v337;
  unint64_t v133 = v305;
  size_t v324 = v337 - v305;
  unint64_t v134 = (v337 - v305) >> 2;
  std::vector<absl::lts_2020_02_25::InlinedVector<int,2ul,std::allocator<int>>>::vector(&v351, v134);
  uint64_t v307 = v131;
  if (v337 != v305)
  {
    for (unint64_t k = 0; v134 > k; ++k)
    {
      uint64_t v136 = *(unsigned int *)&v133[4 * k];
      if (k == v136) {
        continue;
      }
      uint64_t v137 = v351 + 24 * (int)v136;
      uint64_t v139 = v137 + 8;
      unint64_t v138 = *(void *)v137;
      if (*(void *)v137)
      {
        uint64_t v139 = *(void *)(v137 + 8);
        unint64_t v140 = *(void *)(v137 + 16);
        unint64_t v141 = v138 >> 1;
        if (v138 >> 1 == v140)
        {
LABEL_147:
          if (((v140 >> 61) & 3) != 0) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v142 = (char *)operator new(8 * v140);
          uint64_t v143 = v142;
          *(_DWORD *)&v142[4 * v140] = k;
          if (v138 < 2) {
            goto LABEL_158;
          }
          unint64_t v144 = 0;
          if (v140 < 8 || (unint64_t)&v142[-v139] < 0x20)
          {
            uint64_t v145 = (int *)v139;
          }
          else
          {
            unint64_t v144 = v140 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v145 = (int *)(v139 + 4 * (v140 & 0xFFFFFFFFFFFFFFF8));
            unint64_t v146 = v142 + 16;
            int64_t v147 = (long long *)(v139 + 16);
            unint64_t v148 = v140 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v149 = *v147;
              *(v146 - 1) = *(v147 - 1);
              *unint64_t v146 = v149;
              v146 += 2;
              v147 += 2;
              v148 -= 8;
            }
            while (v148);
            if (v140 == v144) {
              goto LABEL_158;
            }
          }
          unint64_t v150 = v140 - v144;
          uint64_t v151 = &v142[4 * v144];
          do
          {
            int v152 = *v145++;
            *(_DWORD *)uint64_t v151 = v152;
            v151 += 4;
            --v150;
          }
          while (v150);
LABEL_158:
          if (v138)
          {
            operator delete(*(void **)(v137 + 8));
            unint64_t v138 = *(void *)v137;
          }
          *(void *)(v137 + 8) = v143;
          *(void *)(v137 + 16) = 2 * v140;
          v138 |= 1uLL;
          goto LABEL_140;
        }
      }
      else
      {
        unint64_t v140 = 2;
        unint64_t v141 = v138 >> 1;
        if (v138 >> 1 == 2) {
          goto LABEL_147;
        }
      }
      *(_DWORD *)(v139 + 4 * v141) = k;
LABEL_140:
      *(void *)uint64_t v137 = v138 + 2;
      uint64_t v11 = v309;
      unint64_t v133 = v305;
    }
  }
  unint64_t v356 = 0;
  uint64_t v357 = 0;
  unint64_t v358 = 0;
  uint64_t v349 = 0;
  unint64_t v350 = 0;
  int v348 = 0;
  uint64_t v153 = *((void *)&v351 + 1) - v351;
  if (*((void *)&v351 + 1) != (void)v351)
  {
    if (v153 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v154 = 0xAAAAAAAAAAAAAAABLL * (v153 >> 3);
    int v348 = operator new(8 * (((v154 - 1) >> 6) + 1));
    uint64_t v349 = 0;
    unint64_t v350 = ((v154 - 1) >> 6) + 1;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](&v348, v154, 0);
  }
  uint64_t v345 = 0;
  uint64_t v346 = 0;
  uint64_t v347 = 0;
  if (v132 == v133)
  {
    uint64_t v156 = 0;
    uint64_t v155 = a6;
    unint64_t v157 = (int)v11;
    size_t __sza = (int)v11;
    int v158 = 0;
    if (v134 <= (int)v11) {
      goto LABEL_262;
    }
LABEL_169:
    uint64_t v159 = 0;
    unint64_t v160 = v157;
    while (1)
    {
      unint64_t v161 = *(void *)(v351 + 24 * v160);
      BOOL v162 = v161 > 5;
      uint64_t v163 = (1 << v161) & 0x33;
      if (v162 || v163 == 0) {
        break;
      }
      int v165 = *(_DWORD *)&v305[4 * v160];
      unint64_t v303 = v160;
      if (v165 == v160)
      {
        if (((*(void *)((char *)v348 + ((v160 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v160) & 1) == 0)
        {
          unsigned int v166 = v357;
          if ((unint64_t)v357 < v358)
          {
            *(_DWORD *)uint64_t v357 = v165;
            uint64_t v167 = v166 + 4;
            double v168 = v307;
            goto LABEL_197;
          }
          size_t v325 = (size_t)v156;
          int v169 = v356;
          uint64_t v170 = (v357 - v356) >> 2;
          unint64_t v171 = v170 + 1;
          if ((unint64_t)(v170 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v172 = v358 - (void)v356;
          if ((uint64_t)(v358 - (void)v356) >> 1 > v171) {
            unint64_t v171 = v172 >> 1;
          }
          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v173 = v171;
          }
          unsigned int v319 = v159;
          if (v173)
          {
            if (v173 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v174 = operator new(4 * v173);
            uint64_t v175 = &v174[4 * v170];
            *(_DWORD *)uint64_t v175 = v165;
            uint64_t v167 = v175 + 4;
            if (v166 != v169)
            {
LABEL_188:
              unint64_t v176 = v166 - 4 - v169;
              double v168 = v307;
              if (v176 < 0x2C) {
                goto LABEL_420;
              }
              if ((unint64_t)(v169 - v174) < 0x20) {
                goto LABEL_420;
              }
              uint64_t v177 = (v176 >> 2) + 1;
              uint64_t v178 = 4 * (v177 & 0x7FFFFFFFFFFFFFF8);
              unsigned int v179 = &v166[-v178];
              v175 -= v178;
              unint64_t v180 = &v174[4 * v170 - 16];
              uint64_t v181 = v166 - 16;
              uint64_t v182 = v177 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v183 = *(_OWORD *)v181;
                *(v180 - 1) = *((_OWORD *)v181 - 1);
                *unint64_t v180 = v183;
                v180 -= 2;
                v181 -= 32;
                v182 -= 8;
              }
              while (v182);
              unsigned int v166 = v179;
              if (v177 != (v177 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_420:
                do
                {
                  int v184 = *((_DWORD *)v166 - 1);
                  v166 -= 4;
                  *((_DWORD *)v175 - 1) = v184;
                  v175 -= 4;
                }
                while (v166 != v169);
              }
              unint64_t v356 = v175;
              uint64_t v357 = v167;
              unint64_t v358 = (unint64_t)&v174[4 * v173];
              if (v169) {
LABEL_195:
              }
                operator delete(v169);
LABEL_196:
              uint64_t v156 = (int *)v325;
              uint64_t v159 = v319;
LABEL_197:
              uint64_t v357 = v167;
              while (1)
              {
LABEL_200:
                if (v356 == v167) {
                  goto LABEL_170;
                }
                unsigned int v186 = v167 - 4;
                int v185 = *((_DWORD *)v167 - 1);
                unint64_t v187 = (unint64_t)v185 >> 6;
                uint64_t v188 = *((void *)v348 + v187);
                if (((1 << v185) & v188) == 0)
                {
                  *((void *)v348 + v187) = (1 << v185) | v188;
                  v156[v185] = v159;
                  size_t v327 = (size_t)v156;
                  if (v185 >= (int)v11)
                  {
                    uint64_t v196 = (void *)(v351 + 24 * v185);
                    unint64_t v197 = *v196;
                    uint64_t v194 = (int *)(v196 + 1);
                    unint64_t v193 = v197;
                    if (v197) {
                      goto LABEL_207;
                    }
                  }
                  else
                  {
                    v168[(int)v159] = v185;
                    uint64_t v159 = (v159 + 1);
                    double v192 = (void *)(v351 + 24 * v185);
                    unint64_t v195 = *v192;
                    uint64_t v194 = (int *)(v192 + 1);
                    unint64_t v193 = v195;
                    if (v195)
                    {
LABEL_207:
                      uint64_t v194 = *(int **)v194;
                      if (v193 >= 2) {
                        goto LABEL_211;
                      }
                      goto LABEL_199;
                    }
                  }
                  if (v193 < 2)
                  {
LABEL_199:
                    uint64_t v156 = (int *)v327;
                    continue;
                  }
LABEL_211:
                  uint64_t v198 = &v194[v193 >> 1];
                  uint64_t v199 = v167;
                  unsigned int v320 = v159;
                  while (2)
                  {
                    unint64_t v200 = *v194;
                    if (((*(void *)((char *)v348 + ((v200 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v200) & 1) == 0)
                    {
                      if ((unint64_t)v199 < v358)
                      {
                        *(_DWORD *)uint64_t v199 = v200;
                        uint64_t v167 = v199 + 4;
                      }
                      else
                      {
                        int v201 = v356;
                        uint64_t v202 = (v199 - v356) >> 2;
                        unint64_t v203 = v202 + 1;
                        if ((unint64_t)(v202 + 1) >> 62) {
                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v204 = v358 - (void)v356;
                        if ((uint64_t)(v358 - (void)v356) >> 1 > v203) {
                          unint64_t v203 = v204 >> 1;
                        }
                        if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v205 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v205 = v203;
                        }
                        if (v205)
                        {
                          if (v205 >> 62) {
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          }
                          uint64_t v206 = operator new(4 * v205);
                          BOOL v207 = &v206[4 * v202];
                          *(_DWORD *)BOOL v207 = v200;
                          uint64_t v167 = v207 + 4;
                          if (v199 != v201)
                          {
LABEL_226:
                            unint64_t v208 = v199 - 4 - v201;
                            if (v208 < 0xBC
                              || &v206[v199 - v201 - 4 - (v208 & 0xFFFFFFFFFFFFFFFCLL)] > &v206[v199 - v201 - 4]
                              || &v199[-(v208 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v199 - 4
                              || (unint64_t)(v201 - v206) < 0x20)
                            {
                              int v209 = v199;
                              double v24 = v315;
                            }
                            else
                            {
                              uint64_t v211 = (v208 >> 2) + 1;
                              uint64_t v212 = 4 * (v211 & 0x7FFFFFFFFFFFFFF8);
                              int v209 = &v199[-v212];
                              v207 -= v212;
                              uint64_t v213 = &v206[4 * v202 - 16];
                              unint64_t v214 = v199 - 16;
                              uint64_t v215 = v211 & 0x7FFFFFFFFFFFFFF8;
                              double v24 = v315;
                              do
                              {
                                long long v216 = *(_OWORD *)v214;
                                *(v213 - 1) = *((_OWORD *)v214 - 1);
                                *uint64_t v213 = v216;
                                v213 -= 2;
                                v214 -= 32;
                                v215 -= 8;
                              }
                              while (v215);
                              if (v211 == (v211 & 0x7FFFFFFFFFFFFFF8))
                              {
LABEL_229:
                                unint64_t v356 = v207;
                                uint64_t v357 = v167;
                                unint64_t v358 = (unint64_t)&v206[4 * v205];
                                if (v201) {
                                  goto LABEL_230;
                                }
                                goto LABEL_231;
                              }
                            }
                            do
                            {
                              int v210 = *((_DWORD *)v209 - 1);
                              v209 -= 4;
                              *((_DWORD *)v207 - 1) = v210;
                              v207 -= 4;
                            }
                            while (v209 != v201);
                            goto LABEL_229;
                          }
                        }
                        else
                        {
                          uint64_t v206 = 0;
                          BOOL v207 = (char *)(4 * v202);
                          *(_DWORD *)(4 * v202) = v200;
                          uint64_t v167 = (char *)(4 * v202 + 4);
                          if (v199 != v201) {
                            goto LABEL_226;
                          }
                        }
                        double v24 = v315;
                        unint64_t v356 = v207;
                        uint64_t v357 = v167;
                        unint64_t v358 = (unint64_t)&v206[4 * v205];
                        if (v201) {
LABEL_230:
                        }
                          operator delete(v201);
LABEL_231:
                        uint64_t v159 = v320;
                      }
                      uint64_t v357 = v167;
                      uint64_t v199 = v167;
                    }
                    if (++v194 == v198)
                    {
                      uint64_t v11 = v309;
                      double v168 = v307;
                      goto LABEL_199;
                    }
                    continue;
                  }
                }
                uint64_t v357 = v167 - 4;
                uint64_t v189 = v156[v185];
                uint64_t v190 = (v159 - v189);
                if ((int)v190 >= 2) {
                  break;
                }
                uint64_t v167 = v186;
              }
              size_t v326 = (size_t)v156;
              uint64_t v191 = (char *)&v168[v189];
              if (v158 < v332)
              {
                *(void *)int v158 = v191;
                *((void *)v158 + 1) = v190;
                v158 += 16;
                uint64_t v156 = (int *)v326;
LABEL_256:
                unint64_t v331 = v158;
                uint64_t v167 = v357;
                goto LABEL_200;
              }
              unint64_t v217 = v330;
              uint64_t v218 = (v158 - v330) >> 4;
              unint64_t v219 = v218 + 1;
              if ((unint64_t)(v218 + 1) >> 60) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v220 = v332 - v330;
              if ((v332 - v330) >> 3 > v219) {
                unint64_t v219 = v220 >> 3;
              }
              if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v221 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v221 = v219;
              }
              if (v221 >> 60) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              long long v222 = v168;
              uint64_t v223 = v11;
              uint64_t v224 = v159;
              int v225 = (char *)operator new(16 * v221);
              v226 = &v225[16 * v218];
              *(void *)v226 = v191;
              *((void *)v226 + 1) = v190;
              if (v158 == v217)
              {
                uint64_t v156 = (int *)v326;
                int v158 = v226 + 16;
                unint64_t v330 = &v225[16 * v218];
                uint64_t v332 = &v225[16 * v221];
                if (v217) {
                  goto LABEL_254;
                }
              }
              else
              {
                unint64_t v227 = &v225[16 * v218];
                uint64_t v156 = (int *)v326;
                do
                {
                  BOOL v228 = v227 - 16;
                  *((_OWORD *)v227 - 1) = *((_OWORD *)v158 - 1);
                  v158 -= 16;
                  v227 -= 16;
                }
                while (v158 != v217);
                int v158 = v226 + 16;
                unint64_t v330 = v228;
                uint64_t v332 = &v225[16 * v221];
                if (v217) {
LABEL_254:
                }
                  operator delete(v217);
              }
              uint64_t v159 = v224;
              uint64_t v11 = v223;
              double v168 = v222;
              goto LABEL_256;
            }
          }
          else
          {
            v174 = 0;
            uint64_t v175 = (char *)(4 * v170);
            *(_DWORD *)(4 * v170) = v165;
            uint64_t v167 = (char *)(4 * v170 + 4);
            if (v166 != v169) {
              goto LABEL_188;
            }
          }
          double v168 = v307;
          unint64_t v356 = v175;
          uint64_t v357 = v167;
          unint64_t v358 = (unint64_t)&v174[4 * v173];
          if (v169) {
            goto LABEL_195;
          }
          goto LABEL_196;
        }
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v329, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2190);
        unint64_t v286 = (void *)google::LogMessage::stream((google::LogMessage *)v329);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286, (uint64_t)"Check failed: !seen[i] ", 23);
LABEL_397:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v329);
      }
LABEL_170:
      unint64_t v160 = v303 + 1;
      uint64_t v155 = a6;
      if (v303 + 1 >= (v337 - v305) >> 2) {
        goto LABEL_262;
      }
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v329, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2186);
    uint64_t v291 = (void *)google::LogMessage::stream((google::LogMessage *)v329);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)"Check failed: graph[i].empty() || graph[i].size() == 2 ", 55);
    goto LABEL_397;
  }
  uint64_t v155 = a6;
  if ((v324 & 0x8000000000000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v156 = (int *)operator new(v324);
  uint64_t v345 = v156;
  uint64_t v347 = &v156[v134];
  bzero(v156, v324);
  uint64_t v346 = (char *)v156 + v324;
  unint64_t v157 = (int)v11;
  size_t __sza = (int)v11;
  int v158 = 0;
  if (v134 > (int)v11) {
    goto LABEL_169;
  }
LABEL_262:
  if (v156) {
    operator delete(v156);
  }
  if (v348) {
    operator delete(v348);
  }
  if (v356)
  {
    uint64_t v357 = v356;
    operator delete(v356);
  }
  uint64_t v229 = v351;
  if ((void)v351)
  {
    uint64_t v230 = *((void *)&v351 + 1);
    uint64_t v231 = (void *)v351;
    if (*((void *)&v351 + 1) != (void)v351)
    {
      uint64_t v232 = *((void *)&v351 + 1);
      do
      {
        char v233 = *(unsigned char *)(v232 - 24);
        v232 -= 24;
        if (v233) {
          operator delete(*(void **)(v230 - 16));
        }
        uint64_t v230 = v232;
      }
      while (v232 != v229);
      uint64_t v231 = (void *)v351;
      uint64_t v155 = a6;
    }
    *((void *)&v351 + 1) = v229;
    operator delete(v231);
  }
  if (a7)
  {
    unint64_t v234 = (a7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v235 = v294;
    if (v234 >= 3)
    {
      unint64_t v238 = v234 + 1;
      uint64_t v239 = (v234 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v237 = &v155->i64[v239];
      uint64_t v240 = v155 + 1;
      int64x2_t v241 = 0uLL;
      uint64_t v242 = v239;
      int64x2_t v243 = 0uLL;
      do
      {
        int64x2_t v241 = vaddq_s64(v240[-1], v241);
        int64x2_t v243 = vaddq_s64(*v240, v243);
        v240 += 2;
        v242 -= 4;
      }
      while (v242);
      uint64_t v236 = vaddvq_s64(vaddq_s64(v243, v241));
      if (v238 == v239) {
        goto LABEL_284;
      }
    }
    else
    {
      uint64_t v236 = 0;
      uint64_t v237 = (uint64_t *)v155;
    }
    do
    {
      uint64_t v244 = *v237++;
      v236 += v244;
    }
    while (v237 != (uint64_t *)((char *)v155 + 8 * a7));
  }
  else
  {
    uint64_t v236 = 0;
    unint64_t v235 = v294;
  }
LABEL_284:
  *(void *)&long long v351 = v235;
  LODWORD(v348) = v11;
  if (v235 != __sza) {
    google::MakeCheckOpString<unsigned long,int>((int)&v351, (int)&v348, "pre_order.size() == num_nodes");
  }
  v329[0] = operator new(8 * (((v235 - 1) >> 6) + 1));
  v329[1] = 0;
  v329[2] = (void *)(((v235 - 1) >> 6) + 1);
  std::vector<BOOL>::__construct_at_end[abi:ne180100](v329, v235, 0);
  unint64_t v292 = v330;
  unint64_t v246 = __sza;
  uint64_t v245 = a7;
  if (v330 != v158)
  {
    uint64_t v247 = (int **)v330;
    uint64_t v304 = (void *)(a10 + 32);
    uint64_t v293 = v236;
    while (1)
    {
      uint64_t v248 = *v247;
      *(void *)&long long v351 = v247[1];
      LODWORD(v348) = 1;
      size_t v328 = v351;
      if ((unint64_t)v351 < 2) {
        google::MakeCheckOpString<unsigned long,int>((int)&v351, (int)&v348, "subset.size() > 1");
      }
      LODWORD(v348) = v11;
      uint64_t v321 = v247;
      if ((unint64_t)v351 >= v246) {
        google::MakeCheckOpString<unsigned long,int>((int)&v351, (int)&v348, "subset.size() < num_nodes");
      }
      uint64_t v249 = 4 * v351;
      uint64_t v250 = 0;
      char v251 = 0;
      uint64_t v252 = (char *)v329[0];
      uint64_t v253 = 4 * v351;
      uint64_t v254 = v248;
      do
      {
        unint64_t v255 = *v254;
        *(void *)&v252[(v255 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v255;
        if (v245)
        {
          v251 |= v255 == 0;
          v250 += v155->i64[v255];
        }
        ++v254;
        v253 -= 4;
      }
      while (v253);
      if (!v245) {
        break;
      }
      if (v251) {
        uint64_t v250 = v236 - v250;
      }
      uint64_t v256 = (a8 - 1 + v250) / a8;
      if (v256 <= 1) {
        uint64_t v257 = 1;
      }
      else {
        uint64_t v257 = v256;
      }
      uint64_t v258 = __pb;
      double v259 = 0.0;
      if (__pb != v24) {
        goto LABEL_305;
      }
LABEL_309:
      if (v259 < (double)v257 + -0.000001)
      {
        uint64_t v262 = *a2;
        uint64_t v261 = a2[1];
        uint64_t v263 = v261 - *a2;
        if (v261 == *a2)
        {
          int v266 = 0;
          int v265 = 0;
          int v269 = -1;
          int v268 = -1;
        }
        else
        {
          uint64_t v264 = 0;
          int v265 = 0;
          int v266 = 0;
          uint64_t v267 = v263 >> 2;
          if ((unint64_t)(v263 >> 2) <= 1) {
            uint64_t v267 = 1;
          }
          int v268 = -1;
          int v269 = -1;
          do
          {
            unint64_t v270 = *(int *)(v262 + 4 * v264);
            if (v270 == *(_DWORD *)(*a3 + 4 * v264))
            {
              if ((*(void *)((char *)v329[0] + ((v270 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v270))
              {
                ++v265;
                if (v268 == -1 || *((double *)v342 + v264) < *((double *)v342 + v268)) {
                  int v268 = v264;
                }
              }
              else
              {
                ++v266;
                if (v269 == -1 || *((double *)v342 + v264) < *((double *)v342 + v269)) {
                  int v269 = v264;
                }
              }
            }
            ++v264;
          }
          while (v267 != v264);
        }
        if (!((v265 + v266 < 0) ^ __OFADD__(v265, v266) | (v265 + v266 == 0))) {
          uint64_t v257 = 1;
        }
        uint64_t v316 = v257;
        unint64_t v271 = (void *)(a10 + 32);
        uint64_t v272 = (void *)*v304;
        if (!*v304) {
          goto LABEL_337;
        }
        do
        {
          unint64_t v273 = v272[4];
          BOOL v274 = v273 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
          if (v273 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
            int v275 = v272;
          }
          else {
            int v275 = v272 + 1;
          }
          if (v274) {
            unint64_t v271 = v272;
          }
          uint64_t v272 = (void *)*v275;
        }
        while (*v275);
        if (v271 != v304
          && v271[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        {
          int v276 = (char *)v271[5];
        }
        else
        {
LABEL_337:
          int v276 = 0;
        }
        unint64_t v356 = v276;
        uint64_t v357 = (char *)v316;
        unint64_t v358 = 0x7FFFFFFFFFFFFFFELL;
        long long v359 = 0u;
        long long v360 = 0u;
        if (v261 != v262)
        {
          uint64_t v277 = 0;
          double v278 = 0.0;
          while (1)
          {
            if (((*(void *)((char *)v329[0]
                             + (((unint64_t)*(int *)(v262 + 4 * v277) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v262 + 4 * v277)) & 1) != 0)
            {
              unint64_t v279 = *(int *)(*a3 + 4 * v277);
              if (((*(void *)((char *)v329[0] + ((v279 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v279) & 1) == 0)
              {
                double v280 = *((double *)v342 + v277);
                if (!operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v356, *(_DWORD *)(*v308 + 4 * v277), 1))
                {
                  int v284 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v351, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2034);
                  uint64_t v285 = (void *)google::LogMessage::stream(v284);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v285, (uint64_t)"Check failed: outgoing.AddLiteralTerm(literals[i], IntegerValue(1)) ", 68);
                  goto LABEL_395;
                }
                double v278 = v278 + v280;
                uint64_t v262 = *a2;
                uint64_t v261 = a2[1];
              }
            }
            if (++v277 >= (unint64_t)((v261 - v262) >> 2)) {
              goto LABEL_347;
            }
          }
        }
        double v278 = 0.0;
LABEL_347:
        if (v265 + v266 <= 0) {
          goto LABEL_360;
        }
        if ((v265 != v328 || v268 != -1 && *((double *)v342 + v268) <= 0.999999)
          && (v266 != v309 - v328 || v269 != -1 && *((double *)v342 + v269) <= 0.999999))
        {
          if (v265 == v328)
          {
            if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v356, *(_DWORD *)(*v308 + 4 * v268), 1) & 1) == 0)
            {
              int v287 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v351, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2055);
              int v288 = (void *)google::LogMessage::stream(v287);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v288, (uint64_t)"Check failed: outgoing.AddLiteralTerm(literals[optional_loop_in], IntegerValue(1)) ", 83);
              goto LABEL_395;
            }
            double v278 = v278 + *((double *)v342 + v268);
          }
          if (v266 == v309 - v328)
          {
            if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v356, *(_DWORD *)(*v308 + 4 * v269), 1) & 1) == 0)
            {
              BOOL v289 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v351, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2062);
              uint64_t v290 = (void *)google::LogMessage::stream(v289);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v290, (uint64_t)"Check failed: outgoing.AddLiteralTerm(literals[optional_loop_out], IntegerValue(1)) ", 84);
LABEL_395:
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v351);
            }
            double v278 = v278 + *((double *)v342 + v269);
          }
LABEL_360:
          if (v278 < (double)v316 + -0.000001)
          {
            operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v356, (uint64_t)&v351);
            HIBYTE(v350) = 7;
            strcpy((char *)&v348, "Circuit");
            HIBYTE(v347) = 0;
            LOBYTE(v345) = 0;
            operations_research::sat::LinearConstraintManager::AddCut(a9, &v351, (uint64_t)&v348, a5, (uint64_t)&v345);
            if ((SHIBYTE(v347) & 0x80000000) == 0)
            {
              if ((SHIBYTE(v350) & 0x80000000) == 0) {
                goto LABEL_363;
              }
LABEL_376:
              operator delete(v348);
              unsigned int v281 = v354;
              if (!v354) {
                goto LABEL_365;
              }
LABEL_364:
              uint64_t v355 = v281;
              operator delete(v281);
              goto LABEL_365;
            }
            operator delete(v345);
            if (SHIBYTE(v350) < 0) {
              goto LABEL_376;
            }
LABEL_363:
            unsigned int v281 = v354;
            if (v354) {
              goto LABEL_364;
            }
LABEL_365:
            if (v352)
            {
              unsigned int v353 = v352;
              operator delete(v352);
            }
          }
        }
        if (*((void *)&v359 + 1))
        {
          *(void *)&long long v360 = *((void *)&v359 + 1);
          operator delete(*((void **)&v359 + 1));
        }
        unint64_t v246 = __sza;
        uint64_t v245 = a7;
        uint64_t v155 = a6;
        LODWORD(v11) = v309;
        uint64_t v236 = v293;
      }
      if (v328)
      {
        unint64_t v282 = (char *)v329[0];
        do
        {
          unint64_t v283 = *v248++;
          *(void *)&v282[(v283 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v283);
          v249 -= 4;
        }
        while (v249);
      }
      uint64_t v247 = v321 + 2;
      if (v321 + 2 == (int **)v158) {
        goto LABEL_380;
      }
    }
    uint64_t v257 = 1;
    uint64_t v258 = __pb;
    double v259 = 0.0;
    if (__pb == v24) {
      goto LABEL_309;
    }
    do
    {
LABEL_305:
      if ((*(void *)((char *)v329[0] + (((unint64_t)*(int *)v258 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)v258))
      {
        double v260 = v258[1];
        if ((*(void *)((char *)v329[0] + (((unint64_t)*((int *)v258 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *((_DWORD *)v258 + 1))) {
          double v260 = -0.0;
        }
        double v259 = v259 + v260;
      }
      v258 += 2;
    }
    while (v258 != v24);
    goto LABEL_309;
  }
LABEL_380:
  if (v329[0]) {
    operator delete(v329[0]);
  }
  if (v292) {
    operator delete(v292);
  }
  operator delete(v307);
  if (v333) {
    operator delete(v333);
  }
  if (v336) {
    operator delete(v336);
  }
  if (v339) {
    operator delete(v339);
  }
  if (v342) {
    operator delete(v342);
  }
  if (__pb) {
    operator delete(__pb);
  }
}

void sub_23CD28EC8()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 240));
}

void sub_23CD28ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(a22);
  if (a37) {
    operator delete(a37);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a43)
  {
    operator delete(a43);
    double v61 = a46;
    if (!a46)
    {
LABEL_9:
      double v62 = a26;
      if (!a26) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else
  {
    double v61 = a46;
    if (!a46) {
      goto LABEL_9;
    }
  }
  operator delete(v61);
  double v62 = a26;
  if (!a26) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_10:
  operator delete(v62);
  goto LABEL_11;
}

void *std::vector<absl::lts_2020_02_25::InlinedVector<int,2ul,std::allocator<int>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 24 * a2;
    unint64_t v5 = operator new(24 * a2);
    *a1 = v5;
    a1[1] = v5;
    uint64_t v6 = &v5[3 * a2];
    a1[2] = v6;
    if ((unint64_t)(v4 - 24) >= 0x18)
    {
      unint64_t v8 = (v4 - 24) / 0x18uLL + 1;
      uint64_t v7 = &v5[3 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v9 = v8 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *unint64_t v5 = 0;
        v5[3] = 0;
        v5 += 6;
        v9 -= 2;
      }
      while (v9);
      if (v8 == (v8 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v7 = v5;
    }
    do
    {
      *uint64_t v7 = 0;
      v7 += 3;
    }
    while (v7 != v6);
LABEL_9:
    a1[1] = v6;
  }
  return a1;
}

void sub_23CD29280(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<operations_research::Domain>::vector((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void **a6@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  a6[6] = 0;
  uint64_t v12 = *a6;
  if (*a6)
  {
    a6[1] = v12;
    operator delete(v12);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  *(_OWORD *)a6 = *(_OWORD *)v32;
  a6[2] = v33;
  int v21 = a1;
  uint64_t v23 = 0;
  double v24 = 0;
  double v22 = 0;
  uint64_t v13 = *(const void **)a2;
  int64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v14)
  {
    if (v14 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v22 = operator new(v14);
    double v24 = (char *)v22 + 4 * (v14 >> 2);
    memcpy(v22, v13, v14);
    uint64_t v23 = v24;
  }
  uint64_t v25 = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  unint64_t v15 = *(const void **)a3;
  int64_t v16 = *(void *)(a3 + 8) - *(void *)a3;
  if (v16)
  {
    if (v16 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = operator new(v16);
    uint64_t v27 = (char *)v25 + 4 * (v16 >> 2);
    memcpy(v25, v15, v16);
    long long v26 = v27;
  }
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v17 = *(int **)a4;
  int64_t v18 = *(void *)(a4 + 8) - *(void *)a4;
  if (v18)
  {
    if (v18 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v28 = operator new(v18);
    uint64_t v30 = (char *)v28 + 4 * (v18 >> 2);
    memcpy(v28, v17, v18);
    uint64_t v29 = v30;
  }
  uint64_t v31 = a5;
  operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)v32, &v21);
  uint64_t v19 = operator new(0x60uLL);
  *uint64_t v19 = &unk_26F0C4218;
  operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)(v19 + 1), (int *)v32);
  unint64_t v39 = v19;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v38, a6 + 3);
  if (v39 == v38)
  {
    (*(void (**)(void *))(v38[0] + 32))(v38);
    unint64_t v20 = __p;
    if (__p)
    {
LABEL_16:
      int v37 = v20;
      operator delete(v20);
    }
  }
  else
  {
    if (v39) {
      (*(void (**)(void *))(*v39 + 40))(v39);
    }
    unint64_t v20 = __p;
    if (__p) {
      goto LABEL_16;
    }
  }
  if (v34)
  {
    int v35 = v34;
    operator delete(v34);
  }
  if (v32[1])
  {
    double v33 = v32[1];
    operator delete(v32[1]);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v25)
  {
    long long v26 = v25;
    operator delete(v25);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
}

void sub_23CD29578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  operator delete(v22);
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix((operations_research::glop::CompactSparseMatrix *)&a21);
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix((operations_research::glop::CompactSparseMatrix *)&a10);
  operations_research::sat::CutGenerator::~CutGenerator(v21);
  _Unwind_Resume(a1);
}

void sub_23CD295B4(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CD295C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (a17)
  {
    operator delete(a17);
    unint64_t v20 = a14;
    if (!a14)
    {
LABEL_3:
      int v21 = __p;
      if (!__p) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v20 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  int v21 = __p;
  if (!__p)
  {
LABEL_5:
    operations_research::sat::CutGenerator::~CutGenerator(v18);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v21);
  goto LABEL_5;
}

void sub_23CD29630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11) {
    JUMPOUT(0x23CD295ECLL);
  }
  JUMPOUT(0x23CD295E4);
}

void operations_research::sat::anonymous namespace'::GetAssociatedVariables(int **a1, int **a2, uint64_t a3)
{
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v8 = v5;
    uint64_t v9 = 0;
    uint64_t v48 = a2[1];
    do
    {
      while (1)
      {
        uint64_t v10 = *v7;
        uint64_t v11 = *(void *)(v8 + 160);
        unint64_t v12 = (unint64_t)(*(void *)(v8 + 168) - v11) >> 2;
        if ((int)v10 >= (int)v12) {
          break;
        }
        int v13 = *(_DWORD *)(v11 + 4 * v10);
        if (v13 == -1) {
          break;
        }
        unint64_t v14 = (unint64_t)a1[2];
        if ((unint64_t)v9 >= v14)
        {
          unint64_t v15 = *a1;
          uint64_t v16 = (char *)v9 - (char *)*a1;
          uint64_t v17 = v16 >> 2;
          unint64_t v18 = (v16 >> 2) + 1;
          if (v18 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v14 - (void)v15;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            if (v20 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v21 = operator new(4 * v20);
            double v22 = (int *)&v21[4 * v17];
            *double v22 = v13;
            uint64_t v23 = (uint64_t)(v22 + 1);
            if (v9 == v15) {
              goto LABEL_44;
            }
          }
          else
          {
            int v21 = 0;
            double v22 = (int *)(4 * v17);
            *(_DWORD *)(4 * v17) = v13;
            uint64_t v23 = 4 * v17 + 4;
            if (v9 == v15) {
              goto LABEL_44;
            }
          }
          unint64_t v33 = (char *)(v9 - 1) - (char *)v15;
          if (v33 < 0xBC)
          {
            int v34 = v9;
            goto LABEL_43;
          }
          if (&v21[v16 - 4 - (v33 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v16 - 4])
          {
            int v34 = v9;
            do
            {
LABEL_43:
              int v35 = *--v34;
              *--double v22 = v35;
            }
            while (v34 != v15);
            goto LABEL_44;
          }
          if ((int *)((char *)v9 - (v33 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v9 - 1)
          {
            int v34 = v9;
            goto LABEL_43;
          }
          if ((unint64_t)((char *)v9 - &v21[v16]) < 0x20)
          {
            int v34 = v9;
            goto LABEL_43;
          }
          uint64_t v42 = (v33 >> 2) + 1;
          uint64_t v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
          int v34 = &v9[v43 / 0xFFFFFFFFFFFFFFFCLL];
          double v22 = (int *)((char *)v22 - v43);
          unint64_t v44 = &v21[4 * v17 - 16];
          double v45 = v9 - 4;
          uint64_t v46 = v42 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *unint64_t v44 = v47;
            v44 -= 2;
            v45 -= 8;
            v46 -= 8;
          }
          while (v46);
          if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_43;
          }
          goto LABEL_44;
        }
LABEL_3:
        *v9++ = v13;
        a1[1] = v9;
        if (++v7 == v6) {
          return;
        }
      }
      int v24 = v10 ^ 1;
      if (v24 >= (int)v12)
      {
        int v13 = -1;
        unint64_t v25 = (unint64_t)a1[2];
        if ((unint64_t)v9 < v25) {
          goto LABEL_3;
        }
      }
      else
      {
        int v13 = *(_DWORD *)(v11 + 4 * v24);
        unint64_t v25 = (unint64_t)a1[2];
        if ((unint64_t)v9 < v25) {
          goto LABEL_3;
        }
      }
      unint64_t v15 = *a1;
      uint64_t v26 = (char *)v9 - (char *)*a1;
      uint64_t v27 = v26 >> 2;
      unint64_t v28 = (v26 >> 2) + 1;
      if (v28 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v25 - (void)v15;
      if (v29 >> 1 > v28) {
        unint64_t v28 = v29 >> 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v28;
      }
      if (v20)
      {
        if (v20 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v21 = operator new(4 * v20);
        double v22 = (int *)&v21[4 * v27];
        *double v22 = v13;
        uint64_t v23 = (uint64_t)(v22 + 1);
        if (v9 == v15) {
          goto LABEL_44;
        }
      }
      else
      {
        int v21 = 0;
        double v22 = (int *)(4 * v27);
        *(_DWORD *)(4 * v27) = v13;
        uint64_t v23 = 4 * v27 + 4;
        if (v9 == v15) {
          goto LABEL_44;
        }
      }
      unint64_t v30 = (char *)(v9 - 1) - (char *)v15;
      if (v30 < 0xBC)
      {
        uint64_t v31 = v9;
        goto LABEL_34;
      }
      if (&v21[v26 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v26 - 4])
      {
        uint64_t v31 = v9;
        do
        {
LABEL_34:
          int v32 = *--v31;
          *--double v22 = v32;
        }
        while (v31 != v15);
        goto LABEL_44;
      }
      if ((int *)((char *)v9 - (v30 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v9 - 1)
      {
        uint64_t v31 = v9;
        goto LABEL_34;
      }
      if ((unint64_t)((char *)v9 - v21 - v26) < 0x20)
      {
        uint64_t v31 = v9;
        goto LABEL_34;
      }
      uint64_t v36 = (v30 >> 2) + 1;
      uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v31 = &v9[v37 / 0xFFFFFFFFFFFFFFFCLL];
      double v22 = (int *)((char *)v22 - v37);
      int v38 = &v21[4 * v27 - 16];
      unint64_t v39 = v9 - 4;
      uint64_t v40 = v36 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *int v38 = v41;
        v38 -= 2;
        v39 -= 8;
        v40 -= 8;
      }
      while (v40);
      if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_34;
      }
LABEL_44:
      *a1 = v22;
      a1[1] = (int *)v23;
      a1[2] = (int *)&v21[4 * v20];
      if (v15) {
        operator delete(v15);
      }
      uint64_t v6 = v48;
      a1[1] = (int *)v23;
      ++v7;
      uint64_t v9 = (int *)v23;
    }
    while (v7 != v48);
  }
}

void sub_23CD29A08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CreateCVRPCutGenerator(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void **a8@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  a8[6] = 0;
  uint64_t v16 = *a8;
  if (*a8)
  {
    a8[1] = v16;
    operator delete(v16);
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
  *(_OWORD *)a8 = *(_OWORD *)v42;
  a8[2] = v43;
  int v27 = a1;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  unint64_t v28 = 0;
  uint64_t v17 = *(const void **)a2;
  int64_t v18 = *(void *)(a2 + 8) - *(void *)a2;
  if (v18)
  {
    if (v18 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v28 = operator new(v18);
    unint64_t v30 = (char *)v28 + 4 * (v18 >> 2);
    memcpy(v28, v17, v18);
    uint64_t v29 = v30;
  }
  uint64_t v31 = 0;
  int v32 = 0;
  unint64_t v33 = 0;
  uint64_t v19 = *(const void **)a3;
  int64_t v20 = *(void *)(a3 + 8) - *(void *)a3;
  if (v20)
  {
    if (v20 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = operator new(v20);
    unint64_t v33 = (char *)v31 + 4 * (v20 >> 2);
    memcpy(v31, v19, v20);
    int v32 = v33;
  }
  int v34 = 0;
  int v35 = 0;
  uint64_t v36 = 0;
  int v21 = *(const void **)a5;
  int64_t v22 = *(void *)(a5 + 8) - *(void *)a5;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v34 = operator new(v22);
    uint64_t v36 = (char *)v34 + 8 * (v22 >> 3);
    memcpy(v34, v21, v22);
    int v35 = v36;
  }
  uint64_t v37 = a6;
  int v38 = 0;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v23 = *(int **)a4;
  int64_t v24 = *(void *)(a4 + 8) - *(void *)a4;
  if (v24)
  {
    if (v24 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v38 = operator new(v24);
    uint64_t v40 = (char *)v38 + 4 * (v24 >> 2);
    memcpy(v38, v23, v24);
    unint64_t v39 = v40;
  }
  uint64_t v41 = a7;
  operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::$_0((uint64_t)v42, &v27);
  unint64_t v25 = operator new(0x80uLL);
  *unint64_t v25 = &unk_26F0C4298;
  operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::$_0((uint64_t)(v25 + 1), (int *)v42);
  unint64_t v51 = v25;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v50, a8 + 3);
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
    uint64_t v26 = __p;
    if (__p)
    {
LABEL_19:
      uint64_t v49 = v26;
      operator delete(v26);
    }
  }
  else
  {
    if (v51) {
      (*(void (**)(void *))(*v51 + 40))(v51);
    }
    uint64_t v26 = __p;
    if (__p) {
      goto LABEL_19;
    }
  }
  if (v46)
  {
    long long v47 = v46;
    operator delete(v46);
  }
  if (v44)
  {
    double v45 = v44;
    operator delete(v44);
  }
  if (v42[1])
  {
    uint64_t v43 = v42[1];
    operator delete(v42[1]);
  }
  if (v38)
  {
    unint64_t v39 = v38;
    operator delete(v38);
  }
  if (v34)
  {
    int v35 = v34;
    operator delete(v34);
  }
  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
}

void sub_23CD29D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  operator delete(v26);
  operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::~$_0(&a25);
  operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::~$_0(&a10);
  operations_research::sat::CutGenerator::~CutGenerator(v25);
  _Unwind_Resume(a1);
}

void sub_23CD29DB8(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CD29DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a21)
  {
    operator delete(a21);
    int64_t v24 = a17;
    if (!a17)
    {
LABEL_3:
      unint64_t v25 = a14;
      if (!a14) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int64_t v24 = a17;
    if (!a17) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  unint64_t v25 = a14;
  if (!a14)
  {
LABEL_4:
    uint64_t v26 = __p;
    if (!__p) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v25);
  uint64_t v26 = __p;
  if (!__p)
  {
LABEL_6:
    operations_research::sat::CutGenerator::~CutGenerator(v22);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v26);
  goto LABEL_6;
}

void sub_23CD29E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11) {
    JUMPOUT(0x23CD29DF8);
  }
  JUMPOUT(0x23CD29DF0);
}

void *operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::~$_0(void *a1)
{
  unint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = &unk_26F0C4418;
  a2[1] = this;
  a2[3] = a2;
  return this;
}

unint64_t operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageDecision(operations_research::sat::LinearProgrammingConstraint *this)
{
  uint64_t v2 = (*((void *)this + 2582) - *((void *)this + 2581)) >> 4;
  uint64_t v3 = (int *)((char *)this + 20576);
  operations_research::RevRepository<int>::SaveState((void *)this + 2573, (int *)this + 5144);
  int v4 = *v3;
  if (*v3 >= (int)v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *((void *)this + 2490);
  uint64_t v6 = (void *)*((void *)this + 2503);
  uint64_t v7 = (int *)(*((void *)this + 2581) + 16 * v4 + 8);
  while (1)
  {
    uint64_t v10 = *v7;
    v7 += 4;
    uint64_t v9 = v10;
    uint64_t v11 = *(int *)(v5 + 4 * v10);
    unint64_t v12 = *(int *)(v6[51] + 4 * v11);
    if (v12 == -1
      || ((*(void *)(*(void *)(v6[117] + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    {
      uint64_t v8 = v6[5];
      if (*(void *)(v8 + 12 * (int)v11) + *(void *)(v8 + 12 * (int)(v11 ^ 1))) {
        break;
      }
    }
    if (v2 == ++v4) {
      return 0xFFFFFFFFLL;
    }
  }
  int *v3 = v4;
  if (v9 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v13 = *(_DWORD *)(v5 + 4 * v9);
  int64_t v14 = -*(void *)(v8 + 12 * (v13 ^ 1));
  *(_DWORD *)int v34 = v13;
  int64_t v15 = vcvtpd_s64_f64(*(double *)(*((void *)this + 2541)+ 8* *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2493, (int *)v34))+ -0.0001);
  if (v15 >= v14)
  {
    uint64_t v26 = (unsigned int *)*((void *)this + 2506);
    *(_DWORD *)int v34 = v13;
    *(void *)&v34[4] = v14;
    unint64_t result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v26, *(const char **)v34, SHIDWORD(v14));
    if (((*(void *)(*(void *)(*((void *)this + 2504) + 24)
                     + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) == 0)
      return result;
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2598);
    int v27 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(result) ", 62);
    goto LABEL_25;
  }
  int64_t v16 = *(void *)(*(void *)(*((void *)this + 2503) + 40) + 12 * v13);
  *(_DWORD *)int v34 = v13;
  int64_t v17 = vcvtmd_s64_f64(*(double *)(*((void *)this + 2541)+ 8* *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2493, (int *)v34))+ 0.0001);
  if (v16 >= v17)
  {
    unint64_t v28 = (unsigned int *)*((void *)this + 2506);
    uint64_t v29 = 0x7FFFFFFFFFFFFFFFLL;
    if (v16 >= (uint64_t)0x8000000000000002) {
      uint64_t v29 = -v16;
    }
    *(_DWORD *)int v34 = v13 ^ 1;
    *(void *)&v34[4] = v29;
    unint64_t result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v28, *(const char **)v34, SHIDWORD(v29));
    if (((*(void *)(*(void *)(*((void *)this + 2504) + 24)
                     + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) == 0)
      return result;
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2610);
    unint64_t v30 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(result) ", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
    int v32 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
    std::ostream::operator<<();
LABEL_25:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v34);
  }
  int v18 = *(_DWORD *)(*((void *)this + 2563) + 4 * v9);
  double v19 = 0.0;
  double v20 = 0.0;
  if (v18 >= 1) {
    double v20 = *(double *)(*((void *)this + 2557) + 8 * v9) / (double)v18;
  }
  int v21 = *(_DWORD *)(*((void *)this + 2566) + 4 * v9);
  if (v21 >= 1) {
    double v19 = *(double *)(*((void *)this + 2560) + 8 * v9) / (double)v21;
  }
  int64_t v22 = (unsigned int *)*((void *)this + 2506);
  if (v19 >= v20)
  {
    *(_DWORD *)int v34 = v13;
    *(void *)&v34[4] = v15;
    unint64_t result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v22, *(const char **)v34, SHIDWORD(v15));
    if (((*(void *)(*(void *)(*((void *)this + 2504) + 24)
                     + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) == 0)
      return result;
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2633);
    unint64_t v33 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(result) ", 62);
    goto LABEL_25;
  }
  if (v17 >= (uint64_t)0x8000000000000002) {
    uint64_t v23 = -v17;
  }
  else {
    uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(_DWORD *)int v34 = v13 ^ 1;
  *(void *)&v34[4] = v23;
  unint64_t result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v22, *(const char **)v34, SHIDWORD(v23));
  if (((*(void *)(*(void *)(*((void *)this + 2504) + 24)
                   + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2628);
    unint64_t v25 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(result) ", 62);
    goto LABEL_25;
  }
  return result;
}

void sub_23CD2A310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD2A318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD2A320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD2A328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::RevRepository<int>::SaveState(void *a1, int *a2)
{
  if (a1[2] != a1[3])
  {
    int v4 = *a2;
    uint64_t v6 = (char *)a1[6];
    unint64_t v5 = a1[7];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = (char **)(a1 + 5);
      uint64_t v9 = (char *)a1[5];
      uint64_t v10 = (v6 - v9) >> 4;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v5 - (void)v9;
      if (v12 >> 3 > v11) {
        unint64_t v11 = v12 >> 3;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int64_t v14 = (char *)operator new(16 * v13);
      }
      else
      {
        int64_t v14 = 0;
      }
      int64_t v15 = &v14[16 * v10];
      *(void *)int64_t v15 = a2;
      *((_DWORD *)v15 + 2) = v4;
      uint64_t v7 = v15 + 16;
      if (v6 != v9)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v6 - 1);
          v15 -= 16;
          v6 -= 16;
        }
        while (v6 != v9);
        uint64_t v6 = *v8;
      }
      a1[5] = v15;
      a1[6] = v7;
      a1[7] = &v14[16 * v13];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *(void *)uint64_t v6 = a2;
      *((_DWORD *)v6 + 2) = v4;
      uint64_t v7 = v6 + 16;
    }
    a1[6] = v7;
  }
}

operations_research::sat::LinearConstraintManager *operations_research::sat::LinearConstraintManager::LinearConstraintManager(operations_research::sat::LinearConstraintManager *this, operations_research::sat::Model *a2)
{
  *(void *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  *((void *)this + 22) = 0;
  *((void *)this + 21) = (char *)this + 176;
  *((void *)this + 1) = v4;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 10) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 23) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_WORD *)this + 96) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + 29) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((void *)this + 30) = a2;
  *((void *)this + 31) = 0x3FF0000000000000;
  *((_DWORD *)this + 64) = 0;
  return this;
}

void sub_23CD2A4FC(_Unwind_Exception *a1)
{
  unint64_t v5 = *(void **)(v1 + 208);
  if (v5)
  {
    *(void *)(v1 + 216) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v2, *(char **)(v1 + 176));
  absl::lts_2020_02_25::flat_hash_map<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::~flat_hash_map(v3);
  uint64_t v6 = *(void **)(v1 + 56);
  if (v6)
  {
    *(void *)(v1 + 64) = v6;
    operator delete(v6);
  }
  gtl::ITIVector<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>,operations_research::sat::LinearConstraintManager::ConstraintInfo,std::allocator<operations_research::sat::LinearConstraintManager::ConstraintInfo>>::~ITIVector((void **)(v1 + 32));
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void **gtl::ITIVector<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>,operations_research::sat::LinearConstraintManager::ConstraintInfo,std::allocator<operations_research::sat::LinearConstraintManager::ConstraintInfo>>::~ITIVector(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 11);
        if (v5)
        {
          *((void *)v3 - 10) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 14);
        if (v6)
        {
          *((void *)v3 - 13) = v6;
          operator delete(v6);
        }
        v3 -= 128;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::IntegerRoundingCutHelper::~IntegerRoundingCutHelper(operations_research::sat::IntegerRoundingCutHelper *this)
{
  uint64_t v2 = (void *)*((void *)this + 31);
  if (v2)
  {
    *((void *)this + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3)
  {
    *((void *)this + 28) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 24);
  if (v4)
  {
    *((void *)this + 25) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 21);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 18);
  if (v6)
  {
    *((void *)this + 19) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 15);
  if (v7)
  {
    *((void *)this + 16) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 12);
  if (v8)
  {
    *((void *)this + 13) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 9);
  if (v9)
  {
    *((void *)this + 10) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 6);
  if (v10)
  {
    *((void *)this + 7) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 3);
  if (v11)
  {
    *((void *)this + 4) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v12;
    operator delete(v12);
  }
}

void *operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraintLpSolution>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C41E0;
  a1[1] = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x80C40D6874129);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraintLpSolution>::~Delete(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_26F0C41E0;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x23ECF2BC0](v1, 0x80C40D6874129);
  }

  JUMPOUT(0x23ECF2BC0);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    int64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      int v18 = &v5[16 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      double v20 = *a1;
      int v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  int64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(result + 8) + 16 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v18) = *(_OWORD *)(v25 + 16 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          long long v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(void *)(result + 8) + 16 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 40) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

void std::vector<std::unique_ptr<operations_research::sat::IntegerSumLE>>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    unint64_t v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (!v5) {
        return;
      }
      goto LABEL_30;
    }
    unint64_t v18 = v5 - v7 - 8;
    if (v18 < 0x78 || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5) {
      goto LABEL_39;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v14 -= v20;
    uint64_t v6 = &v5[-v20];
    unint64_t v21 = v5 - 16;
    unint64_t v22 = &v13[8 * v9 - 16];
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *((_OWORD *)v21 - 1);
      long long v24 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)unint64_t v21 = 0uLL;
      *((_OWORD *)v22 - 1) = v25;
      *(_OWORD *)unint64_t v22 = v24;
      v21 -= 32;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        uint64_t v26 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)uint64_t v6 = 0;
        *((void *)v14 - 1) = v26;
        v14 -= 8;
      }
      while (v6 != v7);
    }
    uint64_t v27 = (char *)*a1;
    uint64_t v6 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6 != v27)
    {
      do
      {
        uint64_t v29 = *((void *)v6 - 1);
        v6 -= 8;
        uint64_t v28 = v29;
        *(void *)uint64_t v6 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
      }
      while (v6 != v27);
      uint64_t v6 = v27;
    }
    if (v6)
    {
LABEL_30:
      operator delete(v6);
    }
  }
}

char *std::vector<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::__assign_with_size[abi:ne180100]<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const*,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  unint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) >= __sz)
  {
    unint64_t v18 = a1[1];
    unint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 2);
    if (v19 >= __sz)
    {
      long long v24 = result;
      if (a2 != a3)
      {
        long long v25 = result;
        do
        {
          *(_DWORD *)long long v25 = *(_DWORD *)v6;
          *(void *)(v25 + 4) = *(void *)(v6 + 4);
          v24 += 12;
          v6 += 12;
          v25 += 12;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[12 * v19];
      if (v14 != result)
      {
        do
        {
          *(_DWORD *)unint64_t result = *(_DWORD *)v6;
          *(void *)(result + 4) = *(void *)(v6 + 4);
          v6 += 12;
          result += 12;
        }
        while (v6 != v20);
      }
      unint64_t v21 = v14;
      if (v20 != a3)
      {
        unint64_t v22 = v14;
        do
        {
          uint64_t v23 = *(void *)v20;
          *((_DWORD *)v22 + 2) = *((_DWORD *)v20 + 2);
          *(void *)unint64_t v22 = v23;
          v22 += 12;
          v20 += 12;
          v21 += 12;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x1555555555555555) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555) {
LABEL_26:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 12 * v12;
    unint64_t result = (char *)operator new(12 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    size_t v15 = result;
    if (v6 != a3)
    {
      unint64_t result = (char *)memcpy(result, v6, 12 * ((a3 - v6 - 12) / 0xCuLL) + 12);
      size_t v15 = &v14[12 * ((a3 - v6 - 12) / 0xCuLL) + 12];
    }
    int64_t v16 = v15 - v14;
    unint64_t v17 = a1 + 1;
  }
  *unint64_t v17 = &v14[v16];
  return result;
}

void *std::vector<operations_research::sat::IntegerLiteral>::__assign_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral*,operations_research::sat::IntegerLiteral*>(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555) {
LABEL_23:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 12 * v12;
    unint64_t result = operator new(12 * v12);
    uint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      unint64_t result = memcpy(result, v6, v14);
    }
    size_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  size_t v15 = (void **)(result + 1);
  int64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 2) >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    unint64_t v18 = (void *)*result;
LABEL_21:
    unint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  unint64_t v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    unint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    unint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *size_t v15 = &v9[v14];
  return result;
}

void google::MakeCheckOpString<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CD2B484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::unique_ptr<operations_research::sat::IntegerSumLE>>::__emplace_back_slow_path<operations_research::sat::IntegerSumLE*&>(char **a1, void *a2)
{
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = v3 - *a1;
  uint64_t v6 = v5 >> 3;
  unint64_t v7 = (v5 >> 3) + 1;
  if (v7 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = a1[2] - v4;
  if (v9 >> 2 > v7) {
    unint64_t v7 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(8 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  unint64_t v12 = &v11[8 * v6];
  uint64_t v13 = &v11[8 * v10];
  *(void *)unint64_t v12 = *a2;
  size_t v14 = v12 + 8;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3) {
      return v14;
    }
    goto LABEL_26;
  }
  unint64_t v15 = v3 - v4 - 8;
  if (v15 < 0x78 || &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v5 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v3) {
    goto LABEL_34;
  }
  uint64_t v16 = (v15 >> 3) + 1;
  uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v12 -= v17;
  unint64_t v18 = &v3[-v17];
  unint64_t v19 = v3 - 16;
  uint64_t v20 = &v11[8 * v6 - 16];
  uint64_t v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v23 = *((_OWORD *)v19 - 1);
    long long v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)unint64_t v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)uint64_t v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  uint64_t v3 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      uint64_t v24 = *((void *)v3 - 1);
      v3 -= 8;
      *(void *)uint64_t v3 = 0;
      *((void *)v12 - 1) = v24;
      v12 -= 8;
    }
    while (v3 != v4);
  }
  long long v25 = *a1;
  uint64_t v3 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3 != v25)
  {
    do
    {
      uint64_t v27 = *((void *)v3 - 1);
      v3 -= 8;
      uint64_t v26 = v27;
      *(void *)uint64_t v3 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
    while (v3 != v25);
    uint64_t v3 = v25;
  }
  if (v3) {
LABEL_26:
  }
    operator delete(v3);
  return v14;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10 = result;
LABEL_2:
  uint64_t v11 = a2 - 16;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v68 = a5;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = a2 - v12;
    unint64_t v15 = v14 >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v27 = *(double *)v10;
          double v28 = *(double *)(a2 - 16);
          if (*(double *)v10 >= v28)
          {
            if (v28 < v27) {
              return result;
            }
            int v29 = *(_DWORD *)(v10 + 8);
            int v30 = *(_DWORD *)(a2 - 8);
            if (v29 >= v30) {
              return result;
            }
          }
          else
          {
            int v29 = *(_DWORD *)(v10 + 8);
            int v30 = *(_DWORD *)(a2 - 8);
          }
          *(double *)unint64_t v10 = v28;
          *(double *)(a2 - 16) = v27;
          *(_DWORD *)(v10 + 8) = v30;
          *(_DWORD *)(a2 - 8) = v29;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v10, v10 + 16, v11);
        case 4uLL:
          unint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v10, v10 + 16, v10 + 32);
          double v31 = *(double *)(v10 + 32);
          double v32 = *(double *)(a2 - 16);
          if (v31 >= v32)
          {
            if (v32 < v31) {
              return result;
            }
            int v33 = *(_DWORD *)(v10 + 40);
            int v34 = *(_DWORD *)(a2 - 8);
            if (v33 >= v34) {
              return result;
            }
          }
          else
          {
            int v33 = *(_DWORD *)(v10 + 40);
            int v34 = *(_DWORD *)(a2 - 8);
          }
          *(double *)(v10 + 32) = v32;
          *(double *)(a2 - 16) = v31;
          *(_DWORD *)(v10 + 40) = v34;
          *(_DWORD *)(a2 - 8) = v33;
          double v35 = *(double *)(v10 + 16);
          double v36 = *(double *)(v10 + 32);
          if (v35 >= v36)
          {
            if (v36 < v35) {
              return result;
            }
            int v37 = *(_DWORD *)(v10 + 24);
            int v38 = *(_DWORD *)(v10 + 40);
            if (v37 >= v38) {
              return result;
            }
          }
          else
          {
            int v37 = *(_DWORD *)(v10 + 24);
            int v38 = *(_DWORD *)(v10 + 40);
          }
          *(double *)(v10 + 16) = v36;
          *(double *)(v10 + 32) = v35;
          *(_DWORD *)(v10 + 24) = v38;
          *(_DWORD *)(v10 + 40) = v37;
          double v39 = *(double *)v10;
          if (*(double *)v10 >= v36)
          {
            if (v36 < v39) {
              return result;
            }
            int v40 = *(_DWORD *)(v10 + 8);
            if (v40 >= v38) {
              return result;
            }
          }
          else
          {
            int v40 = *(_DWORD *)(v10 + 8);
          }
          *(double *)unint64_t v10 = v36;
          *(double *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 8) = v38;
          *(_DWORD *)(v10 + 24) = v40;
          return result;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v10, v10 + 16, v10 + 32, v10 + 48, v11);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v56 = (v15 - 2) >> 1;
        unint64_t v57 = v56 + 1;
        uint64_t v58 = v10 + 16 * v56;
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v10, a3, v14 >> 4, v58);
          v58 -= 16;
          --v57;
        }
        while (v57);
        unint64_t v59 = (unint64_t)v14 >> 4;
        do
        {
          unint64_t result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>>,std::pair<double,int>*>((uint64_t *)v10, a2, a3, v59);
          a2 -= 16;
        }
        while (v59-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = (uint64_t *)(v10 + 16 * (v15 >> 1));
    if ((unint64_t)v14 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>((uint64_t)v18, v10, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v10, (uint64_t)v18, v11);
      uint64_t v19 = v11;
      unint64_t v20 = v10 + 16 * v17;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v10 + 16, v20 - 16, a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v10 + 32, v10 + 16 + 16 * v17, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v20 - 16, (uint64_t)v18, v10 + 16 + 16 * v17);
      uint64_t v21 = *(void *)v10;
      *(void *)unint64_t v10 = *v18;
      *unint64_t v18 = v21;
      int v22 = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v20 + 8);
      *(_DWORD *)(v20 + 8) = v22;
      uint64_t v11 = v19;
      a5 = v68;
      if (v68) {
        goto LABEL_15;
      }
    }
    double v23 = *(double *)(v10 - 16);
    if (*(double *)v10 >= v23 && (v23 < *(double *)v10 || *(_DWORD *)(v10 + 8) >= *(_DWORD *)(v10 - 8)))
    {
      unint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::greater<std::pair<double,int>> &>(v10, a2);
      unint64_t v12 = result;
LABEL_20:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::greater<std::pair<double,int>> &>(v10, a2);
    if ((v25 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v10, v24);
    unint64_t v12 = v24 + 16;
    unint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v24 + 16, a2);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_18:
      unint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*,false>(v10, v24, a3, -v16, a5 & 1);
      unint64_t v12 = v24 + 16;
      goto LABEL_20;
    }
  }
  unint64_t v41 = v10 + 16;
  BOOL v43 = v10 == a2 || v41 == a2;
  if (a5)
  {
    if (v43) {
      return result;
    }
    uint64_t v44 = 0;
    unint64_t v45 = v10;
LABEL_50:
    unint64_t v46 = v45;
    unint64_t v45 = v41;
    double v47 = *(double *)v46;
    double v48 = *(double *)(v46 + 16);
    if (*(double *)v46 >= v48)
    {
      if (v48 < v47) {
        goto LABEL_49;
      }
      int v50 = *(_DWORD *)(v46 + 8);
      int v49 = *(_DWORD *)(v46 + 24);
      if (v50 >= v49) {
        goto LABEL_49;
      }
    }
    else
    {
      int v49 = *(_DWORD *)(v46 + 24);
      int v50 = *(_DWORD *)(v46 + 8);
    }
    *(double *)(v46 + 16) = v47;
    *(_DWORD *)(v45 + 8) = v50;
    unint64_t v51 = v10;
    if (v46 == v10) {
      goto LABEL_48;
    }
    uint64_t v52 = v44;
    while (1)
    {
      double v55 = *(double *)(v10 + v52 - 16);
      if (v55 >= v48)
      {
        if (v48 < v55)
        {
          unint64_t v51 = v10 + v52;
          goto LABEL_48;
        }
        int v53 = *(_DWORD *)(v10 + v52 - 8);
        if (v53 >= v49)
        {
          unint64_t v51 = v46;
LABEL_48:
          *(double *)unint64_t v51 = v48;
          *(_DWORD *)(v51 + 8) = v49;
LABEL_49:
          unint64_t v41 = v45 + 16;
          v44 += 16;
          if (v45 + 16 == a2) {
            return result;
          }
          goto LABEL_50;
        }
      }
      else
      {
        int v53 = *(_DWORD *)(v10 + v52 - 8);
      }
      v46 -= 16;
      uint64_t v54 = v10 + v52;
      *(double *)uint64_t v54 = v55;
      *(_DWORD *)(v54 + 8) = v53;
      v52 -= 16;
      if (!v52)
      {
        unint64_t v51 = v10;
        goto LABEL_48;
      }
    }
  }
  if (!v43)
  {
    for (unint64_t i = v10 + 8; ; i += 16)
    {
      unint64_t v62 = v10;
      unint64_t v10 = v41;
      double v63 = *(double *)v62;
      double v64 = *(double *)(v62 + 16);
      if (*(double *)v62 < v64) {
        break;
      }
      if (v64 >= v63)
      {
        int v66 = *(_DWORD *)(v62 + 8);
        int v65 = *(_DWORD *)(v62 + 24);
        if (v66 < v65) {
          goto LABEL_84;
        }
      }
LABEL_79:
      v41 += 16;
      if (v10 + 16 == a2) {
        return result;
      }
    }
    int v65 = *(_DWORD *)(v62 + 24);
LABEL_84:
    for (unint64_t j = i; ; j -= 16)
    {
      *(double *)(j + 8) = v63;
      *(_DWORD *)(j + 16) = *(_DWORD *)j;
      double v63 = *(double *)(j - 24);
      if (v63 >= v64 && (v64 < v63 || *(_DWORD *)(j - 16) >= v65)) {
        break;
      }
    }
    *(double *)(j - 8) = v64;
    *(_DWORD *)unint64_t j = v65;
    goto LABEL_79;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a1;
  double v4 = *(double *)a2;
  if (*(double *)a1 < *(double *)a2 || v4 >= v3 && *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8))
  {
    double v5 = *(double *)a3;
    if (v4 >= *(double *)a3)
    {
      int v10 = *(_DWORD *)(a2 + 8);
      if (v5 < v4 || (int v6 = *(_DWORD *)(a3 + 8), v10 >= v6))
      {
        *(double *)a1 = v4;
        *(double *)a2 = v3;
        int v13 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a2 + 8) = v13;
        double v14 = *(double *)a3;
        if (v3 >= *(double *)a3)
        {
          if (v14 < v3) {
            return 1;
          }
          int v15 = *(_DWORD *)(a3 + 8);
          if (v13 >= v15) {
            return 1;
          }
        }
        else
        {
          int v15 = *(_DWORD *)(a3 + 8);
        }
        *(double *)a2 = v14;
        *(double *)a3 = v3;
        *(_DWORD *)(a2 + 8) = v15;
        uint64_t result = 2;
        *(_DWORD *)(a3 + 8) = v13;
        return result;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(a3 + 8);
    }
    *(double *)a1 = v5;
    *(double *)a3 = v3;
    int v11 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a3 + 8) = v11;
    return 1;
  }
  double v7 = *(double *)a3;
  if (v4 >= *(double *)a3)
  {
    if (v7 < v4) {
      return 0;
    }
    int v8 = *(_DWORD *)(a2 + 8);
    int v9 = *(_DWORD *)(a3 + 8);
    if (v8 >= v9) {
      return 0;
    }
  }
  else
  {
    int v8 = *(_DWORD *)(a2 + 8);
    int v9 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v7;
  *(double *)a3 = v4;
  *(_DWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a3 + 8) = v8;
  double v16 = *(double *)a1;
  double v17 = *(double *)a2;
  if (*(double *)a1 < *(double *)a2)
  {
    int v18 = *(_DWORD *)(a1 + 8);
    int v19 = *(_DWORD *)(a2 + 8);
LABEL_18:
    *(double *)a1 = v17;
    *(double *)a2 = v16;
    *(_DWORD *)(a1 + 8) = v19;
    uint64_t result = 2;
    *(_DWORD *)(a2 + 8) = v18;
    return result;
  }
  if (v17 >= v16)
  {
    int v18 = *(_DWORD *)(a1 + 8);
    int v19 = *(_DWORD *)(a2 + 8);
    if (v18 < v19) {
      goto LABEL_18;
    }
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::greater<std::pair<double,int>> &>(unint64_t a1, unint64_t a2)
{
  double v2 = *(double *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  double v4 = *(double *)(a2 - 16);
  if (v4 >= *(double *)a1 && (v2 < v4 || *(_DWORD *)(a2 - 8) >= v3))
  {
    for (unint64_t i = a1 + 16; i < a2 && *(double *)i >= v2 && (v2 < *(double *)i || *(_DWORD *)(i + 8) >= v3); i += 16)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      double v6 = *(double *)(i + 16);
      i += 16;
      double v7 = v6;
    }
    while (v6 >= v2 && (v2 < v7 || *(_DWORD *)(i + 8) >= v3));
  }
  if (i < a2)
  {
    for (a2 -= 16; v4 < v2 || v2 >= v4 && *(_DWORD *)(a2 + 8) < v3; a2 -= 16)
    {
      double v8 = *(double *)(a2 - 16);
      double v4 = v8;
    }
  }
  if (i < a2)
  {
    double v9 = *(double *)i;
    double v10 = *(double *)a2;
    do
    {
      *(double *)unint64_t i = v10;
      *(double *)a2 = v9;
      double v11 = *(double *)(i + 16);
      i += 16;
      double v9 = v11;
      int v12 = *(_DWORD *)(i - 8);
      *(_DWORD *)(i - 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v12;
      while (v9 >= v2 && (v2 < v9 || *(_DWORD *)(i + 8) >= v3))
      {
        double v13 = *(double *)(i + 16);
        i += 16;
        double v9 = v13;
      }
      do
      {
        do
        {
          double v14 = *(double *)(a2 - 16);
          a2 -= 16;
          double v10 = v14;
        }
        while (v14 < v2);
      }
      while (v2 >= v10 && *(_DWORD *)(a2 + 8) < v3);
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(void *)a1 = *(void *)(i - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 8);
  }
  *(double *)(i - 16) = v2;
  *(_DWORD *)(i - 8) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::greater<std::pair<double,int>> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *(double *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    double v5 = *(double *)(a1 + v2 + 16);
    if (v3 >= v5 && (v5 < v3 || v4 >= *(_DWORD *)(a1 + v2 + 24))) {
      break;
    }
    v2 += 16;
  }
  unint64_t v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      double v7 = *(double *)(a2 - 16);
      a2 -= 16;
      double v8 = v7;
    }
    while (v3 >= v7 && (v8 < v3 || v4 >= *(_DWORD *)(a2 + 8)));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        double v9 = *(double *)(a2 - 16);
        a2 -= 16;
        double v10 = v9;
        if (v3 < v9) {
          break;
        }
        if (v10 < v3) {
          goto LABEL_19;
        }
      }
      while (v4 >= *(_DWORD *)(a2 + 8) && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = a1 + v2 + 16;
  }
  else
  {
    double v12 = *(double *)a2;
    unint64_t v13 = a1 + v2 + 16;
    unint64_t v14 = a2;
    do
    {
      *(double *)unint64_t v13 = v12;
      *(double *)unint64_t v14 = v5;
      int v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          double v16 = *(double *)(v13 + 16);
          v13 += 16;
          double v5 = v16;
        }
        while (v3 < v16);
      }
      while (v5 >= v3 && v4 < *(_DWORD *)(v13 + 8));
      do
      {
        double v17 = *(double *)(v14 - 16);
        v14 -= 16;
        double v12 = v17;
      }
      while (v3 >= v17 && (v12 < v3 || v4 >= *(_DWORD *)(v14 + 8)));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(void *)a1 = *(void *)(v13 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(_DWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v19 = *(double *)a1;
      double v20 = *(double *)(a2 - 16);
      if (*(double *)a1 < v20)
      {
        int v21 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a2 - 8);
LABEL_24:
        *(double *)a1 = v20;
        *(double *)(a2 - 16) = v19;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        int v21 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a2 - 8);
        if (v21 < v22) {
          goto LABEL_24;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32);
      double v23 = *(double *)(a1 + 32);
      double v24 = *(double *)(a2 - 16);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        int v25 = *(_DWORD *)(a1 + 40);
        int v26 = *(_DWORD *)(a2 - 8);
        if (v25 >= v26) {
          return 1;
        }
      }
      else
      {
        int v25 = *(_DWORD *)(a1 + 40);
        int v26 = *(_DWORD *)(a2 - 8);
      }
      *(double *)(a1 + 32) = v24;
      *(double *)(a2 - 16) = v23;
      *(_DWORD *)(a1 + 40) = v26;
      *(_DWORD *)(a2 - 8) = v25;
      double v27 = *(double *)(a1 + 16);
      double v28 = *(double *)(a1 + 32);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        int v29 = *(_DWORD *)(a1 + 24);
        int v30 = *(_DWORD *)(a1 + 40);
        if (v29 >= v30) {
          return 1;
        }
      }
      else
      {
        int v29 = *(_DWORD *)(a1 + 24);
        int v30 = *(_DWORD *)(a1 + 40);
      }
      *(double *)(a1 + 16) = v28;
      *(double *)(a1 + 32) = v27;
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 40) = v29;
      double v31 = *(double *)a1;
      if (*(double *)a1 < v28)
      {
        int v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(double *)a1 = v28;
        *(double *)(a1 + 16) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        BOOL result = 1;
        *(_DWORD *)(a1 + 24) = v32;
        return result;
      }
      if (v28 >= v31)
      {
        int v32 = *(_DWORD *)(a1 + 8);
        if (v32 < v30) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32);
      uint64_t v7 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        double v11 = *(double *)v6;
        double v12 = *(double *)v7;
        if (*(double *)v6 >= *(double *)v7)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          int v14 = *(_DWORD *)(v6 + 8);
          int v13 = *(_DWORD *)(v7 + 8);
          if (v14 >= v13) {
            goto LABEL_7;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(v7 + 8);
          int v14 = *(_DWORD *)(v6 + 8);
        }
        *(double *)uint64_t v7 = v11;
        *(_DWORD *)(v7 + 8) = v14;
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          uint64_t v17 = a1 + v15;
          double v18 = *(double *)(a1 + v15 + 16);
          if (v18 < v12)
          {
            int v16 = *(_DWORD *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(double *)(v17 + 32) = v18;
            *(_DWORD *)(a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v12 >= v18)
        {
          int v16 = *(_DWORD *)(a1 + v15 + 24);
          if (v16 >= v13)
          {
            uint64_t v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *(double *)uint64_t v10 = v12;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8) {
          return v7 + 16 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a2, a3);
  double v11 = *(double *)a3;
  double v12 = *(double *)a4;
  if (*(double *)a3 >= *(double *)a4)
  {
    if (v12 < v11) {
      goto LABEL_16;
    }
    int v13 = *(_DWORD *)(a3 + 8);
    int v14 = *(_DWORD *)(a4 + 8);
    if (v13 >= v14) {
      goto LABEL_16;
    }
  }
  else
  {
    int v13 = *(_DWORD *)(a3 + 8);
    int v14 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v12;
  *(double *)a4 = v11;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a4 + 8) = v13;
  double v15 = *(double *)a2;
  double v16 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a3)
  {
    if (v16 < v15) {
      goto LABEL_16;
    }
    int v17 = *(_DWORD *)(a2 + 8);
    int v18 = *(_DWORD *)(a3 + 8);
    if (v17 >= v18) {
      goto LABEL_16;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a2 + 8);
    int v18 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v16;
  *(double *)a3 = v15;
  *(_DWORD *)(a2 + 8) = v18;
  *(_DWORD *)(a3 + 8) = v17;
  double v19 = *(double *)a1;
  double v20 = *(double *)a2;
  if (*(double *)a1 < *(double *)a2)
  {
    int v21 = *(_DWORD *)(a1 + 8);
    int v22 = *(_DWORD *)(a2 + 8);
LABEL_7:
    *(double *)a1 = v20;
    *(double *)a2 = v19;
    *(_DWORD *)(a1 + 8) = v22;
    *(_DWORD *)(a2 + 8) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    int v21 = *(_DWORD *)(a1 + 8);
    int v22 = *(_DWORD *)(a2 + 8);
    if (v21 < v22) {
      goto LABEL_7;
    }
  }
LABEL_16:
  double v23 = *(double *)a4;
  double v24 = *(double *)a5;
  if (*(double *)a4 >= *(double *)a5)
  {
    if (v24 < v23) {
      return result;
    }
    int v25 = *(_DWORD *)(a4 + 8);
    int v26 = *(_DWORD *)(a5 + 8);
    if (v25 >= v26) {
      return result;
    }
  }
  else
  {
    int v25 = *(_DWORD *)(a4 + 8);
    int v26 = *(_DWORD *)(a5 + 8);
  }
  *(double *)a4 = v24;
  *(double *)a5 = v23;
  *(_DWORD *)(a4 + 8) = v26;
  *(_DWORD *)(a5 + 8) = v25;
  double v27 = *(double *)a3;
  double v28 = *(double *)a4;
  if (*(double *)a3 >= *(double *)a4)
  {
    if (v28 < v27) {
      return result;
    }
    int v29 = *(_DWORD *)(a3 + 8);
    int v30 = *(_DWORD *)(a4 + 8);
    if (v29 >= v30) {
      return result;
    }
  }
  else
  {
    int v29 = *(_DWORD *)(a3 + 8);
    int v30 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v28;
  *(double *)a4 = v27;
  *(_DWORD *)(a3 + 8) = v30;
  *(_DWORD *)(a4 + 8) = v29;
  double v31 = *(double *)a2;
  double v32 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a3)
  {
    if (v32 < v31) {
      return result;
    }
    int v33 = *(_DWORD *)(a2 + 8);
    int v34 = *(_DWORD *)(a3 + 8);
    if (v33 >= v34) {
      return result;
    }
  }
  else
  {
    int v33 = *(_DWORD *)(a2 + 8);
    int v34 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v32;
  *(double *)a3 = v31;
  *(_DWORD *)(a2 + 8) = v34;
  *(_DWORD *)(a3 + 8) = v33;
  double v35 = *(double *)a1;
  double v36 = *(double *)a2;
  if (*(double *)a1 < *(double *)a2)
  {
    int v37 = *(_DWORD *)(a1 + 8);
    int v38 = *(_DWORD *)(a2 + 8);
LABEL_24:
    *(double *)a1 = v36;
    *(double *)a2 = v35;
    *(_DWORD *)(a1 + 8) = v38;
    *(_DWORD *)(a2 + 8) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    int v37 = *(_DWORD *)(a1 + 8);
    int v38 = *(_DWORD *)(a2 + 8);
    if (v37 < v38) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = result + 16 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        double v10 = *(double *)(v8 + 16);
        if (v10 < *(double *)v8 || *(double *)v8 >= v10 && *(_DWORD *)(v8 + 24) < *(_DWORD *)(result + 16 * v7 + 8))
        {
          v8 += 16;
          uint64_t v7 = v9;
        }
      }
      double v11 = *(double *)a4;
      double v12 = *(double *)v8;
      if (*(double *)a4 >= *(double *)v8)
      {
        int v13 = *(_DWORD *)(v8 + 8);
        if (v12 >= v11)
        {
          int v14 = *(_DWORD *)(a4 + 8);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          int v14 = *(_DWORD *)(a4 + 8);
        }
        *(double *)a4 = v12;
        *(_DWORD *)(a4 + 8) = v13;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = result + 16 * v7;
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              double v18 = *(double *)(v15 + 16);
              if (v18 < *(double *)v15
                || *(double *)v15 >= v18 && *(_DWORD *)(v15 + 24) < *(_DWORD *)(result + 16 * v7 + 8))
              {
                v15 += 16;
                uint64_t v7 = v17;
              }
            }
            double v19 = *(double *)v15;
            if (v11 < *(double *)v15) {
              break;
            }
            int v20 = *(_DWORD *)(v15 + 8);
            if (v19 >= v11 && v14 < v20) {
              break;
            }
            *(double *)uint64_t v8 = v19;
            *(_DWORD *)(v8 + 8) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *(double *)uint64_t v15 = v11;
        *(_DWORD *)(v15 + 8) = v14;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>>,std::pair<double,int>*>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *result;
    int v6 = *((_DWORD *)result + 2);
    uint64_t v7 = (double *)result;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        double v12 = v7[2];
        if (v12 < *v7 || *v7 >= v12 && *((_DWORD *)v7 + 6) < SLODWORD(v8[2 * v9 + 1]))
        {
          v7 += 2;
          uint64_t v4 = v11;
        }
      }
      *uint64_t v8 = *v7;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 2);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (double *)(a2 - 16))
    {
      *(void *)uint64_t v7 = v5;
      *((_DWORD *)v7 + 2) = v6;
      return result;
    }
    *uint64_t v7 = *(double *)(a2 - 16);
    *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 - 8);
    *(void *)(a2 - 16) = v5;
    *(_DWORD *)(a2 - 8) = v6;
    uint64_t v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      unint64_t v14 = ((unint64_t)v13 >> 4) - 2;
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = &result[2 * (v14 >> 1)];
      double v17 = *v7;
      double v18 = *(double *)v16;
      if (*v7 >= *(double *)v16)
      {
        if (v18 < v17) {
          return result;
        }
        int v19 = *((_DWORD *)v7 + 2);
        int v20 = result[2 * v15 + 1];
        if (v19 >= v20) {
          return result;
        }
      }
      else
      {
        int v19 = *((_DWORD *)v7 + 2);
        int v20 = *((_DWORD *)v16 + 2);
      }
      *uint64_t v7 = v18;
      *((_DWORD *)v7 + 2) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v23 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          int v21 = &result[2 * v15];
          double v24 = *(double *)v21;
          if (v17 < *(double *)v21)
          {
            int v22 = *((_DWORD *)v21 + 2);
          }
          else
          {
            if (v24 < v17) {
              break;
            }
            int v22 = result[2 * v15 + 1];
            if (v19 >= v22) {
              break;
            }
          }
          *(double *)uint64_t v16 = v24;
          *((_DWORD *)v16 + 2) = v22;
          uint64_t v16 = &result[2 * v15];
          if (v23 <= 1) {
            goto LABEL_19;
          }
        }
      }
      int v21 = v16;
LABEL_19:
      *(double *)int v21 = v17;
      *((_DWORD *)v21 + 2) = v19;
    }
  }
  return result;
}

uint64_t operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0::$_0(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v6 = (unsigned char *)*((void *)a2 + 1);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 2);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 5);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v16 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v15 = (unsigned char *)*((void *)a2 + 8);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v18 = (char *)operator new(v15 - v16);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v18;
    int v19 = &v18[4 * (v17 >> 2)];
    *(void *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 64) = v19;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  return a1;
}

void sub_23CD2C9DC(_Unwind_Exception *exception_object)
{
  int v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
    int64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v8 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[5] = v7;
  operator delete(v7);
  uint64_t v8 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[2] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_23CD2CA3C()
{
  if (!*v0) {
    JUMPOUT(0x23CD2CA00);
  }
  JUMPOUT(0x23CD2C9F8);
}

void *std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C4218;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C4218;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  unint64_t v1 = (int *)(a1 + 8);
  uint64_t v2 = operator new(0x60uLL);
  void *v2 = &unk_26F0C4218;
  std::__compressed_pair_elem<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CD2CBA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C4218;
  return std::__compressed_pair_elem<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), (int *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  double v3 = (void *)__p[5];
  if (v3)
  {
    __p[6] = v3;
    operator delete(v3);
  }
  int v4 = (void *)__p[2];
  if (v4)
  {
    __p[3] = v4;
    operator delete(v4);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
}

uint64_t std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat40CreateStronglyConnectedGraphCutGeneratorEiRKNSt3__16vectorIiNS1_9alloc"
                     "atorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat40CreateStronglyConnectedGraphCutGeneratorEiRKNSt3__16vectorI"
                                "iNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat40CreateStronglyConnectedGraphCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat40CreateStronglyConnectedGraphCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v6 = (unsigned char *)*((void *)a2 + 1);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 2);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 5);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v16 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v15 = (unsigned char *)*((void *)a2 + 8);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v18 = (char *)operator new(v15 - v16);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v18;
    int v19 = &v18[4 * (v17 >> 2)];
    *(void *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 64) = v19;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  return a1;
}

void sub_23CD2CEB8(_Unwind_Exception *exception_object)
{
  int v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
    int64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v8 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[5] = v7;
  operator delete(v7);
  uint64_t v8 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[2] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_23CD2CF18()
{
  if (!*v0) {
    JUMPOUT(0x23CD2CEDCLL);
  }
  JUMPOUT(0x23CD2CED4);
}

uint64_t operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::$_0(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v6 = (unsigned char *)*((void *)a2 + 1);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 2);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 5);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v16 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v15 = (unsigned char *)*((void *)a2 + 8);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v18 = (char *)operator new(v15 - v16);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v18;
    int v19 = &v18[8 * (v17 >> 3)];
    *(void *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 64) = v19;
  }
  uint64_t v20 = *((void *)a2 + 10);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = v20;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  int v22 = (unsigned char *)*((void *)a2 + 11);
  int v21 = (unsigned char *)*((void *)a2 + 12);
  int64_t v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v24 = (char *)operator new(v21 - v22);
    *(void *)(a1 + 88) = v24;
    *(void *)(a1 + 96) = v24;
    int v25 = &v24[4 * (v23 >> 2)];
    *(void *)(a1 + 104) = v25;
    memcpy(v24, v22, v23);
    *(void *)(a1 + 96) = v25;
  }
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  return a1;
}

void sub_23CD2D0C0(_Unwind_Exception *exception_object)
{
  int64_t v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
    uint64_t v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      uint64_t v9 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[8] = v8;
  operator delete(v8);
  uint64_t v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    uint64_t v10 = *v2;
    if (!*v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  v1[5] = v9;
  operator delete(v9);
  uint64_t v10 = *v2;
  if (!*v2) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  v1[2] = v10;
  operator delete(v10);
  goto LABEL_6;
}

void sub_23CD2D148()
{
  if (!*v0) {
    JUMPOUT(0x23CD2D0ECLL);
  }
  JUMPOUT(0x23CD2D0E4);
}

void *std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C4298;
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C4298;
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  unint64_t v1 = (int *)(a1 + 8);
  uint64_t v2 = operator new(0x80uLL);
  void *v2 = &unk_26F0C4298;
  std::__compressed_pair_elem<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CD2D2CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C4298;
  return std::__compressed_pair_elem<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), (int *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
}

void std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[12];
  if (v2)
  {
    __p[13] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[8];
  if (v3)
  {
    __p[9] = v3;
    operator delete(v3);
  }
  int v4 = (void *)__p[5];
  if (v4)
  {
    __p[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)__p[2];
  if (v5)
  {
    __p[3] = v5;
    operator delete(v5);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
}

uint64_t std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat22CreateCVRPCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2"
                     "_INS0_7LiteralENS3_IS8_EEEERKNS2_IxNS3_IxEEEExPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat22CreateCVRPCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiE"
                                "EEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEERKNS2_IxNS3_IxEEEExPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat22CreateCVRPCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEERKNS2_IxNS3_IxEEEExPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat22CreateCVRPCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEERKNS2_IxNS3_IxEEEExPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v6 = (unsigned char *)*((void *)a2 + 1);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 2);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 5);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v16 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v15 = (unsigned char *)*((void *)a2 + 8);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v18 = (char *)operator new(v15 - v16);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v18;
    int v19 = &v18[8 * (v17 >> 3)];
    *(void *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 64) = v19;
  }
  uint64_t v20 = *((void *)a2 + 10);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = v20;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  int v22 = (unsigned char *)*((void *)a2 + 11);
  int v21 = (unsigned char *)*((void *)a2 + 12);
  int64_t v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v24 = (char *)operator new(v21 - v22);
    *(void *)(a1 + 88) = v24;
    *(void *)(a1 + 96) = v24;
    int v25 = &v24[4 * (v23 >> 2)];
    *(void *)(a1 + 104) = v25;
    memcpy(v24, v22, v23);
    *(void *)(a1 + 96) = v25;
  }
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  return a1;
}

void sub_23CD2D660(_Unwind_Exception *exception_object)
{
  int64_t v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
    uint64_t v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      uint64_t v9 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[8] = v8;
  operator delete(v8);
  uint64_t v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    uint64_t v10 = *v2;
    if (!*v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  v1[5] = v9;
  operator delete(v9);
  uint64_t v10 = *v2;
  if (!*v2) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  v1[2] = v10;
  operator delete(v10);
  goto LABEL_6;
}

void sub_23CD2D6E8()
{
  if (!*v0) {
    JUMPOUT(0x23CD2D68CLL);
  }
  JUMPOUT(0x23CD2D684);
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C4318;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C4318;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

char *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned char **)(a1 + 16);
  *(void *)uint64_t v2 = &unk_26F0C4318;
  *((void *)v2 + 1) = v3;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v5 = *(unsigned char **)(a1 + 24);
  int64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v7 = (char *)operator new(v5 - v4);
    *((void *)v2 + 2) = v7;
    *((void *)v2 + 3) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *((void *)v2 + 4) = v8;
    memcpy(v7, v4, v6);
    *((void *)v2 + 3) = v8;
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  return v2;
}

void sub_23CD2D870(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_26F0C4318;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  int64_t v6 = *(unsigned char **)(a1 + 16);
  uint64_t v5 = *(unsigned char **)(a1 + 24);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a2 + 16) = v8;
    *(void *)(a2 + 24) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a2 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a2 + 24) = v9;
  }
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_23CD2D940(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

unint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(void *a1)
{
  uint64_t v1 = (int *)a1[2];
  uint64_t v2 = (int *)a1[3];
  if (v1 == v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (uint64_t *)a1[1];
  double v5 = -1.0;
  int v6 = -1;
  do
  {
    int v7 = *v1;
    uint64_t v8 = (void *)v4[2503];
    unint64_t v9 = *(int *)(v8[51] + 4 * *v1);
    if ((v9 == -1
       || ((*(void *)(*(void *)(v8[117] + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      && *(void *)(v8[5] + 12 * v7) + *(void *)(v8[5] + 12 * (v7 ^ 1)))
    {
      LODWORD(v15[0]) = *v1;
      double v10 = *(double *)(v4[2541]
                      + 8
                      * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v4 + 2493, (int *)v15));
      double v11 = ceil(v10 + -0.000001) - v10;
      double v12 = v10 - floor(v10 + 0.000001);
      if (v12 >= v11) {
        double v12 = v11;
      }
      if (v12 >= 0.000001 && v12 > v5)
      {
        double v5 = v12;
        int v6 = v7;
      }
    }
    ++v1;
  }
  while (v1 != v2);
  if (v6 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = (unsigned int *)a1[6];
  LODWORD(v15[0]) = v6;
  *(const char **)((char *)v15 + 4) = (const char *)1;
  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v13, v15[0], 0);
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27LinearProgrammingConstraint31HeuristicLPMostInfeasibleBinaryEPNS0_5ModelEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint31HeuristicLPMostInfeasibleBinar"
                                "yEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27LinearProgrammingConstraint31HeuristicLPMostInfeasibleBinaryEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint31HeuristicLPMostInfeasibleBinaryEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C4398;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F0C4398;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x68uLL);
  void *v2 = &unk_26F0C4398;
  std::__compressed_pair_elem<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CD2DCF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C4398;
  return std::__compressed_pair_elem<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[5];
  if (v3)
  {
    __p[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)__p[2];
  if (v4)
  {
    __p[3] = v4;
    operator delete(v4);
  }

  operator delete(__p);
}

unint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 88);
  LODWORD(v3) = *(_DWORD *)(a1 + 12);
  int v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 == 10000)
  {
    if ((int)v3 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 40);
      do
      {
        *(double *)(v6 + 8 * v5) = *(double *)(v6 + 8 * v5) * 0.5;
        *(int *)(v7 + 4 * v5++) /= 2;
        uint64_t v3 = *(int *)(a1 + 12);
      }
      while (v5 < v3);
    }
    *(_DWORD *)(a1 + 8) = 0;
  }
  if ((int)v3 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = 0;
  do
  {
    int v9 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * v8);
    double v10 = (void *)v2[2503];
    unint64_t v11 = *(int *)(v10[51] + 4 * v9);
    if (v11 == -1
      || ((*(void *)(*(void *)(v10[117] + 24) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    {
      if (*(void *)(v10[5] + 12 * v9) + *(void *)(v10[5] + 12 * (v9 ^ 1)))
      {
        *(_DWORD *)double v27 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * v8);
        double v12 = *(double *)(v2[2544]
                        + 8
                        * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v2 + 2493, (int *)v27));
        if (fabs(v12) >= 0.000001)
        {
          *(_DWORD *)double v27 = v9;
          double v13 = round(*(double *)(v2[2541]
                                + 8
                                * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v2 + 2493, (int *)v27)));
          if (v12 < 0.0 && v13 == 1.0)
          {
            *(double *)(*(void *)(a1 + 16) + 8 * v8) = *(double *)(*(void *)(a1 + 16) + 8 * v8) - v12;
            ++*(_DWORD *)(*(void *)(a1 + 40) + 4 * v8);
          }
        }
      }
    }
    ++v8;
  }
  while (v8 < *(int *)(a1 + 12));
  uint64_t v15 = *(unsigned int *)(a1 + 12);
  if ((int)v15 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 64);
  double v18 = (void *)v2[2503];
  double v20 = 0.0;
  unsigned int v21 = -1;
  do
  {
    uint64_t v22 = *(int *)(v17 + 4 * v16);
    unint64_t v23 = *(int *)(v18[51] + 4 * v22);
    if (v23 == -1
      || ((*(void *)(*(void *)(v18[117] + 24) + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
    {
      if (*(void *)(v18[5] + 12 * (int)v22) + *(void *)(v18[5] + 12 * (int)(v22 ^ 1)))
      {
        int v24 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * v16);
        if (v24 >= 1)
        {
          uint64_t v19 = *(void *)(a1 + 16);
          if (v20 < *(double *)(v19 + 8 * v16) / (double)v24)
          {
            double v20 = *(double *)(v19 + 8 * v16) / (double)v24;
            unsigned int v21 = v16;
          }
        }
      }
    }
    ++v16;
  }
  while (v15 != v16);
  if ((v21 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  int v25 = *(unsigned int **)(a1 + 96);
  *(_DWORD *)double v27 = *(_DWORD *)(v17 + 4 * v21);
  *(void *)&v27[4] = 1;
  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v25, *(const char **)v27, 0);
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27LinearProgrammingConstraint27HeuristicLPPseudoCostBinaryEPNS0_5ModelEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint27HeuristicLPPseudoCostBinaryEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27LinearProgrammingConstraint27HeuristicLPPseudoCostBinaryEPNS0_5ModelEE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint27HeuristicLPPseudoCostBinaryEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = (unsigned char *)a2[1];
  uint64_t v5 = (unsigned char *)a2[2];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    int v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  unint64_t v11 = (unsigned char *)a2[4];
  double v10 = (unsigned char *)a2[5];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v16 = (unsigned char *)a2[7];
  uint64_t v15 = (unsigned char *)a2[8];
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v18 = (char *)operator new(v15 - v16);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v18;
    uint64_t v19 = &v18[4 * (v17 >> 2)];
    *(void *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 64) = v19;
  }
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  return a1;
}

void sub_23CD2E278(_Unwind_Exception *exception_object)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
    int64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v8 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[5] = v7;
  operator delete(v7);
  uint64_t v8 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[2] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_23CD2E2D8()
{
  if (!*v0) {
    JUMPOUT(0x23CD2E29CLL);
  }
  JUMPOUT(0x23CD2E294);
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0C4418;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C4418;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  return operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageDecision(*(operations_research::sat::LinearProgrammingConstraint **)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27LinearProgrammingConstraint29LPReducedCostAverageBranchingEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint29LPReducedCostAverageBranchingEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27LinearProgrammingConstraint29LPReducedCostAverageBranchingEvE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint29LPReducedCostAverageBranchingEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t operations_research::sat::AppendFullEncodingRelaxation(signed int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a2 + 32);
  unint64_t v3 = *(void **)(a2 + 32);
  if (!v3) {
    return 0;
  }
  int64_t v7 = (void *)(a2 + 32);
  uint64_t v8 = (void *)(a2 + 32);
  do
  {
    unint64_t v9 = v3[4];
    BOOL v10 = v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
      unint64_t v11 = v3;
    }
    else {
      unint64_t v11 = v3 + 1;
    }
    if (v10) {
      uint64_t v8 = v3;
    }
    unint64_t v3 = (void *)*v11;
  }
  while (*v11);
  if (v8 == v4) {
    return 0;
  }
  if (v8[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
    return 0;
  }
  int64_t v12 = (void *)v8[5];
  if (!v12 || !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v8[5], a1)) {
    return 0;
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v12, a1, &v86);
  unint64_t v14 = (void *)*v4;
  if (*v4)
  {
    uint64_t v15 = v4;
    uint64_t v16 = (void *)*v4;
    do
    {
      unint64_t v17 = v16[4];
      BOOL v18 = v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = v16 + 1;
      }
      if (v18) {
        uint64_t v15 = v16;
      }
      uint64_t v16 = (void *)*v19;
    }
    while (*v19);
    uint64_t v20 = *(void *)(*(void *)(v15[5] + 40) + 12 * a1);
    unsigned int v21 = v4;
    uint64_t v22 = (void *)*v4;
    do
    {
      unint64_t v23 = v22[4];
      BOOL v24 = v23 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v23 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
        int v25 = v22;
      }
      else {
        int v25 = v22 + 1;
      }
      if (v24) {
        unsigned int v21 = v22;
      }
      uint64_t v22 = (void *)*v25;
    }
    while (*v25);
    if (v21 == v4 || v21[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v21[5];
    }
    uint64_t v82 = v26;
    long long v83 = xmmword_23CE8DB60;
    long long v84 = 0u;
    long long v85 = 0u;
    do
    {
      unint64_t v30 = v14[4];
      BOOL v31 = v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
        double v32 = v14;
      }
      else {
        double v32 = v14 + 1;
      }
      if (v31) {
        int64_t v7 = v14;
      }
      unint64_t v14 = (void *)*v32;
    }
    while (*v32);
    if (v7 == v4 || v7[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
      unint64_t v14 = 0;
    }
    else {
      unint64_t v14 = (void *)v7[5];
    }
    uint64_t v29 = v20;
  }
  else
  {
    uint64_t v29 = *(void *)(MEMORY[0x28] + 12 * a1);
    uint64_t v82 = 0;
    long long v83 = xmmword_23CE8DB60;
    long long v84 = 0u;
    long long v85 = 0u;
  }
  uint64_t v69 = a3;
  v79[0] = v14;
  v79[1] = v29;
  v79[2] = v29;
  *(_OWORD *)uint64_t v80 = 0u;
  long long v81 = 0u;
  operations_research::sat::LinearConstraintBuilder::AddTerm(v79, a1, 1);
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  long long v78 = 0;
  int v33 = v86;
  int v34 = v87;
  if (v86 != v87)
  {
    uint64_t v70 = v29;
    while (1)
    {
      uint64_t v35 = *(void *)v33;
      int v36 = *((_DWORD *)v33 + 2);
      int v37 = v77;
      if (v77 < v78)
      {
        *(_DWORD *)uint64_t v77 = v36;
        uint64_t v38 = (uint64_t)(v37 + 4);
        goto LABEL_75;
      }
      double v39 = (char *)v76;
      int64_t v40 = v77 - (unsigned char *)v76;
      uint64_t v41 = (v77 - (unsigned char *)v76) >> 2;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v43 = v78 - (unsigned char *)v76;
      if ((v78 - (unsigned char *)v76) >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      unint64_t v44 = (unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v42;
      if (v44) {
        break;
      }
      unint64_t v45 = 0;
      unint64_t v46 = (int *)(4 * v41);
      *(_DWORD *)(4 * v41) = v36;
      uint64_t v38 = 4 * v41 + 4;
      if (v37 != v39) {
        goto LABEL_67;
      }
LABEL_73:
      uint64_t v76 = v46;
      uint64_t v77 = (char *)v38;
      long long v78 = &v45[4 * v44];
      if (v39) {
        operator delete(v39);
      }
LABEL_75:
      uint64_t v77 = (char *)v38;
      if (!operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v82, v36, 1)
        || v70 != v35
        && !operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(v79, v36, v70 - v35))
      {
        uint64_t v27 = 0;
        unint64_t v56 = (char *)v76;
        if (!v76) {
          goto LABEL_100;
        }
        goto LABEL_99;
      }
      v33 += 12;
      if (v33 == v34) {
        goto LABEL_80;
      }
    }
    if (v44 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v45 = (char *)operator new(4 * v44);
    unint64_t v46 = (int *)&v45[4 * v41];
    *unint64_t v46 = v36;
    uint64_t v38 = (uint64_t)(v46 + 1);
    if (v37 == v39) {
      goto LABEL_73;
    }
LABEL_67:
    unint64_t v47 = v37 - 4 - v39;
    if (v47 < 0x2C) {
      goto LABEL_111;
    }
    if ((unint64_t)(v37 - &v45[v40]) < 0x20) {
      goto LABEL_111;
    }
    uint64_t v48 = (v47 >> 2) + 1;
    uint64_t v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
    int v50 = &v37[-v49];
    unint64_t v46 = (int *)((char *)v46 - v49);
    unint64_t v51 = &v45[4 * v41 - 16];
    uint64_t v52 = v37 - 16;
    uint64_t v53 = v48 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *((_OWORD *)v51 - 1) = *((_OWORD *)v52 - 1);
      *(_OWORD *)unint64_t v51 = v54;
      v51 -= 32;
      v52 -= 32;
      v53 -= 8;
    }
    while (v53);
    int v37 = v50;
    if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_111:
      do
      {
        int v55 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *--unint64_t v46 = v55;
      }
      while (v37 != v39);
    }
    goto LABEL_73;
  }
LABEL_80:
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v82, (uint64_t)&v71);
  uint64_t v57 = v69;
  unint64_t v58 = *(void *)(v69 + 8);
  if (v58 >= *(void *)(v69 + 16))
  {
    unint64_t v59 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)v69, (uint64_t)&v71);
    size_t v60 = __p[0];
    *(void *)(v69 + 8) = v59;
    if (v60)
    {
      __p[1] = v60;
      operator delete(v60);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v58 = v71;
    *(void *)(v58 + 16) = 0;
    *(void *)(v58 + 24) = 0;
    *(void *)(v58 + 32) = 0;
    *(void *)(v58 + 40) = 0;
    *(_OWORD *)(v58 + 16) = *(_OWORD *)v72;
    *(void *)(v58 + 32) = v73;
    v72[0] = 0;
    v72[1] = 0;
    *(void *)(v58 + 48) = 0;
    *(void *)(v58 + 56) = 0;
    *(_OWORD *)(v58 + 40) = *(_OWORD *)__p;
    *(void *)(v58 + 56) = v75;
    uint64_t v73 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v75 = 0;
    *(void *)(v69 + 8) = v58 + 64;
  }
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)v79, (uint64_t)&v71);
  unint64_t v61 = *(void *)(v69 + 8);
  if (v61 >= *(void *)(v69 + 16))
  {
    unint64_t v62 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)v69, (uint64_t)&v71);
    double v63 = __p[0];
    *(void *)(v69 + 8) = v62;
    if (v63)
    {
      __p[1] = v63;
      operator delete(v63);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v61 = v71;
    *(void *)(v61 + 16) = 0;
    *(void *)(v61 + 24) = 0;
    *(void *)(v61 + 32) = 0;
    *(void *)(v61 + 40) = 0;
    *(_OWORD *)(v61 + 16) = *(_OWORD *)v72;
    *(void *)(v61 + 32) = v73;
    v72[0] = 0;
    v72[1] = 0;
    *(void *)(v61 + 48) = 0;
    *(void *)(v61 + 56) = 0;
    *(_OWORD *)(v61 + 40) = *(_OWORD *)__p;
    *(void *)(v61 + 56) = v75;
    uint64_t v73 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v75 = 0;
    *(void *)(v69 + 8) = v61 + 64;
  }
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  double v64 = *(void **)(v69 + 32);
  if ((unint64_t)v64 >= *(void *)(v69 + 40))
  {
    *(void *)(v69 + 32) = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)(v69 + 24), (uint64_t)&v76);
    uint64_t v27 = 1;
    unint64_t v56 = (char *)v76;
    if (!v76) {
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  *double v64 = 0;
  v64[1] = 0;
  v64[2] = 0;
  int v65 = v76;
  int64_t v66 = v77 - (unsigned char *)v76;
  if (v77 != v76)
  {
    if (v66 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v67 = (char *)operator new(v77 - (unsigned char *)v76);
    *double v64 = v67;
    v64[1] = v67;
    int v68 = &v67[4 * (v66 >> 2)];
    v64[2] = v68;
    memcpy(v67, v65, v66);
    v64[1] = v68;
    uint64_t v57 = v69;
  }
  *(void *)(v57 + 32) = v64 + 3;
  *(void *)(v57 + 32) = v64 + 3;
  uint64_t v27 = 1;
  unint64_t v56 = (char *)v76;
  if (v76)
  {
LABEL_99:
    uint64_t v77 = v56;
    operator delete(v56);
  }
LABEL_100:
  if (v80[1])
  {
    *(void **)&long long v81 = v80[1];
    operator delete(v80[1]);
  }
  if (*((void *)&v84 + 1))
  {
    *(void *)&long long v85 = *((void *)&v84 + 1);
    operator delete(*((void **)&v84 + 1));
  }
  if (v86)
  {
    uint64_t v87 = v86;
    operator delete(v86);
  }
  return v27;
}

void sub_23CD2E9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p)
  {
    operator delete(__p);
    int v37 = a27;
    if (!a27)
    {
LABEL_3:
      uint64_t v38 = a34;
      if (!a34) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    int v37 = a27;
    if (!a27) {
      goto LABEL_3;
    }
  }
  operator delete(v37);
  uint64_t v38 = a34;
  if (!a34)
  {
LABEL_4:
    double v39 = *(void **)(v35 - 112);
    if (!v39) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v38);
  double v39 = *(void **)(v35 - 112);
  if (!v39) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  *(void *)(v35 - 104) = v39;
  operator delete(v39);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::AppendPartialGreaterThanEncodingRelaxation(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a2 + 32);
  unint64_t v3 = *(void **)(a2 + 32);
  if (v3)
  {
    int64_t v7 = (void *)(a2 + 32);
    uint64_t v8 = *(void **)(a2 + 32);
    do
    {
      unint64_t v9 = v8[4];
      BOOL v10 = v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        unint64_t v11 = v8;
      }
      else {
        unint64_t v11 = v8 + 1;
      }
      if (v10) {
        int64_t v7 = v8;
      }
      uint64_t v8 = (void *)*v11;
    }
    while (*v11);
    if (v7 == v4 || v7[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v7[5];
    }
    double v13 = (void *)(a2 + 32);
    do
    {
      unint64_t v14 = v3[4];
      BOOL v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
        uint64_t v16 = v3;
      }
      else {
        uint64_t v16 = v3 + 1;
      }
      if (v15) {
        double v13 = v3;
      }
      unint64_t v3 = (void *)*v16;
    }
    while (*v16);
    if (v13 != v4 && v13[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    {
      if (v12)
      {
        uint64_t v17 = v13[5];
        if (v17)
        {
          uint64_t v18 = *(void *)(v17 + 32);
          if (a1 >= (int)(-1431655765 * ((unint64_t)(*(void *)(v17 + 40) - v18) >> 3)))
          {
            long long v71 = 0;
            uint64_t v72 = 0;
            uint64_t v70 = &v71;
          }
          else
          {
            long long v71 = 0;
            uint64_t v72 = 0;
            uint64_t v70 = &v71;
            std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(&v70, *(void **)(v18 + 24 * a1), (void *)(v18 + 24 * a1 + 8));
            if (v72)
            {
              uint64_t v20 = *(void *)(*(void *)(v12 + 40) + 12 * a1);
              unsigned int v21 = (void *)*v4;
              if (!*v4) {
                goto LABEL_39;
              }
              uint64_t v22 = v4;
              do
              {
                unint64_t v23 = v21[4];
                BOOL v24 = v23 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                if (v23 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
                  int v25 = v21;
                }
                else {
                  int v25 = v21 + 1;
                }
                if (v24) {
                  uint64_t v22 = v21;
                }
                unsigned int v21 = (void *)*v25;
              }
              while (*v25);
              if (v22 != v4
                && v22[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
              {
                uint64_t v26 = v22[5];
              }
              else
              {
LABEL_39:
                uint64_t v26 = 0;
              }
              uint64_t v59 = v12;
              uint64_t v58 = v17;
              uint64_t v65 = v26;
              uint64_t v66 = v20;
              uint64_t v67 = 0x7FFFFFFFFFFFFFFELL;
              *(_OWORD *)int v68 = 0u;
              long long v69 = 0u;
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v65, a1, 1);
              uint64_t v27 = v70;
              if (v70 != &v71)
              {
                uint64_t v28 = 0xFFFFFFFFLL;
                do
                {
                  uint64_t v29 = *(uint64_t *)((char *)v27 + 28);
                  if (v20 < v29
                    && (uint64_t v30 = *((unsigned int *)v27 + 9),
                        (operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v65, *((_DWORD *)v27 + 9), v20 - v29) & 1) != 0))
                  {
                    uint64_t v20 = v29;
                    if (v28 != -1)
                    {
                      BOOL v31 = operator new(8uLL);
                      __p[0] = v31;
                      *BOOL v31 = v30 | ((unint64_t)(v28 ^ 1) << 32);
                      __p[1] = v31 + 1;
                      v61[0] = v31 + 1;
                      double v32 = *(void **)(a3 + 32);
                      if ((unint64_t)v32 >= *(void *)(a3 + 40))
                      {
                        int v36 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a3 + 24), (uint64_t)__p);
                        int v37 = __p[0];
                        *(void *)(a3 + 32) = v36;
                        if (v37)
                        {
                          __p[1] = v37;
                          operator delete(v37);
                        }
                      }
                      else
                      {
                        *double v32 = 0;
                        v32[1] = 0;
                        v32[2] = 0;
                        *(_OWORD *)double v32 = *(_OWORD *)__p;
                        v32[2] = v61[0];
                        *(void *)(a3 + 32) = v32 + 3;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v30 = v28;
                  }
                  int v33 = v27[1];
                  if (v33)
                  {
                    do
                    {
                      int v34 = (void **)v33;
                      int v33 = (void *)*v33;
                    }
                    while (v33);
                  }
                  else
                  {
                    do
                    {
                      int v34 = (void **)v27[2];
                      BOOL v35 = *v34 == v27;
                      uint64_t v27 = v34;
                    }
                    while (!v35);
                  }
                  uint64_t v28 = v30;
                  uint64_t v27 = v34;
                }
                while (v34 != &v71);
              }
              operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v65, (uint64_t)__p);
              unint64_t v38 = *(void *)(a3 + 8);
              if (v38 >= *(void *)(a3 + 16))
              {
                int64_t v40 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a3, (uint64_t)__p);
                uint64_t v41 = v63[0];
                *(void *)(a3 + 8) = v40;
                int v39 = a1;
                if (v41)
                {
                  v63[1] = v41;
                  operator delete(v41);
                }
              }
              else
              {
                *(_OWORD *)unint64_t v38 = *(_OWORD *)__p;
                *(void *)(v38 + 16) = 0;
                *(void *)(v38 + 24) = 0;
                *(void *)(v38 + 32) = 0;
                *(void *)(v38 + 40) = 0;
                *(_OWORD *)(v38 + 16) = *(_OWORD *)v61;
                *(void *)(v38 + 32) = v62;
                v61[0] = 0;
                v61[1] = 0;
                *(void *)(v38 + 48) = 0;
                *(void *)(v38 + 56) = 0;
                *(_OWORD *)(v38 + 40) = *(_OWORD *)v63;
                *(void *)(v38 + 56) = v64;
                uint64_t v62 = 0;
                v63[0] = 0;
                v63[1] = 0;
                uint64_t v64 = 0;
                *(void *)(a3 + 8) = v38 + 64;
                int v39 = a1;
              }
              if (v61[0])
              {
                v61[1] = v61[0];
                operator delete(v61[0]);
              }
              if (v68[1])
              {
                *(void **)&long long v69 = v68[1];
                operator delete(v68[1]);
              }
              int v42 = a1 ^ 1;
              uint64_t v43 = *(void *)(*(void *)(v59 + 40) + 12 * (a1 ^ 1));
              unint64_t v44 = (void *)*v4;
              if (!*v4) {
                goto LABEL_77;
              }
              unint64_t v45 = v4;
              do
              {
                unint64_t v46 = v44[4];
                BOOL v47 = v46 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                if (v46 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
                  uint64_t v48 = v44;
                }
                else {
                  uint64_t v48 = v44 + 1;
                }
                if (v47) {
                  unint64_t v45 = v44;
                }
                unint64_t v44 = (void *)*v48;
              }
              while (*v48);
              if (v45 != v4
                && v45[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
              {
                uint64_t v49 = v45[5];
              }
              else
              {
LABEL_77:
                uint64_t v49 = 0;
              }
              uint64_t v65 = v49;
              uint64_t v66 = v43;
              uint64_t v67 = 0x7FFFFFFFFFFFFFFELL;
              *(_OWORD *)int v68 = 0u;
              long long v69 = 0u;
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v65, v39, -1);
              uint64_t v50 = *(void *)(v58 + 32);
              if (v42 >= (int)(-1431655765 * ((unint64_t)(*(void *)(v58 + 40) - v50) >> 3)))
              {
                __p[1] = 0;
                v61[0] = 0;
                __p[0] = &__p[1];
              }
              else
              {
                __p[1] = 0;
                v61[0] = 0;
                __p[0] = &__p[1];
                std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(__p, *(void **)(v50 + 24 * v42), (void *)(v50 + 24 * v42 + 8));
                unint64_t v51 = (void **)__p[0];
                if (__p[0] != &__p[1])
                {
                  do
                  {
                    uint64_t v52 = *(uint64_t *)((char *)v51 + 28);
                    if (v43 < v52
                      && operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v65, *((_DWORD *)v51 + 9), v43 - v52))
                    {
                      uint64_t v43 = v52;
                    }
                    uint64_t v53 = (void **)v51[1];
                    if (v53)
                    {
                      do
                      {
                        long long v54 = v53;
                        uint64_t v53 = (void **)*v53;
                      }
                      while (v53);
                    }
                    else
                    {
                      do
                      {
                        long long v54 = (void **)v51[2];
                        BOOL v35 = *v54 == v51;
                        unint64_t v51 = v54;
                      }
                      while (!v35);
                    }
                    unint64_t v51 = v54;
                  }
                  while (v54 != &__p[1]);
                }
              }
              std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)__p, (void *)__p[1]);
              operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v65, (uint64_t)__p);
              unint64_t v55 = *(void *)(a3 + 8);
              if (v55 >= *(void *)(a3 + 16))
              {
                unint64_t v56 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a3, (uint64_t)__p);
                uint64_t v57 = v63[0];
                *(void *)(a3 + 8) = v56;
                if (v57)
                {
                  v63[1] = v57;
                  operator delete(v57);
                }
              }
              else
              {
                *(_OWORD *)unint64_t v55 = *(_OWORD *)__p;
                *(void *)(v55 + 16) = 0;
                *(void *)(v55 + 24) = 0;
                *(void *)(v55 + 32) = 0;
                *(void *)(v55 + 40) = 0;
                *(_OWORD *)(v55 + 16) = *(_OWORD *)v61;
                *(void *)(v55 + 32) = v62;
                v61[0] = 0;
                v61[1] = 0;
                *(void *)(v55 + 48) = 0;
                *(void *)(v55 + 56) = 0;
                *(_OWORD *)(v55 + 40) = *(_OWORD *)v63;
                *(void *)(v55 + 56) = v64;
                uint64_t v62 = 0;
                v63[0] = 0;
                v63[1] = 0;
                uint64_t v64 = 0;
                *(void *)(a3 + 8) = v55 + 64;
              }
              if (v61[0])
              {
                v61[1] = v61[0];
                operator delete(v61[0]);
              }
              if (v68[1])
              {
                *(void **)&long long v69 = v68[1];
                operator delete(v68[1]);
              }
            }
          }
          std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v70, v71);
        }
      }
    }
  }
}

void sub_23CD2F010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a13);
  if (!__p)
  {
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v27 - 112, *(void **)(v27 - 104));
    _Unwind_Resume(a1);
  }
  a27 = (uint64_t)__p;
  operator delete(__p);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v27 - 112, *(void **)(v27 - 104));
  _Unwind_Resume(a1);
}

void operations_research::sat::TryToLinearizeConstraint(operations_research::sat *this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::ConstraintProto *a3, operations_research::sat::Model *a4, uint64_t a5, operations_research::sat::LinearRelaxation *a6)
{
  int64_t v7 = a3;
  uint64_t v323 = *MEMORY[0x263EF8340];
  LODWORD(__p[0]) = *(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3)
                              + 304);
  LODWORD(v307) = 0;
  if (LODWORD(__p[0])) {
    google::MakeCheckOpString<int,int>((int)__p, (int)&v307, "model->GetOrCreate<SatSolver>()->CurrentDecisionLevel() == 0");
  }
  BOOL v10 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v7);
  double v13 = v10;
  uint64_t v290 = v7;
  uint64_t v293 = v10;
  switch(*((_DWORD *)a2 + 15))
  {
    case 3:
      if ((int)a4 < 2) {
        return;
      }
      uint64_t v16 = (void *)*((void *)v7 + 4);
      BOOL v15 = (char *)v7 + 32;
      unint64_t v14 = v16;
      if (!v16) {
        goto LABEL_15;
      }
      uint64_t v17 = v15;
      do
      {
        unint64_t v18 = v14[4];
        BOOL v19 = v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
          uint64_t v20 = v14;
        }
        else {
          uint64_t v20 = v14 + 1;
        }
        if (v19) {
          uint64_t v17 = (char *)v14;
        }
        unint64_t v14 = (void *)*v20;
      }
      while (*v20);
      if (v17 != v15
        && *((void *)v17 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        unsigned int v21 = (void *)*((void *)v17 + 5);
      }
      else
      {
LABEL_15:
        unsigned int v21 = 0;
      }
      uint64_t v307 = v21;
      long long v308 = xmmword_23CE8DB60;
      long long v309 = 0u;
      long long v310 = 0u;
      uint64_t v22 = *((int *)a2 + 4);
      if (!v22) {
        goto LABEL_23;
      }
      unint64_t v23 = (int *)*((void *)a2 + 3);
      uint64_t v24 = 4 * v22;
      do
      {
        int v25 = *v23;
        int v26 = ~*v23;
        if (*v23 <= v26) {
          int v25 = ~v25;
        }
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v307, __PAIR64__(*(_DWORD *)(v13[6] + 4 * v25), v26) >> 31, 1) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 326);
          double v280 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"Check failed: lc.AddLiteralTerm(mapping->Literal(NegatedRef(enforcement_ref)), IntegerValue(1)) ", 96);
          goto LABEL_393;
        }
        ++v23;
        v24 -= 4;
      }
      while (v24);
      if (*((_DWORD *)a2 + 15) == 3)
      {
LABEL_23:
        uint64_t v27 = (uint64_t *)*((void *)a2 + 6);
        uint64_t v28 = *((int *)v27 + 4);
        if (!v28)
        {
LABEL_338:
          operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v307, (uint64_t)__p);
          uint64_t v180 = a5;
          unint64_t v181 = *(void *)(a5 + 8);
          if (v181 < *(void *)(a5 + 16))
          {
LABEL_339:
            *(_OWORD *)unint64_t v181 = *(_OWORD *)__p;
            *(void *)(v181 + 16) = 0;
            *(void *)(v181 + 24) = 0;
            *(void *)(v181 + 32) = 0;
            *(void *)(v181 + 40) = 0;
            *(_OWORD *)(v181 + 16) = *(_OWORD *)v303;
            *(void *)(v181 + 32) = v304;
            v303[0] = 0;
            v303[1] = 0;
            *(void *)(v181 + 48) = 0;
            *(void *)(v181 + 56) = 0;
            *(_OWORD *)(v181 + 40) = *(_OWORD *)v305;
            *(void *)(v181 + 56) = v306;
            uint64_t v304 = 0;
            v305[0] = 0;
            v305[1] = 0;
            uint64_t v306 = 0;
            *(void *)(v180 + 8) = v181 + 64;
            goto LABEL_342;
          }
LABEL_340:
          unint64_t v255 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)__p);
          uint64_t v256 = v305[0];
          *(void *)(v180 + 8) = v255;
          if (v256)
          {
            v305[1] = v256;
            operator delete(v256);
          }
LABEL_342:
          if (v303[0])
          {
            v303[1] = v303[0];
            operator delete(v303[0]);
          }
          uint64_t v231 = (int *)*((void *)&v309 + 1);
          if (*((void *)&v309 + 1))
          {
            *(void *)&long long v310 = *((void *)&v309 + 1);
LABEL_346:
            operator delete(v231);
          }
          return;
        }
      }
      else
      {
        uint64_t v27 = &operations_research::sat::_BoolArgumentProto_default_instance_;
        uint64_t v28 = dword_26AEE17F8;
        if (!dword_26AEE17F8) {
          goto LABEL_338;
        }
      }
      char v251 = (int *)v27[3];
      uint64_t v252 = 4 * v28;
      while (1)
      {
        int v253 = *v251;
        int v254 = ~*v251 <= *v251 ? *v251 : ~v253;
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v307, __PAIR64__(*(_DWORD *)(v13[6] + 4 * v254), v253) >> 31, 1) & 1) == 0)break; {
        ++v251;
        }
        v252 -= 4;
        if (!v252) {
          goto LABEL_338;
        }
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 329);
      unint64_t v282 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v282, (uint64_t)"Check failed: lc.AddLiteralTerm(mapping->Literal(ref), IntegerValue(1)) ", 72);
      goto LABEL_393;
    case 4:
      if ((int)a4 < 2) {
        return;
      }
      int v50 = *((_DWORD *)a2 + 4);
      if (!v50) {
        return;
      }
      if (v50 == 1)
      {
        uint64_t v51 = *((void *)a2 + 6);
        uint64_t v52 = *(int *)(v51 + 16);
        if (v52)
        {
          uint64_t v53 = *(int **)(v51 + 24);
          int v54 = **((_DWORD **)a2 + 3);
          if (~v54 <= v54) {
            int v55 = **((_DWORD **)a2 + 3);
          }
          else {
            int v55 = ~v54;
          }
          HIDWORD(v57) = *(_DWORD *)(v10[6] + 4 * v55);
          LODWORD(v57) = **((_DWORD **)a2 + 3);
          uint64_t v56 = (v57 >> 31);
          uint64_t v58 = 4 * v52;
          do
          {
            int v59 = *v53;
            if (~*v53 <= *v53) {
              int v60 = *v53;
            }
            else {
              int v60 = ~v59;
            }
            unsigned int v61 = *(_DWORD *)(v13[6] + 4 * v60);
            uint64_t v62 = operator new(8uLL);
            __p[0] = v62;
            *uint64_t v62 = v56 | ((unint64_t)((__PAIR64__(v61, v59) >> 31) ^ 1) << 32);
            __p[1] = v62 + 1;
            v303[0] = v62 + 1;
            double v63 = *(void **)(a5 + 32);
            if ((unint64_t)v63 < *(void *)(a5 + 40))
            {
              *double v63 = 0;
              v63[1] = 0;
              v63[2] = 0;
              *(_OWORD *)double v63 = *(_OWORD *)__p;
              v63[2] = v303[0];
              *(void *)(a5 + 32) = v63 + 3;
            }
            else
            {
              uint64_t v64 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a5 + 24), (uint64_t)__p);
              uint64_t v65 = __p[0];
              *(void *)(a5 + 32) = v64;
              if (v65)
              {
                __p[1] = v65;
                operator delete(v65);
              }
            }
            ++v53;
            v58 -= 4;
          }
          while (v58);
        }
        return;
      }
      uint64_t v232 = *((void *)a2 + 6);
      uint64_t v233 = *(int *)(v232 + 16);
      uint64_t v236 = (void *)*((void *)v7 + 4);
      unint64_t v235 = (char *)v7 + 32;
      unint64_t v234 = v236;
      if (!v236) {
        goto LABEL_314;
      }
      uint64_t v237 = v235;
      do
      {
        unint64_t v238 = v234[4];
        BOOL v239 = v238 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v238 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
          uint64_t v240 = v234;
        }
        else {
          uint64_t v240 = v234 + 1;
        }
        if (v239) {
          uint64_t v237 = (char *)v234;
        }
        unint64_t v234 = (void *)*v240;
      }
      while (*v240);
      if (v237 != v235
        && *((void *)v237 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        int64x2_t v241 = (void *)*((void *)v237 + 5);
      }
      else
      {
LABEL_314:
        int64x2_t v241 = 0;
      }
      uint64_t v307 = v241;
      *(void *)&long long v308 = v233;
      *((void *)&v308 + 1) = 0x7FFFFFFFFFFFFFFELL;
      long long v309 = 0u;
      long long v310 = 0u;
      uint64_t v242 = *(int *)(v232 + 16);
      if (!v242) {
        goto LABEL_323;
      }
      int64x2_t v243 = *(int **)(v232 + 24);
      uint64_t v244 = 4 * v242;
      while (1)
      {
        int v245 = *v243;
        int v246 = ~*v243 <= *v243 ? *v243 : ~v245;
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v307, __PAIR64__(*(_DWORD *)(v13[6] + 4 * v246), v245) >> 31, 1) & 1) == 0)break; {
        ++v243;
        }
        v244 -= 4;
        if (!v244)
        {
          int v50 = *((_DWORD *)a2 + 4);
LABEL_323:
          if (!v50)
          {
LABEL_329:
            operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v307, (uint64_t)__p);
            uint64_t v180 = a5;
            unint64_t v181 = *(void *)(a5 + 8);
            if (v181 < *(void *)(a5 + 16)) {
              goto LABEL_339;
            }
            goto LABEL_340;
          }
          uint64_t v247 = (int *)*((void *)a2 + 3);
          uint64_t v248 = 4 * v50;
          while (1)
          {
            int v249 = *v247;
            int v250 = ~*v247;
            if (*v247 <= v250) {
              int v249 = ~v249;
            }
            if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v307, __PAIR64__(*(_DWORD *)(v13[6] + 4 * v249), v250) >> 31, v233) & 1) == 0)break; {
            ++v247;
            }
            v248 -= 4;
            if (!v248) {
              goto LABEL_329;
            }
          }
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 358);
          int v284 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v284, (uint64_t)"Check failed: lc.AddLiteralTerm(mapping->Literal(NegatedRef(enforcement_ref)), IntegerValue(num_literals)) ", 107);
LABEL_393:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
        }
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 354);
      unint64_t v283 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v283, (uint64_t)"Check failed: lc.AddLiteralTerm(mapping->Literal(ref), IntegerValue(1)) ", 72);
      goto LABEL_393;
    case 9:
      if (*((_DWORD *)a2 + 4)) {
        return;
      }
      uint64_t v29 = *((void *)a2 + 6);
      int v30 = *(_DWORD *)(v29 + 36);
      if (~v30 <= v30) {
        int v31 = *(_DWORD *)(v29 + 36);
      }
      else {
        int v31 = ~v30;
      }
      int v32 = *(_DWORD *)(*v10 + 4 * v31);
      operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v10, (int *)(v29 + 16), (int **)__p);
      operations_research::sat::AppendMaxRelaxation(v32 ^ (v30 >> 31), (int **)__p, (int)a4, v7, a5);
      goto LABEL_301;
    case 0xA:
      if (*((_DWORD *)a2 + 4)) {
        return;
      }
      uint64_t v182 = *((void *)a2 + 6);
      int v183 = *(_DWORD *)(v182 + 36);
      unsigned int v184 = ~v183;
      if (~v183 > v183) {
        int v183 = ~v183;
      }
      int v185 = *(_DWORD *)(*v10 + 4 * v183);
      operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v10, (int *)(v182 + 16), (int **)&v307);
      operations_research::sat::NegationOf((int8x16_t **)&v307, (int8x16_t **)__p);
      int v186 = v185 ^ (v184 >> 31);
      if (v307)
      {
        *(void *)&long long v308 = v307;
        operator delete(v307);
      }
      operations_research::sat::AppendMaxRelaxation(v186, (int **)__p, (int)a4, v7, a5);
      goto LABEL_301;
    case 0xC:
      operations_research::sat::AppendLinearConstraintRelaxation((uint64_t **)a2, a4, (uint64_t)v7, (const operations_research::sat::Model *)a5, v11);
      return;
    case 0xE:
      int v33 = (int *)*((void *)a2 + 6);
      int v34 = v33[9];
      int v35 = v33[10];
      if (~v34 <= v34) {
        int v36 = v33[9];
      }
      else {
        int v36 = ~v34;
      }
      int v37 = *(_DWORD *)(*v10 + 4 * v36);
      if (~v35 <= v35) {
        int v38 = v33[10];
      }
      else {
        int v38 = ~v35;
      }
      int v39 = *(_DWORD *)(*v10 + 4 * v38);
      operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v10, v33 + 4, (int **)&v299);
      uint64_t v41 = (void *)((char *)v7 + 32);
      int64_t v40 = (void *)*((void *)v7 + 4);
      if (!v40) {
        goto LABEL_47;
      }
      int v42 = (void *)((char *)v7 + 32);
      do
      {
        unint64_t v43 = v40[4];
        BOOL v44 = v43 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v43 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
          unint64_t v45 = v40;
        }
        else {
          unint64_t v45 = v40 + 1;
        }
        if (v44) {
          int v42 = v40;
        }
        int64_t v40 = (void *)*v45;
      }
      while (*v45);
      if (v42 != v41 && v42[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
        unint64_t v46 = (void *)v42[5];
      }
      else {
LABEL_47:
      }
        unint64_t v46 = 0;
      uint64_t v307 = v46;
      long long v308 = 0u;
      long long v309 = 0u;
      long long v310 = 0u;
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v307, v39 ^ (v35 >> 31), -1);
      uint64_t v294 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v7);
      uint64_t v317 = (void (**)(void **))&unk_26F0BD370;
      unsigned int v318 = v37 ^ (v34 >> 31);
      unsigned int v319 = (void **)&v317;
      BOOL v47 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v7);
      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v47, v318)) {
        operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v47, v318);
      }
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v47, v318, (char **)__p);
      if (v319 == (void **)&v317)
      {
        v317[4]((void **)&v317);
        uint64_t v49 = __p[0];
        uint64_t v48 = __p[1];
        if (__p[0] != __p[1]) {
          goto LABEL_262;
        }
      }
      else
      {
        if (v319) {
          (*((void (**)(void))*v319 + 5))();
        }
        uint64_t v49 = __p[0];
        uint64_t v48 = __p[1];
        if (__p[0] != __p[1])
        {
LABEL_262:
          while (1)
          {
            int v213 = *((_DWORD *)v299 + *(void *)v49);
            int v214 = v49[2];
            v314 = &unk_26F0BFEC0;
            int v315 = v213;
            uint64_t v316 = &v314;
            uint64_t v215 = (void *)*v41;
            long long v216 = (char *)v7 + 32;
            do
            {
              unint64_t v217 = v215[4];
              BOOL v218 = v217 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
              if (v217 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
                unint64_t v219 = v215;
              }
              else {
                unint64_t v219 = v215 + 1;
              }
              if (v218) {
                long long v216 = (char *)v215;
              }
              uint64_t v215 = (void *)*v219;
            }
            while (*v219);
            if (*(void *)(*(void *)(*((void *)v216 + 5) + 40) + 12 * v213)
               + *(void *)(*(void *)(*((void *)v216 + 5) + 40) + 12 * (v213 ^ 1)))
            {
              break;
            }
            char v311 = (void (**)(void **))&unk_26F0C1710;
            v312[0] = v214;
            uint64_t v313 = (void **)&v311;
            operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(v312, (uint64_t)v7);
            if (v313 == (void **)&v311)
            {
              v311[4]((void **)&v311);
            }
            else if (v313)
            {
              (*((void (**)(void))*v313 + 5))();
            }
            if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v307, v214, *(void *)(*(void *)(v294 + 40) + 12 * v213)) & 1) == 0)
            {
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v296, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 444);
              unsigned int v281 = (void *)google::LogMessage::stream((google::LogMessage *)&v296);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)"Check failed: constraint.AddLiteralTerm(literal_value.literal, integer_trail->LowerBound(var)) ", 95);
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v296);
            }
            v49 += 3;
            if (v49 == v48)
            {
              uint64_t v49 = __p[0];
              goto LABEL_278;
            }
          }
          uint64_t v230 = __p[0];
          if (!__p[0]) {
            goto LABEL_294;
          }
          __p[1] = __p[0];
LABEL_293:
          operator delete(v230);
          goto LABEL_294;
        }
      }
LABEL_278:
      if (v49)
      {
        __p[1] = v49;
        operator delete(v49);
      }
      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v307, (uint64_t)__p);
      unint64_t v220 = *(void *)(a5 + 8);
      if (v220 >= *(void *)(a5 + 16))
      {
        BOOL v228 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)__p);
        uint64_t v229 = v305[0];
        *(void *)(a5 + 8) = v228;
        if (v229)
        {
          v305[1] = v229;
          operator delete(v229);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v220 = *(_OWORD *)__p;
        *(void *)(v220 + 16) = 0;
        *(void *)(v220 + 24) = 0;
        *(void *)(v220 + 32) = 0;
        *(void *)(v220 + 40) = 0;
        *(_OWORD *)(v220 + 16) = *(_OWORD *)v303;
        *(void *)(v220 + 32) = v304;
        v303[0] = 0;
        v303[1] = 0;
        *(void *)(v220 + 48) = 0;
        *(void *)(v220 + 56) = 0;
        *(_OWORD *)(v220 + 40) = *(_OWORD *)v305;
        *(void *)(v220 + 56) = v306;
        uint64_t v304 = 0;
        v305[0] = 0;
        v305[1] = 0;
        uint64_t v306 = 0;
        *(void *)(a5 + 8) = v220 + 64;
      }
      uint64_t v230 = v303[0];
      if (!v303[0])
      {
LABEL_294:
        if (*((void *)&v309 + 1))
        {
          *(void *)&long long v310 = *((void *)&v309 + 1);
          operator delete(*((void **)&v309 + 1));
        }
        uint64_t v231 = (int *)v299;
        if (v299)
        {
          unint64_t v300 = v299;
          goto LABEL_346;
        }
        return;
      }
      v303[1] = v303[0];
      goto LABEL_293;
    case 0xF:
      if (*((_DWORD *)a2 + 4)) {
        return;
      }
      uint64_t v66 = (_DWORD *)*((void *)a2 + 6);
      int v67 = v66[4];
      LODWORD(__p[0]) = v66[16];
      LODWORD(v299) = v67;
      uint64_t v285 = a2;
      uint64_t v286 = LODWORD(__p[0]);
      if (LODWORD(__p[0]) != v67) {
        google::MakeCheckOpString<int,int>((int)__p, (int)&v299, "num_arcs == ct.circuit().tails_size()");
      }
      LODWORD(v299) = v66[10];
      if (LODWORD(__p[0]) != v299) {
        google::MakeCheckOpString<int,int>((int)__p, (int)&v299, "num_arcs == ct.circuit().heads_size()");
      }
      unint64_t v300 = 0;
      uint64_t v301 = 0;
      uint64_t v298 = 0;
      long long v299 = (uint64_t *)&v300;
      v296 = &v297;
      v297 = 0;
      if (SLODWORD(__p[0]) <= 0)
      {
        uint64_t v126 = (void *)((char *)v7 + 32);
        long long v128 = &v309;
        uint64_t v129 = (char **)(a5 + 32);
        long long v130 = (void *)(a5 + 40);
        uint64_t v131 = a5 + 8;
        unint64_t v295 = (void *)(a5 + 16);
        int v287 = (char **)(a5 + 24);
        goto LABEL_349;
      }
      uint64_t v68 = 0;
LABEL_77:
      uint64_t v70 = &operations_research::sat::_CircuitConstraintProto_default_instance_;
      if (*((_DWORD *)a2 + 15) == 15) {
        uint64_t v70 = (uint64_t *)*((void *)a2 + 6);
      }
      int v71 = *(_DWORD *)(v70[9] + 4 * v68);
      if (~v71 <= v71) {
        int v72 = *(_DWORD *)(v70[9] + 4 * v68);
      }
      else {
        int v72 = ~v71;
      }
      unsigned int v73 = __PAIR64__(*(_DWORD *)(v13[6] + 4 * v72), v71) >> 31;
      int v74 = *(_DWORD *)(v70[3] + 4 * v68);
      int v75 = *(_DWORD *)(v70[6] + 4 * v68);
      unsigned int v320 = (void (**)(void **))&unk_26F0C1710;
      v321[0] = v73;
      size_t v322 = (void **)&v320;
      operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(v321, (uint64_t)v7);
      if (v322 == (void **)&v320)
      {
        v320[4]((void **)&v320);
      }
      else if (v322)
      {
        (*((void (**)(void))*v322 + 5))();
      }
      uint64_t v76 = v297;
      for (i = &v297; ; uint64_t v76 = *i)
      {
        long long v78 = i;
        if (!v76) {
          goto LABEL_93;
        }
        while (1)
        {
          unint64_t i = (uint64_t **)v76;
          int v79 = *((_DWORD *)v76 + 8);
          if (v74 < v79) {
            break;
          }
          if (v79 >= v74)
          {
            uint64_t v80 = i;
            long long v83 = (unsigned int *)i[6];
            uint64_t v82 = i[7];
            if (v83 < (unsigned int *)v82) {
              goto LABEL_96;
            }
            goto LABEL_98;
          }
          uint64_t v76 = i[1];
          if (!v76)
          {
            long long v78 = i + 1;
LABEL_93:
            uint64_t v80 = operator new(0x40uLL);
            v80[8] = v74;
            *((void *)v80 + 6) = 0;
            *((void *)v80 + 7) = 0;
            *((void *)v80 + 5) = 0;
            *(void *)uint64_t v80 = 0;
            *((void *)v80 + 1) = 0;
            *((void *)v80 + 2) = i;
            *long long v78 = (uint64_t *)v80;
            long long v81 = (uint64_t *)v80;
            if (*v296)
            {
              v296 = (uint64_t **)*v296;
              long long v81 = *v78;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v297, v81);
            ++v298;
            long long v83 = (unsigned int *)*((void *)v80 + 6);
            uint64_t v82 = (uint64_t *)*((void *)v80 + 7);
            if (v83 < (unsigned int *)v82)
            {
LABEL_96:
              *long long v83 = v73;
              uint64_t v84 = (uint64_t)(v83 + 1);
LABEL_117:
              double v13 = v293;
              *((void *)v80 + 6) = v84;
              uint64_t v101 = v300;
              for (j = &v300; ; uint64_t v101 = *j)
              {
                double v103 = j;
                if (!v101) {
                  goto LABEL_124;
                }
                while (1)
                {
                  unint64_t j = (uint64_t **)v101;
                  int v104 = *((_DWORD *)v101 + 8);
                  if (v75 < v104) {
                    break;
                  }
                  if (v104 >= v75)
                  {
                    uint64_t v105 = j;
                    int64_t v108 = (unsigned int *)j[6];
                    double v107 = j[7];
                    if (v108 >= (unsigned int *)v107) {
                      goto LABEL_129;
                    }
                    goto LABEL_76;
                  }
                  uint64_t v101 = j[1];
                  if (!v101)
                  {
                    double v103 = j + 1;
LABEL_124:
                    uint64_t v105 = operator new(0x40uLL);
                    v105[8] = v75;
                    *((void *)v105 + 6) = 0;
                    *((void *)v105 + 7) = 0;
                    *((void *)v105 + 5) = 0;
                    *(void *)uint64_t v105 = 0;
                    *((void *)v105 + 1) = 0;
                    *((void *)v105 + 2) = j;
                    *double v103 = (uint64_t *)v105;
                    double v106 = (uint64_t *)v105;
                    if (*v299)
                    {
                      long long v299 = (uint64_t *)*v299;
                      double v106 = *v103;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v300, v106);
                    ++v301;
                    double v13 = v293;
                    int64_t v108 = (unsigned int *)*((void *)v105 + 6);
                    double v107 = (uint64_t *)*((void *)v105 + 7);
                    if (v108 >= (unsigned int *)v107)
                    {
LABEL_129:
                      uint64_t v109 = (unsigned int *)*((void *)v105 + 5);
                      uint64_t v110 = v108 - v109;
                      unint64_t v111 = v110 + 1;
                      if (!((unint64_t)(v110 + 1) >> 62))
                      {
                        uint64_t v112 = (char *)v107 - (char *)v109;
                        if (v112 >> 1 > v111) {
                          unint64_t v111 = v112 >> 1;
                        }
                        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v113 = v111;
                        }
                        if (!v113)
                        {
                          unint64_t v114 = 0;
                          unint64_t v115 = (unsigned int *)(4 * v110);
                          *(_DWORD *)(4 * v110) = v73;
                          uint64_t v116 = 4 * v110 + 4;
                          double v13 = v293;
                          if (v108 == v109) {
                            goto LABEL_141;
                          }
LABEL_138:
                          unint64_t v117 = (char *)(v108 - 1) - (char *)v109;
                          if (v117 >= 0x2C)
                          {
                            a2 = v285;
                            if ((unint64_t)((char *)v109 - v114) >= 0x20)
                            {
                              uint64_t v118 = (v117 >> 2) + 1;
                              uint64_t v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
                              uint64_t v120 = &v108[v119 / 0xFFFFFFFFFFFFFFFCLL];
                              unint64_t v115 = (unsigned int *)((char *)v115 - v119);
                              unint64_t v121 = &v114[4 * v110 - 16];
                              uint64_t v122 = v108 - 4;
                              uint64_t v123 = v118 & 0x7FFFFFFFFFFFFFF8;
                              do
                              {
                                long long v124 = *(_OWORD *)v122;
                                *(v121 - 1) = *((_OWORD *)v122 - 1);
                                *unint64_t v121 = v124;
                                v121 -= 2;
                                v122 -= 8;
                                v123 -= 8;
                              }
                              while (v123);
                              int64_t v108 = v120;
                              if (v118 == (v118 & 0x7FFFFFFFFFFFFFF8)) {
                                goto LABEL_147;
                              }
                            }
                          }
                          else
                          {
                            a2 = v285;
                          }
                          do
                          {
                            unsigned int v125 = *--v108;
                            *--unint64_t v115 = v125;
                          }
                          while (v108 != v109);
                          goto LABEL_147;
                        }
                        if (!(v113 >> 62))
                        {
                          unint64_t v114 = operator new(4 * v113);
                          unint64_t v115 = (unsigned int *)&v114[4 * v110];
                          *unint64_t v115 = v73;
                          uint64_t v116 = (uint64_t)(v115 + 1);
                          double v13 = v293;
                          if (v108 != v109) {
                            goto LABEL_138;
                          }
LABEL_141:
                          a2 = v285;
LABEL_147:
                          *((void *)v105 + 5) = v115;
                          *((void *)v105 + 6) = v116;
                          *((void *)v105 + 7) = &v114[4 * v113];
                          if (v109) {
                            operator delete(v109);
                          }
                          int64_t v7 = v290;
                          *((void *)v105 + 6) = v116;
                          if (++v68 == v286)
                          {
LABEL_150:
                            uint64_t v126 = (void *)((char *)v7 + 32);
                            uint64_t v127 = (uint64_t *)v296;
                            long long v128 = &v309;
                            uint64_t v129 = (char **)(a5 + 32);
                            long long v130 = (void *)(a5 + 40);
                            uint64_t v131 = a5 + 8;
                            unint64_t v295 = (void *)(a5 + 16);
                            int v287 = (char **)(a5 + 24);
                            if (v296 != &v297)
                            {
                              uint64_t v291 = (char **)(a5 + 8);
                              do
                              {
                                if ((unint64_t)(v127[6] - v127[5]) >= 5)
                                {
                                  unint64_t v132 = (void *)*v126;
                                  if (!*v126) {
                                    goto LABEL_165;
                                  }
                                  unint64_t v133 = v126;
                                  do
                                  {
                                    unint64_t v134 = v132[4];
                                    BOOL v135 = v134 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                                    if (v134 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
                                      uint64_t v136 = v132;
                                    }
                                    else {
                                      uint64_t v136 = v132 + 1;
                                    }
                                    if (v135) {
                                      unint64_t v133 = v132;
                                    }
                                    unint64_t v132 = (void *)*v136;
                                  }
                                  while (*v136);
                                  if (v133 != v126
                                    && v133[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                                  {
                                    uint64_t v137 = (void *)v133[5];
                                  }
                                  else
                                  {
LABEL_165:
                                    uint64_t v137 = 0;
                                  }
                                  uint64_t v307 = v137;
                                  long long v308 = xmmword_23CE8DB60;
                                  *long long v128 = 0u;
                                  v128[1] = 0u;
                                  unint64_t v138 = (int *)v127[5];
                                  for (unint64_t k = (int *)v127[6]; v138 != k; ++v138)
                                  {
                                    if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v307, *v138, 1) & 1) == 0)goto LABEL_392; {
                                  }
                                    }
                                  unint64_t v140 = *v129;
                                  if ((unint64_t)*v129 >= *v130)
                                  {
                                    int64_t v147 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>(v287, (uint64_t)(v127 + 5));
                                  }
                                  else
                                  {
                                    unint64_t v141 = v128;
                                    *((void *)v140 + 1) = 0;
                                    *(void *)unint64_t v140 = 0;
                                    *((void *)v140 + 2) = 0;
                                    uint64_t v143 = (unsigned char *)v127[5];
                                    uint64_t v142 = (unsigned char *)v127[6];
                                    int64_t v144 = v142 - v143;
                                    if (v142 != v143)
                                    {
                                      if (v144 < 0) {
LABEL_407:
                                      }
                                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                      uint64_t v145 = (char *)operator new(v142 - v143);
                                      *(void *)unint64_t v140 = v145;
                                      *((void *)v140 + 1) = v145;
                                      unint64_t v146 = &v145[4 * (v144 >> 2)];
                                      *((void *)v140 + 2) = v146;
                                      memcpy(v145, v143, v144);
                                      *((void *)v140 + 1) = v146;
                                    }
                                    int64_t v147 = v140 + 24;
                                    *uint64_t v129 = v140 + 24;
                                    long long v128 = v141;
                                  }
                                  uint64_t v131 = a5 + 8;
                                  *uint64_t v129 = v147;
                                  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v307, (uint64_t)__p);
                                  unint64_t v148 = *v291;
                                  if ((unint64_t)*v291 >= *v295)
                                  {
                                    long long v149 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)__p);
                                    unint64_t v150 = v305[0];
                                    void *v291 = v149;
                                    if (v150)
                                    {
                                      v305[1] = v150;
                                      operator delete(v150);
                                    }
                                  }
                                  else
                                  {
                                    *(_OWORD *)unint64_t v148 = *(_OWORD *)__p;
                                    *((void *)v148 + 2) = 0;
                                    *((void *)v148 + 3) = 0;
                                    *((void *)v148 + 4) = 0;
                                    *((void *)v148 + 5) = 0;
                                    *((_OWORD *)v148 + 1) = *(_OWORD *)v303;
                                    *((void *)v148 + 4) = v304;
                                    v303[0] = 0;
                                    v303[1] = 0;
                                    uint64_t v304 = 0;
                                    *((void *)v148 + 6) = 0;
                                    *((void *)v148 + 7) = 0;
                                    *(_OWORD *)(v148 + 40) = *(_OWORD *)v305;
                                    *((void *)v148 + 7) = v306;
                                    v305[0] = 0;
                                    v305[1] = 0;
                                    uint64_t v306 = 0;
                                    void *v291 = v148 + 64;
                                  }
                                  if (v303[0])
                                  {
                                    v303[1] = v303[0];
                                    operator delete(v303[0]);
                                  }
                                  if (*((void *)&v309 + 1))
                                  {
                                    *(void *)&long long v310 = *((void *)&v309 + 1);
                                    operator delete(*((void **)&v309 + 1));
                                  }
                                }
                                uint64_t v151 = (uint64_t *)v127[1];
                                if (v151)
                                {
                                  do
                                  {
                                    int v152 = (uint64_t **)v151;
                                    uint64_t v151 = (uint64_t *)*v151;
                                  }
                                  while (v151);
                                }
                                else
                                {
                                  do
                                  {
                                    int v152 = (uint64_t **)v127[2];
                                    BOOL v153 = *v152 == v127;
                                    uint64_t v127 = (uint64_t *)v152;
                                  }
                                  while (!v153);
                                }
                                uint64_t v127 = (uint64_t *)v152;
                              }
                              while (v152 != &v297);
                            }
LABEL_349:
                            uint64_t v257 = (int *)v299;
                            if (v299 == (uint64_t *)&v300)
                            {
LABEL_389:
                              std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v296, v297);
                              std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v299, v300);
                              return;
                            }
                            unint64_t v292 = (char **)v131;
                            int v288 = v129;
                            while (1)
                            {
                              if (*((void *)v257 + 6) - *((void *)v257 + 5) >= 5uLL)
                              {
                                uint64_t v258 = (void *)*v126;
                                if (!*v126) {
                                  goto LABEL_364;
                                }
                                double v259 = v126;
                                do
                                {
                                  unint64_t v260 = v258[4];
                                  BOOL v261 = v260 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                                  if (v260 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
                                    uint64_t v262 = v258;
                                  }
                                  else {
                                    uint64_t v262 = v258 + 1;
                                  }
                                  if (v261) {
                                    double v259 = v258;
                                  }
                                  uint64_t v258 = (void *)*v262;
                                }
                                while (*v262);
                                if (v259 != v126
                                  && v259[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                                {
                                  uint64_t v263 = (void *)v259[5];
                                }
                                else
                                {
LABEL_364:
                                  uint64_t v263 = 0;
                                }
                                uint64_t v307 = v263;
                                *(void *)&long long v308 = 1;
                                *((void *)&v308 + 1) = 0x7FFFFFFFFFFFFFFELL;
                                *long long v128 = 0u;
                                v128[1] = 0u;
                                uint64_t v264 = (int *)*((void *)v257 + 5);
                                int v265 = (int *)*((void *)v257 + 6);
                                if (v264 != v265)
                                {
                                  while (operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v307, *v264, 1))
                                  {
                                    if (++v264 == v265) {
                                      goto LABEL_368;
                                    }
                                  }
LABEL_392:
                                  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 416);
                                  unint64_t v279 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
                                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v279, (uint64_t)"Check failed: at_least_one_lc.AddLiteralTerm(l, IntegerValue(1)) ", 65);
                                  goto LABEL_393;
                                }
LABEL_368:
                                int v266 = *v129;
                                if ((unint64_t)*v129 >= *v130)
                                {
                                  uint64_t v272 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>(v287, (uint64_t)(v257 + 10));
                                  unint64_t v273 = v292;
                                }
                                else
                                {
                                  *((void *)v266 + 1) = 0;
                                  *(void *)int v266 = 0;
                                  *((void *)v266 + 2) = 0;
                                  int v268 = (unsigned char *)*((void *)v257 + 5);
                                  uint64_t v267 = (unsigned char *)*((void *)v257 + 6);
                                  int64_t v269 = v267 - v268;
                                  if (v267 != v268)
                                  {
                                    if (v269 < 0) {
                                      goto LABEL_407;
                                    }
                                    unint64_t v270 = (char *)operator new(v267 - v268);
                                    *(void *)int v266 = v270;
                                    *((void *)v266 + 1) = v270;
                                    unint64_t v271 = &v270[4 * (v269 >> 2)];
                                    *((void *)v266 + 2) = v271;
                                    memcpy(v270, v268, v269);
                                    *((void *)v266 + 1) = v271;
                                  }
                                  uint64_t v272 = v266 + 24;
                                  *int v288 = v266 + 24;
                                  uint64_t v129 = v288;
                                  unint64_t v273 = v292;
                                }
                                *uint64_t v129 = v272;
                                operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v307, (uint64_t)__p);
                                BOOL v274 = *v273;
                                if ((unint64_t)*v273 >= *v295)
                                {
                                  int v275 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)__p);
                                  int v276 = v305[0];
                                  *unint64_t v273 = v275;
                                  if (v276)
                                  {
                                    v305[1] = v276;
                                    operator delete(v276);
                                  }
                                }
                                else
                                {
                                  *(_OWORD *)BOOL v274 = *(_OWORD *)__p;
                                  *((void *)v274 + 2) = 0;
                                  *((void *)v274 + 3) = 0;
                                  *((void *)v274 + 4) = 0;
                                  *((void *)v274 + 5) = 0;
                                  *((void **)v274 + 2) = v303[0];
                                  *((void **)v274 + 3) = v303[1];
                                  *((void *)v274 + 4) = v304;
                                  v303[0] = 0;
                                  v303[1] = 0;
                                  uint64_t v304 = 0;
                                  *((void *)v274 + 6) = 0;
                                  *((void *)v274 + 7) = 0;
                                  *((void **)v274 + 5) = v305[0];
                                  *((void **)v274 + 6) = v305[1];
                                  *((void *)v274 + 7) = v306;
                                  v305[0] = 0;
                                  v305[1] = 0;
                                  uint64_t v306 = 0;
                                  *unint64_t v273 = v274 + 64;
                                }
                                if (v303[0])
                                {
                                  v303[1] = v303[0];
                                  operator delete(v303[0]);
                                }
                                if (*((void *)&v309 + 1))
                                {
                                  *(void *)&long long v310 = *((void *)&v309 + 1);
                                  operator delete(*((void **)&v309 + 1));
                                }
                              }
                              uint64_t v277 = (uint64_t *)*((void *)v257 + 1);
                              if (v277)
                              {
                                do
                                {
                                  double v278 = (uint64_t **)v277;
                                  uint64_t v277 = (uint64_t *)*v277;
                                }
                                while (v277);
                              }
                              else
                              {
                                do
                                {
                                  double v278 = (uint64_t **)*((void *)v257 + 2);
                                  BOOL v153 = *v278 == (uint64_t *)v257;
                                  uint64_t v257 = (int *)v278;
                                }
                                while (!v153);
                              }
                              uint64_t v257 = (int *)v278;
                              if (v278 == &v300) {
                                goto LABEL_389;
                              }
                            }
                          }
                          goto LABEL_77;
                        }
LABEL_404:
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
LABEL_403:
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
LABEL_76:
                    *int64_t v108 = v73;
                    long long v69 = v108 + 1;
                    int64_t v7 = v290;
                    a2 = v285;
                    *((void *)v105 + 6) = v69;
                    if (++v68 == v286) {
                      goto LABEL_150;
                    }
                    goto LABEL_77;
                  }
                }
              }
            }
LABEL_98:
            long long v85 = (unsigned int *)*((void *)v80 + 5);
            uint64_t v86 = v83 - v85;
            unint64_t v87 = v86 + 1;
            if ((unint64_t)(v86 + 1) >> 62) {
              goto LABEL_403;
            }
            uint64_t v88 = (char *)v82 - (char *)v85;
            if (v88 >> 1 > v87) {
              unint64_t v87 = v88 >> 1;
            }
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v89 = v87;
            }
            if (v89)
            {
              if (v89 >> 62) {
                goto LABEL_404;
              }
              int v90 = operator new(4 * v89);
              size_t v91 = (unsigned int *)&v90[4 * v86];
              *size_t v91 = v73;
              uint64_t v84 = (uint64_t)(v91 + 1);
              if (v83 == v85) {
                goto LABEL_115;
              }
LABEL_109:
              unint64_t v92 = (char *)(v83 - 1) - (char *)v85;
              if (v92 < 0x2C) {
                goto LABEL_411;
              }
              if ((unint64_t)((char *)v85 - v90) < 0x20) {
                goto LABEL_411;
              }
              uint64_t v93 = (v92 >> 2) + 1;
              uint64_t v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v95 = &v83[v94 / 0xFFFFFFFFFFFFFFFCLL];
              size_t v91 = (unsigned int *)((char *)v91 - v94);
              uint64_t v96 = &v90[4 * v86 - 16];
              unint64_t v97 = v83 - 4;
              uint64_t v98 = v93 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v99 = *(_OWORD *)v97;
                *(v96 - 1) = *((_OWORD *)v97 - 1);
                *uint64_t v96 = v99;
                v96 -= 2;
                v97 -= 8;
                v98 -= 8;
              }
              while (v98);
              long long v83 = v95;
              if (v93 != (v93 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_411:
                do
                {
                  unsigned int v100 = *--v83;
                  *--size_t v91 = v100;
                }
                while (v83 != v85);
              }
            }
            else
            {
              int v90 = 0;
              size_t v91 = (unsigned int *)(4 * v86);
              *(_DWORD *)(4 * v86) = v73;
              uint64_t v84 = 4 * v86 + 4;
              if (v83 != v85) {
                goto LABEL_109;
              }
            }
LABEL_115:
            *((void *)v80 + 5) = v91;
            *((void *)v80 + 6) = v84;
            *((void *)v80 + 7) = &v90[4 * v89];
            if (v85) {
              operator delete(v85);
            }
            goto LABEL_117;
          }
        }
      }
    case 0x13:
      if ((int)a4 < 2 || *((_DWORD *)a2 + 4)) {
        return;
      }
      unint64_t v154 = (_DWORD *)*((void *)a2 + 6);
      int v155 = v154[4];
      int v156 = v154[5];
      if (~v155 <= v155) {
        int v157 = v154[4];
      }
      else {
        int v157 = ~v155;
      }
      uint64_t v158 = *v10;
      int v159 = *(_DWORD *)(*v10 + 4 * v157);
      int v160 = v154[6];
      if (~v160 <= v160) {
        int v161 = v154[6];
      }
      else {
        int v161 = ~v160;
      }
      int v162 = *(_DWORD *)(v158 + 4 * v161);
      if (~v156 <= v156) {
        int v163 = v156;
      }
      else {
        int v163 = ~v156;
      }
      int v164 = *(_DWORD *)(v158 + 4 * v163);
      uint64_t v165 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v7);
      int v166 = v159 ^ (v155 >> 31);
      int v167 = v162 ^ (v160 >> 31);
      uint64_t v168 = *(void *)(v165 + 40);
      uint64_t v169 = *(void *)(v168 + 12 * v167);
      uint64_t v170 = *(void *)(v168 + 12 * (v167 ^ 1));
      if (v169 + v170) {
        uint64_t v171 = 0;
      }
      else {
        uint64_t v171 = -v169;
      }
      v174 = (void *)*((void *)v7 + 4);
      unint64_t v173 = (char *)v7 + 32;
      uint64_t v172 = v174;
      if (!v174) {
        goto LABEL_215;
      }
      uint64_t v175 = v173;
      do
      {
        unint64_t v176 = v172[4];
        BOOL v177 = v176 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v176 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
          uint64_t v178 = v172;
        }
        else {
          uint64_t v178 = v172 + 1;
        }
        if (v177) {
          uint64_t v175 = (char *)v172;
        }
        uint64_t v172 = (void *)*v178;
      }
      while (*v178);
      if (v175 != v173
        && *((void *)v175 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        unsigned int v179 = (void *)*((void *)v175 + 5);
      }
      else
      {
LABEL_215:
        unsigned int v179 = 0;
      }
      uint64_t v307 = v179;
      *(void *)&long long v308 = v171;
      *((void *)&v308 + 1) = v171;
      long long v309 = 0u;
      long long v310 = 0u;
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v307, v166, 1);
      if (v169 != -v170) {
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v307, v167, 1);
      }
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v307, v164 ^ (v156 >> 31), -1);
      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v307, (uint64_t)__p);
      uint64_t v180 = a5;
      unint64_t v181 = *(void *)(a5 + 8);
      if (v181 >= *(void *)(a5 + 16)) {
        goto LABEL_340;
      }
      goto LABEL_339;
    case 0x14:
      operations_research::sat::AppendNoOverlapRelaxation(this, a2, a4, (uint64_t)v7, (operations_research::sat::Model *)a5, v12);
      return;
    case 0x1A:
      if (*((_DWORD *)a2 + 4)) {
        return;
      }
      __p[1] = 0;
      v303[0] = 0;
      __p[0] = 0;
      uint64_t v187 = *((void *)a2 + 6);
      uint64_t v188 = *(int *)(v187 + 16);
      if (!v188) {
        goto LABEL_282;
      }
      uint64_t v189 = 0;
      uint64_t v190 = *(int **)(v187 + 24);
      uint64_t v191 = &v190[v188];
      break;
    default:
      return;
  }
  do
  {
    int v193 = *v190;
    if (~*v190 <= *v190) {
      int v194 = *v190;
    }
    else {
      int v194 = ~v193;
    }
    int v195 = __PAIR64__(*(_DWORD *)(v13[6] + 4 * v194), v193) >> 31;
    if (v189 < v303[0])
    {
      *(_DWORD *)uint64_t v189 = v195;
      double v192 = v189 + 4;
      goto LABEL_231;
    }
    uint64_t v196 = (char *)__p[0];
    int64_t v197 = v189 - (char *)__p[0];
    uint64_t v198 = (v189 - (char *)__p[0]) >> 2;
    unint64_t v199 = v198 + 1;
    if ((unint64_t)(v198 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v200 = (char *)v303[0] - (char *)__p[0];
    if (((char *)v303[0] - (char *)__p[0]) >> 1 > v199) {
      unint64_t v199 = v200 >> 1;
    }
    if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v201 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v201 = v199;
    }
    if (v201)
    {
      if (v201 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v202 = operator new(4 * v201);
      unint64_t v203 = &v202[4 * v198];
      _DWORD *v203 = v195;
      double v192 = v203 + 1;
      if (v189 == v196)
      {
LABEL_251:
        double v13 = v293;
        __p[0] = v203;
        __p[1] = v192;
        v303[0] = &v202[4 * v201];
        if (!v196) {
          goto LABEL_231;
        }
LABEL_252:
        operator delete(v196);
        goto LABEL_231;
      }
    }
    else
    {
      uint64_t v202 = 0;
      unint64_t v203 = (_DWORD *)(4 * v198);
      *(_DWORD *)(4 * v198) = v195;
      double v192 = (void *)(4 * v198 + 4);
      if (v189 == v196) {
        goto LABEL_251;
      }
    }
    unint64_t v204 = v189 - 4 - v196;
    if (v204 < 0xBC
      || &v202[v197 - 4 - (v204 & 0xFFFFFFFFFFFFFFFCLL)] > &v202[v197 - 4]
      || &v189[-(v204 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v189 - 4
      || (unint64_t)(v189 - v202 - v197) < 0x20)
    {
      unint64_t v205 = v189;
      double v13 = v293;
      do
      {
LABEL_247:
        int v206 = *((_DWORD *)v205 - 1);
        v205 -= 4;
        *--unint64_t v203 = v206;
      }
      while (v205 != v196);
      goto LABEL_248;
    }
    uint64_t v207 = (v204 >> 2) + 1;
    uint64_t v208 = 4 * (v207 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v205 = &v189[-v208];
    unint64_t v203 = (_DWORD *)((char *)v203 - v208);
    int v209 = &v202[4 * v198 - 16];
    int v210 = v189 - 16;
    uint64_t v211 = v207 & 0x7FFFFFFFFFFFFFF8;
    double v13 = v293;
    do
    {
      long long v212 = *(_OWORD *)v210;
      *(v209 - 1) = *((_OWORD *)v210 - 1);
      _OWORD *v209 = v212;
      v209 -= 2;
      v210 -= 32;
      v211 -= 8;
    }
    while (v211);
    if (v207 != (v207 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_247;
    }
LABEL_248:
    __p[0] = v203;
    __p[1] = v192;
    v303[0] = &v202[4 * v201];
    if (v196) {
      goto LABEL_252;
    }
LABEL_231:
    __p[1] = v192;
    ++v190;
    uint64_t v189 = (char *)v192;
  }
  while (v190 != v191);
LABEL_282:
  uint64_t v221 = a5;
  long long v222 = *(void **)(a5 + 32);
  if ((unint64_t)v222 >= *(void *)(a5 + 40))
  {
    unint64_t v227 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)(a5 + 24), (uint64_t)__p);
  }
  else
  {
    *long long v222 = 0;
    v222[1] = 0;
    v222[2] = 0;
    uint64_t v223 = __p[0];
    int64_t v224 = (char *)__p[1] - (char *)__p[0];
    if (__p[1] != __p[0])
    {
      if (v224 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int v225 = (char *)operator new((char *)__p[1] - (char *)__p[0]);
      *long long v222 = v225;
      v222[1] = v225;
      v226 = &v225[4 * (v224 >> 2)];
      v222[2] = v226;
      memcpy(v225, v223, v224);
      v222[1] = v226;
      uint64_t v221 = a5;
    }
    unint64_t v227 = (char *)(v222 + 3);
    *(void *)(v221 + 32) = v222 + 3;
  }
  *(void *)(v221 + 32) = v227;
LABEL_301:
  uint64_t v231 = (int *)__p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    goto LABEL_346;
  }
}

void sub_23CD30B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD30B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD30B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD30B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  a38 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23CD30DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::AppendMaxRelaxation(int a1, int **a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  int64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    unint64_t v9 = a4 + 4;
    do
    {
      int v10 = *v7;
      if (*v7 != a1)
      {
        unint64_t v11 = (void *)*v9;
        if (!*v9) {
          goto LABEL_16;
        }
        uint64_t v12 = v9;
        do
        {
          unint64_t v13 = v11[4];
          BOOL v14 = v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
          if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
            BOOL v15 = v11;
          }
          else {
            BOOL v15 = v11 + 1;
          }
          if (v14) {
            uint64_t v12 = v11;
          }
          unint64_t v11 = (void *)*v15;
        }
        while (*v15);
        if (v12 != v9
          && v12[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        {
          uint64_t v16 = (void *)v12[5];
        }
        else
        {
LABEL_16:
          uint64_t v16 = 0;
        }
        unsigned int v61 = v16;
        *(void *)uint64_t v62 = 0x8000000000000002;
        memset(&v62[8], 0, 40);
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v61, v10, 1);
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v61, a1, -1);
        operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v61, (uint64_t)v56);
        unint64_t v17 = *(void *)(a5 + 8);
        if (v17 >= *(void *)(a5 + 16))
        {
          unint64_t v18 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)v56);
          BOOL v19 = __p[0];
          *(void *)(a5 + 8) = v18;
          if (v19)
          {
            __p[1] = v19;
            operator delete(v19);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v17 = *(_OWORD *)v56;
          *(void *)(v17 + 16) = 0;
          *(void *)(v17 + 24) = 0;
          *(void *)(v17 + 32) = 0;
          *(void *)(v17 + 40) = 0;
          *(_OWORD *)(v17 + 16) = *(_OWORD *)v57;
          *(void *)(v17 + 32) = v58;
          v57[0] = 0;
          v57[1] = 0;
          uint64_t v58 = 0;
          *(void *)(v17 + 48) = 0;
          *(void *)(v17 + 56) = 0;
          *(_OWORD *)(v17 + 40) = *(_OWORD *)__p;
          *(void *)(v17 + 56) = v60;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v60 = 0;
          *(void *)(a5 + 8) = v17 + 64;
        }
        if (v57[0])
        {
          v57[1] = v57[0];
          operator delete(v57[0]);
        }
        if (*(void *)&v62[24])
        {
          *(void *)&v62[32] = *(void *)&v62[24];
          operator delete(*(void **)&v62[24]);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  if (a3 >= 2)
  {
    operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)a4);
    uint64_t v50 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a4);
    unsigned int v21 = *a2;
    uint64_t v20 = a2[1];
    int64_t v22 = (char *)v20 - (char *)*a2;
    if (v22 == 8)
    {
      long long v69 = xmmword_23CE7EC50;
      uint64_t v68 = (void (**)(void **))&unk_26F0C0D38;
      uint64_t v70 = (void **)&v68;
      uint64_t v23 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a4);
      int v24 = operations_research::sat::IntegerTrail::AddIntegerVariable(v23, v69, *((uint64_t *)&v69 + 1));
      if (v70 == (void **)&v68)
      {
        v68[4]((void **)&v68);
      }
      else if (v70)
      {
        (*((void (**)(void))*v70 + 5))();
      }
      int LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v50, v24, 1);
      operator new();
    }
    int v25 = (void *)a4[4];
    if (!v25) {
      goto LABEL_42;
    }
    int v26 = a4 + 4;
    do
    {
      unint64_t v27 = v25[4];
      BOOL v28 = v27 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v27 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
        uint64_t v29 = v25;
      }
      else {
        uint64_t v29 = v25 + 1;
      }
      if (v28) {
        int v26 = v25;
      }
      int v25 = (void *)*v29;
    }
    while (*v29);
    if (v26 != a4 + 4
      && v26[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    {
      int v30 = (void *)v26[5];
    }
    else
    {
LABEL_42:
      int v30 = 0;
    }
    unsigned int v61 = v30;
    *(int64x2_t *)uint64_t v62 = vdupq_n_s64(1uLL);
    memset(&v62[16], 0, 32);
    uint64_t v53 = 0;
    int v54 = 0;
    int v55 = 0;
    if (v20 != v21)
    {
      if (v22 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v53 = operator new(v22);
      int v54 = v53;
      int v55 = (char *)v53 + 4 * (v22 >> 2);
      do
      {
        int v31 = *v21;
        if (*v21 != a1)
        {
          long long v66 = xmmword_23CE7EC50;
          uint64_t v65 = (void (**)(void **))&unk_26F0C0D38;
          int v67 = (void **)&v65;
          uint64_t v32 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a4);
          int v38 = operations_research::sat::IntegerTrail::AddIntegerVariable(v32, v66, *((uint64_t *)&v66 + 1));
          if (v67 == (void **)&v65)
          {
            v65[4]((void **)&v65);
          }
          else if (v67)
          {
            (*((void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*v67 + 5))(v67, v33, v34, v35, v36, v37);
          }
          int v39 = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v50, v38, 1);
          operator new();
        }
        ++v21;
      }
      while (v21 != v20);
    }
    operations_research::sat::ExactlyOneConstraint((uint64_t)&v53, (uint64_t)v63);
    v56[0] = a4;
    if (!v64) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *, void **))(*v64 + 48))(v64, v56);
    if (v64 == v63)
    {
      (*(void (**)(void *))(v63[0] + 32))(v63);
    }
    else if (v64)
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v64 + 40))(v64, v40, v41, v42, v43, v44);
    }
    operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v61, (uint64_t)v56);
    unint64_t v46 = *(void *)(a5 + 8);
    if (v46 >= *(void *)(a5 + 16))
    {
      BOOL v47 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)v56);
      uint64_t v48 = __p[0];
      *(void *)(a5 + 8) = v47;
      if (v48)
      {
        __p[1] = v48;
        operator delete(v48);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v46 = *(_OWORD *)v56;
      *(void *)(v46 + 16) = 0;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0;
      *(void *)(v46 + 40) = 0;
      *(_OWORD *)(v46 + 16) = *(_OWORD *)v57;
      *(void *)(v46 + 32) = v58;
      v57[0] = 0;
      v57[1] = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_OWORD *)(v46 + 40) = *(_OWORD *)__p;
      *(void *)(v46 + 56) = v60;
      uint64_t v58 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v60 = 0;
      *(void *)(a5 + 8) = v46 + 64;
    }
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
    if (v53)
    {
      int v54 = v53;
      operator delete(v53);
    }
    if (*(void *)&v62[24])
    {
      *(void *)&v62[32] = *(void *)&v62[24];
      operator delete(*(void **)&v62[24]);
    }
  }
}

void sub_23CD319C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a42) {
    _Unwind_Resume(a1);
  }
  a43 = (uint64_t)a42;
  operator delete(a42);
  _Unwind_Resume(a1);
}

void operations_research::sat::AppendLinearConstraintRelaxation(uint64_t **this, const operations_research::sat::ConstraintProto *a2, uint64_t a3, const operations_research::sat::Model *a4, operations_research::sat::LinearRelaxation *a5)
{
  uint64_t v6 = (operations_research::sat *)this;
  unint64_t v9 = *(void **)(a3 + 32);
  int64_t v7 = (void *)(a3 + 32);
  uint64_t v8 = v9;
  if (!v9) {
    goto LABEL_12;
  }
  int v10 = v7;
  unint64_t v11 = v8;
  do
  {
    unint64_t v12 = v11[4];
    BOOL v13 = v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
    if (v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d) {
      BOOL v14 = v11;
    }
    else {
      BOOL v14 = v11 + 1;
    }
    if (v13) {
      int v10 = v11;
    }
    unint64_t v11 = (void *)*v14;
  }
  while (*v14);
  if (v10 != v7 && v10[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d) {
    BOOL v15 = (void *)v10[5];
  }
  else {
LABEL_12:
  }
    BOOL v15 = 0;
  int v16 = *((_DWORD *)this + 15);
  unint64_t v17 = this[6];
  if (v16 != 12) {
    unint64_t v17 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  }
  unint64_t v18 = (void **)v17[9];
  BOOL v19 = *v18;
  uint64_t v20 = v18[*((int *)v17 + 16) - 1];
  if (*v18 == (void *)0x8000000000000000 && v20 == (void *)0x7FFFFFFFFFFFFFFFLL) {
    return;
  }
  uint64_t v22 = *((int *)this + 4);
  if (v22)
  {
    if ((int)a2 < 2) {
      return;
    }
    uint64_t v23 = 0;
    unint64_t v24 = (unint64_t)this
        + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)this)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + (void)this)));
    unint64_t v25 = ((v24 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v24);
    unint64_t v26 = v15[21];
    unint64_t v27 = (v25 >> 7) ^ (v26 >> 12);
    uint64_t v28 = v15[24];
    uint64_t v29 = 0x101010101010101 * (v25 & 0x7F);
    while (1)
    {
      uint64_t v30 = v27 & v28;
      uint64_t v31 = *(void *)(v26 + v30);
      unint64_t v32 = ((v31 ^ v29) - 0x101010101010101) & ~(v31 ^ v29) & 0x8080808080808080;
      if (v32) {
        break;
      }
LABEL_25:
      if ((v31 & (~v31 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_52;
      }
      v23 += 8;
      unint64_t v27 = v23 + v30;
    }
    while (1)
    {
      unint64_t v33 = (v30 + (__clz(__rbit64(v32)) >> 3)) & v28;
      if (*(uint64_t ***)(v15[22] + 8 * v33) == this) {
        break;
      }
      v32 &= v32 - 1;
      if (!v32) {
        goto LABEL_25;
      }
    }
    if (v33 == v28)
    {
LABEL_52:
      if (*((int *)v17 + 4) < 2) {
        return;
      }
    }
    uint64_t v162 = (uint64_t)v20;
    v174 = 0;
    uint64_t v175 = 0;
    unint64_t v176 = 0;
    if ((v22 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v163 = (int64_t)v19;
    int v164 = v7;
    uint64_t v45 = v22;
    unint64_t v46 = (char *)operator new(4 * v22);
    BOOL v47 = &v46[v45 * 4];
    uint64_t v175 = v46;
    uint64_t v48 = (int *)*((void *)v6 + 3);
    uint64_t v49 = &v48[v45];
    uint64_t v50 = v46;
    uint64_t v168 = v6;
    uint64_t v169 = v15;
    int v166 = v49;
    while (1)
    {
      while (1)
      {
        int v51 = *v48;
        int v52 = ~*v48 <= *v48 ? *v48 : ~v51;
        int v53 = __PAIR64__(*(_DWORD *)(v15[6] + 4 * v52), v51) >> 31;
        if (v46 >= v47) {
          break;
        }
        *(_DWORD *)unint64_t v46 = v53;
        v46 += 4;
        if (++v48 == v49) {
          goto LABEL_86;
        }
      }
      uint64_t v54 = (v46 - v50) >> 2;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 62)
      {
        uint64_t v175 = v46;
        unint64_t v176 = v47;
        v174 = v50;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v47 - v50) >> 1 > v55) {
        unint64_t v55 = (v47 - v50) >> 1;
      }
      unint64_t v56 = (unint64_t)(v47 - v50) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v55;
      if (v56)
      {
        if (v56 >> 62)
        {
          uint64_t v175 = v46;
          unint64_t v176 = v47;
          v174 = v50;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v57 = operator new(4 * v56);
        uint64_t v58 = &v57[4 * v54];
        *(_DWORD *)uint64_t v58 = v53;
        uint64_t v59 = (uint64_t)(v58 + 4);
        if (v46 == v50)
        {
LABEL_77:
          BOOL v15 = v169;
          BOOL v47 = &v57[4 * v56];
          if (!v50) {
            goto LABEL_74;
          }
LABEL_73:
          operator delete(v50);
          goto LABEL_74;
        }
      }
      else
      {
        unint64_t v57 = 0;
        uint64_t v58 = (char *)(4 * v54);
        *(_DWORD *)(4 * v54) = v53;
        uint64_t v59 = 4 * v54 + 4;
        if (v46 == v50) {
          goto LABEL_77;
        }
      }
      unint64_t v60 = v46 - 4 - v50;
      if (v60 < 0xBC
        || &v57[v46 - v50 - 4 - (v60 & 0xFFFFFFFFFFFFFFFCLL)] > &v57[v46 - v50 - 4]
        || &v46[-(v60 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v46 - 4
        || (unint64_t)(v50 - v57) < 0x20)
      {
        break;
      }
      uint64_t v63 = (v60 >> 2) + 1;
      uint64_t v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v61 = &v46[-v64];
      v58 -= v64;
      uint64_t v65 = &v57[4 * v54 - 16];
      long long v66 = (long long *)(v46 - 16);
      uint64_t v67 = v63 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v68 = *v66;
        *(v65 - 1) = *(v66 - 1);
        *uint64_t v65 = v68;
        v65 -= 2;
        v66 -= 2;
        v67 -= 8;
      }
      while (v67);
      BOOL v15 = v169;
      if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_71;
      }
LABEL_72:
      BOOL v47 = &v57[4 * v56];
      if (v50) {
        goto LABEL_73;
      }
LABEL_74:
      uint64_t v50 = v58;
      unint64_t v46 = (char *)v59;
      uint64_t v49 = v166;
      uint64_t v6 = v168;
      if (++v48 == v166)
      {
LABEL_86:
        int v69 = *((_DWORD *)v6 + 15);
        uint64_t v70 = (uint64_t *)*((void *)v6 + 6);
        uint64_t v175 = v46;
        unint64_t v176 = v47;
        uint64_t v173 = 0;
        v174 = v50;
        *(_OWORD *)uint64_t v171 = 0u;
        long long v172 = 0u;
        *(_OWORD *)uint64_t v170 = 0u;
        if (v69 == 12) {
          uint64_t v71 = v70;
        }
        else {
          uint64_t v71 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        }
        uint64_t v72 = *((int *)v71 + 4);
        if (v72)
        {
          if ((v72 & 0x80000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unsigned int v73 = (unsigned int *)operator new(4 * v72);
          int v74 = &v73[v72];
          v170[0] = v73;
          v170[1] = v73;
          v171[0] = v74;
          uint64_t v75 = *((int *)v71 + 4);
          if (v75)
          {
            if ((v75 & 0x80000000) != 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v76 = (char *)operator new(8 * v75);
            uint64_t v77 = &v76[8 * v75];
            v171[1] = v76;
            *(void *)&long long v172 = v76;
            *((void *)&v172 + 1) = v77;
          }
          else
          {
            uint64_t v77 = 0;
            uint64_t v76 = 0;
          }
        }
        else
        {
          unsigned int v73 = 0;
          int v74 = 0;
          uint64_t v77 = 0;
          uint64_t v76 = 0;
        }
        uint64_t v81 = 0;
        while (2)
        {
          if (v69 == 12)
          {
            long long v83 = (uint64_t *)*((void *)v6 + 6);
            if (v81 >= *((int *)v83 + 4)) {
              goto LABEL_166;
            }
          }
          else
          {
            long long v83 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (v81 >= dword_26AEE19E8)
            {
LABEL_166:
              *(void *)&long long v177 = 0;
              if (v173) {
                google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v173, (int)&v177, "expr.offset == IntegerValue(0)");
              }
              operations_research::sat::CanonicalizeExpr(v170, (uint64_t)&v187);
              long long v124 = (void *)*v164;
              unsigned int v125 = v164;
              do
              {
                unint64_t v126 = v124[4];
                BOOL v127 = v126 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
                if (v126 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
                  long long v128 = v124;
                }
                else {
                  long long v128 = v124 + 1;
                }
                if (v127) {
                  unsigned int v125 = v124;
                }
                long long v124 = (void *)*v128;
              }
              while (*v128);
              uint64_t v129 = v125[5];
              uint64_t v130 = operations_research::sat::LinExprLowerBound((uint64_t *)&v187, v129);
              uint64_t v131 = v163 - v130;
              if (v163 > v130)
              {
                unint64_t v132 = (void *)*v164;
                if (!*v164) {
                  goto LABEL_187;
                }
                unint64_t v133 = v164;
                do
                {
                  unint64_t v134 = v132[4];
                  BOOL v135 = v134 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                  if (v134 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
                    uint64_t v136 = v132;
                  }
                  else {
                    uint64_t v136 = v132 + 1;
                  }
                  if (v135) {
                    unint64_t v133 = v132;
                  }
                  unint64_t v132 = (void *)*v136;
                }
                while (*v136);
                if (v133 != v164
                  && v133[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                {
                  uint64_t v137 = v133[5];
                }
                else
                {
LABEL_187:
                  uint64_t v137 = 0;
                }
                uint64_t v182 = v137;
                unint64_t v183 = v163;
                uint64_t v184 = 0x7FFFFFFFFFFFFFFELL;
                long long v185 = 0u;
                long long v186 = 0u;
                unint64_t v138 = v174;
                uint64_t v139 = v175;
                if (v174 != v175)
                {
                  while ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v182, *v138 ^ 1u, v131) & 1) != 0)
                  {
                    if (++v138 == v139) {
                      goto LABEL_191;
                    }
                  }
                  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v177, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 279);
                  int v160 = (void *)google::LogMessage::stream((google::LogMessage *)&v177);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"Check failed: lc.AddLiteralTerm(literal.Negated(), rhs_domain_min - min_expr_value) ", 84);
LABEL_245:
                  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v177);
                }
LABEL_191:
                unint64_t v140 = v187;
                if (v188 != (unsigned char *)v187)
                {
                  unint64_t v141 = 0;
                  do
                  {
                    operations_research::sat::LinearConstraintBuilder::AddTerm(&v182, v140[v141], *(void *)(v190 + 8 * v141));
                    ++v141;
                    unint64_t v140 = v187;
                  }
                  while (v141 < (v188 - (unsigned char *)v187) >> 2);
                }
                operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v182, (uint64_t)&v177);
                unint64_t v142 = *((void *)a4 + 1);
                if (v142 >= *((void *)a4 + 2))
                {
                  uint64_t v143 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)&v177);
                  int64_t v144 = __p[0];
                  *((void *)a4 + 1) = v143;
                  if (v144)
                  {
                    __p[1] = v144;
                    operator delete(v144);
                  }
                }
                else
                {
                  *(_OWORD *)unint64_t v142 = v177;
                  *(void *)(v142 + 16) = 0;
                  *(void *)(v142 + 24) = 0;
                  *(void *)(v142 + 32) = 0;
                  *(void *)(v142 + 40) = 0;
                  *(_OWORD *)(v142 + 16) = *(_OWORD *)v178;
                  *(void *)(v142 + 32) = v179;
                  v178[0] = 0;
                  v178[1] = 0;
                  *(void *)(v142 + 48) = 0;
                  *(void *)(v142 + 56) = 0;
                  *(_OWORD *)(v142 + 40) = *(_OWORD *)__p;
                  *(void *)(v142 + 56) = v181;
                  uint64_t v179 = 0;
                  __p[0] = 0;
                  __p[1] = 0;
                  uint64_t v181 = 0;
                  *((void *)a4 + 1) = v142 + 64;
                }
                if (v178[0])
                {
                  v178[1] = v178[0];
                  operator delete(v178[0]);
                }
                if (*((void *)&v185 + 1))
                {
                  *(void *)&long long v186 = *((void *)&v185 + 1);
                  operator delete(*((void **)&v185 + 1));
                }
              }
              uint64_t v145 = operations_research::sat::LinExprUpperBound((uint64_t *)&v187, v129);
              uint64_t v146 = v162 - v145;
              if (v162 < v145)
              {
                int64_t v147 = (void *)*v164;
                if (!*v164) {
                  goto LABEL_214;
                }
                unint64_t v148 = v164;
                do
                {
                  unint64_t v149 = v147[4];
                  BOOL v150 = v149 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                  if (v149 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
                    uint64_t v151 = v147;
                  }
                  else {
                    uint64_t v151 = v147 + 1;
                  }
                  if (v150) {
                    unint64_t v148 = v147;
                  }
                  int64_t v147 = (void *)*v151;
                }
                while (*v151);
                if (v148 != v164
                  && v148[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                {
                  uint64_t v152 = v148[5];
                }
                else
                {
LABEL_214:
                  uint64_t v152 = 0;
                }
                uint64_t v182 = v152;
                unint64_t v183 = 0x8000000000000002;
                uint64_t v184 = v162;
                long long v185 = 0u;
                long long v186 = 0u;
                BOOL v153 = v174;
                unint64_t v154 = v175;
                if (v174 != v175)
                {
                  while ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v182, *v153 ^ 1u, v146) & 1) != 0)
                  {
                    if (++v153 == v154) {
                      goto LABEL_218;
                    }
                  }
                  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v177, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 295);
                  int v161 = (void *)google::LogMessage::stream((google::LogMessage *)&v177);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"Check failed: lc.AddLiteralTerm(literal.Negated(), rhs_domain_max - max_expr_value) ", 84);
                  goto LABEL_245;
                }
LABEL_218:
                int v155 = v187;
                if (v188 != (unsigned char *)v187)
                {
                  unint64_t v156 = 0;
                  do
                  {
                    operations_research::sat::LinearConstraintBuilder::AddTerm(&v182, v155[v156], *(void *)(v190 + 8 * v156));
                    ++v156;
                    int v155 = v187;
                  }
                  while (v156 < (v188 - (unsigned char *)v187) >> 2);
                }
                operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v182, (uint64_t)&v177);
                unint64_t v157 = *((void *)a4 + 1);
                if (v157 >= *((void *)a4 + 2))
                {
                  uint64_t v158 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)&v177);
                  int v159 = __p[0];
                  *((void *)a4 + 1) = v158;
                  if (v159)
                  {
                    __p[1] = v159;
                    operator delete(v159);
                  }
                }
                else
                {
                  *(_OWORD *)unint64_t v157 = v177;
                  *(void *)(v157 + 16) = 0;
                  *(void *)(v157 + 24) = 0;
                  *(void *)(v157 + 32) = 0;
                  *(void *)(v157 + 40) = 0;
                  *(_OWORD *)(v157 + 16) = *(_OWORD *)v178;
                  *(void *)(v157 + 32) = v179;
                  v178[0] = 0;
                  v178[1] = 0;
                  *(void *)(v157 + 48) = 0;
                  *(void *)(v157 + 56) = 0;
                  *(_OWORD *)(v157 + 40) = *(_OWORD *)__p;
                  *(void *)(v157 + 56) = v181;
                  uint64_t v179 = 0;
                  __p[0] = 0;
                  __p[1] = 0;
                  uint64_t v181 = 0;
                  *((void *)a4 + 1) = v157 + 64;
                }
                if (v178[0])
                {
                  v178[1] = v178[0];
                  operator delete(v178[0]);
                }
                if (*((void *)&v185 + 1))
                {
                  *(void *)&long long v186 = *((void *)&v185 + 1);
                  operator delete(*((void **)&v185 + 1));
                }
              }
              if ((void)v190)
              {
                *((void *)&v190 + 1) = v190;
                operator delete((void *)v190);
              }
              if (v187)
              {
                uint64_t v188 = v187;
                operator delete(v187);
              }
              if (v171[1])
              {
                *(void **)&long long v172 = v171[1];
                operator delete(v171[1]);
              }
              if (v170[0])
              {
                v170[1] = v170[0];
                operator delete(v170[0]);
              }
              uint64_t v80 = v174;
              if (v174)
              {
                uint64_t v175 = v174;
LABEL_239:
                operator delete(v80);
              }
              return;
            }
          }
          int v84 = *(_DWORD *)(v83[3] + 4 * v81);
          uint64_t v85 = *(void *)(v83[6] + 8 * v81);
          if (v84 >= 0) {
            uint64_t v86 = v85;
          }
          else {
            uint64_t v86 = -v85;
          }
          unsigned int v87 = *(_DWORD *)(*v15 + 4 * (v84 ^ (v84 >> 31))) ^ ((v84 ^ (v84 >> 31)) >> 31);
          if (v73 < v74)
          {
            *v73++ = v87;
            v170[1] = v73;
            if (v76 >= v77)
            {
LABEL_131:
              unsigned int v100 = (char *)v171[1];
              int64_t v101 = v76 - (char *)v171[1];
              uint64_t v102 = (v76 - (char *)v171[1]) >> 3;
              unint64_t v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              if ((v77 - (char *)v171[1]) >> 2 > v103) {
                unint64_t v103 = (v77 - (char *)v171[1]) >> 2;
              }
              if ((unint64_t)(v77 - (char *)v171[1]) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v104 = v103;
              }
              if (v104)
              {
                if (v104 >> 61) {
LABEL_247:
                }
                  std::__throw_bad_array_new_length[abi:ne180100]();
                uint64_t v105 = v86;
                double v106 = operator new(8 * v104);
                double v107 = &v106[8 * v102];
                *double v107 = v105;
                uint64_t v82 = (uint64_t)(v107 + 1);
                if (v76 != v100)
                {
LABEL_140:
                  unint64_t v108 = v76 - 8 - v100;
                  if (v108 < 0x168
                    || &v106[v101 - 8 - (v108 & 0xFFFFFFFFFFFFFFF8)] > &v106[v101 - 8]
                    || &v76[-(v108 & 0xFFFFFFFFFFFFFFF8) - 8] > v76 - 8
                    || (unint64_t)(v76 - v106 - v101) < 0x20)
                  {
                    uint64_t v109 = v76;
                    BOOL v15 = v169;
                  }
                  else
                  {
                    uint64_t v118 = (v108 >> 3) + 1;
                    uint64_t v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v109 = &v76[-v119];
                    double v107 = (void *)((char *)v107 - v119);
                    uint64_t v120 = &v106[8 * v102 - 16];
                    unint64_t v121 = (long long *)(v76 - 16);
                    uint64_t v122 = v118 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v123 = *v121;
                      *(v120 - 1) = *(v121 - 1);
                      _OWORD *v120 = v123;
                      v120 -= 2;
                      v121 -= 2;
                      v122 -= 4;
                    }
                    while (v122);
                    BOOL v15 = v169;
                    if (v118 == (v118 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_143:
                      uint64_t v77 = &v106[8 * v104];
                      v171[1] = v107;
                      *((void *)&v172 + 1) = v77;
                      if (v100) {
                        goto LABEL_144;
                      }
                      goto LABEL_145;
                    }
                  }
                  do
                  {
                    uint64_t v110 = *((void *)v109 - 1);
                    v109 -= 8;
                    *--double v107 = v110;
                  }
                  while (v109 != v100);
                  goto LABEL_143;
                }
              }
              else
              {
                double v106 = 0;
                double v107 = (void *)(8 * v102);
                *(void *)(8 * v102) = v86;
                uint64_t v82 = 8 * v102 + 8;
                if (v76 != v100) {
                  goto LABEL_140;
                }
              }
              BOOL v15 = v169;
              uint64_t v77 = &v106[8 * v104];
              v171[1] = v107;
              *((void *)&v172 + 1) = v77;
              if (v100)
              {
LABEL_144:
                unint64_t v111 = v77;
                operator delete(v100);
                uint64_t v77 = v111;
              }
LABEL_145:
              uint64_t v6 = v168;
LABEL_105:
              *(void *)&long long v172 = v82;
              ++v81;
              int v69 = *((_DWORD *)v6 + 15);
              uint64_t v76 = (char *)v82;
              continue;
            }
LABEL_104:
            *(void *)uint64_t v76 = v86;
            uint64_t v82 = (uint64_t)(v76 + 8);
            goto LABEL_105;
          }
          break;
        }
        uint64_t v88 = (unsigned int *)v170[0];
        int64_t v89 = (char *)v73 - (char *)v170[0];
        uint64_t v90 = ((char *)v73 - (char *)v170[0]) >> 2;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v167 = v86;
        if (((char *)v74 - (char *)v170[0]) >> 1 > v91) {
          unint64_t v91 = ((char *)v74 - (char *)v170[0]) >> 1;
        }
        if ((unint64_t)((char *)v74 - (char *)v170[0]) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        if (v92)
        {
          if (v92 >> 62) {
            goto LABEL_247;
          }
          unint64_t v93 = (unint64_t)v77;
          uint64_t v94 = operator new(4 * v92);
          uint64_t v95 = (unsigned int *)&v94[4 * v90];
          *uint64_t v95 = v87;
          uint64_t v96 = v95 + 1;
          if (v73 != v88)
          {
LABEL_125:
            unint64_t v97 = (char *)(v73 - 1) - (char *)v88;
            if (v97 < 0xBC
              || &v94[v89 - 4 - (v97 & 0xFFFFFFFFFFFFFFFCLL)] > &v94[v89 - 4]
              || (unsigned int *)((char *)v73 - (v97 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v73 - 1
              || (unint64_t)((char *)v73 - v94 - v89) < 0x20)
            {
              uint64_t v98 = v73;
              BOOL v15 = v169;
            }
            else
            {
              uint64_t v112 = (v97 >> 2) + 1;
              uint64_t v113 = 4 * (v112 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v98 = &v73[v113 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v95 = (unsigned int *)((char *)v95 - v113);
              unint64_t v114 = &v94[4 * v90 - 16];
              unint64_t v115 = v73 - 4;
              uint64_t v116 = v112 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v117 = *(_OWORD *)v115;
                *(v114 - 1) = *((_OWORD *)v115 - 1);
                _OWORD *v114 = v117;
                v114 -= 2;
                v115 -= 8;
                v116 -= 8;
              }
              while (v116);
              BOOL v15 = v169;
              if (v112 == (v112 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_128:
                int v74 = (unsigned int *)&v94[4 * v92];
                v170[0] = v95;
                v171[0] = v74;
                if (v88) {
                  goto LABEL_129;
                }
                goto LABEL_130;
              }
            }
            do
            {
              unsigned int v99 = *--v98;
              *--uint64_t v95 = v99;
            }
            while (v98 != v88);
            goto LABEL_128;
          }
        }
        else
        {
          unint64_t v93 = (unint64_t)v77;
          uint64_t v94 = 0;
          uint64_t v95 = (unsigned int *)(4 * v90);
          *(_DWORD *)(4 * v90) = v87;
          uint64_t v96 = (unsigned int *)(4 * v90 + 4);
          if (v73 != v88) {
            goto LABEL_125;
          }
        }
        BOOL v15 = v169;
        int v74 = (unsigned int *)&v94[4 * v92];
        v170[0] = v95;
        v171[0] = v74;
        if (v88) {
LABEL_129:
        }
          operator delete(v88);
LABEL_130:
        unsigned int v73 = v96;
        uint64_t v86 = v167;
        uint64_t v6 = v168;
        uint64_t v77 = (char *)v93;
        v170[1] = v96;
        if ((unint64_t)v76 >= v93) {
          goto LABEL_131;
        }
        goto LABEL_104;
      }
    }
    unsigned int v61 = v46;
    BOOL v15 = v169;
    do
    {
LABEL_71:
      int v62 = *((_DWORD *)v61 - 1);
      v61 -= 4;
      *((_DWORD *)v58 - 1) = v62;
      v58 -= 4;
    }
    while (v61 != v50);
    goto LABEL_72;
  }
  if (!v8) {
    goto LABEL_39;
  }
  uint64_t v34 = v7;
  do
  {
    unint64_t v35 = v8[4];
    BOOL v36 = v35 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v35 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
      uint64_t v37 = v8;
    }
    else {
      uint64_t v37 = v8 + 1;
    }
    if (v36) {
      uint64_t v34 = v8;
    }
    uint64_t v8 = (void *)*v37;
  }
  while (*v37);
  if (v34 != v7 && v34[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
    int v38 = (_DWORD *)v34[5];
  }
  else {
LABEL_39:
  }
    int v38 = 0;
  uint64_t v39 = 0;
  uint64_t v187 = v38;
  uint64_t v188 = v19;
  uint64_t v189 = v20;
  long long v190 = 0u;
  long long v191 = 0u;
  if (v16 == 12) {
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t v40 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (v39 >= dword_26AEE19E8) {
      break;
    }
    while (1)
    {
      int v41 = *(_DWORD *)(v40[3] + 4 * v39);
      uint64_t v42 = *(void *)(v40[6] + 8 * v39);
      int v43 = ~v41 <= v41 ? *(_DWORD *)(v40[3] + 4 * v39) : ~v41;
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v187, *(_DWORD *)(*v15 + 4 * v43) ^ (v41 >> 31), v42);
      ++v39;
      if (*((_DWORD *)v6 + 15) != 12) {
        break;
      }
LABEL_43:
      uint64_t v40 = (uint64_t *)*((void *)v6 + 6);
      if (v39 >= *((int *)v40 + 4)) {
        goto LABEL_49;
      }
    }
  }
LABEL_49:
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v187, (uint64_t)&v177);
  unint64_t v44 = *((void *)a4 + 1);
  if (v44 >= *((void *)a4 + 2))
  {
    long long v78 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)&v177);
    int v79 = __p[0];
    *((void *)a4 + 1) = v78;
    if (v79)
    {
      __p[1] = v79;
      operator delete(v79);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v44 = v177;
    *(void *)(v44 + 16) = 0;
    *(void *)(v44 + 24) = 0;
    *(void *)(v44 + 32) = 0;
    *(void *)(v44 + 40) = 0;
    *(_OWORD *)(v44 + 16) = *(_OWORD *)v178;
    *(void *)(v44 + 32) = v179;
    v178[0] = 0;
    v178[1] = 0;
    *(void *)(v44 + 48) = 0;
    *(void *)(v44 + 56) = 0;
    *(_OWORD *)(v44 + 40) = *(_OWORD *)__p;
    *(void *)(v44 + 56) = v181;
    uint64_t v179 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v181 = 0;
    *((void *)a4 + 1) = v44 + 64;
  }
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  uint64_t v80 = (void *)*((void *)&v190 + 1);
  if (*((void *)&v190 + 1))
  {
    *(void *)&long long v191 = *((void *)&v190 + 1);
    goto LABEL_239;
  }
}

void sub_23CD32A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_23CD32A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a27);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)(v40 - 152));
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a17);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::AppendNoOverlapRelaxation(operations_research::sat *this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::ConstraintProto *a3, uint64_t a4, operations_research::sat::Model *a5, operations_research::sat::LinearRelaxation *a6)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a2 + 15) != 20)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v67, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 479);
    unint64_t v55 = (void *)google::LogMessage::stream((google::LogMessage *)&v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: ct.has_no_overlap() ", 34);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v67);
  }
  if ((int)a3 >= 3 && !*((_DWORD *)a2 + 4) && *(int *)(*((void *)a2 + 6) + 16) >= 2)
  {
    long long v66 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>(a4);
    uint64_t v8 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
    unint64_t v9 = *((_DWORD *)a2 + 15) == 20
       ? (uint64_t *)*((void *)a2 + 6)
       : &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
    uint64_t v10 = *((unsigned int *)v9 + 4);
    uint64_t v64 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
    uint64_t v57 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a4);
    if ((int)v10 >= 1)
    {
      uint64_t v11 = 0;
      unint64_t v56 = (void *)(a4 + 32);
      for (uint64_t i = 1; ; ++i)
      {
        while (1)
        {
          BOOL v13 = *((_DWORD *)a2 + 15) == 20 ? (uint64_t *)*((void *)a2 + 6) : v8;
          uint64_t v14 = *(void *)(*((void *)this + 7) + 8 * *(int *)(v13[3] + 4 * v11) + 8);
          if (!*(_DWORD *)(v14 + 16)) {
            break;
          }
          ++v11;
          ++i;
          if (v11 == v10) {
            return;
          }
        }
        BOOL v15 = (const operations_research::sat::IntervalConstraintProto *)&operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v14 + 60) == 19) {
          BOOL v15 = *(const operations_research::sat::IntervalConstraintProto **)(v14 + 48);
        }
        operations_research::sat::IntervalConstraintProto::IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)v80, v15);
        uint64_t v61 = v11 + 1;
        if (v11 + 1 < v10) {
          break;
        }
LABEL_10:
        operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)v80);
        uint64_t v11 = v61;
        if (v61 == v10) {
          return;
        }
      }
      uint64_t v16 = *v66;
      if (~v82 <= v82) {
        int v17 = v82;
      }
      else {
        int v17 = ~v82;
      }
      int v18 = *(_DWORD *)(v16 + 4 * v17) ^ (v82 >> 31);
      if (~v81 <= v81) {
        int v19 = v81;
      }
      else {
        int v19 = ~v81;
      }
      int v58 = *(_DWORD *)(v16 + 4 * v19) ^ (v81 >> 31);
      int v59 = v18;
      int v60 = v18;
      int v65 = v18 ^ 1;
      uint64_t v20 = i;
      while (1)
      {
        if (*((_DWORD *)a2 + 15) == 20) {
          unsigned int v21 = (uint64_t *)*((void *)a2 + 6);
        }
        else {
          unsigned int v21 = v8;
        }
        uint64_t v22 = *(void *)(*((void *)this + 7) + 8 * *(int *)(v21[3] + 4 * v20) + 8);
        if (*(_DWORD *)(v22 + 16)) {
          goto LABEL_28;
        }
        uint64_t v23 = (const operations_research::sat::IntervalConstraintProto *)&operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v22 + 60) == 19) {
          uint64_t v23 = *(const operations_research::sat::IntervalConstraintProto **)(v22 + 48);
        }
        unint64_t v24 = v8;
        operations_research::sat::IntervalConstraintProto::IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)v77, v23);
        if (~v78 <= v78) {
          int v25 = v78;
        }
        else {
          int v25 = ~v78;
        }
        int v26 = *(_DWORD *)(*v66 + 4 * v25);
        uint64_t v27 = *(void *)(v64 + 40);
        int v28 = v26 ^ (v78 >> 31);
        if (*(void *)(v27 + 12 * v28) < -*(void *)(v27 + 12 * v65))
        {
          int v29 = ~v79 <= v79 ? v79 : ~v79;
          int v30 = *(_DWORD *)(*v66 + 4 * v29) ^ (v79 >> 31);
          if (*(void *)(v27 + 12 * v58) < -*(void *)(v27 + 12 * (v30 ^ 1)))
          {
            uint64_t v31 = *(void *)(v27 + 12 * v60);
            uint64_t v32 = -*(void *)(v27 + 12 * (v28 ^ 1));
            uint64_t v33 = *(void *)(v27 + 12 * v30);
            uint64_t v34 = -*(void *)(v27 + 12 * (v58 ^ 1));
            if (v31 <= v32 && v33 <= v34)
            {
              long long v83 = (void (**)(void **))&unk_26F0C0D38;
              long long v84 = xmmword_23CE7EC50;
              uint64_t v85 = (void **)&v83;
              uint64_t v44 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
              int v45 = operations_research::sat::IntegerTrail::AddIntegerVariable(v44, v84, *((uint64_t *)&v84 + 1));
              if (v85 == (void **)&v83)
              {
                v83[4]((void **)&v83);
              }
              else if (v85)
              {
                (*((void (**)(void))*v85 + 5))();
              }
              int LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v57, v45, 1);
              goto LABEL_27;
            }
            if (v31 <= v32)
            {
              unint64_t v46 = (void *)*v56;
              if (!*v56) {
                goto LABEL_76;
              }
              BOOL v47 = (void *)(a4 + 32);
              do
              {
                unint64_t v48 = v46[4];
                BOOL v49 = v48 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                if (v48 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
                  uint64_t v50 = v46;
                }
                else {
                  uint64_t v50 = v46 + 1;
                }
                if (v49) {
                  BOOL v47 = v46;
                }
                unint64_t v46 = (void *)*v50;
              }
              while (*v50);
              if (v47 != v56
                && v47[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
              {
                uint64_t v51 = v47[5];
              }
              else
              {
LABEL_76:
                uint64_t v51 = 0;
              }
              uint64_t v72 = v51;
              unint64_t v73 = 0x8000000000000002;
              long long v74 = 0u;
              long long v75 = 0u;
              uint64_t v76 = 0;
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v72, v59, 1);
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v72, v28, -1);
              operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v72, (uint64_t)&v67);
              uint64_t v42 = a5;
              unint64_t v43 = *((void *)a5 + 1);
              if (v43 < *((void *)a5 + 2))
              {
LABEL_78:
                *(_OWORD *)unint64_t v43 = v67;
                *(void *)(v43 + 16) = 0;
                *(void *)(v43 + 24) = 0;
                *(void *)(v43 + 32) = 0;
                *(void *)(v43 + 40) = 0;
                *(_OWORD *)(v43 + 16) = *(_OWORD *)v68;
                *(void *)(v43 + 32) = v69;
                v68[0] = 0;
                v68[1] = 0;
                uint64_t v69 = 0;
                *(void *)(v43 + 48) = 0;
                *(void *)(v43 + 56) = 0;
                *(_OWORD *)(v43 + 40) = *(_OWORD *)__p;
                *(void *)(v43 + 56) = v71;
                __p[0] = 0;
                __p[1] = 0;
                uint64_t v71 = 0;
                *((void *)v42 + 1) = v43 + 64;
LABEL_83:
                if (v68[0])
                {
                  v68[1] = v68[0];
                  operator delete(v68[0]);
                }
                if ((void)v75)
                {
                  *((void *)&v75 + 1) = v75;
                  operator delete((void *)v75);
                }
                goto LABEL_27;
              }
LABEL_81:
              int v53 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)&v67);
              uint64_t v54 = __p[0];
              *((void *)v42 + 1) = v53;
              if (v54)
              {
                __p[1] = v54;
                operator delete(v54);
              }
              goto LABEL_83;
            }
            if (v33 <= v34)
            {
              BOOL v36 = (void *)(a4 + 32);
              uint64_t v37 = (void *)*v56;
              if (!*v56) {
                goto LABEL_59;
              }
              do
              {
                unint64_t v38 = v37[4];
                BOOL v39 = v38 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                if (v38 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
                  uint64_t v40 = v37;
                }
                else {
                  uint64_t v40 = v37 + 1;
                }
                if (v39) {
                  BOOL v36 = v37;
                }
                uint64_t v37 = (void *)*v40;
              }
              while (*v40);
              if (v36 != v56
                && v36[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
              {
                uint64_t v41 = v36[5];
              }
              else
              {
LABEL_59:
                uint64_t v41 = 0;
              }
              uint64_t v72 = v41;
              unint64_t v73 = 0x8000000000000002;
              long long v74 = 0u;
              long long v75 = 0u;
              uint64_t v76 = 0;
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v72, v30, 1);
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v72, v58, -1);
              operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v72, (uint64_t)&v67);
              uint64_t v42 = a5;
              unint64_t v43 = *((void *)a5 + 1);
              if (v43 < *((void *)a5 + 2)) {
                goto LABEL_78;
              }
              goto LABEL_81;
            }
          }
        }
LABEL_27:
        operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)v77);
        uint64_t v8 = v24;
LABEL_28:
        if (++v20 == v10) {
          goto LABEL_10;
        }
      }
    }
  }
}

void sub_23CD331B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a28);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
    operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v41 - 192));
    operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v41 - 160));
    _Unwind_Resume(a1);
  }
  operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v41 - 192));
  operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v41 - 160));
  _Unwind_Resume(a1);
}

void sub_23CD3323C(_Unwind_Exception *a1)
{
  operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_23CD33250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void operations_research::sat::anonymous namespace'::AppendEnforcedUpperBound(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  int v11 = a2;
  uint64_t v12 = -*(void *)(*(void *)(v10 + 40) + 12 * a3) - *(void *)(*(void *)(v10 + 40) + 12 * (a2 ^ 1));
  BOOL v15 = *(void **)(a4 + 32);
  uint64_t v14 = a4 + 32;
  BOOL v13 = v15;
  if (!v15) {
    goto LABEL_12;
  }
  uint64_t v16 = (void *)v14;
  do
  {
    unint64_t v17 = v13[4];
    BOOL v18 = v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
      int v19 = v13;
    }
    else {
      int v19 = v13 + 1;
    }
    if (v18) {
      uint64_t v16 = v13;
    }
    BOOL v13 = (void *)*v19;
  }
  while (*v19);
  if (v16 != (void *)v14
    && v16[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
  {
    uint64_t v20 = v16[5];
  }
  else
  {
LABEL_12:
    uint64_t v20 = 0;
  }
  v30[0] = v20;
  v30[1] = 0x8000000000000002;
  void v30[2] = v12;
  *(_OWORD *)uint64_t v31 = 0u;
  long long v32 = 0u;
  operations_research::sat::LinearConstraintBuilder::AddTerm(v30, v11, 1);
  operations_research::sat::LinearConstraintBuilder::AddTerm(v30, a3, -1);
  if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(v30, a1, v12) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v25, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 255);
    unint64_t v24 = (void *)google::LogMessage::stream((google::LogMessage *)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: lc.AddLiteralTerm(enforcing_lit, max_term_value) ", 63);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v25);
  }
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)v30, (uint64_t)&v25);
  unint64_t v21 = *(void *)(a5 + 8);
  if (v21 >= *(void *)(a5 + 16))
  {
    uint64_t v22 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)&v25);
    uint64_t v23 = __p[0];
    *(void *)(a5 + 8) = v22;
    if (v23)
    {
      __p[1] = v23;
      operator delete(v23);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v21 = v25;
    *(void *)(v21 + 16) = 0;
    *(void *)(v21 + 24) = 0;
    *(void *)(v21 + 32) = 0;
    *(void *)(v21 + 40) = 0;
    *(_OWORD *)(v21 + 16) = *(_OWORD *)v26;
    *(void *)(v21 + 32) = v27;
    v26[0] = 0;
    v26[1] = 0;
    *(void *)(v21 + 48) = 0;
    *(void *)(v21 + 56) = 0;
    *(_OWORD *)(v21 + 40) = *(_OWORD *)__p;
    *(void *)(v21 + 56) = v29;
    uint64_t v27 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v29 = 0;
    *(void *)(a5 + 8) = v21 + 64;
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v31[1])
  {
    *(void **)&long long v32 = v31[1];
    operator delete(v31[1]);
  }
}

void sub_23CD3344C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::AppendLinMaxRelaxation(int a1@<W0>, int8x16_t ***a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int **a5@<X8>)
{
  uint64_t v193 = *MEMORY[0x263EF8340];
  int64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
    uint64_t v23 = *a2;
  }
  else
  {
    unint64_t v9 = a3 + 4;
    do
    {
      int v11 = (void *)*v9;
      if (!*v9) {
        goto LABEL_15;
      }
      uint64_t v12 = a3 + 4;
      do
      {
        unint64_t v13 = v11[4];
        BOOL v14 = v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
          BOOL v15 = v11;
        }
        else {
          BOOL v15 = v11 + 1;
        }
        if (v14) {
          uint64_t v12 = v11;
        }
        int v11 = (void *)*v15;
      }
      while (*v15);
      if (v12 != v9 && v12[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
        uint64_t v16 = v12[5];
      }
      else {
LABEL_15:
      }
        uint64_t v16 = 0;
      uint64_t v17 = -(uint64_t)v7[6];
      uint64_t v184 = v16;
      v185.i64[0] = 0x8000000000000002;
      v185.i64[1] = v17;
      long long v186 = 0u;
      long long v187 = 0u;
      BOOL v18 = *v7;
      if (v7[1] != *v7)
      {
        unint64_t v19 = 0;
        do
        {
          operations_research::sat::LinearConstraintBuilder::AddTerm(&v184, v18->i32[v19], v7[3]->i64[v19]);
          ++v19;
          BOOL v18 = *v7;
        }
        while (v19 < ((char *)v7[1] - (char *)*v7) >> 2);
      }
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v184, a1, -1);
      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v184, (uint64_t)v180);
      unint64_t v20 = *(void *)(a4 + 8);
      if (v20 >= *(void *)(a4 + 16))
      {
        unint64_t v21 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)v180);
        uint64_t v22 = __p[1];
        *(void *)(a4 + 8) = v21;
        if (v22)
        {
          __p[2] = v22;
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v20 = *(_OWORD *)v180;
        *(void *)(v20 + 16) = 0;
        *(void *)(v20 + 24) = 0;
        *(void *)(v20 + 32) = 0;
        *(void *)(v20 + 40) = 0;
        *(_OWORD *)(v20 + 16) = *(_OWORD *)v181;
        *(void **)(v20 + 32) = __p[0];
        v181[0] = 0;
        v181[1] = 0;
        __p[0] = 0;
        *(void *)(v20 + 48) = 0;
        *(void *)(v20 + 56) = 0;
        *(_OWORD *)(v20 + 40) = *(_OWORD *)&__p[1];
        *(void *)(v20 + 56) = v183;
        __p[1] = 0;
        __p[2] = 0;
        uint64_t v183 = 0;
        *(void *)(a4 + 8) = v20 + 64;
      }
      if (v181[0])
      {
        v181[1] = v181[0];
        operator delete(v181[0]);
      }
      if (*((void *)&v186 + 1))
      {
        *(void *)&long long v187 = *((void *)&v186 + 1);
        operator delete(*((void **)&v186 + 1));
      }
      v7 += 7;
    }
    while (v7 != v8);
    int64_t v7 = *a2;
    uint64_t v23 = a2[1];
  }
  uint64_t v164 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
  operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)a3);
  *a5 = 0;
  a5[1] = 0;
  uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * (v23 - v7);
  a5[2] = 0;
  long long v177 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  uint64_t v25 = v24 << 32;
  if (v24 << 32)
  {
    if (v25 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v26 = (char *)operator new((4 * v24) & 0x3FFFFFFFFLL);
    *a5 = (int *)v26;
    a5[1] = (int *)v26;
    a5[2] = (int *)&v26[4 * (int)v24];
    long long v177 = operator new((4 * v24) & 0x3FFFFFFFFLL);
    uint64_t v178 = (char *)v177;
    uint64_t v179 = (char *)v177 + 4 * (int)v24;
    uint64_t v25 = v24 << 32;
  }
  unint64_t v157 = v25;
  unint64_t v158 = (int)v24;
  uint64_t v27 = (void *)a3[4];
  int v161 = a3 + 4;
  if (!v27) {
    goto LABEL_44;
  }
  int v28 = a3 + 4;
  do
  {
    unint64_t v29 = v27[4];
    BOOL v30 = v29 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v29 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
      uint64_t v31 = v27;
    }
    else {
      uint64_t v31 = v27 + 1;
    }
    if (v30) {
      int v28 = v27;
    }
    uint64_t v27 = (void *)*v31;
  }
  while (*v31);
  if (v28 != a3 + 4 && v28[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
    uint64_t v32 = v28[5];
  }
  else {
LABEL_44:
  }
    uint64_t v32 = 0;
  uint64_t v184 = v32;
  int64x2_t v185 = vdupq_n_s64(1uLL);
  long long v186 = 0u;
  long long v187 = 0u;
  int v159 = v24;
  int64_t v163 = a5;
  if ((int)v24 >= 1)
  {
    long long v191 = xmmword_23CE7EC50;
    long long v190 = (void (**)(void **))&unk_26F0C0D38;
    double v192 = (void **)&v190;
    uint64_t v33 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
    int v34 = operations_research::sat::IntegerTrail::AddIntegerVariable(v33, v191, *((uint64_t *)&v191 + 1));
    if (v192 == (void **)&v190)
    {
      v190[4]((void **)&v190);
      BOOL v36 = a5[1];
      unint64_t v35 = (unint64_t)a5[2];
      if ((unint64_t)v36 < v35)
      {
LABEL_50:
        *BOOL v36 = v34;
        uint64_t v37 = (uint64_t)(v36 + 1);
        goto LABEL_71;
      }
    }
    else
    {
      if (v192) {
        (*((void (**)(void))*v192 + 5))();
      }
      BOOL v36 = a5[1];
      unint64_t v35 = (unint64_t)a5[2];
      if ((unint64_t)v36 < v35) {
        goto LABEL_50;
      }
    }
    unint64_t v38 = *a5;
    uint64_t v39 = (char *)v36 - (char *)*a5;
    uint64_t v40 = v39 >> 2;
    unint64_t v41 = (v39 >> 2) + 1;
    if (v41 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v42 = v35 - (void)v38;
    if (v42 >> 1 > v41) {
      unint64_t v41 = v42 >> 1;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v41;
    }
    if (v43)
    {
      if (v43 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v44 = operator new(4 * v43);
      int v45 = (int *)&v44[4 * v40];
      int *v45 = v34;
      uint64_t v37 = (uint64_t)(v45 + 1);
      if (v36 == v38) {
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v44 = 0;
      int v45 = (int *)(4 * v40);
      *(_DWORD *)(4 * v40) = v34;
      uint64_t v37 = 4 * v40 + 4;
      if (v36 == v38)
      {
LABEL_69:
        a5 = v163;
        *int64_t v163 = v45;
        v163[1] = (int *)v37;
        v163[2] = (int *)&v44[4 * v43];
        if (v38) {
          operator delete(v38);
        }
LABEL_71:
        a5[1] = (int *)v37;
        int LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v164, v34, 1);
        int v56 = LiteralAssociatedToEquality;
        uint64_t v57 = v178;
        if (v178 < v179)
        {
          *(_DWORD *)uint64_t v178 = LiteralAssociatedToEquality;
          uint64_t v58 = (uint64_t)(v57 + 4);
          int v59 = a2;
          goto LABEL_93;
        }
        int v60 = (char *)v177;
        int64_t v61 = v178 - (unsigned char *)v177;
        uint64_t v62 = (v178 - (unsigned char *)v177) >> 2;
        unint64_t v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v64 = v179 - (unsigned char *)v177;
        if ((v179 - (unsigned char *)v177) >> 1 > v63) {
          unint64_t v63 = v64 >> 1;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v63;
        }
        if (v65)
        {
          if (v65 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v66 = (char *)operator new(4 * v65);
          long long v67 = &v66[4 * v62];
          *(_DWORD *)long long v67 = v56;
          uint64_t v58 = (uint64_t)(v67 + 4);
          if (v57 != v60)
          {
LABEL_82:
            unint64_t v68 = v57 - 4 - v60;
            if (v68 >= 0x2C)
            {
              unint64_t v69 = v57 - &v66[v61];
              int v59 = a2;
              if (v69 >= 0x20)
              {
                uint64_t v70 = (v68 >> 2) + 1;
                uint64_t v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v72 = &v57[-v71];
                v67 -= v71;
                unint64_t v73 = &v66[4 * v62 - 16];
                long long v74 = v57 - 16;
                uint64_t v75 = v70 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v76 = *(_OWORD *)v74;
                  *((_OWORD *)v73 - 1) = *((_OWORD *)v74 - 1);
                  *(_OWORD *)unint64_t v73 = v76;
                  v73 -= 32;
                  v74 -= 32;
                  v75 -= 8;
                }
                while (v75);
                uint64_t v57 = v72;
                if (v70 == (v70 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_91:
                  long long v177 = v67;
                  uint64_t v178 = (char *)v58;
                  uint64_t v179 = &v66[4 * v65];
                  if (v60) {
                    operator delete(v60);
                  }
LABEL_93:
                  uint64_t v178 = (char *)v58;
                  *(_OWORD *)uint64_t v181 = 0u;
                  memset(__p, 0, sizeof(__p));
                  *(_OWORD *)uint64_t v180 = 0u;
                  operations_research::sat::NegationOf(*v59, (int8x16_t **)&v167);
                  if (v180[0])
                  {
                    v180[1] = v180[0];
                    operator delete(v180[0]);
                  }
                  int v79 = (int *)v167;
                  int v78 = v168;
                  v180[0] = v167;
                  v180[1] = v168;
                  v181[0] = (void *)v169;
                  if ((unint64_t)v168 < (unint64_t)v169)
                  {
                    int *v168 = a1;
                    uint64_t v80 = v78 + 1;
                    goto LABEL_117;
                  }
                  uint64_t v81 = ((char *)v168 - (unsigned char *)v167) >> 2;
                  unint64_t v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 62) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v83 = v169 - (void)v167;
                  if ((uint64_t)(v169 - (void)v167) >> 1 > v82) {
                    unint64_t v82 = v83 >> 1;
                  }
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v84 = v82;
                  }
                  if (v84)
                  {
                    if (v84 >> 62) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    uint64_t v85 = operator new(4 * v84);
                    uint64_t v86 = (int *)&v85[4 * v81];
                    *uint64_t v86 = a1;
                    uint64_t v80 = v86 + 1;
                    if (v78 != v79)
                    {
LABEL_106:
                      unint64_t v87 = (char *)(v78 - 1) - (char *)v79;
                      if (v87 >= 0x2C)
                      {
                        int v59 = a2;
                        if ((unint64_t)((char *)v79 - v85) >= 0x20)
                        {
                          uint64_t v88 = (v87 >> 2) + 1;
                          uint64_t v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
                          uint64_t v90 = &v78[v89 / 0xFFFFFFFFFFFFFFFCLL];
                          uint64_t v86 = (int *)((char *)v86 - v89);
                          unint64_t v91 = &v85[4 * v81 - 16];
                          unint64_t v92 = v78 - 4;
                          uint64_t v93 = v88 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            long long v94 = *(_OWORD *)v92;
                            *(v91 - 1) = *((_OWORD *)v92 - 1);
                            *unint64_t v91 = v94;
                            v91 -= 2;
                            v92 -= 8;
                            v93 -= 8;
                          }
                          while (v93);
                          int v78 = v90;
                          if (v88 == (v88 & 0x7FFFFFFFFFFFFFF8))
                          {
LABEL_115:
                            v180[0] = v86;
                            v180[1] = v80;
                            v181[0] = &v85[4 * v84];
                            if (v79) {
                              operator delete(v79);
                            }
LABEL_117:
                            v180[1] = v80;
                            uint64_t v96 = (char **)(*v59 + 3);
                            if (&v181[1] != (void **)v96) {
                              std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&v181[1], *v96, (*v59)[4]->i8, ((char *)(*v59)[4] - *v96) >> 3);
                            }
                            unint64_t v97 = (char *)__p[0];
                            if (__p[0] < __p[1])
                            {
                              *(void *)__p[0] = 1;
                              uint64_t v98 = v97 + 8;
                              goto LABEL_141;
                            }
                            unsigned int v99 = (char *)v181[1];
                            int64_t v100 = (char *)__p[0] - (char *)v181[1];
                            int64_t v101 = ((char *)__p[0] - (char *)v181[1]) >> 3;
                            unint64_t v102 = v101 + 1;
                            if ((unint64_t)(v101 + 1) >> 61) {
                              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                            }
                            int64_t v103 = (char *)__p[1] - (char *)v181[1];
                            if (((char *)__p[1] - (char *)v181[1]) >> 2 > v102) {
                              unint64_t v102 = v103 >> 2;
                            }
                            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v104 = v102;
                            }
                            if (v104)
                            {
                              if (v104 >> 61) {
                                std::__throw_bad_array_new_length[abi:ne180100]();
                              }
                              uint64_t v105 = operator new(8 * v104);
                              double v106 = &v105[8 * v101];
                              void *v106 = 1;
                              uint64_t v98 = v106 + 1;
                              if (v97 == v99) {
                                goto LABEL_139;
                              }
                            }
                            else
                            {
                              uint64_t v105 = 0;
                              double v106 = (void *)(8 * v101);
                              *(void *)(8 * v101) = 1;
                              uint64_t v98 = (void *)(8 * v101 + 8);
                              if (v97 == v99)
                              {
LABEL_139:
                                v181[1] = v106;
                                __p[0] = v98;
                                __p[1] = &v105[8 * v104];
                                if (v99) {
                                  operator delete(v99);
                                }
LABEL_141:
                                __p[0] = v98;
                                operator new();
                              }
                            }
                            unint64_t v107 = v97 - 8 - v99;
                            if (v107 < 0x58) {
                              goto LABEL_228;
                            }
                            if ((unint64_t)(v97 - &v105[v100]) < 0x20) {
                              goto LABEL_228;
                            }
                            uint64_t v108 = (v107 >> 3) + 1;
                            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
                            uint64_t v110 = &v97[-v109];
                            double v106 = (void *)((char *)v106 - v109);
                            unint64_t v111 = &v105[8 * v101 - 16];
                            uint64_t v112 = v97 - 16;
                            uint64_t v113 = v108 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v114 = *(_OWORD *)v112;
                              *(v111 - 1) = *((_OWORD *)v112 - 1);
                              *unint64_t v111 = v114;
                              v111 -= 2;
                              v112 -= 32;
                              v113 -= 4;
                            }
                            while (v113);
                            unint64_t v97 = v110;
                            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_228:
                              do
                              {
                                uint64_t v115 = *((void *)v97 - 1);
                                v97 -= 8;
                                *--double v106 = v115;
                              }
                              while (v97 != v99);
                            }
                            goto LABEL_139;
                          }
                        }
                      }
                      else
                      {
                        int v59 = a2;
                      }
                      do
                      {
                        int v95 = *--v78;
                        *--uint64_t v86 = v95;
                      }
                      while (v78 != v79);
                      goto LABEL_115;
                    }
                  }
                  else
                  {
                    uint64_t v85 = 0;
                    uint64_t v86 = (int *)(4 * v81);
                    *(_DWORD *)(4 * v81) = a1;
                    uint64_t v80 = (void *)(4 * v81 + 4);
                    if (v78 != v79) {
                      goto LABEL_106;
                    }
                  }
                  int v59 = a2;
                  goto LABEL_115;
                }
              }
            }
            else
            {
              int v59 = a2;
            }
            do
            {
              int v77 = *((_DWORD *)v57 - 1);
              v57 -= 4;
              *((_DWORD *)v67 - 1) = v77;
              v67 -= 4;
            }
            while (v57 != v60);
            goto LABEL_91;
          }
        }
        else
        {
          long long v66 = 0;
          long long v67 = (char *)(4 * v62);
          *(_DWORD *)(4 * v62) = v56;
          uint64_t v58 = 4 * v62 + 4;
          if (v57 != v60) {
            goto LABEL_82;
          }
        }
        int v59 = a2;
        goto LABEL_91;
      }
    }
    unint64_t v46 = (char *)(v36 - 1) - (char *)v38;
    if (v46 < 0x2C) {
      goto LABEL_229;
    }
    if ((unint64_t)((char *)v36 - &v44[v39]) < 0x20) {
      goto LABEL_229;
    }
    uint64_t v47 = (v46 >> 2) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    BOOL v49 = &v36[v48 / 0xFFFFFFFFFFFFFFFCLL];
    int v45 = (int *)((char *)v45 - v48);
    uint64_t v50 = &v44[4 * v40 - 16];
    uint64_t v51 = v36 - 4;
    uint64_t v52 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *uint64_t v50 = v53;
      v50 -= 2;
      v51 -= 8;
      v52 -= 8;
    }
    while (v52);
    BOOL v36 = v49;
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_229:
      do
      {
        int v54 = *--v36;
        *--int v45 = v54;
      }
      while (v36 != v38);
    }
    goto LABEL_69;
  }
  operations_research::sat::ExactlyOneConstraint((uint64_t)&v177, (uint64_t)v188);
  v180[0] = a3;
  if (!v189) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, void **))(*v189 + 48))(v189, v180);
  uint64_t v116 = a4;
  if (v189 == v188)
  {
    (*(void (**)(void *))(v188[0] + 32))(v188);
    v174 = 0;
    *(void *)uint64_t v175 = 0;
    uint64_t v176 = 0;
  }
  else
  {
    if (v189) {
      (*(void (**)(void))(*v189 + 40))();
    }
    v174 = 0;
    *(void *)uint64_t v175 = 0;
    uint64_t v176 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *,false>(0, 0, (uint64_t)v180, 0, 1);
  v180[0] = 0;
  v180[1] = 0;
  v181[0] = 0;
  if (v157)
  {
    if ((v157 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    long long v117 = (char *)operator new(v157 >> 29);
    uint64_t v118 = &v117[8 * (int)v24];
    v180[0] = v117;
    v181[0] = &v117[8 * v158];
    bzero(v117, v157 >> 29);
    v180[1] = v118;
  }
  std::vector<std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::vector(&v172, v158, (uint64_t)v180);
  if (v180[0])
  {
    v180[1] = v180[0];
    operator delete(v180[0]);
  }
  uint64_t v165 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  if (v159 >= 1)
  {
    for (uint64_t i = 0; i != v159; ++i)
    {
      for (uint64_t j = 0; j != v159; ++j)
      {
        if (i != j)
        {
          uint64_t v122 = (int *)v174;
          unint64_t v121 = *(int **)v175;
          if (v174 != *(void **)v175)
          {
            do
            {
              int v123 = *v122;
              uint64_t v124 = *(void *)(v165 + 144);
              uint64_t v125 = *(void *)(v124 + 20 * *v122);
              uint64_t v126 = *(void *)(v124 + 20 * (*v122 ^ 1));
              uint64_t Coefficient = operations_research::sat::GetCoefficient(*v122, &(*a2)[7 * j]);
              uint64_t v128 = operations_research::sat::GetCoefficient(v123, &(*a2)[7 * i]);
              uint64_t v129 = (Coefficient - v128) * v125;
              uint64_t v130 = v126 * (Coefficient - v128);
              if (v129 <= -v130) {
                uint64_t v129 = -v130;
              }
              *(void *)(*((void *)v172 + 3 * i) + 8 * j) += v129;
              ++v122;
            }
            while (v122 != v121);
          }
        }
      }
    }
    uint64_t v131 = 0;
    uint64_t v116 = a4;
    unint64_t v132 = a2;
    do
    {
      unint64_t v133 = v161;
      unint64_t v134 = (void *)*v161;
      if (!*v161) {
        goto LABEL_176;
      }
      do
      {
        unint64_t v135 = v134[4];
        BOOL v136 = v135 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v135 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
          uint64_t v137 = v134;
        }
        else {
          uint64_t v137 = v134 + 1;
        }
        if (v136) {
          unint64_t v133 = v134;
        }
        unint64_t v134 = (void *)*v137;
      }
      while (*v137);
      if (v133 != v161
        && v133[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        unint64_t v138 = (void *)v133[5];
      }
      else
      {
LABEL_176:
        unint64_t v138 = 0;
      }
      uint64_t v167 = v138;
      uint64_t v168 = (int *)0x8000000000000002;
      long long v169 = 0u;
      long long v170 = 0u;
      uint64_t v171 = 0;
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v167, a1, 1);
      uint64_t v139 = *v132;
      unint64_t v140 = (*v132)[7 * v131];
      if ((*v132)[7 * v131 + 1] != v140)
      {
        unint64_t v141 = 0;
        do
        {
          operations_research::sat::LinearConstraintBuilder::AddTerm(&v167, v140->i32[v141], -v139[7 * v131 + 3]->i64[v141]);
          ++v141;
          uint64_t v139 = *v132;
          unint64_t v140 = (*v132)[7 * v131];
        }
        while (v141 < ((char *)(*v132)[7 * v131 + 1] - (char *)v140) >> 2);
      }
      uint64_t v142 = 0;
      uint64_t v143 = 6;
      do
      {
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v167, *((_DWORD *)v177 + v142), -(uint64_t)(*a2)[v143]->i64 - *(void *)(*((void *)v172 + 3 * v131) + 8 * v142)) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v180, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 708);
          unint64_t v156 = (void *)google::LogMessage::stream((google::LogMessage *)v180);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"Check failed: lc.AddLiteralTerm(z_lits[j], -exprs[j].offset - sum_of_max_corner_diff[i][j]) ", 92);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v180);
        }
        ++v142;
        v143 += 7;
      }
      while (v159 != v142);
      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v167, (uint64_t)v180);
      unint64_t v144 = *(void *)(a4 + 8);
      unint64_t v132 = a2;
      if (v144 >= *(void *)(a4 + 16))
      {
        uint64_t v145 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)v180);
        uint64_t v146 = __p[1];
        *(void *)(a4 + 8) = v145;
        if (v146)
        {
          __p[2] = v146;
          operator delete(v146);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v144 = *(_OWORD *)v180;
        *(void *)(v144 + 16) = 0;
        *(void *)(v144 + 24) = 0;
        *(void *)(v144 + 32) = 0;
        *(void *)(v144 + 40) = 0;
        *(_OWORD *)(v144 + 16) = *(_OWORD *)v181;
        *(void **)(v144 + 32) = __p[0];
        v181[0] = 0;
        v181[1] = 0;
        __p[0] = 0;
        *(void *)(v144 + 48) = 0;
        *(void *)(v144 + 56) = 0;
        *(_OWORD *)(v144 + 40) = *(_OWORD *)&__p[1];
        *(void *)(v144 + 56) = v183;
        __p[1] = 0;
        __p[2] = 0;
        uint64_t v183 = 0;
        *(void *)(a4 + 8) = v144 + 64;
      }
      if (v181[0])
      {
        v181[1] = v181[0];
        operator delete(v181[0]);
      }
      if ((void)v170)
      {
        *((void *)&v170 + 1) = v170;
        operator delete((void *)v170);
      }
      ++v131;
    }
    while (v131 != v159);
  }
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v184, (uint64_t)v180);
  unint64_t v147 = *(void *)(v116 + 8);
  if (v147 >= *(void *)(v116 + 16))
  {
    unint64_t v148 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)v116, (uint64_t)v180);
    unint64_t v149 = __p[1];
    *(void *)(v116 + 8) = v148;
    if (v149)
    {
      __p[2] = v149;
      operator delete(v149);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v147 = *(_OWORD *)v180;
    *(void *)(v147 + 16) = 0;
    *(void *)(v147 + 24) = 0;
    *(void *)(v147 + 32) = 0;
    *(void *)(v147 + 40) = 0;
    *(_OWORD *)(v147 + 16) = *(_OWORD *)v181;
    *(void **)(v147 + 32) = __p[0];
    v181[0] = 0;
    v181[1] = 0;
    *(void *)(v147 + 48) = 0;
    *(void *)(v147 + 56) = 0;
    *(_OWORD *)(v147 + 40) = *(_OWORD *)&__p[1];
    *(void *)(v147 + 56) = v183;
    memset(__p, 0, sizeof(__p));
    uint64_t v183 = 0;
    *(void *)(v116 + 8) = v147 + 64;
  }
  if (v181[0])
  {
    v181[1] = v181[0];
    operator delete(v181[0]);
  }
  BOOL v150 = (char *)v172;
  if (v172)
  {
    uint64_t v151 = v173;
    uint64_t v152 = v172;
    if (v173 != v172)
    {
      BOOL v153 = v173;
      do
      {
        int v155 = (void *)*((void *)v153 - 3);
        v153 -= 24;
        unint64_t v154 = v155;
        if (v155)
        {
          *((void *)v151 - 2) = v154;
          operator delete(v154);
        }
        uint64_t v151 = v153;
      }
      while (v153 != v150);
      uint64_t v152 = v172;
    }
    uint64_t v173 = v150;
    operator delete(v152);
  }
  if (v174)
  {
    *(void *)uint64_t v175 = v174;
    operator delete(v174);
  }
  if (*((void *)&v186 + 1))
  {
    *(void *)&long long v187 = *((void *)&v186 + 1);
    operator delete(*((void **)&v186 + 1));
  }
  if (v177)
  {
    uint64_t v178 = (char *)v177;
    operator delete(v177);
  }
}

void sub_23CD346E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char *__p,char *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a41);
  if (__p)
  {
    uint64_t v48 = a33;
    BOOL v49 = __p;
    if (a33 != __p)
    {
      uint64_t v50 = a33;
      do
      {
        uint64_t v52 = (void *)*((void *)v50 - 3);
        v50 -= 24;
        uint64_t v51 = v52;
        if (v52)
        {
          *(v48 - 2) = v51;
          operator delete(v51);
        }
        uint64_t v48 = v50;
      }
      while (v50 != __p);
      BOOL v49 = __p;
    }
    operator delete(v49);
    uint64_t v44 = a35;
    if (!a35)
    {
LABEL_3:
      int v45 = *(void **)(v42 - 192);
      if (!v45) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v44 = a35;
    if (!a35) {
      goto LABEL_3;
    }
  }
  operator delete(v44);
  int v45 = *(void **)(v42 - 192);
  if (!v45)
  {
LABEL_4:
    unint64_t v46 = a38;
    if (!a38) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v42 - 184) = v45;
  operator delete(v45);
  unint64_t v46 = a38;
  if (!a38)
  {
LABEL_5:
    uint64_t v47 = *(void **)a21;
    if (!*(void *)a21) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v46);
  uint64_t v47 = *(void **)a21;
  if (!*(void *)a21) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_17:
  *(void *)(a21 + 8) = v47;
  operator delete(v47);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = operator new(24 * a2);
    int64_t v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = &v6[3 * a2];
    a1[2] = v8;
    unint64_t v9 = *(const void **)a3;
    int64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        *uint64_t v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = 24 * a2;
      do
      {
        *int64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        uint64_t v12 = (char *)operator new(v10);
        *int64_t v7 = v12;
        v7[1] = v12;
        unint64_t v13 = &v12[8 * (v10 >> 3)];
        v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_23CD34AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_23CD34AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_23CD34B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::MinimizeCoreWithPropagation(operations_research::sat::SatSolver *this, const void **a2)
{
  if (!*((unsigned char *)this + 496))
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v25 = 0;
    int v26 = &v27;
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    __p[0] = 0;
    __p[1] = 0;
    int64_t v6 = v4 - v5;
    if (v4 != v5)
    {
      if (v6 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      __p[0] = operator new(v4 - v5);
      uint64_t v25 = (char *)__p[0] + 4 * (v6 >> 2);
      memmove(__p[0], v5, v6);
      __p[1] = v25;
    }
    operations_research::sat::SatSolver::Backtrack(this, 0);
    operations_research::sat::SatSolver::SetAssumptionLevel((uint64_t)this, 0);
    while (1)
    {
      int v7 = operations_research::sat::MoveOneUnprocessedLiteralLast((uint64_t)&v26, *((_DWORD *)this + 76), (unsigned __int8 **)__p);
      if (v7 == -1) {
        break;
      }
      operations_research::sat::SatSolver::Backtrack(this, v7);
      while (!*((unsigned char *)this + 496))
      {
        unint64_t v8 = *((int *)this + 76);
        if (v8 >= ((char *)__p[1] - (char *)__p[0]) >> 2) {
          break;
        }
        uint64_t v9 = (int *)((char *)__p[0] + 4 * v8);
        unint64_t v10 = *v9;
        unint64_t v11 = *(void *)(*(void *)(*((void *)this + 26) + 24) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if ((v11 >> v10))
        {
          uint64_t v12 = (char *)((char *)__p[1] - (char *)(v9 + 1));
          if (__p[1] != v9 + 1) {
            memmove(v9, v9 + 1, (char *)__p[1] - (char *)(v9 + 1));
          }
          __p[1] = &v12[(void)v9];
        }
        else
        {
          if ((v11 >> (v10 & 0x3F ^ 1)))
          {
            operations_research::sat::SatSolver::EnqueueDecisionAndBacktrackOnConflict((uint64_t)this, v10);
            operations_research::sat::SatSolver::GetLastIncompatibleDecisions(this, &v22);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            *(_OWORD *)long long __p = v22;
            uint64_t v25 = v23;
            break;
          }
          operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v10);
        }
      }
      unint64_t v13 = __p[0];
      if (__p[0] == __p[1] || *((unsigned char *)this + 496)) {
        goto LABEL_37;
      }
      int v14 = *((_DWORD *)__p[1] - 1);
      BOOL v15 = v27;
      uint64_t v16 = &v27;
      uint64_t v17 = &v27;
      if (v27)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v17 = (uint64_t **)v15;
            int v18 = *(_DWORD *)((char *)v15 + 25);
            if (v14 >= v18) {
              break;
            }
            BOOL v15 = *v17;
            uint64_t v16 = v17;
            if (!*v17) {
              goto LABEL_29;
            }
          }
          if (v18 >= v14) {
            break;
          }
          BOOL v15 = v17[1];
          if (!v15)
          {
            uint64_t v16 = v17 + 1;
            goto LABEL_29;
          }
        }
      }
      else
      {
LABEL_29:
        unint64_t v19 = (char *)operator new(0x20uLL);
        *(_DWORD *)(v19 + 25) = v14;
        *(void *)unint64_t v19 = 0;
        *((void *)v19 + 1) = 0;
        *((void *)v19 + 2) = v17;
        *uint64_t v16 = (uint64_t *)v19;
        if (*v26)
        {
          int v26 = (uint64_t **)*v26;
          unint64_t v19 = (char *)*v16;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v27, (uint64_t *)v19);
        ++v28;
      }
    }
    operations_research::sat::SatSolver::Backtrack(this, 0);
    operations_research::sat::SatSolver::SetAssumptionLevel((uint64_t)this, 0);
    unint64_t v13 = __p[0];
    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)((unsigned char *)a2[1] - (unsigned char *)*a2))
    {
      if (*operations_research::sat::MinimizeCoreWithPropagation(operations_research::sat::SatSolver *,std::vector<operations_research::sat::Literal> *)::vlocal__[0] >= 1
        && (operations_research::sat::MinimizeCoreWithPropagation(operations_research::sat::SatSolver *,std::vector<operations_research::sat::Literal> *)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::MinimizeCoreWithPropagation(operations_research::sat::SatSolver *,std::vector<operations_research::sat::Literal> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v22, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 289);
        unint64_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)&v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"minimization ", 13);
        unint64_t v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" -> ", 4);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)&v22);
      }
      std::vector<operations_research::sat::Literal>::__assign_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>,std::__wrap_iter<operations_research::sat::Literal*>>(a2, (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      unint64_t v13 = __p[0];
    }
LABEL_37:
    if (v13)
    {
      __p[1] = v13;
      operator delete(v13);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v26, v27);
  }
}

void sub_23CD34E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, void *a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::MinimizeIntegerVariableWithLinearScanAndLazyEncoding(unint64_t a1, uint64_t a2, operations_research::sat *a3)
{
  int64_t v6 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  unsigned int v10 = a1 ^ 1;
  uint64_t v11 = 12 * (int)a1;
  while (1)
  {
    uint64_t v12 = operations_research::sat::SolveIntegerProblem(a3, v8);
    if (v12 != 2) {
      return v12;
    }
    int64_t v13 = *(void *)(*(void *)(v7 + 40) + v11);
    uint64_t v14 = *(void *)(a2 + 24);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 48))(v14);
    }
    if (*(unsigned char *)(v9 + 131)) {
      break;
    }
    operations_research::sat::SatSolver::Backtrack(v6, 0);
    uint64_t v15 = 1;
    uint64_t v16 = 1 - v13;
    if (v13 < (uint64_t)0x8000000000000003) {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    a1 = a1 & 0xFFFFFFFF00000000 | HIDWORD(v16);
    if ((operations_research::sat::IntegerTrail::Enqueue(v7, __SPAIR64__(v16, v10), a1, 0, 0, 0, 0) & 1) == 0) {
      return v15;
    }
  }
  return 3;
}

void operations_research::sat::RestrictObjectiveDomainWithBinarySearch(unint64_t a1, uint64_t a2, operations_research::sat *a3)
{
  uint64_t v5 = (const operations_research::sat::SatParameters *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v48, v5);
  uint64_t v44 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  uint64_t v42 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&__p, (const operations_research::sat::SatParameters *)v48);
  HIDWORD(v46) |= 0x40000000u;
  uint64_t v47 = v49;
  uint64_t v7 = (operations_research::sat::SatParameters *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  operations_research::sat::SatParameters::CopyFrom(v7, (const operations_research::sat::SatParameters *)&__p);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&__p);
  int v8 = a1;
  int v9 = a1 ^ 1;
  uint64_t v10 = *(void *)(v6 + 40);
  uint64_t v11 = -*(void *)(v10 + 12 * (int)(a1 ^ 1));
  uint64_t v12 = *(void *)(v10 + 12 * (int)a1);
  int v43 = a1 ^ 1;
  while (1)
  {
    operations_research::sat::SatSolver::Backtrack(v44, 0);
    uint64_t v13 = *(void *)(v6 + 40);
    uint64_t v14 = *(void *)(v13 + 12 * v8);
    uint64_t v15 = *(void *)(v13 + 12 * v9);
    uint64_t v16 = -v15;
    if (v11 >= -v15) {
      uint64_t v11 = -v15;
    }
    if (v12 <= v14) {
      uint64_t v12 = v14;
    }
    uint64_t v17 = v11 - v14;
    if (v11 <= v14) {
      break;
    }
    if (v17 >= 0) {
      uint64_t v18 = v11 - v14;
    }
    else {
      uint64_t v18 = v17 + 1;
    }
    uint64_t v19 = v14 + (v18 >> 1);
    unint64_t v20 = off_26AED00D8[0];
    if (*off_26AED00D8[0] >= 1)
    {
LABEL_19:
      if (v20 != &google::kLogSiteUninitialized
        || google::InitVLOG3__((google *)off_26AED00D8, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1160);
        unint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Binary-search, objective: [", 27);
        long long v22 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)",", 1);
        uint64_t v23 = (void *)std::ostream::operator<<();
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" tried: [", 9);
        uint64_t v25 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)",", 1);
        int v26 = (void *)std::ostream::operator<<();
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"]", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" target: obj<=", 14);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)&__p);
      }
    }
LABEL_22:
    if (v19 >= v16)
    {
      long long __p = 0uLL;
      unint64_t v46 = 0;
      int v31 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, a3);
    }
    else
    {
      uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
      if (v19 >= (uint64_t)0x8000000000000002) {
        uint64_t v28 = -v19;
      }
      LODWORD(__p) = v43;
      *(void *)((char *)&__p + 4) = v28;
      a1 = a1 & 0xFFFFFFFF00000000 | HIDWORD(v28);
      int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v42, (const char *)__p, a1);
      BOOL v30 = operator new(4uLL);
      *(void *)&long long __p = v30;
      *BOOL v30 = AssociatedLiteral;
      *((void *)&__p + 1) = v30 + 1;
      unint64_t v46 = v30 + 1;
      int v31 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, a3);
    }
    int v32 = v31;
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    switch(v32)
    {
      case 3:
        if (v11 >= v19) {
          uint64_t v11 = v19;
        }
        if (v19 > v12) {
          uint64_t v12 = v19;
        }
        break;
      case 2:
        int64_t v34 = *(void *)(*(void *)(v6 + 40) + 12 * v8);
        uint64_t v35 = *(void *)(a2 + 24);
        if (v35) {
          (*(void (**)(uint64_t))(*(void *)v35 + 48))(v35);
        }
        operations_research::sat::SatSolver::Backtrack(v44, 0);
        uint64_t v36 = 1 - v34;
        if (v34 < (uint64_t)0x8000000000000003) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        LODWORD(__p) = v43;
        *(void *)((char *)&__p + 4) = v36;
        unint64_t v39 = v39 & 0xFFFFFFFF00000000 | HIDWORD(v36);
        char v33 = operations_research::sat::IntegerTrail::Enqueue(v6, __p, SHIDWORD(v36), 0, 0, 0, 0);
        goto LABEL_38;
      case 1:
        goto LABEL_45;
      case 0:
        operations_research::sat::SatSolver::Backtrack(v44, 0);
        LODWORD(__p) = v8;
        *(void *)((char *)&__p + 4) = v19 + 1;
        unint64_t v40 = v40 & 0xFFFFFFFF00000000 | ((unint64_t)(v19 + 1) >> 32);
        char v33 = operations_research::sat::IntegerTrail::Enqueue(v6, __p, (unint64_t)(v19 + 1) >> 32, 0, 0, 0, 0);
LABEL_38:
        if ((v33 & 1) == 0) {
          goto LABEL_45;
        }
        break;
    }
  }
  if (v16 > v12)
  {
    uint64_t v19 = -(v15 + (v16 - v12) / 2);
    unint64_t v20 = off_26AED00D8[0];
    if (*off_26AED00D8[0] >= 1) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  if (*_MergedGlobals_15[0] >= 1
    && (_MergedGlobals_15[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_15, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1157);
    uint64_t v37 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Binary-search, done.", 20);
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
  }
LABEL_45:
  operations_research::sat::SatSolver::Backtrack(v44, 0);
  unint64_t v38 = (operations_research::sat::SatParameters *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  operations_research::sat::SatParameters::CopyFrom(v38, (const operations_research::sat::SatParameters *)v48);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v48);
}

void sub_23CD354C4(_Unwind_Exception *a1)
{
}

uint64_t operations_research::sat::CoreBasedOptimizer::CoreBasedOptimizer(uint64_t a1, int a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a6);
  *(void *)(a1 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a6);
  *(void *)(a1 + 16) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a6);
  *(void *)(a1 + 24) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a6);
  uint64_t v12 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a6);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 48) = a2;
  unint64_t v41 = (int **)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v13 = (void *)(a5 + 24);
  uint64_t v14 = *(void *)(a5 + 24);
  if (!v14)
  {
    uint64_t v13 = (void *)(a1 + 112);
    goto LABEL_5;
  }
  if (v14 != a5)
  {
    *(void *)(a1 + 112) = v14;
LABEL_5:
    *uint64_t v13 = 0;
    goto LABEL_7;
  }
  *(void *)(a1 + 112) = a1 + 88;
  (*(void (**)(void, uint64_t))(*(void *)*v13 + 24))(*v13, a1 + 88);
LABEL_7:
  *(_WORD *)(a1 + 120) = 0;
  uint64_t v16 = *a3;
  uint64_t v15 = a3[1];
  uint64_t v42 = (v15 - *a3) >> 2;
  uint64_t v43 = (uint64_t)(a4[1] - *a4) >> 3;
  if (v42 != v43) {
    google::MakeCheckOpString<unsigned long,unsigned long>((int)&v42, (int)&v43, "variables.size() == coefficients.size()");
  }
  if (v15 != v16)
  {
    for (unint64_t i = 0; i < (v15 - v16) >> 2; ++i)
    {
      uint64_t v19 = *(void *)(*a4 + 8 * i);
      if (v19 < 1)
      {
        if ((v19 & 0x8000000000000000) == 0) {
          continue;
        }
        int v20 = *(_DWORD *)(v16 + 4 * i) ^ 1;
        uint64_t v19 = -v19;
        long long v22 = *(int **)(a1 + 64);
        unint64_t v29 = *(void *)(a1 + 72);
        if ((unint64_t)v22 >= v29)
        {
          BOOL v30 = *v41;
          uint64_t v31 = ((char *)v22 - (char *)*v41) >> 5;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 59) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v29 - (void)v30;
          if (v33 >> 4 > v32) {
            unint64_t v32 = v33 >> 4;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v32;
          }
          if (v27)
          {
            if (v27 >> 59) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v28 = (char *)operator new(32 * v27);
          }
          else
          {
            uint64_t v28 = 0;
          }
          int64_t v34 = &v28[32 * v31];
          *(_DWORD *)int64_t v34 = v20;
          *(void *)(v34 + 4) = v19;
          *(void *)(v34 + 20) = 0;
          *(void *)(v34 + 12) = 0;
          *((_DWORD *)v34 + 7) = 0;
          uint64_t v35 = v34;
          if (v22 != v30)
          {
            do
            {
              long long v38 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v35 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v35 - 1) = v38;
              v35 -= 32;
              v22 -= 8;
            }
            while (v22 != v30);
LABEL_38:
            long long v22 = *v41;
          }
LABEL_39:
          uint64_t v37 = &v28[32 * v27];
          uint64_t v18 = v34 + 32;
          *(void *)(a1 + 56) = v35;
          *(void *)(a1 + 64) = v34 + 32;
          *(void *)(a1 + 72) = v37;
          if (v22) {
            operator delete(v22);
          }
          goto LABEL_11;
        }
      }
      else
      {
        int v20 = *(_DWORD *)(v16 + 4 * i);
        long long v22 = *(int **)(a1 + 64);
        unint64_t v21 = *(void *)(a1 + 72);
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v23 = *v41;
          uint64_t v24 = ((char *)v22 - (char *)*v41) >> 5;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 59) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v21 - (void)v23;
          if (v26 >> 4 > v25) {
            unint64_t v25 = v26 >> 4;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            if (v27 >> 59) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v28 = (char *)operator new(32 * v27);
          }
          else
          {
            uint64_t v28 = 0;
          }
          int64_t v34 = &v28[32 * v24];
          *(_DWORD *)int64_t v34 = v20;
          *(void *)(v34 + 4) = v19;
          *(void *)(v34 + 20) = 0;
          *(void *)(v34 + 12) = 0;
          *((_DWORD *)v34 + 7) = 0;
          uint64_t v35 = v34;
          if (v22 != v23)
          {
            do
            {
              long long v36 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v35 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v35 - 1) = v36;
              v35 -= 32;
              v22 -= 8;
            }
            while (v22 != v23);
            goto LABEL_38;
          }
          goto LABEL_39;
        }
      }
      *long long v22 = v20;
      *(void *)(v22 + 1) = v19;
      uint64_t v18 = v22 + 8;
      *(void *)(v22 + 5) = 0;
      *(void *)(v22 + 3) = 0;
      v22[7] = 0;
LABEL_11:
      *(void *)(a1 + 64) = v18;
      *(v18 - 5) = 0;
      uint64_t v16 = *a3;
      uint64_t v15 = a3[1];
    }
  }
  uint64_t v39 = 0x7FFFFFFFFFFFFFFELL;
  if (!*(_DWORD *)(*(void *)a1 + 320)) {
    uint64_t v39 = 1;
  }
  *(void *)(a1 + 80) = v39;
  return a1;
}

{
  return operations_research::sat::CoreBasedOptimizer::CoreBasedOptimizer(a1, a2, a3, a4, a5, a6);
}

void sub_23CD35914(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void **a10)
{
  std::function<void ()(void)>::~function(a9);
  uint64_t v12 = *a10;
  if (*a10)
  {
    *(void *)(v10 + 64) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CoreBasedOptimizer::ProcessSolution(operations_research::sat::CoreBasedOptimizer *this)
{
  uint64_t v2 = (int *)*((void *)this + 7);
  unint64_t v3 = (int *)*((void *)this + 8);
  uint64_t v4 = *(void *)(*((void *)this + 3) + 40);
  if (v2 == v3)
  {
    int64_t v5 = 0;
  }
  else
  {
    int64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v4 + 12 * *v2);
      v5 += *(void *)(v2 + 1) * v6;
      if (v6 >= *((void *)v2 + 3)) {
        uint64_t v6 = *((void *)v2 + 3);
      }
      *((void *)v2 + 3) = v6;
      v2 += 8;
    }
    while (v2 != v3);
  }
  if (v5 > -*(void *)(v4 + 12 * (*((_DWORD *)this + 12) ^ 1))) {
    return 1;
  }
  uint64_t v8 = *((void *)this + 14);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
  }
  if (*(unsigned char *)(*(void *)this + 131)) {
    *((unsigned char *)this + 121) = 1;
  }
  operations_research::sat::SatSolver::Backtrack(*((operations_research::sat::SatSolver **)this + 1), 0);
  operations_research::sat::SatSolver::SetAssumptionLevel(*((void *)this + 1), 0);
  uint64_t v9 = *((void *)this + 3);
  uint64_t v10 = 1 - v5;
  if (v5 < (uint64_t)0x8000000000000003) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  LODWORD(v11) = *((_DWORD *)this + 12) ^ 1;
  HIDWORD(v11) = v10;

  return operations_research::sat::IntegerTrail::Enqueue(v9, v11, SHIDWORD(v10), 0, 0, 0, 0);
}

uint64_t operations_research::sat::CoreBasedOptimizer::PropagateObjectiveBounds(operations_research::sat::SatSolver **this)
{
  while (1)
  {
    uint64_t result = operations_research::sat::SatSolver::ResetToLevelZero(this[1]);
    if (!result) {
      return result;
    }
    int64_t v5 = (int *)this[7];
    uint64_t v6 = (int *)this[8];
    uint64_t v7 = (uint64_t)this[3];
    uint64_t v8 = *(void *)(v7 + 40);
    if (v5 == v6)
    {
      uint64_t v9 = 0;
      int v12 = *((_DWORD *)this + 12);
      if (*(uint64_t *)(v8 + 12 * v12) < 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = (int *)this[7];
      do
      {
        uint64_t v11 = *(void *)(v8 + 12 * *v10);
        *((void *)v10 + 2) = v11;
        v9 += *(void *)(v10 + 1) * v11;
        v10 += 8;
      }
      while (v10 != v6);
      int v12 = *((_DWORD *)this + 12);
      if (v9 > *(void *)(v8 + 12 * v12))
      {
LABEL_8:
        *(_DWORD *)uint64_t v26 = v12;
        *(void *)&v26[4] = v9;
        unint64_t v2 = v2 & 0xFFFFFFFF00000000 | HIDWORD(v9);
        uint64_t result = operations_research::sat::IntegerTrail::Enqueue(v7, *(uint64_t *)v26, v2, 0, 0, 0, 0);
        if (!result) {
          return result;
        }
        int v12 = *((_DWORD *)this + 12);
        uint64_t v8 = *((void *)this[3] + 5);
        int64_t v5 = (int *)this[7];
        uint64_t v6 = (int *)this[8];
        char v13 = 1;
        if (v5 != v6)
        {
LABEL_13:
          uint64_t v14 = -(v9 + *(void *)(v8 + 12 * (v12 ^ 1)));
          while (1)
          {
            if (*(void *)(v5 + 1))
            {
              uint64_t v15 = this[3];
              uint64_t v16 = *((void *)v15 + 5);
              uint64_t v17 = *(void *)(v16 + 12 * *v5);
              uint64_t v18 = *(void *)(v16 + 12 * (*v5 ^ 1));
              uint64_t v19 = -v18;
              uint64_t v28 = -v18;
              if (v18 + v17)
              {
                uint64_t v20 = v14 / *(void *)(v5 + 1);
                if (v20 < v19 - v17)
                {
                  int64_t v27 = v20 + v17;
                  if (v20 + v17 >= v19) {
                    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v27, (int)&v28, "new_ub < var_ub");
                  }
                  uint64_t v21 = *v5;
                  unint64_t v22 = *(int *)(*((void *)v15 + 51) + 4 * v21);
                  if (v22 != -1
                    && ((*(void *)(*(void *)(*((void *)v15 + 117) + 24) + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
                  {
                    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1454);
                    unint64_t v25 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !integer_trail_->IsCurrentlyIgnored(term.var) ", 60);
                    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v26);
                  }
                  int v23 = v21 ^ 1;
                  if (v27 >= (uint64_t)0x8000000000000002) {
                    uint64_t v24 = -v27;
                  }
                  else {
                    uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  *(_DWORD *)uint64_t v26 = v23;
                  *(void *)&v26[4] = v24;
                  unint64_t v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v24);
                  uint64_t result = operations_research::sat::IntegerTrail::Enqueue((uint64_t)v15, *(uint64_t *)v26, v1, 0, 0, 0, 0);
                  if (!result) {
                    return result;
                  }
                  char v13 = 1;
                }
              }
            }
            v5 += 8;
            if (v5 == v6) {
              goto LABEL_2;
            }
          }
        }
        goto LABEL_2;
      }
    }
    char v13 = 0;
    if (v5 != v6) {
      goto LABEL_13;
    }
LABEL_2:
    if ((v13 & 1) == 0) {
      return 1;
    }
  }
}

void sub_23CD35D80(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD35D88(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::CoreBasedOptimizer::ComputeNextStratificationThreshold(operations_research::sat::CoreBasedOptimizer *this)
{
  unint64_t v2 = (int *)*((void *)this + 7);
  unint64_t v3 = (int *)*((void *)this + 8);
  if (v2 == v3)
  {
    *((void *)this + 10) = 0;
    return;
  }
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = *(void *)(v2 + 1);
    if (v8) {
      BOOL v9 = v8 < *((void *)this + 10);
    }
    else {
      BOOL v9 = 0;
    }
    if (!v9
      || !(*(void *)(*(void *)(*((void *)this + 3) + 144) + 20 * *v2)
         + *(void *)(*(void *)(*((void *)this + 3) + 144) + 20 * (*v2 ^ 1))))
    {
      goto LABEL_4;
    }
    if (v4 < v5)
    {
      *(void *)uint64_t v4 = v8;
      v4 += 8;
      uint64_t v7 = (uint64_t)v4;
      goto LABEL_4;
    }
    uint64_t v10 = (v4 - v6) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v5 - v6) >> 2 > v11) {
      unint64_t v11 = (v5 - v6) >> 2;
    }
    if ((unint64_t)(v5 - v6) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v13 = operator new(8 * v12);
      uint64_t v14 = &v13[8 * v10];
      *(void *)uint64_t v14 = *(void *)(v2 + 1);
      uint64_t v7 = (uint64_t)(v14 + 8);
      if (v4 == v6) {
        goto LABEL_26;
      }
    }
    else
    {
      char v13 = 0;
      uint64_t v14 = (char *)(8 * v10);
      *(void *)(8 * v10) = v8;
      uint64_t v7 = 8 * v10 + 8;
      if (v4 == v6) {
        goto LABEL_26;
      }
    }
    unint64_t v15 = v4 - 8 - v6;
    if (v15 >= 0x168)
    {
      if (&v13[v4 - v6 - 8 - (v15 & 0xFFFFFFFFFFFFFFF8)] > &v13[v4 - v6 - 8])
      {
        uint64_t v16 = v4;
      }
      else if (&v4[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
      {
        uint64_t v16 = v4;
      }
      else if ((unint64_t)(v6 - v13) >= 0x20)
      {
        uint64_t v18 = (v15 >> 3) + 1;
        uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v16 = &v4[-v19];
        v14 -= v19;
        uint64_t v20 = &v13[8 * v10 - 16];
        uint64_t v21 = v4 - 16;
        uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *uint64_t v20 = v23;
          v20 -= 2;
          v21 -= 32;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v16 = v4;
      }
    }
    else
    {
      uint64_t v16 = v4;
    }
    do
    {
      uint64_t v17 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v14 - 1) = v17;
      v14 -= 8;
    }
    while (v16 != v6);
LABEL_26:
    int64_t v5 = &v13[8 * v12];
    uint64_t v4 = (char *)v7;
    if (v6)
    {
      operator delete(v6);
      uint64_t v7 = (uint64_t)v4;
    }
    uint64_t v6 = v14;
LABEL_4:
    v2 += 8;
  }
  while (v2 != v3);
  uint64_t v33 = (char *)v7;
  unint64_t v32 = v6;
  if (v6 == v4)
  {
    *((void *)this + 10) = 0;
    if (v4) {
      goto LABEL_58;
    }
  }
  else
  {
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>((uint64_t)v6, v4, (uint64_t)&v34, 126 - 2 * __clz((v4 - v6) >> 3), 1);
    uint64_t v4 = v6;
    uint64_t v24 = v33;
    if (v6 != v33)
    {
      unint64_t v25 = v6 + 8;
      while (v25 != v33)
      {
        uint64_t v26 = *((void *)v25 - 1);
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        if (v26 == v27)
        {
          uint64_t v28 = v25 - 16;
          while (v25 != v33)
          {
            uint64_t v29 = v26;
            uint64_t v26 = *(void *)v25;
            if (v29 != *(void *)v25)
            {
              *((void *)v28 + 1) = v26;
              v28 += 8;
            }
            v25 += 8;
          }
          BOOL v30 = v28 + 8;
          int64_t v31 = v33 - (v28 + 8);
          if (v33 != v28 + 8)
          {
            if (v33 != &v30[v31]) {
              memmove(v28 + 8, &v30[v31], 0);
            }
            uint64_t v24 = v30;
          }
          break;
        }
      }
    }
    *((void *)this + 10) = *(void *)&v32[8 * vcvtmd_s64_f64((double)(unint64_t)((v24 - v32) >> 3) * 0.9)];
LABEL_58:
    operator delete(v4);
  }
}

void sub_23CD360F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CoreBasedOptimizer::CoverOptimization(int **this)
{
  unint64_t v3 = *this;
  uint64_t v4 = *((void *)*this + 46);
  v3[6] = (*this)[6] | 0x8000;
  *((void *)v3 + 46) = 0x3FE0000000000000;
  int64_t v5 = this[7];
  uint64_t v6 = this[8];
  if (v5 == v6)
  {
LABEL_30:
    uint64_t result = operations_research::sat::CoreBasedOptimizer::PropagateObjectiveBounds((operations_research::sat::SatSolver **)this);
  }
  else
  {
    while (1)
    {
      if (v5[3])
      {
        int v7 = *v5;
        int v8 = *v5;
        uint64_t v9 = *((void *)this[3] + 5);
        uint64_t v10 = *(void *)(v9 + 12 * (*v5 ^ 1));
        int64_t v11 = *((void *)v5 + 3) >= -v10 ? -v10 : *((void *)v5 + 3);
        if (v11 > *(void *)(v9 + 12 * v7)) {
          break;
        }
      }
LABEL_3:
      v5 += 8;
      if (v5 == v6) {
        goto LABEL_30;
      }
    }
    double v12 = *((double *)this[2] + 14) + 0.5;
    while (1)
    {
      char v13 = (unsigned int *)this[4];
      uint64_t v14 = 1 - v11;
      if (v11 < (uint64_t)0x8000000000000003) {
        uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      LODWORD(__p) = v7 ^ 1;
      *(void *)((char *)&__p + 4) = v14;
      unint64_t v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v14);
      int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v13, (const char *)__p, v1);
      uint64_t v16 = operator new(4uLL);
      *(void *)&long long __p = v16;
      *uint64_t v16 = AssociatedLiteral;
      *((void *)&__p + 1) = v16 + 1;
      uint64_t v27 = v16 + 1;
      int v17 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, (operations_research::sat *)this[5]);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v17 != 2) {
        break;
      }
      int64_t v11 = *(void *)(*((void *)this[3] + 5) + 12 * v8);
      if (*operations_research::sat::CoreBasedOptimizer::CoverOptimization(void)::vlocal__[0] >= 1
        && (operations_research::sat::CoreBasedOptimizer::CoverOptimization(void)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::CoreBasedOptimizer::CoverOptimization(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1539);
        uint64_t v18 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"cover_opt var:", 14);
        uint64_t v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" domain:[", 9);
        uint64_t v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
        uint64_t v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
        google::LogMessage::~LogMessage((google::LogMessage *)&__p);
      }
      if ((operations_research::sat::CoreBasedOptimizer::ProcessSolution((operations_research::sat::CoreBasedOptimizer *)this) & 1) == 0) {
        goto LABEL_31;
      }
      uint64_t result = operations_research::sat::SatSolver::ResetToLevelZero((operations_research::sat::SatSolver *)this[1]);
      if (!result) {
        goto LABEL_32;
      }
      if (*((unsigned char *)this + 121)
        || *((double *)this[2] + 14) > v12
        || v11 <= *(void *)(*((void *)this[3] + 5) + 12 * v8))
      {
        goto LABEL_3;
      }
    }
    if (v17)
    {
      if (v17 != 1) {
        goto LABEL_3;
      }
LABEL_31:
      uint64_t result = 0;
      goto LABEL_32;
    }
    uint64_t v23 = (uint64_t)this[3];
    LODWORD(__p) = v7;
    *(void *)((char *)&__p + 4) = v11;
    unint64_t v25 = v25 & 0xFFFFFFFF00000000 | HIDWORD(v11);
    uint64_t result = operations_research::sat::IntegerTrail::Enqueue(v23, __p, SHIDWORD(v11), 0, 0, 0, 0);
    if (result) {
      goto LABEL_3;
    }
  }
LABEL_32:
  uint64_t v24 = *this;
  v24[6] = (*this)[6] | 0x8000;
  *((void *)v24 + 46) = v4;
  return result;
}

void sub_23CD36420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *v11;
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(*v11 + 24) | 0x8000;
  *(void *)(v13 + 368) = v12;
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CoreBasedOptimizer::Optimize(operations_research::sat::CoreBasedOptimizer *this)
{
  unint64_t v2 = this;
  uint64_t v551 = *MEMORY[0x263EF8340];
  int v478 = (void *)((char *)this + 56);
  v504 = 0;
  uint64_t v505 = 0;
  v466 = (char *)this + 88;
  v503 = &v504;
  *((unsigned char *)this + 121) = 0;
  while ((operations_research::sat::CoreBasedOptimizer::PropagateObjectiveBounds((operations_research::sat::SatSolver **)v2) & 1) != 0)
  {
    if (*(unsigned char *)(*(void *)v2 + 390))
    {
      if (!operations_research::sat::CoreBasedOptimizer::CoverOptimization((int **)v2)) {
        break;
      }
      if (*((unsigned char *)v2 + 121))
      {
        int v459 = 3;
        goto LABEL_648;
      }
    }
    v500 = 0;
    v501 = 0;
    v502 = 0;
    long long __p = 0;
    v498 = 0;
    v499 = 0;
    double v494 = 0;
    uint64_t v495 = 0;
    double v496 = 0;
    uint64_t v3 = *((void *)v2 + 7);
    uint64_t v4 = *((void *)v2 + 8);
    if (v4 == v3)
    {
      char v480 = 0;
      uint64_t v8 = 0;
      unint64_t v69 = 0;
      int64_t v5 = 0;
      uint64_t v6 = 0;
      BOOL v70 = 1;
      uint64_t v9 = *((void *)v2 + 8);
      uint64_t v72 = 0;
      goto LABEL_84;
    }
    int64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    char v480 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *((void *)v2 + 8);
    do
    {
      uint64_t v10 = (int *)(v3 + 32 * v7);
      uint64_t v11 = *(void *)(v10 + 1);
      if (!v11) {
        goto LABEL_10;
      }
      int v12 = *v10;
      uint64_t v13 = *(void *)(*((void *)v2 + 3) + 40);
      int64_t v14 = *(void *)(v13 + 12 * v12);
      if (!(v14 + *(void *)(v13 + 12 * (v12 ^ 1))))
      {
        v8 += v14 * v11;
        goto LABEL_10;
      }
      if (v11 < *((void *)v2 + 10))
      {
        char v480 = 1;
        goto LABEL_10;
      }
      unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      if (v14 >= (uint64_t)0x8000000000000002) {
        unint64_t v15 = -v14;
      }
      LODWORD(v527) = v12 ^ 1;
      *(void *)((char *)&v527 + 4) = v15;
      uint64_t v16 = v527;
      unint64_t v17 = HIDWORD(v15);
      if (v6 < (_DWORD *)v499)
      {
        *(void *)uint64_t v6 = v527;
        v6[2] = HIDWORD(v15);
        v6 += 3;
        v498 = v6;
        uint64_t v1 = (uint64_t)v495;
        uint64_t v18 = v496;
        if (v495 < v496) {
          goto LABEL_19;
        }
        goto LABEL_35;
      }
      uint64_t v21 = __p;
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (unsigned char *)__p) >> 2);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v8;
      if (0x5555555555555556 * ((v499 - (unsigned char *)__p) >> 2) > v23) {
        unint64_t v23 = 0x5555555555555556 * ((v499 - (unsigned char *)__p) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v499 - (unsigned char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v25 = 0x1555555555555555;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(12 * v25);
        uint64_t v27 = &v26[12 * v22];
        *(void *)uint64_t v27 = v16;
        *((_DWORD *)v27 + 2) = v17;
        if (v6 == v21)
        {
LABEL_47:
          int64_t v31 = v6;
          uint64_t v6 = v27 + 12;
          long long __p = v27;
          v498 = v27 + 12;
          v499 = &v26[12 * v25];
          if (v31) {
            goto LABEL_33;
          }
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (char *)(4 * (((char *)v6 - (unsigned char *)__p) >> 2));
        *(void *)uint64_t v27 = v527;
        *((_DWORD *)v27 + 2) = v17;
        if (v6 == v21) {
          goto LABEL_47;
        }
      }
      uint64_t v28 = v27;
      do
      {
        uint64_t v29 = *(void *)(v6 - 3);
        v6 -= 3;
        int v30 = v6[2];
        *(void *)(v28 - 12) = v29;
        v28 -= 12;
        *((_DWORD *)v28 + 2) = v30;
      }
      while (v6 != v21);
      int64_t v31 = __p;
      uint64_t v6 = v27 + 12;
      long long __p = v28;
      v498 = v27 + 12;
      v499 = &v26[12 * v25];
      if (v31) {
LABEL_33:
      }
        operator delete(v31);
LABEL_34:
      uint64_t v8 = v24;
      v498 = v6;
      uint64_t v1 = (uint64_t)v495;
      uint64_t v18 = v496;
      if (v495 < v496)
      {
LABEL_19:
        *(void *)uint64_t v1 = v11;
        v1 += 8;
        uint64_t v495 = (unsigned char *)v1;
        uint64_t v20 = v501;
        uint64_t v19 = v502;
        if (v501 >= v502) {
          goto LABEL_59;
        }
        goto LABEL_20;
      }
LABEL_35:
      uint64_t v32 = v8;
      uint64_t v33 = v494;
      uint64_t v34 = v1 - (void)v494;
      uint64_t v35 = (v1 - (uint64_t)v494) >> 3;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v37 = v18 - (unsigned char *)v494;
      if (v37 >> 2 > v36) {
        unint64_t v36 = v37 >> 2;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        if (v38 >> 61) {
          goto LABEL_654;
        }
        uint64_t v39 = (char *)operator new(8 * v38);
        unint64_t v40 = &v39[8 * v35];
        *(void *)unint64_t v40 = v11;
        uint64_t v41 = (uint64_t)(v40 + 8);
        if ((void *)v1 == v33)
        {
LABEL_50:
          unint64_t v2 = this;
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v39 = 0;
        unint64_t v40 = (char *)(8 * v35);
        *(void *)(8 * v35) = v11;
        uint64_t v41 = 8 * v35 + 8;
        if ((void *)v1 == v33) {
          goto LABEL_50;
        }
      }
      unint64_t v42 = v1 - 8 - (void)v33;
      if (v42 < 0x58)
      {
        unint64_t v2 = this;
        do
        {
LABEL_55:
          uint64_t v51 = *(void *)(v1 - 8);
          v1 -= 8;
          *((void *)v40 - 1) = v51;
          v40 -= 8;
        }
        while ((void *)v1 != v33);
        goto LABEL_56;
      }
      unint64_t v43 = v1 - (void)&v39[v34];
      unint64_t v2 = this;
      if (v43 < 0x20) {
        goto LABEL_55;
      }
      uint64_t v44 = (v42 >> 3) + 1;
      uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v46 = v1 - v45;
      v40 -= v45;
      uint64_t v47 = &v39[8 * v35 - 16];
      uint64_t v48 = (long long *)(v1 - 16);
      uint64_t v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v50 = *v48;
        *((_OWORD *)v47 - 1) = *(v48 - 1);
        *(_OWORD *)uint64_t v47 = v50;
        v47 -= 32;
        v48 -= 2;
        v49 -= 4;
      }
      while (v49);
      uint64_t v1 = v46;
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_55;
      }
LABEL_56:
      double v494 = v40;
      double v496 = &v39[8 * v38];
      if (v33) {
        operator delete(v33);
      }
      uint64_t v8 = v32;
      uint64_t v495 = (unsigned char *)v41;
      uint64_t v20 = v501;
      uint64_t v19 = v502;
      if (v501 >= v502)
      {
LABEL_59:
        uint64_t v1 = v8;
        uint64_t v52 = (char *)v500;
        int64_t v53 = v20 - (unsigned char *)v500;
        uint64_t v54 = (v20 - (unsigned char *)v500) >> 2;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v19 - (unsigned char *)v500;
        if (v56 >> 1 > v55) {
          unint64_t v55 = v56 >> 1;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          if (v57 >> 62) {
LABEL_654:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v58 = operator new(4 * v57);
          unint64_t v2 = this;
          int v59 = &v58[4 * v54];
          *(_DWORD *)int v59 = v7;
          int64_t v5 = v59 + 4;
          if (v20 == v52) {
            goto LABEL_76;
          }
LABEL_70:
          unint64_t v60 = v20 - 4 - v52;
          if (v60 < 0x2C) {
            goto LABEL_687;
          }
          if ((unint64_t)(v20 - &v58[v53]) < 0x20) {
            goto LABEL_687;
          }
          uint64_t v61 = (v60 >> 2) + 1;
          uint64_t v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v63 = &v20[-v62];
          v59 -= v62;
          uint64_t v64 = &v58[4 * v54 - 16];
          unint64_t v65 = v20 - 16;
          uint64_t v66 = v61 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v67 = *(_OWORD *)v65;
            *(v64 - 1) = *((_OWORD *)v65 - 1);
            *uint64_t v64 = v67;
            v64 -= 2;
            v65 -= 32;
            v66 -= 8;
          }
          while (v66);
          uint64_t v20 = v63;
          if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_687:
            do
            {
              int v68 = *((_DWORD *)v20 - 1);
              v20 -= 4;
              *((_DWORD *)v59 - 1) = v68;
              v59 -= 4;
            }
            while (v20 != v52);
          }
        }
        else
        {
          uint64_t v58 = 0;
          int v59 = (char *)(4 * v54);
          *(_DWORD *)(4 * v54) = v7;
          int64_t v5 = (char *)(4 * v54 + 4);
          if (v20 != v52) {
            goto LABEL_70;
          }
        }
LABEL_76:
        v500 = v59;
        v502 = &v58[4 * v57];
        if (v52) {
          operator delete(v52);
        }
        uint64_t v8 = v1;
        goto LABEL_79;
      }
LABEL_20:
      *(_DWORD *)uint64_t v20 = v7;
      int64_t v5 = v20 + 4;
LABEL_79:
      v501 = v5;
      uint64_t v3 = *((void *)v2 + 7);
      uint64_t v9 = *((void *)v2 + 8);
LABEL_10:
      ++v7;
    }
    while (v7 < (v9 - v3) >> 5);
    unint64_t v69 = (int *)v500;
    BOOL v70 = v500 == v5;
    if (((v500 == v5) & v480) != 0)
    {
      operations_research::sat::CoreBasedOptimizer::ComputeNextStratificationThreshold(v2);
      int v71 = 2;
      goto LABEL_624;
    }
    uint64_t v4 = v3;
    uint64_t v72 = v5 - (unsigned char *)v500;
    if ((unint64_t)(v5 - (unsigned char *)v500) > 0xB)
    {
LABEL_142:
      if (*off_26AED00E8[0] >= 1)
      {
        if (off_26AED00E8[0] != &google::kLogSiteUninitialized)
        {
          if (v4 != v9) {
            goto LABEL_145;
          }
LABEL_149:
          unint64_t v121 = 0;
          goto LABEL_161;
        }
        if (google::InitVLOG3__((google *)off_26AED00E8, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1))
        {
          uint64_t v4 = *((void *)v2 + 7);
          uint64_t v9 = *((void *)v2 + 8);
          if (v4 == v9) {
            goto LABEL_149;
          }
LABEL_145:
          unint64_t v120 = v9 - v4 - 32;
          if (v120 >= 0x80)
          {
            uint64_t v123 = (v120 >> 5) + 1;
            uint64_t v124 = v123 & 3;
            if ((v123 & 3) == 0) {
              uint64_t v124 = 4;
            }
            uint64_t v125 = v123 - v124;
            uint64_t v126 = v4 + 32 * v125;
            int32x2_t v127 = 0;
            uint64_t v128 = (int32x2_t *)(v4 + 76);
            int32x2_t v129 = 0;
            do
            {
              int32x2_t v130 = vzip1_s32(v128[-8], v128[-4]);
              int32x2_t v131 = v128[4];
              int32x2_t v132 = *v128;
              v128 += 16;
              int32x2_t v127 = vmax_s32(v127, v130);
              int32x2_t v129 = vmax_s32(v129, vzip1_s32(v132, v131));
              v125 -= 4;
            }
            while (v125);
            int32x2_t v133 = vmax_s32(v127, v129);
            LODWORD(v121) = vpmax_s32(v133, v133).u32[0];
            uint64_t v4 = v126;
          }
          else
          {
            LODWORD(v121) = 0;
          }
          do
          {
            int v134 = *(_DWORD *)(v4 + 12);
            if ((int)v121 <= v134) {
              unint64_t v121 = v134;
            }
            else {
              unint64_t v121 = v121;
            }
            v4 += 32;
          }
          while (v4 != v9);
LABEL_161:
          int v135 = *((_DWORD *)v2 + 12);
          uint64_t v136 = *(void *)(*((void *)v2 + 3) + 40);
          uint64_t v137 = *(void *)(v136 + 12 * v135);
          uint64_t v138 = *(void *)(v136 + 12 * (v135 ^ 1));
          uint64_t v139 = -v138;
          if (v138 + v137)
          {
            if (v138 < 0) {
              uint64_t v138 = -v138;
            }
            if (v137 >= 0) {
              unint64_t v141 = v137;
            }
            else {
              unint64_t v141 = -v137;
            }
            if (v138 <= v141) {
              uint64_t v138 = v141;
            }
            LODWORD(v1) = vcvtpd_s64_f64((double)(v139 - v137) * 100.0 / (double)v138);
            unint64_t v140 = off_26AED00F0[0];
            if (*off_26AED00F0[0] >= 1) {
              goto LABEL_172;
            }
          }
          else
          {
            uint64_t v1 = 0;
            unint64_t v140 = off_26AED00F0[0];
            if (*off_26AED00F0[0] < 1) {
              goto LABEL_183;
            }
LABEL_172:
            if (v140 != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_26AED00F0, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v493, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1661);
              uint64_t v142 = (void *)google::LogMessage::stream((google::LogMessage *)v493);
              unint64_t v144 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v137, v512, v143);
              *(void *)&long long v511 = v512;
              *((void *)&v511 + 1) = v144 - v512;
              uint64_t v146 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v139, v510, v145);
              v508 = v510;
              uint64_t v509 = v146 - v510;
              uint64_t v147 = *((void *)v2 + 10);
              *(void *)&long long v527 = "unscaled_next_obj_range:[";
              *((void *)&v527 + 1) = 25;
              long long v528 = v511;
              v529 = ",";
              uint64_t v530 = 1;
              v531 = v510;
              v532 = (BOOL (*)(uint64_t, uint64_t, unsigned int, char *))(v146 - v510);
              int v533 = "] gap:";
              uint64_t v534 = 6;
              unint64_t v149 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v1, v526, v148);
              v524 = v526;
              v525 = (void *)(v149 - (unsigned char *)v526);
              unint64_t v535 = (unint64_t)v526;
              v536 = (BOOL (*)(int, uint64_t, unsigned int, char *))(v149 - (unsigned char *)v526);
              uint64_t v537 = "%";
              uint64_t v538 = 1;
              uint64_t v539 = " assumptions:";
              uint64_t v540 = 13;
              uint64_t v151 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)(v72 >> 2), v523, v150);
              uint64_t v521 = v523;
              uint64_t v522 = (void *)(v151 - v523);
              unint64_t v541 = v523;
              uint64_t v542 = v151 - v523;
              std::string v543 = " strat:";
              uint64_t v544 = 7;
              BOOL v153 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v147, v520, v152);
              v518 = v520;
              v519 = (char *)(v153 - (unsigned char *)v520);
              v545 = v520;
              uint64_t v546 = v153 - (unsigned char *)v520;
              v547 = " depth:";
              uint64_t v548 = 7;
              int v155 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v121, v517, v154);
              v515 = v517;
              v516 = (char *)(v155 - (unsigned char *)v517);
              std::string v549 = v517;
              uint64_t v550 = v155 - (unsigned char *)v517;
              absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)&v527, 13, (char *)v491);
              if ((v492 & 0x80u) == 0) {
                unint64_t v156 = v491;
              }
              else {
                unint64_t v156 = (void **)v491[0];
              }
              if ((v492 & 0x80u) == 0) {
                uint64_t v157 = v492;
              }
              else {
                uint64_t v157 = (uint64_t)v491[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)v156, v157);
              if ((char)v492 < 0) {
                operator delete(v491[0]);
              }
              google::LogMessage::~LogMessage((google::LogMessage *)v493);
            }
          }
        }
      }
LABEL_183:
      v519 = 0;
      v518 = 0;
      v520[0] = 0;
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v503, v504);
      v504 = 0;
      uint64_t v505 = 0;
      v503 = &v504;
      unint64_t v158 = (char *)__p;
      if (v6 == __p)
      {
        v515 = 0;
        v516 = 0;
        v517[0] = 0;
        v489 = 0;
        v490 = 0;
        v488 = 0;
        goto LABEL_252;
      }
      unint64_t v159 = 0;
      while (2)
      {
        int v160 = &v158[12 * v159];
        int v161 = *(const char **)v160;
        uint64_t v162 = *((unsigned int *)v160 + 2);
        unint64_t v484 = v484 & 0xFFFFFFFF00000000 | v162;
        int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(*((unsigned int **)v2 + 4), v161, v162);
        int v164 = AssociatedLiteral;
        uint64_t v165 = v519;
        if ((unint64_t)v519 < v520[0])
        {
          *(_DWORD *)v519 = AssociatedLiteral;
          uint64_t v166 = (uint64_t)(v165 + 4);
          goto LABEL_211;
        }
        uint64_t v167 = (char *)v518;
        int64_t v168 = v519 - (unsigned char *)v518;
        uint64_t v169 = (v519 - (unsigned char *)v518) >> 2;
        unint64_t v170 = v169 + 1;
        if ((unint64_t)(v169 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v171 = v520[0] - (void)v518;
        if ((uint64_t)(v520[0] - (void)v518) >> 1 > v170) {
          unint64_t v170 = v171 >> 1;
        }
        if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v172 = v170;
        }
        if (v172)
        {
          if (v172 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v173 = (char *)operator new(4 * v172);
          v174 = &v173[4 * v169];
          *(_DWORD *)v174 = v164;
          uint64_t v166 = (uint64_t)(v174 + 4);
          if (v165 != v167)
          {
LABEL_200:
            unint64_t v175 = v165 - 4 - v167;
            if (v175 < 0x2C) {
              goto LABEL_688;
            }
            if ((unint64_t)(v165 - &v173[v168]) < 0x20) {
              goto LABEL_688;
            }
            uint64_t v176 = (v175 >> 2) + 1;
            uint64_t v177 = 4 * (v176 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v178 = &v165[-v177];
            v174 -= v177;
            uint64_t v179 = &v173[4 * v169 - 16];
            uint64_t v180 = v165 - 16;
            uint64_t v181 = v176 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v182 = *(_OWORD *)v180;
              *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
              *(_OWORD *)uint64_t v179 = v182;
              v179 -= 32;
              v180 -= 32;
              v181 -= 8;
            }
            while (v181);
            uint64_t v165 = v178;
            if (v176 != (v176 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_688:
              do
              {
                int v183 = *((_DWORD *)v165 - 1);
                v165 -= 4;
                *((_DWORD *)v174 - 1) = v183;
                v174 -= 4;
              }
              while (v165 != v167);
            }
          }
        }
        else
        {
          uint64_t v173 = 0;
          v174 = (char *)(4 * v169);
          *(_DWORD *)(4 * v169) = v164;
          uint64_t v166 = 4 * v169 + 4;
          if (v165 != v167) {
            goto LABEL_200;
          }
        }
        v518 = v174;
        v520[0] = &v173[4 * v172];
        if (v167) {
          operator delete(v167);
        }
LABEL_211:
        v519 = (char *)v166;
        int v184 = *((_DWORD *)v500 + v159);
        int v185 = *(_DWORD *)(v166 - 4);
        long long v186 = v504;
        for (unint64_t i = &v504; ; v186 = *i)
        {
          uint64_t v188 = i;
          if (!v186) {
            break;
          }
          while (1)
          {
            unint64_t i = (uint64_t **)v186;
            int v189 = *((_DWORD *)v186 + 7);
            if (v185 < v189) {
              break;
            }
            if (v189 >= v185)
            {
              long long v190 = i;
              goto LABEL_188;
            }
            long long v186 = i[1];
            if (!v186)
            {
              uint64_t v188 = i + 1;
              goto LABEL_218;
            }
          }
        }
LABEL_218:
        long long v190 = operator new(0x28uLL);
        v190[7] = v185;
        v190[8] = 0;
        *(void *)long long v190 = 0;
        *((void *)v190 + 1) = 0;
        *((void *)v190 + 2) = i;
        unsigned char *v188 = (uint64_t *)v190;
        long long v191 = (uint64_t *)v190;
        if (*v503)
        {
          v503 = (uint64_t **)*v503;
          long long v191 = *v188;
        }
        double v192 = v504;
        BOOL v193 = v191 == v504;
        *((unsigned char *)v191 + 24) = v191 == v504;
        if (v193) {
          goto LABEL_187;
        }
        while (1)
        {
          int v194 = (uint64_t *)v191[2];
          if (*((unsigned char *)v194 + 24)) {
            goto LABEL_187;
          }
          int v195 = (uint64_t *)v194[2];
          uint64_t v196 = (uint64_t *)*v195;
          if ((uint64_t *)*v195 == v194) {
            break;
          }
          if (!v196 || (v198 = *((unsigned __int8 *)v196 + 24), int64_t v197 = v196 + 3, v198))
          {
            if ((uint64_t *)*v194 == v191)
            {
              uint64_t v204 = v191[1];
              uint64_t *v194 = v204;
              if (v204)
              {
                *(void *)(v204 + 16) = v194;
                int v195 = (uint64_t *)v194[2];
              }
              v191[2] = (uint64_t)v195;
              *(void *)(v194[2] + 8 * (*(void *)v194[2] != (void)v194)) = v191;
              v191[1] = (uint64_t)v194;
              v194[2] = (uint64_t)v191;
              int v195 = (uint64_t *)v191[2];
            }
            else
            {
              long long v191 = (uint64_t *)v191[2];
            }
            *((unsigned char *)v191 + 24) = 1;
            *((unsigned char *)v195 + 24) = 0;
            int v194 = (uint64_t *)v195[1];
            uint64_t v205 = *v194;
            v195[1] = *v194;
            if (v205) {
              *(void *)(v205 + 16) = v195;
            }
            v194[2] = v195[2];
            *(void *)(v195[2] + 8 * (*(void *)v195[2] != (void)v195)) = v194;
            uint64_t *v194 = (uint64_t)v195;
            goto LABEL_186;
          }
LABEL_223:
          *((unsigned char *)v194 + 24) = 1;
          long long v191 = v195;
          *((unsigned char *)v195 + 24) = v195 == v192;
          unsigned char *v197 = 1;
          if (v195 == v192) {
            goto LABEL_187;
          }
        }
        uint64_t v199 = v195[1];
        if (v199)
        {
          int v200 = *(unsigned __int8 *)(v199 + 24);
          int64_t v197 = (unsigned char *)(v199 + 24);
          if (!v200) {
            goto LABEL_223;
          }
        }
        if ((uint64_t *)*v194 == v191)
        {
          *((unsigned char *)v194 + 24) = 1;
          *((unsigned char *)v195 + 24) = 0;
          uint64_t v203 = v194[1];
          uint64_t *v195 = v203;
          if (v203) {
            goto LABEL_235;
          }
        }
        else
        {
          unint64_t v201 = (uint64_t **)v194[1];
          uint64_t v202 = *v201;
          v194[1] = (uint64_t)*v201;
          if (v202)
          {
            v202[2] = (uint64_t)v194;
            int v195 = (uint64_t *)v194[2];
          }
          v201[2] = v195;
          *(void *)(v194[2] + 8 * (*(void *)v194[2] != (void)v194)) = v201;
          char *v201 = v194;
          v194[2] = (uint64_t)v201;
          int v195 = v201[2];
          int v194 = (uint64_t *)*v195;
          *((unsigned char *)v201 + 24) = 1;
          *((unsigned char *)v195 + 24) = 0;
          uint64_t v203 = v194[1];
          uint64_t *v195 = v203;
          if (v203) {
LABEL_235:
          }
            *(void *)(v203 + 16) = v195;
        }
        v194[2] = v195[2];
        *(void *)(v195[2] + 8 * (*(void *)v195[2] != (void)v195)) = v194;
        v194[1] = (uint64_t)v195;
LABEL_186:
        v195[2] = (uint64_t)v194;
LABEL_187:
        ++v505;
        uint64_t v6 = v498;
LABEL_188:
        v190[8] = v184;
        ++v159;
        unint64_t v158 = (char *)__p;
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (unsigned char *)__p) >> 2) <= v159)
        {
          int v206 = v518;
          v515 = 0;
          v516 = 0;
          v517[0] = 0;
          v489 = 0;
          v490 = 0;
          v488 = 0;
          int64_t v207 = v519 - (unsigned char *)v518;
          if (v519 != v518)
          {
            if (v207 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            v488 = operator new(v519 - (unsigned char *)v518);
            v489 = v488;
            uint64_t v208 = (char *)v488 + 4 * (v207 >> 2);
            v490 = v208;
            memcpy(v488, v206, v207);
            v489 = v208;
            uint64_t v485 = 0;
            uint64_t v486 = 0;
            v487 = 0;
            int v209 = v494;
            int64_t v210 = v495 - (unsigned char *)v494;
            if (v495 == v494)
            {
LABEL_255:
              uint64_t v1 = *((void *)v2 + 10);
              long long v212 = (operations_research::sat *)*((void *)v2 + 5);
              v516 = 0;
              int v213 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v212);
              int v214 = (absl::lts_2020_02_25 *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)v212);
              uint64_t v215 = v214;
              v482 = (int *)((char *)v214 + 32);
              uint64_t v467 = v1;
              uint64_t v469 = v213;
              v471 = v212;
              while (1)
              {
                long long v216 = (unsigned __int8 *)*((void *)v215 + 15);
                if (v216)
                {
                  unsigned __int8 v217 = atomic_load(v216);
                  if (v217) {
                    goto LABEL_367;
                  }
                }
                if (fmax(*((double *)v215 + 13) - *((double *)v215 + 14), 0.0) <= 0.0) {
                  goto LABEL_367;
                }
                std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v214);
                std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v219 = CurrentTimeNanos;
                if (*((void *)v215 + 3) <= CurrentTimeNanos - *((void *)v215 + 1)) {
                  uint64_t v220 = CurrentTimeNanos - *((void *)v215 + 1);
                }
                else {
                  uint64_t v220 = *((void *)v215 + 3);
                }
                operations_research::RunningMax<long long>::Add(v482, v220);
                *((void *)v215 + 1) = v219;
                if (*(void *)(*((void *)v215 + 5) + 8 * *((int *)v215 + 17)) + v219 >= *((void *)v215 + 2))
                {
                  if (!FLAGS_time_limit_use_usertime) {
                    goto LABEL_366;
                  }
                  double v222 = *((double *)v215 + 12);
                  if (*((unsigned char *)v215 + 72))
                  {
                    double v223 = v222
                         + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v221)
                                  - *((void *)v215 + 10)
                                  + *((void *)v215 + 11))
                         * -0.000000001;
                    if (v223 <= 0.0001) {
                      goto LABEL_366;
                    }
                  }
                  else
                  {
                    double v223 = v222 + (double)*((uint64_t *)v215 + 11) * -0.000000001;
                    if (v223 <= 0.0001)
                    {
LABEL_366:
                      *((void *)v215 + 2) = 0;
LABEL_367:
                      int v71 = 3;
LABEL_368:
                      int v284 = (uint64_t *)v485;
                      if (!v485) {
                        goto LABEL_370;
                      }
                      goto LABEL_369;
                    }
                  }
                  *((void *)v215 + 2) = *((void *)v215 + 1) + (uint64_t)(v223 * 1000000000.0);
                }
                int v71 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&v488, v212);
                if (v71) {
                  goto LABEL_368;
                }
                operations_research::sat::SatSolver::GetLastIncompatibleDecisions(v213, &v527);
                if (*(unsigned char *)(operations_research::sat::SatSolver::parameters(v213) + 388)) {
                  operations_research::sat::MinimizeCoreWithPropagation(v213, (const void **)&v527);
                }
                if ((void)v527 == *((void *)&v527 + 1))
                {
                  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v524, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1256);
                  BOOL v463 = (void *)google::LogMessage::stream((google::LogMessage *)&v524);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v463, (uint64_t)"Check failed: !core.empty() ", 28);
                  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v524);
                }
                int64_t v224 = v516;
                if ((unint64_t)v516 >= v517[0])
                {
                  uint64_t v229 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)&v515, (uint64_t)&v527);
                }
                else
                {
                  *(void *)v516 = 0;
                  *((void *)v224 + 1) = 0;
                  *((void *)v224 + 2) = 0;
                  int v225 = (const void *)v527;
                  int64_t v226 = *((void *)&v527 + 1) - v527;
                  if (*((void *)&v527 + 1) != (void)v527)
                  {
                    if (v226 < 0) {
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v227 = (char *)operator new(*((void *)&v527 + 1) - v527);
                    *(void *)int64_t v224 = v227;
                    *((void *)v224 + 1) = v227;
                    BOOL v228 = &v227[4 * (v226 >> 2)];
                    *((void *)v224 + 2) = v228;
                    memcpy(v227, v225, v226);
                    *((void *)v224 + 1) = v228;
                  }
                  uint64_t v229 = v224 + 24;
                }
                v516 = v229;
                uint64_t v230 = operations_research::sat::SatSolver::parameters(v213);
                int v231 = *(unsigned __int8 *)(v230 + 389);
                if (!*(unsigned char *)(v230 + 389)) {
                  goto LABEL_360;
                }
                v525 = 0;
                v524 = 0;
                v526[0] = 0;
                std::set<operations_research::sat::Literal>::set[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>>(&v521, (int *)v527, *((int **)&v527 + 1));
                uint64_t v232 = v488;
                uint64_t v233 = v489;
                if (v489 == v488 || !v522)
                {
                  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v521, v522);
                  BOOL v261 = 0;
                  uint64_t v262 = (uint64_t *)v485;
                  int v213 = v469;
                  long long v212 = v471;
                  uint64_t v263 = v488;
                  unint64_t v264 = (v489 - (unsigned char *)v488) >> 2;
                  int v265 = 0;
                  if (v489 != v488) {
                    goto LABEL_344;
                  }
                  goto LABEL_351;
                }
                unint64_t v234 = 0;
                unint64_t v235 = 0;
                uint64_t v236 = 0;
                unint64_t v237 = 0;
                int v474 = v231;
                do
                {
                  if (v522)
                  {
                    int v239 = v232[v237];
                    uint64_t v240 = &v522;
                    int64x2_t v241 = v522;
                    do
                    {
                      uint64_t v242 = v241;
                      int64x2_t v243 = v240;
                      int v244 = *((_DWORD *)v241 + 7);
                      if (v244 >= v239) {
                        uint64_t v240 = (void **)v241;
                      }
                      else {
                        ++v241;
                      }
                      int64x2_t v241 = (void *)*v241;
                    }
                    while (v241);
                    if (v240 != &v522)
                    {
                      if (v244 < v239) {
                        uint64_t v242 = v243;
                      }
                      if (v239 >= *((_DWORD *)v242 + 7))
                      {
                        if (v236 < v235)
                        {
                          *(_DWORD *)uint64_t v236 = v237;
                          uint64_t v238 = (uint64_t)(v236 + 4);
                        }
                        else
                        {
                          uint64_t v245 = (v236 - v234) >> 2;
                          unint64_t v246 = v245 + 1;
                          if ((unint64_t)(v245 + 1) >> 62) {
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          }
                          if ((v235 - v234) >> 1 > v246) {
                            unint64_t v246 = (v235 - v234) >> 1;
                          }
                          if ((unint64_t)(v235 - v234) >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v247 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v247 = v246;
                          }
                          if (v247)
                          {
                            if (v247 >> 62) {
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            }
                            unint64_t v248 = v247;
                            int v249 = operator new(4 * v247);
                            unint64_t v247 = v248;
                            int v250 = &v249[4 * v245];
                            *int v250 = v237;
                            uint64_t v238 = (uint64_t)(v250 + 1);
                            if (v236 != v234)
                            {
LABEL_306:
                              unint64_t v251 = v236 - 4 - v234;
                              if (v251 < 0xBC
                                || &v249[v236 - v234 - 4 - (v251 & 0xFFFFFFFFFFFFFFFCLL)] > &v249[v236 - v234 - 4]
                                || &v236[-(v251 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v236 - 4
                                || (unint64_t)(v234 - v249) < 0x20)
                              {
                                uint64_t v252 = v236;
                                int v231 = v474;
                              }
                              else
                              {
                                uint64_t v255 = (v251 >> 2) + 1;
                                uint64_t v256 = 4 * (v255 & 0x7FFFFFFFFFFFFFF8);
                                uint64_t v252 = &v236[-v256];
                                int v250 = (_DWORD *)((char *)v250 - v256);
                                uint64_t v257 = &v249[4 * v245 - 16];
                                uint64_t v258 = v236 - 16;
                                uint64_t v259 = v255 & 0x7FFFFFFFFFFFFFF8;
                                do
                                {
                                  long long v260 = *(_OWORD *)v258;
                                  *(v257 - 1) = *((_OWORD *)v258 - 1);
                                  *uint64_t v257 = v260;
                                  v257 -= 2;
                                  v258 -= 32;
                                  v259 -= 8;
                                }
                                while (v259);
                                int v231 = v474;
                                if (v255 == (v255 & 0x7FFFFFFFFFFFFFF8))
                                {
LABEL_309:
                                  unint64_t v235 = &v249[4 * v247];
                                  v524 = v250;
                                  v525 = (void *)v238;
                                  v526[0] = v235;
                                  if (v234) {
                                    goto LABEL_310;
                                  }
                                  goto LABEL_311;
                                }
                              }
                              do
                              {
                                int v253 = *((_DWORD *)v252 - 1);
                                v252 -= 4;
                                *--int v250 = v253;
                              }
                              while (v252 != v234);
                              goto LABEL_309;
                            }
                          }
                          else
                          {
                            int v249 = 0;
                            int v250 = (_DWORD *)(4 * v245);
                            *(_DWORD *)(4 * v245) = v237;
                            uint64_t v238 = 4 * v245 + 4;
                            if (v236 != v234) {
                              goto LABEL_306;
                            }
                          }
                          int v231 = v474;
                          unint64_t v235 = &v249[4 * v247];
                          v524 = v250;
                          v525 = (void *)v238;
                          v526[0] = v235;
                          if (v234)
                          {
LABEL_310:
                            int v254 = v235;
                            operator delete(v234);
                            unint64_t v235 = v254;
                            uint64_t v232 = v488;
                            uint64_t v233 = v489;
                          }
LABEL_311:
                          unint64_t v234 = (char *)v250;
                        }
                        v525 = (void *)v238;
                        uint64_t v236 = (char *)v238;
                      }
                    }
                  }
                  ++v237;
                }
                while (v237 < (v233 - (unsigned char *)v232) >> 2);
                BOOL v261 = (char *)v524;
                std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v521, v522);
                uint64_t v262 = (uint64_t *)v485;
                if (v261 == v236)
                {
                  unint64_t v2 = this;
                  uint64_t v1 = v467;
                  int v213 = v469;
                  long long v212 = v471;
                  uint64_t v263 = v488;
                  unint64_t v264 = (v489 - (unsigned char *)v488) >> 2;
                  int v265 = 0;
                  if (v489 != v488) {
                    goto LABEL_344;
                  }
                }
                else
                {
                  uint64_t v266 = *((void *)v485 + *(int *)v261);
                  unint64_t v267 = v236 - v261 - 4;
                  uint64_t v1 = v467;
                  int v213 = v469;
                  long long v212 = v471;
                  if (v267 < 4)
                  {
                    int v268 = (int *)v261;
                    goto LABEL_338;
                  }
                  uint64_t v269 = (v267 >> 2) + 1;
                  int v268 = (int *)&v261[4 * (v269 & 0x7FFFFFFFFFFFFFFELL)];
                  unint64_t v270 = (int *)(v261 + 4);
                  uint64_t v271 = v269 & 0x7FFFFFFFFFFFFFFELL;
                  uint64_t v272 = *((void *)v485 + *(int *)v261);
                  do
                  {
                    if (*((void *)v485 + *(v270 - 1)) < v266) {
                      uint64_t v266 = *((void *)v485 + *(v270 - 1));
                    }
                    if (*((void *)v485 + *v270) < v272) {
                      uint64_t v272 = *((void *)v485 + *v270);
                    }
                    v270 += 2;
                    v271 -= 2;
                  }
                  while (v271);
                  if (v266 >= v272) {
                    uint64_t v266 = v272;
                  }
                  if (v269 != (v269 & 0x7FFFFFFFFFFFFFFELL))
                  {
                    do
                    {
LABEL_338:
                      uint64_t v273 = *v268++;
                      uint64_t v274 = *((void *)v485 + v273);
                      if (v274 < v266) {
                        uint64_t v266 = v274;
                      }
                    }
                    while (v268 != (int *)v236);
                  }
                  int v275 = v261;
                  do
                  {
                    uint64_t v276 = *(int *)v275;
                    v275 += 4;
                    v262[v276] -= v266;
                  }
                  while (v275 != v236);
                  unint64_t v2 = this;
                  uint64_t v263 = v488;
                  unint64_t v264 = (v489 - (unsigned char *)v488) >> 2;
                  int v265 = 0;
                  if (v489 != v488)
                  {
LABEL_344:
                    if (v264 <= 1) {
                      uint64_t v277 = 1;
                    }
                    else {
                      uint64_t v277 = v264;
                    }
                    double v278 = v262;
                    unint64_t v279 = v263;
                    do
                    {
                      uint64_t v281 = *v278++;
                      uint64_t v280 = v281;
                      if (v281 >= v1)
                      {
                        v263[v265] = *v279;
                        v262[v265++] = v280;
                      }
                      ++v279;
                      --v277;
                    }
                    while (v277);
                  }
                }
LABEL_351:
                unint64_t v282 = v265;
                if (v265 <= v264)
                {
                  if (v265 < v264) {
                    v489 = &v263[v265];
                  }
                }
                else
                {
                  std::vector<operations_research::sat::Literal>::__append((uint64_t)&v488, v265 - v264);
                  uint64_t v262 = (uint64_t *)v485;
                }
                unint64_t v283 = v486 - v262;
                if (v282 <= v283)
                {
                  if (v282 < v283) {
                    uint64_t v486 = &v262[v282];
                  }
                }
                else
                {
                  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)&v485, v282 - v283);
                }
                operator delete(v261);
LABEL_360:
                int v214 = (absl::lts_2020_02_25 *)v527;
                if ((void)v527)
                {
                  *((void *)&v527 + 1) = v527;
                  operator delete((void *)v527);
                }
                if (!v231 || v488 == v489)
                {
                  int v71 = 0;
                  int v284 = (uint64_t *)v485;
                  if (!v485)
                  {
LABEL_370:
                    if (v488)
                    {
                      v489 = v488;
                      operator delete(v488);
                    }
                    if (v71 == 1)
                    {
                      unsigned int v468 = 1;
                      uint64_t v285 = (char *)v515;
                      if (v515) {
                        goto LABEL_579;
                      }
                      goto LABEL_586;
                    }
                    if (v71 == 2)
                    {
                      if (operations_research::sat::CoreBasedOptimizer::ProcessSolution(v2))
                      {
                        if (*((unsigned char *)v2 + 121))
                        {
                          unsigned int v468 = 3;
                          int v71 = 1;
                          uint64_t v285 = (char *)v515;
                          if (v515) {
                            goto LABEL_579;
                          }
                          goto LABEL_586;
                        }
                        if (v515 == v516)
                        {
                          operations_research::sat::CoreBasedOptimizer::ComputeNextStratificationThreshold(v2);
                          if (*((void *)v2 + 10)) {
                            int v71 = 2;
                          }
                          else {
                            int v71 = 1;
                          }
                          int v458 = v468;
                          if (!*((void *)v2 + 10)) {
                            int v458 = 1;
                          }
                          unsigned int v468 = v458;
                          uint64_t v285 = (char *)v515;
                          if (!v515) {
                            goto LABEL_586;
                          }
                          goto LABEL_579;
                        }
                        goto LABEL_397;
                      }
LABEL_578:
                      int v71 = 1;
                      unsigned int v468 = 1;
                      uint64_t v285 = (char *)v515;
                      if (v515) {
                        goto LABEL_579;
                      }
                      goto LABEL_586;
                    }
LABEL_397:
                    if (!operations_research::sat::SatSolver::ResetToLevelZero(*((operations_research::sat::SatSolver **)v2
                                                                                              + 1)))
                      goto LABEL_578;
                    uint64_t v294 = (char *)v515;
                    unint64_t v295 = v516;
                    if (v515 == v516) {
                      goto LABEL_588;
                    }
                    while (2)
                    {
                      v296 = *(unsigned int **)v294;
                      v297 = (unsigned int *)*((void *)v294 + 1);
                      if ((unsigned int *)((char *)v297 - *(void *)v294) == (unsigned int *)4) {
                        goto LABEL_400;
                      }
                      if (v296 != v297)
                      {
                        if (v504)
                        {
                          uint64_t v298 = 0;
                          uint64_t v1 = 0;
                          int v299 = 0;
                          uint64_t v300 = 0x7FFFFFFFFFFFFFFELL;
                          uint64_t v301 = 1;
                          while (1)
                          {
                            signed int v302 = *v296;
                            unint64_t v303 = &v504;
                            uint64_t v304 = v504;
                            do
                            {
                              uint64_t v305 = v304;
                              uint64_t v306 = v303;
                              int v307 = *((_DWORD *)v304 + 7);
                              if (v307 >= v302) {
                                unint64_t v303 = (uint64_t **)v304;
                              }
                              else {
                                ++v304;
                              }
                              uint64_t v304 = (void *)*v304;
                            }
                            while (v304);
                            if (v303 == &v504) {
                              break;
                            }
                            long long v308 = v307 >= v302 ? v305 : v306;
                            if (v302 < *((_DWORD *)v308 + 7)) {
                              break;
                            }
                            if (v307 < v302) {
                              uint64_t v305 = v306;
                            }
                            long long v309 = (int *)(*((void *)v2 + 7) + 32 * *((int *)v305 + 8));
                            int v310 = *v309;
                            uint64_t v311 = *(void *)(*((void *)v2 + 3) + 40);
                            uint64_t v312 = *(void *)(v311 + 12 * *v309);
                            if (*((void *)v309 + 2) < v312) {
                              goto LABEL_400;
                            }
                            uint64_t v313 = *(void *)(v309 + 1);
                            if (v313 < v300) {
                              uint64_t v300 = *(void *)(v309 + 1);
                            }
                            if ((uint64_t)v298 <= v313) {
                              uint64_t v298 = *(const char **)(v309 + 1);
                            }
                            int v314 = v309[3];
                            if (v299 <= v314 + 1) {
                              int v299 = v314 + 1;
                            }
                            v301 += v312;
                            v1 -= *(void *)(v311 + 12 * (v310 ^ 1));
                            if (++v296 == v297) {
                              goto LABEL_427;
                            }
                          }
                        }
                        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v527, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
                        uint64_t v464 = (void *)google::LogMessage::stream((google::LogMessage *)&v527);
                        unint64_t v465 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v464, (uint64_t)"Check failed: it != collection.end() ", 37);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v465, (uint64_t)"Map key not found: ", 19);
                        std::ostream::operator<<();
                        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v527);
                      }
                      int v299 = 0;
                      uint64_t v1 = 0;
                      uint64_t v298 = 0;
                      uint64_t v300 = 0x7FFFFFFFFFFFFFFELL;
                      uint64_t v301 = 1;
LABEL_427:
                      if (*off_26AED00F8[0] >= 1
                        && (off_26AED00F8[0] != &google::kLogSiteUninitialized
                         || google::InitVLOG3__((google *)off_26AED00F8, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
                      {
                        google::LogMessage::LogMessage((google::LogMessage *)&v521, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1742);
                        int v315 = (void *)google::LogMessage::stream((google::LogMessage *)&v521);
                        *(void *)&long long v527 = (uint64_t)(*((void *)v294 + 1) - *(void *)v294) >> 2;
                        *((void *)&v527 + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long>;
                        *(void *)&long long v528 = v300;
                        *((void *)&v528 + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
                        v529 = v298;
                        uint64_t v530 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
                        v531 = (unsigned char *)v301;
                        v532 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
                        int v533 = (const char *)v1;
                        uint64_t v534 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
                        unint64_t v535 = v299;
                        v536 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
                        absl::lts_2020_02_25::str_format_internal::FormatPack("core:%u weight:[%d,%d] domain:[%d,%d] depth:%d", 46, (uint64_t)&v527, 6, (uint64_t)&v524);
                        if (v526[0] >= 0) {
                          uint64_t v316 = &v524;
                        }
                        else {
                          uint64_t v316 = v524;
                        }
                        if (v526[0] >= 0) {
                          uint64_t v317 = HIBYTE(v526[0]);
                        }
                        else {
                          uint64_t v317 = (uint64_t)v525;
                        }
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v315, (uint64_t)v316, v317);
                        if (SHIBYTE(v526[0]) < 0) {
                          operator delete(v524);
                        }
                        google::LogMessage::~LogMessage((google::LogMessage *)&v521);
                      }
                      int v318 = operations_research::sat::IntegerTrail::AddIntegerVariable(*((void *)v2 + 3), v301, v1);
                      unsigned int v320 = (_DWORD *)*((void *)v2 + 8);
                      unint64_t v319 = *((void *)v2 + 9);
                      int v483 = v318;
                      if ((unint64_t)v320 >= v319)
                      {
                        uint64_t v475 = v300;
                        size_t v322 = v295;
                        uint64_t v323 = (_DWORD *)*v478;
                        uint64_t v324 = ((uint64_t)v320 - *v478) >> 5;
                        unint64_t v325 = v324 + 1;
                        if ((unint64_t)(v324 + 1) >> 59) {
                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v326 = v319 - (void)v323;
                        if (v326 >> 4 > v325) {
                          unint64_t v325 = v326 >> 4;
                        }
                        if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFE0) {
                          unint64_t v327 = 0x7FFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v327 = v325;
                        }
                        if (v327)
                        {
                          if (v327 >> 59) {
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          }
                          unint64_t v328 = v327;
                          uint64_t v329 = (char *)operator new(32 * v327);
                          unint64_t v327 = v328;
                        }
                        else
                        {
                          uint64_t v329 = 0;
                        }
                        unint64_t v330 = &v329[32 * v324];
                        *(_DWORD *)unint64_t v330 = v483;
                        *(void *)(v330 + 4) = v475;
                        *((_DWORD *)v330 + 3) = v299;
                        *((void *)v330 + 2) = 0;
                        *((void *)v330 + 3) = 0;
                        unint64_t v331 = v330;
                        unint64_t v295 = v322;
                        if (v320 != v323)
                        {
                          do
                          {
                            long long v332 = *((_OWORD *)v320 - 1);
                            *((_OWORD *)v331 - 2) = *((_OWORD *)v320 - 2);
                            *((_OWORD *)v331 - 1) = v332;
                            v331 -= 32;
                            v320 -= 8;
                          }
                          while (v320 != v323);
                          unsigned int v320 = (_DWORD *)*v478;
                        }
                        uint64_t v300 = v475;
                        uint64_t v321 = v330 + 32;
                        *((void *)v2 + 7) = v331;
                        *((void *)v2 + 8) = v330 + 32;
                        *((void *)v2 + 9) = &v329[32 * v327];
                        if (v320) {
                          operator delete(v320);
                        }
                      }
                      else
                      {
                        *unsigned int v320 = v318;
                        *(void *)(v320 + 1) = v300;
                        v320[3] = v299;
                        uint64_t v321 = v320 + 8;
                        *((void *)v320 + 2) = 0;
                        *((void *)v320 + 3) = 0;
                      }
                      *((void *)v2 + 8) = v321;
                      *((void *)v321 - 1) = v1;
                      long long v527 = 0uLL;
                      *(void *)&long long v528 = 0;
                      v525 = 0;
                      v524 = 0;
                      v526[0] = 0;
                      uint64_t v334 = *(unsigned int **)v294;
                      unint64_t v333 = (unsigned int *)*((void *)v294 + 1);
                      if (*(unsigned int **)v294 == v333)
                      {
                        uint64_t v477 = v295;
                        uint64_t v385 = 0;
                        uint64_t v386 = 0;
                        uint64_t v335 = 0;
                        uint64_t v1 = v527;
                        uint64_t v387 = -(uint64_t)v527;
                        uint64_t v388 = -(uint64_t)v527 >> 2;
                        unint64_t v389 = v388 + 1;
                        if ((unint64_t)(v388 + 1) >> 62) {
                          goto LABEL_676;
                        }
                        goto LABEL_521;
                      }
                      uint64_t v335 = 0;
LABEL_458:
                      while (2)
                      {
                        uint64_t v1 = *v334;
                        uint64_t v336 = v504;
                        if (!v504) {
                          goto LABEL_650;
                        }
                        unint64_t v337 = &v504;
                        do
                        {
                          uint64_t v338 = v336;
                          uint64_t v339 = v337;
                          int v340 = *((_DWORD *)v336 + 7);
                          int v341 = v336 + 1;
                          if (v340 >= (int)v1)
                          {
                            int v341 = v338;
                            unint64_t v337 = (uint64_t **)v338;
                          }
                          uint64_t v336 = (void *)*v341;
                        }
                        while (v336);
                        if (v337 == &v504
                          || (v340 >= (int)v1 ? (unint64_t v342 = v338) : (unint64_t v342 = v339), (int)v1 < *((_DWORD *)v342 + 7)))
                        {
LABEL_650:
                          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v521, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
                          int v461 = (void *)google::LogMessage::stream((google::LogMessage *)&v521);
                          int v462 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v461, (uint64_t)"Check failed: it != collection.end() ", 37);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v462, (uint64_t)"Map key not found: ", 19);
                          std::ostream::operator<<();
                          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v521);
                        }
                        if (v340 < (int)v1) {
                          uint64_t v338 = v339;
                        }
                        uint64_t v343 = *v478 + 32 * *((int *)v338 + 8);
                        *(void *)(v343 + 4) -= v300;
                        uint64_t v344 = *((void *)&v527 + 1);
                        v472 = v333;
                        if (*((void *)&v527 + 1) >= (unint64_t)v528)
                        {
                          int v476 = v295;
                          uint64_t v1 = v527;
                          uint64_t v346 = *((void *)&v527 + 1) - v527;
                          uint64_t v347 = (uint64_t)(*((void *)&v527 + 1) - v527) >> 2;
                          unint64_t v348 = v347 + 1;
                          if ((unint64_t)(v347 + 1) >> 62) {
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v349 = v528 - v527;
                          if ((uint64_t)(v528 - v527) >> 1 > v348) {
                            unint64_t v348 = v349 >> 1;
                          }
                          if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v350 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v350 = v348;
                          }
                          if (v350)
                          {
                            uint64_t v470 = *((void *)&v527 + 1) - v527;
                            if (v350 >> 62) {
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            }
                            long long v351 = v334;
                            uint64_t v352 = v335;
                            unint64_t v353 = v350;
                            uint64_t v354 = (char *)operator new(4 * v350);
                            unint64_t v350 = v353;
                            uint64_t v335 = v352;
                            uint64_t v334 = v351;
                            uint64_t v346 = v470;
                          }
                          else
                          {
                            uint64_t v354 = 0;
                          }
                          uint64_t v355 = &v354[4 * v347];
                          *(_DWORD *)uint64_t v355 = *(_DWORD *)v343;
                          unint64_t v356 = v355 + 4;
                          if (v344 != v1)
                          {
                            unint64_t v357 = v344 - 4 - v1;
                            if (v357 < 0x2C) {
                              goto LABEL_689;
                            }
                            if ((unint64_t)(v344 - (void)&v354[v346]) < 0x20) {
                              goto LABEL_689;
                            }
                            uint64_t v358 = (v357 >> 2) + 1;
                            uint64_t v359 = 4 * (v358 & 0x7FFFFFFFFFFFFFF8);
                            uint64_t v360 = v344 - v359;
                            v355 -= v359;
                            uint64_t v361 = &v354[4 * v347 - 16];
                            uint64_t v362 = (long long *)(v344 - 16);
                            uint64_t v363 = v358 & 0x7FFFFFFFFFFFFFF8;
                            do
                            {
                              long long v364 = *v362;
                              *((_OWORD *)v361 - 1) = *(v362 - 1);
                              *(_OWORD *)uint64_t v361 = v364;
                              v361 -= 32;
                              v362 -= 2;
                              v363 -= 8;
                            }
                            while (v363);
                            uint64_t v344 = v360;
                            if (v358 != (v358 & 0x7FFFFFFFFFFFFFF8))
                            {
LABEL_689:
                              do
                              {
                                int v365 = *(_DWORD *)(v344 - 4);
                                v344 -= 4;
                                *((_DWORD *)v355 - 1) = v365;
                                v355 -= 4;
                              }
                              while (v344 != v1);
                            }
                          }
                          *(void *)&long long v527 = v355;
                          *((void *)&v527 + 1) = v356;
                          *(void *)&long long v528 = &v354[4 * v350];
                          if (v1)
                          {
                            operator delete((void *)v1);
                            uint64_t v335 = v525;
                          }
                          unint64_t v333 = v472;
                          unint64_t v295 = v476;
                          *((void *)&v527 + 1) = v356;
                          uint64_t v345 = v526[0];
                          if ((unint64_t)v335 < v526[0])
                          {
LABEL_472:
                            *v335++ = 1;
                            unint64_t v2 = this;
                            v525 = v335;
                            if (++v334 == v333) {
                              goto LABEL_544;
                            }
                            continue;
                          }
                        }
                        else
                        {
                          **((_DWORD **)&v527 + 1) = *(_DWORD *)v343;
                          *((void *)&v527 + 1) = v344 + 4;
                          uint64_t v345 = v526[0];
                          if ((unint64_t)v335 < v526[0]) {
                            goto LABEL_472;
                          }
                        }
                        break;
                      }
                      uint64_t v366 = v295;
                      uint64_t v1 = (uint64_t)v524;
                      int64_t v367 = (char *)v335 - (unsigned char *)v524;
                      uint64_t v368 = ((char *)v335 - (unsigned char *)v524) >> 3;
                      unint64_t v369 = v368 + 1;
                      if ((unint64_t)(v368 + 1) >> 61) {
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v370 = v345 - (void)v524;
                      if (v370 >> 2 > v369) {
                        unint64_t v369 = v370 >> 2;
                      }
                      if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v371 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v371 = v369;
                      }
                      if (v371)
                      {
                        if (v371 >> 61) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        unint64_t v372 = v371;
                        uint64_t v373 = operator new(8 * v371);
                        unint64_t v371 = v372;
                        uint64_t v374 = &v373[8 * v368];
                        *uint64_t v374 = 1;
                        uint64_t v375 = (uint64_t)(v374 + 1);
                        if (v335 != (void *)v1)
                        {
LABEL_503:
                          unint64_t v376 = (unint64_t)v335 - v1 - 8;
                          if (v376 < 0x168
                            || &v373[v367 - 8 - (v376 & 0xFFFFFFFFFFFFFFF8)] > &v373[v367 - 8]
                            || (void *)((char *)v335 - (v376 & 0xFFFFFFFFFFFFFFF8) - 8) > v335 - 1
                            || (unint64_t)((char *)v335 - v373 - v367) < 0x20)
                          {
                            double v377 = v335;
                            unint64_t v2 = this;
                            unint64_t v295 = v366;
                          }
                          else
                          {
                            uint64_t v379 = (v376 >> 3) + 1;
                            uint64_t v380 = 8 * (v379 & 0x3FFFFFFFFFFFFFFCLL);
                            double v377 = &v335[v380 / 0xFFFFFFFFFFFFFFF8];
                            uint64_t v374 = (void *)((char *)v374 - v380);
                            v381 = &v373[8 * v368 - 16];
                            int v382 = (long long *)(v335 - 2);
                            uint64_t v383 = v379 & 0x3FFFFFFFFFFFFFFCLL;
                            unint64_t v295 = v366;
                            do
                            {
                              long long v384 = *v382;
                              *(v381 - 1) = *(v382 - 1);
                              _OWORD *v381 = v384;
                              v381 -= 2;
                              v382 -= 2;
                              v383 -= 4;
                            }
                            while (v383);
                            unint64_t v2 = this;
                            if (v379 == (v379 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_509:
                              v524 = v374;
                              v525 = (void *)v375;
                              v526[0] = &v373[8 * v371];
                              if (v1) {
                                operator delete((void *)v1);
                              }
                              uint64_t v335 = (void *)v375;
                              unint64_t v333 = v472;
                              v525 = (void *)v375;
                              if (++v334 == v472)
                              {
LABEL_544:
                                uint64_t v385 = *((void *)&v527 + 1);
                                uint64_t v386 = v528;
                                if (*((void *)&v527 + 1) >= (unint64_t)v528)
                                {
                                  uint64_t v477 = v295;
                                  uint64_t v1 = v527;
                                  uint64_t v387 = *((void *)&v527 + 1) - v527;
                                  uint64_t v388 = (uint64_t)(*((void *)&v527 + 1) - v527) >> 2;
                                  unint64_t v389 = v388 + 1;
                                  if ((unint64_t)(v388 + 1) >> 62) {
LABEL_676:
                                  }
                                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
LABEL_521:
                                  uint64_t v390 = v386 - v1;
                                  if (v390 >> 1 > v389) {
                                    unint64_t v389 = v390 >> 1;
                                  }
                                  if ((unint64_t)v390 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v391 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v391 = v389;
                                  }
                                  if (v391)
                                  {
                                    if (v391 >> 62) {
                                      std::__throw_bad_array_new_length[abi:ne180100]();
                                    }
                                    uint64_t v392 = (char *)operator new(4 * v391);
                                    int v393 = &v392[4 * v388];
                                    *(_DWORD *)int v393 = v483;
                                    uint64_t v394 = (uint64_t)(v393 + 4);
                                    if (v385 != v1)
                                    {
LABEL_529:
                                      unint64_t v395 = v385 - 4 - v1;
                                      if (v395 < 0x2C || (unint64_t)(v385 - (void)v392 - v387) < 0x20)
                                      {
                                        uint64_t v396 = v385;
                                        uint64_t v397 = v477;
                                        goto LABEL_532;
                                      }
                                      uint64_t v402 = (v395 >> 2) + 1;
                                      uint64_t v403 = 4 * (v402 & 0x7FFFFFFFFFFFFFF8);
                                      uint64_t v396 = v385 - v403;
                                      v393 -= v403;
                                      unint64_t v404 = &v392[4 * v388 - 16];
                                      unint64_t v405 = (long long *)(v385 - 16);
                                      uint64_t v406 = v402 & 0x7FFFFFFFFFFFFFF8;
                                      do
                                      {
                                        long long v407 = *v405;
                                        *((_OWORD *)v404 - 1) = *(v405 - 1);
                                        *(_OWORD *)unint64_t v404 = v407;
                                        v404 -= 32;
                                        v405 -= 2;
                                        v406 -= 8;
                                      }
                                      while (v406);
                                      uint64_t v397 = v477;
                                      if (v402 != (v402 & 0x7FFFFFFFFFFFFFF8))
                                      {
                                        do
                                        {
LABEL_532:
                                          int v398 = *(_DWORD *)(v396 - 4);
                                          v396 -= 4;
                                          *((_DWORD *)v393 - 1) = v398;
                                          v393 -= 4;
                                        }
                                        while (v396 != v1);
                                      }
LABEL_536:
                                      *(void *)&long long v527 = v393;
                                      *((void *)&v527 + 1) = v394;
                                      *(void *)&long long v528 = &v392[4 * v391];
                                      if (v1)
                                      {
                                        operator delete((void *)v1);
                                        uint64_t v335 = v525;
                                      }
                                      uint64_t v399 = v397;
                                      *((void *)&v527 + 1) = v394;
                                      uint64_t v400 = v526[0];
                                      if ((unint64_t)v335 < v526[0]) {
                                        goto LABEL_539;
                                      }
LABEL_546:
                                      uint64_t v408 = v524;
                                      int64_t v409 = (char *)v335 - (unsigned char *)v524;
                                      uint64_t v1 = ((char *)v335 - (unsigned char *)v524) >> 3;
                                      unint64_t v410 = v1 + 1;
                                      if ((unint64_t)(v1 + 1) >> 61) {
                                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                      }
                                      uint64_t v411 = v400 - (void)v524;
                                      if (v411 >> 2 > v410) {
                                        unint64_t v410 = v411 >> 2;
                                      }
                                      if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v412 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v412 = v410;
                                      }
                                      if (v412)
                                      {
                                        if (v412 >> 61) {
                                          std::__throw_bad_array_new_length[abi:ne180100]();
                                        }
                                        v413 = operator new(8 * v412);
                                      }
                                      else
                                      {
                                        v413 = 0;
                                      }
                                      uint64_t v414 = &v413[8 * v1];
                                      *uint64_t v414 = -1;
                                      uint64_t v401 = v414 + 1;
                                      if (v335 != (void *)v408)
                                      {
                                        unint64_t v415 = (char *)(v335 - 1) - v408;
                                        if (v415 < 0x58)
                                        {
                                          unint64_t v416 = v335;
                                          goto LABEL_564;
                                        }
                                        if ((unint64_t)((char *)v335 - v413 - v409) < 0x20)
                                        {
                                          unint64_t v416 = v335;
                                          goto LABEL_564;
                                        }
                                        uint64_t v417 = (v415 >> 3) + 1;
                                        uint64_t v418 = 8 * (v417 & 0x3FFFFFFFFFFFFFFCLL);
                                        unint64_t v416 = &v335[v418 / 0xFFFFFFFFFFFFFFF8];
                                        uint64_t v414 = (void *)((char *)v414 - v418);
                                        int v419 = &v413[8 * v1 - 16];
                                        v420 = (long long *)(v335 - 2);
                                        uint64_t v421 = v417 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          long long v422 = *v420;
                                          *(v419 - 1) = *(v420 - 1);
                                          *int v419 = v422;
                                          v419 -= 2;
                                          v420 -= 2;
                                          v421 -= 4;
                                        }
                                        while (v421);
                                        if (v417 != (v417 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
                                          do
                                          {
LABEL_564:
                                            uint64_t v423 = *--v416;
                                            *--uint64_t v414 = v423;
                                          }
                                          while (v416 != (void *)v408);
                                        }
                                      }
                                      v524 = v414;
                                      v525 = v401;
                                      v526[0] = &v413[8 * v412];
                                      if (v408) {
                                        operator delete(v408);
                                      }
                                      goto LABEL_567;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v392 = 0;
                                    int v393 = (char *)(4 * v388);
                                    *(_DWORD *)(4 * v388) = v483;
                                    uint64_t v394 = 4 * v388 + 4;
                                    if (v385 != v1) {
                                      goto LABEL_529;
                                    }
                                  }
                                  uint64_t v397 = v477;
                                  goto LABEL_536;
                                }
                                **((_DWORD **)&v527 + 1) = v483;
                                uint64_t v399 = v295;
                                *((void *)&v527 + 1) = v385 + 4;
                                uint64_t v400 = v526[0];
                                if ((unint64_t)v335 >= v526[0]) {
                                  goto LABEL_546;
                                }
LABEL_539:
                                *uint64_t v335 = -1;
                                uint64_t v401 = v335 + 1;
LABEL_567:
                                v525 = v401;
                                uint64_t v424 = (void *)*((void *)v2 + 5);
                                operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)&v527, (uint64_t **)&v524, 0, v506);
                                uint64_t v521 = v424;
                                if (!v507) {
                                  std::__throw_bad_function_call[abi:ne180100]();
                                }
                                (*(void (**)(void *, void **))(*v507 + 48))(v507, &v521);
                                unint64_t v295 = v399;
                                if (v507 == v506)
                                {
                                  (*(void (**)(void *))(v506[0] + 32))(v506);
                                }
                                else if (v507)
                                {
                                  (*(void (**)(void))(*v507 + 40))();
                                }
                                if (v524)
                                {
                                  v525 = v524;
                                  operator delete(v524);
                                }
                                if ((void)v527)
                                {
                                  *((void *)&v527 + 1) = v527;
                                  operator delete((void *)v527);
                                }
LABEL_400:
                                v294 += 24;
                                if (v294 == v295)
                                {
LABEL_588:
                                  int v430 = v468;
                                  if (v71 == 3) {
                                    int v430 = 3;
                                  }
                                  unsigned int v468 = v430;
                                  int v71 = v71 == 3;
                                  uint64_t v285 = (char *)v515;
                                  if (!v515) {
                                    goto LABEL_586;
                                  }
LABEL_579:
                                  int v425 = v516;
                                  BOOL v426 = v285;
                                  if (v516 != v285)
                                  {
                                    unint64_t v427 = v516;
                                    do
                                    {
                                      uint64_t v429 = (void *)*((void *)v427 - 3);
                                      v427 -= 24;
                                      v428 = v429;
                                      if (v429)
                                      {
                                        *((void *)v425 - 2) = v428;
                                        operator delete(v428);
                                      }
                                      int v425 = v427;
                                    }
                                    while (v427 != v285);
                                    BOOL v426 = v515;
                                  }
                                  v516 = v285;
                                  operator delete(v426);
LABEL_586:
                                  if (v518) {
                                    operator delete(v518);
                                  }
                                  goto LABEL_624;
                                }
                                continue;
                              }
                              goto LABEL_458;
                            }
                          }
                          do
                          {
                            uint64_t v378 = *--v377;
                            *--uint64_t v374 = v378;
                          }
                          while (v377 != (void *)v1);
                          goto LABEL_509;
                        }
                      }
                      else
                      {
                        uint64_t v373 = 0;
                        uint64_t v374 = (void *)(8 * v368);
                        *(void *)(8 * v368) = 1;
                        uint64_t v375 = 8 * v368 + 8;
                        if (v335 != (void *)v1) {
                          goto LABEL_503;
                        }
                      }
                      break;
                    }
                    unint64_t v2 = this;
                    unint64_t v295 = v366;
                    goto LABEL_509;
                  }
LABEL_369:
                  uint64_t v486 = v284;
                  operator delete(v284);
                  goto LABEL_370;
                }
              }
            }
LABEL_253:
            if (v210 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v485 = operator new(v210);
            uint64_t v486 = (uint64_t *)v485;
            uint64_t v211 = (char *)v485 + 8 * (v210 >> 3);
            v487 = v211;
            memcpy(v485, v209, v210);
            uint64_t v486 = (uint64_t *)v211;
            goto LABEL_255;
          }
LABEL_252:
          uint64_t v485 = 0;
          uint64_t v486 = 0;
          v487 = 0;
          int v209 = v494;
          int64_t v210 = v495 - (unsigned char *)v494;
          if (v495 == v494) {
            goto LABEL_255;
          }
          goto LABEL_253;
        }
        continue;
      }
    }
LABEL_84:
    if (v480) {
      goto LABEL_142;
    }
    if (*off_26AED00E0[0] >= 1
      && (off_26AED00E0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AED00E0, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v527, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1629);
      unint64_t v73 = (void *)google::LogMessage::stream((google::LogMessage *)&v527);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Switching to linear scan...", 27);
      google::LogMessage::~LogMessage((google::LogMessage *)&v527);
    }
    if (*((unsigned char *)v2 + 120)) {
      goto LABEL_623;
    }
    unint64_t v481 = (int *)v5;
    uint64_t v473 = v8;
    long long v74 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    int v77 = 0;
    *((unsigned char *)v2 + 120) = 1;
    long long v527 = 0uLL;
    *(void *)&long long v528 = 0;
    v525 = 0;
    v524 = 0;
    v526[0] = 0;
    if (v70) {
      goto LABEL_381;
    }
    int v77 = 0;
    while (2)
    {
      while (2)
      {
        uint64_t v78 = *v69;
        int v79 = (_DWORD *)*v478;
        uint64_t v80 = (_DWORD *)(*v478 + 32 * v78);
        uint64_t v81 = (unsigned char *)*((void *)&v527 + 1);
        if (*((void *)&v527 + 1) < (unint64_t)v528)
        {
          **((_DWORD **)&v527 + 1) = *v80;
          *((void *)&v527 + 1) = v81 + 4;
          uint64_t v1 = *(void *)&v79[8 * v78 + 1];
          uint64_t v82 = v526[0];
          if ((unint64_t)v77 >= v526[0]) {
            break;
          }
          goto LABEL_92;
        }
        uint64_t v83 = (unsigned char *)v527;
        uint64_t v84 = *((void *)&v527 + 1) - v527;
        uint64_t v85 = (uint64_t)(*((void *)&v527 + 1) - v527) >> 2;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v87 = v528 - v527;
        if ((uint64_t)(v528 - v527) >> 1 > v86) {
          unint64_t v86 = v87 >> 1;
        }
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v86;
        }
        if (!v88)
        {
          uint64_t v89 = 0;
          uint64_t v90 = (char *)(4 * v85);
          *(_DWORD *)(4 * v85) = *v80;
          uint64_t v91 = 4 * v85 + 4;
          if (v81 == v83) {
            goto LABEL_113;
          }
LABEL_107:
          unint64_t v92 = v81 - 4 - v83;
          if (v92 < 0x2C) {
            goto LABEL_690;
          }
          if ((unint64_t)(v81 - &v89[v84]) < 0x20) {
            goto LABEL_690;
          }
          uint64_t v93 = (v92 >> 2) + 1;
          uint64_t v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
          int v95 = &v81[-v94];
          v90 -= v94;
          uint64_t v96 = &v89[4 * v85 - 16];
          unint64_t v97 = (long long *)(v81 - 16);
          uint64_t v98 = v93 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v99 = *v97;
            *((_OWORD *)v96 - 1) = *(v97 - 1);
            *(_OWORD *)uint64_t v96 = v99;
            v96 -= 32;
            v97 -= 2;
            v98 -= 8;
          }
          while (v98);
          uint64_t v81 = v95;
          if (v93 != (v93 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_690:
            do
            {
              int v100 = *((_DWORD *)v81 - 1);
              v81 -= 4;
              *((_DWORD *)v90 - 1) = v100;
              v90 -= 4;
            }
            while (v81 != v83);
          }
          goto LABEL_113;
        }
        if (v88 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v89 = (char *)operator new(4 * v88);
        uint64_t v90 = &v89[4 * v85];
        *(_DWORD *)uint64_t v90 = *v80;
        uint64_t v91 = (uint64_t)(v90 + 4);
        if (v81 != v83) {
          goto LABEL_107;
        }
LABEL_113:
        *(void *)&long long v527 = v90;
        *((void *)&v527 + 1) = v91;
        *(void *)&long long v528 = &v89[4 * v88];
        if (v83)
        {
          operator delete(v83);
          int v79 = (_DWORD *)*v478;
          int v77 = v525;
        }
        *((void *)&v527 + 1) = v91;
        uint64_t v1 = *(void *)&v79[8 * v78 + 1];
        uint64_t v82 = v526[0];
        if ((unint64_t)v77 < v526[0])
        {
LABEL_92:
          *v77++ = v1;
          v525 = v77;
          if (++v69 == v481) {
            goto LABEL_150;
          }
          continue;
        }
        break;
      }
      int64_t v101 = (uint64_t *)v524;
      int64_t v102 = (char *)v77 - (unsigned char *)v524;
      uint64_t v103 = ((char *)v77 - (unsigned char *)v524) >> 3;
      unint64_t v104 = v103 + 1;
      if ((unint64_t)(v103 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v105 = v82 - (void)v524;
      if (v105 >> 2 > v104) {
        unint64_t v104 = v105 >> 2;
      }
      if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v106 = v104;
      }
      if (v106)
      {
        if (v106 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v107 = operator new(8 * v106);
        uint64_t v108 = (uint64_t *)&v107[8 * v103];
        *uint64_t v108 = v1;
        uint64_t v109 = (uint64_t)(v108 + 1);
        if (v77 != v101)
        {
LABEL_125:
          unint64_t v110 = (char *)(v77 - 1) - (char *)v101;
          if (v110 < 0x168
            || &v107[v102 - 8 - (v110 & 0xFFFFFFFFFFFFFFF8)] > &v107[v102 - 8]
            || (uint64_t *)((char *)v77 - (v110 & 0xFFFFFFFFFFFFFFF8) - 8) > v77 - 1
            || (unint64_t)((char *)v77 - &v107[v102]) < 0x20)
          {
            unint64_t v111 = v77;
            uint64_t v112 = v481;
          }
          else
          {
            uint64_t v114 = (v110 >> 3) + 1;
            uint64_t v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v111 = &v77[v115 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v108 = (uint64_t *)((char *)v108 - v115);
            uint64_t v116 = &v107[8 * v103 - 16];
            long long v117 = v77 - 2;
            uint64_t v118 = v114 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v119 = *(_OWORD *)v117;
              *(v116 - 1) = *((_OWORD *)v117 - 1);
              _OWORD *v116 = v119;
              v116 -= 2;
              v117 -= 4;
              v118 -= 4;
            }
            while (v118);
            uint64_t v112 = v481;
            if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_128:
              v524 = v108;
              v525 = (void *)v109;
              v526[0] = &v107[8 * v106];
              if (v101) {
                goto LABEL_129;
              }
              goto LABEL_130;
            }
          }
          do
          {
            uint64_t v113 = *--v111;
            *--uint64_t v108 = v113;
          }
          while (v111 != v101);
          goto LABEL_128;
        }
      }
      else
      {
        unint64_t v107 = 0;
        uint64_t v108 = (uint64_t *)(8 * v103);
        *(void *)(8 * v103) = v1;
        uint64_t v109 = 8 * v103 + 8;
        if (v77 != v101) {
          goto LABEL_125;
        }
      }
      uint64_t v112 = v481;
      v524 = v108;
      v525 = (void *)v109;
      v526[0] = &v107[8 * v106];
      if (v101) {
LABEL_129:
      }
        operator delete(v101);
LABEL_130:
      int v77 = (uint64_t *)v109;
      v525 = (void *)v109;
      if (++v69 != v112) {
        continue;
      }
      break;
    }
LABEL_150:
    uint64_t v75 = (char *)*((void *)&v527 + 1);
    uint64_t v76 = v528;
    if (*((void *)&v527 + 1) < (unint64_t)v528)
    {
      unint64_t v2 = this;
      **((_DWORD **)&v527 + 1) = *((_DWORD *)this + 12);
      uint64_t v122 = (uint64_t)(v75 + 4);
      goto LABEL_598;
    }
    long long v74 = (char *)v527;
    unint64_t v2 = this;
LABEL_381:
    uint64_t v1 = v75 - v74;
    uint64_t v286 = (v75 - v74) >> 2;
    unint64_t v287 = v286 + 1;
    if ((unint64_t)(v286 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v288 = v76 - (void)v74;
    if (v288 >> 1 > v287) {
      unint64_t v287 = v288 >> 1;
    }
    if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v289 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v289 = v287;
    }
    if (v289)
    {
      if (v289 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v290 = operator new(4 * v289);
      uint64_t v291 = &v290[4 * v286];
      _DWORD *v291 = *((_DWORD *)v2 + 12);
      uint64_t v122 = (uint64_t)(v291 + 1);
      if (v75 == v74) {
        goto LABEL_596;
      }
LABEL_392:
      unint64_t v292 = v75 - 4 - v74;
      if (v292 < 0x2C)
      {
        uint64_t v293 = v75;
        goto LABEL_595;
      }
      if ((unint64_t)(v74 - v290) < 0x20)
      {
        uint64_t v293 = v75;
        goto LABEL_595;
      }
      uint64_t v431 = (v292 >> 2) + 1;
      uint64_t v432 = 4 * (v431 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v293 = &v75[-v432];
      uint64_t v291 = (_DWORD *)((char *)v291 - v432);
      uint64_t v433 = &v290[4 * v286 - 16];
      int v434 = (long long *)(v75 - 16);
      uint64_t v435 = v431 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v436 = *v434;
        *(v433 - 1) = *(v434 - 1);
        *uint64_t v433 = v436;
        v433 -= 2;
        v434 -= 2;
        v435 -= 8;
      }
      while (v435);
      if (v431 != (v431 & 0x7FFFFFFFFFFFFFF8))
      {
        do
        {
LABEL_595:
          int v437 = *((_DWORD *)v293 - 1);
          v293 -= 4;
          *--uint64_t v291 = v437;
        }
        while (v293 != v74);
      }
    }
    else
    {
      uint64_t v290 = 0;
      uint64_t v291 = (_DWORD *)(4 * v286);
      *(_DWORD *)(4 * v286) = *((_DWORD *)v2 + 12);
      uint64_t v122 = 4 * v286 + 4;
      if (v75 != v74) {
        goto LABEL_392;
      }
    }
LABEL_596:
    *(void *)&long long v527 = v291;
    *((void *)&v527 + 1) = v122;
    *(void *)&long long v528 = &v290[4 * v289];
    if (v74)
    {
      operator delete(v74);
      int v77 = v525;
    }
LABEL_598:
    *((void *)&v527 + 1) = v122;
    if ((unint64_t)v77 < v526[0])
    {
      *int v77 = -1;
      uint64_t v438 = (uint64_t)(v77 + 1);
      uint64_t v439 = v473;
      goto LABEL_615;
    }
    v440 = (uint64_t *)v524;
    uint64_t v1 = (char *)v77 - (unsigned char *)v524;
    uint64_t v441 = ((char *)v77 - (unsigned char *)v524) >> 3;
    unint64_t v442 = v441 + 1;
    if ((unint64_t)(v441 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v443 = v526[0] - (void)v524;
    if ((uint64_t)(v526[0] - (void)v524) >> 2 > v442) {
      unint64_t v442 = v443 >> 2;
    }
    if ((unint64_t)v443 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v444 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v444 = v442;
    }
    if (!v444)
    {
      uint64_t v445 = 0;
      unint64_t v446 = (void *)(8 * v441);
      *(void *)(8 * v441) = -1;
      uint64_t v438 = 8 * v441 + 8;
      if (v77 != v440) {
        goto LABEL_609;
      }
LABEL_633:
      uint64_t v439 = v473;
      v524 = v446;
      v525 = (void *)v438;
      v526[0] = &v445[8 * v444];
      if (v440) {
        goto LABEL_614;
      }
      goto LABEL_615;
    }
    if (v444 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v445 = operator new(8 * v444);
    unint64_t v446 = &v445[8 * v441];
    *unint64_t v446 = -1;
    uint64_t v438 = (uint64_t)(v446 + 1);
    if (v77 == v440) {
      goto LABEL_633;
    }
LABEL_609:
    unint64_t v447 = (char *)(v77 - 1) - (char *)v440;
    if (v447 < 0x58 || (unint64_t)((char *)v77 - v445 - v1) < 0x20)
    {
      uint64_t v448 = v77;
      uint64_t v439 = v473;
      goto LABEL_612;
    }
    uint64_t v452 = (v447 >> 3) + 1;
    uint64_t v453 = 8 * (v452 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v448 = &v77[v453 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v446 = (void *)((char *)v446 - v453);
    uint64_t v454 = &v445[8 * v441 - 16];
    uint64_t v455 = v77 - 2;
    uint64_t v456 = v452 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v457 = *(_OWORD *)v455;
      *(v454 - 1) = *((_OWORD *)v455 - 1);
      *uint64_t v454 = v457;
      v454 -= 2;
      v455 -= 4;
      v456 -= 4;
    }
    while (v456);
    uint64_t v439 = v473;
    if (v452 != (v452 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_612:
        uint64_t v449 = *--v448;
        *--unint64_t v446 = v449;
      }
      while (v448 != v440);
    }
    v524 = v446;
    v525 = (void *)v438;
    v526[0] = &v445[8 * v444];
    if (v440) {
LABEL_614:
    }
      operator delete(v440);
LABEL_615:
    v525 = (void *)v438;
    BOOL v450 = (void *)*((void *)v2 + 5);
    operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)&v527, (uint64_t **)&v524, -v439, v513);
    uint64_t v521 = v450;
    if (!v514) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *, void **))(*v514 + 48))(v514, &v521);
    if (v514 == v513)
    {
      (*(void (**)(void *))(v513[0] + 32))(v513);
      unint64_t v451 = v524;
      if (v524) {
        goto LABEL_620;
      }
    }
    else
    {
      if (v514) {
        (*(void (**)(void))(*v514 + 40))();
      }
      unint64_t v451 = v524;
      if (v524)
      {
LABEL_620:
        v525 = v451;
        operator delete(v451);
      }
    }
    if ((void)v527)
    {
      *((void *)&v527 + 1) = v527;
      operator delete((void *)v527);
    }
LABEL_623:
    unsigned int v468 = operations_research::sat::MinimizeIntegerVariableWithLinearScanAndLazyEncoding(*((unsigned int *)v2 + 12), (uint64_t)v466, *((operations_research::sat **)v2 + 5));
    int v71 = 1;
LABEL_624:
    if (v494) {
      operator delete(v494);
    }
    if (__p) {
      operator delete(__p);
    }
    if (v500) {
      operator delete(v500);
    }
    if ((v71 | 2) != 2) {
      goto LABEL_649;
    }
  }
  int v459 = 1;
LABEL_648:
  unsigned int v468 = v459;
LABEL_649:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v503, v504);
  return v468;
}

void sub_23CD38F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v72 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v72;
    operator delete(v72);
  }
  unint64_t v73 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v73;
    operator delete(v73);
  }
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a71);
  long long v74 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v74;
    operator delete(v74);
  }
  if (a39)
  {
    operator delete(a39);
    uint64_t v75 = a42;
    if (!a42)
    {
LABEL_9:
      uint64_t v76 = a45;
      if (!a45) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v75 = a42;
    if (!a42) {
      goto LABEL_9;
    }
  }
  operator delete(v75);
  uint64_t v76 = a45;
  if (!a45)
  {
LABEL_10:
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a48, (void *)a49);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(v76);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a48, (void *)a49);
  _Unwind_Resume(a1);
}

void operations_research::sat::MinimizeWithHittingSetAndLazyEncoding()
{
  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v1, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1995);
  uint64_t v0 = (void *)google::LogMessage::stream((google::LogMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported.");
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v1);
}

void sub_23CD39330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **std::set<operations_research::sat::Literal>::set[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>>(void **a1, int *a2, int *a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      unint64_t v7 = std::__tree<int>::__find_equal<int>(a1, v4, &v13, &v12, v6);
      if (!*v7)
      {
        uint64_t v8 = operator new(0x20uLL);
        v8[7] = *v6;
        uint64_t v9 = v13;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = v9;
        *unint64_t v7 = (uint64_t)v8;
        uint64_t v10 = (void *)**a1;
        if (v10)
        {
          *a1 = v10;
          uint64_t v8 = (_DWORD *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v8);
        a1[2] = (void *)((char *)a1[2] + 1);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_23CD39418(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::vector<operations_research::sat::Literal>::__assign_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>,std::__wrap_iter<operations_research::sat::Literal*>>(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(4 * v12);
    uint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memmove(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, 4 * v17);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CD395E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::ComputeBooleanLinearExpressionCanonicalForm(uint64_t **a1, void *a2, void *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  unint64_t v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 2));
  *a2 = 0;
  *a3 = 0;
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>((uint64_t)v6, v7, &v39, v9, 1);
  uint64_t v10 = *a1;
  BOOL v11 = a1[1];
  unint64_t v12 = ((char *)v11 - (char *)*a1) / 12;
  int v13 = 0;
  if (v11 == *a1) {
    goto LABEL_23;
  }
  size_t v14 = 0;
  if (v12 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = ((char *)v11 - (char *)*a1) / 12;
  }
  uint64_t v16 = (uint64_t *)((char *)v10 + 4);
  do
  {
    uint64_t v17 = *v16;
    if (*v16)
    {
      unsigned int v18 = *((_DWORD *)v16 - 1);
      if (!v14) {
        goto LABEL_10;
      }
      int v19 = *(_DWORD *)v14;
      if ((*(_DWORD *)v14 ^ v18) > 1)
      {
        v13 -= *(void *)(v14 + 4) == 0;
LABEL_10:
        size_t v14 = (char *)v10 + 12 * v13;
        *(_DWORD *)size_t v14 = v18;
        *(void *)(v14 + 4) = v17;
        ++v13;
        goto LABEL_11;
      }
      BOOL v20 = __OFSUB__(v18, v19);
      if (v18 == v19)
      {
        uint64_t v21 = *(void *)(v14 + 4);
        if ((((v21 + v17) ^ v17) & ((v21 + v17) ^ v21)) < 0 != v20) {
          return 0;
        }
        *(void *)(v14 + 4) = v21 + v17;
      }
      else
      {
        uint64_t v22 = -v17;
        uint64_t v23 = *(void *)(v14 + 4);
        if ((((v23 - v17) ^ -v17) & ((v23 - v17) ^ v23)) < 0 != v20) {
          return 0;
        }
        *(void *)(v14 + 4) = v23 - v17;
        uint64_t v24 = *a2 - v17;
        if (((v24 ^ v22) & (v24 ^ *a2)) < 0 != v20) {
          return 0;
        }
        *a2 = v24;
      }
    }
LABEL_11:
    uint64_t v16 = (void *)((char *)v16 + 12);
    --v15;
  }
  while (v15);
  if (v14) {
    v13 -= *(void *)(v14 + 4) == 0;
  }
LABEL_23:
  BOOL v25 = v13 >= v12;
  unint64_t v26 = v13 - v12;
  if (v26 != 0 && v25)
  {
    std::vector<operations_research::sat::LiteralWithCoeff>::__append((void **)a1, v26);
    uint64_t v10 = *a1;
    BOOL v11 = a1[1];
  }
  else if (!v25)
  {
    BOOL v11 = (uint64_t *)((char *)v10 + 12 * v13);
    a1[1] = v11;
  }
  unint64_t v27 = ((char *)v11 - (char *)v10) / 12;
  if (v11 == v10)
  {
LABEL_38:
    unint64_t v36 = 126 - 2 * __clz(v27);
    if (v11 == v10) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = v36;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>((uint64_t)v10, v11, &v39, v37, 1);
    return 1;
  }
  else
  {
    BOOL v28 = __OFSUB__(v27, 1);
    if (v27 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = ((char *)v11 - (char *)v10) / 12;
    }
    int v30 = (uint64_t *)((char *)v10 + 4);
    while (1)
    {
      uint64_t v31 = *v30;
      if (*v30 < 0)
      {
        uint64_t v32 = -v31;
        uint64_t v33 = *a2 - v31;
        if (((v33 ^ v32) & (v33 ^ *a2)) < 0 != v28) {
          return 0;
        }
        int v34 = *((_DWORD *)v30 - 1);
        *a2 = v33;
        *int v30 = v32;
        *((_DWORD *)v30 - 1) = v34 ^ 1;
        uint64_t v31 = v32;
      }
      uint64_t v35 = *a3 + v31;
      if (((v35 ^ v31) & (v35 ^ *a3)) < 0 != v28) {
        return 0;
      }
      *a3 = v35;
      int v30 = (uint64_t *)((char *)v30 + 12);
      BOOL v28 = __OFSUB__(v29--, 1);
      if (!v29) {
        goto LABEL_38;
      }
    }
  }
}

BOOL operations_research::sat::anonymous namespace'::LiteralComparator(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL operations_research::sat::anonymous namespace'::CoeffComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 4);
  uint64_t v3 = *(void *)(a2 + 4);
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 < v3;
  if (v4) {
    return *(_DWORD *)a1 < *(_DWORD *)a2;
  }
  else {
    return v5;
  }
}

uint64_t operations_research::sat::ComputeCanonicalRhs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 + a1 >= a3) {
    uint64_t v3 = a3;
  }
  else {
    uint64_t v3 = a2 + a1;
  }
  if (a2 + a1 < 0) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = v3;
  }
  if (a2 <= 0) {
    uint64_t v5 = -1;
  }
  else {
    uint64_t v5 = a3;
  }
  if ((((a2 + a1) ^ a2) & ((a2 + a1) ^ a1)) < 0) {
    return v5;
  }
  else {
    return v4;
  }
}

uint64_t operations_research::sat::ComputeNegatedCanonicalRhs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = a3;
  }
  if ((((a2 + a1) ^ a2) & ((a2 + a1) ^ a1)) < 0) {
    return v3;
  }
  else {
    return a3 - ((a2 + a1) & ~((a2 + a1) >> 63));
  }
}

void operations_research::sat::MutableUpperBoundedLinearConstraint::ClearAndResize(operations_research::sat::MutableUpperBoundedLinearConstraint *this, int a2)
{
  uint64_t v4 = *(void *)this;
  if (a2 == (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)
  {
    uint64_t v6 = (int *)*((void *)this + 12);
    uint64_t v5 = (int *)*((void *)this + 13);
    if (v6 != v5)
    {
      unint64_t v7 = (char *)v5 - (char *)v6 - 4;
      unint64_t v8 = (int *)*((void *)this + 12);
      if (v7 < 4) {
        goto LABEL_12;
      }
      uint64_t v9 = (v7 >> 2) + 1;
      unint64_t v8 = &v6[v9 & 0x7FFFFFFFFFFFFFFELL];
      uint64_t v10 = v6 + 1;
      uint64_t v11 = v9 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v12 = *v10;
        *(void *)(v4 + 8 * *(v10 - 1)) = 0;
        *(void *)(v4 + 8 * v12) = 0;
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_12:
        do
        {
          uint64_t v13 = *v8++;
          *(void *)(v4 + 8 * v13) = 0;
        }
        while (v8 != v5);
      }
    }
    bzero(*((void **)this + 6), *((void *)this + 7) - *((void *)this + 6));
    *((void *)this + 13) = *((void *)this + 12);
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  else
  {
    uint64_t v14 = 0;
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)this, a2, &v14);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 40, a2);
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
}

uint64_t *operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficients(uint64_t *this)
{
  uint64_t v2 = this + 3;
  uint64_t v1 = this[3];
  uint64_t v4 = this + 4;
  uint64_t v3 = this[4];
  if (v1 >= v3) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>(this + 24, (int)v4, "rhs_ < max_sum_");
  }
  uint64_t v5 = (int *)this[12];
  uint64_t v6 = (int *)this[13];
  if (v5 == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = v3 - v1;
    uint64_t v9 = *this;
    do
    {
      uint64_t v10 = *v5;
      uint64_t v11 = *(void *)(v9 + 8 * v10);
      if (v11 >= 0) {
        uint64_t v12 = *(void *)(v9 + 8 * v10);
      }
      else {
        uint64_t v12 = -v11;
      }
      uint64_t v13 = v12 - v8;
      if (v13 >= 1)
      {
        v7 += v13;
        if (v11 <= 0) {
          uint64_t v14 = -v8;
        }
        else {
          uint64_t v14 = v8;
        }
        *(void *)(v9 + 8 * v10) = v14;
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v1 = *v2;
    uint64_t v3 = *v4;
  }
  uint64_t *v2 = v1 - v7;
  *uint64_t v4 = v3 - v7;
  return this;
}

void sub_23CD39B54(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::MutableUpperBoundedLinearConstraint::ComputeSlackForTrailPrefix(operations_research::sat::MutableUpperBoundedLinearConstraint *this, const operations_research::sat::Trail *a2, int a3)
{
  uint64_t v3 = (int *)*((void *)this + 12);
  uint64_t v4 = (int *)*((void *)this + 13);
  if (v3 == v4)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v3;
      uint64_t v7 = *(void *)(*(void *)this + 8 * v6);
      if (v7 >= 0) {
        uint64_t v8 = *(void *)(*(void *)this + 8 * v6);
      }
      else {
        uint64_t v8 = -v7;
      }
      if (v7
        && ((*(void *)(*((void *)a2 + 3) + (((unint64_t)(2 * (int)v6) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v7 < 1) | (2 * (v6 & 0x1F)))) & 1) != 0)
      {
        if (*(_DWORD *)(*((void *)a2 + 15) + 8 * v6 + 4) >= a3) {
          uint64_t v8 = 0;
        }
        v5 += v8;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return *((void *)this + 3) - v5;
}

uint64_t operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficientsAndComputeSlackForTrailPrefix(operations_research::sat::MutableUpperBoundedLinearConstraint *this, const operations_research::sat::Trail *a2, int a3)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v3 = *((void *)this + 4);
  uint64_t v5 = (int *)*((void *)this + 12);
  uint64_t v6 = (int *)*((void *)this + 13);
  if (v5 == v6)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = v3 - v4;
    uint64_t v10 = v4 - v3;
    do
    {
      uint64_t v11 = *v5;
      uint64_t v12 = *(void *)this;
      uint64_t v13 = *(void *)(*(void *)this + 8 * v11);
      if (v13)
      {
        if (v13 < 0) {
          uint64_t v13 = -v13;
        }
        uint64_t v14 = v13 - v9;
        uint64_t v20 = v13 - v9;
        uint64_t v15 = *(void *)(v12 + 8 * v11);
        if (((*(void *)(*((void *)a2 + 3) + (((unint64_t)(2 * (int)v11) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v15 < 1) | (2 * (v11 & 0x1F)))) & 1) != 0
          && *(_DWORD *)(*((void *)a2 + 15) + 8 * v11 + 4) < a3)
        {
          if (v14 >= 1)
          {
            v8 += v14;
            if (v15 <= 0) {
              uint64_t v15 = v10;
            }
            else {
              uint64_t v15 = v9;
            }
            *(void *)(v12 + 8 * v11) = v15;
          }
          if (v15 >= 0) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = -v15;
          }
          v7 += v16;
        }
        else
        {
          int v19 = 0;
          if (v14 > 0) {
            google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v20, (int)&v19, "diff <= 0");
          }
        }
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v4 = *((void *)this + 3);
    uint64_t v3 = *((void *)this + 4);
  }
  uint64_t v17 = v4 - v8;
  *((void *)this + 3) = v17;
  *((void *)this + 4) = v3 - v8;
  return v17 - v7;
}

void sub_23CD39D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceSlackTo(unint64_t result, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = result;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  if (a5 > a4) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v21, (int)&v20, "target <= slack");
  }
  int v18 = 0;
  if (a5 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v21, (int)&v18, "target >= 0");
  }
  uint64_t v6 = *(void *)(*(void *)result + 8 * (*(int *)(a2[9] + 4 * a3) >> 1));
  if (v6 >= 0) {
    uint64_t v7 = *(void *)(*(void *)result + 8 * (*(int *)(a2[9] + 4 * a3) >> 1));
  }
  else {
    uint64_t v7 = -v6;
  }
  uint64_t v19 = v7;
  if (v20 >= v7) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v20, (int)&v19, "slack < coeff");
  }
  uint64_t v8 = v20 - v21;
  if (v20 != v21)
  {
    *(void *)(result + 24) -= v8;
    uint64_t v9 = *(int **)(result + 96);
    uint64_t v10 = *(int **)(result + 104);
    if (v9 != v10)
    {
      uint64_t v11 = *(void *)result;
      uint64_t v12 = a2[3];
      uint64_t v13 = a2[15];
      do
      {
        uint64_t v14 = *v9;
        uint64_t v15 = *(void *)(v11 + 8 * v14);
        if (v15 >= 0) {
          uint64_t v16 = *(void *)(v11 + 8 * v14);
        }
        else {
          uint64_t v16 = -v15;
        }
        if (v15)
        {
          uint64_t result = *(void *)(v12 + (((unint64_t)(2 * (int)v14) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v15 < 1) | (2 * (v14 & 0x1F)));
          if ((result & 1) == 0 || (uint64_t result = *(unsigned int *)(v13 + 8 * v14 + 4), (int)result >= a3))
          {
            if (v16 <= v8)
            {
              *(void *)(v5 + 32) -= v16;
              *(void *)(v11 + 8 * v14) = 0;
            }
            else
            {
              if (v15 <= 0) {
                uint64_t v17 = v8;
              }
              else {
                uint64_t v17 = -v8;
              }
              *(void *)(v11 + 8 * v14) = v17 + v15;
              *(void *)(v5 + 32) -= v8;
            }
          }
        }
        ++v9;
      }
      while (v9 != v10);
    }
  }
  return result;
}

void sub_23CD39F90(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD39F98(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD39FA0(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::MutableUpperBoundedLinearConstraint::CopyIntoVector(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)*a2;
  a2[1] = *a2;
  uint64_t v3 = (int *)a1[12];
  uint64_t v4 = (int *)a1[13];
  if (v3 == v4)
  {
    uint64_t v23 = (uint64_t)v2;
  }
  else
  {
    do
    {
      uint64_t v8 = *v3;
      uint64_t v9 = *(void *)(*a1 + 8 * v8);
      if (v9 >= 0) {
        uint64_t v10 = *(void *)(*a1 + 8 * v8);
      }
      else {
        uint64_t v10 = -v9;
      }
      if (v9)
      {
        int v11 = (v9 < 1) | (2 * v8);
        unint64_t v12 = a2[2];
        if ((unint64_t)v2 < v12)
        {
          *(_DWORD *)uint64_t v2 = v11;
          *(void *)(v2 + 4) = v10;
          uint64_t v7 = v2 + 12;
        }
        else
        {
          uint64_t v13 = (char *)*a2;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v2[-*a2] >> 2);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v13) >> 2);
          if (2 * v16 > v15) {
            unint64_t v15 = 2 * v16;
          }
          if (v16 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x1555555555555555;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            if (v17 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v18 = (char *)operator new(12 * v17);
          }
          else
          {
            int v18 = 0;
          }
          uint64_t v19 = &v18[12 * v14];
          *(_DWORD *)uint64_t v19 = v11;
          *(void *)(v19 + 4) = v10;
          uint64_t v20 = v19;
          if (v2 != v13)
          {
            do
            {
              uint64_t v21 = *(void *)(v2 - 12);
              v2 -= 12;
              int v22 = *((_DWORD *)v2 + 2);
              *(void *)(v20 - 12) = v21;
              v20 -= 12;
              *((_DWORD *)v20 + 2) = v22;
            }
            while (v2 != v13);
            uint64_t v2 = (char *)*a2;
          }
          uint64_t v7 = v19 + 12;
          *a2 = (uint64_t)v20;
          a2[1] = (uint64_t)(v19 + 12);
          a2[2] = (uint64_t)&v18[12 * v17];
          if (v2) {
            operator delete(v2);
          }
        }
        a2[1] = (uint64_t)v7;
        uint64_t v2 = v7;
      }
      ++v3;
    }
    while (v3 != v4);
    uint64_t v23 = *a2;
  }
  unint64_t v24 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v2[-v23] >> 2));
  if (v2 == (char *)v23) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v24;
  }
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>(v23, (uint64_t *)v2, (unsigned int (**)(uint64_t, char *))&v27, v25, 1);
}

void *operations_research::sat::UpperBoundedLinearConstraint::UpperBoundedLinearConstraint(uint64_t a1, int **a2)
{
  uint64_t v3 = (void *)a1;
  *(_WORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = -1;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v143 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 72) = 0u;
  unint64_t v144 = (void **)(a1 + 48);
  uint64_t v145 = (void **)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v4 = a2[1];
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
  }
  else
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a2);
    if (v5 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(0xAAAAAAAAAAAAAAACLL * (v4 - *a2));
    v3[9] = v6;
    v3[10] = v6;
    v3[11] = &v6[4 * v5];
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (*a2 != v7)
    {
      unint64_t v9 = (char *)v7 - (char *)v8 - 12;
      if (v9 >= 0x54)
      {
        unint64_t v13 = v9 / 0xC + 1;
        unint64_t v12 = &v8[3 * (v13 & 0x3FFFFFFFFFFFFFF8)];
        unint64_t v14 = (uint64_t *)(v8 + 13);
        int8x16_t v15 = 0uLL;
        int32x4_t v16 = 0uLL;
        uint64_t v17 = v13 & 0x3FFFFFFFFFFFFFF8;
        int32x4_t v18 = 0uLL;
        do
        {
          v19.i64[0] = *(v14 - 6);
          v19.i64[1] = *(uint64_t *)((char *)v14 - 36);
          v20.i64[0] = v19.i64[1];
          v20.i64[1] = *(v14 - 3);
          v21.i64[0] = v20.i64[1];
          v21.i64[1] = *(uint64_t *)((char *)v14 - 12);
          uint64_t v22 = *(uint64_t *)((char *)v14 + 12);
          uint64_t v23 = v14[3];
          uint64_t v11 = *(uint64_t *)((char *)v14 + 36);
          uint64_t v24 = *v14;
          v14 += 12;
          v25.i64[0] = v24;
          v25.i64[1] = v22;
          v26.i64[0] = v22;
          v26.i64[1] = v23;
          v27.i64[0] = v23;
          v27.i64[1] = v11;
          int32x4_t v16 = vsubq_s32(v16, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v19, (int64x2_t)vextq_s8(v15, (int8x16_t)v19, 8uLL)), (int32x4_t)vceqq_s64(v21, v20))));
          int32x4_t v18 = vsubq_s32(v18, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v25, (int64x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v25, 8uLL)), (int32x4_t)vceqq_s64(v27, v26))));
          int8x16_t v15 = (int8x16_t)v27;
          v17 -= 8;
        }
        while (v17);
        unsigned int v10 = vaddvq_s32(vaddq_s32(v18, v16));
        if (v13 == (v13 & 0x3FFFFFFFFFFFFFF8))
        {
LABEL_14:
          if (v10)
          {
            uint64_t v29 = (char *)operator new(8 * v10);
            v3[3] = v29;
            v3[4] = v29;
            v3[5] = &v29[8 * v10];
          }
          goto LABEL_16;
        }
      }
      else
      {
        unsigned int v10 = 0;
        uint64_t v11 = 0;
        unint64_t v12 = *a2;
      }
      do
      {
        uint64_t v28 = *(void *)(v12 + 1);
        if (v28 != v11) {
          ++v10;
        }
        v12 += 3;
        uint64_t v11 = v28;
      }
      while (v12 != v7);
      goto LABEL_14;
    }
  }
  unsigned int v10 = 0;
LABEL_16:
  uint64_t v30 = v10 + 1;
  uint64_t v31 = (char *)operator new(4 * v30);
  uint64_t v32 = v31;
  uint64_t v33 = &v31[4 * v30];
  v3[6] = v31;
  v3[7] = v31;
  v3[8] = v33;
  uint64_t v35 = *a2;
  int v34 = a2[1];
  unint64_t v141 = a2;
  if (*a2 == v34)
  {
    LODWORD(v107) = 0;
    uint64_t v108 = a2;
    if (v31 >= v33) {
      goto LABEL_95;
    }
LABEL_93:
    *(_DWORD *)uint64_t v32 = v107;
    uint64_t v109 = (uint64_t)(v32 + 4);
    goto LABEL_116;
  }
  uint64_t v36 = 0;
  uint64_t v37 = v6;
  do
  {
    int v38 = *v35;
    if (*(void *)(v35 + 1) == v36) {
      goto LABEL_65;
    }
    unint64_t v40 = (char *)v3[4];
    unint64_t v39 = v3[5];
    uint64_t v146 = *(void *)(v35 + 1);
    if ((unint64_t)v40 < v39)
    {
      *(void *)unint64_t v40 = *(void *)(v35 + 1);
      uint64_t v41 = (uint64_t)(v40 + 8);
      goto LABEL_42;
    }
    unint64_t v42 = (char *)*v143;
    uint64_t v43 = v40 - (unsigned char *)*v143;
    uint64_t v44 = v43 >> 3;
    unint64_t v45 = (v43 >> 3) + 1;
    if (v45 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v46 = v39 - (void)v42;
    if (v46 >> 2 > v45) {
      unint64_t v45 = v46 >> 2;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v45;
    }
    if (v47)
    {
      if (v47 >> 61) {
        goto LABEL_127;
      }
      int v48 = *v35;
      uint64_t v49 = operator new(8 * v47);
      int v38 = v48;
      long long v50 = &v49[8 * v44];
      *long long v50 = v146;
      uint64_t v41 = (uint64_t)(v50 + 1);
      if (v40 == v42) {
        goto LABEL_40;
      }
LABEL_34:
      unint64_t v51 = v40 - 8 - v42;
      if (v51 < 0x58) {
        goto LABEL_136;
      }
      if ((unint64_t)(v40 - &v49[v43]) < 0x20) {
        goto LABEL_136;
      }
      uint64_t v52 = (v51 >> 3) + 1;
      uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v54 = &v40[-v53];
      long long v50 = (void *)((char *)v50 - v53);
      unint64_t v55 = &v49[8 * v44 - 16];
      uint64_t v56 = v40 - 16;
      uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v58 = *(_OWORD *)v56;
        *(v55 - 1) = *((_OWORD *)v56 - 1);
        _OWORD *v55 = v58;
        v55 -= 2;
        v56 -= 32;
        v57 -= 4;
      }
      while (v57);
      unint64_t v40 = v54;
      if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_136:
        do
        {
          uint64_t v59 = *((void *)v40 - 1);
          v40 -= 8;
          *--long long v50 = v59;
        }
        while (v40 != v42);
      }
      goto LABEL_40;
    }
    uint64_t v49 = 0;
    long long v50 = (void *)(8 * v44);
    *(void *)(8 * v44) = v146;
    uint64_t v41 = 8 * v44 + 8;
    if (v40 != v42) {
      goto LABEL_34;
    }
LABEL_40:
    v3[3] = v50;
    v3[4] = v41;
    v3[5] = &v49[8 * v47];
    if (v42)
    {
      int v60 = v38;
      operator delete(v42);
      int v38 = v60;
      uint64_t v37 = (char *)v3[10];
    }
LABEL_42:
    v3[4] = v41;
    unint64_t v61 = (unint64_t)&v37[-v3[9]] >> 2;
    unint64_t v63 = (char *)v3[7];
    unint64_t v62 = v3[8];
    if ((unint64_t)v63 >= v62)
    {
      unint64_t v65 = v34;
      uint64_t v66 = (char *)*v144;
      uint64_t v67 = v63 - (unsigned char *)*v144;
      uint64_t v68 = v67 >> 2;
      unint64_t v69 = (v67 >> 2) + 1;
      if (v69 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v70 = v62 - (void)v66;
      if (v70 >> 1 > v69) {
        unint64_t v69 = v70 >> 1;
      }
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v71 = v69;
      }
      if (v71)
      {
        if (v71 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v72 = v38;
        unint64_t v73 = v71;
        long long v74 = operator new(4 * v71);
        int v38 = v72;
        unint64_t v71 = v73;
        uint64_t v3 = (void *)a1;
        uint64_t v75 = &v74[4 * v68];
        *uint64_t v75 = v61;
        uint64_t v64 = (uint64_t)(v75 + 1);
        if (v63 != v66)
        {
LABEL_53:
          unint64_t v76 = v63 - 4 - v66;
          uint64_t v36 = v146;
          if (v76 >= 0x2C)
          {
            unint64_t v77 = v63 - &v74[v67];
            int v34 = v65;
            if (v77 >= 0x20)
            {
              uint64_t v78 = (v76 >> 2) + 1;
              uint64_t v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v80 = &v63[-v79];
              uint64_t v75 = (_DWORD *)((char *)v75 - v79);
              uint64_t v81 = &v74[4 * v68 - 16];
              uint64_t v82 = v63 - 16;
              uint64_t v83 = v78 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v84 = *(_OWORD *)v82;
                *(v81 - 1) = *((_OWORD *)v82 - 1);
                _OWORD *v81 = v84;
                v81 -= 2;
                v82 -= 32;
                v83 -= 8;
              }
              while (v83);
              unint64_t v63 = v80;
              if (v78 == (v78 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_62:
                v3[6] = v75;
                v3[7] = v64;
                v3[8] = &v74[4 * v71];
                if (v66)
                {
                  int v86 = v38;
                  operator delete(v66);
                  int v38 = v86;
                  uint64_t v37 = (char *)v3[10];
                }
                goto LABEL_64;
              }
            }
          }
          else
          {
            int v34 = v65;
          }
          do
          {
            int v85 = *((_DWORD *)v63 - 1);
            v63 -= 4;
            *--uint64_t v75 = v85;
          }
          while (v63 != v66);
          goto LABEL_62;
        }
      }
      else
      {
        long long v74 = 0;
        uint64_t v75 = (_DWORD *)(4 * v68);
        *(_DWORD *)(4 * v68) = v61;
        uint64_t v64 = 4 * v68 + 4;
        if (v63 != v66) {
          goto LABEL_53;
        }
      }
      int v34 = v65;
      uint64_t v36 = v146;
      goto LABEL_62;
    }
    *(_DWORD *)unint64_t v63 = v61;
    uint64_t v64 = (uint64_t)(v63 + 4);
    uint64_t v36 = v146;
LABEL_64:
    v3[7] = v64;
LABEL_65:
    uint64_t v87 = v37;
    unint64_t v88 = v3[11];
    if ((unint64_t)v37 < v88)
    {
      *(_DWORD *)uint64_t v37 = v38;
      v37 += 4;
      goto LABEL_19;
    }
    uint64_t v89 = (char *)*v145;
    uint64_t v90 = v37 - (unsigned char *)*v145;
    uint64_t v91 = v90 >> 2;
    unint64_t v92 = (v90 >> 2) + 1;
    if (v92 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v93 = v88 - (void)v89;
    if (v93 >> 1 > v92) {
      unint64_t v92 = v93 >> 1;
    }
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v94 = v92;
    }
    if (v94)
    {
      if (v94 >> 62) {
LABEL_127:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      int v95 = v38;
      uint64_t v96 = (char *)operator new(4 * v94);
      unint64_t v97 = &v96[4 * v91];
      *(_DWORD *)unint64_t v97 = v95;
      uint64_t v37 = v97 + 4;
      if (v87 == v89) {
        goto LABEL_80;
      }
    }
    else
    {
      uint64_t v96 = 0;
      unint64_t v97 = (char *)(4 * v91);
      *(_DWORD *)(4 * v91) = v38;
      uint64_t v37 = (char *)(4 * v91 + 4);
      if (v87 == v89) {
        goto LABEL_80;
      }
    }
    unint64_t v98 = v87 - 4 - v89;
    if (v98 < 0xBC)
    {
      long long v99 = v87;
      goto LABEL_79;
    }
    if (&v96[v90 - 4 - (v98 & 0xFFFFFFFFFFFFFFFCLL)] > &v96[v90 - 4])
    {
      long long v99 = v87;
      do
      {
LABEL_79:
        int v100 = *((_DWORD *)v99 - 1);
        v99 -= 4;
        *((_DWORD *)v97 - 1) = v100;
        v97 -= 4;
      }
      while (v99 != v89);
      goto LABEL_80;
    }
    if (&v87[-(v98 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v87 - 4)
    {
      long long v99 = v87;
      goto LABEL_79;
    }
    if ((unint64_t)(v87 - v96 - v90) < 0x20)
    {
      long long v99 = v87;
      goto LABEL_79;
    }
    uint64_t v101 = (v98 >> 2) + 1;
    uint64_t v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
    long long v99 = &v87[-v102];
    v97 -= v102;
    uint64_t v103 = &v96[4 * v91 - 16];
    unint64_t v104 = v87 - 16;
    uint64_t v105 = v101 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v106 = *(_OWORD *)v104;
      *((_OWORD *)v103 - 1) = *((_OWORD *)v104 - 1);
      *(_OWORD *)uint64_t v103 = v106;
      v103 -= 32;
      v104 -= 32;
      v105 -= 8;
    }
    while (v105);
    if (v101 != (v101 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_79;
    }
LABEL_80:
    v3[9] = v97;
    v3[10] = v37;
    v3[11] = &v96[4 * v94];
    if (v89) {
      operator delete(v89);
    }
LABEL_19:
    v3[10] = v37;
    v35 += 3;
  }
  while (v35 != v34);
  uint64_t v33 = (char *)v3[8];
  uint64_t v32 = (char *)v3[7];
  unint64_t v107 = (unint64_t)&v37[-v3[9]] >> 2;
  uint64_t v108 = v141;
  if (v32 < v33) {
    goto LABEL_93;
  }
LABEL_95:
  unint64_t v110 = (char *)*v144;
  uint64_t v111 = v32 - (unsigned char *)*v144;
  uint64_t v112 = v111 >> 2;
  unint64_t v113 = (v111 >> 2) + 1;
  if (v113 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v114 = v33 - v110;
  if (v114 >> 1 > v113) {
    unint64_t v113 = v114 >> 1;
  }
  if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v115 = v113;
  }
  if (v115)
  {
    if (v115 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v116 = operator new(4 * v115);
    long long v117 = &v116[4 * v112];
    uint64_t v118 = &v116[4 * v115];
    _DWORD *v117 = v107;
    uint64_t v109 = (uint64_t)(v117 + 1);
    int64_t v119 = v32 - v110;
    if (v32 == v110) {
      goto LABEL_114;
    }
  }
  else
  {
    uint64_t v116 = 0;
    long long v117 = (_DWORD *)(4 * v112);
    uint64_t v118 = 0;
    *(_DWORD *)(4 * v112) = v107;
    uint64_t v109 = 4 * v112 + 4;
    int64_t v119 = v32 - v110;
    if (v32 == v110) {
      goto LABEL_114;
    }
  }
  unint64_t v120 = v119 - 4;
  if (v120 >= 0x2C)
  {
    if ((unint64_t)(v32 - v116 - v111) >= 0x20)
    {
      uint64_t v122 = (v120 >> 2) + 1;
      uint64_t v123 = 4 * (v122 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v121 = &v32[-v123];
      long long v117 = (_DWORD *)((char *)v117 - v123);
      uint64_t v124 = &v116[4 * v112 - 16];
      uint64_t v125 = v32 - 16;
      uint64_t v126 = v122 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v127 = *(_OWORD *)v125;
        *(v124 - 1) = *((_OWORD *)v125 - 1);
        _OWORD *v124 = v127;
        v124 -= 2;
        v125 -= 32;
        v126 -= 8;
      }
      while (v126);
      if (v122 == (v122 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_114;
      }
    }
    else
    {
      unint64_t v121 = v32;
    }
  }
  else
  {
    unint64_t v121 = v32;
  }
  do
  {
    int v128 = *((_DWORD *)v121 - 1);
    v121 -= 4;
    *--long long v117 = v128;
  }
  while (v121 != v110);
LABEL_114:
  v3[6] = v117;
  v3[7] = v109;
  v3[8] = v118;
  if (v110) {
    operator delete(v110);
  }
LABEL_116:
  v3[7] = v109;
  int32x2_t v129 = *v108;
  unint64_t v130 = (unint64_t)v108[1];
  if ((uint64_t)(v130 - (void)*v108) >= 8)
  {
    unint64_t v134 = 0xA5B85C5E198ED849;
    int32x2_t v132 = *v108;
    do
    {
      int v135 = v129 + 4;
      unint64_t v134 = 0xC6A4A7935BD1E995 * v134
           + 0x228876A7198B743 * *(void *)v129
           + (~(0xC6A4A7935BD1E995 * v134 + 0x228876A7198B743 * *(void *)v129) >> 47);
      v129 += 2;
      v132 += 2;
    }
    while ((unint64_t)v135 <= v130);
    unint64_t v131 = 0xC6A4A7935BD1E995 * v134;
    if ((unint64_t)v129 < v130) {
      goto LABEL_122;
    }
LABEL_118:
    uint64_t v133 = 0;
  }
  else
  {
    unint64_t v131 = 0xFD29DD736997537DLL;
    int32x2_t v132 = *v108;
    if ((unint64_t)v129 >= v130) {
      goto LABEL_118;
    }
LABEL_122:
    uint64_t v136 = 0;
    unint64_t v137 = v130 - (void)v132;
    do
    {
      uint64_t v138 = *(char *)v129;
      int32x2_t v129 = (int *)((char *)v129 + 1);
      uint64_t v139 = v136 + v138;
      uint64_t v136 = (v136 + v138) << 8;
      --v137;
    }
    while (v137);
    uint64_t v133 = 0x28876A7198B74300 * v139;
  }
  v3[13] = v133 + v131 + (~(v133 + v131) >> 47);
  return v3;
}

void sub_23CD3AAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void **a12, void **a13)
{
  unint64_t v14 = *a13;
  if (*a13)
  {
    a10[10] = v14;
    operator delete(v14);
    int8x16_t v15 = *a12;
    if (!*a12)
    {
LABEL_3:
      int32x4_t v16 = *a11;
      if (!*a11) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int8x16_t v15 = *a12;
    if (!*a12) {
      goto LABEL_3;
    }
  }
  a10[7] = v15;
  operator delete(v15);
  int32x4_t v16 = *a11;
  if (!*a11) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  a10[4] = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::UpperBoundedLinearConstraint::AddToConflict(operations_research::sat::UpperBoundedLinearConstraint *this, operations_research::sat::MutableUpperBoundedLinearConstraint *a2)
{
  uint64_t v4 = (int *)*((void *)this + 9);
  unint64_t v5 = (int *)*((void *)this + 10);
  if (v4 != v5)
  {
    int v6 = 0;
    int v7 = 1;
    do
    {
      int v8 = *v4++;
      operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)a2, v8, *(void *)(*((void *)this + 3) + 8 * v6));
      if (v7 == *(_DWORD *)(*((void *)this + 6) + 4 * (v6 + 1))) {
        ++v6;
      }
      ++v7;
    }
    while (v4 != v5);
  }
  uint64_t v9 = *((void *)this + 12);
  uint64_t v11 = v9;
  int v10 = 0;
  if (v9 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v11, (int)&v10, "value >= 0");
  }
  *((void *)a2 + 3) += v9;
}

void sub_23CD3AC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v12 = a3;
  v11[0] = 0;
  if (a3 < 1) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v12, (int)v11, "coeff > 0");
  }
  if (a2) {
    uint64_t v3 = -a3;
  }
  else {
    uint64_t v3 = a3;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 8 * (a2 >> 1));
  uint64_t v6 = (uint64_t)a2 >> 1;
  if ((a2 & 0xFFFFFFFE | (v5 < 1)) == a2)
  {
    uint64_t v7 = a1[4] + a3;
  }
  else
  {
    if (v5 < 0) {
      uint64_t v5 = -v5;
    }
    if (v5 >= a3) {
      uint64_t v5 = a3;
    }
    uint64_t v8 = a1[4];
    a1[3] -= v5;
    uint64_t v9 = *(void *)(v4 + 8 * v6);
    uint64_t v10 = v9 + v3;
    if (v9 + v3 < 0) {
      uint64_t v10 = -v10;
    }
    if (v9 < 0) {
      uint64_t v9 = -v9;
    }
    uint64_t v7 = v8 - v9 + v10;
  }
  a1[4] = v7;
  v11[0] = 0;
  if (v7 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>(a1 + 32, (int)v11, "max_sum_ >= 0");
  }
  *(void *)(v4 + 8 * v6) += v3;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 5, a2 >> 1);
}

void sub_23CD3AE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD3AE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::UpperBoundedLinearConstraint::InitializeRhs(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a2;
  *(void *)(a1 + 96) = a2;
  unint64_t v11 = *(unsigned int *)(a5 + 8);
  uint64_t v12 = (v11 >> 1) & 0x7FFFFFF;
  unint64_t v13 = (uint64_t *)operator new(8 * v12 + 16);
  bzero(v13, 8 * ((v11 >> 1) & 0x7FFFFFF) + 16);
  unint64_t v14 = *(int **)(a1 + 72);
  int8x16_t v15 = *(int **)(a1 + 80);
  uint64_t v42 = a6;
  if (a3 < 1)
  {
    int v17 = 0;
  }
  else
  {
    if (v14 == v15)
    {
      int v17 = 0;
    }
    else
    {
      int v16 = 0;
      int v17 = 0;
      uint64_t v18 = *(void *)(a1 + 24);
      uint64_t v19 = *(void *)(a5 + 24);
      int v20 = 1;
      int64x2_t v21 = *(int **)(a1 + 72);
      uint64_t v22 = *(void *)(a1 + 48);
      do
      {
        int v23 = *v21;
        if ((*(void *)(v19 + (((unint64_t)v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23))
        {
          uint64_t v24 = *(void *)(a5 + 120);
          int v25 = *(_DWORD *)(v24 + 8 * (v23 >> 1) + 4);
          if (v25 < a3)
          {
            uint64_t v26 = *(void *)(v18 + 8 * v16);
            uint64_t v27 = 8 * ((uint64_t)v23 >> 1);
            if (v17 <= v25) {
              int v17 = v25;
            }
            v9 -= v26;
            uint64_t v28 = &v13[((unint64_t)*(unsigned int *)(v24 + v27) >> 1) & 0x7FFFFFF];
            v28[1] += v26;
          }
        }
        if (v20 == *(_DWORD *)(v22 + 4 * (v16 + 1))) {
          ++v16;
        }
        ++v21;
        ++v20;
      }
      while (v21 != v15);
    }
    if (v9 < 0)
    {
      uint64_t v40 = 0;
      goto LABEL_34;
    }
    uint64_t v29 = v13 + 1;
    uint64_t v30 = *v13;
    uint64_t v31 = ((v11 >> 1) & 0x7FFFFFF) + 1;
    do
    {
      v30 += *v29;
      *v29++ = v30;
      --v31;
    }
    while (v31);
  }
  if (v14 != v15)
  {
    int v32 = 0;
    int v33 = 1;
    do
    {
      int v34 = *v14 >> 1;
      unsigned int v35 = v12;
      if (((*(void *)(*(void *)(a5 + 24) + (((unint64_t)(2 * v34) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*v14 & 0x3E)) & 3) != 0) {
        unsigned int v35 = (*(_DWORD *)(*(void *)(a5 + 120) + 8 * v34) >> 1) & 0x7FFFFFF;
      }
      if (v35)
      {
        uint64_t v36 = (void *)(*(void *)(a1 + 24) + 8 * v32);
        uint64_t v44 = *(void *)(a1 + 96) - v13[v35];
        if (*v36 > v44) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)v36, (int)&v44, "coeffs_[coeff_index] <= rhs_ - sum_at_previous_level[level]");
        }
      }
      if (v33 == *(_DWORD *)(*(void *)(a1 + 48) + 4 * (v32 + 1))) {
        ++v32;
      }
      ++v14;
      ++v33;
    }
    while (v14 != v15);
    int8x16_t v15 = *(int **)(a1 + 72);
  }
  uint64_t v37 = *(void *)(a1 + 24);
  unint64_t v38 = (unint64_t)(*(void *)(a1 + 32) - v37) >> 3;
  uint64_t v39 = (*(void *)(a1 + 80) - (void)v15) >> 2;
  *(_DWORD *)(a1 + 16) = v38 - 1;
  *(_DWORD *)(a1 + 20) = v39;
  if (((v38 - 1) & 0x80000000) == 0) {
    v9 -= *(void *)(v37 + 8 * (v38 - 1));
  }
  *a4 = v9;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * (int)v38);
  if (v9 < 0) {
    uint64_t v40 = operations_research::sat::UpperBoundedLinearConstraint::Propagate(a1, v17, a4, a5, v42);
  }
  else {
    uint64_t v40 = 1;
  }
LABEL_34:
  operator delete(v13);
  return v40;
}

void sub_23CD3B108(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3B110(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CD3B124(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CD3B138(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::UpperBoundedLinearConstraint::Propagate(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *(unsigned int *)(a1 + 16);
  if ((v9 & 0x80000000) != 0)
  {
LABEL_8:
    uint64_t v13 = *(int *)(*(void *)(a1 + 48) + 4 * ((int)v9 + 1));
    if ((int)v13 >= *(_DWORD *)(a1 + 20))
    {
LABEL_20:
      uint64_t result = 1;
      if ((v9 & 0x80000000) != 0) {
        goto LABEL_22;
      }
LABEL_21:
      v8 -= *(void *)(*(void *)(a1 + 24) + 8 * v9);
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    v8 += *(void *)(v10 + 8 * v9);
    do
    {
      if (*(void *)(v10 + 8 * v9) <= v8) {
        goto LABEL_8;
      }
      int v11 = v9 - 1;
      *(_DWORD *)(a1 + 16) = v9 - 1;
      BOOL v12 = (int)v9 <= 0;
      LODWORD(v9) = v9 - 1;
    }
    while (!v12);
    LODWORD(v9) = v11;
    uint64_t v13 = **(int **)(a1 + 48);
    if ((int)v13 >= *(_DWORD *)(a1 + 20)) {
      goto LABEL_20;
    }
  }
  uint64_t v14 = *(void *)(a4 + 24);
  int v15 = -1;
  while (1)
  {
    unint64_t v16 = *(int *)(*(void *)(a1 + 72) + 4 * v13);
    unint64_t v17 = v16 >> 6;
    unint64_t v18 = *(void *)(v14 + 8 * (v16 >> 6));
    if (((v18 >> (v16 & 0x3F ^ 1)) & 1) == 0)
    {
      if (((v18 >> (v16 & 0x3F)) & 1) == 0)
      {
        if (v15 < 0)
        {
          int v22 = *(_DWORD *)(a4 + 12);
          if (*(_DWORD *)(a1 + 4) == -1) {
            *(_DWORD *)(a1 + 4) = v22;
          }
          uint64_t v23 = *(void *)(a5 + 32) + 16 * v22;
          *(_DWORD *)uint64_t v23 = a2;
          *(void *)(v23 + 8) = a1;
          LODWORD(v23) = *(_DWORD *)a5;
          *(_DWORD *)(*(void *)(a4 + 72) + 4 * *(int *)(a4 + 12)) = v16 ^ 1;
          *(_DWORD *)(a4 + 8) = (*(_DWORD *)(a4 + 8) & 0xFFFFFFE | (v16 ^ 1) & 1 | (v23 << 28)) ^ 1;
          *(void *)(*(void *)(a4 + 120) + 8 * ((int)v16 >> 1)) = *(void *)(a4 + 8);
          uint64_t v14 = *(void *)(a4 + 24);
          *(void *)(v14 + 8 * v17) |= 1 << (v16 ^ 1u);
          ++*(_DWORD *)(a4 + 12);
          int v15 = *(int *)(*(void *)(a1 + 72) + 4 * v13) >> 1;
        }
        else
        {
          int v19 = v16 ^ 1;
          int v20 = (int)v16 >> 1;
          *(_DWORD *)(*(void *)(a4 + 152) + 4 * v20) = v15;
          *(_DWORD *)(*(void *)(a4 + 72) + 4 * *(int *)(a4 + 12)) = v19;
          *(_DWORD *)(a4 + 8) = (*(_DWORD *)(a4 + 8) & 0xFFFFFFE | v19 & 1) ^ 0x30000001;
          *(void *)(*(void *)(a4 + 120) + 8 * v20) = *(void *)(a4 + 8);
          uint64_t v21 = 1 << v19;
          uint64_t v14 = *(void *)(a4 + 24);
          *(void *)(v14 + 8 * v17) |= v21;
          ++*(_DWORD *)(a4 + 12);
        }
        goto LABEL_11;
      }
      if (*(_DWORD *)(*(void *)(a4 + 120) + 8 * ((int)v16 >> 1) + 4) > a2) {
        break;
      }
    }
LABEL_11:
    if (++v13 >= *(int *)(a1 + 20))
    {
      LODWORD(v9) = *(_DWORD *)(a1 + 16);
      goto LABEL_20;
    }
  }
  int v25 = (void **)(a5 + 8);
  operations_research::sat::UpperBoundedLinearConstraint::FillReason((void *)a1, (void *)a4, a2, (int)v16 >> 1, (char **)(a5 + 8));
  int v26 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v13) ^ 1;
  uint64_t v28 = *(int **)(a5 + 16);
  unint64_t v27 = *(void *)(a5 + 24);
  if ((unint64_t)v28 >= v27)
  {
    uint64_t v30 = (int *)*v25;
    uint64_t v31 = (char *)v28 - (unsigned char *)*v25;
    uint64_t v32 = v31 >> 2;
    unint64_t v33 = (v31 >> 2) + 1;
    if (v33 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v34 = v27 - (void)v30;
    if (v34 >> 1 > v33) {
      unint64_t v33 = v34 >> 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      if (v35 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v36 = operator new(4 * v35);
    }
    else
    {
      uint64_t v36 = 0;
    }
    uint64_t v37 = (int *)&v36[4 * v32];
    unint64_t v38 = &v36[4 * v35];
    *uint64_t v37 = v26;
    uint64_t v29 = v37 + 1;
    if (v28 != v30)
    {
      unint64_t v39 = (char *)v28 - (char *)v30 - 4;
      if (v39 < 0x2C) {
        goto LABEL_50;
      }
      if ((unint64_t)((char *)v28 - v36 - v31) < 0x20) {
        goto LABEL_50;
      }
      uint64_t v40 = (v39 >> 2) + 1;
      uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v42 = &v28[v41 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v37 = (int *)((char *)v37 - v41);
      uint64_t v43 = &v36[4 * v32 - 16];
      uint64_t v44 = v28 - 4;
      uint64_t v45 = v40 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v46 = *(_OWORD *)v44;
        *(v43 - 1) = *((_OWORD *)v44 - 1);
        *uint64_t v43 = v46;
        v43 -= 2;
        v44 -= 8;
        v45 -= 8;
      }
      while (v45);
      uint64_t v28 = v42;
      if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          int v47 = *--v28;
          *--uint64_t v37 = v47;
        }
        while (v28 != v30);
      }
    }
    *(void *)(a5 + 8) = v37;
    *(void *)(a5 + 16) = v29;
    *(void *)(a5 + 24) = v38;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *uint64_t v28 = v26;
    uint64_t v29 = v28 + 1;
  }
  uint64_t result = 0;
  *(void *)(a5 + 16) = v29;
  LODWORD(v9) = *(_DWORD *)(a1 + 16);
  if ((v9 & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_22:
  *a3 = v8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * ((int)v9 + 1));
  return result;
}

void operations_research::sat::UpperBoundedLinearConstraint::FillReason(void *a1, void *a2, int a3, int a4, char **a5)
{
  uint64_t v5 = a5;
  int v6 = a3;
  uint64_t v8 = (int *)*a5;
  a5[1] = *a5;
  uint64_t v9 = a1[12];
  if (v9 != 1)
  {
    int v13 = ((a1[10] - a1[9]) >> 2) - 1;
    if (v13 < 0) {
      return;
    }
    LODWORD(v15) = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = a1[3];
    int v19 = ((unint64_t)(a1[4] - v18) >> 3) - 1;
    int v20 = (char *)v8;
    while (1)
    {
      unint64_t v22 = *(int *)(a1[9] + 4 * v13);
      int v23 = (int)v22 >> 1;
      if ((int)v22 >> 1 != a4) {
        break;
      }
      uint64_t v17 = *(void *)(v18 + 8 * v19);
LABEL_7:
      v19 -= v13 == *(_DWORD *)(a1[6] + 4 * v19);
      if (v13-- <= 0)
      {
        if ((unint64_t)(v20 - *v5) >= 8)
        {
          uint64_t v53 = a1[3];
          if (a1[4] - v53 != 8)
          {
            uint64_t v54 = v17 - v9;
            if (*(void *)(v53 + 8 * v16) < v17 - v9)
            {
              uint64_t v15 = (int)v15;
              uint64_t v55 = a1[9];
              uint64_t v56 = a1[10];
              if ((int)v15 < (unint64_t)((v56 - v55) >> 2))
              {
                uint64_t v57 = a1[6];
                while (1)
                {
                  int v58 = v16 + 1;
                  if (v15 == *(_DWORD *)(v57 + 4 * (v16 + 1)))
                  {
                    ++v16;
                    if (*(void *)(v53 + 8 * v58) >= v54) {
                      break;
                    }
                  }
                  if ((*(_DWORD *)(v55 + 4 * v15) ^ 1) == *((_DWORD *)v20 - 1))
                  {
                    uint64_t v59 = *(void *)(v53 + 8 * v16);
                    v54 -= v59;
                    v5[1] = v20 - 4;
                    if (v59 >= v54) {
                      return;
                    }
                    uint64_t v56 = a1[10];
                    v20 -= 4;
                  }
                  if (++v15 >= (unint64_t)((v56 - v55) >> 2)) {
                    return;
                  }
                }
              }
            }
          }
        }
        return;
      }
    }
    if (((*(void *)(a2[3] + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v24 = a2[15];
    if (*(_DWORD *)(v24 + 8 * v23 + 4) > v6) {
      goto LABEL_7;
    }
    if ((*(_DWORD *)(v24 + 8 * v23) & 0xFFFFFFE) == 0)
    {
LABEL_32:
      v9 -= *(void *)(v18 + 8 * v19);
      goto LABEL_7;
    }
    int v25 = v22 ^ 1;
    unint64_t v26 = (unint64_t)v5[2];
    if ((unint64_t)v20 < v26)
    {
      *(_DWORD *)int v20 = v25;
      uint64_t v27 = (uint64_t)(v20 + 4);
LABEL_31:
      v5[1] = (char *)v27;
      uint64_t v18 = a1[3];
      int v20 = (char *)v27;
      int v16 = v19;
      LODWORD(v15) = v13;
      goto LABEL_32;
    }
    uint64_t v28 = *v5;
    uint64_t v29 = v20 - *v5;
    uint64_t v30 = v29 >> 2;
    unint64_t v31 = (v29 >> 2) + 1;
    if (v31 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v32 = v26 - (void)v28;
    if (v32 >> 1 > v31) {
      unint64_t v31 = v32 >> 1;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    uint64_t v63 = v17;
    uint64_t v64 = v9;
    unint64_t v62 = v31;
    if (v31)
    {
      if (v31 >> 62) {
        goto LABEL_62;
      }
      unint64_t v33 = v20;
      uint64_t v34 = operator new(4 * v31);
      int v20 = v33;
      unint64_t v35 = &v34[4 * v30];
      *(_DWORD *)unint64_t v35 = v25;
      uint64_t v27 = (uint64_t)(v35 + 4);
      if (v20 != v28)
      {
LABEL_22:
        unint64_t v36 = v20 - 4 - v28;
        if (v36 >= 0xBC
          && &v34[v29 - 4 - (v36 & 0xFFFFFFFFFFFFFFFCLL)] <= &v34[v29 - 4]
          && &v20[-(v36 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v20 - 4
          && (unint64_t)(v20 - v34 - v29) >= 0x20)
        {
          uint64_t v39 = (v36 >> 2) + 1;
          uint64_t v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v37 = &v20[-v40];
          v35 -= v40;
          uint64_t v41 = &v34[4 * v30 - 16];
          uint64_t v42 = v20 - 16;
          uint64_t v43 = v39 & 0x7FFFFFFFFFFFFFF8;
          int v6 = a3;
          do
          {
            long long v44 = *(_OWORD *)v42;
            *(v41 - 1) = *((_OWORD *)v42 - 1);
            *uint64_t v41 = v44;
            v41 -= 2;
            v42 -= 32;
            v43 -= 8;
          }
          while (v43);
          uint64_t v5 = a5;
          if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_28:
            *uint64_t v5 = v35;
            v5[1] = (char *)v27;
            v5[2] = &v34[4 * v62];
            if (!v28)
            {
LABEL_30:
              uint64_t v17 = v63;
              uint64_t v9 = v64;
              goto LABEL_31;
            }
LABEL_29:
            operator delete(v28);
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v37 = v20;
          uint64_t v5 = a5;
          int v6 = a3;
        }
        do
        {
          int v38 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v35 - 1) = v38;
          v35 -= 4;
        }
        while (v37 != v28);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = (char *)(4 * v30);
      *(_DWORD *)(4 * v30) = v25;
      uint64_t v27 = 4 * v30 + 4;
      if (v20 != v28) {
        goto LABEL_22;
      }
    }
    uint64_t v5 = a5;
    int v6 = a3;
    *a5 = v35;
    a5[1] = (char *)v27;
    a5[2] = &v34[4 * v62];
    if (!v28) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  int v10 = *(_DWORD *)(a2[9] + 4 * a3) ^ 1;
  unint64_t v11 = (unint64_t)a5[2];
  if ((unint64_t)v8 >= v11)
  {
    uint64_t v45 = v11 - (void)v8;
    uint64_t v46 = v45 >> 1;
    if ((unint64_t)(v45 >> 1) <= 1) {
      uint64_t v46 = 1;
    }
    BOOL v47 = (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v47) {
      unint64_t v48 = v46;
    }
    if (v48 >> 62) {
LABEL_62:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v49 = 4 * v48;
    long long v50 = (char *)operator new(4 * v48);
    unint64_t v51 = &v50[v49];
    *(_DWORD *)long long v50 = v10;
    uint64_t v52 = v50 + 4;
    *uint64_t v5 = v50;
    v5[1] = v50 + 4;
    v5[2] = v51;
    if (v8) {
      operator delete(v8);
    }
    v5[1] = v52;
  }
  else
  {
    *uint64_t v8 = v10;
    a5[1] = (char *)(v8 + 1);
  }
}

void operations_research::sat::UpperBoundedLinearConstraint::ResolvePBConflict(operations_research::sat::UpperBoundedLinearConstraint *this, void *a2, int a3, void **a4, uint64_t *a5)
{
  uint64_t v5 = (operations_research::sat::MutableUpperBoundedLinearConstraint *)a4;
  int v8 = *(_DWORD *)(a2[15] + 8 * a3 + 4);
  uint64_t v54 = 0;
  int v10 = (int *)*((void *)this + 9);
  uint64_t v9 = (int *)*((void *)this + 10);
  if (v10 == v9)
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    int v14 = 1;
    do
    {
      unint64_t v15 = *v10;
      LODWORD(v56) = v15;
      if ((int)v15 >> 1 == a3)
      {
        v55[0] = (2 * a3) | (*((void *)*a4 + a3) < 1);
        if (v15 == v55[0]) {
          google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>((int)&v56, (int)v55, "literal != conflict->GetLiteral(var)");
        }
        uint64_t v11 = *(void *)(*((void *)this + 3) + 8 * v12);
        uint64_t v54 = v11;
      }
      else if (((*(void *)(a2[3] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) != 0 {
             && *(_DWORD *)(a2[15] + 8 * ((int)v15 >> 1) + 4) < v8)
      }
      {
        v13 += *(void *)(*((void *)this + 3) + 8 * v12);
      }
      if (v14 == *(_DWORD *)(*((void *)this + 6) + 4 * (v12 + 1))) {
        ++v12;
      }
      ++v10;
      ++v14;
    }
    while (v10 != v9);
  }
  uint64_t v16 = *((void *)this + 12);
  uint64_t v17 = v16 - v13;
  if (v16 < v13)
  {
    int v20 = (int *)a4[12];
    int v19 = (int *)a4[13];
    if (v20 != v19)
    {
      uint64_t v21 = *a4;
      unint64_t v22 = (char *)v19 - (char *)v20 - 4;
      int v23 = (int *)a4[12];
      if (v22 < 4) {
        goto LABEL_74;
      }
      uint64_t v24 = (v22 >> 2) + 1;
      int v23 = &v20[v24 & 0x7FFFFFFFFFFFFFFELL];
      int v25 = v20 + 1;
      uint64_t v26 = v24 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v27 = *v25;
        v21[*(v25 - 1)] = 0;
        v21[v27] = 0;
        v25 += 2;
        v26 -= 2;
      }
      while (v26);
      if (v24 != (v24 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_74:
        do
        {
          uint64_t v28 = *v23++;
          v21[v28] = 0;
        }
        while (v23 != v19);
      }
    }
    bzero(a4[6], (unsigned char *)a4[7] - (unsigned char *)a4[6]);
    a4[13] = a4[12];
    a4[3] = 0;
    a4[4] = 0;
    operations_research::sat::UpperBoundedLinearConstraint::AddToConflict(this, (operations_research::sat::MutableUpperBoundedLinearConstraint *)a4);
    *a5 = *((void *)this + 12) - v13;
    return;
  }
  uint64_t v53 = v16 - v13;
  v55[0] = 0;
  if (v16 - v13 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v53, (int)v55, "slack >= 0");
  }
  uint64_t v30 = *((void *)*a4 + a3);
  if (v30 >= 0) {
    uint64_t v31 = *((void *)*a4 + a3);
  }
  else {
    uint64_t v31 = -v30;
  }
  uint64_t v52 = v31;
  if (v31 >= v11) {
    uint64_t v32 = v11;
  }
  else {
    uint64_t v32 = v31;
  }
  uint64_t v33 = *a5;
  if (*a5 >= v31) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)a5, (int)&v52, "*conflict_slack < conflict_var_coeff");
  }
  if (v17 >= v11) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v53, (int)&v54, "slack < var_coeff");
  }
  uint64_t v34 = v33 + v17 - v32;
  if (v34 < 0) {
    goto LABEL_69;
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v35 = v54 <= v52 ? v52 : v54;
  if (v33 + v17 >= v35)
  {
    int v37 = v8;
    uint64_t v36 = *a5;
    uint64_t v50 = v36;
    uint64_t v51 = v53;
    v55[0] = 0;
    if (v36 < 0) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v50, (int)v55, "conflict_diff >= 0");
    }
  }
  else
  {
    uint64_t v36 = v34 + 1;
    int v37 = v8;
    if (v54 >= v52)
    {
      uint64_t v51 = v36;
      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v50 = v36;
    }
  }
  if (v36 > *a5) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v50, (int)a5, "conflict_diff <= *conflict_slack");
  }
  if (v36 > 0)
  {
    operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceSlackTo((unint64_t)a4, a2, v37, *a5, *a5 - v36);
    uint64_t v5 = (operations_research::sat::MutableUpperBoundedLinearConstraint *)a4;
    *a5 -= v50;
  }
  v55[0] = 0;
  uint64_t v39 = v51;
  if (v51 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v51, (int)v55, "diff >= 0");
  }
  if (v51 > v53) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v51, (int)&v53, "diff <= slack");
  }
  if (!v51)
  {
LABEL_69:
    operations_research::sat::UpperBoundedLinearConstraint::AddToConflict(this, v5);
    return;
  }
  uint64_t v40 = (int *)*((void *)this + 9);
  uint64_t v41 = (int *)*((void *)this + 10);
  if (v40 == v41) {
    goto LABEL_61;
  }
  int v42 = 0;
  int v43 = 1;
  do
  {
    int v45 = *v40;
    if ((*(void *)(a2[3] + (((unint64_t)*v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v40))
    {
      uint64_t v46 = *((void *)this + 3);
      if (*(_DWORD *)(a2[15] + 8 * (v45 >> 1) + 4) < v37)
      {
        uint64_t v44 = *(void *)(v46 + 8 * v42);
LABEL_50:
        operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)v5, v45, v44);
        uint64_t v5 = (operations_research::sat::MutableUpperBoundedLinearConstraint *)a4;
        goto LABEL_51;
      }
      uint64_t v44 = *(void *)(v46 + 8 * v42) - v51;
      if (v44 >= 1) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v44 = *(void *)(*((void *)this + 3) + 8 * v42) - v51;
      if (v44 >= 1) {
        goto LABEL_50;
      }
    }
LABEL_51:
    if (v43 == *(_DWORD *)(*((void *)this + 6) + 4 * (v42 + 1))) {
      ++v42;
    }
    ++v40;
    ++v43;
  }
  while (v40 != v41);
  uint64_t v39 = v51;
LABEL_61:
  uint64_t v47 = *((void *)this + 12);
  v55[0] = 0;
  uint64_t v48 = v47 - v39;
  uint64_t v57 = v48;
  if (v48 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v57, (int)v55, "value >= 0");
  }
  *((void *)v5 + 3) += v48;
}

void sub_23CD3C02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3C034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3C03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3C044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3C04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3C054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3C05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3C064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3C06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PbConstraints::AddConstraint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (*(void *)(a1 + 40) == *(void *)(a1 + 48))
  {
    unint64_t v6 = (int)((uint64_t)(*(void *)(a4 + 80) - *(void *)(a4 + 72)) >> 1) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v9 = *(void *)(a1 + 88);
    uint64_t v8 = *(void *)(a1 + 96);
    uint64_t v7 = a1 + 88;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
    if (v6 <= v10)
    {
      if (v6 < v10)
      {
        uint64_t v11 = v9 + 24 * (int)v6;
        if (v8 != v11)
        {
          uint64_t v12 = *(void *)(a1 + 96);
          do
          {
            int v14 = *(void **)(v12 - 24);
            v12 -= 24;
            uint64_t v13 = v14;
            if (v14)
            {
              *(void *)(v8 - 16) = v13;
              operator delete(v13);
            }
            uint64_t v8 = v12;
          }
          while (v12 != v11);
        }
        *(void *)(a1 + 96) = v11;
        uint64_t v4 = a4;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v7, v6 - v10);
    }
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a1 + 32);
    unint64_t v15 = (int)((uint64_t)(*(void *)(v4 + 80) - *(void *)(v4 + 72)) >> 2);
    uint64_t v16 = *(void *)(a1 + 272);
    unint64_t v17 = (*(void *)(a1 + 280) - v16) >> 4;
    if (v15 <= v17)
    {
      if (v15 < v17) {
        *(void *)(a1 + 280) = v16 + 16 * v15;
      }
    }
    else
    {
      std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)(a1 + 272), v15 - v17);
    }
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v4 + 12);
  }
  operator new();
}

void sub_23CD3C89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CD3C8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CD3C8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CD3C8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CD3C8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CD3C908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CD3C91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CD3C930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CD3C944(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1030C40B4F52BC7);
  _Unwind_Resume(a1);
}

void sub_23CD3C968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CD3C97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::emplace_back<operations_research::sat::UpperBoundedLinearConstraint*>(void *a1, void *a2)
{
  unint64_t v4 = a1[2];
  uint64_t v5 = (char *)a1[1];
  unint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = (uint64_t)&v5[-*a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((uint64_t)(v4 - (void)v8) >> 2 > v11) {
      unint64_t v11 = (uint64_t)(v4 - (void)v8) >> 2;
    }
    if (v4 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v31 = a1 + 2;
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v10];
    *(void *)int v14 = *a2;
    unint64_t v15 = &v13[8 * v12];
    v29.i64[1] = (uint64_t)(v14 + 8);
    uint64_t v30 = v15;
    uint64_t v16 = (char *)(v5 - v8);
    if (v5 == v8)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v5);
      uint64_t v7 = v14 + 8;
    }
    else
    {
      unint64_t v17 = v16 - 8;
      if ((unint64_t)(v16 - 8) < 0x78
        || &v5[-((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v14
        && &v13[v9 - ((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_29;
      }
      uint64_t v18 = ((unint64_t)v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v19;
      unint64_t v6 = &v5[-v19];
      int v20 = v5 - 16;
      uint64_t v21 = &v13[8 * v10 - 16];
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *((_OWORD *)v20 - 1);
        long long v23 = *(_OWORD *)v20;
        *((_OWORD *)v20 - 1) = 0uLL;
        *(_OWORD *)int v20 = 0uLL;
        *((_OWORD *)v21 - 1) = v24;
        *(_OWORD *)uint64_t v21 = v23;
        v20 -= 32;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *(void *)unint64_t v6 = 0;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v8);
      }
      int64x2_t v26 = *(int64x2_t *)a1;
      unint64_t v4 = a1[2];
      uint64_t v7 = (void *)v29.i64[1];
      unint64_t v15 = v30;
    }
    *a1 = v14;
    a1[1] = v7;
    int64x2_t v29 = v26;
    a1[2] = v15;
    uint64_t v30 = (char *)v4;
    uint64_t v28 = v26.i64[0];
    std::__split_buffer<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(void *)uint64_t v5 = *a2;
    uint64_t v7 = v5 + 8;
  }
  a1[1] = v7;
  return v7 - 1;
}

void *std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    unint64_t v4 = (void *)v2[6];
    if (v4)
    {
      v2[7] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v2[3];
    if (v5)
    {
      v2[4] = v5;
      operator delete(v5);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1030C40B4F52BC7);
  }
  return a1;
}

void operations_research::sat::PbConstraints::AddLearnedConstraint(operations_research::sat::PbConstraints *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void operations_research::sat::PbConstraints::DeleteSomeLearnedConstraintIfNeeded(operations_research::sat::PbConstraints *this)
{
  uint64_t v1 = this;
  int v2 = *((_DWORD *)this + 76);
  if (!v2)
  {
    uint64_t v28 = (*((void *)this + 6) - *((void *)this + 5)) >> 3;
    uint64_t v29 = *((void *)this + 40);
    int v30 = *(_DWORD *)(v29 + 308) + v28;
    *((_DWORD *)this + 75) = v30;
    *((_DWORD *)this + 76) = (int)((double)v30 / *(double *)(v29 + 312)) - v28;
    return;
  }
  BOOL v3 = __OFSUB__(v2, 1);
  int v4 = v2 - 1;
  *((_DWORD *)this + 76) = v4;
  if ((v4 < 0) ^ v3 | (v4 == 0))
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v6 = *((void *)this + 5);
    uint64_t v5 = *((void *)this + 6);
    if (v5 == v6)
    {
LABEL_38:
      std::__sort<std::__less<double,double> &,double *>();
      int v31 = ((*((void *)v1 + 6) - *((void *)v1 + 5)) >> 3) - *((_DWORD *)v1 + 75);
      int v50 = v31;
      int v54 = 0;
      if (v31 < 1) {
        google::MakeCheckOpString<int,int>((int)&v50, (int)&v54, "num_constraints_to_delete > 0");
      }
      uint64_t v32 = v51;
      if (v31 >= (unint64_t)((v52 - (uint64_t)v51) >> 3))
      {
        int v42 = (uint64_t *)*((void *)v1 + 5);
        uint64_t v43 = *((void *)v1 + 6) - (void)v42;
        if (v43)
        {
          unint64_t v44 = v43 >> 3;
          if (v44 <= 1) {
            unint64_t v44 = 1;
          }
          do
          {
            uint64_t v45 = *v42;
            if (*(unsigned char *)(*v42 + 1) && *(_DWORD *)(v45 + 4) == -1) {
              *(unsigned char *)uint64_t v45 = 1;
            }
            ++v42;
            --v44;
          }
          while (v44);
        }
      }
      else
      {
        double v33 = *(double *)&v51[v31];
        int v34 = 0;
        if ((v31 & 0x80000000) == 0)
        {
          uint64_t v35 = (double *)&v51[v31];
          while (*v35 == v33)
          {
            ++v34;
            --v35;
            if (v31 + 1 == v34)
            {
              int v34 = v31 + 1;
              break;
            }
          }
        }
        uint64_t v36 = *((void *)v1 + 5);
        unint64_t v37 = (unint64_t)(*((void *)v1 + 6) - v36) >> 3;
        if ((int)v37 - 1 >= 0)
        {
          int v38 = (uint64_t *)(v36 + 8 * (v37 - 1));
          do
          {
            uint64_t v39 = *v38;
            if (*(unsigned char *)(*v38 + 1))
            {
              if (*(_DWORD *)(v39 + 4) == -1)
              {
                double v40 = *(double *)(v39 + 8);
                if (v40 <= v33)
                {
                  if (v40 != v33 || v34 < 1) {
                    *(unsigned char *)uint64_t v39 = 1;
                  }
                  else {
                    --v34;
                  }
                }
              }
            }
            --v38;
            LODWORD(v37) = v37 - 1;
          }
          while (v37);
        }
      }
      operations_research::sat::PbConstraints::DeleteConstraintMarkedForDeletion(v1);
      uint64_t v46 = (*((void *)v1 + 6) - *((void *)v1 + 5)) >> 3;
      uint64_t v47 = *((void *)v1 + 40);
      int v48 = *(_DWORD *)(v47 + 308) + v46;
      *((_DWORD *)v1 + 75) = v48;
      *((_DWORD *)v1 + 76) = (int)((double)v48 / *(double *)(v47 + 312)) - v46;
      if (v32) {
        operator delete(v32);
      }
      return;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v12 = *(void *)(v6 + 8 * v8);
      if (!*(unsigned char *)(v12 + 1) || *(_DWORD *)(v12 + 4) != -1) {
        goto LABEL_8;
      }
      uint64_t v13 = *(void *)(v12 + 8);
      if (v7 >= v9) {
        break;
      }
      *(void *)uint64_t v7 = v13;
      uint64_t v11 = (uint64_t)(v7 + 8);
LABEL_7:
      uint64_t v52 = v11;
      uint64_t v7 = (char *)v11;
LABEL_8:
      if (++v8 >= (unint64_t)((v5 - v6) >> 3)) {
        goto LABEL_38;
      }
    }
    uint64_t v14 = (v7 - v10) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v9 - v10) >> 2 > v15) {
      unint64_t v15 = (v9 - v10) >> 2;
    }
    if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      uint64_t v18 = &v17[8 * v14];
      *uint64_t v18 = v13;
      uint64_t v11 = (uint64_t)(v18 + 1);
      if (v7 != v10)
      {
LABEL_21:
        unint64_t v19 = v7 - 8 - v10;
        if (v19 < 0x168
          || &v17[v7 - v10 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v17[v7 - v10 - 8]
          || &v7[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8
          || (unint64_t)(v10 - v17) < 0x20)
        {
          int v20 = v7;
          uint64_t v1 = this;
        }
        else
        {
          uint64_t v22 = (v19 >> 3) + 1;
          uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          int v20 = &v7[-v23];
          uint64_t v18 = (void *)((char *)v18 - v23);
          long long v24 = &v17[8 * v14 - 16];
          uint64_t v25 = v7 - 16;
          uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *long long v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          uint64_t v1 = this;
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_24:
            uint64_t v9 = &v17[8 * v16];
            uint64_t v51 = v18;
            uint64_t v53 = v9;
            if (!v10)
            {
LABEL_26:
              uint64_t v10 = (char *)v18;
              goto LABEL_7;
            }
LABEL_25:
            operator delete(v10);
            uint64_t v6 = *((void *)v1 + 5);
            uint64_t v5 = *((void *)v1 + 6);
            goto LABEL_26;
          }
        }
        do
        {
          uint64_t v21 = *((void *)v20 - 1);
          v20 -= 8;
          *--uint64_t v18 = v21;
        }
        while (v20 != v10);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v18 = (void *)(8 * v14);
      *(void *)(8 * v14) = v13;
      uint64_t v11 = 8 * v14 + 8;
      if (v7 != v10) {
        goto LABEL_21;
      }
    }
    uint64_t v1 = this;
    uint64_t v9 = &v17[8 * v16];
    uint64_t v51 = v18;
    uint64_t v53 = v9;
    if (!v10) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
}

void sub_23CD3D094(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD3D09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::PbConstraints::PropagateNext(operations_research::sat::PbConstraints *this, operations_research::sat::Trail *a2)
{
  uint64_t v2 = *((int *)this + 9);
  int v3 = *(_DWORD *)(*((void *)a2 + 9) + 4 * v2);
  *((_DWORD *)this + 9) = v2 + 1;
  int v4 = (uint64_t *)(*((void *)this + 11) + 24 * v3);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  *((void *)this + 53) += 0x4EC4EC4EC4EC4EC5 * (v5 - *v4);
  if (v5 == v6)
  {
    char v9 = 0;
  }
  else
  {
    char v9 = 0;
    uint64_t v10 = (char *)this + 240;
    do
    {
      uint64_t v11 = *(int *)(v6 + 1);
      uint64_t v12 = (uint64_t *)(*((void *)this + 8) + 8 * v11);
      uint64_t v13 = *(void *)(v6 + 5);
      BOOL v14 = *v12 - v13 < 0;
      *v12 -= v13;
      if (v14 && (v9 & 1) == 0)
      {
        uint64_t v15 = *(void *)(*((void *)this + 5) + 8 * v11);
        *(unsigned char *)uint64_t v6 = 1;
        ++*((void *)this + 51);
        uint64_t v16 = *(int *)(v15 + 20);
        char v17 = operations_research::sat::UpperBoundedLinearConstraint::Propagate(v15, v2, v12, (uint64_t)a2, (uint64_t)v10);
        if ((v17 & 1) == 0)
        {
          *((void *)a2 + 18) = 0;
          uint64_t v18 = *((void *)a2 + 12);
          *((void *)a2 + 12) = *((void *)this + 31);
          *((void *)this + 31) = v18;
          uint64_t v19 = *((void *)a2 + 13);
          *((void *)a2 + 13) = *((void *)this + 32);
          *((void *)this + 32) = v19;
          uint64_t v20 = *((void *)a2 + 14);
          *((void *)a2 + 14) = *((void *)this + 33);
          *((void *)this + 33) = v20;
          *((_DWORD *)this + 74) = *(_DWORD *)(v6 + 1);
          uint64_t v21 = (uint64_t *)*((void *)this + 5);
          uint64_t v22 = v21[*(int *)(v6 + 1)];
          if (*(unsigned char *)(v22 + 1))
          {
            double v23 = *(double *)(*((void *)this + 40) + 240);
            double v24 = *((double *)this + 39);
            double v25 = *(double *)(v22 + 8) + v24;
            *(double *)(v22 + 8) = v25;
            if (v25 > v23)
            {
              double v26 = 1.0 / v23;
              *((double *)this + 39) = v26 * v24;
              uint64_t v27 = *((void *)this + 6) - (void)v21;
              if (v27)
              {
                unint64_t v28 = v27 >> 3;
                if (v28 <= 1) {
                  unint64_t v28 = 1;
                }
                do
                {
                  uint64_t v29 = *v21++;
                  *(double *)(v29 + 8) = v26 * *(double *)(v29 + 8);
                  --v28;
                }
                while (v28);
              }
            }
          }
        }
        char v9 = v17 ^ 1;
        *((void *)this + 52) += v16 - *(int *)(v15 + 20);
      }
      v6 += 13;
    }
    while (v6 != v5);
  }
  return (v9 & 1) == 0;
}

uint64_t operations_research::sat::PbConstraints::BumpActivity(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1))
  {
    double v2 = *(double *)(*(void *)(result + 320) + 240);
    double v3 = *(double *)(result + 312);
    double v4 = *(double *)(a2 + 8) + v3;
    *(double *)(a2 + 8) = v4;
    if (v4 > v2)
    {
      double v5 = 1.0 / v2;
      *(double *)(result + 312) = v5 * v3;
      uint64_t v6 = *(uint64_t **)(result + 40);
      uint64_t v7 = *(void *)(result + 48) - (void)v6;
      if (v7)
      {
        unint64_t v8 = v7 >> 3;
        if (v8 <= 1) {
          unint64_t v8 = 1;
        }
        do
        {
          uint64_t v9 = *v6++;
          *(double *)(v9 + 8) = v5 * *(double *)(v9 + 8);
          --v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

uint64_t operations_research::sat::PbConstraints::Propagate(operations_research::sat::PbConstraints *this, operations_research::sat::Trail *a2)
{
  int v4 = *((_DWORD *)a2 + 3);
  while (*((_DWORD *)a2 + 3) == v4 && *((_DWORD *)this + 9) < v4)
  {
    if (!operations_research::sat::PbConstraints::PropagateNext(this, a2)) {
      return 0;
    }
  }
  return 1;
}

void operations_research::sat::PbConstraints::Untrail(operations_research::sat::PbConstraints *this, const operations_research::sat::Trail *a2, int a3)
{
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 112, (*((void *)this + 6) - *((void *)this + 5)) >> 3);
  int v5 = *((_DWORD *)this + 9);
  if (v5 > a3)
  {
    int v50 = (void **)((char *)this + 168);
    int v48 = a3;
    while (1)
    {
      *((_DWORD *)this + 9) = --v5;
      uint64_t v6 = (uint64_t *)(*((void *)this + 11) + 24 * *(int *)(*((void *)a2 + 9) + 4 * v5));
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      if (*v6 != v7) {
        break;
      }
LABEL_4:
      if (v5 <= a3) {
        goto LABEL_33;
      }
    }
    while (1)
    {
      int v10 = *(_DWORD *)(v8 + 1);
      *(void *)(*((void *)this + 8) + 8 * v10) += *(void *)(v8 + 5);
      if (!*(unsigned char *)v8) {
        goto LABEL_9;
      }
      *(unsigned char *)uint64_t v8 = 0;
      unint64_t v11 = (unint64_t)v10 >> 6;
      uint64_t v12 = *((void *)this + 15);
      uint64_t v13 = *(void *)(v12 + 8 * v11);
      if ((v13 & (1 << v10)) != 0) {
        goto LABEL_9;
      }
      *(void *)(v12 + 8 * v11) = v13 | (1 << v10);
      uint64_t v15 = (char *)*((void *)this + 22);
      unint64_t v14 = *((void *)this + 23);
      if ((unint64_t)v15 >= v14) {
        break;
      }
      *(_DWORD *)uint64_t v15 = v10;
      uint64_t v9 = (uint64_t)(v15 + 4);
LABEL_8:
      *((void *)this + 22) = v9;
LABEL_9:
      v8 += 13;
      if (v8 == v7)
      {
        int v5 = *((_DWORD *)this + 9);
        a3 = v48;
        goto LABEL_4;
      }
    }
    uint64_t v16 = (char *)*v50;
    uint64_t v17 = v15 - (unsigned char *)*v50;
    uint64_t v18 = v17 >> 2;
    unint64_t v19 = (v17 >> 2) + 1;
    if (v19 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v14 - (void)v16;
    if (v20 >> 1 > v19) {
      unint64_t v19 = v20 >> 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = operator new(4 * v21);
      double v23 = &v22[4 * v18];
      *double v23 = v10;
      uint64_t v9 = (uint64_t)(v23 + 1);
      if (v15 == v16) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v22 = 0;
      double v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v18) = v10;
      uint64_t v9 = 4 * v18 + 4;
      if (v15 == v16)
      {
LABEL_30:
        *((void *)this + 21) = v23;
        *((void *)this + 22) = v9;
        *((void *)this + 23) = &v22[4 * v21];
        if (v16) {
          operator delete(v16);
        }
        goto LABEL_8;
      }
    }
    unint64_t v24 = v15 - 4 - v16;
    if (v24 < 0x2C) {
      goto LABEL_55;
    }
    if ((unint64_t)(v15 - &v22[v17]) < 0x20) {
      goto LABEL_55;
    }
    uint64_t v25 = (v24 >> 2) + 1;
    uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v27 = &v15[-v26];
    double v23 = (_DWORD *)((char *)v23 - v26);
    unint64_t v28 = &v22[4 * v18 - 16];
    uint64_t v29 = v15 - 16;
    uint64_t v30 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *unint64_t v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 8;
    }
    while (v30);
    uint64_t v15 = v27;
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_55:
      do
      {
        int v32 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--double v23 = v32;
      }
      while (v15 != v16);
    }
    goto LABEL_30;
  }
LABEL_33:
  double v33 = (int *)*((void *)this + 21);
  int v34 = (int *)*((void *)this + 22);
  if (v33 != v34)
  {
    uint64_t v35 = *((void *)this + 5);
    uint64_t v36 = *((void *)this + 8);
    do
    {
      uint64_t v37 = *v33;
      uint64_t v38 = *(void *)(v35 + 8 * v37);
      uint64_t v39 = *(void *)(v36 + 8 * v37);
      uint64_t v40 = *(unsigned int *)(v38 + 16);
      uint64_t v41 = *(void *)(v38 + 24);
      if ((v40 & 0x80000000) == 0) {
        v39 += *(void *)(v41 + 8 * v40);
      }
      uint64_t v42 = *(void *)(v38 + 32) - v41;
      uint64_t v43 = v42 >> 3;
      unint64_t v44 = (int)v40 + 1;
      if (v42 >> 3 > v44 && *(void *)(v41 + 8 * v44) <= v39)
      {
        int v45 = ((unint64_t)v42 >> 3) - 1;
        while (v43 - 1 != v44)
        {
          unint64_t v46 = v44 + 1;
          uint64_t v47 = *(void *)(v41 + 8 + 8 * v44);
          LODWORD(v40) = v40 + 1;
          ++v44;
          if (v47 > v39) {
            goto LABEL_45;
          }
        }
        LODWORD(v40) = v45;
        unint64_t v46 = v43;
LABEL_45:
        *(_DWORD *)(v38 + 16) = v40;
        unint64_t v44 = v46;
      }
      if ((v40 & 0x80000000) == 0) {
        v39 -= *(void *)(v41 + 8 * v40);
      }
      *(void *)(v36 + 8 * v37) = v39;
      *(_DWORD *)(v38 + 20) = *(_DWORD *)(*(void *)(v38 + 48) + 4 * v44);
      if (*(_DWORD *)(v38 + 4) >= a3) {
        *(_DWORD *)(v38 + 4) = -1;
      }
      ++v33;
    }
    while (v33 != v34);
  }
}

char *operations_research::sat::PbConstraints::Reason(operations_research::sat::PbConstraints *this, const operations_research::sat::Trail *a2, int a3)
{
  uint64_t v5 = *((void *)this + 34) + 16 * a3;
  EmptyVectorToStoreReason = (char **)operations_research::sat::Trail::GetEmptyVectorToStoreReason(a2, a3);
  operations_research::sat::UpperBoundedLinearConstraint::FillReason(*(void **)(v5 + 8), a2, *(_DWORD *)v5, *(int *)(*((void *)a2 + 9) + 4 * a3) >> 1, EmptyVectorToStoreReason);
  return *EmptyVectorToStoreReason;
}

uint64_t operations_research::sat::PbConstraints::ReasonPbConstraint(operations_research::sat::PbConstraints *this, int a2)
{
  return *(void *)(*((void *)this + 34) + 16 * a2 + 8);
}

void operations_research::sat::PbConstraints::DeleteConstraintMarkedForDeletion(operations_research::sat::PbConstraints *this)
{
  uint64_t v4 = *((void *)this + 5);
  uint64_t v2 = *((void *)this + 6);
  double v3 = (char *)this + 40;
  uint64_t v51 = 0;
  unint64_t v5 = v2 - v4;
  if (v2 == v4)
  {
    uint64_t v6 = 0;
    int v50 = (void *)((char *)this + 40);
    if ((int)(v5 >> 3) >= 1) {
      goto LABEL_4;
    }
LABEL_34:
    int v8 = 0;
    goto LABEL_35;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = operator new(v5 >> 1);
  uint64_t v51 = v6;
  memset(v6, 255, 4 * ((uint64_t)v5 >> 3));
  int v50 = v3;
  if ((int)(v5 >> 3) < 1) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v7 = 0;
  int v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(v4 + 8 * v7);
    if (*(unsigned char *)v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(v9 + 104);
      unint64_t v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v11)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v11));
      unint64_t v13 = *((void *)this + 24);
      unint64_t v14 = (v12 >> 7) ^ (v13 >> 12);
      uint64_t v15 = *((void *)this + 27);
      while (1)
      {
        unint64_t v16 = v14 & v15;
        uint64_t v17 = *(void *)(v13 + v16);
        unint64_t v18 = ((v17 ^ (0x101010101010101 * (v12 & 0x7F))) - 0x101010101010101) & ~(v17 ^ (0x101010101010101
                                                                                            * (v12 & 0x7F))) & 0x8080808080808080;
        if (v18) {
          break;
        }
LABEL_15:
        if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v20 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::prepare_insert((uint64_t *)this + 24, v12);
          uint64_t v25 = (void *)(*((void *)this + 25) + 32 * v20);
          *uint64_t v25 = v11;
          v25[1] = 0;
          v25[2] = 0;
          void v25[3] = 0;
          uint64_t v19 = *((void *)this + 25);
          goto LABEL_26;
        }
        v10 += 8;
        unint64_t v14 = v10 + v16;
      }
      uint64_t v19 = *((void *)this + 25);
      while (1)
      {
        unint64_t v20 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v15;
        if (*(void *)(v19 + 32 * v20) == v11) {
          break;
        }
        v18 &= v18 - 1;
        if (!v18) {
          goto LABEL_15;
        }
      }
LABEL_26:
      uint64_t v26 = v19 + 32 * v20;
      uint64_t v29 = *(char **)(v26 + 16);
      uint64_t v27 = (void *)(v26 + 16);
      unint64_t v28 = v29;
      uint64_t v30 = (char *)*(v27 - 1);
      uint64_t v31 = v29 - v30;
      if (v29 != v30)
      {
        unint64_t v32 = v31 >> 3;
        if (v32 <= 1) {
          unint64_t v32 = 1;
        }
        while (*(void *)v30 != v9)
        {
          v30 += 8;
          if (!--v32) {
            goto LABEL_8;
          }
        }
        *(void *)uint64_t v30 = *((void *)v28 - 1);
        *((void *)v28 - 1) = v9;
        *v27 -= 8;
      }
    }
    else
    {
      v6[v7] = v8;
      if (v7 > v8)
      {
        *(void *)(v4 + 8 * v7) = 0;
        unint64_t v21 = *(void **)(v4 + 8 * v8);
        *(void *)(v4 + 8 * v8) = v9;
        if (v21)
        {
          uint64_t v22 = (void *)v21[9];
          if (v22)
          {
            v21[10] = v22;
            operator delete(v22);
          }
          double v23 = (void *)v21[6];
          if (v23)
          {
            v21[7] = v23;
            operator delete(v23);
          }
          unint64_t v24 = (void *)v21[3];
          if (v24)
          {
            v21[4] = v24;
            operator delete(v24);
          }
          MEMORY[0x23ECF2BC0](v21, 0x1030C40B4F52BC7);
        }
        *(void *)(*((void *)this + 8) + 8 * v8) = *(void *)(*((void *)this + 8) + 8 * v7);
      }
      ++v8;
    }
LABEL_8:
    ++v7;
    uint64_t v4 = *((void *)this + 5);
  }
  while (v7 < (int)((unint64_t)(*((void *)this + 6) - v4) >> 3));
LABEL_35:
  std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::resize(v50, v8);
  uint64_t v33 = *((void *)this + 8);
  unint64_t v34 = (*((void *)this + 9) - v33) >> 3;
  if (v8 <= v34)
  {
    if (v8 < v34) {
      *((void *)this + 9) = v33 + 8 * v8;
    }
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)this + 64, v8 - v34);
  }
  uint64_t v35 = *((void *)this + 11);
  if ((int)(-1431655765 * ((unint64_t)(*((void *)this + 12) - v35) >> 3)) >= 1)
  {
    uint64_t v36 = 0;
    while (1)
    {
      uint64_t v37 = (char **)(v35 + 24 * v36);
      uint64_t v38 = v37 + 1;
      uint64_t v39 = v37[1];
      uint64_t v40 = *v37;
      if (v39 == *v37) {
        break;
      }
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      int v43 = 0;
      do
      {
        int v45 = &v40[v41];
        int v46 = v51[*(int *)&v40[v41 + 1]];
        if (v46 != -1)
        {
          uint64_t v47 = &v40[13 * v43];
          uint64_t v48 = *(void *)v45;
          *(void *)(v47 + 5) = *(void *)(v45 + 5);
          *(void *)uint64_t v47 = v48;
          uint64_t v40 = *v37;
          *(_DWORD *)&(*v37)[13 * v43++ + 1] = v46;
          uint64_t v39 = *v38;
        }
        ++v42;
        unint64_t v44 = 0x4EC4EC4EC4EC4EC5 * (v39 - v40);
        v41 += 13;
      }
      while (v44 > v42);
      uint64_t v39 = v40;
      BOOL v49 = v43 >= v44;
      if (v43 <= v44) {
        goto LABEL_51;
      }
      std::vector<operations_research::sat::PbConstraints::ConstraintIndexWithCoeff>::__append((void **)v37, v43 - v44);
LABEL_42:
      ++v36;
      uint64_t v35 = *((void *)this + 11);
      if (v36 >= (int)(-1431655765 * ((unint64_t)(*((void *)this + 12) - v35) >> 3)))
      {
        uint64_t v6 = v51;
        goto LABEL_54;
      }
    }
    int v43 = 0;
    BOOL v49 = 0x4EC4EC4EC4EC4EC5 * (v39 - *v37) == 0;
LABEL_51:
    if (!v49) {
      *uint64_t v38 = &v39[13 * v43];
    }
    goto LABEL_42;
  }
LABEL_54:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_23CD3DB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

double operations_research::sat::PbConstraints::UpdateActivityIncrement(operations_research::sat::PbConstraints *this)
{
  double result = *((double *)this + 39) * (1.0 / *(double *)(*((void *)this + 40) + 232));
  *((double *)this + 39) = result;
  return result;
}

void std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::resize(void *a1, unint64_t a2)
{
  double v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 8 * a2;
    while (v3 != (void *)v7)
    {
      uint64_t v9 = (void *)*--v3;
      int v8 = v9;
      void *v3 = 0;
      if (v9)
      {
        uint64_t v10 = (void *)v8[9];
        if (v10)
        {
          v8[10] = v10;
          operator delete(v10);
        }
        uint64_t v11 = (void *)v8[6];
        if (v11)
        {
          v8[7] = v11;
          operator delete(v11);
        }
        unint64_t v12 = (void *)v8[3];
        if (v12)
        {
          v8[4] = v12;
          operator delete(v12);
        }
        MEMORY[0x23ECF2BC0](v8, 0x1030C40B4F52BC7);
      }
    }
    a1[1] = v7;
  }
}

void operations_research::sat::PbConstraints::~PbConstraints(operations_research::sat::PbConstraints *this)
{
  operations_research::sat::PbConstraints::~PbConstraints(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;

  *(void *)this = &unk_26F0C4498;
  operations_research::StatsGroup::~StatsGroup((operations_research::sat::PbConstraints *)((char *)this + 328));
  uint64_t v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }
  double v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    *((void *)this + 32) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    BOOL v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = (void *)((char *)this + 200);
    do
    {
      if ((*(char *)(*((void *)this + 24) + v6) & 0x80000000) == 0)
      {
        int v8 = *v7 + v5;
        uint64_t v9 = *(void **)(v8 + 8);
        if (v9)
        {
          *(void *)(v8 + 16) = v9;
          operator delete(v9);
          unint64_t v4 = *((void *)this + 27);
        }
      }
      ++v6;
      v5 += 32;
    }
    while (v6 != v4);
    operator delete(*((void **)this + 24));
    *((void *)this + 24) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 29) = 0;
    *((void *)this + 26) = 0;
    *((void *)this + 27) = 0;
    *uint64_t v7 = 0;
  }
  uint64_t v10 = (void *)*((void *)this + 28);
  if (v10) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 21);
  if (v11)
  {
    *((void *)this + 22) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 15);
  if (v12)
  {
    *((void *)this + 16) = v12;
    operator delete(v12);
  }
  unint64_t v13 = *((void *)this + 11);
  if (v13)
  {
    unint64_t v14 = *((void *)this + 12);
    uint64_t v15 = (void *)*((void *)this + 11);
    if (v14 != v13)
    {
      unint64_t v16 = *((void *)this + 12);
      do
      {
        unint64_t v18 = *(void **)(v16 - 24);
        v16 -= 24;
        uint64_t v17 = v18;
        if (v18)
        {
          *(void *)(v14 - 16) = v17;
          operator delete(v17);
        }
        unint64_t v14 = v16;
      }
      while (v16 != v13);
      uint64_t v15 = (void *)*((void *)this + 11);
    }
    *((void *)this + 12) = v13;
    operator delete(v15);
  }
  uint64_t v19 = (void *)*((void *)this + 8);
  if (v19)
  {
    *((void *)this + 9) = v19;
    operator delete(v19);
  }
  unint64_t v20 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__destroy_vector::operator()[abi:ne180100](&v20);
  *(void *)this = &unk_26F0BD580;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (void *)*--v4;
        unint64_t v6 = v7;
        *unint64_t v4 = 0;
        if (v7)
        {
          int v8 = (void *)v6[9];
          if (v8)
          {
            v6[10] = v8;
            operator delete(v8);
          }
          uint64_t v9 = (void *)v6[6];
          if (v9)
          {
            v6[7] = v9;
            operator delete(v9);
          }
          uint64_t v10 = (void *)v6[3];
          if (v10)
          {
            void v6[4] = v10;
            operator delete(v10);
          }
          MEMORY[0x23ECF2BC0](v6, 0x1030C40B4F52BC7);
        }
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>(uint64_t result, uint64_t *a2, unsigned int (**a3)(uint64_t, char *), uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  uint64_t v11 = (char *)a2 - 12;
  int v161 = (uint64_t *)((char *)a2 - 36);
  uint64_t v162 = a2 - 3;
  unint64_t v12 = v10;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v13 = (uint64_t)a2 - v12;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 2);
    if (v6 || !v5) {
      break;
    }
    if (v13 <= 287)
    {
      uint64_t v139 = (uint64_t *)(v12 + 12);
      BOOL v141 = (uint64_t *)v12 == a2 || v139 == a2;
      if (a5)
      {
        if (!v141)
        {
          uint64_t v142 = 0;
          unint64_t v143 = v12;
          do
          {
            unint64_t v146 = v143;
            unint64_t v143 = (unint64_t)v139;
            double result = ((uint64_t (*)(uint64_t *, unint64_t))*a3)(v139, v146);
            if (result)
            {
              uint64_t v147 = *(void *)v143;
              int v167 = *(_DWORD *)(v143 + 8);
              uint64_t v166 = v147;
              uint64_t v148 = v142;
              do
              {
                uint64_t v149 = v12 + v148;
                *(void *)(v149 + 12) = *(void *)(v12 + v148);
                *(_DWORD *)(v149 + 20) = *(_DWORD *)(v12 + v148 + 8);
                if (!v148)
                {
                  uint64_t v144 = v12;
                  goto LABEL_121;
                }
                v148 -= 12;
                double result = ((uint64_t (*)(uint64_t *, unint64_t))*a3)(&v166, v148 + v12);
              }
              while ((result & 1) != 0);
              uint64_t v144 = v12 + v148 + 12;
LABEL_121:
              uint64_t v145 = v166;
              *(_DWORD *)(v144 + 8) = v167;
              *(void *)uint64_t v144 = v145;
            }
            uint64_t v139 = (uint64_t *)(v143 + 12);
            v142 += 12;
          }
          while ((uint64_t *)(v143 + 12) != a2);
        }
      }
      else if (!v141)
      {
        unint64_t v154 = v12 - 12;
        do
        {
          unint64_t v155 = v10;
          unint64_t v10 = (unint64_t)v139;
          double result = ((uint64_t (*)(uint64_t *, unint64_t))*a3)(v139, v155);
          if (result)
          {
            uint64_t v156 = *(void *)v10;
            int v167 = *(_DWORD *)(v10 + 8);
            uint64_t v166 = v156;
            unint64_t v157 = v154;
            do
            {
              *(void *)(v157 + 24) = *(void *)(v157 + 12);
              *(_DWORD *)(v157 + 32) = *(_DWORD *)(v157 + 20);
              double result = ((uint64_t (*)(uint64_t *, unint64_t))*a3)(&v166, v157);
              v157 -= 12;
            }
            while ((result & 1) != 0);
            uint64_t v158 = v166;
            *(_DWORD *)(v157 + 32) = v167;
            *(void *)(v157 + 24) = v158;
          }
          uint64_t v139 = (uint64_t *)(v10 + 12);
          v154 += 12;
        }
        while ((uint64_t *)(v10 + 12) != a2);
      }
      return result;
    }
    if (!a4)
    {
      if ((uint64_t *)v12 != a2) {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,operations_research::sat::LiteralWithCoeff*>(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = v12 + 12 * (v14 >> 1);
    uint64_t v17 = *a3;
    if ((unint64_t)v13 >= 0x601)
    {
      char v18 = v17(v12 + 12 * (v14 >> 1), (char *)v12);
      unsigned int v19 = (*a3)((uint64_t)a2 - 12, (char *)v16);
      if (v18)
      {
        if (v19)
        {
          uint64_t v20 = *(void *)v12;
          int v167 = *(_DWORD *)(v12 + 8);
          uint64_t v166 = v20;
          uint64_t v21 = *(void *)v11;
          *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
          *(void *)unint64_t v12 = v21;
        }
        else
        {
          uint64_t v38 = *(void *)v12;
          int v167 = *(_DWORD *)(v12 + 8);
          uint64_t v166 = v38;
          uint64_t v39 = *(void *)v16;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v16 + 8);
          *(void *)unint64_t v12 = v39;
          uint64_t v40 = v166;
          *(_DWORD *)(v16 + 8) = v167;
          *(void *)uint64_t v16 = v40;
          if (!(*a3)((uint64_t)a2 - 12, (char *)v16)) {
            goto LABEL_25;
          }
          uint64_t v41 = *(void *)v16;
          int v167 = *(_DWORD *)(v16 + 8);
          uint64_t v166 = v41;
          uint64_t v42 = *(void *)v11;
          *(_DWORD *)(v16 + 8) = *((_DWORD *)a2 - 1);
          *(void *)uint64_t v16 = v42;
        }
        uint64_t v43 = v166;
        *((_DWORD *)a2 - 1) = v167;
        *(void *)uint64_t v11 = v43;
      }
      else if (v19)
      {
        uint64_t v26 = *(void *)v16;
        int v167 = *(_DWORD *)(v16 + 8);
        uint64_t v166 = v26;
        uint64_t v27 = *(void *)v11;
        *(_DWORD *)(v16 + 8) = *((_DWORD *)a2 - 1);
        *(void *)uint64_t v16 = v27;
        uint64_t v28 = v166;
        *((_DWORD *)a2 - 1) = v167;
        *(void *)uint64_t v11 = v28;
        if ((*a3)(v16, (char *)v12))
        {
          uint64_t v29 = *(void *)v12;
          int v167 = *(_DWORD *)(v12 + 8);
          uint64_t v166 = v29;
          uint64_t v30 = *(void *)v16;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v16 + 8);
          *(void *)unint64_t v12 = v30;
          uint64_t v31 = v166;
          *(_DWORD *)(v16 + 8) = v167;
          *(void *)uint64_t v16 = v31;
        }
      }
LABEL_25:
      unint64_t v44 = (uint64_t *)(v12 + 12);
      uint64_t v45 = v10 + 12 * v15 - 12;
      char v46 = (*a3)(v45, (char *)(v10 + 12));
      unsigned int v47 = (*a3)((uint64_t)v162, (char *)v45);
      if (v46)
      {
        if (v47)
        {
          uint64_t v166 = *v44;
          uint64_t v48 = v166;
          int v167 = *(_DWORD *)(v10 + 20);
          int v49 = v167;
          int v50 = *((_DWORD *)a2 - 4);
          *unint64_t v44 = *v162;
          *(_DWORD *)(v10 + 20) = v50;
          *((_DWORD *)a2 - 4) = v49;
          uint64_t *v162 = v48;
        }
        else
        {
          uint64_t v166 = *v44;
          uint64_t v63 = v166;
          int v167 = *(_DWORD *)(v10 + 20);
          int v64 = v167;
          int v65 = *(_DWORD *)(v10 + 12 * v15 - 4);
          *unint64_t v44 = *(void *)v45;
          *(_DWORD *)(v10 + 20) = v65;
          *(_DWORD *)(v10 + 12 * v15 - 4) = v64;
          *(void *)uint64_t v45 = v63;
          if ((*a3)((uint64_t)v162, (char *)(v10 + 12 * v15 - 12)))
          {
            uint64_t v66 = *(void *)v45;
            int v167 = *(_DWORD *)(v10 + 12 * v15 - 4);
            uint64_t v166 = v66;
            uint64_t v67 = *v162;
            *(_DWORD *)(v10 + 12 * v15 - 4) = *((_DWORD *)a2 - 4);
            *(void *)uint64_t v45 = v67;
            uint64_t v68 = v166;
            *((_DWORD *)a2 - 4) = v167;
            uint64_t *v162 = v68;
          }
        }
      }
      else if (v47)
      {
        uint64_t v51 = *(void *)v45;
        int v167 = *(_DWORD *)(v10 + 12 * v15 - 4);
        uint64_t v166 = v51;
        uint64_t v52 = *v162;
        *(_DWORD *)(v10 + 12 * v15 - 4) = *((_DWORD *)a2 - 4);
        *(void *)uint64_t v45 = v52;
        uint64_t v53 = v166;
        *((_DWORD *)a2 - 4) = v167;
        uint64_t *v162 = v53;
        if ((*a3)(v10 + 12 * v15 - 12, (char *)(v10 + 12)))
        {
          uint64_t v166 = *v44;
          uint64_t v54 = v166;
          int v167 = *(_DWORD *)(v10 + 20);
          int v55 = v167;
          int v56 = *(_DWORD *)(v10 + 12 * v15 - 4);
          *unint64_t v44 = *(void *)v45;
          *(_DWORD *)(v10 + 20) = v56;
          *(_DWORD *)(v10 + 12 * v15 - 4) = v55;
          *(void *)uint64_t v45 = v54;
        }
      }
      unint64_t v69 = (uint64_t *)(v10 + 24);
      uint64_t v70 = v10 + 12 * v15 + 12;
      char v71 = (*a3)(v70, (char *)(v10 + 24));
      unsigned int v72 = (*a3)((uint64_t)v161, (char *)v70);
      if (v71)
      {
        if (v72)
        {
          uint64_t v166 = *v69;
          uint64_t v73 = v166;
          int v167 = *(_DWORD *)(v10 + 32);
          int v74 = v167;
          int v75 = *((_DWORD *)a2 - 7);
          uint64_t *v69 = *v161;
          *(_DWORD *)(v10 + 32) = v75;
          *((_DWORD *)a2 - 7) = v74;
          *int v161 = v73;
        }
        else
        {
          uint64_t v166 = *v69;
          uint64_t v82 = v166;
          int v167 = *(_DWORD *)(v10 + 32);
          int v83 = v167;
          int v84 = *(_DWORD *)(v70 + 8);
          uint64_t *v69 = *(void *)v70;
          *(_DWORD *)(v10 + 32) = v84;
          *(_DWORD *)(v70 + 8) = v83;
          *(void *)uint64_t v70 = v82;
          if ((*a3)((uint64_t)v161, (char *)v70))
          {
            uint64_t v85 = *(void *)v70;
            int v167 = *(_DWORD *)(v70 + 8);
            uint64_t v166 = v85;
            uint64_t v86 = *v161;
            *(_DWORD *)(v70 + 8) = *((_DWORD *)a2 - 7);
            *(void *)uint64_t v70 = v86;
            uint64_t v87 = v166;
            *((_DWORD *)a2 - 7) = v167;
            *int v161 = v87;
          }
        }
      }
      else if (v72)
      {
        uint64_t v76 = *(void *)v70;
        int v167 = *(_DWORD *)(v70 + 8);
        uint64_t v166 = v76;
        uint64_t v77 = *v161;
        *(_DWORD *)(v70 + 8) = *((_DWORD *)a2 - 7);
        *(void *)uint64_t v70 = v77;
        uint64_t v78 = v166;
        *((_DWORD *)a2 - 7) = v167;
        *int v161 = v78;
        if ((*a3)(v70, (char *)(v10 + 24)))
        {
          uint64_t v166 = *v69;
          uint64_t v79 = v166;
          int v167 = *(_DWORD *)(v10 + 32);
          int v80 = v167;
          int v81 = *(_DWORD *)(v70 + 8);
          uint64_t *v69 = *(void *)v70;
          *(_DWORD *)(v10 + 32) = v81;
          *(_DWORD *)(v70 + 8) = v80;
          *(void *)uint64_t v70 = v79;
        }
      }
      char v88 = (*a3)(v16, (char *)v45);
      unsigned int v89 = (*a3)(v70, (char *)v16);
      if (v88)
      {
        if (v89)
        {
          uint64_t v90 = *(void *)v45;
          int v167 = *(_DWORD *)(v45 + 8);
          uint64_t v166 = v90;
          *(void *)uint64_t v45 = *(void *)v70;
          *(_DWORD *)(v45 + 8) = *(_DWORD *)(v70 + 8);
        }
        else
        {
          uint64_t v95 = *(void *)v45;
          int v167 = *(_DWORD *)(v45 + 8);
          uint64_t v166 = v95;
          *(void *)uint64_t v45 = *(void *)v16;
          *(_DWORD *)(v45 + 8) = *(_DWORD *)(v16 + 8);
          uint64_t v96 = v166;
          *(_DWORD *)(v16 + 8) = v167;
          *(void *)uint64_t v16 = v96;
          if (!(*a3)(v70, (char *)v16)) {
            goto LABEL_55;
          }
          uint64_t v97 = *(void *)v16;
          int v167 = *(_DWORD *)(v16 + 8);
          uint64_t v166 = v97;
          *(void *)uint64_t v16 = *(void *)v70;
          *(_DWORD *)(v16 + 8) = *(_DWORD *)(v70 + 8);
        }
        uint64_t v98 = v166;
        *(_DWORD *)(v70 + 8) = v167;
        *(void *)uint64_t v70 = v98;
      }
      else if (v89)
      {
        uint64_t v91 = *(void *)v16;
        int v167 = *(_DWORD *)(v16 + 8);
        uint64_t v166 = v91;
        *(void *)uint64_t v16 = *(void *)v70;
        *(_DWORD *)(v16 + 8) = *(_DWORD *)(v70 + 8);
        uint64_t v92 = v166;
        *(_DWORD *)(v70 + 8) = v167;
        *(void *)uint64_t v70 = v92;
        if ((*a3)(v16, (char *)v45))
        {
          uint64_t v93 = *(void *)v45;
          int v167 = *(_DWORD *)(v45 + 8);
          uint64_t v166 = v93;
          *(void *)uint64_t v45 = *(void *)v16;
          *(_DWORD *)(v45 + 8) = *(_DWORD *)(v16 + 8);
          uint64_t v94 = v166;
          *(_DWORD *)(v16 + 8) = v167;
          *(void *)uint64_t v16 = v94;
        }
      }
LABEL_55:
      uint64_t v99 = *(void *)v10;
      int v167 = *(_DWORD *)(v10 + 8);
      uint64_t v166 = v99;
      uint64_t v100 = *(void *)v16;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v16 + 8);
      *(void *)unint64_t v10 = v100;
      uint64_t v101 = v166;
      *(_DWORD *)(v16 + 8) = v167;
      *(void *)uint64_t v16 = v101;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v102 = 0;
      uint64_t v103 = *(void *)v10;
      int v165 = *(_DWORD *)(v10 + 8);
      uint64_t v164 = v103;
      do
        v102 += 12;
      while ((((uint64_t (*)(unint64_t, uint64_t *))*a3)(v102 + v10, &v164) & 1) != 0);
      unint64_t v104 = v10 + v102;
      uint64_t v105 = a2;
      if (v102 == 12)
      {
        uint64_t v105 = a2;
        do
        {
          if (v104 >= (unint64_t)v105) {
            break;
          }
          uint64_t v105 = (uint64_t *)((char *)v105 - 12);
        }
        while ((((uint64_t (*)(uint64_t *, uint64_t *))*a3)(v105, &v164) & 1) == 0);
      }
      else
      {
        do
          uint64_t v105 = (uint64_t *)((char *)v105 - 12);
        while (!(*a3)((uint64_t)v105, (char *)&v164));
      }
      if (v104 >= (unint64_t)v105)
      {
        uint64_t v111 = v104 - 12;
        if (v104 - 12 == v10) {
          goto LABEL_75;
        }
LABEL_74:
        uint64_t v112 = *(void *)v111;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v111 + 8);
        *(void *)unint64_t v10 = v112;
        goto LABEL_75;
      }
      unint64_t v106 = v10 + v102;
      unint64_t v107 = (unint64_t)v105;
      do
      {
        uint64_t v108 = *(void *)v106;
        int v167 = *(_DWORD *)(v106 + 8);
        uint64_t v166 = v108;
        uint64_t v109 = *(void *)v107;
        *(_DWORD *)(v106 + 8) = *(_DWORD *)(v107 + 8);
        *(void *)unint64_t v106 = v109;
        uint64_t v110 = v166;
        *(_DWORD *)(v107 + 8) = v167;
        *(void *)unint64_t v107 = v110;
        do
          v106 += 12;
        while ((((uint64_t (*)(unint64_t, uint64_t *))*a3)(v106, &v164) & 1) != 0);
        do
          v107 -= 12;
        while (!(*a3)(v107, (char *)&v164));
      }
      while (v106 < v107);
      uint64_t v111 = v106 - 12;
      if (v111 != v10) {
        goto LABEL_74;
      }
LABEL_75:
      uint64_t v113 = v164;
      *(_DWORD *)(v111 + 8) = v165;
      *(void *)uint64_t v111 = v113;
      if (v104 < (unint64_t)v105) {
        goto LABEL_78;
      }
      BOOL v114 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>(v10, v111, (uint64_t (**)(uint64_t *, uint64_t *))a3);
      unint64_t v12 = v111 + 12;
      double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>(v111 + 12, (uint64_t)a2, (uint64_t (**)(uint64_t *, uint64_t *))a3);
      if (result)
      {
        a2 = (uint64_t *)v111;
        if (v114) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v114)
      {
LABEL_78:
        double result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>(v10, v111, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v111 + 12;
      }
    }
    else
    {
      char v22 = v17(v12, (char *)(v12 + 12 * (v14 >> 1)));
      unsigned int v23 = (*a3)((uint64_t)a2 - 12, (char *)v12);
      if (v22)
      {
        if (v23)
        {
          uint64_t v24 = *(void *)v16;
          int v167 = *(_DWORD *)(v16 + 8);
          uint64_t v166 = v24;
          uint64_t v25 = *(void *)v11;
          *(_DWORD *)(v16 + 8) = *((_DWORD *)a2 - 1);
          *(void *)uint64_t v16 = v25;
          goto LABEL_33;
        }
        uint64_t v57 = *(void *)v16;
        int v167 = *(_DWORD *)(v16 + 8);
        uint64_t v166 = v57;
        uint64_t v58 = *(void *)v12;
        *(_DWORD *)(v16 + 8) = *(_DWORD *)(v12 + 8);
        *(void *)uint64_t v16 = v58;
        uint64_t v59 = v166;
        *(_DWORD *)(v12 + 8) = v167;
        *(void *)unint64_t v12 = v59;
        if ((*a3)((uint64_t)a2 - 12, (char *)v12))
        {
          uint64_t v60 = *(void *)v12;
          int v167 = *(_DWORD *)(v12 + 8);
          uint64_t v166 = v60;
          uint64_t v61 = *(void *)v11;
          *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
          *(void *)unint64_t v12 = v61;
LABEL_33:
          uint64_t v62 = v166;
          *((_DWORD *)a2 - 1) = v167;
          *(void *)uint64_t v11 = v62;
        }
LABEL_34:
        --a4;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (!v23) {
        goto LABEL_34;
      }
      uint64_t v32 = *(void *)v12;
      int v167 = *(_DWORD *)(v12 + 8);
      uint64_t v166 = v32;
      uint64_t v33 = *(void *)v11;
      *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
      *(void *)unint64_t v12 = v33;
      uint64_t v34 = v166;
      *((_DWORD *)a2 - 1) = v167;
      *(void *)uint64_t v11 = v34;
      if (!(*a3)(v12, (char *)v16)) {
        goto LABEL_34;
      }
      uint64_t v35 = *(void *)v16;
      int v167 = *(_DWORD *)(v16 + 8);
      uint64_t v166 = v35;
      uint64_t v36 = *(void *)v12;
      *(_DWORD *)(v16 + 8) = *(_DWORD *)(v12 + 8);
      *(void *)uint64_t v16 = v36;
      uint64_t v37 = v166;
      *(_DWORD *)(v12 + 8) = v167;
      *(void *)unint64_t v12 = v37;
      --a4;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (((uint64_t (*)(unint64_t, unint64_t))*a3)(v10 - 12, v10)) {
        goto LABEL_57;
      }
      uint64_t v115 = *(void *)v10;
      int v165 = *(_DWORD *)(v10 + 8);
      uint64_t v164 = v115;
      double result = ((uint64_t (*)(uint64_t *, uint64_t))*a3)(&v164, (uint64_t)a2 - 12);
      if (result)
      {
        unint64_t v12 = v10;
        do
        {
          v12 += 12;
          double result = ((uint64_t (*)(uint64_t *, unint64_t))*a3)(&v164, v12);
        }
        while ((result & 1) == 0);
      }
      else
      {
        unint64_t v116 = v10 + 12;
        do
        {
          unint64_t v12 = v116;
          if (v116 >= (unint64_t)a2) {
            break;
          }
          double result = ((uint64_t (*)(uint64_t *, unint64_t))*a3)(&v164, v116);
          unint64_t v116 = v12 + 12;
        }
        while (!result);
      }
      long long v117 = a2;
      if (v12 < (unint64_t)a2)
      {
        long long v117 = a2;
        do
        {
          long long v117 = (uint64_t *)((char *)v117 - 12);
          double result = ((uint64_t (*)(uint64_t *, uint64_t *))*a3)(&v164, v117);
        }
        while ((result & 1) != 0);
      }
      while (v12 < (unint64_t)v117)
      {
        uint64_t v118 = *(void *)v12;
        int v167 = *(_DWORD *)(v12 + 8);
        uint64_t v166 = v118;
        uint64_t v119 = *v117;
        *(_DWORD *)(v12 + 8) = *((_DWORD *)v117 + 2);
        *(void *)unint64_t v12 = v119;
        uint64_t v120 = v166;
        *((_DWORD *)v117 + 2) = v167;
        uint64_t *v117 = v120;
        do
          v12 += 12;
        while (!(*a3)((uint64_t)&v164, (char *)v12));
        do
        {
          long long v117 = (uint64_t *)((char *)v117 - 12);
          double result = ((uint64_t (*)(uint64_t *, uint64_t *))*a3)(&v164, v117);
        }
        while ((result & 1) != 0);
      }
      unint64_t v121 = (uint64_t *)(v12 - 12);
      BOOL v5 = v12 - 12 >= v10;
      BOOL v6 = v12 - 12 == v10;
      if (v12 - 12 != v10)
      {
        uint64_t v122 = *v121;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 - 4);
        *(void *)unint64_t v10 = v122;
      }
      a5 = 0;
      uint64_t v123 = v164;
      *(_DWORD *)(v12 - 4) = v165;
      *unint64_t v121 = v123;
    }
  }
  switch(v14)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      double result = ((uint64_t (*)(uint64_t, unint64_t))*a3)((uint64_t)a2 - 12, v12);
      if (!result) {
        return result;
      }
      goto LABEL_104;
    case 3uLL:
      unint64_t v124 = v12 + 12;
      char v125 = (*a3)(v12 + 12, (char *)v12);
      double result = ((uint64_t (*)(char *, unint64_t))*a3)(v11, v12 + 12);
      if (v125)
      {
        if (result)
        {
LABEL_104:
          uint64_t v126 = *(void *)v12;
          int v167 = *(_DWORD *)(v12 + 8);
          uint64_t v166 = v126;
          uint64_t v127 = *(void *)v11;
          *(_DWORD *)(v12 + 8) = *((_DWORD *)v11 + 2);
          *(void *)unint64_t v12 = v127;
          uint64_t v128 = v166;
          int v129 = v167;
        }
        else
        {
          uint64_t v159 = *(void *)v12;
          int v167 = *(_DWORD *)(v12 + 8);
          uint64_t v166 = v159;
          *(void *)unint64_t v12 = *(void *)v124;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v12 + 20);
          *(void *)unint64_t v124 = v166;
          *(_DWORD *)(v12 + 20) = v167;
          double result = ((uint64_t (*)(char *, unint64_t))*a3)(v11, v12 + 12);
          if (!result) {
            return result;
          }
          uint64_t v128 = *(void *)v124;
          uint64_t v166 = *(void *)v124;
          int v129 = *(_DWORD *)(v12 + 20);
          int v167 = v129;
          int v160 = *((_DWORD *)v11 + 2);
          *(void *)unint64_t v124 = *(void *)v11;
          *(_DWORD *)(v12 + 20) = v160;
        }
        *((_DWORD *)v11 + 2) = v129;
        *(void *)uint64_t v11 = v128;
        return result;
      }
      if (result)
      {
        uint64_t v166 = *(void *)v124;
        uint64_t v150 = v166;
        int v167 = *(_DWORD *)(v12 + 20);
        int v151 = v167;
        int v152 = *((_DWORD *)v11 + 2);
        *(void *)unint64_t v124 = *(void *)v11;
        *(_DWORD *)(v12 + 20) = v152;
        *((_DWORD *)v11 + 2) = v151;
        *(void *)uint64_t v11 = v150;
LABEL_132:
        double result = ((uint64_t (*)(unint64_t, unint64_t))*a3)(v124, v12);
        if (result)
        {
          uint64_t v153 = *(void *)v12;
          int v167 = *(_DWORD *)(v12 + 8);
          uint64_t v166 = v153;
          *(void *)unint64_t v12 = *(void *)v124;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v124 + 8);
          *(void *)unint64_t v124 = v166;
          *(_DWORD *)(v124 + 8) = v167;
        }
      }
      break;
    case 4uLL:
      return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)(v12 + 24), (uint64_t *)((char *)a2 - 12), (uint64_t (**)(uint64_t *, uint64_t *))a3);
    case 5uLL:
      unint64_t v124 = v12 + 12;
      unint64_t v130 = (uint64_t *)(v12 + 24);
      unint64_t v131 = (uint64_t *)(v12 + 36);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)(v12 + 24), (uint64_t *)(v12 + 36), (uint64_t (**)(uint64_t *, uint64_t *))a3);
      double result = ((uint64_t (*)(char *, unint64_t))*a3)(v11, v12 + 36);
      if (!result) {
        return result;
      }
      uint64_t v166 = *v131;
      uint64_t v132 = v166;
      int v167 = *(_DWORD *)(v12 + 44);
      int v133 = v167;
      int v134 = *((_DWORD *)v11 + 2);
      uint64_t *v131 = *(void *)v11;
      *(_DWORD *)(v12 + 44) = v134;
      *((_DWORD *)v11 + 2) = v133;
      *(void *)uint64_t v11 = v132;
      double result = ((uint64_t (*)(unint64_t, unint64_t))*a3)(v12 + 36, v12 + 24);
      if (!result) {
        return result;
      }
      int v135 = *(_DWORD *)(v12 + 32);
      uint64_t v136 = *v130;
      uint64_t *v130 = *v131;
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 + 44);
      uint64_t *v131 = v136;
      *(_DWORD *)(v12 + 44) = v135;
      double result = ((uint64_t (*)(unint64_t, unint64_t))*a3)(v12 + 24, v12 + 12);
      if (!result) {
        return result;
      }
      int v137 = *(_DWORD *)(v12 + 20);
      uint64_t v138 = *(void *)v124;
      *(void *)unint64_t v124 = *v130;
      *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 32);
      uint64_t *v130 = v138;
      *(_DWORD *)(v12 + 32) = v137;
      goto LABEL_132;
    default:
      JUMPOUT(0);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v8 = (uint64_t *)(a2 - 12);
      if ((*a3)((uint64_t *)(a2 - 12), (uint64_t *)a1))
      {
        int v9 = *(_DWORD *)(a1 + 8);
        uint64_t v10 = *(void *)a1;
        int v11 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *v8;
        *(_DWORD *)(a1 + 8) = v11;
        *int v8 = v10;
        *(_DWORD *)(a2 - 4) = v9;
      }
      return 1;
    case 3uLL:
      uint64_t v12 = a1 + 12;
      uint64_t v13 = a2 - 12;
      char v14 = (*a3)((uint64_t *)(a1 + 12), (uint64_t *)a1);
      int v15 = (*a3)((uint64_t *)v13, (uint64_t *)(a1 + 12));
      if (v14)
      {
        if (v15)
        {
          int v16 = *(_DWORD *)(a1 + 8);
          uint64_t v17 = *(void *)a1;
          int v18 = *(_DWORD *)(v13 + 8);
          *(void *)a1 = *(void *)v13;
          *(_DWORD *)(a1 + 8) = v18;
        }
        else
        {
          int v44 = *(_DWORD *)(a1 + 8);
          uint64_t v45 = *(void *)a1;
          *(void *)a1 = *(void *)v12;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          *(void *)uint64_t v12 = v45;
          *(_DWORD *)(a1 + 20) = v44;
          if (!(*a3)((uint64_t *)v13, (uint64_t *)(a1 + 12))) {
            return 1;
          }
          int v16 = *(_DWORD *)(a1 + 20);
          uint64_t v17 = *(void *)v12;
          int v46 = *(_DWORD *)(v13 + 8);
          *(void *)uint64_t v12 = *(void *)v13;
          *(_DWORD *)(a1 + 20) = v46;
        }
        *(void *)uint64_t v13 = v17;
        *(_DWORD *)(v13 + 8) = v16;
      }
      else if (v15)
      {
        int v35 = *(_DWORD *)(a1 + 20);
        uint64_t v36 = *(void *)v12;
        int v37 = *(_DWORD *)(v13 + 8);
        *(void *)uint64_t v12 = *(void *)v13;
        *(_DWORD *)(a1 + 20) = v37;
        *(void *)uint64_t v13 = v36;
        *(_DWORD *)(v13 + 8) = v35;
LABEL_17:
        if ((*a3)((uint64_t *)v12, (uint64_t *)a1))
        {
          int v38 = *(_DWORD *)(a1 + 8);
          uint64_t v39 = *(void *)a1;
          *(void *)a1 = *(void *)v12;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 + 8);
          *(void *)uint64_t v12 = v39;
          *(_DWORD *)(v12 + 8) = v38;
        }
      }
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 12), a3);
      return 1;
    case 5uLL:
      uint64_t v12 = a1 + 12;
      unsigned int v19 = (uint64_t *)(a1 + 24);
      uint64_t v20 = (uint64_t *)(a1 + 36);
      uint64_t v21 = a2 - 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 36), a3);
      if (!(*a3)((uint64_t *)v21, (uint64_t *)(a1 + 36))) {
        return 1;
      }
      int v22 = *(_DWORD *)(a1 + 44);
      uint64_t v23 = *v20;
      int v24 = *(_DWORD *)(v21 + 8);
      *uint64_t v20 = *(void *)v21;
      *(_DWORD *)(a1 + 44) = v24;
      *(void *)uint64_t v21 = v23;
      *(_DWORD *)(v21 + 8) = v22;
      if (!(*a3)((uint64_t *)(a1 + 36), (uint64_t *)(a1 + 24))) {
        return 1;
      }
      int v25 = *(_DWORD *)(a1 + 32);
      uint64_t v26 = *v19;
      *unsigned int v19 = *v20;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
      *uint64_t v20 = v26;
      *(_DWORD *)(a1 + 44) = v25;
      if (!(*a3)((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 12))) {
        return 1;
      }
      int v27 = *(_DWORD *)(a1 + 20);
      uint64_t v28 = *(void *)v12;
      *(void *)uint64_t v12 = *v19;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
      *unsigned int v19 = v28;
      *(_DWORD *)(a1 + 32) = v27;
      goto LABEL_17;
    default:
      uint64_t v29 = (uint64_t *)(a1 + 24);
      uint64_t v30 = (uint64_t *)(a1 + 12);
      char v31 = (*a3)((uint64_t *)(a1 + 12), (uint64_t *)a1);
      int v32 = (*a3)((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 12));
      if (v31)
      {
        if (v32)
        {
          int v33 = *(_DWORD *)(a1 + 8);
          uint64_t v34 = *(void *)a1;
          *(void *)a1 = *v29;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        }
        else
        {
          int v47 = *(_DWORD *)(a1 + 8);
          uint64_t v48 = *(void *)a1;
          *(void *)a1 = *v30;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          *uint64_t v30 = v48;
          *(_DWORD *)(a1 + 20) = v47;
          if (!(*a3)((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 12))) {
            goto LABEL_28;
          }
          int v33 = *(_DWORD *)(a1 + 20);
          uint64_t v34 = *v30;
          *uint64_t v30 = *v29;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
        }
        *uint64_t v29 = v34;
        *(_DWORD *)(a1 + 32) = v33;
      }
      else if (v32)
      {
        int v40 = *(_DWORD *)(a1 + 20);
        uint64_t v41 = *v30;
        *uint64_t v30 = *v29;
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
        *uint64_t v29 = v41;
        *(_DWORD *)(a1 + 32) = v40;
        if ((*a3)((uint64_t *)(a1 + 12), (uint64_t *)a1))
        {
          int v42 = *(_DWORD *)(a1 + 8);
          uint64_t v43 = *(void *)a1;
          *(void *)a1 = *v30;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          *uint64_t v30 = v43;
          *(_DWORD *)(a1 + 20) = v42;
        }
      }
LABEL_28:
      uint64_t v49 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v50 = 0;
      int v51 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v49, v29))
    {
      uint64_t v55 = *(void *)v49;
      int v56 = *(_DWORD *)(v49 + 8);
      uint64_t v53 = v50;
      do
      {
        uint64_t v54 = a1 + v53;
        *(void *)(v54 + 36) = *(void *)(a1 + v53 + 24);
        *(_DWORD *)(v54 + 44) = *(_DWORD *)(a1 + v53 + 32);
        if (v53 == -24)
        {
          uint64_t v52 = a1;
          goto LABEL_31;
        }
        v53 -= 12;
      }
      while (((*a3)(&v55, (uint64_t *)(v54 + 12)) & 1) != 0);
      uint64_t v52 = a1 + v53 + 36;
LABEL_31:
      *(void *)uint64_t v52 = v55;
      *(_DWORD *)(v52 + 8) = v56;
      if (++v51 == 8) {
        return v49 + 12 == a2;
      }
    }
    uint64_t v29 = (uint64_t *)v49;
    v50 += 12;
    v49 += 12;
    if (v49 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  char v10 = (*a5)(a2, a1);
  int v11 = (*a5)(a3, a2);
  if (v10)
  {
    if (v11)
    {
      int v12 = *((_DWORD *)a1 + 2);
      uint64_t v13 = *a1;
      int v14 = *((_DWORD *)a3 + 2);
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = v14;
LABEL_9:
      *a3 = v13;
      *((_DWORD *)a3 + 2) = v12;
      goto LABEL_10;
    }
    int v21 = *((_DWORD *)a1 + 2);
    uint64_t v22 = *a1;
    int v23 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v23;
    *a2 = v22;
    *((_DWORD *)a2 + 2) = v21;
    if ((*a5)(a3, a2))
    {
      int v12 = *((_DWORD *)a2 + 2);
      uint64_t v13 = *a2;
      int v24 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v24;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    int v15 = *((_DWORD *)a2 + 2);
    uint64_t v16 = *a2;
    int v17 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v17;
    *a3 = v16;
    *((_DWORD *)a3 + 2) = v15;
    if ((*a5)(a2, a1))
    {
      int v18 = *((_DWORD *)a1 + 2);
      uint64_t v19 = *a1;
      int v20 = *((_DWORD *)a2 + 2);
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = v20;
      *a2 = v19;
      *((_DWORD *)a2 + 2) = v18;
    }
  }
LABEL_10:
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    int v26 = *((_DWORD *)a3 + 2);
    uint64_t v27 = *a3;
    int v28 = *((_DWORD *)a4 + 2);
    *a3 = *a4;
    *((_DWORD *)a3 + 2) = v28;
    *a4 = v27;
    *((_DWORD *)a4 + 2) = v26;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      int v29 = *((_DWORD *)a2 + 2);
      uint64_t v30 = *a2;
      int v31 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v31;
      *a3 = v30;
      *((_DWORD *)a3 + 2) = v29;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        int v32 = *((_DWORD *)a1 + 2);
        uint64_t v33 = *a1;
        int v34 = *((_DWORD *)a2 + 2);
        *a1 = *a2;
        *((_DWORD *)a1 + 2) = v34;
        *a2 = v33;
        *((_DWORD *)a2 + 2) = v32;
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,operations_research::sat::LiteralWithCoeff*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t, char *))
{
  if ((uint64_t *)a1 == a2) {
    return a3;
  }
  uint64_t v65 = v4;
  uint64_t v66 = v5;
  uint64_t v58 = a3;
  uint64_t v60 = a2;
  uint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2);
  uint64_t v57 = (uint64_t)a2 - a1;
  if ((uint64_t)a2 - a1 >= 13 && (unint64_t)v57 >= 0x18)
  {
    int64_t v47 = (unint64_t)(v8 - 2) >> 1;
    int64_t v48 = v47;
    do
    {
      if (v47 >= v48)
      {
        uint64_t v50 = (2 * v48) | 1;
        int v51 = (uint64_t *)(a1 + 12 * v50);
        if (2 * v48 + 2 < v8 && (*a4)(a1 + 12 * v50, (char *)v51 + 12))
        {
          int v51 = (uint64_t *)((char *)v51 + 12);
          uint64_t v50 = 2 * v48 + 2;
        }
        uint64_t v52 = (uint64_t *)(a1 + 12 * v48);
        if ((((uint64_t (*)(uint64_t *, uint64_t *))*a4)(v51, v52) & 1) == 0)
        {
          uint64_t v63 = *v52;
          int v64 = *((_DWORD *)v52 + 2);
          do
          {
            uint64_t v53 = v51;
            uint64_t v54 = *v51;
            *((_DWORD *)v52 + 2) = *((_DWORD *)v51 + 2);
            *uint64_t v52 = v54;
            if (v47 < v50) {
              break;
            }
            uint64_t v55 = (2 * v50) | 1;
            int v51 = (uint64_t *)(a1 + 12 * v55);
            uint64_t v56 = 2 * v50 + 2;
            if (v56 < v8 && (*a4)(a1 + 12 * v55, (char *)v51 + 12))
            {
              int v51 = (uint64_t *)((char *)v51 + 12);
              uint64_t v55 = v56;
            }
            uint64_t v52 = v53;
            uint64_t v50 = v55;
          }
          while (!(*a4)((uint64_t)v51, (char *)&v63));
          uint64_t v49 = v63;
          *((_DWORD *)v53 + 2) = v64;
          *uint64_t v53 = v49;
        }
      }
      BOOL v30 = v48-- <= 0;
    }
    while (!v30);
  }
  int v9 = v58;
  a3 = v60;
  unint64_t v10 = v57;
  if (v60 != v58)
  {
    if (v57 < 24)
    {
      int v11 = v60;
      do
      {
        if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t *))*a4)(v11, a1, a3))
        {
          int v12 = *((_DWORD *)v11 + 2);
          uint64_t v13 = *v11;
          int v14 = *(_DWORD *)(a1 + 8);
          *int v11 = *(void *)a1;
          *((_DWORD *)v11 + 2) = v14;
          *(void *)a1 = v13;
          *(_DWORD *)(a1 + 8) = v12;
        }
        int v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v58);
      a3 = v58;
      goto LABEL_32;
    }
    int v15 = (uint64_t *)(a1 + 12);
    uint64_t v16 = v60;
    while (1)
    {
      if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t *))*a4)(v16, a1, a3))
      {
        int v18 = *((_DWORD *)v16 + 2);
        uint64_t v19 = *v16;
        int v20 = *(_DWORD *)(a1 + 8);
        *uint64_t v16 = *(void *)a1;
        *((_DWORD *)v16 + 2) = v20;
        *(void *)a1 = v19;
        *(_DWORD *)(a1 + 8) = v18;
        if ((unint64_t)v8 < 3)
        {
          uint64_t v22 = v15;
          int64_t v23 = 1;
          if ((((uint64_t (*)(uint64_t *, uint64_t))*a4)(v15, a1) & 1) == 0) {
            goto LABEL_24;
          }
        }
        else
        {
          unsigned int v21 = (*a4)((uint64_t)v15, (char *)(a1 + 24));
          if (v21) {
            uint64_t v22 = (uint64_t *)(a1 + 24);
          }
          else {
            uint64_t v22 = v15;
          }
          if (v21) {
            int64_t v23 = 2;
          }
          else {
            int64_t v23 = 1;
          }
          if ((((uint64_t (*)(uint64_t *, uint64_t))*a4)(v22, a1) & 1) == 0)
          {
LABEL_24:
            uint64_t v63 = *(void *)a1;
            int v64 = *(_DWORD *)(a1 + 8);
            uint64_t v24 = a1;
            do
            {
              int v26 = v22;
              uint64_t v27 = *v22;
              *(_DWORD *)(v24 + 8) = *((_DWORD *)v22 + 2);
              *(void *)uint64_t v24 = v27;
              if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v23) {
                break;
              }
              uint64_t v28 = (2 * v23) | 1;
              uint64_t v22 = (uint64_t *)(a1 + 12 * v28);
              if (2 * v23 + 2 < v8 && (*a4)(a1 + 12 * v28, (char *)v22 + 12))
              {
                uint64_t v22 = (uint64_t *)((char *)v22 + 12);
                uint64_t v28 = 2 * v23 + 2;
              }
              unsigned int v25 = (*a4)((uint64_t)v22, (char *)&v63);
              uint64_t v24 = (uint64_t)v26;
              int64_t v23 = v28;
            }
            while (!v25);
            uint64_t v17 = v63;
            *((_DWORD *)v26 + 2) = v64;
            *int v26 = v17;
            int v9 = v58;
            int v15 = (uint64_t *)(a1 + 12);
          }
        }
      }
      uint64_t v16 = (uint64_t *)((char *)v16 + 12);
      if (v16 == v9)
      {
        a3 = v9;
        unint64_t v10 = v57;
        goto LABEL_35;
      }
    }
  }
LABEL_32:
  if (v57 >= 13)
  {
LABEL_35:
    uint64_t v59 = a3;
    int64_t v29 = v10 / 0xC;
    do
    {
      uint64_t v31 = 0;
      uint64_t v61 = *(void *)a1;
      int v62 = *(_DWORD *)(a1 + 8);
      uint64_t v32 = a1;
      do
      {
        uint64_t v34 = v32 + 12 * v31 + 12;
        uint64_t v35 = (2 * v31) | 1;
        uint64_t v36 = 2 * v31 + 2;
        if (v36 < v29 && (*a4)(v32 + 12 * v31 + 12, (char *)(v32 + 12 * v31 + 24)))
        {
          v34 += 12;
          uint64_t v35 = v36;
        }
        uint64_t v33 = *(void *)v34;
        *(_DWORD *)(v32 + 8) = *(_DWORD *)(v34 + 8);
        *(void *)uint64_t v32 = v33;
        uint64_t v32 = v34;
        uint64_t v31 = v35;
      }
      while (v35 <= (uint64_t)((unint64_t)(v29 - 2) >> 1));
      int v37 = (uint64_t *)((char *)v60 - 12);
      BOOL v38 = v34 == (void)v60 - 12;
      uint64_t v60 = (uint64_t *)((char *)v60 - 12);
      if (v38)
      {
        *(_DWORD *)(v34 + 8) = v62;
        *(void *)uint64_t v34 = v61;
      }
      else
      {
        uint64_t v39 = *v37;
        *(_DWORD *)(v34 + 8) = *((_DWORD *)v37 + 2);
        *(void *)uint64_t v34 = v39;
        *int v37 = v61;
        *((_DWORD *)v37 + 2) = v62;
        uint64_t v40 = v34 - a1 + 12;
        if (v40 >= 13)
        {
          unint64_t v41 = (v40 / 0xCuLL - 2) >> 1;
          uint64_t v42 = a1 + 12 * v41;
          if ((*a4)(v42, (char *)v34))
          {
            uint64_t v43 = *(void *)v34;
            int v64 = *(_DWORD *)(v34 + 8);
            uint64_t v63 = v43;
            do
            {
              uint64_t v44 = v42;
              uint64_t v45 = *(void *)v42;
              *(_DWORD *)(v34 + 8) = *(_DWORD *)(v42 + 8);
              *(void *)uint64_t v34 = v45;
              if (!v41) {
                break;
              }
              unint64_t v41 = (v41 - 1) >> 1;
              uint64_t v42 = a1 + 12 * v41;
              uint64_t v34 = v44;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t *))*a4)(v42, &v63) & 1) != 0);
            *(void *)uint64_t v44 = v63;
            *(_DWORD *)(v44 + 8) = v64;
          }
        }
      }
      BOOL v30 = v29-- <= 2;
    }
    while (!v30);
    return v59;
  }
  return a3;
}

void std::vector<operations_research::sat::LiteralWithCoeff>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)v5) >> 2) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = 12 * a2 - 12;
      if (v13 < 0xC) {
        goto LABEL_36;
      }
      unint64_t v14 = v13 / 0xC + 1;
      uint64_t v6 = (void *)((char *)v5 + 12 * (v14 & 0x3FFFFFFFFFFFFFFELL));
      int v15 = v5 + 2;
      uint64_t v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *(void *)((char *)v15 - 12) = 0;
        *int v15 = 0;
        v15 += 3;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          *(void *)((char *)v6 + 4) = 0;
          uint64_t v6 = (void *)((char *)v6 + 12);
        }
        while (v6 != (void *)((char *)v5 + 12 * a2));
      }
      uint64_t v6 = (void *)((char *)v5 + 12 * a2);
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = *a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v12 = (char *)operator new(12 * v11);
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v17 = &v12[12 * v8];
    int v18 = &v17[12 * a2];
    unint64_t v19 = 12 * a2 - 12;
    int v20 = v17;
    if (v19 < 0xC) {
      goto LABEL_37;
    }
    unint64_t v21 = v19 / 0xC + 1;
    int v20 = &v17[12 * (v21 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v22 = &v12[12 * v8 + 16];
    uint64_t v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v22 - 12) = 0;
      *(void *)uint64_t v22 = 0;
      v22 += 24;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_37:
      do
      {
        *(void *)(v20 + 4) = 0;
        v20 += 12;
      }
      while (v20 != v18);
    }
    uint64_t v24 = &v12[12 * v11];
    if (v5 != v7)
    {
      do
      {
        uint64_t v25 = *(void *)((char *)v6 - 12);
        uint64_t v6 = (void *)((char *)v6 - 12);
        int v26 = *((_DWORD *)v6 + 2);
        *(void *)(v17 - 12) = v25;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v26;
      }
      while (v6 != v7);
    }
    uint64_t v27 = *a1;
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
    {
      operator delete(v27);
    }
  }
}

void google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>(int a1, int a2, char *a3)
{
  v3[6] = *(void **)MEMORY[0x263EF8340];
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)v3, a3);
}

void sub_23CD3FD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&a10);
    _Unwind_Resume(a1);
  }
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&a10);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  int v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)int v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v25 = a1[4];
    if (!v25) {
      return;
    }
LABEL_21:
    *((void *)v25 + 4) = v14 >> 3;
    *((void *)v25 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v19 = &v5[32 * (void)v13];
      unint64_t v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v19)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v19));
      unint64_t v21 = *a1;
      uint64_t v22 = a1[3];
      unint64_t v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v23 = (v15 + v23) & (unint64_t)v22;
          unint64_t v24 = *(void *)&v21[v23] & (~*(void *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      char v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      int v18 = &a1[1][32 * v16];
      *(void *)int v18 = *(void *)v19;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      *((void *)v18 + 3) = 0;
      *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
      *((void *)v18 + 3) = *((void *)v19 + 3);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = 0;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v25 = a1[4];
  if (v25) {
    goto LABEL_21;
  }
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::PbConstraints::ConstraintIndex_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CD40158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void **)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4)
    {
      uint64_t v5 = (void *)v4[9];
      if (v5)
      {
        v4[10] = v5;
        operator delete(v5);
      }
      unint64_t v6 = (void *)v4[6];
      if (v6)
      {
        v4[7] = v6;
        operator delete(v6);
      }
      unint64_t v7 = (void *)v4[3];
      if (v7)
      {
        v4[4] = v7;
        operator delete(v7);
      }
      MEMORY[0x23ECF2BC0](v4, 0x1030C40B4F52BC7);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__append(void *a1, unint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  unint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = (uint64_t)&v5[-*a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v4 - v7) >> 2 > v10) {
      unint64_t v10 = (v4 - v7) >> 2;
    }
    if ((unint64_t)(v4 - v7) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v32 = a1 + 2;
    uint64_t v28 = v8;
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      int v12 = 0;
    }
    unint64_t v13 = &v12[8 * v9];
    unint64_t v14 = &v12[8 * v11];
    uint64_t v31 = v14;
    size_t v15 = 8 * a2;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    v30.i64[1] = (uint64_t)&v13[v15];
    char v17 = (char *)(v5 - v7);
    if (v5 == v7)
    {
      int64x2_t v27 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      int v18 = v17 - 8;
      if ((unint64_t)(v17 - 8) < 0x78
        || &v5[-((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v13
        && &v12[v28 - ((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_31;
      }
      uint64_t v19 = ((unint64_t)v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v13 -= v20;
      unint64_t v6 = &v5[-v20];
      unint64_t v21 = v5 - 16;
      uint64_t v22 = &v12[8 * v9 - 16];
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = *((_OWORD *)v21 - 1);
        long long v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)unint64_t v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)uint64_t v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v26 = *((void *)v6 - 1);
          v6 -= 8;
          *(void *)unint64_t v6 = 0;
          *((void *)v13 - 1) = v26;
          v13 -= 8;
        }
        while (v6 != v7);
      }
      int64x2_t v27 = *(int64x2_t *)a1;
      uint64_t v4 = (char *)a1[2];
      unint64_t v16 = (char *)v30.i64[1];
      unint64_t v14 = v31;
    }
    *a1 = v13;
    a1[1] = v16;
    int64x2_t v30 = v27;
    a1[2] = v14;
    uint64_t v31 = v4;
    uint64_t v29 = v27.i64[0];
    std::__split_buffer<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::~__split_buffer((uint64_t)&v29);
  }
}

void std::vector<operations_research::sat::PbConstraints::ConstraintIndexWithCoeff>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (0x4EC4EC4EC4EC4EC5 * (v4 - v5) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = 13 * a2 - 13;
      if (v13 < 0xD) {
        goto LABEL_36;
      }
      unint64_t v14 = v13 / 0xD + 1;
      unint64_t v6 = &v5[13 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
      size_t v15 = v5 + 18;
      uint64_t v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *(_DWORD *)((char *)v15 - 17) = 0;
        *((_DWORD *)v15 - 1) = 0;
        *(void *)((char *)v15 - 13) = 0;
        *size_t v15 = 0;
        size_t v15 = (void *)((char *)v15 + 26);
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          *(_DWORD *)(v6 + 1) = 0;
          *(void *)(v6 + 5) = 0;
          v6 += 13;
        }
        while (v6 != &v5[13 * a2]);
      }
      unint64_t v6 = &v5[13 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * (v5 - (unsigned char *)*a1);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x13B13B13B13B13B1) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * (v4 - v7);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x9D89D89D89D89D8) {
      unint64_t v11 = 0x13B13B13B13B13B1;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x13B13B13B13B13B1) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v12 = (char *)operator new(13 * v11);
    }
    else
    {
      int v12 = 0;
    }
    char v17 = &v12[13 * v8];
    int v18 = &v17[13 * a2];
    unint64_t v19 = 13 * a2 - 13;
    uint64_t v20 = v17;
    if (v19 < 0xD) {
      goto LABEL_37;
    }
    unint64_t v21 = v19 / 0xD + 1;
    uint64_t v20 = &v17[13 * (v21 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v22 = &v12[13 * v8 + 18];
    uint64_t v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(_DWORD *)(v22 - 17) = 0;
      *((_DWORD *)v22 - 1) = 0;
      *(void *)(v22 - 13) = 0;
      *(void *)uint64_t v22 = 0;
      v22 += 26;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_37:
      do
      {
        *(_DWORD *)(v20 + 1) = 0;
        *(void *)(v20 + 5) = 0;
        v20 += 13;
      }
      while (v20 != v18);
    }
    long long v24 = &v12[13 * v11];
    if (v5 != v7)
    {
      do
      {
        uint64_t v25 = *(void *)(v6 - 13);
        v6 -= 13;
        uint64_t v26 = *(void *)(v6 + 5);
        *(void *)(v17 - 13) = v25;
        v17 -= 13;
        *(void *)(v17 + 5) = v26;
      }
      while (v6 != v7);
    }
    int64x2_t v27 = *a1;
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
    {
      operator delete(v27);
    }
  }
}

uint64_t operations_research::sat::PrecedencesPropagator::Propagate(operations_research::sat::PrecedencesPropagator *this)
{
  int v2 = *((_DWORD *)this + 9);
  uint64_t v3 = *((void *)this + 6);
  if (v2 >= *(_DWORD *)(v3 + 12))
  {
LABEL_47:
    operations_research::sat::PrecedencesPropagator::InitializeBFQueueWithModifiedNodes(this);
    uint64_t result = operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(this, *((operations_research::sat::Trail **)this + 6));
    if (result)
    {
      operations_research::sat::PrecedencesPropagator::PropagateOptionalArcs((int **)this, *((operations_research::sat::Trail **)this + 6));
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 80, -1431655765 * ((*(void *)(*((void *)this + 7) + 48) - *(void *)(*((void *)this + 7) + 40)) >> 2));
      return 1;
    }
    return result;
  }
  while (2)
  {
    *((_DWORD *)this + 9) = v2 + 1;
    uint64_t v4 = *(int *)(*(void *)(v3 + 72) + 4 * v2);
    uint64_t v5 = *((void *)this + 44);
    if ((int)v4 >= (int)((unint64_t)(*((void *)this + 45) - v5) >> 5)) {
      goto LABEL_3;
    }
    unint64_t v6 = (void *)(v5 + 32 * v4);
    unint64_t v9 = *v6;
    uint64_t v8 = (int *)(v6 + 1);
    unint64_t v7 = v9;
    if (v9) {
      uint64_t v8 = *(int **)v8;
    }
    if (v7 < 2)
    {
      unint64_t v10 = (int *)(v5 + 32 * v4 + 8);
      if ((v7 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_9:
      unint64_t v10 = *(int **)v10;
      goto LABEL_10;
    }
    uint64_t v22 = &v8[v7 >> 1];
    do
    {
      int v23 = *v8;
      uint64_t v24 = *((void *)this + 47);
      uint64_t v25 = 4 * *v8;
      int v26 = *(_DWORD *)(v24 + v25) - 1;
      *(_DWORD *)(v24 + v25) = v26;
      if (!v26)
      {
        uint64_t v27 = *((void *)this + 20) + 32 * *(int *)(*((void *)this + 23) + ((uint64_t)v23 << 6));
        uint64_t v29 = v27 + 8;
        unint64_t v28 = *(void *)v27;
        if (*(void *)v27)
        {
          uint64_t v29 = *(void *)(v27 + 8);
          unint64_t v30 = *(void *)(v27 + 16);
          unint64_t v31 = v28 >> 1;
          if (v28 >> 1 == v30) {
            goto LABEL_31;
          }
        }
        else
        {
          unint64_t v30 = 6;
          unint64_t v31 = v28 >> 1;
          if (v28 >> 1 == 6)
          {
LABEL_31:
            if (((v30 >> 61) & 3) != 0) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v32 = (char *)operator new(8 * v30);
            uint64_t v33 = v32;
            *(_DWORD *)&v32[4 * v30] = v23;
            if (v28 < 2) {
              goto LABEL_42;
            }
            unint64_t v34 = 0;
            if (v30 < 8 || (unint64_t)&v32[-v29] < 0x20)
            {
              uint64_t v35 = (int *)v29;
            }
            else
            {
              unint64_t v34 = v30 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v35 = (int *)(v29 + 4 * (v30 & 0xFFFFFFFFFFFFFFF8));
              uint64_t v36 = v32 + 16;
              int v37 = (long long *)(v29 + 16);
              unint64_t v38 = v30 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                long long v39 = *v37;
                *(v36 - 1) = *(v37 - 1);
                *uint64_t v36 = v39;
                v36 += 2;
                v37 += 2;
                v38 -= 8;
              }
              while (v38);
              if (v30 == v34) {
                goto LABEL_42;
              }
            }
            unint64_t v40 = v30 - v34;
            unint64_t v41 = &v32[4 * v34];
            do
            {
              int v42 = *v35++;
              *(_DWORD *)unint64_t v41 = v42;
              v41 += 4;
              --v40;
            }
            while (v40);
LABEL_42:
            if (v28)
            {
              operator delete(*(void **)(v27 + 8));
              unint64_t v28 = *(void *)v27;
            }
            *(void *)(v27 + 8) = v33;
            *(void *)(v27 + 16) = 2 * v30;
            v28 |= 1uLL;
            goto LABEL_24;
          }
        }
        *(_DWORD *)(v29 + 4 * v31) = v23;
LABEL_24:
        *(void *)uint64_t v27 = v28 + 2;
      }
      ++v8;
    }
    while (v8 != v22);
    uint64_t v43 = *((void *)this + 44);
    unint64_t v7 = *(void *)(v43 + 32 * v4);
    unint64_t v10 = (int *)(v43 + 32 * v4 + 8);
    if (v7) {
      goto LABEL_9;
    }
LABEL_10:
    if (v7 < 2)
    {
LABEL_3:
      int v2 = *((_DWORD *)this + 9);
      uint64_t v3 = *((void *)this + 6);
      if (v2 >= *(_DWORD *)(v3 + 12)) {
        goto LABEL_47;
      }
      continue;
    }
    break;
  }
  uint64_t v11 = 4 * (v7 >> 1);
  while (1)
  {
    uint64_t v12 = *v10;
    if (*(int *)(*((void *)this + 47) + 4 * v12) <= 0)
    {
      unint64_t v13 = (int *)(*((void *)this + 23) + (v12 << 6));
      unint64_t v14 = (void *)*((void *)this + 7);
      uint64_t v15 = v13[1];
      unint64_t v16 = *(int *)(v14[51] + 4 * v15);
      if (v16 == -1
        || ((*(void *)(*(void *)(v14[117] + 24) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        uint64_t v17 = v14[5];
        int v18 = v13[4];
        uint64_t v19 = v18 == -1 ? 0 : *(void *)(v17 + 12 * v18);
        uint64_t v20 = *((void *)v13 + 1) + *(void *)(v17 + 12 * *v13) + v19;
        if (v20 > *(void *)(v17 + 12 * (int)v15))
        {
          uint64_t result = operations_research::sat::PrecedencesPropagator::EnqueueAndCheck((uint64_t)this, v13, v20, *((void *)this + 6));
          if (!result) {
            return result;
          }
        }
      }
    }
    ++v10;
    v11 -= 4;
    if (!v11) {
      goto LABEL_3;
    }
  }
}

uint64_t operations_research::sat::PrecedencesPropagator::EnqueueAndCheck(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void **)(a1 + 400);
  unint64_t v6 = *(int **)(a1 + 400);
  *(void *)(a1 + 408) = v6;
  unint64_t v7 = *((void *)a2 + 3);
  if (v7) {
    uint64_t v8 = (_DWORD *)*((void *)a2 + 4);
  }
  else {
    uint64_t v8 = a2 + 8;
  }
  if (v7 >= 2)
  {
    unint64_t v16 = &v8[v7 >> 1];
    uint64_t v112 = v16;
    do
    {
      while (1)
      {
        int v17 = *v8 ^ 1;
        unint64_t v18 = *(void *)(a1 + 416);
        if ((unint64_t)v6 >= v18) {
          break;
        }
        *v6++ = v17;
        *(void *)(a1 + 408) = v6;
        if (++v8 == v16) {
          goto LABEL_5;
        }
      }
      uint64_t v19 = v5;
      uint64_t v20 = (int *)*v5;
      uint64_t v21 = (char *)v6 - (unsigned char *)*v5;
      uint64_t v22 = v21 >> 2;
      unint64_t v23 = (v21 >> 2) + 1;
      if (v23 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v18 - (void)v20;
      if (v24 >> 1 > v23) {
        unint64_t v23 = v24 >> 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 >> 62) {
          goto LABEL_106;
        }
        int v26 = operator new(4 * v25);
        uint64_t v27 = (int *)&v26[4 * v22];
        *uint64_t v27 = v17;
        uint64_t v28 = (uint64_t)(v27 + 1);
        if (v6 == v20) {
          goto LABEL_24;
        }
      }
      else
      {
        int v26 = 0;
        uint64_t v27 = (int *)(4 * v22);
        *(_DWORD *)(4 * v22) = v17;
        uint64_t v28 = 4 * v22 + 4;
        if (v6 == v20) {
          goto LABEL_24;
        }
      }
      unint64_t v29 = (char *)(v6 - 1) - (char *)v20;
      if (v29 >= 0xBC)
      {
        if (&v26[v21 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v21 - 4])
        {
          unint64_t v30 = v6;
        }
        else if ((int *)((char *)v6 - (v29 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v6 - 1)
        {
          unint64_t v30 = v6;
        }
        else if ((unint64_t)((char *)v6 - &v26[v21]) >= 0x20)
        {
          uint64_t v32 = (v29 >> 2) + 1;
          uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v30 = &v6[v33 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v27 = (int *)((char *)v27 - v33);
          unint64_t v34 = &v26[4 * v22 - 16];
          uint64_t v35 = v6 - 4;
          uint64_t v36 = v32 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *unint64_t v34 = v37;
            v34 -= 2;
            v35 -= 8;
            v36 -= 8;
          }
          while (v36);
          if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v30 = v6;
        }
      }
      else
      {
        unint64_t v30 = v6;
      }
      do
      {
        int v31 = *--v30;
        *--uint64_t v27 = v31;
      }
      while (v30 != v20);
LABEL_24:
      *(void *)(a1 + 400) = v27;
      *(void *)(a1 + 408) = v28;
      *(void *)(a1 + 416) = &v26[4 * v25];
      if (v20) {
        operator delete(v20);
      }
      uint64_t v5 = v19;
      unint64_t v16 = v112;
      *(void *)(a1 + 408) = v28;
      ++v8;
      unint64_t v6 = (int *)v28;
    }
    while (v8 != v112);
  }
LABEL_5:
  unint64_t v9 = v5;
  unint64_t v10 = *(_DWORD **)(a1 + 424);
  *(void *)(a1 + 432) = v10;
  unint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 40) + 12 * *a2);
  LODWORD(v114) = *a2;
  *(void *)((char *)&v114 + 4) = v11;
  unint64_t v12 = HIDWORD(v11);
  unint64_t v13 = *(void *)(a1 + 440);
  if ((unint64_t)v10 >= v13)
  {
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v10) >> 2);
    uint64_t v39 = 2 * v38;
    if (2 * v38 <= 1) {
      uint64_t v39 = 1;
    }
    if (v38 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v40 = 0x1555555555555555;
    }
    else {
      unint64_t v40 = v39;
    }
    if (v40 > 0x1555555555555555) {
      goto LABEL_106;
    }
    uint64_t v41 = 3 * v40;
    int v42 = operator new(12 * v40);
    *(void *)int v42 = v114;
    v42[2] = v12;
    unint64_t v14 = v42 + 3;
    *(void *)(a1 + 424) = v42;
    *(void *)(a1 + 432) = v42 + 3;
    *(void *)(a1 + 440) = &v42[v41];
    uint64_t v15 = a3;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(void *)unint64_t v10 = v114;
    v10[2] = v12;
    unint64_t v14 = v10 + 3;
    uint64_t v15 = a3;
  }
  uint64_t v43 = (void *)(a1 + 424);
  *(void *)(a1 + 432) = v14;
  uint64_t v44 = *(void *)(a1 + 56);
  int v45 = a2[1];
  uint64_t v46 = *(void *)(*(void *)(v44 + 40) + 12 * (v45 ^ 1));
  if (-v46 < v15)
  {
    LODWORD(v114) = v45 ^ 1;
    *(void *)((char *)&v114 + 4) = v46;
    int64_t v48 = *(_DWORD **)(a1 + 432);
    unint64_t v47 = *(void *)(a1 + 440);
    if ((unint64_t)v48 < v47)
    {
      *(void *)int64_t v48 = v114;
      uint64_t v48[2] = HIDWORD(v46);
      uint64_t v49 = v48 + 3;
      goto LABEL_67;
    }
    uint64_t v55 = (_DWORD *)*v43;
    unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *v43) >> 2);
    unint64_t v57 = v56 + 1;
    if (v56 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (void)v55) >> 2);
    if (2 * v58 > v57) {
      unint64_t v57 = 2 * v58;
    }
    if (v58 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v59 = 0x1555555555555555;
    }
    else {
      unint64_t v59 = v57;
    }
    if (!v59)
    {
      uint64_t v60 = 0;
LABEL_62:
      uint64_t v61 = &v60[12 * v56];
      int v62 = &v60[12 * v59];
      *(void *)uint64_t v61 = v114;
      *((_DWORD *)v61 + 2) = HIDWORD(v46);
      uint64_t v49 = v61 + 12;
      if (v48 == v55)
      {
        uint64_t v15 = a3;
        *(void *)(a1 + 424) = v61;
        *(void *)(a1 + 432) = v49;
        *(void *)(a1 + 440) = v62;
        if (v48) {
LABEL_66:
        }
          operator delete(v48);
      }
      else
      {
        uint64_t v15 = a3;
        do
        {
          uint64_t v63 = *(void *)(v48 - 3);
          v48 -= 3;
          int v64 = v48[2];
          *(void *)(v61 - 12) = v63;
          v61 -= 12;
          *((_DWORD *)v61 + 2) = v64;
        }
        while (v48 != v55);
        int64_t v48 = (_DWORD *)*v43;
        *(void *)(a1 + 424) = v61;
        *(void *)(a1 + 432) = v49;
        *(void *)(a1 + 440) = v62;
        if (v48) {
          goto LABEL_66;
        }
      }
LABEL_67:
      *(void *)(a1 + 432) = v49;
      uint64_t v65 = *(void *)(a1 + 424);
      uint64_t v115 = 0;
      long long v114 = 0uLL;
      uint64_t v66 = (uint64_t)v49 - v65;
      if (v66)
      {
        uint64_t v67 = v66 / 12;
        if ((unint64_t)(v66 / 12) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        size_t v68 = 8 * v67;
        unint64_t v69 = (char *)operator new(8 * v67);
        uint64_t v70 = &v69[8 * v67];
        memset_pattern16(v69, &unk_23CE8E230, v68);
      }
      else
      {
        uint64_t v70 = 0;
        unint64_t v69 = 0;
      }
      operations_research::sat::IntegerTrail::RelaxLinearReason(*(std::vector<int> **)(a1 + 56), v15 + v46 - 1, (uint64_t)v69, (v70 - v69) >> 3, (char **)(a1 + 424));
      uint64_t v71 = *(void *)(a1 + 56);
      int v72 = *(_DWORD *)(*(void *)(v71 + 408) + 4 * a2[1]);
      if (v72 == -1)
      {
        uint64_t v77 = *(char **)(a1 + 400);
        uint64_t v78 = *(char **)(a1 + 408);
        uint64_t v79 = *(uint64_t **)(a1 + 424);
        uint64_t v80 = *(void *)(a1 + 432);
        uint64_t v81 = *(void *)(v71 + 936);
        *(void *)(v81 + 144) = 0;
        uint64_t v82 = (void **)(v81 + 96);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v81 + 96), v77, v78, (v78 - v77) >> 2);
        operations_research::sat::IntegerTrail::MergeReasonInto(v71, v79, 0xAAAAAAAAAAAAAAABLL * ((v80 - (uint64_t)v79) >> 2), v82);
        goto LABEL_101;
      }
      unint64_t v73 = (unint64_t)v72 >> 6;
      if ((*(void *)(*(void *)(*(void *)(v71 + 936) + 24) + 8 * v73) >> v72))
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v113, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 468);
        uint64_t v108 = (void *)google::LogMessage::stream((google::LogMessage *)v113);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Check failed: !integer_trail_->IsCurrentlyIgnored(arc.head_var) ", 64);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v113);
      }
      if (((*(void *)(*(void *)(a4 + 24) + 8 * v73) >> (v72 & 0x3F ^ 1u)) & 1) == 0)
      {
        operations_research::sat::IntegerTrail::EnqueueLiteral(*(void *)(a1 + 56), *(_DWORD *)(*(void *)(v71 + 408) + 4 * a2[1]), *(char **)(a1 + 400), (uint64_t)(*(void *)(a1 + 408) - *(void *)(a1 + 400)) >> 2, *(char **)(a1 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 432) - *(void *)(a1 + 424)) >> 2));
        uint64_t v83 = 1;
        if (!v69) {
          return v83;
        }
        goto LABEL_102;
      }
      int v75 = *(char **)(a1 + 408);
      unint64_t v74 = *(void *)(a1 + 416);
      if ((unint64_t)v75 < v74)
      {
        *(_DWORD *)int v75 = v72;
        uint64_t v76 = v75 + 4;
LABEL_100:
        *(void *)(a1 + 408) = v76;
        uint64_t v103 = *(char **)(a1 + 400);
        unint64_t v104 = *(uint64_t **)(a1 + 424);
        uint64_t v105 = *(void *)(a1 + 432);
        uint64_t v106 = *(void *)(v71 + 936);
        *(void *)(v106 + 144) = 0;
        unint64_t v107 = (void **)(v106 + 96);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v106 + 96), v103, v76, (v76 - v103) >> 2);
        operations_research::sat::IntegerTrail::MergeReasonInto(v71, v104, 0xAAAAAAAAAAAAAAABLL * ((v105 - (uint64_t)v104) >> 2), v107);
LABEL_101:
        uint64_t v83 = 0;
        if (!v69) {
          return v83;
        }
LABEL_102:
        operator delete(v69);
        return v83;
      }
      int v84 = (char *)*v9;
      uint64_t v85 = v75 - (unsigned char *)*v9;
      uint64_t v86 = v85 >> 2;
      unint64_t v87 = (v85 >> 2) + 1;
      if (v87 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v88 = v74 - (void)v84;
      if (v88 >> 1 > v87) {
        unint64_t v87 = v88 >> 1;
      }
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v87;
      }
      if (v89)
      {
        if (v89 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v90 = operator new(4 * v89);
        uint64_t v91 = &v90[4 * v86];
        uint64_t v92 = &v90[4 * v89];
        *uint64_t v91 = v72;
        uint64_t v76 = (char *)(v91 + 1);
        int64_t v93 = v75 - v84;
        if (v75 == v84) {
          goto LABEL_98;
        }
      }
      else
      {
        uint64_t v90 = 0;
        uint64_t v91 = (_DWORD *)(4 * v86);
        uint64_t v92 = 0;
        *(_DWORD *)(4 * v86) = v72;
        uint64_t v76 = (char *)(4 * v86 + 4);
        int64_t v93 = v75 - v84;
        if (v75 == v84)
        {
LABEL_98:
          *(void *)(a1 + 400) = v91;
          *(void *)(a1 + 408) = v76;
          *(void *)(a1 + 416) = v92;
          if (v84)
          {
            operator delete(v84);
            uint64_t v71 = *(void *)(a1 + 56);
          }
          goto LABEL_100;
        }
      }
      unint64_t v94 = v93 - 4;
      if (v94 < 0x2C) {
        goto LABEL_113;
      }
      if ((unint64_t)(v75 - v90 - v85) < 0x20) {
        goto LABEL_113;
      }
      uint64_t v95 = (v94 >> 2) + 1;
      uint64_t v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v97 = &v75[-v96];
      uint64_t v91 = (_DWORD *)((char *)v91 - v96);
      uint64_t v98 = &v90[4 * v86 - 16];
      uint64_t v99 = v75 - 16;
      uint64_t v100 = v95 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v101 = *(_OWORD *)v99;
        *(v98 - 1) = *((_OWORD *)v99 - 1);
        *uint64_t v98 = v101;
        v98 -= 2;
        v99 -= 32;
        v100 -= 8;
      }
      while (v100);
      int v75 = v97;
      if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_113:
        do
        {
          int v102 = *((_DWORD *)v75 - 1);
          v75 -= 4;
          *--uint64_t v91 = v102;
        }
        while (v75 != v84);
      }
      goto LABEL_98;
    }
    if (v59 <= 0x1555555555555555)
    {
      uint64_t v60 = (char *)operator new(12 * v59);
      goto LABEL_62;
    }
LABEL_106:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  LODWORD(v114) = a2[1];
  *(void *)((char *)&v114 + 4) = v15;
  uint64_t v50 = *(char **)(a1 + 400);
  uint64_t v51 = (uint64_t)(*(void *)(a1 + 408) - (void)v50) >> 2;
  uint64_t v52 = *(uint64_t **)(a1 + 424);
  uint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 432) - (void)v52) >> 2);

  return operations_research::sat::IntegerTrail::Enqueue(v44, v114, SHIDWORD(v15), v50, v51, v52, v53);
}

void sub_23CD411A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PrecedencesPropagator::InitializeBFQueueWithModifiedNodes(operations_research::sat::PrecedencesPropagator *this)
{
  uint64_t v2 = *((void *)this + 21) - *((void *)this + 20);
  uint64_t v3 = (uint64_t *)((char *)this + 496);
  std::vector<BOOL>::resize((uint64_t)this + 496, (int)(v2 >> 5), 0);
  uint64_t v4 = (void **)*((void *)this + 57);
  uint64_t v5 = (void **)*((void *)this + 58);
  unint64_t v6 = (char *)v5 - (char *)v4;
  if (v5 == v4)
  {
    unint64_t v11 = (void *)((char *)this + 488);
  }
  else
  {
    unint64_t v7 = *((void *)this + 60);
    uint64_t v8 = &v4[v7 >> 10];
    unint64_t v9 = (char *)*v8;
    unint64_t v10 = (int *)((char *)*v8 + 4 * (v7 & 0x3FF));
    unint64_t v11 = (void *)((char *)this + 488);
    uint64_t v12 = *(uint64_t *)((char *)v4 + (((*((void *)this + 61) + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
        + 4 * ((*((void *)this + 61) + v7) & 0x3FF);
    if (v10 != (int *)v12)
    {
      uint64_t v13 = *v3;
      do
      {
        unint64_t v14 = *v10++;
        *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v14);
        if ((char *)v10 - v9 == 4096)
        {
          uint64_t v15 = (int *)v8[1];
          ++v8;
          unint64_t v9 = (char *)v15;
          unint64_t v10 = v15;
        }
      }
      while (v10 != (int *)v12);
    }
  }
  *unint64_t v11 = 0;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v5 = (void **)*((void *)this + 58);
      uint64_t v4 = (void **)(*((void *)this + 57) + 8);
      *((void *)this + 57) = v4;
      unint64_t v6 = (char *)v5 - (char *)v4;
    }
    while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
  }
  unint64_t v16 = v6 >> 3;
  if (v16 == 1)
  {
    uint64_t v17 = 512;
  }
  else
  {
    if (v16 != 2) {
      goto LABEL_15;
    }
    uint64_t v17 = 1024;
  }
  *((void *)this + 60) = v17;
LABEL_15:
  unint64_t v18 = (int *)*((void *)this + 17);
  for (uint64_t i = (int *)*((void *)this + 18); v18 != i; ++v18)
  {
    int v20 = *v18;
    if (*v18 < (int)((unint64_t)v2 >> 5))
    {
      if (v5 == v4) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = (((char *)v5 - (char *)v4) << 7) - 1;
      }
      uint64_t v22 = *((void *)this + 61);
      unint64_t v23 = v22 + *((void *)this + 60);
      if (v21 == v23)
      {
        std::deque<int>::__add_back_capacity((uint64_t)this + 448);
        uint64_t v4 = (void **)*((void *)this + 57);
        uint64_t v5 = (void **)*((void *)this + 58);
        uint64_t v22 = *((void *)this + 61);
        unint64_t v23 = *((void *)this + 60) + v22;
      }
      (*(_DWORD **)((char *)v4 + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)))[v23 & 0x3FF] = v20;
      *unint64_t v11 = v22 + 1;
      *(void *)(*v3 + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    }
  }
}

uint64_t operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(operations_research::sat::PrecedencesPropagator *this, operations_research::sat::Trail *a2)
{
  unint64_t v3 = (int)((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 5);
  uint64_t v98 = (void *)((char *)this + 520);
  std::vector<BOOL>::resize((uint64_t)this + 520, v3, 0);
  __x[0] = -1;
  uint64_t v4 = *((void *)this + 68);
  unint64_t v5 = (*((void *)this + 69) - v4) >> 2;
  uint64_t v100 = (uint64_t *)((char *)this + 544);
  if (v3 <= v5)
  {
    if (v3 < v5) {
      *((void *)this + 69) = v4 + 4 * v3;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 544), v3 - v5, __x);
  }
  char v104 = 1;
  uint64_t v105 = this;
  uint64_t v6 = *((void *)this + 61);
  if (!v6)
  {
LABEL_88:
    uint64_t result = 1;
LABEL_89:
    unint64_t v89 = (int *)*((void *)this + 17);
    uint64_t v90 = (int *)*((void *)this + 18);
    if (v89 != v90) {
      goto LABEL_90;
    }
    return result;
  }
  uint64_t v96 = (uint64_t *)((char *)this + 456);
  uint64_t v97 = (void *)((char *)this + 400);
  while (1)
  {
    uint64_t v8 = (void **)*((void *)this + 57);
    unint64_t v9 = (*(int **)((char *)v8 + ((*((void *)this + 60) >> 7) & 0x1FFFFFFFFFFFFF8)))[*((void *)this + 60) & 0x3FFLL];
    unint64_t v10 = *((void *)this + 60) + 1;
    *((void *)this + 60) = v10;
    *((void *)this + 61) = v6 - 1;
    if (v10 >= 0x800)
    {
      operator delete(*v8);
      *((void *)this + 57) += 8;
      *((void *)this + 60) -= 1024;
    }
    uint64_t v7 = (v9 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(void *)(*((void *)this + 62) + v7) &= ~(1 << v9);
    if ((*(void *)(*((void *)this + 65) + v7) & (1 << v9)) == 0)
    {
      unint64_t v11 = (void *)(*((void *)this + 20) + 32 * v9);
      unint64_t v14 = *v11;
      uint64_t v13 = (int *)(v11 + 1);
      unint64_t v12 = v14;
      if (v14) {
        uint64_t v13 = *(int **)v13;
      }
      if (v12 >= 2) {
        break;
      }
    }
LABEL_8:
    uint64_t v6 = *((void *)this + 61);
    if (!v6) {
      goto LABEL_88;
    }
  }
  uint64_t v15 = *(void *)(*(void *)(*((void *)this + 7) + 40) + 12 * (int)v9);
  unint64_t v16 = &v13[v12 >> 1];
  while (1)
  {
    int v17 = *v13;
    uint64_t v18 = *((void *)this + 23);
    uint64_t v19 = v18 + ((uint64_t)*v13 << 6);
    int v20 = *(_DWORD *)(v19 + 16);
    uint64_t v21 = (void *)*((void *)this + 7);
    if (v20 == -1)
    {
      uint64_t v23 = 0;
      uint64_t v22 = v21[5];
    }
    else
    {
      uint64_t v22 = v21[5];
      uint64_t v23 = *(void *)(v22 + 12 * v20);
    }
    uint64_t v24 = *(void *)(v19 + 8) + v15 + v23;
    uint64_t v25 = v18 + ((uint64_t)v17 << 6);
    uint64_t v28 = *(int *)(v25 + 4);
    uint64_t v27 = (int *)(v25 + 4);
    uint64_t v26 = v28;
    if (v24 <= *(void *)(v22 + 12 * (int)v28)) {
      goto LABEL_16;
    }
    unint64_t v29 = *(int *)(v21[51] + 4 * v26);
    if (v29 != -1
      && ((*(void *)(*(void *)(v21[117] + 24) + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
    {
      goto LABEL_16;
    }
    uint64_t result = operations_research::sat::PrecedencesPropagator::EnqueueAndCheck((uint64_t)this, (int *)v19, *(void *)(v19 + 8) + v15 + v23, (uint64_t)a2);
    if (!result) {
      goto LABEL_89;
    }
    if (!operations_research::sat::PrecedencesPropagator::DisassembleSubtree(this, *v27, *(_DWORD *)v19, v98))
    {
      uint64_t v39 = *v27;
      uint64_t v40 = *v100;
      uint64_t v41 = *(int *)(*v100 + 4 * v39);
      if (v41 != -1) {
        *(unsigned char *)(*((void *)this + 23) + (v41 << 6) + 56) = 0;
      }
      if (*(void *)(*(void *)(*((void *)this + 7) + 40) + 12 * (int)v39) == v24) {
        *(unsigned char *)(*((void *)this + 23) + ((uint64_t)v17 << 6) + 56) = 1;
      }
      else {
        int v17 = -1;
      }
      *(_DWORD *)(v40 + 4 * v39) = v17;
      unint64_t v42 = *v27;
      uint64_t v43 = (v42 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(void *)(*((void *)this + 65) + v43) &= ~(1 << v42);
      uint64_t v44 = *((void *)this + 62);
      if ((*(void *)(v44 + v43) & (1 << v42)) == 0)
      {
        uint64_t v45 = *((void *)this + 58);
        uint64_t v46 = *v96;
        if (v45 == *v96) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = ((v45 - *v96) << 7) - 1;
        }
        uint64_t v48 = *((void *)this + 61);
        unint64_t v49 = v48 + *((void *)this + 60);
        if (v47 == v49)
        {
          std::deque<int>::__add_back_capacity((uint64_t)this + 448);
          uint64_t v46 = *((void *)this + 57);
          uint64_t v48 = *((void *)this + 61);
          unint64_t v49 = *((void *)this + 60) + v48;
          uint64_t v44 = *((void *)this + 62);
        }
        *(_DWORD *)(*(void *)(v46 + ((v49 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v49 & 0x3FF)) = v42;
        *((void *)this + 61) = v48 + 1;
        *(void *)(v44 + (((unint64_t)*v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v27;
      }
      goto LABEL_16;
    }
    *(void *)std::vector<int>::value_type __x = 0;
    int v102 = 0;
    uint64_t v103 = 0;
    operations_research::sat::PrecedencesPropagator::AnalyzePositiveCycle(this, v17, v31, __x, v97, (uint64_t)this + 424);
    if (*(char **)__x == v102)
    {
      uint64_t v50 = *((void *)this + 7);
      uint64_t v51 = (char *)*((void *)this + 50);
      uint64_t v52 = (char *)*((void *)this + 51);
      uint64_t v54 = (uint64_t *)*((void *)this + 53);
      uint64_t v53 = *((void *)this + 54);
      uint64_t v55 = *(void *)(v50 + 936);
      *(void *)(v55 + 144) = 0;
      unint64_t v56 = (void **)(v55 + 96);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v55 + 96), v51, v52, (v52 - v51) >> 2);
      operations_research::sat::IntegerTrail::MergeReasonInto(v50, v54, 0xAAAAAAAAAAAAAAABLL * ((v53 - (uint64_t)v54) >> 2), v56);
LABEL_83:
      int v60 = 0;
      uint64_t v61 = *(int **)__x;
      if (!*(void *)__x) {
        goto LABEL_85;
      }
LABEL_84:
      int v102 = (char *)v61;
      operator delete(v61);
      goto LABEL_85;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(*(int **)__x, v102, (uint64_t)&v106, 126 - 2 * __clz((uint64_t)&v102[-*(void *)__x] >> 2), 1);
    uint64_t v33 = *(int **)__x;
    uint64_t v32 = v102;
    if (*(char **)__x != v102)
    {
      unint64_t v34 = (char *)(*(void *)__x + 4);
      while (v34 != v102)
      {
        int v36 = *((_DWORD *)v34 - 1);
        int v35 = *(_DWORD *)v34;
        v34 += 4;
        if (v36 == v35)
        {
          long long v37 = v34 - 8;
          while (v34 != v32)
          {
            int v38 = v35;
            int v35 = *(_DWORD *)v34;
            if (v38 != *(_DWORD *)v34)
            {
              *((_DWORD *)v37 + 1) = v35;
              v37 += 4;
            }
            v34 += 4;
          }
          if (v32 == v37 + 4) {
            break;
          }
          uint64_t v32 = v37 + 4;
          int v102 = v37 + 4;
          if (v33 == (int *)(v37 + 4)) {
            goto LABEL_59;
          }
          goto LABEL_52;
        }
      }
    }
    if (v33 == (int *)v32) {
      goto LABEL_59;
    }
LABEL_52:
    unint64_t v57 = v33;
    do
    {
      int v58 = *v57;
      if (((*(void *)(*(void *)(*((void *)this + 6) + 24)
                       + (((unint64_t)v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v58 & 0x3F ^ 1u)) & 1) != 0)
      {
        uint64_t v63 = (char *)*((void *)this + 51);
        unint64_t v62 = *((void *)this + 52);
        if ((unint64_t)v63 < v62)
        {
          *(_DWORD *)uint64_t v63 = v58;
          int v64 = v63 + 4;
LABEL_82:
          *((void *)this + 51) = v64;
          uint64_t v83 = *((void *)this + 7);
          int v84 = (char *)*((void *)this + 50);
          uint64_t v86 = (uint64_t *)*((void *)this + 53);
          uint64_t v85 = *((void *)this + 54);
          uint64_t v87 = *(void *)(v83 + 936);
          *(void *)(v87 + 144) = 0;
          uint64_t v88 = (void **)(v87 + 96);
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v87 + 96), v84, v64, (v64 - v84) >> 2);
          operations_research::sat::IntegerTrail::MergeReasonInto(v83, v86, 0xAAAAAAAAAAAAAAABLL * ((v85 - (uint64_t)v86) >> 2), v88);
          goto LABEL_83;
        }
        uint64_t v65 = (char *)*v97;
        uint64_t v66 = (uint64_t)&v63[-*v97];
        uint64_t v67 = v66 >> 2;
        unint64_t v68 = (v66 >> 2) + 1;
        if (v68 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v69 = v62 - (void)v65;
        if (v69 >> 1 > v68) {
          unint64_t v68 = v69 >> 1;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          uint64_t v95 = &v63[-*v97];
          if (v70 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v71 = v70;
          int v72 = operator new(4 * v70);
          unint64_t v70 = v71;
          uint64_t v66 = (uint64_t)v95;
          unint64_t v73 = (int *)&v72[4 * v67];
          *unint64_t v73 = v58;
          int v64 = (char *)(v73 + 1);
          if (v63 == v65) {
            goto LABEL_80;
          }
        }
        else
        {
          int v72 = 0;
          unint64_t v73 = (int *)(4 * v67);
          *(_DWORD *)(4 * v67) = v58;
          int v64 = (char *)(4 * v67 + 4);
          if (v63 == v65)
          {
LABEL_80:
            *((void *)this + 50) = v73;
            *((void *)this + 51) = v64;
            *((void *)this + 52) = &v72[4 * v70];
            if (v65) {
              operator delete(v65);
            }
            goto LABEL_82;
          }
        }
        unint64_t v74 = v63 - 4 - v65;
        if (v74 < 0x2C) {
          goto LABEL_100;
        }
        if ((unint64_t)(v63 - &v72[v66]) < 0x20) {
          goto LABEL_100;
        }
        uint64_t v75 = (v74 >> 2) + 1;
        uint64_t v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v77 = &v63[-v76];
        unint64_t v73 = (int *)((char *)v73 - v76);
        uint64_t v78 = &v72[4 * v67 - 16];
        uint64_t v79 = v63 - 16;
        uint64_t v80 = v75 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v81 = *(_OWORD *)v79;
          *(v78 - 1) = *((_OWORD *)v79 - 1);
          *uint64_t v78 = v81;
          v78 -= 2;
          v79 -= 32;
          v80 -= 8;
        }
        while (v80);
        uint64_t v63 = v77;
        if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_100:
          do
          {
            int v82 = *((_DWORD *)v63 - 1);
            v63 -= 4;
            *--unint64_t v73 = v82;
          }
          while (v63 != v65);
        }
        goto LABEL_80;
      }
      ++v57;
    }
    while (v57 != (int *)v32);
    do
    {
      unint64_t v59 = *v33;
      if (((*(void *)(*(void *)(*((void *)this + 6) + 24) + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0) {
        operations_research::sat::IntegerTrail::EnqueueLiteral(*((void *)this + 7), v59, *((char **)this + 50), (uint64_t)(*((void *)this + 51) - *((void *)this + 50)) >> 2, *((char **)this + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 54) - *((void *)this + 53)) >> 2));
      }
      ++v33;
    }
    while (v33 != (int *)v32);
LABEL_59:
    int v60 = 1;
    uint64_t v61 = *(int **)__x;
    if (*(void *)__x) {
      goto LABEL_84;
    }
LABEL_85:
    if (!v60) {
      break;
    }
LABEL_16:
    if (++v13 == v16) {
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  unint64_t v89 = (int *)*((void *)this + 17);
  uint64_t v90 = (int *)*((void *)this + 18);
  if (v89 == v90) {
    return result;
  }
LABEL_90:
  uint64_t v91 = (*((void *)this + 21) - *((void *)this + 20)) >> 5;
  do
  {
    unint64_t v92 = *v89;
    if ((int)v92 < (int)v91)
    {
      uint64_t v93 = *v100;
      uint64_t v94 = *(int *)(*v100 + 4 * v92);
      if (v94 != -1)
      {
        *(unsigned char *)(*((void *)this + 23) + (v94 << 6) + 56) = 0;
        *(_DWORD *)(v93 + 4 * v92) = -1;
        *(void *)(*((void *)this + 65) + ((v92 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v92);
      }
    }
    ++v89;
  }
  while (v89 != v90);
  return result;
}

void sub_23CD41B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    absl::Cleanup<operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(operations_research::sat::Trail *)::$_0>::~Cleanup((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  absl::Cleanup<operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(operations_research::sat::Trail *)::$_0>::~Cleanup((uint64_t)&a20);
  _Unwind_Resume(a1);
}

int *operations_research::sat::PrecedencesPropagator::PropagateOptionalArcs(int **this, operations_research::sat::Trail *a2)
{
  unint64_t v3 = (operations_research::sat::PrecedencesPropagator *)this;
  uint64_t result = this[17];
  uint64_t v80 = (int *)*((void *)v3 + 18);
  if (result != v80)
  {
    long long v81 = (char **)((char *)v3 + 424);
    uint64_t v85 = (void **)((char *)v3 + 400);
    uint64_t v86 = v3;
    uint64_t v79 = a2;
    do
    {
      uint64_t v5 = *result;
      uint64_t v6 = *((void *)v3 + 26);
      if ((int)v5 >= (int)((unint64_t)(*((void *)v3 + 27) - v6) >> 5)) {
        return result;
      }
      uint64_t v7 = (void *)(v6 + 32 * v5);
      unint64_t v10 = *v7;
      unint64_t v9 = (int *)(v7 + 1);
      unint64_t v8 = v10;
      if (v10) {
        unint64_t v9 = *(int **)v9;
      }
      if (v8 < 2) {
        goto LABEL_3;
      }
      unint64_t v11 = &v9[v8 >> 1];
      int v82 = v11;
      uint64_t v83 = result;
      while (2)
      {
        uint64_t v13 = *v9;
        uint64_t v14 = *((void *)v3 + 29);
        uint64_t v15 = (unsigned int *)(v14 + (v13 << 6));
        int v17 = (unint64_t *)(v15 + 6);
        unint64_t v16 = *((void *)v15 + 3);
        uint64_t v18 = (int *)(v15 + 8);
        uint64_t v19 = (int *)(v15 + 8);
        if (v16) {
          uint64_t v19 = *(int **)v18;
        }
        if (v16 < 2) {
          goto LABEL_11;
        }
        int v20 = 0;
        uint64_t v21 = 4 * (v16 >> 1);
        do
        {
          int v23 = *v19++;
          int v22 = v23;
          if (((1 << v23) & *(void *)(*((void *)a2 + 3) + (((unint64_t)v23 >> 3) & 0x1FFFFFFFFFFFFFF8))) == 0)
          {
            int v2 = v22;
            ++v20;
          }
          v21 -= 4;
        }
        while (v21);
        if (v20 != 1
          || ((*(void *)(*((void *)a2 + 3) + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v2 & 0x3F ^ 1u)) & 1) != 0)
        {
          goto LABEL_11;
        }
        uint64_t v24 = *(void *)(*((void *)v3 + 7) + 40);
        uint64_t v25 = v14 + (v13 << 6);
        int v28 = *(_DWORD *)(v25 + 4);
        uint64_t v27 = v25 + 4;
        int v26 = v28;
        int v29 = *(_DWORD *)(v27 + 12);
        uint64_t v30 = v29 == -1 ? 0 : *(void *)(v24 + 12 * v29);
        unsigned int v31 = *v15;
        unint64_t v32 = *(void *)(v24 + 12 * (int)v31);
        if ((int64_t)(*(void *)(v27 + 4) + v32 + v30) <= -*(void *)(v24 + 12 * (v26 ^ 1))) {
          goto LABEL_11;
        }
        uint64_t v33 = (char *)*((void *)v3 + 53);
        *((void *)v3 + 54) = v33;
        unint64_t v88 = __PAIR64__(v32, v31);
        unint64_t v34 = HIDWORD(v32);
        unint64_t v35 = *((void *)v3 + 55);
        if ((unint64_t)v33 >= v35)
        {
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v33) >> 2);
          uint64_t v38 = 2 * v37;
          if (2 * v37 <= 1) {
            uint64_t v38 = 1;
          }
          if (v37 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v39 = 0x1555555555555555;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39 > 0x1555555555555555) {
LABEL_90:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v40 = 3 * v39;
          uint64_t v41 = operator new(12 * v39);
          *(void *)uint64_t v41 = v88;
          unint64_t v42 = (char *)&v41[v40];
          v41[2] = v34;
          int v36 = (char *)(v41 + 3);
          unint64_t v3 = v86;
          *((void *)v86 + 53) = v41;
          *((void *)v86 + 54) = v41 + 3;
          *((void *)v86 + 55) = v42;
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(void *)uint64_t v33 = v88;
          *((_DWORD *)v33 + 2) = HIDWORD(v32);
          int v36 = v33 + 12;
          unint64_t v3 = v86;
        }
        *((void *)v3 + 54) = v36;
        *(_DWORD *)unint64_t v89 = *(_DWORD *)v27 ^ 1;
        *(void *)&v89[4] = *(void *)(*(void *)(*((void *)v3 + 7) + 40) + 12 * *(int *)v89);
        uint64_t v43 = *(void *)v89;
        unint64_t v44 = *((void *)v3 + 55);
        if ((unint64_t)v36 >= v44)
        {
          uint64_t v46 = *v81;
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *v81) >> 2);
          unint64_t v48 = v47 + 1;
          if (v47 + 1 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (void)v46) >> 2);
          if (2 * v49 > v48) {
            unint64_t v48 = 2 * v49;
          }
          if (v49 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v50 = 0x1555555555555555;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            if (v50 > 0x1555555555555555) {
              goto LABEL_90;
            }
            uint64_t v51 = (char *)operator new(12 * v50);
            uint64_t v43 = *(void *)v89;
          }
          else
          {
            uint64_t v51 = 0;
          }
          uint64_t v52 = &v51[12 * v47];
          uint64_t v53 = &v51[12 * v50];
          *(void *)uint64_t v52 = v43;
          *((_DWORD *)v52 + 2) = *(_DWORD *)&v89[8];
          uint64_t v45 = v52 + 12;
          if (v36 == v46)
          {
            unint64_t v3 = v86;
            *((void *)v86 + 53) = v52;
            *((void *)v86 + 54) = v45;
            *((void *)v86 + 55) = v53;
          }
          else
          {
            unint64_t v3 = v86;
            do
            {
              uint64_t v54 = *(void *)(v36 - 12);
              v36 -= 12;
              int v55 = *((_DWORD *)v36 + 2);
              *(void *)(v52 - 12) = v54;
              v52 -= 12;
              *((_DWORD *)v52 + 2) = v55;
            }
            while (v36 != v46);
            int v36 = (char *)*((void *)v86 + 53);
            *((void *)v86 + 53) = v52;
            *((void *)v86 + 54) = v45;
            *((void *)v86 + 55) = v53;
            if (!v36) {
              goto LABEL_54;
            }
          }
          operator delete(v36);
        }
        else
        {
          *(void *)int v36 = *(void *)v89;
          *((_DWORD *)v36 + 2) = *(_DWORD *)&v89[8];
          uint64_t v45 = v36 + 12;
        }
LABEL_54:
        *((void *)v3 + 54) = v45;
        unint64_t v56 = (char *)*((void *)v3 + 50);
        *((void *)v3 + 51) = v56;
        unint64_t v57 = *v17;
        if (*v17) {
          uint64_t v18 = *(int **)v18;
        }
        if (v57 < 2)
        {
          unint64_t v12 = v56;
          goto LABEL_10;
        }
        int v58 = &v18[v57 >> 1];
        int v84 = v58;
        do
        {
          if (*v18 != v2)
          {
            int v60 = *v18 ^ 1;
            unint64_t v61 = *((void *)v3 + 52);
            if ((unint64_t)v56 < v61)
            {
              *(_DWORD *)unint64_t v56 = v60;
              uint64_t v59 = (uint64_t)(v56 + 4);
            }
            else
            {
              unint64_t v62 = (char *)*v85;
              uint64_t v63 = v56 - (unsigned char *)*v85;
              uint64_t v64 = v63 >> 2;
              unint64_t v65 = (v63 >> 2) + 1;
              if (v65 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v66 = v61 - (void)v62;
              if (v66 >> 1 > v65) {
                unint64_t v65 = v66 >> 1;
              }
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              unint64_t v87 = v65;
              if (v65)
              {
                if (v65 >> 62) {
                  goto LABEL_90;
                }
                uint64_t v67 = operator new(4 * v65);
                unint64_t v68 = (int *)&v67[4 * v64];
                int *v68 = v60;
                uint64_t v59 = (uint64_t)(v68 + 1);
                if (v56 != v62)
                {
LABEL_71:
                  unint64_t v69 = v56 - 4 - v62;
                  if (v69 < 0xBC
                    || &v67[v63 - 4 - (v69 & 0xFFFFFFFFFFFFFFFCLL)] > &v67[v63 - 4]
                    || &v56[-(v69 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v56 - 4
                    || (unint64_t)(v56 - v67 - v63) < 0x20)
                  {
                    unint64_t v70 = v56;
                    unint64_t v3 = v86;
                    unint64_t v71 = v87;
                  }
                  else
                  {
                    uint64_t v73 = (v69 >> 2) + 1;
                    uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                    unint64_t v70 = &v56[-v74];
                    unint64_t v68 = (int *)((char *)v68 - v74);
                    uint64_t v75 = &v67[4 * v64 - 16];
                    uint64_t v76 = v56 - 16;
                    uint64_t v77 = v73 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v78 = *(_OWORD *)v76;
                      *(v75 - 1) = *((_OWORD *)v76 - 1);
                      *uint64_t v75 = v78;
                      v75 -= 2;
                      v76 -= 32;
                      v77 -= 8;
                    }
                    while (v77);
                    unint64_t v3 = v86;
                    unint64_t v71 = v87;
                    if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_74:
                      *((void *)v3 + 50) = v68;
                      *((void *)v3 + 51) = v59;
                      *((void *)v3 + 52) = &v67[4 * v71];
                      if (v62) {
                        goto LABEL_75;
                      }
                      goto LABEL_76;
                    }
                  }
                  do
                  {
                    int v72 = *((_DWORD *)v70 - 1);
                    v70 -= 4;
                    *--unint64_t v68 = v72;
                  }
                  while (v70 != v62);
                  goto LABEL_74;
                }
              }
              else
              {
                uint64_t v67 = 0;
                unint64_t v68 = (int *)(4 * v64);
                *(_DWORD *)(4 * v64) = v60;
                uint64_t v59 = 4 * v64 + 4;
                if (v56 != v62) {
                  goto LABEL_71;
                }
              }
              unint64_t v3 = v86;
              *((void *)v86 + 50) = v68;
              *((void *)v86 + 51) = v59;
              *((void *)v86 + 52) = &v67[4 * v87];
              if (v62) {
LABEL_75:
              }
                operator delete(v62);
LABEL_76:
              int v58 = v84;
            }
            *((void *)v3 + 51) = v59;
            unint64_t v56 = (char *)v59;
          }
          ++v18;
        }
        while (v18 != v58);
        unint64_t v12 = (char *)*v85;
LABEL_10:
        operations_research::sat::IntegerTrail::EnqueueLiteral(*((void *)v3 + 7), v2 ^ 1, v12, (v56 - v12) >> 2, *((char **)v3 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v3 + 54) - *((void *)v3 + 53)) >> 2));
        a2 = v79;
        unint64_t v11 = v82;
        uint64_t result = v83;
LABEL_11:
        if (++v9 != v11) {
          continue;
        }
        break;
      }
LABEL_3:
      ++result;
    }
    while (result != v80);
  }
  return result;
}

uint64_t non-virtual thunk to'operations_research::sat::PrecedencesPropagator::Propagate(operations_research::sat::PrecedencesPropagator *this)
{
  return operations_research::sat::PrecedencesPropagator::Propagate((operations_research::sat::PrecedencesPropagator *)((char *)this - 40));
}

uint64_t operations_research::sat::PrecedencesPropagator::PropagateOutgoingArcs(uint64_t *a1, int a2)
{
  unint64_t v3 = (void *)(a1[20] + 32 * a2);
  unint64_t v6 = *v3;
  uint64_t v5 = (int *)(v3 + 1);
  unint64_t v4 = v6;
  if (v6) {
    uint64_t v5 = *(int **)v5;
  }
  if (v4 < 2) {
    return 1;
  }
  uint64_t v8 = 4 * (v4 >> 1);
  while (1)
  {
    unint64_t v9 = (int *)(a1[23] + ((uint64_t)*v5 << 6));
    unint64_t v10 = (void *)a1[7];
    uint64_t v11 = v9[1];
    unint64_t v12 = *(int *)(v10[51] + 4 * v11);
    if (v12 == -1
      || ((*(void *)(*(void *)(v10[117] + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    {
      uint64_t v13 = v10[5];
      int v14 = v9[4];
      uint64_t v15 = v14 == -1 ? 0 : *(void *)(v13 + 12 * v14);
      uint64_t v16 = *((void *)v9 + 1) + *(void *)(v13 + 12 * *v9) + v15;
      if (v16 > *(void *)(v13 + 12 * (int)v11))
      {
        uint64_t result = operations_research::sat::PrecedencesPropagator::EnqueueAndCheck((uint64_t)a1, v9, v16, a1[6]);
        if (!result) {
          break;
        }
      }
    }
    ++v5;
    v8 -= 4;
    if (!v8) {
      return 1;
    }
  }
  return result;
}

void operations_research::sat::PrecedencesPropagator::Untrail(operations_research::sat::PrecedencesPropagator *this, const operations_research::sat::Trail *a2, int a3)
{
  int v6 = *((_DWORD *)this + 9);
  if (v6 > a3)
  {
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 80, -1431655765 * ((*(void *)(*((void *)this + 7) + 48) - *(void *)(*((void *)this + 7) + 40)) >> 2));
    int v6 = *((_DWORD *)this + 9);
  }
  if (v6 > a3)
  {
    uint64_t v7 = *((void *)a2 + 9);
    uint64_t v8 = *((void *)this + 44);
    unint64_t v9 = (unint64_t)(*((void *)this + 45) - v8) >> 5;
    do
    {
      *((_DWORD *)this + 9) = --v6;
      uint64_t v10 = *(int *)(v7 + 4 * v6);
      if ((int)v10 < (int)v9)
      {
        uint64_t v11 = (void *)(v8 + 32 * v10);
        unint64_t v14 = *v11;
        unint64_t v12 = (int *)(v11 + 1);
        unint64_t v13 = v14;
        if (v14) {
          unint64_t v12 = *(int **)v12;
        }
        if (v13 >= 2)
        {
          uint64_t v15 = *((void *)this + 47);
          uint64_t v16 = 4 * (v13 >> 1);
          do
          {
            uint64_t v17 = *v12;
            int v18 = *(_DWORD *)(v15 + 4 * v17);
            *(_DWORD *)(v15 + 4 * v17) = v18 + 1;
            if (!v18)
            {
              uint64_t v19 = 32 * *(int *)(*((void *)this + 23) + (v17 << 6));
              *(void *)(*((void *)this + 20) + v19) -= 2;
            }
            ++v12;
            v16 -= 4;
          }
          while (v16);
          int v6 = *((_DWORD *)this + 9);
        }
      }
    }
    while (v6 > a3);
  }
}

void operations_research::sat::PrecedencesPropagator::ComputePrecedences(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int v6 = (char *)a1[38];
  a1[39] = v6;
  a1[42] = a1[41];
  uint64_t v7 = *a2;
  int v82 = a2;
  if (a2[1] != *a2)
  {
    unint64_t v8 = 0;
    long long v81 = (void **)(a1 + 38);
    int v84 = (void **)(a1 + 41);
    while (1)
    {
      int v9 = *(_DWORD *)(v7 + 4 * v8);
      int v87 = v9;
      if (v9 == -1) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>((int)&operations_research::sat::kNoIntegerVariable, (int)&v87, "kNoIntegerVariable != var");
      }
      uint64_t v10 = a1[20];
      if (v9 < (int)((unint64_t)(a1[21] - v10) >> 5))
      {
        uint64_t v11 = (void *)(v10 + 32 * v9);
        unint64_t v14 = *v11;
        unint64_t v13 = (int *)(v11 + 1);
        unint64_t v12 = v14;
        if (v14) {
          unint64_t v13 = *(int **)v13;
        }
        if (v12 >= 2) {
          break;
        }
      }
LABEL_3:
      ++v8;
      uint64_t v7 = *v82;
      if (v8 >= (v82[1] - *v82) >> 2)
      {
        unint64_t v55 = a1[38];
        int v6 = (char *)a1[39];
        uint64_t v3 = a3;
        goto LABEL_59;
      }
    }
    uint64_t v15 = &v13[v12 >> 1];
    uint64_t v85 = v15;
    unint64_t v80 = v8;
    while (1)
    {
      int v17 = *v13;
      int v18 = (void *)a1[7];
      uint64_t v19 = a1[23] + ((uint64_t)*v13 << 6);
      uint64_t v21 = (int *)(v19 + 4);
      int v20 = *(_DWORD *)(v19 + 4);
      unint64_t v22 = *(int *)(v18[51] + 4 * v20);
      if (v22 != -1
        && ((*(void *)(*(void *)(v18[117] + 24) + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        goto LABEL_12;
      }
      uint64_t v23 = *(void *)(v19 + 8);
      int v24 = *(_DWORD *)(v19 + 16);
      if (v24 != -1) {
        v23 += *(void *)(v18[5] + 12 * v24);
      }
      if (v23 < 0) {
        goto LABEL_12;
      }
      uint64_t v25 = v20;
      uint64_t v26 = a1[32];
      if (*(_DWORD *)(v26 + 4 * v20))
      {
        uint64_t v27 = a1[35];
        if (v8 == *(_DWORD *)(v27 + 4 * v20)) {
          goto LABEL_12;
        }
        goto LABEL_36;
      }
      uint64_t v28 = *(void *)(v18[5] + 12 * v20);
      uint64_t v30 = (char *)a1[39];
      unint64_t v29 = a1[40];
      if ((unint64_t)v30 >= v29) {
        break;
      }
      *(_DWORD *)uint64_t v30 = v20;
      *(void *)(v30 + 4) = v28;
      unsigned int v31 = v30 + 12;
LABEL_35:
      a1[39] = v31;
      uint64_t v25 = *v21;
      uint64_t v27 = a1[35];
      uint64_t v26 = a1[32];
LABEL_36:
      *(_DWORD *)(v27 + 4 * v25) = v8;
      ++*(_DWORD *)(v26 + 4 * *v21);
      int v43 = *v21;
      uint64_t v45 = (char *)a1[42];
      unint64_t v44 = a1[43];
      if ((unint64_t)v45 < v44)
      {
        *(_DWORD *)uint64_t v45 = v8;
        *((_DWORD *)v45 + 1) = v43;
        *((_DWORD *)v45 + 2) = v17;
        uint64_t v16 = v45 + 20;
        *(void *)(v45 + 12) = v23;
      }
      else
      {
        uint64_t v46 = (char *)*v84;
        unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (unsigned char *)*v84) >> 2);
        unint64_t v48 = v47 + 1;
        if (v47 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (void)v46) >> 2);
        if (2 * v49 > v48) {
          unint64_t v48 = 2 * v49;
        }
        if (v49 >= 0x666666666666666) {
          unint64_t v50 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          if (v50 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_86:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v51 = (char *)operator new(20 * v50);
        }
        else
        {
          uint64_t v51 = 0;
        }
        uint64_t v52 = &v51[20 * v47];
        *(_DWORD *)uint64_t v52 = v8;
        *((_DWORD *)v52 + 1) = v43;
        *((_DWORD *)v52 + 2) = v17;
        *(void *)(v52 + 12) = v23;
        uint64_t v53 = v52;
        if (v45 != v46)
        {
          do
          {
            long long v54 = *(_OWORD *)(v45 - 20);
            *((_DWORD *)v53 - 1) = *((_DWORD *)v45 - 1);
            *(_OWORD *)(v53 - 20) = v54;
            v53 -= 20;
            v45 -= 20;
          }
          while (v45 != v46);
          uint64_t v45 = (char *)*v84;
        }
        uint64_t v16 = v52 + 20;
        a1[41] = v53;
        a1[42] = v52 + 20;
        a1[43] = &v51[20 * v50];
        if (v45) {
          operator delete(v45);
        }
        uint64_t v15 = v85;
      }
      a1[42] = v16;
LABEL_12:
      if (++v13 == v15) {
        goto LABEL_3;
      }
    }
    unint64_t v32 = (char *)*v81;
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (unsigned char *)*v81) >> 2);
    unint64_t v34 = v33 + 1;
    if (v33 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)v32) >> 2);
    if (2 * v35 > v34) {
      unint64_t v34 = 2 * v35;
    }
    if (v35 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v34 = 0x1555555555555555;
    }
    unint64_t v83 = v34;
    if (v34)
    {
      if (v34 > 0x1555555555555555) {
        goto LABEL_86;
      }
      uint64_t v36 = v28;
      unint64_t v37 = (char *)operator new(12 * v34);
      uint64_t v38 = v36;
      unint64_t v8 = v80;
      uint64_t v39 = (uint64_t)&v37[12 * v33];
      *(_DWORD *)uint64_t v39 = v20;
      *(void *)(v39 + 4) = v38;
      uint64_t v40 = v39;
      if (v30 != v32)
      {
        do
        {
LABEL_31:
          uint64_t v41 = *(void *)(v30 - 12);
          v30 -= 12;
          int v42 = *((_DWORD *)v30 + 2);
          *(void *)(v40 - 12) = v41;
          v40 -= 12;
          *(_DWORD *)(v40 + 8) = v42;
        }
        while (v30 != v32);
        uint64_t v30 = (char *)*v81;
        unsigned int v31 = (char *)(v39 + 12);
        a1[38] = v40;
        a1[39] = v39 + 12;
        a1[40] = &v37[12 * v83];
        if (!v30) {
          goto LABEL_34;
        }
LABEL_33:
        operator delete(v30);
LABEL_34:
        uint64_t v15 = v85;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v37 = 0;
      uint64_t v39 = 4 * ((v30 - (unsigned char *)*v81) >> 2);
      *(_DWORD *)uint64_t v39 = v20;
      *(void *)(v39 + 4) = v28;
      uint64_t v40 = 12 * v33;
      if (v30 != v32) {
        goto LABEL_31;
      }
    }
    unsigned int v31 = (char *)(v39 + 12);
    a1[38] = v40;
    a1[39] = v39 + 12;
    a1[40] = &v37[12 * v83];
    if (!v30) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  unint64_t v55 = (unint64_t)v6;
LABEL_59:
  unint64_t v56 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-v55] >> 2));
  if (v6 == (char *)v55) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = v56;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *,false>(v55, v6, (uint64_t)v86, v57, 1);
  int v58 = (int *)a1[38];
  uint64_t v59 = (int *)a1[39];
  if (v58 == v59)
  {
    unint64_t v66 = 0;
  }
  else
  {
    int v60 = 0;
    uint64_t v61 = a1[32];
    do
    {
      uint64_t v62 = *v58;
      v58 += 3;
      uint64_t v63 = 4 * v62;
      int v64 = *(_DWORD *)(v61 + 4 * v62);
      if (v64 <= 1) {
        int v65 = -1;
      }
      else {
        int v65 = v60;
      }
      if (v64 <= 1) {
        int v64 = 0;
      }
      v60 += v64;
      *(_DWORD *)(v61 + v63) = v65;
    }
    while (v58 != v59);
    unint64_t v66 = v60;
  }
  unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  if (v66 <= v67)
  {
    if (v66 < v67) {
      *(void *)(v3 + 8) = *(void *)v3 + 20 * (int)v66;
    }
  }
  else
  {
    std::vector<operations_research::sat::IntegerTrail::TrailEntry>::__append((char **)v3, v66 - v67);
  }
  unint64_t v68 = (long long *)a1[41];
  for (i = (long long *)a1[42]; v68 != i; unint64_t v68 = (long long *)((char *)v68 + 20))
  {
    uint64_t v70 = *((int *)v68 + 1);
    uint64_t v71 = a1[32];
    unsigned int v72 = *(_DWORD *)(v71 + 4 * v70);
    if ((v72 & 0x80000000) == 0)
    {
      *(_DWORD *)(v71 + 4 * v70) = v72 + 1;
      uint64_t v73 = *(void *)v3 + 20 * v72;
      long long v74 = *v68;
      *(_DWORD *)(v73 + 16) = *((_DWORD *)v68 + 4);
      *(_OWORD *)uint64_t v73 = v74;
    }
  }
  uint64_t v75 = (int *)a1[38];
  uint64_t v76 = (int *)a1[39];
  if (v75 != v76)
  {
    uint64_t v77 = a1[32];
    do
    {
      uint64_t v78 = *v75;
      v75 += 3;
      *(_DWORD *)(v77 + 4 * v78) = 0;
    }
    while (v75 != v76);
  }
}

void sub_23CD429F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PrecedencesPropagator::AddPrecedenceReason(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char **a5)
{
  uint64_t v46 = *(void *)(a1 + 184);
  uint64_t v47 = a2;
  uint64_t v6 = v46 + ((uint64_t)a2 << 6);
  unint64_t v7 = *(void *)(v6 + 24);
  unint64_t v8 = (void *)(v6 + 32);
  if (v7) {
    unint64_t v8 = (void *)*v8;
  }
  if (v7 >= 2)
  {
    unint64_t v13 = (void *)((char *)v8 + 4 * (v7 >> 1));
    unint64_t v14 = *(char **)(a4 + 8);
    while (1)
    {
      int v16 = *(_DWORD *)v8 ^ 1;
      unint64_t v17 = *(void *)(a4 + 16);
      if ((unint64_t)v14 >= v17) {
        break;
      }
      *(_DWORD *)unint64_t v14 = v16;
      uint64_t v15 = (uint64_t)(v14 + 4);
LABEL_9:
      *(void *)(a4 + 8) = v15;
      unint64_t v8 = (void *)((char *)v8 + 4);
      unint64_t v14 = (char *)v15;
      if (v8 == v13) {
        goto LABEL_4;
      }
    }
    int v18 = *(char **)a4;
    uint64_t v19 = (uint64_t)&v14[-*(void *)a4];
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = (v19 >> 2) + 1;
    if (v21 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v17 - (void)v18;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 62) {
        goto LABEL_55;
      }
      int v24 = operator new(4 * v23);
      uint64_t v25 = (int *)&v24[4 * v20];
      *uint64_t v25 = v16;
      uint64_t v15 = (uint64_t)(v25 + 1);
      if (v14 == v18) {
        goto LABEL_25;
      }
    }
    else
    {
      int v24 = 0;
      uint64_t v25 = (int *)(4 * v20);
      *(_DWORD *)(4 * v20) = v16;
      uint64_t v15 = 4 * v20 + 4;
      if (v14 == v18) {
        goto LABEL_25;
      }
    }
    unint64_t v26 = v14 - 4 - v18;
    if (v26 >= 0xBC)
    {
      if (&v24[v19 - 4 - (v26 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v19 - 4])
      {
        uint64_t v27 = v14;
      }
      else if (&v14[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
      {
        uint64_t v27 = v14;
      }
      else if ((unint64_t)(v14 - &v24[v19]) >= 0x20)
      {
        uint64_t v29 = (v26 >> 2) + 1;
        uint64_t v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v27 = &v14[-v30];
        uint64_t v25 = (int *)((char *)v25 - v30);
        unsigned int v31 = &v24[4 * v20 - 16];
        unint64_t v32 = v14 - 16;
        uint64_t v33 = v29 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *unsigned int v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 8;
        }
        while (v33);
        if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_25:
          *(void *)a4 = v25;
          *(void *)(a4 + 8) = v15;
          *(void *)(a4 + 16) = &v24[4 * v23];
          if (v18) {
            operator delete(v18);
          }
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v27 = v14;
      }
    }
    else
    {
      uint64_t v27 = v14;
    }
    do
    {
      int v28 = *((_DWORD *)v27 - 1);
      v27 -= 4;
      *--uint64_t v25 = v28;
    }
    while (v27 != v18);
    goto LABEL_25;
  }
LABEL_4:
  uint64_t v9 = v46 + (v47 << 6);
  if (*(_DWORD *)(v9 + 16) != -1)
  {
    *(_DWORD *)unint64_t v48 = *(_DWORD *)(v9 + 16);
    *(void *)&v48[4] = a3 - *(void *)(v9 + 8);
    uint64_t v11 = a5[1];
    unint64_t v10 = (unint64_t)a5[2];
    if ((unint64_t)v11 >= v10)
    {
      unint64_t v35 = *a5;
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a5) >> 2);
      unint64_t v37 = v36 + 1;
      if (v36 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v35) >> 2);
      if (2 * v38 > v37) {
        unint64_t v37 = 2 * v38;
      }
      if (v38 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v39 = 0x1555555555555555;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        if (v39 > 0x1555555555555555) {
LABEL_55:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v40 = (char *)operator new(12 * v39);
      }
      else
      {
        uint64_t v40 = 0;
      }
      uint64_t v41 = &v40[12 * v36];
      *(void *)uint64_t v41 = *(void *)v48;
      *((_DWORD *)v41 + 2) = *(_DWORD *)&v48[8];
      unint64_t v12 = v41 + 12;
      if (v11 != v35)
      {
        do
        {
          uint64_t v42 = *(void *)(v11 - 12);
          v11 -= 12;
          int v43 = *((_DWORD *)v11 + 2);
          *(void *)(v41 - 12) = v42;
          v41 -= 12;
          *((_DWORD *)v41 + 2) = v43;
        }
        while (v11 != v35);
        uint64_t v11 = *a5;
      }
      *a5 = v41;
      a5[1] = v12;
      a5[2] = &v40[12 * v39];
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *(void *)uint64_t v11 = *(void *)v48;
      *((_DWORD *)v11 + 2) = *(_DWORD *)&v48[8];
      unint64_t v12 = v11 + 12;
    }
    a5[1] = v12;
  }
}

void operations_research::sat::PrecedencesPropagator::AdjustSizeFor(uint64_t a1, int a2)
{
  int v2 = a2 | 1;
  uint64_t v4 = *(void *)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 168);
  uint64_t v5 = (uint64_t *)(a1 + 160);
  unint64_t v6 = v3 - v4;
  unint64_t v7 = (v3 - v4) >> 5;
  if (v7 <= (a2 | 1))
  {
    unint64_t v9 = v6 >> 5;
    if (v2 >= (int)(v6 >> 5))
    {
      do
      {
        operations_research::sat::GenericLiteralWatcher::WatchLowerBound(*(void *)(a1 + 64), v9, *(_DWORD *)(a1 + 72), 0xFFFFFFFFLL);
        LODWORD(v9) = v9 + 1;
      }
      while (v2 + 1 != v9);
      uint64_t v4 = *(void *)(a1 + 160);
      uint64_t v3 = *(void *)(a1 + 168);
      unint64_t v7 = (v3 - v4) >> 5;
    }
    unint64_t v10 = v2 + 1;
    if (v10 <= v7)
    {
      if (v10 < v7)
      {
        uint64_t v11 = v4 + 32 * v10;
        if (v3 != v11)
        {
          uint64_t v12 = v3;
          do
          {
            char v13 = *(unsigned char *)(v12 - 32);
            v12 -= 32;
            if (v13) {
              operator delete(*(void **)(v3 - 24));
            }
            uint64_t v3 = v12;
          }
          while (v12 != v11);
        }
        *(void *)(a1 + 168) = v11;
      }
    }
    else
    {
      std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(v5, v10 - v7);
    }
    uint64_t v15 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 216);
    unint64_t v16 = (v14 - v15) >> 5;
    if (v10 <= v16)
    {
      if (v10 < v16)
      {
        uint64_t v17 = v15 + 32 * v10;
        if (v14 != v17)
        {
          uint64_t v18 = *(void *)(a1 + 216);
          do
          {
            char v19 = *(unsigned char *)(v18 - 32);
            v18 -= 32;
            if (v19) {
              operator delete(*(void **)(v14 - 24));
            }
            uint64_t v14 = v18;
          }
          while (v18 != v17);
        }
        *(void *)(a1 + 216) = v17;
      }
    }
    else
    {
      std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)(a1 + 208), v10 - v16);
    }
    uint64_t v20 = *(void *)(a1 + 256);
    unint64_t v21 = (*(void *)(a1 + 264) - v20) >> 2;
    if (v10 <= v21)
    {
      if (v10 < v21) {
        *(void *)(a1 + 264) = v20 + 4 * v10;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)(a1 + 256), v10 - v21);
    }
    uint64_t v22 = *(void *)(a1 + 280);
    unint64_t v23 = (*(void *)(a1 + 288) - v22) >> 2;
    if (v10 <= v23)
    {
      if (v10 < v23) {
        *(void *)(a1 + 288) = v22 + 4 * v10;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)(a1 + 280), v10 - v23);
    }
  }
}

void operations_research::sat::PrecedencesPropagator::AddArc(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int *a6, uint64_t a7)
{
  uint64_t v328 = *MEMORY[0x263EF8340];
  operations_research::sat::PrecedencesPropagator::AdjustSizeFor(a1, a2);
  operations_research::sat::PrecedencesPropagator::AdjustSizeFor(a1, a3);
  if (a5 != -1) {
    operations_research::sat::PrecedencesPropagator::AdjustSizeFor(a1, a5);
  }
  int v314 = a5;
  int v315 = a2;
  int v317 = a3;
  unint64_t v325 = 0;
  uint64_t v311 = a7;
  unint64_t v12 = 0;
  if (a7)
  {
    char v13 = a6;
    uint64_t v14 = &a6[a7];
    do
    {
      while (1)
      {
        int v15 = *v13;
        unint64_t v16 = (void *)v326;
        uint64_t v17 = (v12 & 1) != 0 ? (long long *)v326 : &v326;
        unint64_t v18 = (v12 & 1) != 0 ? *((void *)&v326 + 1) : 6;
        if (v12 >> 1 == v18) {
          break;
        }
        *((_DWORD *)v17 + (v12 >> 1)) = v15;
        v12 += 2;
        unint64_t v325 = v12;
        if (++v13 == v14) {
          goto LABEL_25;
        }
      }
      if (((v18 >> 61) & 3) != 0) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v19 = (char *)operator new(8 * v18);
      uint64_t v20 = v19;
      *(_DWORD *)&v19[4 * v18] = v15;
      if (v12 >= 2)
      {
        unint64_t v21 = 0;
        if (v18 < 8) {
          goto LABEL_20;
        }
        if ((unint64_t)(v19 - (char *)v17) < 0x20) {
          goto LABEL_20;
        }
        unint64_t v21 = v18 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v22 = v19 + 16;
        unint64_t v23 = v17 + 1;
        unint64_t v24 = v18 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          *uint64_t v22 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
        uint64_t v17 = (long long *)((char *)v17 + 4 * (v18 & 0xFFFFFFFFFFFFFFF8));
        if (v18 != v21)
        {
LABEL_20:
          unint64_t v26 = v18 - v21;
          uint64_t v27 = &v19[4 * v21];
          do
          {
            int v28 = *(_DWORD *)v17;
            uint64_t v17 = (long long *)((char *)v17 + 4);
            *(_DWORD *)uint64_t v27 = v28;
            v27 += 4;
            --v26;
          }
          while (v26);
        }
      }
      if (v12) {
        operator delete(v16);
      }
      *(void *)&long long v326 = v20;
      *((void *)&v326 + 1) = 2 * v18;
      unint64_t v12 = (v12 | 1) + 2;
      unint64_t v325 = v12;
      ++v13;
    }
    while (v13 != v14);
  }
LABEL_25:
  uint64_t v29 = *(void *)(a1 + 56);
  uint64_t v30 = *(void *)(v29 + 408);
  int v31 = *(_DWORD *)(v30 + 4 * v315);
  if (v31 == -1)
  {
    int v47 = *(_DWORD *)(v30 + 4 * v317);
    if (v47 != -1) {
      goto LABEL_50;
    }
LABEL_46:
    int v48 = v314;
    if (v314 == -1) {
      goto LABEL_93;
    }
    goto LABEL_71;
  }
  int v32 = v31 ^ 1;
  uint64_t v33 = (void *)v326;
  if (v12) {
    long long v34 = (int *)v326;
  }
  else {
    long long v34 = (int *)&v326;
  }
  if (v12) {
    unint64_t v35 = *((void *)&v326 + 1);
  }
  else {
    unint64_t v35 = 6;
  }
  if (v12 >> 1 == v35)
  {
    if (((v35 >> 61) & 3) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v36 = (char *)operator new(8 * v35);
    unint64_t v37 = v36;
    *(_DWORD *)&v36[4 * v35] = v32;
    if (v12 >= 2)
    {
      unint64_t v38 = 0;
      if (v35 < 8) {
        goto LABEL_40;
      }
      if ((unint64_t)(v36 - (char *)v34) < 0x20) {
        goto LABEL_40;
      }
      unint64_t v38 = v35 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v39 = v36 + 16;
      uint64_t v40 = (long long *)(v34 + 4);
      unint64_t v41 = v35 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        long long v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        _OWORD *v39 = v42;
        v39 += 2;
        v40 += 2;
        v41 -= 8;
      }
      while (v41);
      v34 += v35 & 0xFFFFFFFFFFFFFFF8;
      if (v35 != v38)
      {
LABEL_40:
        unint64_t v43 = v35 - v38;
        unint64_t v44 = &v36[4 * v38];
        do
        {
          int v45 = *v34++;
          *(_DWORD *)unint64_t v44 = v45;
          v44 += 4;
          --v43;
        }
        while (v43);
      }
    }
    uint64_t v46 = 2 * v35;
    if (v12)
    {
      operator delete(v33);
      uint64_t v29 = *(void *)(a1 + 56);
    }
    *(void *)&long long v326 = v37;
    *((void *)&v326 + 1) = v46;
    v12 |= 1uLL;
    uint64_t v30 = *(void *)(v29 + 408);
  }
  else
  {
    v34[v12 >> 1] = v32;
  }
  v12 += 2;
  unint64_t v325 = v12;
  int v47 = *(_DWORD *)(v30 + 4 * v317);
  if (v47 == -1) {
    goto LABEL_46;
  }
LABEL_50:
  int v49 = v47 ^ 1;
  unint64_t v50 = (void *)v326;
  if (v12) {
    uint64_t v51 = (int *)v326;
  }
  else {
    uint64_t v51 = (int *)&v326;
  }
  if (v12) {
    unint64_t v52 = *((void *)&v326 + 1);
  }
  else {
    unint64_t v52 = 6;
  }
  if (v12 >> 1 != v52)
  {
    v51[v12 >> 1] = v49;
    int v48 = v314;
    v12 += 2;
    unint64_t v325 = v12;
    if (v314 == -1) {
      goto LABEL_93;
    }
    goto LABEL_71;
  }
  if (((v52 >> 61) & 3) != 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v53 = (char *)operator new(8 * v52);
  long long v54 = v53;
  *(_DWORD *)&v53[4 * v52] = v49;
  int v48 = v314;
  if (v12 >= 2)
  {
    unint64_t v55 = 0;
    if (v52 < 8) {
      goto LABEL_64;
    }
    if ((unint64_t)(v53 - (char *)v51) < 0x20) {
      goto LABEL_64;
    }
    unint64_t v55 = v52 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v56 = v53 + 16;
    uint64_t v57 = (long long *)(v51 + 4);
    unint64_t v58 = v52 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v59 = *v57;
      *(v56 - 1) = *(v57 - 1);
      _OWORD *v56 = v59;
      v56 += 2;
      v57 += 2;
      v58 -= 8;
    }
    while (v58);
    v51 += v52 & 0xFFFFFFFFFFFFFFF8;
    if (v52 != v55)
    {
LABEL_64:
      unint64_t v60 = v52 - v55;
      uint64_t v61 = &v53[4 * v55];
      do
      {
        int v62 = *v51++;
        *(_DWORD *)uint64_t v61 = v62;
        v61 += 4;
        --v60;
      }
      while (v60);
    }
  }
  uint64_t v63 = 2 * v52;
  if (v12) {
    operator delete(v50);
  }
  *(void *)&long long v326 = v54;
  *((void *)&v326 + 1) = v63;
  unint64_t v12 = (v12 | 1) + 2;
  unint64_t v325 = v12;
  if (v314 != -1)
  {
LABEL_71:
    int v64 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 408) + 4 * v48);
    if (v64 != -1)
    {
      int v65 = v64 ^ 1;
      unint64_t v66 = (void *)v326;
      if (v12) {
        unint64_t v67 = (int *)v326;
      }
      else {
        unint64_t v67 = (int *)&v326;
      }
      if (v12) {
        unint64_t v68 = *((void *)&v326 + 1);
      }
      else {
        unint64_t v68 = 6;
      }
      if (v12 >> 1 == v68)
      {
        if (((v68 >> 61) & 3) != 0) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v69 = (char *)operator new(8 * v68);
        uint64_t v70 = v69;
        *(_DWORD *)&v69[4 * v68] = v65;
        int v48 = v314;
        if (v12 >= 2)
        {
          unint64_t v71 = 0;
          if (v68 < 8) {
            goto LABEL_86;
          }
          if ((unint64_t)(v69 - (char *)v67) < 0x20) {
            goto LABEL_86;
          }
          unint64_t v71 = v68 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v72 = v69 + 16;
          uint64_t v73 = (long long *)(v67 + 4);
          unint64_t v74 = v68 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v75 = *v73;
            *(v72 - 1) = *(v73 - 1);
            _OWORD *v72 = v75;
            v72 += 2;
            v73 += 2;
            v74 -= 8;
          }
          while (v74);
          v67 += v68 & 0xFFFFFFFFFFFFFFF8;
          if (v68 != v71)
          {
LABEL_86:
            unint64_t v76 = v68 - v71;
            uint64_t v77 = &v69[4 * v71];
            do
            {
              int v78 = *v67++;
              *(_DWORD *)uint64_t v77 = v78;
              v77 += 4;
              --v76;
            }
            while (v76);
          }
        }
        uint64_t v79 = 2 * v68;
        if (v12) {
          operator delete(v66);
        }
        *(void *)&long long v326 = v70;
        *((void *)&v326 + 1) = v79;
        v12 |= 1uLL;
      }
      else
      {
        v67[v12 >> 1] = v65;
        int v48 = v314;
      }
      v12 += 2;
      unint64_t v325 = v12;
    }
  }
LABEL_93:
  if (v12) {
    unint64_t v80 = (int *)v326;
  }
  else {
    unint64_t v80 = (int *)&v326;
  }
  unint64_t v81 = 126 - 2 * __clz(v12 >> 1);
  if (v12 >= 2) {
    uint64_t v82 = v81;
  }
  else {
    uint64_t v82 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v80, (char *)&v80[v12 >> 1], (uint64_t)&v319, v82, 1);
  unint64_t v84 = v325;
  unint64_t v83 = (char *)v326;
  unint64_t v85 = v325 & 1;
  if ((v325 & 1) == 0) {
    unint64_t v83 = (char *)&v326;
  }
  unint64_t v86 = v325 >> 1;
  if (v325 < 2)
  {
LABEL_111:
    if (v325) {
      goto LABEL_115;
    }
LABEL_112:
    uint64_t v94 = (char *)&v326 + 4 * v86;
    uint64_t v95 = (char *)&v326;
    if (v83 == v94)
    {
      unint64_t v85 = 0;
      goto LABEL_123;
    }
    goto LABEL_116;
  }
  int v87 = &v83[4 * v86];
  uint64_t v88 = 4 * v86 - 8;
  do
  {
    unint64_t v89 = v83;
    v83 += 4;
    if (v83 == v87)
    {
      unint64_t v83 = v87;
      goto LABEL_111;
    }
    uint64_t v90 = v88;
    int v91 = *((_DWORD *)v89 + 1);
    v88 -= 4;
  }
  while (*(_DWORD *)v89 != v91);
  if (v89 + 8 != v87)
  {
    uint64_t v92 = 4;
    do
    {
      int v93 = v91;
      int v91 = *(_DWORD *)&v83[v92];
      if (v93 != v91)
      {
        *((_DWORD *)v89 + 1) = v91;
        v89 += 4;
      }
      v92 += 4;
      v90 -= 4;
    }
    while (v90);
  }
  unint64_t v83 = v89 + 4;
  if (!v85) {
    goto LABEL_112;
  }
LABEL_115:
  uint64_t v95 = (char *)v326;
  uint64_t v94 = (char *)(v326 + 4 * v86);
  if (v83 == v94) {
    goto LABEL_123;
  }
LABEL_116:
  uint64_t v96 = v94 - v83;
  uint64_t v97 = (v83 - v95) >> 2;
  uint64_t v98 = v97 + (v96 >> 2);
  unint64_t v99 = v86 - v98;
  if (v86 != v98)
  {
    uint64_t v100 = &v95[4 * v98];
    if (v99 >= 0xC && (unint64_t)(v83 - v95 - 4 * v98) >= 0x20)
    {
      unint64_t v101 = v99 & 0xFFFFFFFFFFFFFFF8;
      v100 += 4 * (v99 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v128 = &v95[4 * v97 + 16];
      int v129 = &v95[4 * v98 + 16];
      unint64_t v130 = v99 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        long long v131 = *(_OWORD *)v129;
        *((_OWORD *)v128 - 1) = *((_OWORD *)v129 - 1);
        *(_OWORD *)uint64_t v128 = v131;
        v128 += 32;
        v129 += 32;
        v130 -= 8;
      }
      while (v130);
      if (v99 == v101) {
        goto LABEL_122;
      }
    }
    else
    {
      unint64_t v101 = 0;
    }
    unint64_t v102 = v86 - v101 - v98;
    uint64_t v103 = &v95[4 * v101 + 4 * v97];
    do
    {
      int v104 = *(_DWORD *)v100;
      v100 += 4;
      *(_DWORD *)uint64_t v103 = v104;
      v103 += 4;
      --v102;
    }
    while (v102);
  }
LABEL_122:
  v84 -= v96 >> 1;
  unint64_t v325 = v84;
  unint64_t v85 = v84 & 1;
  unint64_t v86 = v84 >> 1;
LABEL_123:
  uint64_t v105 = (void *)v326;
  if (v85) {
    char v106 = (long long *)v326;
  }
  else {
    char v106 = &v326;
  }
  int v107 = 0;
  if (v86)
  {
    uint64_t v108 = *(void *)(*(void *)(a1 + 48) + 24);
    uint64_t v109 = 4 * v86;
    do
    {
      int v111 = *(_DWORD *)v106;
      unint64_t v112 = *(void *)(v108 + (((unint64_t)*(int *)v106 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if (((v112 >> *(_DWORD *)v106) & 1) == 0)
      {
        if ((v112 >> (v111 & 0x3F ^ 1u)))
        {
          if ((v325 & 1) == 0) {
            return;
          }
          goto LABEL_135;
        }
        uint64_t v110 = (long long *)v326;
        if (!v85) {
          uint64_t v110 = &v326;
        }
        *((_DWORD *)v110 + v107++) = v111;
      }
      char v106 = (long long *)((char *)v106 + 4);
      v109 -= 4;
    }
    while (v109);
    uint64_t v105 = (void *)v326;
    if (v85) {
      char v106 = (long long *)v326;
    }
    else {
      char v106 = &v326;
    }
  }
  unint64_t v113 = v107;
  unint64_t v114 = *((void *)&v326 + 1);
  if (!v85) {
    unint64_t v114 = 6;
  }
  if (v114 >= v113)
  {
    int v120 = v315;
    int v127 = v317;
    unint64_t v325 = v85 | (2 * v113);
    if (v317 != v315) {
      goto LABEL_171;
    }
    goto LABEL_167;
  }
  unint64_t v115 = 2 * v114;
  if (v115 <= v113) {
    unint64_t v116 = v113;
  }
  else {
    unint64_t v116 = v115;
  }
  if (v116 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v117 = (char *)operator new(4 * v116);
  uint64_t v118 = v117;
  BOOL v119 = v84 >= 2;
  int v120 = v315;
  if (v119)
  {
    uint64_t v121 = 0;
    if (v86 < 8 || (unint64_t)(v117 - (char *)v106) < 0x20)
    {
      uint64_t v122 = (int *)v106;
    }
    else
    {
      uint64_t v121 = v86 & 0x7FFFFFFFFFFFFFF8;
      uint64_t v122 = (int *)v106 + (v86 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v123 = v117 + 16;
      unint64_t v124 = v106 + 1;
      uint64_t v125 = v86 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v126 = *v124;
        *(v123 - 1) = *(v124 - 1);
        _OWORD *v123 = v126;
        v123 += 2;
        v124 += 2;
        v125 -= 8;
      }
      while (v125);
      if (v86 == v121) {
        goto LABEL_164;
      }
    }
    unint64_t v132 = v86 - v121;
    int v133 = &v117[4 * v121];
    do
    {
      int v134 = *v122++;
      *(_DWORD *)int v133 = v134;
      v133 += 4;
      --v132;
    }
    while (v132);
  }
LABEL_164:
  if (v85) {
    operator delete(v105);
  }
  *(void *)&long long v326 = v118;
  *((void *)&v326 + 1) = v116;
  int v127 = v317;
  unint64_t v325 = (2 * v113) | 1;
  if (v317 == v315)
  {
LABEL_167:
    if (*operations_research::sat::PrecedencesPropagator::AddArc(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::vlocal__ >= 1
      && (operations_research::sat::PrecedencesPropagator::AddArc(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::PrecedencesPropagator::AddArc(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/precedences.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v319, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 278);
      int v135 = (void *)google::LogMessage::stream((google::LogMessage *)&v319);
      uint64_t v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"Self arc! This could be presolved. ", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"var:", 4);
      int v137 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)" offset:", 8);
      uint64_t v138 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)" offset_var:", 12);
      uint64_t v139 = (void *)std::ostream::operator<<();
      unint64_t v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)" conditioned_by:", 16);
      operations_research::sat::operator<<(v140, a6, v311);
      google::LogMessage::~LogMessage((google::LogMessage *)&v319);
    }
  }
LABEL_171:
  if (v48 == -1)
  {
    int v146 = -1;
    unint64_t v147 = v325;
    if (v325 < 2) {
      goto LABEL_179;
    }
LABEL_182:
    uint64_t v154 = *(void *)(a1 + 232);
    unint64_t v155 = *(void *)(a1 + 240);
    *(void *)&long long v319 = __PAIR64__(v127, v120);
    *((void *)&v319 + 1) = a4;
    int v320 = v146;
    unint64_t v321 = 0;
    if ((v147 & 1) == 0)
    {
      unint64_t v321 = v147;
      *(_OWORD *)long long __p = v326;
      uint64_t v323 = v327;
      char v324 = 0;
      if (v155 < *(void *)(a1 + 248))
      {
LABEL_184:
        long long v156 = v319;
        *(_DWORD *)(v155 + 16) = v320;
        *(_OWORD *)unint64_t v155 = v156;
        *(void *)(v155 + 24) = 0;
        *(void *)(v155 + 24) = v321;
        long long v157 = *(_OWORD *)__p;
        *(void *)(v155 + 48) = v323;
        *(_OWORD *)(v155 + 32) = v157;
        unint64_t v321 = 0;
        *(unsigned char *)(v155 + 56) = v324;
        *(void *)(a1 + 240) = v155 + 64;
        goto LABEL_202;
      }
LABEL_200:
      uint64_t v171 = std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo>((void **)(a1 + 232), (uint64_t)&v319);
      char v172 = v321;
      *(void *)(a1 + 240) = v171;
      if (v172) {
        operator delete(__p[0]);
      }
LABEL_202:
      unint64_t v173 = (v155 - v154) >> 6;
      uint64_t v174 = *(void *)(a1 + 208);
      uint64_t v175 = v174 + 32 * v120;
      uint64_t v176 = v175 + 8;
      unint64_t v177 = *(void *)v175;
      if (*(void *)v175)
      {
        uint64_t v176 = *(void *)(v175 + 8);
        unint64_t v178 = *(void *)(v175 + 16);
        unint64_t v179 = v177 >> 1;
        if (v177 >> 1 != v178) {
          goto LABEL_204;
        }
      }
      else
      {
        unint64_t v178 = 6;
        unint64_t v179 = v177 >> 1;
        if (v177 >> 1 != 6)
        {
LABEL_204:
          *(_DWORD *)(v176 + 4 * v179) = v173;
          goto LABEL_220;
        }
      }
      if (((v178 >> 61) & 3) != 0) {
        goto LABEL_360;
      }
      uint64_t v180 = (char *)operator new(8 * v178);
      uint64_t v181 = v180;
      *(_DWORD *)&v180[4 * v178] = v173;
      if (v177 >= 2)
      {
        unint64_t v182 = 0;
        if (v178 < 8 || (unint64_t)&v180[-v176] < 0x20)
        {
          int v183 = (int *)v176;
        }
        else
        {
          unint64_t v182 = v178 & 0xFFFFFFFFFFFFFFF8;
          int v183 = (int *)(v176 + 4 * (v178 & 0xFFFFFFFFFFFFFFF8));
          int v184 = v180 + 16;
          int v185 = (long long *)(v176 + 16);
          unint64_t v186 = v178 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v187 = *v185;
            *(v184 - 1) = *(v185 - 1);
            *int v184 = v187;
            v184 += 2;
            v185 += 2;
            v186 -= 8;
          }
          while (v186);
          if (v178 == v182) {
            goto LABEL_217;
          }
        }
        unint64_t v188 = v178 - v182;
        int v189 = &v180[4 * v182];
        do
        {
          int v190 = *v183++;
          *(_DWORD *)int v189 = v190;
          v189 += 4;
          --v188;
        }
        while (v188);
      }
LABEL_217:
      if (v177)
      {
        operator delete(*(void **)(v175 + 8));
        unint64_t v177 = *(void *)v175;
      }
      *(void *)(v175 + 8) = v181;
      *(void *)(v175 + 16) = 2 * v178;
      v177 |= 1uLL;
      uint64_t v174 = *(void *)(a1 + 208);
LABEL_220:
      *(void *)uint64_t v175 = v177 + 2;
      uint64_t v191 = v174 + 32 * (v317 ^ 1);
      uint64_t v192 = v191 + 8;
      unint64_t v193 = *(void *)v191;
      if (*(void *)v191)
      {
        uint64_t v192 = *(void *)(v191 + 8);
        unint64_t v194 = *(void *)(v191 + 16);
        unint64_t v195 = v193 >> 1;
        if (v193 >> 1 != v194)
        {
LABEL_222:
          *(_DWORD *)(v192 + 4 * v195) = v173;
          *(void *)uint64_t v191 = v193 + 2;
          int v127 = v317;
          if (v146 == -1) {
            goto LABEL_257;
          }
LABEL_239:
          uint64_t v207 = *(void *)(a1 + 208) + 32 * v146;
          uint64_t v208 = v207 + 8;
          unint64_t v209 = *(void *)v207;
          if (*(void *)v207)
          {
            uint64_t v208 = *(void *)(v207 + 8);
            unint64_t v210 = *(void *)(v207 + 16);
            unint64_t v211 = v209 >> 1;
            if (v209 >> 1 != v210) {
              goto LABEL_241;
            }
          }
          else
          {
            unint64_t v210 = 6;
            unint64_t v211 = v209 >> 1;
            if (v209 >> 1 != 6)
            {
LABEL_241:
              *(_DWORD *)(v208 + 4 * v211) = v173;
              int v127 = v317;
              *(void *)uint64_t v207 = v209 + 2;
              goto LABEL_180;
            }
          }
          if (((v210 >> 61) & 3) == 0)
          {
            long long v212 = (char *)operator new(8 * v210);
            int v213 = v212;
            *(_DWORD *)&v212[4 * v210] = v173;
            if (v209 >= 2)
            {
              unint64_t v214 = 0;
              if (v210 < 8 || (unint64_t)&v212[-v208] < 0x20)
              {
                uint64_t v215 = (int *)v208;
              }
              else
              {
                unint64_t v214 = v210 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v215 = (int *)(v208 + 4 * (v210 & 0xFFFFFFFFFFFFFFF8));
                long long v216 = v212 + 16;
                unsigned __int8 v217 = (long long *)(v208 + 16);
                unint64_t v218 = v210 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  long long v219 = *v217;
                  *(v216 - 1) = *(v217 - 1);
                  _OWORD *v216 = v219;
                  v216 += 2;
                  v217 += 2;
                  v218 -= 8;
                }
                while (v218);
                if (v210 == v214) {
                  goto LABEL_254;
                }
              }
              unint64_t v220 = v210 - v214;
              uint64_t v221 = &v212[4 * v214];
              do
              {
                int v222 = *v215++;
                *(_DWORD *)uint64_t v221 = v222;
                v221 += 4;
                --v220;
              }
              while (v220);
            }
LABEL_254:
            if (v209)
            {
              operator delete(*(void **)(v207 + 8));
              unint64_t v209 = *(void *)v207;
            }
            *(void *)(v207 + 8) = v213;
            *(void *)(v207 + 16) = 2 * v210;
            int v127 = v317;
            *(void *)uint64_t v207 = (v209 | 1) + 2;
            goto LABEL_180;
          }
LABEL_360:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
      }
      else
      {
        unint64_t v194 = 6;
        unint64_t v195 = v193 >> 1;
        if (v193 >> 1 != 6) {
          goto LABEL_222;
        }
      }
      if (((v194 >> 61) & 3) != 0) {
        goto LABEL_360;
      }
      uint64_t v196 = (char *)operator new(8 * v194);
      int64_t v197 = v196;
      *(_DWORD *)&v196[4 * v194] = v173;
      if (v193 >= 2)
      {
        unint64_t v198 = 0;
        if (v194 < 8 || (unint64_t)&v196[-v192] < 0x20)
        {
          uint64_t v199 = (int *)v192;
        }
        else
        {
          unint64_t v198 = v194 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v199 = (int *)(v192 + 4 * (v194 & 0xFFFFFFFFFFFFFFF8));
          int v200 = v196 + 16;
          unint64_t v201 = (long long *)(v192 + 16);
          unint64_t v202 = v194 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v203 = *v201;
            *(v200 - 1) = *(v201 - 1);
            _OWORD *v200 = v203;
            v200 += 2;
            v201 += 2;
            v202 -= 8;
          }
          while (v202);
          if (v194 == v198) {
            goto LABEL_236;
          }
        }
        unint64_t v204 = v194 - v198;
        uint64_t v205 = &v196[4 * v198];
        do
        {
          int v206 = *v199++;
          *(_DWORD *)uint64_t v205 = v206;
          v205 += 4;
          --v204;
        }
        while (v204);
      }
LABEL_236:
      if (v193)
      {
        operator delete(*(void **)(v191 + 8));
        unint64_t v193 = *(void *)v191;
      }
      *(void *)(v191 + 8) = v197;
      *(void *)(v191 + 16) = 2 * v194;
      *(void *)uint64_t v191 = (v193 | 1) + 2;
      int v127 = v317;
      if (v146 == -1) {
        goto LABEL_257;
      }
      goto LABEL_239;
    }
    uint64_t v158 = (int *)v326;
    unint64_t v159 = v147 >> 1;
    if (v147 < 0xE)
    {
      uint64_t v162 = 0;
      int v161 = __p;
      uint64_t v163 = 0;
    }
    else
    {
      if (v159 <= 0xC) {
        unint64_t v160 = 12;
      }
      else {
        unint64_t v160 = v147 >> 1;
      }
      if (v160 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v161 = operator new(4 * v160);
      __p[0] = v161;
      __p[1] = (void *)v160;
      uint64_t v162 = 1;
      uint64_t v163 = 0;
      if (v147 >= 0x10 && (unint64_t)((char *)v161 - (char *)v158) >= 0x20)
      {
        uint64_t v163 = v159 & 0x7FFFFFFFFFFFFFF8;
        uint64_t v164 = v161 + 1;
        int v165 = (long long *)(v158 + 4);
        uint64_t v166 = v159 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v167 = *v165;
          *(v164 - 1) = *(v165 - 1);
          _OWORD *v164 = v167;
          v164 += 2;
          v165 += 2;
          v166 -= 8;
        }
        while (v166);
        v158 += v159 & 0x7FFFFFFFFFFFFFF8;
        if (v159 == v163)
        {
LABEL_199:
          unint64_t v321 = v162 | v147 & 0xFFFFFFFFFFFFFFFELL;
          char v324 = 0;
          if (v155 < *(void *)(a1 + 248)) {
            goto LABEL_184;
          }
          goto LABEL_200;
        }
      }
    }
    unint64_t v168 = v159 - v163;
    uint64_t v169 = (_DWORD *)v161 + v163;
    do
    {
      int v170 = *v158++;
      *v169++ = v170;
      --v168;
    }
    while (v168);
    goto LABEL_199;
  }
  uint64_t v141 = *(void *)(*(void *)(a1 + 56) + 40);
  uint64_t v142 = *(void *)(v141 + 12 * v48);
  uint64_t v143 = *(void *)(v141 + 12 * (v48 ^ 1));
  BOOL v144 = v142 + v143 == 0;
  if (v142 + v143) {
    uint64_t v145 = 0;
  }
  else {
    uint64_t v145 = v142;
  }
  a4 += v145;
  if (v144) {
    int v146 = -1;
  }
  else {
    int v146 = v48;
  }
  unint64_t v147 = v325;
  if (v325 >= 2) {
    goto LABEL_182;
  }
LABEL_179:
  if (v146 == -1)
  {
LABEL_257:
    double v223 = operator new(0xCuLL);
    *double v223 = v120;
    v223[1] = v127;
    v223[2] = -1;
    int64_t v224 = (int *)operator new(0x18uLL);
    v224[4] = v120 ^ 1;
    v224[5] = -1;
    *(void *)int64_t v224 = *(void *)v223;
    v224[2] = v223[2];
    void v224[3] = v127 ^ 1;
    int v310 = v224 + 6;
    operator delete(v223);
    uint64_t v153 = v224;
    goto LABEL_258;
  }
LABEL_180:
  uint64_t v148 = operator new(0xCuLL);
  _DWORD *v148 = v120;
  v148[1] = v127;
  v148[2] = v146;
  uint64_t v149 = operator new(0x18uLL);
  v149[4] = v127;
  v149[5] = v120;
  *(void *)uint64_t v149 = *(void *)v148;
  v149[2] = v148[2];
  v149[3] = v146;
  operator delete(v148);
  uint64_t v150 = operator new(0x30uLL);
  v150[6] = v120;
  v150[7] = v146 ^ 1;
  v150[8] = v127 ^ 1;
  *(_OWORD *)uint64_t v150 = *(_OWORD *)v149;
  *((void *)v150 + 2) = *((void *)v149 + 2);
  operator delete(v149);
  v150[9] = v127 ^ 1;
  v150[10] = v146 ^ 1;
  v150[11] = v120;
  int v151 = operator new(0x60uLL);
  v151[12] = v146;
  v151[13] = v120 ^ 1;
  v151[14] = v127 ^ 1;
  long long v152 = *((_OWORD *)v150 + 1);
  *(_OWORD *)int v151 = *(_OWORD *)v150;
  *((_OWORD *)v151 + 1) = v152;
  *((_OWORD *)v151 + 2) = *((_OWORD *)v150 + 2);
  operator delete(v150);
  v151[15] = v127 ^ 1;
  v151[16] = v120 ^ 1;
  int v310 = v151 + 18;
  uint64_t v153 = v151;
  v151[17] = v146;
LABEL_258:
  long long v309 = v153;
  do
  {
    int v226 = *v153;
    int v225 = v153[1];
    int v318 = v153;
    int v227 = v153[2];
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((void *)(a1 + 80), *v153);
    uint64_t v228 = *(void *)(a1 + 184);
    unint64_t v229 = *(void *)(a1 + 192);
    *(void *)&long long v319 = __PAIR64__(v225, v226);
    *((void *)&v319 + 1) = a4;
    int v320 = v227;
    unint64_t v321 = 0;
    unint64_t v230 = v325;
    if ((v325 & 1) == 0)
    {
      unint64_t v321 = v325;
      *(_OWORD *)long long __p = v326;
      uint64_t v323 = v327;
      char v324 = 0;
      if (v229 >= *(void *)(a1 + 200)) {
        goto LABEL_277;
      }
      goto LABEL_261;
    }
    unint64_t v234 = (int *)v326;
    unint64_t v235 = v325 >> 1;
    if (v325 < 0xE)
    {
      uint64_t v238 = 0;
      unint64_t v237 = __p;
      if (v325 < 2) {
        goto LABEL_276;
      }
    }
    else
    {
      if (v235 <= 0xC) {
        unint64_t v236 = 12;
      }
      else {
        unint64_t v236 = v325 >> 1;
      }
      if (v236 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v237 = operator new(4 * v236);
      __p[0] = v237;
      __p[1] = (void *)v236;
      uint64_t v238 = 1;
    }
    uint64_t v239 = 0;
    if (v230 < 0x10) {
      goto LABEL_274;
    }
    if ((unint64_t)((char *)v237 - (char *)v234) < 0x20) {
      goto LABEL_274;
    }
    uint64_t v239 = v235 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v240 = v237 + 1;
    int64x2_t v241 = (long long *)(v234 + 4);
    uint64_t v242 = v235 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v243 = *v241;
      *(v240 - 1) = *(v241 - 1);
      _OWORD *v240 = v243;
      v240 += 2;
      v241 += 2;
      v242 -= 8;
    }
    while (v242);
    v234 += v235 & 0x7FFFFFFFFFFFFFF8;
    if (v235 != v239)
    {
LABEL_274:
      unint64_t v244 = v235 - v239;
      uint64_t v245 = (_DWORD *)v237 + v239;
      do
      {
        int v246 = *v234++;
        *v245++ = v246;
        --v244;
      }
      while (v244);
    }
LABEL_276:
    unint64_t v321 = v238 | v230 & 0xFFFFFFFFFFFFFFFELL;
    char v324 = 0;
    if (v229 >= *(void *)(a1 + 200))
    {
LABEL_277:
      uint64_t v233 = std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo>((void **)(a1 + 184), (uint64_t)&v319);
      char v247 = v321;
      *(void *)(a1 + 192) = v233;
      if (v247)
      {
        operator delete(__p[0]);
        uint64_t v233 = *(char **)(a1 + 192);
      }
      goto LABEL_279;
    }
LABEL_261:
    long long v231 = v319;
    *(_DWORD *)(v229 + 16) = v320;
    *(_OWORD *)unint64_t v229 = v231;
    *(void *)(v229 + 24) = 0;
    *(void *)(v229 + 24) = v321;
    long long v232 = *(_OWORD *)__p;
    *(void *)(v229 + 48) = v323;
    *(_OWORD *)(v229 + 32) = v232;
    unint64_t v321 = 0;
    *(unsigned char *)(v229 + 56) = v324;
    uint64_t v233 = (char *)(v229 + 64);
    *(void *)(a1 + 192) = v229 + 64;
LABEL_279:
    int v248 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 408) + 4 * v225);
    unint64_t v249 = *((void *)v233 - 5);
    if (v248 != -1)
    {
      int v250 = v233 - 32;
      unint64_t v251 = v233 - 32;
      if (v249) {
        unint64_t v251 = *(char **)v250;
      }
      unint64_t v252 = v249 >> 1;
      unint64_t v253 = v249 - 2;
      if (v249 >= 2)
      {
        int v254 = v248 ^ 1;
        uint64_t v255 = 4 * v252;
        uint64_t v256 = &v251[4 * v252];
        while (*(_DWORD *)v251 != v254)
        {
          v251 += 4;
          v255 -= 4;
          if (!v255)
          {
            unint64_t v251 = v256;
            break;
          }
        }
      }
      if (v249) {
        int v250 = *(char **)v250;
      }
      if (v251 != &v250[4 * v252])
      {
        uint64_t v257 = (v251 - v250) >> 2;
        unint64_t v258 = v252 - (v257 + 1);
        if (v252 != v257 + 1)
        {
          uint64_t v259 = &v250[4 * v257 + 4];
          if (v258 >= 8)
          {
            unint64_t v260 = v258 & 0xFFFFFFFFFFFFFFF8;
            v259 += 4 * (v258 & 0xFFFFFFFFFFFFFFF8);
            BOOL v261 = &v250[4 * v257 + 20];
            unint64_t v262 = v258 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v263 = *(_OWORD *)v261;
              *(_OWORD *)(v261 - 20) = *((_OWORD *)v261 - 1);
              *(_OWORD *)(v261 - 4) = v263;
              v261 += 32;
              v262 -= 8;
            }
            while (v262);
            if (v258 == v260) {
              goto LABEL_299;
            }
          }
          else
          {
            unint64_t v260 = 0;
          }
          uint64_t v264 = v260 + v257 - v252 + 1;
          int v265 = &v250[4 * v260 + 4 * v257];
          do
          {
            int v266 = *(_DWORD *)v259;
            v259 += 4;
            *(_DWORD *)int v265 = v266;
            v265 += 4;
            BOOL v119 = __CFADD__(v264++, 1);
          }
          while (!v119);
        }
LABEL_299:
        *((void *)v233 - 5) = v253;
        unint64_t v249 = v253;
      }
    }
    unint64_t v267 = (v229 - v228) >> 6;
    uint64_t v316 = v233;
    if (v249 > 1)
    {
      uint64_t v273 = v233 - 32;
      if (v249) {
        uint64_t v273 = *(char **)v273;
      }
      uint64_t v274 = (int *)&v273[4 * (v249 >> 1)];
      while (1)
      {
        while (1)
        {
          uint64_t v275 = *(int *)v273;
          uint64_t v277 = *(void *)(a1 + 352);
          uint64_t v276 = *(void *)(a1 + 360);
          unint64_t v278 = (v276 - v277) >> 5;
          if ((int)v275 >= (int)v278)
          {
            if (v275 + 1 <= v278)
            {
              if (v275 + 1 < v278)
              {
                uint64_t v279 = v277 + 32 * (v275 + 1);
                if (v276 != v279)
                {
                  uint64_t v280 = *(void *)(a1 + 360);
                  do
                  {
                    char v281 = *(unsigned char *)(v280 - 32);
                    v280 -= 32;
                    if (v281) {
                      operator delete(*(void **)(v276 - 24));
                    }
                    uint64_t v276 = v280;
                  }
                  while (v280 != v279);
                }
                *(void *)(a1 + 360) = v279;
              }
            }
            else
            {
              std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)(a1 + 352), v275 + 1 - v278);
            }
          }
          uint64_t v282 = *(void *)(a1 + 352) + 32 * v275;
          uint64_t v284 = v282 + 8;
          unint64_t v283 = *(void *)v282;
          if ((*(void *)v282 & 1) == 0) {
            break;
          }
          uint64_t v284 = *(void *)(v282 + 8);
          unint64_t v285 = *(void *)(v282 + 16);
          unint64_t v286 = v283 >> 1;
          if (v283 >> 1 == v285) {
            goto LABEL_322;
          }
LABEL_307:
          *(_DWORD *)(v284 + 4 * v286) = v267;
          *(void *)uint64_t v282 = v283 + 2;
          v273 += 4;
          if (v273 == (char *)v274) {
            goto LABEL_353;
          }
        }
        unint64_t v285 = 6;
        unint64_t v286 = v283 >> 1;
        if (v283 >> 1 != 6) {
          goto LABEL_307;
        }
LABEL_322:
        if (((v285 >> 61) & 3) != 0) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v287 = (char *)operator new(8 * v285);
        uint64_t v288 = v287;
        *(_DWORD *)&v287[4 * v285] = v267;
        if (v283 < 2) {
          goto LABEL_333;
        }
        unint64_t v289 = 0;
        if (v285 < 8 || (unint64_t)&v287[-v284] < 0x20)
        {
          uint64_t v290 = (int *)v284;
        }
        else
        {
          unint64_t v289 = v285 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v290 = (int *)(v284 + 4 * (v285 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v291 = v287 + 16;
          unint64_t v292 = (long long *)(v284 + 16);
          unint64_t v293 = v285 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v294 = *v292;
            *(v291 - 1) = *(v292 - 1);
            _OWORD *v291 = v294;
            v291 += 2;
            v292 += 2;
            v293 -= 8;
          }
          while (v293);
          if (v285 == v289) {
            goto LABEL_333;
          }
        }
        unint64_t v295 = v285 - v289;
        v296 = &v287[4 * v289];
        do
        {
          int v297 = *v290++;
          *(_DWORD *)v296 = v297;
          v296 += 4;
          --v295;
        }
        while (v295);
LABEL_333:
        if (v283)
        {
          operator delete(*(void **)(v282 + 8));
          unint64_t v283 = *(void *)v282;
        }
        *(void *)(v282 + 8) = v288;
        *(void *)(v282 + 16) = 2 * v285;
        *(void *)uint64_t v282 = (v283 | 1) + 2;
        v273 += 4;
        if (v273 == (char *)v274) {
          goto LABEL_353;
        }
      }
    }
    uint64_t v268 = *(void *)(a1 + 160) + 32 * v226;
    uint64_t v270 = v268 + 8;
    unint64_t v269 = *(void *)v268;
    if (*(void *)v268)
    {
      uint64_t v270 = *(void *)(v268 + 8);
      unint64_t v271 = *(void *)(v268 + 16);
      unint64_t v272 = v269 >> 1;
      if (v269 >> 1 != v271) {
        goto LABEL_303;
      }
LABEL_338:
      if (((v271 >> 61) & 3) != 0) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v298 = (char *)operator new(8 * v271);
      int v299 = v298;
      *(_DWORD *)&v298[4 * v271] = v267;
      if (v269 >= 2)
      {
        unint64_t v300 = 0;
        if (v271 < 8 || (unint64_t)&v298[-v270] < 0x20)
        {
          uint64_t v301 = (int *)v270;
        }
        else
        {
          unint64_t v300 = v271 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v301 = (int *)(v270 + 4 * (v271 & 0xFFFFFFFFFFFFFFF8));
          signed int v302 = v298 + 16;
          unint64_t v303 = (long long *)(v270 + 16);
          unint64_t v304 = v271 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v305 = *v303;
            *(v302 - 1) = *(v303 - 1);
            *signed int v302 = v305;
            v302 += 2;
            v303 += 2;
            v304 -= 8;
          }
          while (v304);
          if (v271 == v300) {
            goto LABEL_349;
          }
        }
        unint64_t v306 = v271 - v300;
        int v307 = &v298[4 * v300];
        do
        {
          int v308 = *v301++;
          *(_DWORD *)int v307 = v308;
          v307 += 4;
          --v306;
        }
        while (v306);
      }
LABEL_349:
      if (v269)
      {
        operator delete(*(void **)(v268 + 8));
        unint64_t v269 = *(void *)v268;
      }
      *(void *)(v268 + 8) = v299;
      *(void *)(v268 + 16) = 2 * v271;
      v269 |= 1uLL;
      goto LABEL_352;
    }
    unint64_t v271 = 6;
    unint64_t v272 = v269 >> 1;
    if (v269 >> 1 == 6) {
      goto LABEL_338;
    }
LABEL_303:
    *(_DWORD *)(v270 + 4 * v272) = v267;
LABEL_352:
    *(void *)uint64_t v268 = v269 + 2;
LABEL_353:
    LODWORD(v319) = *((void *)v316 - 5) >> 1;
    gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 376, &v319);
    uint64_t v153 = v318 + 3;
  }
  while (v318 + 3 != v310);
  operator delete(v309);
  if (v325) {
LABEL_135:
  }
    operator delete((void *)v326);
}

void sub_23CD44404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,void *__p)
{
  if ((*(unsigned char *)(v23 - 128) & 1) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v23 - 120));
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::operator<<(void *a1, int *a2, uint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      int v6 = *a2 >> 1;
      if (*a2) {
        uint64_t v7 = ~v6;
      }
      else {
        uint64_t v7 = (v6 + 1);
      }
      v14[0] = v7;
      v14[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
      absl::lts_2020_02_25::str_format_internal::FormatPack("%+d", 3, (uint64_t)v14, 1, (uint64_t)__p);
      if ((v13 & 0x80u) == 0) {
        unint64_t v8 = __p;
      }
      else {
        unint64_t v8 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v9 = v13;
      }
      else {
        uint64_t v9 = (uint64_t)__p[1];
      }
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
      if ((char)v13 < 0) {
        operator delete(__p[0]);
      }
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_23CD446A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::anonymous namespace'::AppendLowerBoundReasonIfValid(int a1, uint64_t a2, char **a3)
{
  if (a1 != -1)
  {
    *(_DWORD *)unint64_t v16 = a1;
    *(void *)&v16[4] = *(void *)(a2 + 12 * a1);
    uint64_t v5 = a3[1];
    unint64_t v4 = (unint64_t)a3[2];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v7 = *a3;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a3) >> 2);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v7) >> 2);
      if (2 * v10 > v9) {
        unint64_t v9 = 2 * v10;
      }
      if (v10 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v11 = 0x1555555555555555;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v12 = (char *)operator new(12 * v11);
      }
      else
      {
        unint64_t v12 = 0;
      }
      unsigned __int8 v13 = &v12[12 * v8];
      *(void *)unsigned __int8 v13 = *(void *)v16;
      *((_DWORD *)v13 + 2) = *(_DWORD *)&v16[8];
      int v6 = v13 + 12;
      if (v5 != v7)
      {
        do
        {
          uint64_t v14 = *(void *)(v5 - 12);
          v5 -= 12;
          int v15 = *((_DWORD *)v5 + 2);
          *(void *)(v13 - 12) = v14;
          v13 -= 12;
          *((_DWORD *)v13 + 2) = v15;
        }
        while (v5 != v7);
        uint64_t v5 = *a3;
      }
      *a3 = v13;
      a3[1] = v6;
      a3[2] = &v12[12 * v11];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(void *)uint64_t v5 = *(void *)v16;
      *((_DWORD *)v5 + 2) = *(_DWORD *)&v16[8];
      int v6 = v5 + 12;
    }
    a3[1] = v6;
  }
}

uint64_t operations_research::sat::PrecedencesPropagator::DisassembleSubtree(void *a1, int a2, int a3, void *a4)
{
  unint64_t v8 = (char *)a1[71];
  a1[72] = v8;
  unint64_t v9 = a1[73];
  if ((unint64_t)v8 < v9)
  {
    *(_DWORD *)unint64_t v8 = a2;
    unint64_t v10 = v8 + 4;
    goto LABEL_10;
  }
  uint64_t v11 = v9 - (void)v8;
  uint64_t v12 = v11 >> 1;
  if ((unint64_t)(v11 >> 1) <= 1) {
    uint64_t v12 = 1;
  }
  BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
  unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v12;
  }
  if (v14 >> 62) {
LABEL_49:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  uint64_t v15 = v14;
  unint64_t v16 = operator new(4 * v14);
  a1[71] = v16;
  *unint64_t v16 = a2;
  unint64_t v10 = (char *)(v16 + 1);
  a1[72] = v16 + 1;
  a1[73] = &v16[v15];
  if (!v8 || (operator delete(v8), uint64_t v17 = (char *)a1[71], a1[72] = v10, v17 != v10))
  {
LABEL_10:
    int v48 = a1 + 71;
    while (1)
    {
      uint64_t v18 = *((int *)v10 - 1);
      v10 -= 4;
      a1[72] = v10;
      char v19 = (void *)(a1[20] + 32 * v18);
      unint64_t v22 = *v19;
      unint64_t v21 = (int *)(v19 + 1);
      unint64_t v20 = v22;
      if (v22) {
        unint64_t v21 = *(int **)v21;
      }
      if (v20 >= 2) {
        break;
      }
LABEL_11:
      if ((char *)*v48 == v10) {
        return 0;
      }
    }
    uint64_t v23 = &v21[v20 >> 1];
    int v47 = v23;
    while (1)
    {
      uint64_t v25 = a1[23] + ((uint64_t)*v21 << 6);
      if (!*(unsigned char *)(v25 + 56)) {
        goto LABEL_18;
      }
      *(unsigned char *)(v25 + 56) = 0;
      int v26 = *(_DWORD *)(v25 + 4);
      if (v26 == a3) {
        return 1;
      }
      *(void *)(*a4 + (((unint64_t)v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      unint64_t v27 = a1[73];
      if ((unint64_t)v10 >= v27) {
        break;
      }
      *(_DWORD *)unint64_t v10 = v26;
      uint64_t v24 = (uint64_t)(v10 + 4);
LABEL_17:
      a1[72] = v24;
      unint64_t v10 = (char *)v24;
LABEL_18:
      if (++v21 == v23) {
        goto LABEL_11;
      }
    }
    int v28 = a4;
    uint64_t v29 = (char *)*v48;
    uint64_t v30 = (uint64_t)&v10[-*v48];
    uint64_t v31 = v30 >> 2;
    unint64_t v32 = (v30 >> 2) + 1;
    if (v32 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v33 = v27 - (void)v29;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v49 = v32;
    if (v32)
    {
      if (v32 >> 62) {
        goto LABEL_49;
      }
      long long v34 = operator new(4 * v32);
      unint64_t v35 = &v34[4 * v31];
      *unint64_t v35 = v26;
      uint64_t v24 = (uint64_t)(v35 + 1);
      if (v10 != v29)
      {
LABEL_30:
        unint64_t v36 = v10 - 4 - v29;
        if (v36 < 0xBC
          || &v34[v30 - 4 - (v36 & 0xFFFFFFFFFFFFFFFCLL)] > &v34[v30 - 4]
          || &v10[-(v36 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4
          || (unint64_t)(v10 - v34 - v30) < 0x20)
        {
          unint64_t v37 = v10;
          a4 = v28;
          unint64_t v38 = v49;
        }
        else
        {
          uint64_t v40 = (v36 >> 2) + 1;
          uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v37 = &v10[-v41];
          unint64_t v35 = (_DWORD *)((char *)v35 - v41);
          long long v42 = &v34[4 * v31 - 16];
          unint64_t v43 = v10 - 16;
          uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
          a4 = v28;
          do
          {
            long long v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            _OWORD *v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 8;
          }
          while (v44);
          unint64_t v38 = v49;
          if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_33:
            a1[71] = v35;
            a1[72] = v24;
            a1[73] = &v34[4 * v38];
            if (!v29)
            {
LABEL_35:
              uint64_t v23 = v47;
              goto LABEL_17;
            }
LABEL_34:
            operator delete(v29);
            goto LABEL_35;
          }
        }
        do
        {
          int v39 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *--unint64_t v35 = v39;
        }
        while (v37 != v29);
        goto LABEL_33;
      }
    }
    else
    {
      long long v34 = 0;
      unint64_t v35 = (_DWORD *)(4 * v31);
      *(_DWORD *)(4 * v31) = v26;
      uint64_t v24 = 4 * v31 + 4;
      if (v10 != v29) {
        goto LABEL_30;
      }
    }
    a4 = v28;
    a1[71] = v35;
    a1[72] = v24;
    a1[73] = &v34[4 * v49];
    if (!v29) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  return 0;
}

void operations_research::sat::PrecedencesPropagator::AnalyzePositiveCycle(void *a1, int a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  a4[1] = *a4;
  a5[1] = *a5;
  *(void *)(a6 + 8) = *(void *)a6;
  int v11 = *(_DWORD *)(a1[23] + ((uint64_t)a2 << 6) + 4);
  int v104 = a2;
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v12 = a1[21] - a1[20];
  unint64_t v95 = (unint64_t)v12 >> 5;
  unint64_t v13 = (int)(v12 >> 5);
  do
  {
    if (v10 < v8)
    {
      *(_DWORD *)unint64_t v10 = v104;
      v10 += 4;
      goto LABEL_21;
    }
    unint64_t v14 = v9 + 1;
    if ((v9 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v8 - v7) >> 1 > v14) {
      unint64_t v14 = (v8 - v7) >> 1;
    }
    if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v16 = (char *)operator new(4 * v15);
      uint64_t v17 = v10;
      uint64_t v18 = &v16[4 * v9];
      *(_DWORD *)uint64_t v18 = v104;
      unint64_t v10 = v18 + 4;
      if (v17 == v7) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v17 = v10;
      unint64_t v16 = 0;
      uint64_t v18 = (char *)(4 * v9);
      *(_DWORD *)(4 * v9) = v104;
      unint64_t v10 = (char *)(4 * v9 + 4);
      if (v17 == v7) {
        goto LABEL_18;
      }
    }
    char v19 = v17;
    unint64_t v20 = v17 - 4;
    unint64_t v21 = v20 - v7;
    if ((unint64_t)(v20 - v7) >= 0xBC)
    {
      uint64_t v25 = 4 * v9;
      if (&v16[4 * v9 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[4 * v9 - 4])
      {
        unint64_t v22 = v19;
      }
      else if (&v20[-(v21 & 0xFFFFFFFFFFFFFFFCLL)] > v20)
      {
        unint64_t v22 = v19;
      }
      else if ((unint64_t)(v20 - &v16[v25] + 4) >= 0x20)
      {
        uint64_t v26 = (v21 >> 2) + 1;
        uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v22 = &v19[-v27];
        v18 -= v27;
        int v28 = &v16[v25 - 16];
        uint64_t v29 = v19 - 16;
        uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v31 = *(_OWORD *)v29;
          *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
          *(_OWORD *)int v28 = v31;
          v28 -= 32;
          v29 -= 32;
          v30 -= 8;
        }
        while (v30);
        if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_18;
        }
      }
      else
      {
        unint64_t v22 = v19;
      }
    }
    else
    {
      unint64_t v22 = v19;
    }
    do
    {
      int v23 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v18 - 1) = v23;
      v18 -= 4;
    }
    while (v22 != v7);
LABEL_18:
    unint64_t v8 = &v16[4 * v15];
    unint64_t v101 = v18;
    unint64_t v102 = v10;
    uint64_t v103 = v8;
    if (v7) {
      operator delete(v7);
    }
    uint64_t v7 = v18;
LABEL_21:
    unint64_t v102 = v10;
    uint64_t v24 = *(int *)(a1[23] + ((uint64_t)v104 << 6));
    if (v24 == v11) {
      break;
    }
    int v104 = *(_DWORD *)(a1[68] + 4 * v24);
    LODWORD(v99[0]) = -1;
    if (v104 == -1) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::PrecedencesPropagator::ArcIndex_tag_,int>,gtl::IntType<operations_research::sat::PrecedencesPropagator::ArcIndex_tag_,int>>((int)&v104, (int)v99, "arc_index != ArcIndex(-1)");
    }
    unint64_t v9 = (v10 - v7) >> 2;
  }
  while (v9 <= v13);
  long long __p = v101;
  v99[0] = (v10 - v101) >> 2;
  LODWORD(v98) = v95 + 1;
  if (v99[0] == v95 + 1) {
    google::MakeCheckOpString<unsigned long,int>((int)v99, (int)&v98, "arc_on_cycle.size() != num_nodes + 1");
  }
  uint64_t v100 = 0;
  unint64_t v32 = (int *)v101;
  if (v101 == v10)
  {
    LODWORD(v99[0]) = 0;
LABEL_106:
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v100, (int)v99, "sum > 0");
  }
  uint64_t v33 = 0;
  int v91 = v10;
  while (2)
  {
    uint64_t v96 = v32;
    uint64_t v35 = *v32;
    uint64_t v36 = a1[23];
    uint64_t v37 = v36 + (v35 << 6);
    int v38 = *(_DWORD *)(v37 + 16);
    uint64_t v39 = a1[7];
    if (v38 == -1)
    {
      uint64_t v41 = 0;
      uint64_t v40 = *(void *)(v39 + 40);
    }
    else
    {
      uint64_t v40 = *(void *)(v39 + 40);
      uint64_t v41 = *(void *)(v40 + 12 * v38);
    }
    uint64_t v100 = v41 + *(void *)(v37 + 8) + v33;
    uint64_t v92 = v36;
    uint64_t v93 = v35;
    uint64_t v42 = v36 + (v35 << 6);
    unint64_t v43 = *(void *)(v42 + 24);
    uint64_t v44 = (void *)(v42 + 32);
    uint64_t v94 = v100;
    if (v43) {
      uint64_t v44 = (void *)*v44;
    }
    if (v43 >= 2)
    {
      uint64_t v57 = (void *)((char *)v44 + 4 * (v43 >> 1));
      unint64_t v58 = (char *)a5[1];
      while (1)
      {
        int v60 = *(_DWORD *)v44 ^ 1;
        unint64_t v61 = a5[2];
        if ((unint64_t)v58 >= v61) {
          break;
        }
        *(_DWORD *)unint64_t v58 = v60;
        uint64_t v59 = (uint64_t)(v58 + 4);
LABEL_62:
        a5[1] = v59;
        uint64_t v44 = (void *)((char *)v44 + 4);
        unint64_t v58 = (char *)v59;
        if (v44 == v57) {
          goto LABEL_48;
        }
      }
      int v62 = (char *)*a5;
      uint64_t v63 = (uint64_t)&v58[-*a5];
      uint64_t v64 = v63 >> 2;
      unint64_t v65 = (v63 >> 2) + 1;
      if (v65 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v66 = v61 - (void)v62;
      if (v66 >> 1 > v65) {
        unint64_t v65 = v66 >> 1;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v65;
      }
      if (v67)
      {
        if (v67 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v68 = operator new(4 * v67);
        unint64_t v69 = (int *)&v68[4 * v64];
        int *v69 = v60;
        uint64_t v59 = (uint64_t)(v69 + 1);
        if (v58 == v62) {
          goto LABEL_78;
        }
      }
      else
      {
        unint64_t v68 = 0;
        unint64_t v69 = (int *)(4 * v64);
        *(_DWORD *)(4 * v64) = v60;
        uint64_t v59 = 4 * v64 + 4;
        if (v58 == v62) {
          goto LABEL_78;
        }
      }
      unint64_t v70 = v58 - 4 - v62;
      if (v70 >= 0xBC)
      {
        if (&v68[v63 - 4 - (v70 & 0xFFFFFFFFFFFFFFFCLL)] > &v68[v63 - 4])
        {
          unint64_t v71 = v58;
        }
        else if (&v58[-(v70 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v58 - 4)
        {
          unint64_t v71 = v58;
        }
        else if ((unint64_t)(v58 - &v68[v63]) >= 0x20)
        {
          uint64_t v73 = (v70 >> 2) + 1;
          uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v71 = &v58[-v74];
          unint64_t v69 = (int *)((char *)v69 - v74);
          long long v75 = &v68[4 * v64 - 16];
          unint64_t v76 = v58 - 16;
          uint64_t v77 = v73 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v78 = *(_OWORD *)v76;
            *(v75 - 1) = *((_OWORD *)v76 - 1);
            *long long v75 = v78;
            v75 -= 2;
            v76 -= 32;
            v77 -= 8;
          }
          while (v77);
          if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_78:
            *a5 = v69;
            a5[1] = v59;
            a5[2] = &v68[4 * v67];
            if (v62) {
              operator delete(v62);
            }
            goto LABEL_62;
          }
        }
        else
        {
          unint64_t v71 = v58;
        }
      }
      else
      {
        unint64_t v71 = v58;
      }
      do
      {
        int v72 = *((_DWORD *)v71 - 1);
        v71 -= 4;
        *--unint64_t v69 = v72;
      }
      while (v71 != v62);
      goto LABEL_78;
    }
LABEL_48:
    int v45 = *(_DWORD *)(*(void *)(a1[7] + 408) + 4 * *(int *)(v92 + (v93 << 6) + 4));
    uint64_t v46 = (int *)v91;
    uint64_t v33 = v94;
    if (v45 == -1) {
      goto LABEL_41;
    }
    int v48 = (char *)a4[1];
    unint64_t v47 = a4[2];
    if ((unint64_t)v48 < v47)
    {
      *(_DWORD *)int v48 = v45;
      uint64_t v34 = (uint64_t)(v48 + 4);
      goto LABEL_40;
    }
    unint64_t v49 = (char *)*a4;
    uint64_t v50 = (uint64_t)&v48[-*a4];
    uint64_t v51 = v50 >> 2;
    unint64_t v52 = (v50 >> 2) + 1;
    if (v52 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v53 = v47 - (void)v49;
    if (v53 >> 1 > v52) {
      unint64_t v52 = v53 >> 1;
    }
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v52;
    }
    if (!v54)
    {
      unint64_t v55 = 0;
      unint64_t v56 = (_DWORD *)(4 * v51);
      *(_DWORD *)(4 * v51) = v45;
      uint64_t v34 = 4 * v51 + 4;
      if (v48 == v49) {
        goto LABEL_97;
      }
      goto LABEL_91;
    }
    if (v54 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v55 = operator new(4 * v54);
    unint64_t v56 = &v55[4 * v51];
    _DWORD *v56 = v45;
    uint64_t v34 = (uint64_t)(v56 + 1);
    if (v48 != v49)
    {
LABEL_91:
      unint64_t v79 = v48 - 4 - v49;
      if (v79 < 0x2C) {
        goto LABEL_115;
      }
      if ((unint64_t)(v48 - &v55[v50]) < 0x20) {
        goto LABEL_115;
      }
      uint64_t v80 = (v79 >> 2) + 1;
      uint64_t v81 = 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v82 = &v48[-v81];
      unint64_t v56 = (_DWORD *)((char *)v56 - v81);
      unint64_t v83 = &v55[4 * v51 - 16];
      unint64_t v84 = v48 - 16;
      uint64_t v85 = v80 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v86 = *(_OWORD *)v84;
        *(v83 - 1) = *((_OWORD *)v84 - 1);
        *unint64_t v83 = v86;
        v83 -= 2;
        v84 -= 32;
        v85 -= 8;
      }
      while (v85);
      int v48 = v82;
      if (v80 != (v80 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_115:
        do
        {
          int v87 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *--unint64_t v56 = v87;
        }
        while (v48 != v49);
      }
    }
LABEL_97:
    *a4 = v56;
    a4[1] = v34;
    a4[2] = &v55[4 * v54];
    if (v49) {
      operator delete(v49);
    }
    uint64_t v46 = (int *)v91;
LABEL_40:
    a4[1] = v34;
LABEL_41:
    unint64_t v32 = v96 + 1;
    if (v96 + 1 != v46) {
      continue;
    }
    break;
  }
  LODWORD(v99[0]) = 0;
  if (v94 < 1) {
    goto LABEL_106;
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_23CD452BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD452C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD452CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::Cleanup<operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(operations_research::sat::Trail *)::$_0>::~Cleanup(uint64_t result)
{
  if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
    unint64_t v1 = *(void **)(result + 8);
    int v2 = (int *)v1[17];
    uint64_t v3 = (int *)v1[18];
    if (v2 != v3)
    {
      uint64_t v4 = (v1[21] - v1[20]) >> 5;
      do
      {
        unint64_t v5 = *v2;
        if ((int)v5 < (int)v4)
        {
          uint64_t v6 = v1[68];
          uint64_t v7 = *(int *)(v6 + 4 * v5);
          if (v7 != -1)
          {
            *(unsigned char *)(v1[23] + (v7 << 6) + 56) = 0;
            *(_DWORD *)(v6 + 4 * v5) = -1;
            *(void *)(v1[65] + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v5);
          }
        }
        ++v2;
      }
      while (v2 != v3);
    }
  }
  return result;
}

uint64_t operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(void *a1, int *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  LODWORD(v143) = (*(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a4) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v140) = 0;
  if (v143) {
    google::MakeCheckOpString<int,int>((int)&v143, (int)&v140, "model->GetOrCreate<Trail>()->CurrentDecisionLevel() == 0");
  }
  if (a3 < 2) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v143 = 0;
  BOOL v144 = 0;
  unint64_t v124 = &a2[a3];
  BOOL v119 = a2;
  unint64_t v145 = 0;
  do
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a1[44];
    if ((int)v9 < (int)((unint64_t)(a1[45] - v10) >> 5))
    {
      int v11 = (void *)(v10 + 32 * v9);
      unint64_t v14 = *v11;
      unint64_t v13 = (int *)(v11 + 1);
      unint64_t v12 = v14;
      if (v14) {
        unint64_t v13 = *(int **)v13;
      }
      if (v12 >= 2)
      {
        uint64_t v15 = 4 * (v12 >> 1);
        do
        {
          uint64_t v16 = a1[23] + ((uint64_t)*v13 << 6);
          if ((*(void *)(v16 + 24) & 0xFFFFFFFFFFFFFFFELL) == 2 && *(_DWORD *)(v16 + 16) == -1)
          {
            if ((unint64_t)v8 >= v145)
            {
              unint64_t v8 = (__n128 *)std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo const&>((void **)&v143, v16);
            }
            else
            {
              std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__construct_one_at_end[abi:ne180100]<operations_research::sat::PrecedencesPropagator::ArcInfo const&>((char *)&v143, (long long *)v16);
              v8 += 4;
            }
            BOOL v144 = v8;
          }
          ++v13;
          v15 -= 4;
        }
        while (v15);
      }
    }
    ++a2;
  }
  while (a2 != v124);
  uint64_t v17 = v143;
  uint64_t v18 = (char *)v8 - (char *)v143;
  if ((unint64_t)((char *)v8 - (char *)v143) < 0x80)
  {
    uint64_t v7 = 0;
    if (v143) {
      goto LABEL_169;
    }
    return v7;
  }
  unint64_t v19 = v18 >> 6;
  if (v18 < 1)
  {
    unint64_t v22 = 0;
LABEL_27:
    unint64_t v21 = 0;
  }
  else
  {
    unint64_t v20 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v21 = v18 >> 6;
    while (1)
    {
      unint64_t v22 = (__n128 *)operator new(v21 << 6, v20);
      if (v22) {
        break;
      }
      BOOL v23 = v21 > 1;
      v21 >>= 1;
      if (!v23) {
        goto LABEL_27;
      }
    }
  }
  std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>((uint64_t)v17, v8, v19, v22, v21);
  if (v22) {
    operator delete(v22);
  }
  operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a4);
  uint64_t v17 = v144;
  if (v144 == v143)
  {
    uint64_t v7 = 0;
    goto LABEL_168;
  }
  uint64_t v25 = 0;
  uint64_t v7 = 0;
  LODWORD(v26) = 0;
  unint64_t v27 = ((char *)v144 - (char *)v143) >> 6;
  uint64_t v17 = v143;
  unint64_t v123 = a3;
  while (2)
  {
    uint64_t v128 = &v17[4 * v25];
    int v28 = v26;
    if (v27 <= (int)v26 + 1) {
      unint64_t v27 = (int)v26 + 1;
    }
    uint64_t v29 = &v17[4 * (uint64_t)(int)v26 + 4].n128_u32[1];
    uint64_t v26 = (int)v26;
    do
    {
      if (v27 - 1 == v26)
      {
        LODWORD(v26) = v27;
        unsigned int v31 = v27 - v28;
        if ((v27 - v28) < 2) {
          goto LABEL_32;
        }
        goto LABEL_41;
      }
      ++v26;
      unsigned __int32 v30 = *v29;
      v29 += 16;
    }
    while (v30 == v128->n128_u32[1]);
    unsigned int v31 = v26 - v28;
    if ((v26 - v28) < 2) {
      goto LABEL_32;
    }
LABEL_41:
    if ((int)v31 + 1 < a3) {
      goto LABEL_32;
    }
    __int32 v118 = v128->n128_i32[1];
    int v120 = v26;
    unsigned int v121 = v7;
    unint64_t v130 = 0;
    long long v131 = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    unsigned int v126 = v31;
    int v127 = 0;
    uint64_t v34 = 0;
    LODWORD(v35) = 0;
    unint64_t v140 = 0;
    uint64_t v141 = 0;
    uint64_t v142 = 0;
    int v137 = 0;
    uint64_t v138 = 0;
    uint64_t v139 = 0;
    long long __p = 0;
    int v135 = 0;
    uint64_t v136 = 0;
    unint64_t v132 = 0;
    int v133 = 0;
    uint64_t v36 = v119;
    while (2)
    {
      uint64_t v125 = v36;
      int v129 = *v36;
      if (v31 <= v35) {
        goto LABEL_133;
      }
      char v38 = 0;
      uint64_t v35 = (int)v35;
      while (1)
      {
        uint64_t v40 = (char *)&v128[4 * v35];
        if (*((void *)v40 + 3) <= 1uLL) {
        uint64_t v41 = v40 + 32;
        }
        if (*((void *)v40 + 3)) {
          uint64_t v41 = (void *)*v41;
        }
        if (v129 != *(_DWORD *)v41) {
          break;
        }
        if (v34 < v127)
        {
          *(_DWORD *)uint64_t v34 = *(_DWORD *)v40;
          v34 += 4;
          goto LABEL_73;
        }
        uint64_t v42 = (v34 - v33) >> 2;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v127 - v33) >> 1 > v43) {
          unint64_t v43 = (v127 - v33) >> 1;
        }
        if ((unint64_t)(v127 - v33) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          if (v44 >> 62) {
            goto LABEL_178;
          }
          int v45 = operator new(4 * v44);
          uint64_t v46 = &v45[4 * v42];
          *uint64_t v46 = *(_DWORD *)v40;
          uint64_t v47 = (uint64_t)(v46 + 1);
          if (v34 == v33) {
            goto LABEL_70;
          }
        }
        else
        {
          int v45 = 0;
          uint64_t v46 = (_DWORD *)(4 * v42);
          *(_DWORD *)(4 * v42) = *(_DWORD *)v40;
          uint64_t v47 = 4 * v42 + 4;
          if (v34 == v33) {
            goto LABEL_70;
          }
        }
        unint64_t v48 = v34 - 4 - v33;
        if (v48 >= 0xBC)
        {
          if (&v45[v34 - v33 - 4 - (v48 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[v34 - v33 - 4])
          {
            unint64_t v49 = v34;
          }
          else if (&v34[-(v48 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v34 - 4)
          {
            unint64_t v49 = v34;
          }
          else if ((unint64_t)(v33 - v45) >= 0x20)
          {
            uint64_t v80 = (v48 >> 2) + 1;
            uint64_t v81 = 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v49 = &v34[-v81];
            uint64_t v46 = (_DWORD *)((char *)v46 - v81);
            uint64_t v82 = &v45[4 * v42 - 16];
            unint64_t v83 = v34 - 16;
            uint64_t v84 = v80 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v85 = *(_OWORD *)v83;
              *(v82 - 1) = *((_OWORD *)v83 - 1);
              *uint64_t v82 = v85;
              v82 -= 2;
              v83 -= 32;
              v84 -= 8;
            }
            while (v84);
            if (v80 == (v80 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_70;
            }
          }
          else
          {
            unint64_t v49 = v34;
          }
        }
        else
        {
          unint64_t v49 = v34;
        }
        do
        {
          int v50 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *--uint64_t v46 = v50;
        }
        while (v49 != v33);
LABEL_70:
        unint64_t v140 = v46;
        uint64_t v141 = (char *)v47;
        int v127 = &v45[4 * v44];
        uint64_t v142 = v127;
        if (v33)
        {
          operator delete(v33);
          unint64_t v32 = v138;
          unint64_t v130 = v139;
        }
        uint64_t v33 = (char *)v46;
        uint64_t v34 = (char *)v47;
LABEL_73:
        uint64_t v141 = v34;
        uint64_t v51 = &v128[4 * v35].n128_i8[8];
        if (v32 < v130)
        {
          *(void *)unint64_t v32 = *(void *)v51;
          v32 += 8;
          uint64_t v138 = v32;
          uint64_t v53 = v135;
          unint64_t v52 = v136;
          if (v135 >= v136) {
            goto LABEL_93;
          }
          goto LABEL_48;
        }
        unint64_t v54 = v137;
        uint64_t v55 = (v32 - v137) >> 3;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v130 - v137) >> 2 > v56) {
          unint64_t v56 = (v130 - v137) >> 2;
        }
        if ((unint64_t)(v130 - v137) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57)
        {
          if (v57 >> 61) {
            goto LABEL_178;
          }
          unint64_t v58 = operator new(8 * v57);
          uint64_t v59 = &v58[8 * v55];
          *(void *)uint64_t v59 = *(void *)v51;
          uint64_t v60 = (uint64_t)(v59 + 8);
          if (v32 == v137) {
            goto LABEL_90;
          }
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = (char *)(8 * v55);
          *(void *)(8 * v55) = *(void *)v51;
          uint64_t v60 = 8 * v55 + 8;
          if (v32 == v137) {
            goto LABEL_90;
          }
        }
        unint64_t v61 = v32 - 8 - v137;
        if (v61 < 0x168)
        {
          int v62 = v32;
          goto LABEL_89;
        }
        if (&v58[v32 - v137 - 8 - (v61 & 0xFFFFFFFFFFFFFFF8)] > &v58[v32 - v137 - 8])
        {
          int v62 = v32;
          do
          {
LABEL_89:
            uint64_t v63 = *((void *)v62 - 1);
            v62 -= 8;
            *((void *)v59 - 1) = v63;
            v59 -= 8;
          }
          while (v62 != v137);
          goto LABEL_90;
        }
        if (&v32[-(v61 & 0xFFFFFFFFFFFFFFF8) - 8] > v32 - 8)
        {
          int v62 = v32;
          goto LABEL_89;
        }
        if ((unint64_t)(v137 - v58) < 0x20)
        {
          int v62 = v32;
          goto LABEL_89;
        }
        uint64_t v86 = (v61 >> 3) + 1;
        uint64_t v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
        int v62 = &v32[-v87];
        v59 -= v87;
        uint64_t v88 = &v58[8 * v55 - 16];
        unint64_t v89 = v32 - 16;
        uint64_t v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v91 = *(_OWORD *)v89;
          *(v88 - 1) = *((_OWORD *)v89 - 1);
          *uint64_t v88 = v91;
          v88 -= 2;
          v89 -= 32;
          v90 -= 4;
        }
        while (v90);
        if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_89;
        }
LABEL_90:
        int v137 = v59;
        unint64_t v130 = &v58[8 * v57];
        uint64_t v139 = v130;
        if (v54) {
          operator delete(v54);
        }
        unint64_t v32 = (char *)v60;
        uint64_t v138 = (char *)v60;
        uint64_t v53 = v135;
        unint64_t v52 = v136;
        if (v135 >= v136)
        {
LABEL_93:
          uint64_t v64 = __p;
          uint64_t v65 = (v53 - __p) >> 2;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v67 = v52 - __p;
          if (v67 >> 1 > v66) {
            unint64_t v66 = v67 >> 1;
          }
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v68 = v66;
          }
          if (v68)
          {
            if (v68 >> 62) {
LABEL_178:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            unint64_t v69 = operator new(4 * v68);
            unint64_t v70 = &v69[4 * v65];
            *(_DWORD *)unint64_t v70 = v129;
            uint64_t v39 = (uint64_t)(v70 + 4);
            if (v53 == __p) {
              goto LABEL_110;
            }
LABEL_104:
            unint64_t v71 = v53 - 4 - __p;
            if (v71 < 0x2C) {
              goto LABEL_186;
            }
            if ((unint64_t)(__p - v69) < 0x20) {
              goto LABEL_186;
            }
            uint64_t v72 = (v71 >> 2) + 1;
            uint64_t v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v74 = &v53[-v73];
            v70 -= v73;
            long long v75 = &v69[4 * v65 - 16];
            unint64_t v76 = v53 - 16;
            uint64_t v77 = v72 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v78 = *(_OWORD *)v76;
              *(v75 - 1) = *((_OWORD *)v76 - 1);
              *long long v75 = v78;
              v75 -= 2;
              v76 -= 32;
              v77 -= 8;
            }
            while (v77);
            uint64_t v53 = v74;
            if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_186:
              do
              {
                int v79 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v70 - 1) = v79;
                v70 -= 4;
              }
              while (v53 != __p);
            }
          }
          else
          {
            unint64_t v69 = 0;
            unint64_t v70 = (char *)(4 * v65);
            *(_DWORD *)(4 * v65) = v129;
            uint64_t v39 = 4 * v65 + 4;
            if (v53 != __p) {
              goto LABEL_104;
            }
          }
LABEL_110:
          long long __p = v70;
          uint64_t v136 = &v69[4 * v68];
          if (v64) {
            operator delete(v64);
          }
          goto LABEL_49;
        }
LABEL_48:
        *(_DWORD *)uint64_t v53 = v129;
        uint64_t v39 = (uint64_t)(v53 + 4);
LABEL_49:
        unsigned int v31 = v126;
        int v135 = (char *)v39;
        ++v35;
        char v38 = 1;
        if (v126 <= v35)
        {
          LODWORD(v35) = v126;
          goto LABEL_45;
        }
      }
      unsigned int v31 = v126;
      if (v38) {
        goto LABEL_45;
      }
LABEL_133:
      int v92 = v129 ^ 1;
      uint64_t v93 = v132;
      if (v132 < v133)
      {
        *(_DWORD *)unint64_t v132 = v92;
        uint64_t v37 = (uint64_t)(v132 + 4);
        goto LABEL_44;
      }
      uint64_t v94 = v131;
      uint64_t v95 = (v132 - (char *)v131) >> 2;
      unint64_t v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v97 = v133 - (char *)v131;
      if ((v133 - (char *)v131) >> 1 > v96) {
        unint64_t v96 = v97 >> 1;
      }
      if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v98 = v96;
      }
      if (!v98)
      {
        uint64_t v100 = 0;
        unint64_t v101 = (int *)(4 * v95);
        *(_DWORD *)(4 * v95) = v92;
        uint64_t v37 = 4 * v95 + 4;
        if (v132 != (char *)v131) {
          goto LABEL_143;
        }
LABEL_147:
        unsigned int v31 = v126;
        goto LABEL_153;
      }
      if (v98 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v99 = v98;
      uint64_t v100 = operator new(4 * v98);
      unint64_t v98 = v99;
      unint64_t v101 = (int *)&v100[4 * v95];
      int *v101 = v92;
      uint64_t v37 = (uint64_t)(v101 + 1);
      if (v132 == (char *)v131) {
        goto LABEL_147;
      }
LABEL_143:
      unint64_t v102 = v132 - 4 - (char *)v131;
      if (v102 < 0x2C)
      {
        unsigned int v31 = v126;
        goto LABEL_152;
      }
      unsigned int v31 = v126;
      if ((unint64_t)((char *)v131 - v100) < 0x20) {
        goto LABEL_187;
      }
      uint64_t v103 = (v102 >> 2) + 1;
      uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v105 = &v132[-v104];
      unint64_t v101 = (int *)((char *)v101 - v104);
      char v106 = &v100[4 * v95 - 16];
      int v107 = v132 - 16;
      uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v109 = *(_OWORD *)v107;
        *(v106 - 1) = *((_OWORD *)v107 - 1);
        _OWORD *v106 = v109;
        v106 -= 2;
        v107 -= 32;
        v108 -= 8;
      }
      while (v108);
      uint64_t v93 = v105;
      if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_187:
        do
        {
LABEL_152:
          int v110 = *((_DWORD *)v93 - 1);
          v93 -= 4;
          *--unint64_t v101 = v110;
        }
        while (v93 != (char *)v131);
      }
LABEL_153:
      long long v131 = v101;
      int v133 = &v100[4 * v98];
      if (v94)
      {
        uint64_t v111 = v37;
        operator delete(v94);
        uint64_t v37 = v111;
      }
LABEL_44:
      unint64_t v132 = (char *)v37;
LABEL_45:
      uint64_t v36 = v125 + 1;
      if (v125 + 1 != v124) {
        continue;
      }
      break;
    }
    uint64_t v112 = (v132 - (char *)v131) >> 2;
    if (v112 + 1 != v123)
    {
      unint64_t v113 = v140;
      int v146 = 0;
      unint64_t v114 = operator new(0x50uLL);
      *(void *)unint64_t v114 = &unk_26F0C4590;
      v114[2] = v118;
      *((void *)v114 + 2) = v113;
      *((void *)v114 + 3) = (v34 - v113) >> 2;
      *((void *)v114 + 4) = v137;
      *((void *)v114 + 5) = (v32 - v137) >> 3;
      *((void *)v114 + 6) = __p;
      *((void *)v114 + 7) = (v135 - __p) >> 2;
      *((void *)v114 + 8) = v131;
      *((void *)v114 + 9) = v112;
      int v146 = v114;
      operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()();
    }
    uint64_t v7 = v121;
    a3 = v123;
    if (v131) {
      operator delete(v131);
    }
    if (__p) {
      operator delete(__p);
    }
    if (v137) {
      operator delete(v137);
    }
    if (v140) {
      operator delete(v140);
    }
    LODWORD(v26) = v120;
LABEL_32:
    uint64_t v25 = (int)v26;
    uint64_t v17 = v143;
    unint64_t v27 = ((char *)v144 - (char *)v143) >> 6;
    if (v27 > (int)v26) {
      continue;
    }
    break;
  }
LABEL_168:
  if (v17)
  {
LABEL_169:
    unint64_t v115 = (void **)v144;
    unint64_t v116 = v17;
    if (v144 != v17)
    {
      do
      {
        if (*(unsigned char *)(v115 - 5)) {
          operator delete(*(v115 - 4));
        }
        v115 -= 8;
      }
      while (v115 != (void **)v17);
      unint64_t v116 = v143;
    }
    BOOL v144 = v17;
    operator delete(v116);
  }
  return v7;
}

void sub_23CD45F68()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 152));
}

void sub_23CD45F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v33 = *(void *)(v31 - 152);
  if (!v33) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v34 = *(void *)(v31 - 144);
  uint64_t v35 = *(void **)(v31 - 152);
  if (v34 == v33)
  {
    *(void *)(v31 - 144) = v33;
    operator delete(v35);
    _Unwind_Resume(exception_object);
  }
  while (1)
  {
    if (*(unsigned char *)(v34 - 40)) {
      operator delete(*(void **)(v34 - 32));
    }
    v34 -= 64;
    if (v34 == v33)
    {
      uint64_t v36 = *(void **)(v31 - 152);
      *(void *)(v31 - 144) = v33;
      operator delete(v36);
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(operations_research::sat::PrecedencesPropagator *this, operations_research::sat::Model *a2)
{
  uint64_t v212 = *MEMORY[0x263EF8340];
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  unint64_t v5 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  uint64_t v6 = (uint64_t)v5;
  uint64_t v208 = 0;
  unint64_t v209 = 0;
  uint64_t v210 = 0;
  uint64_t v8 = *((void *)this + 23);
  uint64_t v7 = *((void *)this + 24);
  int v190 = this;
  uint64_t v185 = v4;
  unint64_t v186 = v5;
  if ((int)((unint64_t)(v7 - v8) >> 6) >= 1)
  {
    uint64_t v9 = 0;
    while (1)
    {
      if (*(_DWORD *)(v8 + (v9 << 6) + 16) != -1) {
        goto LABEL_5;
      }
      int v11 = (int *)(v8 + (v9 << 6));
      int v12 = *v11;
      uint64_t v15 = v11[1];
      unint64_t v14 = v11 + 1;
      uint64_t v13 = v15;
      if (v12 == v15 || (*(void *)(v8 + (v9 << 6) + 24) & 0xFFFFFFFFFFFFFFFELL) != 2) {
        goto LABEL_5;
      }
      uint64_t v16 = v209;
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v209 - v208) >> 3);
      if ((int)v13 >= (int)v17)
      {
        unint64_t v18 = v13 + 1;
        if (v18 <= v17)
        {
          if (v18 < v17)
          {
            unint64_t v19 = &v208[24 * v18];
            if (v209 != v19)
            {
              unint64_t v20 = v209;
              do
              {
                unint64_t v21 = (operations_research::sat::SatSolver *)*((void *)v20 - 3);
                v20 -= 24;
                unint64_t v5 = v21;
                if (v21)
                {
                  *((void *)v16 - 2) = v5;
                  operator delete(v5);
                }
                uint64_t v16 = v20;
              }
              while (v20 != v19);
            }
            unint64_t v209 = v19;
          }
        }
        else
        {
          std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)&v208, v18 - v17);
        }
      }
      unint64_t v22 = &v208[24 * *v14];
      uint64_t v24 = (uint64_t *)(v22 + 8);
      BOOL v23 = (char *)*((void *)v22 + 1);
      unint64_t v25 = *((void *)v22 + 2);
      if ((unint64_t)v23 >= v25) {
        break;
      }
      *(_DWORD *)BOOL v23 = v9;
      uint64_t v10 = (uint64_t)(v23 + 4);
LABEL_4:
      *uint64_t v24 = v10;
      this = v190;
      uint64_t v8 = *((void *)v190 + 23);
      uint64_t v7 = *((void *)v190 + 24);
      uint64_t v4 = v185;
      uint64_t v6 = (uint64_t)v186;
LABEL_5:
      if (++v9 >= (int)((unint64_t)(v7 - v8) >> 6))
      {
        unint64_t v43 = v208;
        uint64_t v42 = v209;
        goto LABEL_41;
      }
    }
    uint64_t v26 = *(char **)v22;
    uint64_t v27 = (uint64_t)&v23[-*(void *)v22];
    uint64_t v28 = v27 >> 2;
    unint64_t v29 = (v27 >> 2) + 1;
    if (v29 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v30 = v25 - (void)v26;
    if (v30 >> 1 > v29) {
      unint64_t v29 = v30 >> 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      if (v31 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v5 = (operations_research::sat::SatSolver *)operator new(4 * v31);
      unint64_t v32 = (_DWORD *)((char *)v5 + 4 * v28);
      *unint64_t v32 = v9;
      uint64_t v10 = (uint64_t)(v32 + 1);
      if (v23 == v26) {
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v5 = 0;
      unint64_t v32 = (_DWORD *)(4 * v28);
      *(_DWORD *)(4 * v28) = v9;
      uint64_t v10 = 4 * v28 + 4;
      if (v23 == v26)
      {
LABEL_37:
        *(void *)unint64_t v22 = v32;
        *uint64_t v24 = v10;
        *((void *)v22 + 2) = (char *)v5 + 4 * v31;
        if (v26) {
          operator delete(v26);
        }
        goto LABEL_4;
      }
    }
    unint64_t v33 = v23 - 4 - v26;
    if (v33 < 0x2C) {
      goto LABEL_230;
    }
    if ((unint64_t)(v23 - ((char *)v5 + v27)) < 0x20) {
      goto LABEL_230;
    }
    uint64_t v34 = (v33 >> 2) + 1;
    uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v36 = &v23[-v35];
    unint64_t v32 = (_DWORD *)((char *)v32 - v35);
    uint64_t v37 = (_OWORD *)((char *)v5 + 4 * v28 - 16);
    char v38 = v23 - 16;
    uint64_t v39 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *uint64_t v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 8;
    }
    while (v39);
    BOOL v23 = v36;
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_230:
      do
      {
        int v41 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *--unint64_t v32 = v41;
      }
      while (v23 != v26);
    }
    goto LABEL_37;
  }
  unint64_t v43 = 0;
  uint64_t v42 = 0;
LABEL_41:
  if ((int)(-1431655765 * ((unint64_t)(v42 - v43) >> 3)) >= 1)
  {
    uint64_t v44 = 0;
    do
    {
      uint64_t v188 = v44;
      if (*(void *)&v43[24 * v44 + 8] - *(void *)&v43[24 * v44] >= 8uLL)
      {
        int v45 = *(unsigned __int8 **)(v4 + 120);
        if (v45)
        {
          unsigned __int8 v46 = atomic_load(v45);
          if (v46) {
            break;
          }
        }
        if (fmax(*(double *)(v4 + 104) - *(double *)(v4 + 112), 0.0) <= 0.0) {
          break;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v5);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v48 = CurrentTimeNanos;
        if (*(void *)(v4 + 24) <= CurrentTimeNanos - *(void *)(v4 + 8)) {
          uint64_t v49 = CurrentTimeNanos - *(void *)(v4 + 8);
        }
        else {
          uint64_t v49 = *(void *)(v4 + 24);
        }
        operations_research::RunningMax<long long>::Add((int *)(v4 + 32), v49);
        *(void *)(v4 + 8) = v48;
        if (*(void *)(*(void *)(v4 + 40) + 8 * *(int *)(v4 + 68)) + v48 >= *(void *)(v4 + 16))
        {
          if (!FLAGS_time_limit_use_usertime) {
            goto LABEL_215;
          }
          double v51 = *(double *)(v4 + 96);
          if (*(unsigned char *)(v4 + 72))
          {
            double v52 = v51
                + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v50) - *(void *)(v4 + 80) + *(void *)(v4 + 88))
                * -0.000000001;
            if (v52 <= 0.0001) {
              goto LABEL_215;
            }
          }
          else
          {
            double v52 = v51 + (double)*(uint64_t *)(v4 + 88) * -0.000000001;
            if (v52 <= 0.0001)
            {
LABEL_215:
              *(void *)(v4 + 16) = 0;
              break;
            }
          }
          *(void *)(v4 + 16) = *(void *)(v4 + 8) + (uint64_t)(v52 * 1000000000.0);
        }
        operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v6, 0);
        if (*(unsigned char *)(v6 + 496)) {
          break;
        }
        unint64_t v54 = (int **)&v208[24 * v188];
        uint64_t v55 = *v54;
        unint64_t v56 = v54[1];
        while (v55 != v56)
        {
          uint64_t v57 = *((void *)this + 23) + ((uint64_t)*v55 << 6);
          unint64_t v60 = *(void *)(v57 + 24);
          uint64_t v58 = v57 + 24;
          char v59 = v60;
          if (v60 <= 1) {
          unint64_t v61 = (int *)(v58 + 8);
          }
          if (v59) {
            unint64_t v61 = *(int **)v61;
          }
          unint64_t v62 = *v61;
          if (((*(void *)(*(void *)(*(void *)(v6 + 208) + 24) + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v62 & 0x3F ^ 1)) & 1) == 0)
          {
            int v63 = *(_DWORD *)(v6 + 304);
            operations_research::sat::SatSolver::EnqueueDecisionAndBacktrackOnConflict(v6, v62 ^ 1);
            if (*(unsigned char *)(v6 + 496)) {
              goto LABEL_206;
            }
            if (*(_DWORD *)(v6 + 304) <= v63)
            {
              operations_research::sat::SatSolver::GetLastIncompatibleDecisions((operations_research::sat::SatSolver *)v6, &v206);
              uint64_t v64 = (int *)v207[0];
              long long v187 = v206;
              goto LABEL_71;
            }
          }
          ++v55;
        }
        long long v187 = 0;
        uint64_t v64 = 0;
LABEL_71:
        operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v6, 0);
        if ((unint64_t)((char *)v64 - (char *)v187) >= 5)
        {
          std::set<operations_research::sat::Literal>::set[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>>((void **)&v206, v187, v64);
          long long __p = 0;
          unint64_t v204 = 0;
          uint64_t v205 = 0;
          unint64_t v66 = (int **)&v208[24 * v188];
          uint64_t v67 = *v66;
          unint64_t v68 = v66[1];
          if (*v66 != v68)
          {
            unint64_t v69 = 0;
            unint64_t v70 = 0;
            unint64_t v71 = 0;
            while (2)
            {
              uint64_t v72 = *v67;
              uint64_t v73 = *((void *)this + 23) + (v72 << 6);
              unint64_t v76 = *(void *)(v73 + 24);
              uint64_t v74 = v73 + 24;
              char v75 = v76;
              if (v76 <= 1) {
              uint64_t v77 = (void *)(v74 + 8);
              }
              if (v75) {
                uint64_t v77 = (void *)*v77;
              }
              uint64_t v78 = v207[0];
              if (!v207[0]) {
                goto LABEL_76;
              }
              int v79 = *(_DWORD *)v77 ^ 1;
              uint64_t v80 = v207;
              do
              {
                uint64_t v81 = (uint64_t *)v78;
                uint64_t v82 = v80;
                int v83 = *(_DWORD *)(v78 + 28);
                uint64_t v84 = (uint64_t *)(v78 + 8);
                if (v83 >= v79)
                {
                  uint64_t v84 = v81;
                  uint64_t v80 = v81;
                }
                uint64_t v78 = *v84;
              }
              while (v78);
              if (v80 == v207) {
                goto LABEL_76;
              }
              if (v83 < v79) {
                uint64_t v81 = v82;
              }
              if (v79 < *((_DWORD *)v81 + 7)) {
                goto LABEL_76;
              }
              if (v71 < v70)
              {
                *(_DWORD *)unint64_t v71 = v72;
                v71 += 4;
              }
              else
              {
                int64_t v85 = v71 - v69;
                uint64_t v86 = (v71 - v69) >> 2;
                unint64_t v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                if ((v70 - v69) >> 1 > v87) {
                  unint64_t v87 = (v70 - v69) >> 1;
                }
                if ((unint64_t)(v70 - v69) >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v88 = v87;
                }
                if (v88)
                {
                  if (v88 >> 62) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unint64_t v89 = (char *)operator new(4 * v88);
                  uint64_t v90 = v71;
                  long long v91 = &v89[4 * v86];
                  *(_DWORD *)long long v91 = v72;
                  unint64_t v71 = v91 + 4;
                  if (v90 != v69)
                  {
LABEL_99:
                    int v92 = v90;
                    uint64_t v93 = v90 - 4;
                    unint64_t v94 = v90 - 4 - v69;
                    if (v94 < 0xBC
                      || &v89[v85 - 4 - (v94 & 0xFFFFFFFFFFFFFFFCLL)] > &v89[v85 - 4]
                      || &v93[-(v94 & 0xFFFFFFFFFFFFFFFCLL)] > v93
                      || (unint64_t)(v93 - &v89[v85] + 4) < 0x20)
                    {
                      uint64_t v95 = v92;
                      this = v190;
                    }
                    else
                    {
                      uint64_t v97 = (v94 >> 2) + 1;
                      uint64_t v98 = 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
                      uint64_t v95 = &v92[-v98];
                      v91 -= v98;
                      unint64_t v99 = &v89[4 * v86 - 16];
                      uint64_t v100 = v92 - 16;
                      uint64_t v101 = v97 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v102 = *(_OWORD *)v100;
                        *((_OWORD *)v99 - 1) = *((_OWORD *)v100 - 1);
                        *(_OWORD *)unint64_t v99 = v102;
                        v99 -= 32;
                        v100 -= 32;
                        v101 -= 8;
                      }
                      while (v101);
                      this = v190;
                      if (v97 == (v97 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_102:
                        unint64_t v70 = &v89[4 * v88];
                        long long __p = v91;
                        unint64_t v204 = v71;
                        uint64_t v205 = v70;
                        if (v69) {
                          goto LABEL_103;
                        }
                        goto LABEL_104;
                      }
                    }
                    do
                    {
                      int v96 = *((_DWORD *)v95 - 1);
                      v95 -= 4;
                      *((_DWORD *)v91 - 1) = v96;
                      v91 -= 4;
                    }
                    while (v95 != v69);
                    goto LABEL_102;
                  }
                }
                else
                {
                  uint64_t v90 = v71;
                  unint64_t v89 = 0;
                  long long v91 = (char *)(4 * v86);
                  *(_DWORD *)(4 * v86) = v72;
                  unint64_t v71 = (char *)(4 * v86 + 4);
                  if (v90 != v69) {
                    goto LABEL_99;
                  }
                }
                this = v190;
                unint64_t v70 = &v89[4 * v88];
                long long __p = v91;
                unint64_t v204 = v71;
                uint64_t v205 = v70;
                if (v69) {
LABEL_103:
                }
                  operator delete(v69);
LABEL_104:
                unint64_t v69 = v91;
              }
              unint64_t v204 = v71;
LABEL_76:
              if (++v67 == v68) {
                goto LABEL_116;
              }
              continue;
            }
          }
          unint64_t v71 = 0;
LABEL_116:
          if (*operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(operations_research::sat::Model *)::vlocal__ > 1
            && (operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)&operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/precedences.cc", (const char *)2)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)&v200, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 864);
            google::LogMessage::stream((google::LogMessage *)&v200);
            uint64_t v103 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"/", 1);
            std::ostream::operator<<();
            google::LogMessage::~LogMessage((google::LogMessage *)&v200);
          }
          int v200 = 0;
          unint64_t v201 = 0;
          unint64_t v202 = 0;
          int64_t v197 = 0;
          unint64_t v198 = 0;
          uint64_t v199 = 0;
          unint64_t v194 = 0;
          unint64_t v195 = 0;
          uint64_t v196 = 0;
          uint64_t v104 = (int *)__p;
          if (__p == v71)
          {
            uint64_t v110 = 0;
            uint64_t v176 = 0;
            char v106 = 0;
            uint64_t v175 = 0;
            unint64_t v193 = 0;
            uint64_t v174 = 0;
LABEL_203:
            unint64_t v211 = 0;
            unint64_t v177 = operator new(0x40uLL);
            *(void *)unint64_t v177 = &unk_26F0C0848;
            v177[2] = v188;
            *((void *)v177 + 2) = v174;
            *((void *)v177 + 3) = (v193 - v174) >> 2;
            *((void *)v177 + 4) = v175;
            *((void *)v177 + 5) = (v106 - v175) >> 3;
            *((void *)v177 + 6) = v176;
            *((void *)v177 + 7) = (v110 - (uint64_t)v176) >> 2;
            unint64_t v211 = v177;
            operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()();
          }
          uint64_t v105 = 0;
          char v106 = 0;
          int v107 = 0;
          uint64_t v108 = 0;
          long long v109 = 0;
          int v189 = (int *)v71;
          while (2)
          {
            uint64_t v111 = *v104;
            uint64_t v112 = *((void *)v190 + 23);
            unint64_t v113 = (_DWORD *)(v112 + (v111 << 6));
            uint64_t v191 = v111;
            if (v109 < v108)
            {
              *(_DWORD *)long long v109 = *v113;
              v109 += 4;
              unint64_t v201 = v109;
              unint64_t v114 = (void *)(v112 + (v111 << 6) + 8);
              unint64_t v193 = v109;
              if (v106 < v105) {
                goto LABEL_125;
              }
LABEL_144:
              int v127 = v108;
              uint64_t v128 = v197;
              uint64_t v129 = (v106 - v197) >> 3;
              unint64_t v130 = v129 + 1;
              if ((unint64_t)(v129 + 1) >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              if ((v105 - v197) >> 2 > v130) {
                unint64_t v130 = (v105 - v197) >> 2;
              }
              if ((unint64_t)(v105 - v197) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v131 = v130;
              }
              if (v131)
              {
                if (v131 >> 61) {
LABEL_219:
                }
                  std::__throw_bad_array_new_length[abi:ne180100]();
                unint64_t v132 = (char *)operator new(8 * v131);
                long long v109 = v193;
                int v133 = &v132[8 * v129];
                *(void *)int v133 = *v114;
                uint64_t v134 = (uint64_t)(v133 + 8);
                if (v106 != v197)
                {
LABEL_153:
                  unint64_t v135 = v106 - 8 - v197;
                  if (v135 < 0x168
                    || &v132[v106 - v197 - 8 - (v135 & 0xFFFFFFFFFFFFFFF8)] > &v132[v106 - v197 - 8]
                    || &v106[-(v135 & 0xFFFFFFFFFFFFFFF8) - 8] > v106 - 8
                    || (unint64_t)(v197 - v132) < 0x20)
                  {
                    uint64_t v136 = v106;
                    uint64_t v108 = v127;
                  }
                  else
                  {
                    uint64_t v160 = (v135 >> 3) + 1;
                    uint64_t v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v136 = &v106[-v161];
                    v133 -= v161;
                    uint64_t v162 = &v132[8 * v129 - 16];
                    uint64_t v163 = (long long *)(v106 - 16);
                    uint64_t v164 = v160 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v165 = *v163;
                      *((_OWORD *)v162 - 1) = *(v163 - 1);
                      *(_OWORD *)uint64_t v162 = v165;
                      v162 -= 32;
                      v163 -= 2;
                      v164 -= 4;
                    }
                    while (v164);
                    uint64_t v108 = v127;
                    if (v160 == (v160 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_156:
                      uint64_t v105 = &v132[8 * v131];
                      int64_t v197 = v133;
                      uint64_t v199 = v105;
                      if (v128) {
                        goto LABEL_157;
                      }
                      goto LABEL_158;
                    }
                  }
                  do
                  {
                    uint64_t v137 = *((void *)v136 - 1);
                    v136 -= 8;
                    *((void *)v133 - 1) = v137;
                    v133 -= 8;
                  }
                  while (v136 != v197);
                  goto LABEL_156;
                }
              }
              else
              {
                unint64_t v132 = 0;
                int v133 = (char *)(8 * v129);
                *(void *)(8 * v129) = *v114;
                uint64_t v134 = 8 * v129 + 8;
                if (v106 != v197) {
                  goto LABEL_153;
                }
              }
              uint64_t v108 = v127;
              uint64_t v105 = &v132[8 * v131];
              int64_t v197 = v133;
              uint64_t v199 = v105;
              if (v128)
              {
LABEL_157:
                operator delete(v128);
                long long v109 = v193;
                uint64_t v112 = *((void *)v190 + 23);
              }
LABEL_158:
              char v106 = (char *)v134;
              uint64_t v111 = v191;
LABEL_159:
              unint64_t v198 = v106;
              uint64_t v138 = v112 + (v111 << 6);
              unint64_t v141 = *(void *)(v138 + 24);
              uint64_t v139 = v138 + 24;
              char v140 = v141;
              if (v141 <= 1) {
              uint64_t v142 = (void *)(v139 + 8);
              }
              if (v140) {
                uint64_t v142 = (void *)*v142;
              }
              int v143 = *(_DWORD *)v142;
              BOOL v144 = v195;
              if (v195 < v196)
              {
                *(_DWORD *)unint64_t v195 = v143;
                uint64_t v110 = (uint64_t)(v195 + 4);
                v195 += 4;
                if (++v104 == v189) {
                  goto LABEL_201;
                }
                continue;
              }
              uint64_t v192 = v105;
              unint64_t v145 = v194;
              uint64_t v146 = (v195 - v194) >> 2;
              unint64_t v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v148 = v196 - v194;
              if ((v196 - v194) >> 1 > v147) {
                unint64_t v147 = v148 >> 1;
              }
              if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v149 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v149 = v147;
              }
              if (v149)
              {
                if (v149 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v150 = v149;
                int v151 = (char *)operator new(4 * v149);
                long long v109 = v193;
                unint64_t v149 = v150;
                long long v152 = &v151[4 * v146];
                *(_DWORD *)long long v152 = v143;
                uint64_t v110 = (uint64_t)(v152 + 4);
                if (v195 != v194)
                {
LABEL_172:
                  unint64_t v153 = v195 - 4 - v194;
                  if (v153 < 0x2C) {
                    goto LABEL_231;
                  }
                  if ((unint64_t)(v194 - v151) < 0x20) {
                    goto LABEL_231;
                  }
                  uint64_t v166 = (v153 >> 2) + 1;
                  uint64_t v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
                  unint64_t v168 = &v195[-v167];
                  v152 -= v167;
                  uint64_t v169 = &v151[4 * v146 - 16];
                  int v170 = (long long *)(v195 - 16);
                  uint64_t v171 = v166 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v172 = *v170;
                    *((_OWORD *)v169 - 1) = *(v170 - 1);
                    *(_OWORD *)uint64_t v169 = v172;
                    v169 -= 32;
                    v170 -= 2;
                    v171 -= 8;
                  }
                  while (v171);
                  BOOL v144 = v168;
                  if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_231:
                    do
                    {
                      int v173 = *((_DWORD *)v144 - 1);
                      v144 -= 4;
                      *((_DWORD *)v152 - 1) = v173;
                      v152 -= 4;
                    }
                    while (v144 != v194);
                  }
                }
              }
              else
              {
                int v151 = 0;
                long long v152 = (char *)(4 * v146);
                *(_DWORD *)(4 * v146) = v143;
                uint64_t v110 = 4 * v146 + 4;
                if (v195 != v194) {
                  goto LABEL_172;
                }
              }
              unint64_t v194 = v152;
              uint64_t v196 = &v151[4 * v149];
              if (v145)
              {
                operator delete(v145);
                long long v109 = v193;
              }
              uint64_t v105 = v192;
              unint64_t v195 = (char *)v110;
              if (++v104 == v189)
              {
LABEL_201:
                uint64_t v174 = v200;
                uint64_t v175 = v197;
                uint64_t v176 = v194;
                goto LABEL_203;
              }
              continue;
            }
            break;
          }
          unint64_t v115 = v105;
          int64_t v116 = v109 - v107;
          uint64_t v117 = (v109 - v107) >> 2;
          unint64_t v118 = v117 + 1;
          if ((unint64_t)(v117 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v108 - v107) >> 1 > v118) {
            unint64_t v118 = (v108 - v107) >> 1;
          }
          if ((unint64_t)(v108 - v107) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v119 = v118;
          }
          if (v119)
          {
            if (v119 >> 62) {
              goto LABEL_219;
            }
            int v120 = v109;
            unsigned int v121 = operator new(4 * v119);
            long long v109 = v120;
            uint64_t v122 = &v121[4 * v117];
            *(_DWORD *)uint64_t v122 = *v113;
            uint64_t v123 = (uint64_t)(v122 + 4);
            if (v109 != v107)
            {
LABEL_135:
              unint64_t v124 = v109 - 4 - v107;
              if (v124 < 0xBC
                || &v121[v116 - 4 - (v124 & 0xFFFFFFFFFFFFFFFCLL)] > &v121[v116 - 4]
                || &v109[-(v124 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v109 - 4
                || (unint64_t)(v109 - &v121[v116]) < 0x20)
              {
                uint64_t v125 = v109;
                uint64_t v105 = v115;
              }
              else
              {
                uint64_t v154 = (v124 >> 2) + 1;
                uint64_t v155 = 4 * (v154 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v125 = &v109[-v155];
                v122 -= v155;
                long long v156 = &v121[4 * v117 - 16];
                long long v157 = v109 - 16;
                uint64_t v158 = v154 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v159 = *(_OWORD *)v157;
                  *(v156 - 1) = *((_OWORD *)v157 - 1);
                  _OWORD *v156 = v159;
                  v156 -= 2;
                  v157 -= 32;
                  v158 -= 8;
                }
                while (v158);
                uint64_t v105 = v115;
                if (v154 == (v154 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_138:
                  uint64_t v108 = &v121[4 * v119];
                  int v200 = v122;
                  unint64_t v201 = (char *)v123;
                  unint64_t v202 = v108;
                  if (v107) {
                    goto LABEL_139;
                  }
LABEL_142:
                  int v107 = v122;
                  long long v109 = (char *)v123;
                  goto LABEL_143;
                }
              }
              do
              {
                int v126 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *((_DWORD *)v122 - 1) = v126;
                v122 -= 4;
              }
              while (v125 != v107);
              goto LABEL_138;
            }
          }
          else
          {
            unsigned int v121 = 0;
            uint64_t v122 = (char *)(4 * v117);
            *(_DWORD *)(4 * v117) = *v113;
            uint64_t v123 = 4 * v117 + 4;
            if (v109 != v107) {
              goto LABEL_135;
            }
          }
          uint64_t v105 = v115;
          uint64_t v108 = &v121[4 * v119];
          int v200 = v122;
          unint64_t v201 = (char *)v123;
          unint64_t v202 = v108;
          if (!v107) {
            goto LABEL_142;
          }
LABEL_139:
          operator delete(v107);
          uint64_t v112 = *((void *)v190 + 23);
          int v107 = v122;
          long long v109 = (char *)v123;
          char v106 = v198;
          uint64_t v105 = v199;
LABEL_143:
          uint64_t v111 = v191;
          unint64_t v201 = v109;
          unint64_t v114 = (void *)(v112 + (v191 << 6) + 8);
          unint64_t v193 = v109;
          if (v106 >= v105) {
            goto LABEL_144;
          }
LABEL_125:
          *(void *)char v106 = *v114;
          v106 += 8;
          goto LABEL_159;
        }
        unint64_t v5 = (operations_research::sat::SatSolver *)v187;
        if (v187) {
          operator delete(v187);
        }
        unint64_t v43 = v208;
        uint64_t v42 = v209;
      }
      uint64_t v44 = v188 + 1;
    }
    while (v188 + 1 < (int)(-1431655765 * ((unint64_t)(v42 - v43) >> 3)));
  }
LABEL_206:
  unint64_t v178 = v208;
  if (v208)
  {
    unint64_t v179 = v209;
    uint64_t v180 = v208;
    if (v209 != v208)
    {
      uint64_t v181 = v209;
      do
      {
        int v183 = (void *)*((void *)v181 - 3);
        v181 -= 24;
        unint64_t v182 = v183;
        if (v183)
        {
          *((void *)v179 - 2) = v182;
          operator delete(v182);
        }
        unint64_t v179 = v181;
      }
      while (v181 != v178);
      uint64_t v180 = v208;
    }
    unint64_t v209 = v178;
    operator delete(v180);
  }
  return 0;
}

void sub_23CD470A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,void *a34)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a33, a34);
  if (a14) {
    operator delete(a14);
  }
  uint64_t v36 = *(char **)(v34 - 184);
  if (v36) {
    std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()((char **)(v34 - 184), v36);
  }
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraints(operations_research::sat::PrecedencesPropagator *this, operations_research::sat::Model *a2)
{
  if (*_MergedGlobals_16[0] >= 1
    && (_MergedGlobals_16[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_16, (int **)&fLI::FLAGS_v, "./ortools/sat/precedences.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 884);
    uint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Detecting GreaterThanAtLeastOneOf() constraints...", 50);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  uint64_t v7 = (absl::lts_2020_02_25 *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>((uint64_t)a2);
  uint64_t v8 = (int **)*((void *)v7 + 38);
  uint64_t v9 = (int **)*((void *)v7 + 39);
  if ((unint64_t)((char *)v9 - (char *)v8) > 0x7A11FF)
  {
    uint64_t v10 = operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(this, a2);
LABEL_25:
    unint64_t v20 = off_26AED0108[0];
    if (*off_26AED0108[0] < 1) {
      return v10;
    }
LABEL_26:
    if (v20 != &google::kLogSiteUninitialized
      || google::InitVLOG3__((google *)off_26AED0108, (int **)&fLI::FLAGS_v, "./ortools/sat/precedences.cc", (const char *)1))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 915);
      unint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Added ", 6);
      unint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" GreaterThanAtLeastOneOf() constraints.", 39);
      google::LogMessage::~LogMessage((google::LogMessage *)v24);
    }
    return v10;
  }
  if (v8 == v9)
  {
    uint64_t v10 = 0;
    unint64_t v20 = off_26AED0108[0];
    if (*off_26AED0108[0] < 1) {
      return v10;
    }
    goto LABEL_26;
  }
  uint64_t v10 = 0;
  while (1)
  {
    int v11 = *v8;
    int v12 = *(unsigned __int8 **)(v5 + 120);
    if (v12)
    {
      unsigned __int8 v13 = atomic_load(v12);
      if (v13) {
        return v10;
      }
    }
    if (fmax(*(double *)(v5 + 104) - *(double *)(v5 + 112), 0.0) <= 0.0) {
      return v10;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v7);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = CurrentTimeNanos;
    if (*(void *)(v5 + 24) <= CurrentTimeNanos - *(void *)(v5 + 8)) {
      uint64_t v16 = CurrentTimeNanos - *(void *)(v5 + 8);
    }
    else {
      uint64_t v16 = *(void *)(v5 + 24);
    }
    operations_research::RunningMax<long long>::Add((int *)(v5 + 32), v16);
    *(void *)(v5 + 8) = v15;
    if (*(void *)(*(void *)(v5 + 40) + 8 * *(int *)(v5 + 68)) + v15 >= *(void *)(v5 + 16))
    {
      if (!FLAGS_time_limit_use_usertime) {
        goto LABEL_32;
      }
      double v18 = *(double *)(v5 + 96);
      if (*(unsigned char *)(v5 + 72))
      {
        double v19 = v18
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v17) - *(void *)(v5 + 80) + *(void *)(v5 + 88))
            * -0.000000001;
        if (v19 <= 0.0001) {
          goto LABEL_32;
        }
      }
      else
      {
        double v19 = v18 + (double)*(uint64_t *)(v5 + 88) * -0.000000001;
        if (v19 <= 0.0001)
        {
LABEL_32:
          *(void *)(v5 + 16) = 0;
          return v10;
        }
      }
      *(void *)(v5 + 16) = *(void *)(v5 + 8) + (uint64_t)(v19 * 1000000000.0);
    }
    if (*(unsigned char *)(v6 + 496)) {
      return v10;
    }
    uint64_t v7 = (absl::lts_2020_02_25 *)operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(this, v11 + 1, *v11, (uint64_t)a2);
    uint64_t v10 = (v7 + v10);
    if (++v8 == v9) {
      goto LABEL_25;
    }
  }
}

void sub_23CD474E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD474FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::PrecedencesPropagator::~PrecedencesPropagator(operations_research::sat::PrecedencesPropagator *this)
{
  operations_research::sat::PrecedencesPropagator::~PrecedencesPropagator(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char v33;
  void *v34;
  void *v35;

  *(void *)this = &unk_26F0C44E8;
  *((void *)this + 5) = &unk_26F0C4528;
  int v2 = (void *)*((void *)this + 71);
  if (v2)
  {
    *((void *)this + 72) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 68);
  if (v3)
  {
    *((void *)this + 69) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 65);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 62);
  if (v5) {
    operator delete(v5);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 448);
  uint64_t v6 = (void *)*((void *)this + 53);
  if (v6)
  {
    *((void *)this + 54) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 50);
  if (v7)
  {
    *((void *)this + 51) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 47);
  if (v8)
  {
    *((void *)this + 48) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *((void *)this + 44);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 45);
    int v11 = (void *)*((void *)this + 44);
    if (v10 != v9)
    {
      int v12 = *((void *)this + 45);
      do
      {
        unsigned __int8 v13 = *(unsigned char *)(v12 - 32);
        v12 -= 32;
        if (v13) {
          operator delete(*(void **)(v10 - 24));
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      int v11 = (void *)*((void *)this + 44);
    }
    *((void *)this + 45) = v9;
    operator delete(v11);
  }
  unint64_t v14 = (void *)*((void *)this + 41);
  if (v14)
  {
    *((void *)this + 42) = v14;
    operator delete(v14);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = (void *)*((void *)this + 38);
  if (v15)
  {
    *((void *)this + 39) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 35);
  if (v16)
  {
    *((void *)this + 36) = v16;
    operator delete(v16);
  }
  unint64_t v17 = (void *)*((void *)this + 32);
  if (v17)
  {
    *((void *)this + 33) = v17;
    operator delete(v17);
  }
  double v18 = *((void *)this + 29);
  if (v18)
  {
    double v19 = *((void *)this + 30);
    unint64_t v20 = (void *)*((void *)this + 29);
    if (v19 != v18)
    {
      do
      {
        if (*(unsigned char *)(v19 - 40)) {
          operator delete(*(void **)(v19 - 32));
        }
        v19 -= 64;
      }
      while (v19 != v18);
      unint64_t v20 = (void *)*((void *)this + 29);
    }
    *((void *)this + 30) = v18;
    operator delete(v20);
  }
  unint64_t v21 = *((void *)this + 26);
  if (v21)
  {
    unint64_t v22 = *((void *)this + 27);
    BOOL v23 = (void *)*((void *)this + 26);
    if (v22 != v21)
    {
      uint64_t v24 = *((void *)this + 27);
      do
      {
        unint64_t v25 = *(unsigned char *)(v24 - 32);
        v24 -= 32;
        if (v25) {
          operator delete(*(void **)(v22 - 24));
        }
        unint64_t v22 = v24;
      }
      while (v24 != v21);
      BOOL v23 = (void *)*((void *)this + 26);
    }
    *((void *)this + 27) = v21;
    operator delete(v23);
  }
  uint64_t v26 = *((void *)this + 23);
  if (v26)
  {
    uint64_t v27 = *((void *)this + 24);
    uint64_t v28 = (void *)*((void *)this + 23);
    if (v27 != v26)
    {
      do
      {
        if (*(unsigned char *)(v27 - 40)) {
          operator delete(*(void **)(v27 - 32));
        }
        v27 -= 64;
      }
      while (v27 != v26);
      uint64_t v28 = (void *)*((void *)this + 23);
    }
    *((void *)this + 24) = v26;
    operator delete(v28);
  }
  unint64_t v29 = *((void *)this + 20);
  if (v29)
  {
    uint64_t v30 = *((void *)this + 21);
    unint64_t v31 = (void *)*((void *)this + 20);
    if (v30 != v29)
    {
      unint64_t v32 = *((void *)this + 21);
      do
      {
        unint64_t v33 = *(unsigned char *)(v32 - 32);
        v32 -= 32;
        if (v33) {
          operator delete(*(void **)(v30 - 24));
        }
        uint64_t v30 = v32;
      }
      while (v32 != v29);
      unint64_t v31 = (void *)*((void *)this + 20);
    }
    *((void *)this + 21) = v29;
    operator delete(v31);
  }
  uint64_t v34 = (void *)*((void *)this + 17);
  if (v34)
  {
    *((void *)this + 18) = v34;
    operator delete(v34);
  }
  uint64_t v35 = (void *)*((void *)this + 11);
  if (v35)
  {
    *((void *)this + 12) = v35;
    operator delete(v35);
  }
  *(void *)this = &unk_26F0BD580;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void non-virtual thunk to'operations_research::sat::PrecedencesPropagator::~PrecedencesPropagator(operations_research::sat::PrecedencesPropagator *this)
{
}

{
  uint64_t vars8;

  operations_research::sat::PrecedencesPropagator::~PrecedencesPropagator((operations_research::sat::PrecedencesPropagator *)((char *)this - 40));

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x50uLL);
  *(void *)int v2 = &unk_26F0C4590;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C4590;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()()
{
}

uint64_t std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4"
                     "absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEESG_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable"
                                "_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_I"
                                "KNS0_7LiteralEEESG_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEESG_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEESG_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()()
{
}

void sub_23CD477E4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C40846E0A44);
  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *,false>(unint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v11 = result;
  while (2)
  {
    int v12 = (uint64_t *)(a2 - 12);
    uint64_t v139 = a2 - 36;
    char v140 = a2 - 24;
    unint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v13;
          uint64_t v14 = (uint64_t)&a2[-v13];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-v13] >> 2);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*((void *)a2 - 1) < *(void *)(v13 + 4))
                {
                  int v186 = *(_DWORD *)(v13 + 8);
                  uint64_t v160 = *(void *)v13;
                  uint64_t v100 = *(void *)(a2 - 12);
                  *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
                  *(void *)unint64_t v13 = v100;
                  *((_DWORD *)a2 - 1) = v186;
                  *(void *)(a2 - 12) = v160;
                }
                return result;
              case 3uLL:
                unint64_t v101 = v13 + 12;
                uint64_t v102 = *(void *)(v13 + 16);
                uint64_t v103 = *((void *)a2 - 1);
                if (v102 < *(void *)(v13 + 4))
                {
                  if (v103 >= v102)
                  {
                    int v190 = *(_DWORD *)(v13 + 8);
                    uint64_t v164 = *(void *)v13;
                    *(void *)unint64_t v13 = *(void *)v101;
                    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 20);
                    *(void *)unint64_t v101 = v164;
                    *(_DWORD *)(v13 + 20) = v190;
                    if (*((void *)a2 - 1) < *(void *)(v13 + 16))
                    {
                      uint64_t v130 = *(void *)v101;
                      int v131 = *(_DWORD *)(v13 + 20);
                      int v132 = *((_DWORD *)a2 - 1);
                      *(void *)unint64_t v101 = *v12;
                      *(_DWORD *)(v13 + 20) = v132;
                      *((_DWORD *)a2 - 1) = v131;
                      *int v12 = v130;
                    }
                  }
                  else
                  {
                    int v187 = *(_DWORD *)(v13 + 8);
                    uint64_t v161 = *(void *)v13;
                    uint64_t v104 = *v12;
                    *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
                    *(void *)unint64_t v13 = v104;
                    *((_DWORD *)a2 - 1) = v187;
                    *int v12 = v161;
                  }
                  return result;
                }
                if (v103 >= v102) {
                  return result;
                }
                uint64_t v120 = *(void *)v101;
                int v121 = *(_DWORD *)(v13 + 20);
                int v122 = *((_DWORD *)a2 - 1);
                *(void *)unint64_t v101 = *v12;
                *(_DWORD *)(v13 + 20) = v122;
                *((_DWORD *)a2 - 1) = v121;
                *int v12 = v120;
                goto LABEL_151;
              case 4uLL:
                unint64_t v101 = v13 + 12;
                uint64_t v105 = (uint64_t *)(v13 + 24);
                uint64_t v106 = *(void *)(v13 + 16);
                uint64_t v107 = *(void *)(v13 + 28);
                if (v106 >= *(void *)(v13 + 4))
                {
                  if (v107 < v106)
                  {
                    int v123 = *(_DWORD *)(v13 + 20);
                    uint64_t v124 = *(void *)v101;
                    *(void *)unint64_t v101 = *v105;
                    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 32);
                    *uint64_t v105 = v124;
                    *(_DWORD *)(v13 + 32) = v123;
                    if (*(void *)(v13 + 16) < *(void *)(v13 + 4))
                    {
                      int v189 = *(_DWORD *)(v13 + 8);
                      uint64_t v163 = *(void *)v13;
                      *(void *)unint64_t v13 = *(void *)v101;
                      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 20);
                      *(void *)unint64_t v101 = v163;
                      *(_DWORD *)(v13 + 20) = v189;
                    }
                  }
                }
                else
                {
                  if (v107 >= v106)
                  {
                    int v191 = *(_DWORD *)(v13 + 8);
                    uint64_t v165 = *(void *)v13;
                    *(void *)unint64_t v13 = *(void *)v101;
                    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 20);
                    *(void *)unint64_t v101 = v165;
                    *(_DWORD *)(v13 + 20) = v191;
                    if (v107 >= *(void *)(v13 + 16)) {
                      goto LABEL_148;
                    }
                    int v108 = *(_DWORD *)(v13 + 20);
                    uint64_t v133 = *(void *)v101;
                    *(void *)unint64_t v101 = *v105;
                    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 32);
                    *uint64_t v105 = v133;
                  }
                  else
                  {
                    int v188 = *(_DWORD *)(v13 + 8);
                    uint64_t v162 = *(void *)v13;
                    *(void *)unint64_t v13 = *v105;
                    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 32);
                    *uint64_t v105 = v162;
                    int v108 = v188;
                  }
                  *(_DWORD *)(v13 + 32) = v108;
                }
LABEL_148:
                if (*((void *)a2 - 1) < *(void *)(v13 + 28))
                {
                  uint64_t v134 = *v105;
                  int v135 = *(_DWORD *)(v13 + 32);
                  int v136 = *((_DWORD *)a2 - 1);
                  *uint64_t v105 = *v12;
                  *(_DWORD *)(v13 + 32) = v136;
                  *((_DWORD *)a2 - 1) = v135;
                  *int v12 = v134;
                  if (*(void *)(v13 + 28) < *(void *)(v13 + 16))
                  {
                    int v137 = *(_DWORD *)(v13 + 20);
                    uint64_t v138 = *(void *)v101;
                    *(void *)unint64_t v101 = *v105;
                    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 32);
                    *uint64_t v105 = v138;
                    *(_DWORD *)(v13 + 32) = v137;
LABEL_151:
                    if (*(void *)(v13 + 16) < *(void *)(v13 + 4))
                    {
                      int v192 = *(_DWORD *)(v13 + 8);
                      uint64_t v166 = *(void *)v13;
                      *(void *)unint64_t v13 = *(void *)v101;
                      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v101 + 8);
                      *(void *)unint64_t v101 = v166;
                      *(_DWORD *)(v101 + 8) = v192;
                    }
                  }
                }
                break;
              case 5uLL:
                return (unint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((uint64_t *)v13, (uint64_t *)(v13 + 12), (uint64_t *)(v13 + 24), (uint64_t *)(v13 + 36), (uint64_t *)(a2 - 12));
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 287)
          {
            long long v109 = (char *)(v13 + 12);
            BOOL v111 = (char *)v13 == a2 || v109 == a2;
            if (a5)
            {
              if (!v111)
              {
                uint64_t v112 = 0;
                unint64_t v113 = v13;
                do
                {
                  uint64_t v115 = *(void *)(v113 + 16);
                  uint64_t v116 = *(void *)(v113 + 4);
                  unint64_t v113 = (unint64_t)v109;
                  if (v115 < v116)
                  {
                    int v117 = *(_DWORD *)v109;
                    uint64_t v118 = v112;
                    do
                    {
                      uint64_t v119 = v13 + v118;
                      *(void *)(v119 + 12) = *(void *)(v13 + v118);
                      *(_DWORD *)(v119 + 20) = *(_DWORD *)(v13 + v118 + 8);
                      if (!v118)
                      {
                        uint64_t v114 = v13;
                        goto LABEL_120;
                      }
                      v118 -= 12;
                    }
                    while (v115 < *(void *)(v119 - 8));
                    uint64_t v114 = v13 + v118 + 12;
LABEL_120:
                    *(_DWORD *)uint64_t v114 = v117;
                    *(void *)(v114 + 4) = v115;
                  }
                  long long v109 = (char *)(v113 + 12);
                  v112 += 12;
                }
                while ((char *)(v113 + 12) != a2);
              }
            }
            else if (!v111)
            {
              do
              {
                uint64_t v125 = *(void *)(v11 + 16);
                uint64_t v126 = *(void *)(v11 + 4);
                unint64_t v11 = (unint64_t)v109;
                if (v125 < v126)
                {
                  int v127 = *(_DWORD *)v109;
                  do
                  {
                    uint64_t v128 = v109;
                    uint64_t v129 = *(void *)(v109 - 12);
                    v109 -= 12;
                    *(void *)uint64_t v128 = v129;
                    *((_DWORD *)v128 + 2) = *((_DWORD *)v128 - 1);
                  }
                  while (v125 < *(void *)(v128 - 20));
                  *(_DWORD *)long long v109 = v127;
                  *(void *)(v109 + 4) = v125;
                }
                long long v109 = (char *)(v11 + 12);
              }
              while ((char *)(v11 + 12) != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((char *)v13 != a2)
            {
              return (unint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((char *)v13, a2, (uint64_t *)a2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          unint64_t v17 = v13 + 12 * (v15 >> 1);
          uint64_t v18 = *((void *)a2 - 1);
          if ((unint64_t)v14 >= 0x601) {
            break;
          }
          uint64_t v22 = *(void *)(v13 + 4);
          BOOL v23 = (void *)(v13 + 4 + 12 * v16);
          if (v22 < *v23)
          {
            if (v18 >= v22)
            {
              int v175 = *(_DWORD *)(v17 + 8);
              uint64_t v149 = *(void *)v17;
              uint64_t v45 = *(void *)v13;
              *(_DWORD *)(v17 + 8) = *(_DWORD *)(v13 + 8);
              *(void *)unint64_t v17 = v45;
              *(_DWORD *)(v13 + 8) = v175;
              *(void *)unint64_t v13 = v149;
              if (*((void *)a2 - 1) >= *(void *)(v13 + 4)) {
                goto LABEL_33;
              }
              int v168 = *(_DWORD *)(v13 + 8);
              uint64_t v142 = *(void *)v13;
              uint64_t v46 = *v12;
              *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
              *(void *)unint64_t v13 = v46;
            }
            else
            {
              int v168 = *(_DWORD *)(v17 + 8);
              uint64_t v142 = *(void *)v17;
              uint64_t v24 = *v12;
              *(_DWORD *)(v17 + 8) = *((_DWORD *)a2 - 1);
              *(void *)unint64_t v17 = v24;
            }
            *((_DWORD *)a2 - 1) = v168;
            *int v12 = v142;
LABEL_33:
            --a4;
            if ((a5 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_34;
          }
          if (v18 >= v22) {
            goto LABEL_33;
          }
          int v171 = *(_DWORD *)(v13 + 8);
          uint64_t v145 = *(void *)v13;
          uint64_t v27 = *v12;
          *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
          *(void *)unint64_t v13 = v27;
          *((_DWORD *)a2 - 1) = v171;
          *int v12 = v145;
          if (*(void *)(v13 + 4) >= *v23) {
            goto LABEL_33;
          }
          int v172 = *(_DWORD *)(v17 + 8);
          uint64_t v146 = *(void *)v17;
          uint64_t v28 = *(void *)v13;
          *(_DWORD *)(v17 + 8) = *(_DWORD *)(v13 + 8);
          *(void *)unint64_t v17 = v28;
          *(_DWORD *)(v13 + 8) = v172;
          *(void *)unint64_t v13 = v146;
          --a4;
          if (a5) {
            goto LABEL_34;
          }
LABEL_55:
          uint64_t v47 = *(void *)(v13 + 4);
          if (*(void *)(v13 - 8) < v47) {
            goto LABEL_56;
          }
          if (v47 < *((void *)a2 - 1))
          {
            unint64_t v88 = v13;
            do
            {
              unint64_t v13 = v88 + 12;
              uint64_t v89 = *(void *)(v88 + 16);
              v88 += 12;
            }
            while (v47 >= v89);
          }
          else
          {
            unint64_t v90 = v13 + 12;
            do
            {
              unint64_t v13 = v90;
              if (v90 >= (unint64_t)a2) {
                break;
              }
              uint64_t v91 = *(void *)(v90 + 4);
              v90 += 12;
            }
            while (v47 >= v91);
          }
          int v92 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v93 = a2;
            do
            {
              int v92 = v93 - 12;
              uint64_t v94 = *((void *)v93 - 1);
              v93 -= 12;
            }
            while (v47 < v94);
          }
          int v95 = *(_DWORD *)v11;
          while (v13 < (unint64_t)v92)
          {
            int v185 = *(_DWORD *)(v13 + 8);
            uint64_t v159 = *(void *)v13;
            uint64_t v96 = *(void *)v92;
            *(_DWORD *)(v13 + 8) = *((_DWORD *)v92 + 2);
            *(void *)unint64_t v13 = v96;
            *((_DWORD *)v92 + 2) = v185;
            *(void *)int v92 = v159;
            do
            {
              uint64_t v97 = *(void *)(v13 + 16);
              v13 += 12;
            }
            while (v47 >= v97);
            do
            {
              uint64_t v98 = *((void *)v92 - 1);
              v92 -= 12;
            }
            while (v47 < v98);
          }
          BOOL v5 = v13 - 12 >= v11;
          BOOL v6 = v13 - 12 == v11;
          if (v13 - 12 != v11)
          {
            uint64_t v99 = *(void *)(v13 - 12);
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 - 4);
            *(void *)unint64_t v11 = v99;
          }
          a5 = 0;
          *(_DWORD *)(v13 - 12) = v95;
          *(void *)(v13 - 8) = v47;
        }
        double v19 = (uint64_t *)(v13 + 4 + 12 * v16);
        uint64_t v20 = *v19;
        if (*v19 >= *(void *)(v13 + 4))
        {
          if (v18 < v20)
          {
            int v169 = *(_DWORD *)(v17 + 8);
            uint64_t v143 = *(void *)v17;
            uint64_t v25 = *v12;
            *(_DWORD *)(v17 + 8) = *((_DWORD *)a2 - 1);
            *(void *)unint64_t v17 = v25;
            *((_DWORD *)a2 - 1) = v169;
            *int v12 = v143;
            if (*v19 < *(void *)(v13 + 4))
            {
              int v170 = *(_DWORD *)(v13 + 8);
              uint64_t v144 = *(void *)v13;
              uint64_t v26 = *(void *)v17;
              *(_DWORD *)(v13 + 8) = *(_DWORD *)(v17 + 8);
              *(void *)unint64_t v13 = v26;
              *(_DWORD *)(v17 + 8) = v170;
              *(void *)unint64_t v17 = v144;
            }
          }
        }
        else
        {
          if (v18 >= v20)
          {
            int v173 = *(_DWORD *)(v13 + 8);
            uint64_t v147 = *(void *)v13;
            uint64_t v29 = *(void *)v17;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v17 + 8);
            *(void *)unint64_t v13 = v29;
            *(_DWORD *)(v17 + 8) = v173;
            *(void *)unint64_t v17 = v147;
            if (*((void *)a2 - 1) >= *v19) {
              goto LABEL_24;
            }
            int v167 = *(_DWORD *)(v17 + 8);
            uint64_t v141 = *(void *)v17;
            uint64_t v30 = *v12;
            *(_DWORD *)(v17 + 8) = *((_DWORD *)a2 - 1);
            *(void *)unint64_t v17 = v30;
          }
          else
          {
            int v167 = *(_DWORD *)(v13 + 8);
            uint64_t v141 = *(void *)v13;
            uint64_t v21 = *v12;
            *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
            *(void *)unint64_t v13 = v21;
          }
          *((_DWORD *)a2 - 1) = v167;
          *int v12 = v141;
        }
LABEL_24:
        unint64_t v31 = (uint64_t *)(v13 + 12);
        unint64_t v32 = v13 + 12 * v16;
        uint64_t v35 = *(void *)(v32 - 8);
        unint64_t v33 = v32 - 8;
        uint64_t v34 = v35;
        uint64_t v36 = (uint64_t *)(v33 - 4);
        uint64_t v37 = *(void *)(a2 - 20);
        if (v35 >= *(void *)(v13 + 16))
        {
          if (v37 < v34)
          {
            int v174 = *(_DWORD *)(v33 + 4);
            uint64_t v148 = *v36;
            uint64_t v41 = *(void *)v140;
            *(_DWORD *)(v33 + 4) = *((_DWORD *)a2 - 4);
            *uint64_t v36 = v41;
            *((_DWORD *)a2 - 4) = v174;
            *(void *)char v140 = v148;
            if (*(void *)v33 < *(void *)(v13 + 16))
            {
              uint64_t v42 = *v31;
              int v43 = *(_DWORD *)(v13 + 20);
              int v44 = *(_DWORD *)(v33 + 4);
              *unint64_t v31 = *v36;
              *(_DWORD *)(v13 + 20) = v44;
              *(_DWORD *)(v33 + 4) = v43;
              *uint64_t v36 = v42;
            }
          }
        }
        else if (v37 >= v34)
        {
          uint64_t v48 = *v31;
          int v49 = *(_DWORD *)(v13 + 20);
          int v50 = *(_DWORD *)(v33 + 4);
          *unint64_t v31 = *v36;
          *(_DWORD *)(v13 + 20) = v50;
          *(_DWORD *)(v33 + 4) = v49;
          *uint64_t v36 = v48;
          if (*(void *)(a2 - 20) < *(void *)v33)
          {
            int v176 = *(_DWORD *)(v33 + 4);
            uint64_t v150 = *v36;
            uint64_t v51 = *(void *)v140;
            *(_DWORD *)(v33 + 4) = *((_DWORD *)a2 - 4);
            *uint64_t v36 = v51;
            *((_DWORD *)a2 - 4) = v176;
            *(void *)char v140 = v150;
          }
        }
        else
        {
          uint64_t v38 = *v31;
          int v39 = *(_DWORD *)(v13 + 20);
          __n128 result = (unint64_t)(a2 - 24);
          int v40 = *((_DWORD *)a2 - 4);
          *unint64_t v31 = *(void *)v140;
          *(_DWORD *)(v13 + 20) = v40;
          *((_DWORD *)a2 - 4) = v39;
          *(void *)char v140 = v38;
        }
        double v52 = (unint64_t *)(v13 + 24);
        unint64_t v53 = v13 + 12 * v16;
        uint64_t v56 = *(void *)(v53 + 16);
        unint64_t v54 = v53 + 16;
        uint64_t v55 = v56;
        uint64_t v57 = (unint64_t *)(v54 - 4);
        uint64_t v58 = *((void *)a2 - 4);
        if (v56 >= *(void *)(v13 + 28))
        {
          if (v58 < v55)
          {
            int v177 = *(_DWORD *)(v54 + 4);
            unint64_t v151 = *v57;
            unint64_t v62 = *(void *)v139;
            *(_DWORD *)(v54 + 4) = *((_DWORD *)a2 - 7);
            unint64_t *v57 = v62;
            *((_DWORD *)a2 - 7) = v177;
            *(void *)uint64_t v139 = v151;
            if (*(void *)v54 < *(void *)(v13 + 28))
            {
              unint64_t v63 = *v52;
              int v64 = *(_DWORD *)(v13 + 32);
              int v65 = *(_DWORD *)(v54 + 4);
              __n128 result = *v57;
              *double v52 = *v57;
              *(_DWORD *)(v13 + 32) = v65;
              *(_DWORD *)(v54 + 4) = v64;
              unint64_t *v57 = v63;
            }
          }
        }
        else if (v58 >= v55)
        {
          unint64_t v66 = *v52;
          int v67 = *(_DWORD *)(v13 + 32);
          int v68 = *(_DWORD *)(v54 + 4);
          __n128 result = *v57;
          *double v52 = *v57;
          *(_DWORD *)(v13 + 32) = v68;
          *(_DWORD *)(v54 + 4) = v67;
          unint64_t *v57 = v66;
          if (*((void *)a2 - 4) < *(void *)v54)
          {
            int v178 = *(_DWORD *)(v54 + 4);
            unint64_t v152 = *v57;
            unint64_t v69 = *(void *)v139;
            *(_DWORD *)(v54 + 4) = *((_DWORD *)a2 - 7);
            unint64_t *v57 = v69;
            *((_DWORD *)a2 - 7) = v178;
            *(void *)uint64_t v139 = v152;
          }
        }
        else
        {
          unint64_t v59 = *v52;
          int v60 = *(_DWORD *)(v13 + 32);
          int v61 = *((_DWORD *)a2 - 7);
          __n128 result = *(void *)v139;
          *double v52 = *(void *)v139;
          *(_DWORD *)(v13 + 32) = v61;
          *((_DWORD *)a2 - 7) = v60;
          *(void *)uint64_t v139 = v59;
        }
        uint64_t v70 = *v19;
        uint64_t v71 = *(void *)v54;
        if (*v19 >= *(void *)v33)
        {
          if (v71 < v70)
          {
            int v180 = *(_DWORD *)(v17 + 8);
            uint64_t v154 = *(void *)v17;
            *(void *)unint64_t v17 = *v57;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v54 + 4);
            *(_DWORD *)(v54 + 4) = v180;
            unint64_t *v57 = v154;
            if (*v19 < *(void *)v33)
            {
              int v181 = *(_DWORD *)(v33 + 4);
              uint64_t v155 = *v36;
              *uint64_t v36 = *(void *)v17;
              *(_DWORD *)(v33 + 4) = *(_DWORD *)(v17 + 8);
              *(_DWORD *)(v17 + 8) = v181;
              *(void *)unint64_t v17 = v155;
            }
          }
        }
        else
        {
          if (v71 >= v70)
          {
            int v182 = *(_DWORD *)(v33 + 4);
            uint64_t v156 = *v36;
            *uint64_t v36 = *(void *)v17;
            *(_DWORD *)(v33 + 4) = *(_DWORD *)(v17 + 8);
            *(_DWORD *)(v17 + 8) = v182;
            *(void *)unint64_t v17 = v156;
            if (*(void *)v54 >= *v19) {
              goto LABEL_54;
            }
            int v179 = *(_DWORD *)(v17 + 8);
            uint64_t v153 = *(void *)v17;
            *(void *)unint64_t v17 = *v57;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v54 + 4);
          }
          else
          {
            int v179 = *(_DWORD *)(v33 + 4);
            uint64_t v153 = *v36;
            *uint64_t v36 = *v57;
            *(_DWORD *)(v33 + 4) = *(_DWORD *)(v54 + 4);
          }
          *(_DWORD *)(v54 + 4) = v179;
          unint64_t *v57 = v153;
        }
LABEL_54:
        int v183 = *(_DWORD *)(v13 + 8);
        uint64_t v157 = *(void *)v13;
        uint64_t v72 = *(void *)v17;
        *(_DWORD *)(v13 + 8) = *(_DWORD *)(v17 + 8);
        *(void *)unint64_t v13 = v72;
        *(_DWORD *)(v17 + 8) = v183;
        *(void *)unint64_t v17 = v157;
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_34:
        uint64_t v47 = *(void *)(v13 + 4);
LABEL_56:
        uint64_t v73 = 0;
        int v74 = *(_DWORD *)v13;
        do
        {
          uint64_t v75 = *(void *)(v13 + v73 + 16);
          v73 += 12;
        }
        while (v75 < v47);
        unint64_t v76 = v13 + v73;
        uint64_t v77 = a2;
        if (v73 == 12)
        {
          uint64_t v80 = a2;
          while (v76 < (unint64_t)v80)
          {
            uint64_t v78 = v80 - 12;
            uint64_t v81 = *((void *)v80 - 1);
            v80 -= 12;
            if (v81 < v47) {
              goto LABEL_64;
            }
          }
          uint64_t v78 = v80;
          unint64_t v13 = v76;
        }
        else
        {
          do
          {
            uint64_t v78 = v77 - 12;
            uint64_t v79 = *((void *)v77 - 1);
            v77 -= 12;
          }
          while (v79 >= v47);
LABEL_64:
          unint64_t v13 = v76;
          if (v76 < (unint64_t)v78)
          {
            unint64_t v82 = (unint64_t)v78;
            do
            {
              int v184 = *(_DWORD *)(v13 + 8);
              uint64_t v158 = *(void *)v13;
              uint64_t v83 = *(void *)v82;
              *(_DWORD *)(v13 + 8) = *(_DWORD *)(v82 + 8);
              *(void *)unint64_t v13 = v83;
              *(_DWORD *)(v82 + 8) = v184;
              *(void *)unint64_t v82 = v158;
              do
              {
                uint64_t v84 = *(void *)(v13 + 16);
                v13 += 12;
              }
              while (v84 < v47);
              do
              {
                uint64_t v85 = *(void *)(v82 - 8);
                v82 -= 12;
              }
              while (v85 >= v47);
            }
            while (v13 < v82);
          }
        }
        if (v13 - 12 != v11)
        {
          uint64_t v86 = *(void *)(v13 - 12);
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 - 4);
          *(void *)unint64_t v11 = v86;
        }
        *(_DWORD *)(v13 - 12) = v74;
        *(void *)(v13 - 8) = v47;
        if (v76 >= (unint64_t)v78) {
          break;
        }
LABEL_75:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *,false>(v11, v13 - 12, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v87 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *>(v11, (uint64_t *)(v13 - 12));
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *>(v13, (uint64_t *)a2);
      if (result) {
        break;
      }
      if (!v87) {
        goto LABEL_75;
      }
    }
    a2 = (char *)(v13 - 12);
    if (!v87) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *>(uint64_t a1, uint64_t *a2)
{
  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      if (*(a2 - 1) < *(void *)(a1 + 4))
      {
        int v10 = *(_DWORD *)(a1 + 8);
        uint64_t v11 = *(void *)a1;
        int v12 = *((_DWORD *)a2 - 1);
        *(void *)a1 = *(uint64_t *)((char *)a2 - 12);
        *(_DWORD *)(a1 + 8) = v12;
        *(uint64_t *)((char *)a2 - 12) = v11;
        *((_DWORD *)a2 - 1) = v10;
      }
      return 1;
    case 3uLL:
      unint64_t v13 = (uint64_t *)(a1 + 12);
      uint64_t v14 = (uint64_t *)((char *)a2 - 12);
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(a2 - 1);
      if (v15 >= *(void *)(a1 + 4))
      {
        if (v16 >= v15) {
          return 1;
        }
        int v29 = *(_DWORD *)(a1 + 20);
        uint64_t v30 = *v13;
        int v31 = *((_DWORD *)a2 - 1);
        *unint64_t v13 = *v14;
        goto LABEL_45;
      }
      if (v16 < v15)
      {
        int v17 = *(_DWORD *)(a1 + 8);
        uint64_t v18 = *(void *)a1;
        int v19 = *((_DWORD *)a2 - 1);
        *(void *)a1 = *v14;
        *(_DWORD *)(a1 + 8) = v19;
        *uint64_t v14 = v18;
        *((_DWORD *)a2 - 1) = v17;
        return 1;
      }
      int v48 = *(_DWORD *)(a1 + 8);
      uint64_t v49 = *(void *)a1;
      *(void *)a1 = *v13;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *unint64_t v13 = v49;
      *(_DWORD *)(a1 + 20) = v48;
      if (*(a2 - 1) < *(void *)(a1 + 16))
      {
        int v50 = *(_DWORD *)(a1 + 20);
        uint64_t v51 = *v13;
        int v52 = *((_DWORD *)a2 - 1);
        *unint64_t v13 = *v14;
        *(_DWORD *)(a1 + 20) = v52;
        *uint64_t v14 = v51;
        *((_DWORD *)a2 - 1) = v50;
        return 1;
      }
      return 1;
    case 4uLL:
      unint64_t v13 = (uint64_t *)(a1 + 12);
      uint64_t v14 = (uint64_t *)(a1 + 24);
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 4);
      uint64_t v22 = *(void *)(a1 + 28);
      if (v20 >= v21)
      {
        if (v22 < v20)
        {
          int v32 = *(_DWORD *)(a1 + 20);
          uint64_t v33 = *v13;
          *unint64_t v13 = *v14;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *uint64_t v14 = v33;
          *(_DWORD *)(a1 + 32) = v32;
          if (*(void *)(a1 + 16) < v21)
          {
            int v34 = *(_DWORD *)(a1 + 8);
            uint64_t v35 = *(void *)a1;
            *(void *)a1 = *v13;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *unint64_t v13 = v35;
            *(_DWORD *)(a1 + 20) = v34;
          }
        }
      }
      else
      {
        if (v22 >= v20)
        {
          int v53 = *(_DWORD *)(a1 + 8);
          uint64_t v54 = *(void *)a1;
          *(void *)a1 = *v13;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          *unint64_t v13 = v54;
          *(_DWORD *)(a1 + 20) = v53;
          if (v22 >= *(void *)(a1 + 16)) {
            goto LABEL_42;
          }
          int v23 = *(_DWORD *)(a1 + 20);
          uint64_t v24 = *v13;
          *unint64_t v13 = *v14;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
        }
        else
        {
          int v23 = *(_DWORD *)(a1 + 8);
          uint64_t v24 = *(void *)a1;
          *(void *)a1 = *v14;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        }
        *uint64_t v14 = v24;
        *(_DWORD *)(a1 + 32) = v23;
      }
LABEL_42:
      if (*(a2 - 1) >= *(void *)(a1 + 28)) {
        return 1;
      }
      uint64_t v55 = (uint64_t)a2 - 12;
      int v56 = *(_DWORD *)(a1 + 32);
      uint64_t v57 = *v14;
      int v58 = *((_DWORD *)a2 - 1);
      *uint64_t v14 = *(uint64_t *)((char *)a2 - 12);
      *(_DWORD *)(a1 + 32) = v58;
      *(void *)uint64_t v55 = v57;
      *(_DWORD *)(v55 + 8) = v56;
      if (*(void *)(a1 + 28) >= *(void *)(a1 + 16)) {
        return 1;
      }
      int v29 = *(_DWORD *)(a1 + 20);
      uint64_t v30 = *v13;
      *unint64_t v13 = *v14;
      int v31 = *(_DWORD *)(a1 + 32);
LABEL_45:
      *((_DWORD *)v13 + 2) = v31;
      *uint64_t v14 = v30;
      *((_DWORD *)v14 + 2) = v29;
      if (*(void *)(a1 + 16) >= *(void *)(a1 + 4)) {
        return 1;
      }
      int v59 = *(_DWORD *)(a1 + 8);
      uint64_t v60 = *(void *)a1;
      *(void *)a1 = *v13;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)v13 + 2);
      *unint64_t v13 = v60;
      *((_DWORD *)v13 + 2) = v59;
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 36), (uint64_t *)((char *)a2 - 12));
      return 1;
    default:
      unint64_t v3 = (uint64_t *)(a1 + 24);
      long long v4 = (uint64_t *)(a1 + 12);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 4);
      uint64_t v7 = *(void *)(a1 + 28);
      if (v5 >= v6)
      {
        if (v7 < v5)
        {
          int v25 = *(_DWORD *)(a1 + 20);
          uint64_t v26 = *v4;
          *long long v4 = *v3;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          uint64_t *v3 = v26;
          *(_DWORD *)(a1 + 32) = v25;
          if (*(void *)(a1 + 16) < v6)
          {
            int v27 = *(_DWORD *)(a1 + 8);
            uint64_t v28 = *(void *)a1;
            *(void *)a1 = *v4;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *long long v4 = v28;
            *(_DWORD *)(a1 + 20) = v27;
          }
        }
      }
      else if (v7 >= v5)
      {
        int v36 = *(_DWORD *)(a1 + 8);
        uint64_t v37 = *(void *)a1;
        *(void *)a1 = *v4;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
        *long long v4 = v37;
        *(_DWORD *)(a1 + 20) = v36;
        if (v7 < *(void *)(a1 + 16))
        {
          int v38 = *(_DWORD *)(a1 + 20);
          uint64_t v39 = *v4;
          *long long v4 = *v3;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          uint64_t *v3 = v39;
          *(_DWORD *)(a1 + 32) = v38;
        }
      }
      else
      {
        int v8 = *(_DWORD *)(a1 + 8);
        uint64_t v9 = *(void *)a1;
        *(void *)a1 = *v3;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        uint64_t *v3 = v9;
        *(_DWORD *)(a1 + 32) = v8;
      }
      int v40 = (uint64_t *)(a1 + 36);
      if ((uint64_t *)(a1 + 36) == a2) {
        return 1;
      }
      uint64_t v41 = 0;
      int v42 = 0;
      break;
  }
  while (1)
  {
    uint64_t v43 = *(uint64_t *)((char *)v40 + 4);
    if (v43 < *(uint64_t *)((char *)v3 + 4)) {
      break;
    }
LABEL_35:
    unint64_t v3 = v40;
    v41 += 12;
    int v40 = (uint64_t *)((char *)v40 + 12);
    if (v40 == a2) {
      return 1;
    }
  }
  int v44 = *(_DWORD *)v40;
  uint64_t v45 = v41;
  do
  {
    uint64_t v46 = a1 + v45;
    *(void *)(v46 + 36) = *(void *)(a1 + v45 + 24);
    *(_DWORD *)(v46 + 44) = *(_DWORD *)(a1 + v45 + 32);
    if (v45 == -24)
    {
      *(_DWORD *)a1 = v44;
      *(void *)(a1 + 4) = v43;
      if (++v42 != 8) {
        goto LABEL_35;
      }
      return (uint64_t *)((char *)v40 + 12) == a2;
    }
    v45 -= 12;
  }
  while (v43 < *(void *)(v46 + 16));
  uint64_t v47 = a1 + v45;
  *(_DWORD *)(v47 + 36) = v44;
  *(void *)(v47 + 40) = v43;
  if (++v42 != 8) {
    goto LABEL_35;
  }
  return (uint64_t *)((char *)v40 + 12) == a2;
}

char *std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo>(void **a1, uint64_t a2)
{
  long long v4 = (void **)*a1;
  unint64_t v3 = (void **)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 6;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 58) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 5 > v6) {
    unint64_t v6 = v7 >> 5;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v6 = 0x3FFFFFFFFFFFFFFLL;
  }
  if (v6 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v9 = v6 << 6;
  int v10 = (char *)operator new(v6 << 6);
  uint64_t v11 = &v10[64 * v5];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  int v12 = &v10[v9];
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 24) = 0;
  char v13 = *(unsigned char *)(a2 + 56);
  uint64_t v14 = v11 + 64;
  v11[56] = v13;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_17;
  }
  uint64_t v15 = 0;
  do
  {
    uint64_t v16 = &v11[v15 * 8];
    long long v17 = *(_OWORD *)&v3[v15 - 8];
    *((_DWORD *)v16 - 12) = v3[v15 - 6];
    *((_OWORD *)v16 - 4) = v17;
    *((void *)v16 - 5) = v3[v15 - 5];
    long long v18 = *(_OWORD *)&v3[v15 - 4];
    *((void *)v16 - 2) = v3[v15 - 2];
    *((_OWORD *)v16 - 2) = v18;
    v3[v15 - 5] = 0;
    *(v16 - 8) = (char)v3[v15 - 1];
    v15 -= 8;
  }
  while (&v3[v15] != v4);
  *a1 = &v11[v15 * 8];
  a1[1] = v14;
  a1[2] = v12;
  if (v3 != v4)
  {
    do
    {
      if (*(unsigned char *)(v3 - 5)) {
        operator delete(*(v3 - 4));
      }
      v3 -= 8;
    }
    while (v3 != v4);
    unint64_t v3 = v4;
  }
  if (v3) {
LABEL_17:
  }
    operator delete(v3);
  return v14;
}

uint64_t std::__split_buffer<operations_research::sat::PrecedencesPropagator::ArcInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(unsigned char *)(v2 - 40))
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::PrecedencesPropagator::ArcIndex_tag_,int>,gtl::IntType<operations_research::sat::PrecedencesPropagator::ArcIndex_tag_,int>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CD49094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

char *std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__construct_one_at_end[abi:ne180100]<operations_research::sat::PrecedencesPropagator::ArcInfo const&>(char *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 1);
  long long v5 = *a2;
  *(_DWORD *)(v4 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)uint64_t v4 = v5;
  *(void *)(v4 + 24) = 0;
  unint64_t v6 = *((void *)a2 + 3);
  if (v6)
  {
    int v8 = (int *)*((void *)a2 + 4);
    unint64_t v9 = v6 >> 1;
    if (v6 < 0xE)
    {
      uint64_t v11 = 0;
      if (v6 < 2)
      {
LABEL_18:
        *(void *)(v4 + 24) = v11 | v6 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_19;
      }
      __n128 result = (char *)(v4 + 32);
      uint64_t v12 = 0;
    }
    else
    {
      if (v9 <= 0xC) {
        unint64_t v10 = 12;
      }
      else {
        unint64_t v10 = v6 >> 1;
      }
      if (v10 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      __n128 result = (char *)operator new(4 * v10);
      *(void *)(v4 + 32) = result;
      *(void *)(v4 + 40) = v10;
      uint64_t v11 = 1;
      *(void *)(v4 + 24) = 1;
      uint64_t v12 = 0;
      if (v6 >= 0x10 && (unint64_t)(result - (char *)v8) >= 0x20)
      {
        uint64_t v12 = v9 & 0x7FFFFFFFFFFFFFF8;
        char v13 = result + 16;
        uint64_t v14 = (long long *)(v8 + 4);
        uint64_t v15 = v9 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v16 = *v14;
          *(v13 - 1) = *(v14 - 1);
          *char v13 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        v8 += v9 & 0x7FFFFFFFFFFFFFF8;
        if (v9 == v12) {
          goto LABEL_18;
        }
      }
    }
    unint64_t v17 = v9 - v12;
    long long v18 = &result[4 * v12];
    do
    {
      int v19 = *v8++;
      *(_DWORD *)long long v18 = v19;
      v18 += 4;
      --v17;
    }
    while (v17);
    goto LABEL_18;
  }
  *(void *)(v4 + 24) = v6;
  long long v7 = a2[2];
  *(void *)(v4 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(v4 + 32) = v7;
LABEL_19:
  *(unsigned char *)(v4 + 56) = *((unsigned char *)a2 + 56);
  *((void *)v3 + 1) = v4 + 64;
  return result;
}

void sub_23CD49200(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v2 + 24)) {
    operator delete(*(void **)(v2 + 32));
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo const&>(void **a1, uint64_t a2)
{
  uint64_t v4 = (void **)*a1;
  uint64_t v3 = (void **)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 6;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 58) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v8 >> 5 > v6) {
    unint64_t v6 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 58) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v10 = operator new(v9 << 6);
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[64 * v5];
  uint64_t v12 = &v10[64 * v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((void *)v11 + 3) = 0;
  char v13 = (unint64_t *)(v11 + 24);
  unint64_t v14 = *(void *)(a2 + 24);
  if (v14)
  {
    uint64_t v21 = *(int **)(a2 + 32);
    unint64_t v22 = v14 >> 1;
    if (v14 < 0xE)
    {
      uint64_t v26 = 0;
      if (v14 < 2) {
        goto LABEL_33;
      }
      uint64_t v38 = v5;
      uint64_t v24 = &v10[64 * v5 + 32];
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v37 = v12;
      uint64_t v38 = v5;
      unint64_t v36 = v14 >> 1;
      if (v22 <= 0xC) {
        unint64_t v23 = 12;
      }
      else {
        unint64_t v23 = v14 >> 1;
      }
      if (v23 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v24 = (char *)operator new(4 * v23);
      uint64_t v12 = v37;
      int v25 = &v10[64 * v38];
      *((void *)v25 + 4) = v24;
      *((void *)v25 + 5) = v23;
      uint64_t v26 = 1;
      *char v13 = 1;
      unint64_t v22 = v14 >> 1;
      uint64_t v27 = 0;
      if (v14 >= 0x10)
      {
        uint64_t v5 = v38;
        if ((unint64_t)(v24 - (char *)v21) >= 0x20)
        {
          uint64_t v27 = v36 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v28 = v24 + 16;
          int v29 = (long long *)(v21 + 4);
          uint64_t v30 = v36 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v31 = *v29;
            *(v28 - 1) = *(v29 - 1);
            *uint64_t v28 = v31;
            v28 += 2;
            v29 += 2;
            v30 -= 8;
          }
          while (v30);
          v21 += v36 & 0x7FFFFFFFFFFFFFF8;
          if (v36 == v27)
          {
LABEL_33:
            *char v13 = v26 | v14 & 0xFFFFFFFFFFFFFFFELL;
            v10[64 * v5 + 56] = *(unsigned char *)(a2 + 56);
            uint64_t v15 = v11 + 64;
            if (v3 != v4) {
              goto LABEL_13;
            }
LABEL_34:
            *a1 = v11;
            a1[1] = v15;
            a1[2] = v12;
            goto LABEL_39;
          }
        }
LABEL_31:
        unint64_t v32 = v22 - v27;
        uint64_t v33 = &v24[4 * v27];
        do
        {
          int v34 = *v21++;
          *(_DWORD *)uint64_t v33 = v34;
          v33 += 4;
          --v32;
        }
        while (v32);
        goto LABEL_33;
      }
    }
    uint64_t v5 = v38;
    goto LABEL_31;
  }
  *char v13 = v14;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  v10[64 * v5 + 56] = *(unsigned char *)(a2 + 56);
  uint64_t v15 = v11 + 64;
  if (v3 == v4) {
    goto LABEL_34;
  }
LABEL_13:
  uint64_t v16 = 0;
  do
  {
    unint64_t v17 = &v11[v16 * 8];
    long long v18 = *(_OWORD *)&v3[v16 - 8];
    *((_DWORD *)v17 - 12) = v3[v16 - 6];
    *((_OWORD *)v17 - 4) = v18;
    *((void *)v17 - 5) = v3[v16 - 5];
    long long v19 = *(_OWORD *)&v3[v16 - 4];
    *((void *)v17 - 2) = v3[v16 - 2];
    *((_OWORD *)v17 - 2) = v19;
    v3[v16 - 5] = 0;
    *(v17 - 8) = (char)v3[v16 - 1];
    v16 -= 8;
  }
  while (&v3[v16] != v4);
  uint64_t v20 = (void **)*a1;
  uint64_t v3 = (void **)a1[1];
  *a1 = &v11[v16 * 8];
  a1[1] = v15;
  a1[2] = v12;
  if (v3 != v20)
  {
    do
    {
      if (*(unsigned char *)(v3 - 5)) {
        operator delete(*(v3 - 4));
      }
      v3 -= 8;
    }
    while (v3 != v20);
    uint64_t v3 = v20;
  }
LABEL_39:
  if (v3) {
    operator delete(v3);
  }
  return v15;
}

void sub_23CD49500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*v5) {
    operator delete(*(void **)(v4 + (a4 << 6) + 32));
  }
  std::__split_buffer<operations_research::sat::PrecedencesPropagator::ArcInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(uint64_t a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      if ((signed __int32)a2[-4].n128_u32[1] < *(_DWORD *)(a1 + 4))
      {
        __n128 v67 = *(__n128 *)a1;
        LODWORD(v68) = *(_DWORD *)(a1 + 16);
        unint64_t v7 = *(void *)(a1 + 24);
        uint64_t v8 = (__n128 *)(a1 + 32);
        __n128 v65 = *(__n128 *)(a1 + 32);
        unint64_t v66 = *(void *)(a1 + 48);
        *(void *)(a1 + 24) = 0;
        unint64_t v10 = (unsigned __int8 *)(a1 + 56);
        unsigned __int8 v9 = *(unsigned char *)(a1 + 56);
        __n128 v11 = a2[-4];
        *(_DWORD *)(a1 + 16) = a2[-3].n128_u32[0];
        *(__n128 *)a1 = v11;
        unint64_t v12 = a2[-3].n128_u64[1];
        if (&a2[-4] == (__n128 *)a1)
        {
          *(__n128 *)a1 = v67;
          *(_DWORD *)(a1 + 16) = v68;
          if (v12) {
            operator delete((void *)v8->n128_u64[0]);
          }
        }
        else
        {
          *(void *)(a1 + 24) = v12;
          __n128 v13 = a2[-2];
          *(void *)(a1 + 48) = a2[-1].n128_u64[0];
          *uint64_t v8 = v13;
          uint64_t v8 = a2 - 2;
          unint64_t v10 = &a2[-1].n128_u8[8];
          *(unsigned char *)(a1 + 56) = a2[-1].n128_u8[8];
          a2[-4] = v67;
          a2[-3].n128_u32[0] = v68;
        }
        a2[-3].n128_u64[1] = v7;
        *uint64_t v8 = v65;
        v8[1].n128_u64[0] = v66;
        *unint64_t v10 = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((__n128 *)a1 != a2)
      {
        uint64_t v20 = a1 + 64;
        if ((__n128 *)(a1 + 64) != a2)
        {
          uint64_t v21 = 0;
          uint64_t v22 = a1;
          do
          {
            uint64_t v23 = v20;
            if (*(_DWORD *)(v22 + 68) < *(_DWORD *)(v22 + 4))
            {
              int v25 = *(_DWORD *)v20;
              int v24 = *(_DWORD *)(v20 + 4);
              v65.n128_u32[2] = *(_DWORD *)(v20 + 16);
              v65.n128_u64[0] = *(void *)(v20 + 8);
              uint64_t v26 = *(void *)(v22 + 88);
              __n128 v67 = *(__n128 *)(v22 + 96);
              uint64_t v68 = *(void *)(v22 + 112);
              *(void *)(v22 + 88) = 0;
              char v27 = *(unsigned char *)(v22 + 120);
              uint64_t v28 = *(void *)(v20 + 24);
              int v29 = *(_DWORD *)(v22 + 16);
              *(_OWORD *)uint64_t v23 = *(_OWORD *)v22;
              *(_DWORD *)(v23 + 16) = v29;
              uint64_t v30 = (void **)(v23 + 32);
              if (v28)
              {
                uint64_t v31 = v26;
                operator delete(*v30);
                uint64_t v26 = v31;
              }
              unint64_t v32 = (unsigned char *)(v22 + 24);
              *(void *)(v23 + 24) = *(void *)(v22 + 24);
              long long v33 = *(_OWORD *)(v22 + 32);
              *(void *)(v23 + 48) = *(void *)(v22 + 48);
              *(_OWORD *)uint64_t v30 = v33;
              *(void *)(v22 + 24) = 0;
              *(unsigned char *)(v23 + 56) = *(unsigned char *)(v22 + 56);
              if (v22 == a1)
              {
                uint64_t v22 = a1;
              }
              else if (v24 < *(_DWORD *)(v22 - 60))
              {
                uint64_t v34 = v21;
                while (1)
                {
                  uint64_t v35 = a1 + v34;
                  *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + v34 - 64);
                  *(_DWORD *)(v35 + 16) = *(_DWORD *)(a1 + v34 - 48);
                  *(void *)(v35 + 24) = *(void *)(a1 + v34 - 40);
                  *(_OWORD *)(v35 + 32) = *(_OWORD *)(a1 + v34 - 32);
                  *(void *)(v35 + 48) = *(void *)(a1 + v34 - 16);
                  *(void *)(v35 - 40) = 0;
                  *(unsigned char *)(v35 + 56) = *(unsigned char *)(a1 + v34 - 8);
                  v34 -= 64;
                  if (!v34) {
                    break;
                  }
                  if (v24 >= *(_DWORD *)(v35 - 124))
                  {
                    uint64_t v22 = a1 + v34;
                    goto LABEL_29;
                  }
                }
                uint64_t v22 = a1;
LABEL_29:
                unint64_t v32 = (unsigned char *)(v35 - 40);
              }
              *(_DWORD *)uint64_t v22 = v25;
              *(_DWORD *)(v22 + 4) = v24;
              *(_DWORD *)(v22 + 16) = v65.n128_u32[2];
              *(void *)(v22 + 8) = v65.n128_u64[0];
              unint64_t v36 = (void **)(v22 + 32);
              if (*v32)
              {
                uint64_t v37 = v26;
                operator delete(*v36);
                uint64_t v26 = v37;
              }
              *(void *)unint64_t v32 = v26;
              *(__n128 *)unint64_t v36 = v67;
              *(void *)(v22 + 48) = v68;
              *(unsigned char *)(v22 + 56) = v27;
            }
            uint64_t v20 = v23 + 64;
            v21 += 64;
            uint64_t v22 = v23;
          }
          while ((__n128 *)(v23 + 64) != a2);
        }
      }
    }
    else
    {
      uint64_t v17 = a3 >> 1;
      uint64_t v18 = a1 + (a3 >> 1 << 6);
      if ((uint64_t)a3 <= a5)
      {
        v65.n128_u64[0] = 0;
        v67.n128_u64[0] = (unint64_t)a4;
        v67.n128_u64[1] = (unint64_t)&v65;
        std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>((__n128 *)a1, (__n128 *)(a1 + (a3 >> 1 << 6)), a3 >> 1, a4);
        v65.n128_u64[0] = a3 >> 1;
        uint64_t v38 = &a4[4 * v17];
        std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>((__n128 *)(a1 + (a3 >> 1 << 6)), a2, a3 - v17, v38);
        v65.n128_u64[0] = a3;
        uint64_t v39 = (unsigned char *)(a1 + 56);
        int v40 = v38;
        uint64_t v41 = a4;
        int v42 = &a4[4 * a3];
        while (v40 != v42)
        {
          int v44 = (__n128 *)(v39 - 56);
          if ((signed __int32)v40->n128_u32[1] >= (signed __int32)v41->n128_u32[1])
          {
            __n128 v48 = *v41;
            *((_DWORD *)v39 - 10) = v41[1].n128_u32[0];
            *int v44 = v48;
            if (v44 != v41)
            {
              uint64_t v49 = (void **)(v39 - 24);
              if (*(v39 - 32)) {
                operator delete(*v49);
              }
              *((void *)v39 - 4) = v41[1].n128_u64[1];
              __n128 v43 = v41[2];
              *((void *)v39 - 1) = v41[3].n128_u64[0];
              *(__n128 *)uint64_t v49 = v43;
              v41[1].n128_u64[1] = 0;
            }
            unsigned char *v39 = v41[3].n128_u8[8];
            v39 += 64;
            v41 += 4;
            if (v41 == v38)
            {
LABEL_54:
              if (v40 != v42)
              {
                uint64_t v56 = 0;
                do
                {
                  uint64_t v57 = &v40[v56];
                  int v58 = &v39[v56 * 16];
                  __n128 v59 = v40[v56];
                  *((_DWORD *)v58 - 10) = v40[v56 + 1].n128_u32[0];
                  *(__n128 *)(v58 - 56) = v59;
                  if (&v39[v56 * 16 - 56] != (unsigned char *)&v40[v56])
                  {
                    uint64_t v60 = (void **)(v58 - 24);
                    if (*(v58 - 32)) {
                      operator delete(*v60);
                    }
                    *((void *)v58 - 4) = v57[1].n128_u64[1];
                    __n128 v61 = v40[v56 + 2];
                    *((void *)v58 - 1) = v40[v56 + 3].n128_u64[0];
                    *(__n128 *)uint64_t v60 = v61;
                    v57[1].n128_u64[1] = 0;
                  }
                  v39[v56 * 16] = v57[3].n128_u8[8];
                  v56 += 4;
                }
                while (&v57[4] != v42);
              }
              goto LABEL_61;
            }
          }
          else
          {
            __n128 v45 = *v40;
            *((_DWORD *)v39 - 10) = v40[1].n128_u32[0];
            *int v44 = v45;
            if (v44 != v40)
            {
              uint64_t v46 = (void **)(v39 - 24);
              if (*(v39 - 32)) {
                operator delete(*v46);
              }
              *((void *)v39 - 4) = v40[1].n128_u64[1];
              __n128 v47 = v40[2];
              *((void *)v39 - 1) = v40[3].n128_u64[0];
              *(__n128 *)uint64_t v46 = v47;
              v40[1].n128_u64[1] = 0;
            }
            unsigned char *v39 = v40[3].n128_u8[8];
            v39 += 64;
            v40 += 4;
            if (v41 == v38) {
              goto LABEL_54;
            }
          }
        }
        if (v41 != v38)
        {
          uint64_t v50 = 0;
          do
          {
            uint64_t v51 = &v41[v50];
            int v52 = &v39[v50 * 16];
            __n128 v53 = v41[v50];
            *((_DWORD *)v52 - 10) = v41[v50 + 1].n128_u32[0];
            *(__n128 *)(v52 - 56) = v53;
            if (&v39[v50 * 16 - 56] != (unsigned char *)&v41[v50])
            {
              uint64_t v54 = (void **)(v52 - 24);
              if (*(v52 - 32)) {
                operator delete(*v54);
              }
              *((void *)v52 - 4) = v51[1].n128_u64[1];
              __n128 v55 = v41[v50 + 2];
              *((void *)v52 - 1) = v41[v50 + 3].n128_u64[0];
              *(__n128 *)uint64_t v54 = v55;
              v51[1].n128_u64[1] = 0;
            }
            v39[v50 * 16] = v51[3].n128_u8[8];
            v50 += 4;
          }
          while (&v51[4] != v38);
        }
LABEL_61:
        if (a4)
        {
          unint64_t v62 = v65.n128_u64[0];
          if (v65.n128_u64[0])
          {
            unint64_t v63 = 0;
            int v64 = (void **)&a4[2];
            do
            {
              if (*(unsigned char *)(v64 - 1))
              {
                operator delete(*v64);
                unint64_t v62 = v65.n128_u64[0];
              }
              ++v63;
              v64 += 8;
            }
            while (v63 < v62);
          }
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(a1, a1 + (a3 >> 1 << 6), a3 >> 1, a4, a5);
        uint64_t v19 = a3 - v17;
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(v18, a2, v19, a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(a1, v18, (long long *)a2, v17, v19, (long long *)a4, a5);
      }
    }
  }
}

void sub_23CD49B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unique_ptr<operations_research::sat::PrecedencesPropagator::ArcInfo,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  if (a3)
  {
    unint64_t v7 = a1;
    if (a3 == 2)
    {
      unint64_t v10 = a2 - 4;
      __n128 v11 = a4 + 2;
      unint64_t v12 = a4 + 4;
      __n128 v13 = a4 + 6;
      if ((signed __int32)a2[-4].n128_u32[1] >= (signed __int32)a1->n128_u32[1])
      {
        __n128 v29 = *a1;
        a4[1].n128_u32[0] = a1[1].n128_u32[0];
        *a4 = v29;
        a4[1].n128_u64[1] = 0;
        a4[1].n128_u64[1] = a1[1].n128_u64[1];
        __n128 v30 = a1[2];
        a4[3].n128_u64[0] = a1[3].n128_u64[0];
        *__n128 v11 = v30;
        a1[1].n128_u64[1] = 0;
        a4[3].n128_u8[8] = a1[3].n128_u8[8];
        __n128 v31 = *v10;
        a4[5].n128_u32[0] = a2[-3].n128_u32[0];
        *unint64_t v12 = v31;
        a4[5].n128_u64[1] = 0;
        a4[5].n128_u64[1] = a2[-3].n128_u64[1];
        __n128 result = a2[-2];
        a4[7].n128_u64[0] = a2[-1].n128_u64[0];
        *__n128 v13 = result;
        a2[-3].n128_u64[1] = 0;
        uint64_t v17 = &a2[-1].n128_u8[8];
      }
      else
      {
        __n128 v14 = *v10;
        a4[1].n128_u32[0] = a2[-3].n128_u32[0];
        *a4 = v14;
        a4[1].n128_u64[1] = 0;
        a4[1].n128_u64[1] = a2[-3].n128_u64[1];
        __n128 v15 = a2[-2];
        a4[3].n128_u64[0] = a2[-1].n128_u64[0];
        *__n128 v11 = v15;
        a2[-3].n128_u64[1] = 0;
        a4[3].n128_u8[8] = a2[-1].n128_u8[8];
        __n128 v16 = *a1;
        a4[5].n128_u32[0] = a1[1].n128_u32[0];
        *unint64_t v12 = v16;
        a4[5].n128_u64[1] = 0;
        a4[5].n128_u64[1] = a1[1].n128_u64[1];
        __n128 result = a1[2];
        a4[7].n128_u64[0] = a1[3].n128_u64[0];
        *__n128 v13 = result;
        a1[1].n128_u64[1] = 0;
        uint64_t v17 = &a1[3].n128_u8[8];
      }
      a4[7].n128_u8[8] = *v17;
    }
    else if (a3 == 1)
    {
      __n128 v8 = *a1;
      a4[1].n128_u32[0] = a1[1].n128_u32[0];
      *a4 = v8;
      a4[1].n128_u64[1] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
      __n128 result = a1[2];
      a4[3].n128_u64[0] = a1[3].n128_u64[0];
      a4[2] = result;
      a1[1].n128_u64[1] = 0;
      a4[3].n128_u8[8] = a1[3].n128_u8[8];
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v32 = a3 >> 1;
      unint64_t v33 = a3 >> 1 << 6;
      uint64_t v34 = (__n128 *)((char *)a1 + v33);
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(a1, (char *)a1 + v33, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>((char *)v7 + v33, a2, a3 - v32, (char *)a4 + v33, a3 - v32);
      uint64_t v35 = &a4[3].n128_u8[8];
      unint64_t v36 = (__n128 *)((char *)v7 + v33);
      while (v36 != a2)
      {
        uint64_t v39 = (__n128 *)(v35 - 56);
        int v40 = (__n128 *)(v35 - 24);
        if ((signed __int32)v36->n128_u32[1] >= (signed __int32)v7->n128_u32[1])
        {
          __n128 v37 = *v7;
          *((_DWORD *)v35 - 10) = v7[1].n128_u32[0];
          __n128 *v39 = v37;
          *((void *)v35 - 4) = 0;
          *((void *)v35 - 4) = v7[1].n128_u64[1];
          __n128 result = v7[2];
          *((void *)v35 - 1) = v7[3].n128_u64[0];
          __n128 *v40 = result;
          v7[1].n128_u64[1] = 0;
          uint64_t v38 = v7;
          v7 += 4;
          *uint64_t v35 = v38[3].n128_u8[8];
          v35 += 64;
          if (v7 == v34) {
            goto LABEL_34;
          }
        }
        else
        {
          __n128 v41 = *v36;
          *((_DWORD *)v35 - 10) = v36[1].n128_u32[0];
          __n128 *v39 = v41;
          *((void *)v35 - 4) = 0;
          *((void *)v35 - 4) = v36[1].n128_u64[1];
          __n128 result = v36[2];
          *((void *)v35 - 1) = v36[3].n128_u64[0];
          __n128 *v40 = result;
          v36[1].n128_u64[1] = 0;
          int v42 = v36;
          v36 += 4;
          *uint64_t v35 = v42[3].n128_u8[8];
          v35 += 64;
          if (v7 == v34)
          {
LABEL_34:
            if (v36 != a2)
            {
              uint64_t v43 = 0;
              do
              {
                int v44 = &v36[v43];
                __n128 v45 = &v35[v43 * 16];
                __n128 v46 = v36[v43];
                *((_DWORD *)v45 - 10) = v36[v43 + 1].n128_u32[0];
                *(__n128 *)(v45 - 56) = v46;
                *((void *)v45 - 4) = 0;
                *((void *)v45 - 4) = v36[v43 + 1].n128_u64[1];
                __n128 result = v36[v43 + 2];
                *((void *)v45 - 1) = v36[v43 + 3].n128_u64[0];
                *(__n128 *)(v45 - 24) = result;
                v44[1].n128_u64[1] = 0;
                unsigned __int8 *v45 = v36[v43 + 3].n128_u8[8];
                v43 += 4;
              }
              while (&v44[4] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v34)
      {
        uint64_t v47 = 0;
        do
        {
          __n128 v48 = &v35[v47 * 16];
          uint64_t v49 = &v7[v47];
          __n128 v50 = v7[v47];
          *((_DWORD *)v48 - 10) = v7[v47 + 1].n128_u32[0];
          *(__n128 *)(v48 - 56) = v50;
          *((void *)v48 - 4) = 0;
          *((void *)v48 - 4) = v7[v47 + 1].n128_u64[1];
          __n128 result = v7[v47 + 2];
          *((void *)v48 - 1) = v7[v47 + 3].n128_u64[0];
          *(__n128 *)(v48 - 24) = result;
          v49[1].n128_u64[1] = 0;
          unsigned __int8 *v48 = v7[v47 + 3].n128_u8[8];
          v47 += 4;
        }
        while (&v49[4] != v34);
      }
    }
    else if (a1 != a2)
    {
      __n128 v18 = *a1;
      a4[1].n128_u32[0] = a1[1].n128_u32[0];
      *a4 = v18;
      a4[1].n128_u64[1] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
      __n128 result = a1[2];
      a4[3].n128_u64[0] = a1[3].n128_u64[0];
      a4[2] = result;
      a1[1].n128_u64[1] = 0;
      a4[3].n128_u8[8] = a1[3].n128_u8[8];
      uint64_t v19 = a1 + 4;
      if (&a1[4] != a2)
      {
        uint64_t v20 = 0;
        uint64_t v21 = a4;
        do
        {
          uint64_t v23 = v19;
          int v24 = v21 + 4;
          if ((signed __int32)v7[4].n128_u32[1] >= (signed __int32)v21->n128_u32[1])
          {
            __n128 v22 = *v19;
            v21[5].n128_u32[0] = v19[1].n128_u32[0];
            *int v24 = v22;
            v21[5].n128_u64[1] = 0;
            v21[5].n128_u64[1] = v7[5].n128_u64[1];
            __n128 result = v7[6];
            v21[7].n128_u64[0] = v7[7].n128_u64[0];
            v21[6] = result;
            v7[5].n128_u64[1] = 0;
            v21[7].n128_u8[8] = v7[7].n128_u8[8];
          }
          else
          {
            *int v24 = *v21;
            v21[5].n128_u32[0] = v21[1].n128_u32[0];
            v21[5].n128_u64[1] = v21[1].n128_u64[1];
            v21[6] = v21[2];
            v21[7].n128_u64[0] = v21[3].n128_u64[0];
            v21[7].n128_u8[8] = v21[3].n128_u8[8];
            int v25 = a4;
            v21[1].n128_u64[1] = 0;
            if (v21 != a4)
            {
              uint64_t v26 = v20;
              while (1)
              {
                int v25 = (__n128 *)((char *)a4 + v26);
                if ((signed __int32)v7[4].n128_u32[1] >= *(_DWORD *)((char *)&a4[-3] + v26 - 12)) {
                  break;
                }
                *int v25 = v25[-4];
                v25[1].n128_u32[0] = v25[-3].n128_u32[0];
                char v27 = (void **)&v25[2];
                if (v25[1].n128_u8[8]) {
                  operator delete(*v27);
                }
                v25[1].n128_u64[1] = v25[-3].n128_u64[1];
                *(__n128 *)char v27 = *(__n128 *)((char *)a4 + v26 - 32);
                v25[3].n128_u64[0] = *(unint64_t *)((char *)a4[-1].n128_u64 + v26);
                v25[-3].n128_u64[1] = 0;
                a4[3].n128_u8[v26 + 8] = a4->n128_u8[v26 - 8];
                v26 -= 64;
                if (!v26)
                {
                  int v25 = a4;
                  break;
                }
              }
            }
            __n128 result = *v23;
            v25[1].n128_u32[0] = v23[1].n128_u32[0];
            *int v25 = result;
            if (v25 != v23)
            {
              uint64_t v28 = (void **)&v25[2];
              if (v25[1].n128_u8[8]) {
                operator delete(*v28);
              }
              v25[1].n128_u64[1] = v7[5].n128_u64[1];
              __n128 result = v7[6];
              v25[3].n128_u64[0] = v7[7].n128_u64[0];
              *(__n128 *)uint64_t v28 = result;
              v7[5].n128_u64[1] = 0;
            }
            v25[3].n128_u8[8] = v7[7].n128_u8[8];
          }
          uint64_t v19 = v23 + 4;
          v20 += 64;
          uint64_t v21 = v24;
          unint64_t v7 = v23;
        }
        while (&v23[4] != a2);
      }
    }
  }
  return result;
}

uint64_t *std::unique_ptr<operations_research::sat::PrecedencesPropagator::ArcInfo,std::__destruct_n &>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    unint64_t v4 = *v3;
    if (*v3)
    {
      unint64_t v5 = 0;
      unint64_t v6 = (void **)(v2 + 32);
      do
      {
        if (*(unsigned char *)(v6 - 1))
        {
          operator delete(*v6);
          unint64_t v4 = *v3;
        }
        ++v5;
        v6 += 8;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  unint64_t v7 = a6;
  uint64_t v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v11 = 0;
    uint64_t v12 = -a4;
    while (1)
    {
      uint64_t v13 = a1 + v11;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + v11 + 4)) {
        break;
      }
      v11 += 64;
      if (__CFADD__(v12++, 1)) {
        return;
      }
    }
    uint64_t v15 = -v12;
    if (-v12 >= v8)
    {
      if (v12 == -1)
      {
        uint64_t v80 = a1 + v11;
        int v107 = *(_DWORD *)(a1 + v11 + 16);
        long long v106 = *(_OWORD *)(a1 + v11);
        uint64_t v81 = *(void *)(a1 + v11 + 24);
        uint64_t v82 = v80 + 32;
        uint64_t v109 = *(void *)(v80 + 48);
        long long v108 = *(_OWORD *)(v80 + 32);
        *(void *)(v80 + 24) = 0;
        uint64_t v84 = (unsigned char *)(v80 + 56);
        char v83 = *(unsigned char *)(v80 + 56);
        int v85 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v80 = *(_OWORD *)a2;
        *(_DWORD *)(v80 + 16) = v85;
        uint64_t v86 = *(void *)(a2 + 24);
        if (v80 == a2)
        {
          *(_OWORD *)a2 = v106;
          uint64_t v103 = a2;
          *(_DWORD *)(a2 + 16) = v107;
          if (v86) {
            operator delete(*(void **)v82);
          }
          a2 = v103;
        }
        else
        {
          *(void *)(v80 + 24) = v86;
          long long v87 = *(_OWORD *)(a2 + 32);
          *(void *)(v80 + 48) = *(void *)(a2 + 48);
          *(_OWORD *)uint64_t v82 = v87;
          uint64_t v82 = a2 + 32;
          *uint64_t v84 = *(unsigned char *)(a2 + 56);
          *(_OWORD *)a2 = v106;
          *(_DWORD *)(a2 + 16) = v107;
          uint64_t v84 = (unsigned char *)(a2 + 56);
        }
        *(void *)(a2 + 24) = v81;
        *(void *)(v82 + 16) = v109;
        *(_OWORD *)uint64_t v82 = v108;
        *uint64_t v84 = v83;
        return;
      }
      if (v12 > 0) {
        uint64_t v15 = 1 - v12;
      }
      uint64_t v25 = v15 >> 1;
      uint64_t v19 = a1 + (v15 >> 1 << 6) + v11;
      uint64_t v18 = a2;
      if ((long long *)a2 != a3)
      {
        unint64_t v31 = ((uint64_t)a3 - a2) >> 6;
        uint64_t v18 = a2;
        do
        {
          unint64_t v32 = v31 >> 1;
          unint64_t v33 = v18 + (v31 >> 1 << 6);
          int v34 = *(_DWORD *)(v33 + 4);
          uint64_t v35 = v33 + 64;
          v31 += ~(v31 >> 1);
          if (v34 < *(_DWORD *)(v19 + 4)) {
            uint64_t v18 = v35;
          }
          else {
            unint64_t v31 = v32;
          }
        }
        while (v31);
      }
      uint64_t v17 = (v18 - a2) >> 6;
      if (v19 != a2)
      {
LABEL_22:
        if (v18 == a2)
        {
          uint64_t v30 = v19;
        }
        else
        {
          uint64_t v104 = a3;
          uint64_t v26 = a7;
          uint64_t v27 = v25;
          uint64_t v28 = v17;
          uint64_t v29 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(v19, a2, v18);
          uint64_t v17 = v28;
          uint64_t v25 = v27;
          a7 = v26;
          a3 = v104;
          uint64_t v30 = v29;
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = v8 + 1;
      }
      uint64_t v17 = v16 >> 1;
      uint64_t v18 = a2 + (v16 >> 1 << 6);
      uint64_t v19 = a2;
      if (a2 - a1 != v11)
      {
        unint64_t v20 = (a2 - a1 - v11) >> 6;
        uint64_t v19 = a1 + v11;
        do
        {
          unint64_t v21 = v20 >> 1;
          unint64_t v22 = v19 + (v20 >> 1 << 6);
          int v23 = *(_DWORD *)(v22 + 4);
          uint64_t v24 = v22 + 64;
          v20 += ~(v20 >> 1);
          if (v23 > *(_DWORD *)(v18 + 4)) {
            unint64_t v20 = v21;
          }
          else {
            uint64_t v19 = v24;
          }
        }
        while (v20);
      }
      uint64_t v25 = (v19 - a1 - v11) >> 6;
      if (v19 != a2) {
        goto LABEL_22;
      }
    }
    uint64_t v30 = v18;
LABEL_36:
    a4 = -(v25 + v12);
    uint64_t v36 = v8 - v17;
    if (v25 + v17 >= v8 - (v25 + v17) - v12)
    {
      uint64_t v41 = v25;
      uint64_t v42 = -(v25 + v12);
      uint64_t v8 = v17;
      uint64_t v43 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(v30, v18, a3, v42, v36, a6);
      a2 = v19;
      unint64_t v7 = a6;
      a4 = v41;
      a3 = (long long *)v30;
      a1 = v13;
      a7 = v43;
      if (!v8) {
        return;
      }
    }
    else
    {
      uint64_t v37 = a1 + v11;
      uint64_t v38 = v19;
      uint64_t v39 = a3;
      unint64_t v7 = a6;
      uint64_t v40 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(v37, v38, v30, v25, v17, a6);
      a3 = v39;
      a2 = v18;
      uint64_t v8 = v36;
      a1 = v30;
      a7 = v40;
      if (!v36) {
        return;
      }
    }
  }
  if (a4 > v8)
  {
    if (a3 == (long long *)a2) {
      return;
    }
    unint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      __n128 v46 = &v7[v44 / 0x10];
      unint64_t v47 = a2 + v44;
      long long v48 = *(_OWORD *)(a2 + v44);
      *((_DWORD *)v46 + 4) = *(_DWORD *)(a2 + v44 + 16);
      *__n128 v46 = v48;
      *((void *)v46 + 3) = 0;
      *((void *)v46 + 3) = *(void *)(a2 + v44 + 24);
      long long v49 = *(_OWORD *)(a2 + v44 + 32);
      *((void *)v46 + 6) = *(void *)(a2 + v44 + 48);
      v46[2] = v49;
      *(void *)(v47 + 24) = 0;
      *((unsigned char *)v46 + 56) = *(unsigned char *)(a2 + v44 + 56);
      ++v45;
      v44 += 64;
    }
    while ((long long *)(v47 + 64) != a3);
    if (!v44) {
      goto LABEL_96;
    }
    __n128 v50 = &v7[v44 / 0x10];
    while (2)
    {
      if (a2 == a1)
      {
        uint64_t v88 = 0;
        do
        {
          uint64_t v89 = &v50[v88];
          unint64_t v90 = &a3[v88];
          long long v91 = v50[v88 - 4];
          *((_DWORD *)v90 - 12) = v50[v88 - 3];
          *(v90 - 4) = v91;
          if (a3 != v50)
          {
            int v92 = (void **)(v90 - 2);
            if (*((unsigned char *)v90 - 40))
            {
              uint64_t v93 = a3;
              operator delete(*v92);
              a3 = v93;
            }
            *((void *)v90 - 5) = *((void *)v89 - 5);
            long long v94 = v50[v88 - 2];
            *((void *)v90 - 2) = *(void *)&v50[v88 - 1];
            *(_OWORD *)int v92 = v94;
            *((void *)v89 - 5) = 0;
          }
          *((unsigned char *)v90 - 8) = *((unsigned char *)v89 - 8);
          v88 -= 4;
        }
        while (&v50[v88] != v7);
        goto LABEL_96;
      }
      uint64_t v51 = a3 - 4;
      if (*((_DWORD *)v50 - 15) >= *(_DWORD *)(a2 - 60))
      {
        uint64_t v56 = v50 - 4;
        long long v57 = *(v50 - 4);
        *((_DWORD *)a3 - 12) = *((_DWORD *)v50 - 12);
        *uint64_t v51 = v57;
        if (a3 != v50)
        {
          uint64_t v54 = a3 - 2;
          uint64_t v55 = (uint64_t)v50;
          uint64_t v52 = a2;
          v50 -= 4;
          if ((*((unsigned char *)a3 - 40) & 1) == 0) {
            goto LABEL_55;
          }
          goto LABEL_54;
        }
        uint64_t v55 = (uint64_t)v50;
      }
      else
      {
        uint64_t v52 = a2 - 64;
        long long v53 = *(_OWORD *)(a2 - 64);
        *((_DWORD *)a3 - 12) = *(_DWORD *)(a2 - 48);
        *uint64_t v51 = v53;
        if (a3 != (long long *)a2)
        {
          uint64_t v54 = a3 - 2;
          uint64_t v55 = a2;
          uint64_t v56 = v50;
          if ((*((unsigned char *)a3 - 40) & 1) == 0)
          {
LABEL_55:
            *((void *)a3 - 5) = *(void *)(v55 - 40);
            long long v59 = *(_OWORD *)(v55 - 32);
            *((void *)v54 + 2) = *(void *)(v55 - 16);
            *uint64_t v54 = v59;
            *(void *)(v55 - 40) = 0;
            goto LABEL_56;
          }
LABEL_54:
          int v58 = a3;
          operator delete(*(void **)v54);
          a3 = v58;
          __n128 v50 = v56;
          goto LABEL_55;
        }
        uint64_t v55 = a2;
LABEL_56:
        a2 = v52;
        uint64_t v56 = v50;
      }
      *((unsigned char *)a3 - 8) = *(unsigned char *)(v55 - 8);
      __n128 v50 = v56;
      a3 = v51;
      unint64_t v7 = a6;
      if (v56 == a6) {
        goto LABEL_96;
      }
      continue;
    }
  }
  if (a1 != a2)
  {
    unint64_t v60 = 0;
    unint64_t v45 = 0;
    do
    {
      __n128 v61 = &v7[v60 / 0x10];
      unint64_t v62 = a1 + v60;
      long long v63 = *(_OWORD *)(a1 + v60);
      *((_DWORD *)v61 + 4) = *(_DWORD *)(a1 + v60 + 16);
      long long *v61 = v63;
      *((void *)v61 + 3) = 0;
      *((void *)v61 + 3) = *(void *)(a1 + v60 + 24);
      long long v64 = *(_OWORD *)(a1 + v60 + 32);
      *((void *)v61 + 6) = *(void *)(a1 + v60 + 48);
      v61[2] = v64;
      *(void *)(v62 + 24) = 0;
      *((unsigned char *)v61 + 56) = *(unsigned char *)(a1 + v60 + 56);
      ++v45;
      v60 += 64;
    }
    while (v62 + 64 != a2);
    if (!v60) {
      goto LABEL_96;
    }
    __n128 v65 = &v7[v60 / 0x10];
    uint64_t v66 = (uint64_t)&v7[v60 / 0x10 - 4];
    __n128 v67 = (unsigned char *)(a1 + 56);
    uint64_t v68 = v7;
    while ((long long *)a2 != a3)
    {
      uint64_t v70 = (long long *)(v67 - 56);
      if (*(_DWORD *)(a2 + 4) >= *((_DWORD *)v68 + 1))
      {
        long long v76 = *v68;
        *((_DWORD *)v67 - 10) = *((_DWORD *)v68 + 4);
        *uint64_t v70 = v76;
        if (v70 != v68)
        {
          uint64_t v77 = (void **)(v67 - 24);
          if (*(v67 - 32))
          {
            uint64_t v78 = a3;
            uint64_t v79 = a2;
            operator delete(*v77);
            a2 = v79;
            a3 = v78;
          }
          *((void *)v67 - 4) = *((void *)v68 + 3);
          long long v69 = v68[2];
          *((void *)v67 - 1) = *((void *)v68 + 6);
          *(_OWORD *)uint64_t v77 = v69;
          *((void *)v68 + 3) = 0;
        }
        *__n128 v67 = *((unsigned char *)v68 + 56);
        v67 += 64;
        v68 += 4;
        if (v65 == v68) {
          goto LABEL_96;
        }
      }
      else
      {
        long long v71 = *(_OWORD *)a2;
        *((_DWORD *)v67 - 10) = *(_DWORD *)(a2 + 16);
        *uint64_t v70 = v71;
        if (v70 != (long long *)a2)
        {
          uint64_t v72 = (void **)(v67 - 24);
          if (*(v67 - 32))
          {
            uint64_t v73 = a3;
            uint64_t v74 = a2;
            operator delete(*v72);
            a2 = v74;
            a3 = v73;
          }
          *((void *)v67 - 4) = *(void *)(a2 + 24);
          long long v75 = *(_OWORD *)(a2 + 32);
          *((void *)v67 - 1) = *(void *)(a2 + 48);
          *(_OWORD *)uint64_t v72 = v75;
          *(void *)(a2 + 24) = 0;
        }
        *__n128 v67 = *(unsigned char *)(a2 + 56);
        v67 += 64;
        a2 += 64;
        if (v65 == v68) {
          goto LABEL_96;
        }
      }
    }
    uint64_t v95 = 0;
    do
    {
      uint64_t v96 = &v67[v95 * 16];
      uint64_t v97 = &v68[v95];
      long long v98 = v68[v95];
      *((_DWORD *)v96 - 10) = v68[v95 + 1];
      *(_OWORD *)(v96 - 56) = v98;
      if (&v67[v95 * 16 - 56] != (unsigned char *)&v68[v95])
      {
        uint64_t v99 = (void **)(v96 - 24);
        if (*(v96 - 32)) {
          operator delete(*v99);
        }
        *((void *)v96 - 4) = *((void *)v97 + 3);
        long long v100 = v68[v95 + 2];
        *((void *)v96 - 1) = *(void *)&v68[v95 + 3];
        *(_OWORD *)uint64_t v99 = v100;
        *((void *)v97 + 3) = 0;
      }
      v67[v95 * 16] = *((unsigned char *)v97 + 56);
      v95 += 4;
    }
    while ((long long *)v66 != v97);
    unint64_t v7 = a6;
LABEL_96:
    if (v7)
    {
      unint64_t v101 = 0;
      uint64_t v102 = (void **)(v7 + 2);
      do
      {
        if (*(unsigned char *)(v102 - 1)) {
          operator delete(*v102);
        }
        ++v101;
        v102 += 8;
      }
      while (v101 < v45);
    }
  }
}

uint64_t std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a2;
  for (uint64_t i = a2; ; i += 64)
  {
    uint64_t v8 = a1 + v5;
    uint64_t v9 = a2 + v5;
    long long v35 = *(_OWORD *)(a1 + v5);
    int v38 = *(_DWORD *)(a1 + v5 + 16);
    uint64_t v10 = *(void *)(a1 + v5 + 24);
    uint64_t v11 = a1 + v5 + 32;
    long long v41 = *(_OWORD *)v11;
    uint64_t v44 = *(void *)(a1 + v5 + 48);
    *(void *)(v8 + 24) = 0;
    uint64_t v12 = (char *)(a1 + v5 + 56);
    char v13 = *v12;
    long long v14 = *(_OWORD *)(a2 + v5);
    *(_DWORD *)(v8 + 16) = *(_DWORD *)(a2 + v5 + 16);
    *(_OWORD *)uint64_t v8 = v14;
    uint64_t v15 = *(void *)(a2 + v5 + 24);
    if (a2 == a1)
    {
      *(_OWORD *)uint64_t v8 = v35;
      *(_DWORD *)(v8 + 16) = v38;
      if (v15)
      {
        uint64_t v34 = a3;
        operator delete(*(void **)v11);
        a3 = v34;
      }
    }
    else
    {
      *(void *)(v8 + 24) = v15;
      long long v16 = *(_OWORD *)(v9 + 32);
      *(void *)(a1 + v5 + 48) = *(void *)(v9 + 48);
      *(_OWORD *)uint64_t v11 = v16;
      uint64_t v11 = i + 32;
      *uint64_t v12 = *(unsigned char *)(v9 + 56);
      uint64_t v12 = (char *)(i + 56);
      *(_OWORD *)uint64_t v9 = v35;
      *(_DWORD *)(v9 + 16) = v38;
    }
    *(void *)(v9 + 24) = v10;
    *(_OWORD *)uint64_t v11 = v41;
    *(void *)(v11 + 16) = v44;
    *uint64_t v12 = v13;
    uint64_t v17 = a1 + v5 + 64;
    if (a2 + v5 + 64 == a3) {
      break;
    }
    if (v17 == v6) {
      uint64_t v6 = a2 + v5 + 64;
    }
    v5 += 64;
  }
  if (v17 != v6)
  {
    uint64_t v18 = v6;
    while (1)
    {
      int v39 = *(_DWORD *)(v17 + 16);
      long long v36 = *(_OWORD *)v17;
      uint64_t v19 = *(void *)(v17 + 24);
      uint64_t v20 = v17 + 32;
      long long v42 = *(_OWORD *)(v17 + 32);
      uint64_t v45 = *(void *)(v17 + 48);
      *(void *)(v17 + 24) = 0;
      unint64_t v21 = (unsigned char *)(v17 + 56);
      char v22 = *(unsigned char *)(v17 + 56);
      int v23 = *(_DWORD *)(v18 + 16);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *(_DWORD *)(v17 + 16) = v23;
      uint64_t v24 = *(void *)(v18 + 24);
      if (v17 == v18)
      {
        *(_DWORD *)(v17 + 16) = v39;
        *(_OWORD *)uint64_t v17 = v36;
        if (v24)
        {
          uint64_t v32 = a3;
          operator delete(*(void **)v20);
          a3 = v32;
        }
      }
      else
      {
        *(void *)(v17 + 24) = v24;
        long long v25 = *(_OWORD *)(v18 + 32);
        *(void *)(v17 + 48) = *(void *)(v18 + 48);
        *(_OWORD *)uint64_t v20 = v25;
        uint64_t v20 = v18 + 32;
        unint64_t v21 = (unsigned char *)(v18 + 56);
        *(unsigned char *)(v17 + 56) = *(unsigned char *)(v18 + 56);
        *(_DWORD *)(v18 + 16) = v39;
        *(_OWORD *)uint64_t v18 = v36;
      }
      *(void *)(v18 + 24) = v19;
      *(_OWORD *)uint64_t v20 = v42;
      *(void *)(v20 + 16) = v45;
      *unint64_t v21 = v22;
      v17 += 64;
      v18 += 64;
      BOOL v26 = v17 == v6;
      if (v18 == a3)
      {
        if (v17 == v6) {
          return a1 + v5 + 64;
        }
        uint64_t v27 = (long long *)(v6 + 32);
        uint64_t v18 = v6 + 64;
        while (1)
        {
          int v40 = *(_DWORD *)(v17 + 16);
          long long v37 = *(_OWORD *)v17;
          uint64_t v28 = *(void *)(v17 + 24);
          uint64_t v46 = *(void *)(v17 + 48);
          long long v43 = *(_OWORD *)(v17 + 32);
          *(void *)(v17 + 24) = 0;
          char v29 = *(unsigned char *)(v17 + 56);
          int v30 = *(_DWORD *)(v6 + 16);
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v6;
          *(_DWORD *)(v17 + 16) = v30;
          *(void *)(v17 + 24) = *(void *)(v6 + 24);
          long long v31 = *v27;
          *(void *)(v17 + 48) = *(void *)(v6 + 48);
          *(_OWORD *)(v17 + 32) = v31;
          *(unsigned char *)(v17 + 56) = *(unsigned char *)(v6 + 56);
          *(_DWORD *)(v6 + 16) = v40;
          *(_OWORD *)uint64_t v6 = v37;
          *(void *)(v6 + 24) = v28;
          *uint64_t v27 = v43;
          *(void *)(v6 + 48) = v46;
          *(unsigned char *)(v6 + 56) = v29;
          v17 += 64;
          BOOL v26 = v17 == v6;
          if (v18 != a3) {
            break;
          }
          if (v17 == v6) {
            return a1 + v5 + 64;
          }
        }
      }
      if (v26) {
        uint64_t v6 = v18;
      }
    }
  }
  return a1 + v5 + 64;
}

const char *operations_research::sat::PresolveContext::GetLiteralRepresentative(operations_research::sat::PresolveContext *this, const char *a2)
{
  uint64_t v2 = a2;
  if (~a2 <= (int)a2) {
    int v4 = (int)a2;
  }
  else {
    int v4 = ~a2;
  }
  if (~v4 <= v4) {
    int v5 = v4;
  }
  else {
    int v5 = ~v4;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)this + 137);
  if (v5 >= (unint64_t)((*((void *)this + 138) - v7) >> 2) || *(_DWORD *)(v7 + 4 * v5) == v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 1;
    uint64_t v10 = *((void *)this + 153);
    if (v5 >= (unint64_t)((*((void *)this + 154) - v10) >> 2)) {
      goto LABEL_15;
    }
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v5);
    int v5 = *(_DWORD *)(*((void *)this + 137) + 4 * v5);
    uint64_t v9 = *(void *)(*((void *)this + 140) + 8 * v6);
    uint64_t v8 = *(void *)(*((void *)this + 143) + 8 * v6);
    uint64_t v6 = v5;
    uint64_t v10 = *((void *)this + 153);
    if (v5 >= (unint64_t)((*((void *)this + 154) - v10) >> 2)) {
      goto LABEL_15;
    }
  }
  if (*(_DWORD *)(v10 + 4 * v6) != v5)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v5);
    int v5 = *(_DWORD *)(*((void *)this + 153) + 4 * v6);
    if (*(void *)(*((void *)this + 156) + 8 * v6) == -1) {
      uint64_t v9 = -v9;
    }
  }
LABEL_15:
  if (v4 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = -v9;
  }
  if (v4 < 0) {
    uint64_t v8 = -v8;
  }
  if (operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v4), a2) < 0
    || operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * v4), v12) >= 2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 701);
    uint64_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: CanBeUsedAsLiteral(ref) ", 38);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v21);
  }
  unsigned int v14 = ~v5;
  if (~v5 <= v5) {
    int v15 = v5;
  }
  else {
    int v15 = ~v5;
  }
  if ((operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v15), v13) & 0x8000000000000000) == 0
    && operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * v15), v16) <= 1)
  {
    if (v8) {
      BOOL v17 = v11 + v8 == 1;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v17;
    if ((v2 & 0x80000000) != 0)
    {
      if (v18) {
        return (const char *)v14;
      }
      else {
        return (const char *)v5;
      }
    }
    else if (v18)
    {
      return (const char *)v5;
    }
    else
    {
      return (const char *)v14;
    }
  }
  return v2;
}

void sub_23CD4AD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::PresolveContext::GetVariableRepresentative(operations_research::sat::PresolveContext *this, int a2)
{
  if (~a2 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = ~a2;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 153);
  if (v3 >= (unint64_t)((*((void *)this + 154) - v5) >> 2) || *(_DWORD *)(v5 + 4 * v3) == v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    v12[0] = 1;
    int v13 = 1;
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v3);
    int v3 = *(_DWORD *)(*((void *)this + 153) + 4 * v3);
    uint64_t v9 = 8 * v4;
    uint64_t v7 = *(void *)(*((void *)this + 156) + 8 * v4);
    uint64_t v6 = *(void *)(*((void *)this + 159) + v9);
    if (v7 >= 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = -v7;
    }
    v12[0] = v10;
    int v13 = 1;
    if (v10 != 1) {
      google::MakeCheckOpString<long long,int>((int)v12, (int)&v13, "std::abs(r.coeff) == 1");
    }
  }
  v12[0] = v6;
  int v13 = 0;
  if (v6) {
    google::MakeCheckOpString<long long,int>((int)v12, (int)&v13, "r.offset == 0");
  }
  return v3 ^ (((a2 >= 0) ^ (v7 == 1)) << 31 >> 31);
}

void sub_23CD4AEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD4AF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::PresolveContext::NewIntVar(operations_research::sat::PresolveContext *this, const operations_research::Domain *a2)
{
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *(int **)(v4 + 32);
  if (!v5)
  {
    int v7 = *(_DWORD *)(v4 + 28);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v4 + 16), v7 + 1);
    uint64_t v5 = *(int **)(v4 + 32);
    int v7 = *v5;
    goto LABEL_7;
  }
  uint64_t v6 = *(int *)(v4 + 24);
  int v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(v4 + 24) = v6 + 1;
    unint64_t v8 = *(void *)&v5[2 * v6 + 2];
    goto LABEL_8;
  }
  if (v7 == *(_DWORD *)(v4 + 28)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v5 = v7 + 1;
  unint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v4 + 16));
  uint64_t v9 = *(void *)(v4 + 32);
  uint64_t v10 = *(int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v10 + 1;
  *(void *)(v9 + 8 * v10 + 8) = v8;
LABEL_8:
  *(_DWORD *)(v8 + 16) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), *(void *)a2 >> 1);
  unint64_t v12 = *(void *)a2;
  int v15 = (uint64_t *)*((void *)a2 + 1);
  unsigned int v14 = (char *)a2 + 8;
  int v13 = v15;
  if (v12) {
    long long v16 = v13;
  }
  else {
    long long v16 = (uint64_t *)v14;
  }
  if (v12 >= 2)
  {
    int v18 = &v16[2 * (v12 >> 1)];
    unsigned int v19 = *(_DWORD *)(v8 + 16);
    do
    {
      uint64_t v20 = *v16;
      int v21 = *(_DWORD *)(v8 + 20);
      unsigned int v22 = v19 + 1;
      if (v19 == v21)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), v19 + 1);
        int v21 = *(_DWORD *)(v8 + 20);
      }
      uint64_t v23 = *(void *)(v8 + 24);
      *(void *)(v23 + 8 * v19) = v20;
      *(_DWORD *)(v8 + 16) = v22;
      uint64_t v24 = v16[1];
      v19 += 2;
      if (v22 == v21)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), v19);
        uint64_t v23 = *(void *)(v8 + 24);
      }
      *(void *)(v23 + 8 * v22) = v24;
      *(_DWORD *)(v8 + 16) = v19;
      v16 += 2;
    }
    while (v16 != v18);
  }
  operations_research::sat::PresolveContext::InitializeNewDomains(this, v11);
  return (*(_DWORD *)(*((void *)this + 6) + 24) - 1);
}

void operations_research::sat::PresolveContext::InitializeNewDomains(operations_research::sat::PresolveContext *this, __n128 a2)
{
  int64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 3);
  uint64_t v4 = *((void *)this + 6);
  if (*(_DWORD *)(v4 + 24) > (int)v3)
  {
    uint64_t v5 = (void *)((char *)this + 512);
    uint64_t v6 = (const char *)(int)v3;
    int v7 = ~v3;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v4 + 32) + 8 * (void)v6 + 8);
      operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v8 + 24), *(int *)(v8 + 16), (unint64_t *)&v42, a2);
      unint64_t v9 = *((void *)this + 65);
      if (v9 >= *((void *)this + 66))
      {
        uint64_t v10 = std::vector<operations_research::Domain>::__emplace_back_slow_path<operations_research::Domain>((uint64_t *)this + 64, (uint64_t)&v42);
        char v11 = v42;
        *((void *)this + 65) = v10;
        if (v11)
        {
          operator delete((void *)__p);
          uint64_t v10 = *((void *)this + 65);
        }
      }
      else
      {
        *(void *)unint64_t v9 = 0;
        *(void *)unint64_t v9 = v42;
        *(_OWORD *)(v9 + 8) = __p;
        uint64_t v10 = v9 + 24;
        *((void *)this + 65) = v9 + 24;
      }
      if (operations_research::Domain::IsEmpty((operations_research::Domain *)(v10 - 24)))
      {
        *((unsigned char *)this + 504) = 1;
        return;
      }
      if (v7 <= (int)v6) {
        int v13 = (int)v6;
      }
      else {
        int v13 = v7;
      }
      if (operations_research::Domain::IsFixed((operations_research::Domain *)(*v5 + 24 * v13), v12)) {
        operations_research::sat::PresolveContext::ExploitFixedDomain(this, v6);
      }
      ++v6;
      uint64_t v4 = *((void *)this + 6);
      --v7;
    }
    while ((uint64_t)v6 < *(int *)(v4 + 24));
    int64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 3);
  }
  if (*((void *)this + 31) > v3)
  {
    unsigned int v14 = (int64_t *)*((void *)this + 38);
    int v15 = (int64_t *)*((void *)this + 39);
    if (v14 == v15)
    {
      int v16 = 0;
    }
    else
    {
      int v16 = 0;
      BOOL v17 = (int64_t *)*((void *)this + 38);
      do
      {
        if (*v17 < v3) {
          v14[v16++] = *v17;
        }
        ++v17;
      }
      while (v17 != v15);
    }
    unint64_t v18 = v15 - v14;
    if (v16 <= v18)
    {
      if (v16 < v18) {
        *((void *)this + 39) = &v14[v16];
      }
    }
    else
    {
      std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)this + 304, v16 - v18);
    }
  }
  uint64_t v19 = v3 & ~(v3 >> 63);
  *((void *)this + 31) = v19;
  unint64_t v20 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v42 = 0;
  uint64_t v21 = *((void *)this + 32);
  unint64_t v22 = (*((void *)this + 33) - v21) >> 3;
  if (v20 <= v22)
  {
    if (v20 < v22) {
      *((void *)this + 33) = v21 + 8 * v20;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 256, v20 - v22, &v42);
  }
  unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 3);
  uint64_t v24 = *((void *)this + 86);
  uint64_t v25 = *((void *)this + 85);
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 4);
  if (v23 <= v26)
  {
    if (v23 < v26)
    {
      for (uint64_t i = v25 + 16 * ((uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 3); v24 != i; v24 -= 48)
      {
        if (*(void *)(v24 - 24))
        {
          operator delete(*(void **)(v24 - 48));
          *(void *)(v24 - 8) = 0;
          *(void *)(v24 - 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(void *)(v24 - 40) = 0;
          *(void *)(v24 - 32) = 0;
          *(void *)(v24 - 24) = 0;
        }
        uint64_t v28 = *(void **)(v24 - 16);
        if (v28) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v28);
        }
      }
      *((void *)this + 86) = i;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>::__append((char **)this + 85, v23 - v26);
  }
  unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 3);
  uint64_t v30 = *((void *)this + 91);
  unint64_t v31 = (*((void *)this + 92) - v30) >> 2;
  if (v29 <= v31)
  {
    if (v29 < v31) {
      *((void *)this + 92) = v30
    }
                             - 0x5555555555555554 * ((uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 3);
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 728), v29 - v31);
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 3);
  }
  uint64_t v32 = *((void *)this + 1);
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v32 - *(void *)this) >> 4);
  if (v29 <= v33)
  {
    if (v29 < v33)
    {
      for (uint64_t j = *(void *)this + 48 * v29; v32 != j; v32 -= 48)
      {
        if (*(void *)(v32 - 24))
        {
          operator delete(*(void **)(v32 - 48));
          *(void *)(v32 - 8) = 0;
          *(void *)(v32 - 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(void *)(v32 - 40) = 0;
          *(void *)(v32 - 32) = 0;
          *(void *)(v32 - 24) = 0;
        }
        long long v35 = *(void **)(v32 - 16);
        if (v35) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v35);
        }
      }
      *((void *)this + 1) = j;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>::__append((char **)this, v29 - v33);
  }
  uint64_t v36 = *((void *)this + 3);
  unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 3);
  uint64_t v38 = *((void *)this + 4);
  unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v36) >> 4);
  if (v37 <= v39)
  {
    if (v37 < v39)
    {
      for (uint64_t k = v36 + 16 * ((uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 3); v38 != k; v38 -= 48)
      {
        if (*(void *)(v38 - 24))
        {
          operator delete(*(void **)(v38 - 48));
          *(void *)(v38 - 8) = 0;
          *(void *)(v38 - 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(void *)(v38 - 40) = 0;
          *(void *)(v38 - 32) = 0;
          *(void *)(v38 - 24) = 0;
        }
        long long v41 = *(void **)(v38 - 16);
        if (v41) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v41);
        }
      }
      *((void *)this + 4) = k;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>::__append((char **)this + 3, v37 - v39);
  }
}

void sub_23CD4B500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if (a10) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::PresolveContext::NewBoolVar(operations_research::sat::PresolveContext *this)
{
  operations_research::Domain::Domain(v4, 0, 1);
  uint64_t v2 = operations_research::sat::PresolveContext::NewIntVar(this, (const operations_research::Domain *)v4);
  if ((uint64_t)v4[0]) {
    operator delete(v4[1]);
  }
  return v2;
}

void sub_23CD4B578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if (a10) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::PresolveContext::GetOrCreateConstantVar(operations_research::sat::PresolveContext *this, uint64_t a2, __n128 a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = (uint64_t *)((char *)this + 848);
  unint64_t v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  unint64_t v8 = *((void *)this + 106);
  unint64_t v9 = (v7 >> 7) ^ (v8 >> 12);
  uint64_t v10 = *((void *)this + 109);
  uint64_t v11 = 0x101010101010101 * (v7 & 0x7F);
  uint64_t v12 = *((void *)this + 107);
  for (unint64_t i = v9; ; unint64_t i = v5 + v14)
  {
    uint64_t v14 = i & v10;
    uint64_t v15 = *(void *)(v8 + v14);
    unint64_t v16 = ((v15 ^ v11) - 0x101010101010101) & ~(v15 ^ v11) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_5:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_8;
    }
    v5 += 8;
  }
  while (1)
  {
    unint64_t v17 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v10;
    if (*(void *)(v12 + 16 * v17) == a2) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_5;
    }
  }
  if (v17 == v10)
  {
LABEL_8:
    uint64_t v18 = 0;
    uint64_t v19 = *((void *)this + 6);
    int v20 = *(_DWORD *)(v19 + 24);
    while (1)
    {
      uint64_t v21 = v9 & v10;
      uint64_t v22 = *(void *)(v8 + v21);
      unint64_t v23 = ((v22 ^ v11) - 0x101010101010101) & ~(v22 ^ v11) & 0x8080808080808080;
      if (v23) {
        break;
      }
LABEL_12:
      if ((v22 & (~v22 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v24 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert(v6, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ a2)));
        uint64_t v12 = *((void *)this + 107);
        uint64_t v25 = v12 + 16 * v24;
        *(void *)uint64_t v25 = a2;
        *(_DWORD *)(v25 + 8) = 0;
        uint64_t v19 = *((void *)this + 6);
        goto LABEL_15;
      }
      v18 += 8;
      unint64_t v9 = v18 + v21;
    }
    while (1)
    {
      unint64_t v24 = (v21 + (__clz(__rbit64(v23)) >> 3)) & v10;
      if (*(void *)(v12 + 16 * v24) == a2) {
        break;
      }
      v23 &= v23 - 1;
      if (!v23) {
        goto LABEL_12;
      }
    }
LABEL_15:
    *(_DWORD *)(v12 + 16 * v24 + 8) = v20;
    unint64_t v26 = *(int **)(v19 + 32);
    if (v26)
    {
      uint64_t v27 = *(int *)(v19 + 24);
      int v28 = *v26;
      if ((int)v27 < *v26)
      {
        *(_DWORD *)(v19 + 24) = v27 + 1;
        unint64_t v29 = *(void *)&v26[2 * v27 + 2];
        uint64_t v32 = *(unsigned int *)(v29 + 16);
        int v30 = *(_DWORD *)(v29 + 20);
        unint64_t v31 = (unsigned int *)(v29 + 16);
        unsigned int v33 = v32 + 1;
        if (v32 != v30) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      if (v28 != *(_DWORD *)(v19 + 28))
      {
LABEL_22:
        *unint64_t v26 = v28 + 1;
        unint64_t v29 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v19 + 16));
        uint64_t v34 = *(void *)(v19 + 32);
        uint64_t v35 = *(int *)(v19 + 24);
        *(_DWORD *)(v19 + 24) = v35 + 1;
        *(void *)(v34 + 8 * v35 + 8) = v29;
        uint64_t v32 = *(unsigned int *)(v29 + 16);
        int v30 = *(_DWORD *)(v29 + 20);
        unint64_t v31 = (unsigned int *)(v29 + 16);
        unsigned int v33 = v32 + 1;
        if (v32 != v30)
        {
LABEL_24:
          uint64_t v36 = *(void *)(v29 + 24);
          *(void *)(v36 + 8 * v32) = a2;
          *(_DWORD *)(v29 + 16) = v33;
          int v37 = v32 + 2;
          if (v33 == v30)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v31, v37);
            uint64_t v36 = *(void *)(v29 + 24);
          }
          *(void *)(v36 + 8 * v33) = a2;
          *unint64_t v31 = v37;
          operations_research::sat::PresolveContext::InitializeNewDomains(this, a3);
          unint64_t v8 = *((void *)this + 106);
          uint64_t v10 = *((void *)this + 109);
          unint64_t v9 = (v7 >> 7) ^ (v8 >> 12);
          goto LABEL_27;
        }
LABEL_23:
        google::protobuf::RepeatedField<long long>::Reserve(v31, v33);
        int v30 = *(_DWORD *)(v29 + 20);
        goto LABEL_24;
      }
    }
    else
    {
      int v28 = *(_DWORD *)(v19 + 28);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v19 + 16), v28 + 1);
    unint64_t v26 = *(int **)(v19 + 32);
    int v28 = *v26;
    goto LABEL_22;
  }
LABEL_27:
  for (j = 0; ; unint64_t v9 = j + v39)
  {
    uint64_t v39 = v9 & v10;
    uint64_t v40 = *(void *)(v8 + v39);
    unint64_t v41 = ((v40 ^ v11) - 0x101010101010101) & ~(v40 ^ v11) & 0x8080808080808080;
    if (v41) {
      break;
    }
LABEL_32:
    if ((v40 & (~v40 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v43 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert(v6, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ a2)));
      uint64_t v42 = *((void *)this + 107);
      uint64_t v44 = v42 + 16 * v43;
      *(void *)uint64_t v44 = a2;
      *(_DWORD *)(v44 + 8) = 0;
      goto LABEL_35;
    }
    j += 8;
  }
  uint64_t v42 = *((void *)this + 107);
  while (1)
  {
    unint64_t v43 = (v39 + (__clz(__rbit64(v41)) >> 3)) & v10;
    if (*(void *)(v42 + 16 * v43) == a2) {
      break;
    }
    v41 &= v41 - 1;
    if (!v41) {
      goto LABEL_32;
    }
  }
LABEL_35:
  int v45 = *(_DWORD *)(v42 + 16 * v43 + 8);

  return operations_research::sat::PresolveContext::GetVariableRepresentative(this, v45);
}

void operations_research::sat::PresolveContext::AddImplication(operations_research::sat::PresolveContext *this, int a2, int a3)
{
  uint64_t v5 = *((void *)this + 6);
  uint64_t v6 = *(int **)(v5 + 56);
  if (!v6)
  {
    int v8 = *(_DWORD *)(v5 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v5 + 40), v8 + 1);
    uint64_t v6 = *(int **)(v5 + 56);
    int v8 = *v6;
LABEL_8:
    *uint64_t v6 = v8 + 1;
    unint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v5 + 40));
    uint64_t v13 = *(void *)(v5 + 56);
    uint64_t v14 = *(int *)(v5 + 48);
    *(_DWORD *)(v5 + 48) = v14 + 1;
    *(void *)(v13 + 8 * v14 + 8) = v9;
    uint64_t v11 = *(unsigned int *)(v9 + 16);
    uint64_t v10 = (unsigned int *)(v9 + 16);
    int v12 = v11 + 1;
    if (v11 != *(_DWORD *)(v9 + 20)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v7 = *(int *)(v5 + 48);
  int v8 = *v6;
  if ((int)v7 >= *v6)
  {
    if (v8 != *(_DWORD *)(v5 + 52)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *(_DWORD *)(v5 + 48) = v7 + 1;
  unint64_t v9 = *(void *)&v6[2 * v7 + 2];
  uint64_t v11 = *(unsigned int *)(v9 + 16);
  uint64_t v10 = (unsigned int *)(v9 + 16);
  int v12 = v11 + 1;
  if (v11 == *(_DWORD *)(v9 + 20)) {
LABEL_9:
  }
    google::protobuf::RepeatedField<int>::Reserve(v10, v12);
LABEL_10:
  *(_DWORD *)(*(void *)(v9 + 24) + 4 * v11) = a2;
  *(_DWORD *)(v9 + 16) = v12;
  if (*(_DWORD *)(v9 + 60) == 4)
  {
    unint64_t v15 = *(void *)(v9 + 48);
    uint64_t v17 = *(unsigned int *)(v15 + 16);
    unint64_t v16 = (unsigned int *)(v15 + 16);
    int v18 = v17 + 1;
    if (v17 != *(_DWORD *)(v15 + 20)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v9);
  *(_DWORD *)(v9 + 60) = 4;
  uint64_t v19 = *(void *)(v9 + 8);
  int v20 = (google::protobuf::Arena *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if (v19) {
    int v20 = *(google::protobuf::Arena **)v20;
  }
  unint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v20);
  *(void *)(v9 + 48) = v15;
  uint64_t v17 = *(unsigned int *)(v15 + 16);
  unint64_t v16 = (unsigned int *)(v15 + 16);
  int v18 = v17 + 1;
  if (v17 == *(_DWORD *)(v15 + 20)) {
LABEL_16:
  }
    google::protobuf::RepeatedField<int>::Reserve(v16, v18);
LABEL_17:
  *(_DWORD *)(*(void *)(v15 + 24) + 4 * v17) = a3;
  *(_DWORD *)(v15 + 16) = v18;
}

void operations_research::sat::PresolveContext::AddImplyInDomain(operations_research::sat::PresolveContext *this, unsigned int a2, unsigned int a3, const operations_research::Domain *a4)
{
  uint64_t v7 = *((void *)this + 6);
  int v8 = *(int **)(v7 + 56);
  if (!v8)
  {
    int v10 = *(_DWORD *)(v7 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v7 + 40), v10 + 1);
    int v8 = *(int **)(v7 + 56);
    int v10 = *v8;
    goto LABEL_8;
  }
  uint64_t v9 = *(int *)(v7 + 48);
  int v10 = *v8;
  if ((int)v9 < *v8)
  {
    *(_DWORD *)(v7 + 48) = v9 + 1;
    unint64_t v11 = *(void *)&v8[2 * v9 + 2];
    int v12 = (unsigned int *)(v11 + 16);
    if (*(int *)(v11 + 16) > 0) {
      goto LABEL_17;
    }
    goto LABEL_9;
  }
  if (v10 == *(_DWORD *)(v7 + 52)) {
    goto LABEL_7;
  }
LABEL_8:
  *int v8 = v10 + 1;
  unint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v7 + 40));
  uint64_t v13 = *(void *)(v7 + 56);
  uint64_t v14 = *(int *)(v7 + 48);
  *(_DWORD *)(v7 + 48) = v14 + 1;
  *(void *)(v13 + 8 * v14 + 8) = v11;
  int v12 = (unsigned int *)(v11 + 16);
  if (*(int *)(v11 + 16) > 0) {
    goto LABEL_17;
  }
LABEL_9:
  google::protobuf::RepeatedField<int>::Reserve(v12, 1);
  uint64_t v15 = (int)*v12;
  if ((int)v15 > 0) {
    goto LABEL_17;
  }
  uint64_t v16 = 4 * v15;
  unint64_t v17 = 4 - 4 * v15;
  uint64_t v18 = *(void *)(v11 + 24);
  uint64_t v19 = (unsigned int *)(v18 + 4 * v15);
  unint64_t v20 = v17 >> 2;
  if (v17 < 0x20)
  {
    unint64_t v21 = v17 >> 2;
LABEL_15:
    unint64_t v25 = v21 + 1;
    do
    {
      *v19++ = a2;
      --v25;
    }
    while (v25 > 1);
    goto LABEL_17;
  }
  v19 += v20 & 0x3FFFFFFFFFFFFFF8;
  unint64_t v21 = (v17 >> 2) & 7;
  int32x4_t v22 = vdupq_n_s32(a2);
  unint64_t v23 = (int32x4_t *)(v16 + v18 + 16);
  uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    v23[-1] = v22;
    *unint64_t v23 = v22;
    v23 += 2;
    v24 -= 8;
  }
  while (v24);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFF8)) {
    goto LABEL_15;
  }
LABEL_17:
  *(_DWORD *)(v11 + 16) = 1;
  if (*(_DWORD *)(v11 + 60) == 12)
  {
    uint64_t v26 = *(void *)(v11 + 48);
    uint64_t v27 = (unsigned int *)(v26 + 16);
    if (*(int *)(v26 + 16) > 0) {
      goto LABEL_31;
    }
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(v11);
    *(_DWORD *)(v11 + 60) = 12;
    uint64_t v28 = *(void *)(v11 + 8);
    unint64_t v29 = (google::protobuf::Arena *)(v28 & 0xFFFFFFFFFFFFFFFELL);
    if (v28) {
      unint64_t v29 = *(google::protobuf::Arena **)v29;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v29);
    uint64_t v26 = v30;
    *(void *)(v11 + 48) = v30;
    uint64_t v27 = (unsigned int *)(v30 + 16);
    if (*(int *)(v30 + 16) > 0) {
      goto LABEL_31;
    }
  }
  google::protobuf::RepeatedField<int>::Reserve(v27, 1);
  uint64_t v31 = (int)*v27;
  if ((int)v31 > 0) {
    goto LABEL_31;
  }
  uint64_t v32 = 4 * v31;
  unint64_t v33 = 4 - 4 * v31;
  uint64_t v34 = *(void *)(v26 + 24);
  uint64_t v35 = (unsigned int *)(v34 + 4 * v31);
  unint64_t v36 = v33 >> 2;
  if (v33 < 0x20)
  {
    unint64_t v37 = v33 >> 2;
LABEL_29:
    unint64_t v41 = v37 + 1;
    do
    {
      *v35++ = a3;
      --v41;
    }
    while (v41 > 1);
    goto LABEL_31;
  }
  v35 += v36 & 0x3FFFFFFFFFFFFFF8;
  unint64_t v37 = (v33 >> 2) & 7;
  int32x4_t v38 = vdupq_n_s32(a3);
  uint64_t v39 = (int32x4_t *)(v32 + v34 + 16);
  uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    v39[-1] = v38;
    int32x4_t *v39 = v38;
    v39 += 2;
    v40 -= 8;
  }
  while (v40);
  if (v36 != (v36 & 0x3FFFFFFFFFFFFFF8)) {
    goto LABEL_29;
  }
LABEL_31:
  int v42 = *(_DWORD *)(v26 + 40);
  *(_DWORD *)(v26 + 16) = 1;
  if (v42 <= 0)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 40), 1);
    uint64_t v43 = *(int *)(v26 + 40);
    if ((int)v43 <= 0) {
      memset_pattern16((void *)(*(void *)(v26 + 48) + 8 * v43), &unk_23CE8E230, 8 - 8 * v43);
    }
  }
  *(_DWORD *)(v26 + 64) = 0;
  *(_DWORD *)(v26 + 40) = 1;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), *(void *)a4 >> 1);
  unint64_t v44 = *(void *)a4;
  unint64_t v47 = (uint64_t *)*((void *)a4 + 1);
  uint64_t v46 = (char *)a4 + 8;
  int v45 = v47;
  if (v44) {
    long long v48 = v45;
  }
  else {
    long long v48 = (uint64_t *)v46;
  }
  if (v44 >= 2)
  {
    long long v49 = &v48[2 * (v44 >> 1)];
    unsigned int v50 = *(_DWORD *)(v26 + 64);
    do
    {
      uint64_t v51 = *v48;
      int v52 = *(_DWORD *)(v26 + 68);
      unsigned int v53 = v50 + 1;
      if (v50 == v52)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), v50 + 1);
        int v52 = *(_DWORD *)(v26 + 68);
      }
      uint64_t v54 = *(void *)(v26 + 72);
      *(void *)(v54 + 8 * v50) = v51;
      *(_DWORD *)(v26 + 64) = v53;
      uint64_t v55 = v48[1];
      v50 += 2;
      if (v53 == v52)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), v50);
        uint64_t v54 = *(void *)(v26 + 72);
      }
      *(void *)(v54 + 8 * v53) = v55;
      *(_DWORD *)(v26 + 64) = v50;
      v48 += 2;
    }
    while (v48 != v49);
  }
}

BOOL operations_research::sat::PresolveContext::DomainIsEmpty(operations_research::sat::PresolveContext *this, int a2)
{
  if (~a2 <= a2) {
    int v2 = a2;
  }
  else {
    int v2 = ~a2;
  }
  return operations_research::Domain::IsEmpty((operations_research::Domain *)(*((void *)this + 64) + 24 * v2));
}

BOOL operations_research::sat::PresolveContext::IsFixed(operations_research::sat::PresolveContext *this, const char *a2)
{
  if (~a2 <= (int)a2) {
    int v2 = (int)a2;
  }
  else {
    int v2 = ~a2;
  }
  return operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * v2), a2);
}

BOOL operations_research::sat::PresolveContext::LiteralIsTrue(operations_research::sat::PresolveContext *this, const char *a2)
{
  if ((a2 & 0x80000000) != 0) {
    return operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * ~a2), a2) == 0;
  }
  else {
    return operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * a2), a2) == 1;
  }
}

BOOL operations_research::sat::PresolveContext::LiteralIsFalse(operations_research::sat::PresolveContext *this, const char *a2)
{
  if ((a2 & 0x80000000) != 0) {
    return operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * ~a2), a2) == 1;
  }
  else {
    return operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * a2), a2) == 0;
  }
}

uint64_t operations_research::sat::PresolveContext::MinOf(operations_research::sat::PresolveContext *this, const char *a2)
{
  if ((a2 & 0x80000000) != 0) {
    return -operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * ~a2), a2);
  }
  int v2 = (operations_research::Domain *)(*((void *)this + 64) + 24 * a2);

  return operations_research::Domain::Min(v2, a2);
}

uint64_t operations_research::sat::PresolveContext::MaxOf(operations_research::sat::PresolveContext *this, const char *a2)
{
  if ((a2 & 0x80000000) != 0) {
    return -operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * ~a2), a2);
  }
  int v2 = (operations_research::Domain *)(*((void *)this + 64) + 24 * a2);

  return operations_research::Domain::Max(v2, a2);
}

uint64_t operations_research::sat::PresolveContext::MinOf(operations_research::sat::PresolveContext *this, const operations_research::sat::LinearExpressionProto *a2)
{
  uint64_t v2 = *((void *)a2 + 8);
  if (*((int *)a2 + 4) >= 1)
  {
    for (uint64_t i = 0; i < *((int *)a2 + 4); ++i)
    {
      uint64_t v7 = *(void *)(*((void *)a2 + 6) + 8 * i);
      unsigned int v8 = *(_DWORD *)(*((void *)a2 + 3) + 4 * i);
      if (v7 < 1)
      {
        if ((v8 & 0x80000000) != 0)
        {
          uint64_t v9 = operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v8), (const char *)a2);
          goto LABEL_11;
        }
        uint64_t v6 = operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * v8), (const char *)a2);
      }
      else
      {
        if ((v8 & 0x80000000) != 0)
        {
          uint64_t v9 = operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v8), (const char *)a2);
LABEL_11:
          uint64_t v6 = -v9;
          goto LABEL_4;
        }
        uint64_t v6 = operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v8), (const char *)a2);
      }
LABEL_4:
      v2 += v6 * v7;
    }
  }
  return v2;
}

uint64_t operations_research::sat::PresolveContext::MaxOf(operations_research::sat::PresolveContext *this, const operations_research::sat::LinearExpressionProto *a2)
{
  uint64_t v2 = *((void *)a2 + 8);
  if (*((int *)a2 + 4) >= 1)
  {
    for (uint64_t i = 0; i < *((int *)a2 + 4); ++i)
    {
      uint64_t v7 = *(void *)(*((void *)a2 + 6) + 8 * i);
      unsigned int v8 = *(_DWORD *)(*((void *)a2 + 3) + 4 * i);
      if (v7 < 1)
      {
        if ((v8 & 0x80000000) != 0)
        {
          uint64_t v9 = operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v8), (const char *)a2);
          goto LABEL_11;
        }
        uint64_t v6 = operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v8), (const char *)a2);
      }
      else
      {
        if ((v8 & 0x80000000) != 0)
        {
          uint64_t v9 = operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v8), (const char *)a2);
LABEL_11:
          uint64_t v6 = -v9;
          goto LABEL_4;
        }
        uint64_t v6 = operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * v8), (const char *)a2);
      }
LABEL_4:
      v2 += v6 * v7;
    }
  }
  return v2;
}

BOOL operations_research::sat::PresolveContext::VariableIsNotRepresentativeOfEquivalenceClass(operations_research::sat::PresolveContext *this, int a2)
{
  unint64_t v4 = a2;
  uint64_t v5 = *((void *)this + 137);
  if (a2 < (unint64_t)((*((void *)this + 138) - v5) >> 2))
  {
    int v6 = a2;
    uint64_t v7 = a2;
    if (*(_DWORD *)(v5 + 4 * a2) != a2)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), a2);
      uint64_t v5 = *((void *)this + 137);
      int v6 = *(_DWORD *)(v5 + 4 * v4);
      uint64_t v7 = v6;
    }
    if (*(int *)(*((void *)this + 146) + 4 * v7) >= 2)
    {
      if (v4 >= (*((void *)this + 138) - v5) >> 2 || v6 == a2) {
        return 0;
      }
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), a2);
      if (*(_DWORD *)(*((void *)this + 137) + 4 * v4) == a2) {
        return 0;
      }
    }
  }
  uint64_t v10 = *((void *)this + 153);
  if (v4 >= (*((void *)this + 154) - v10) >> 2) {
    return 1;
  }
  int v11 = a2;
  unint64_t v12 = v4;
  if (*(_DWORD *)(v10 + 4 * v4) != a2)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), a2);
    uint64_t v10 = *((void *)this + 153);
    int v11 = *(_DWORD *)(v10 + 4 * v4);
    unint64_t v12 = v11;
  }
  if (*(int *)(*((void *)this + 162) + 4 * v12) < 2) {
    return 1;
  }
  BOOL result = 0;
  if (v4 < (*((void *)this + 154) - v10) >> 2 && v11 != a2)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), a2);
    return *(_DWORD *)(*((void *)this + 153) + 4 * v4) != a2;
  }
  return result;
}

BOOL operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(operations_research::sat::PresolveContext *this, int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 83) - *((void *)this + 82)) >> 3) != *(_DWORD *)(*((void *)this + 6) + 48)) {
    return 0;
  }
  if (~a2 > a2) {
    a2 = ~a2;
  }
  if (*(void *)(*((void *)this + 85) + 48 * a2 + 16) != 1) {
    return 0;
  }
  BOOL result = operations_research::sat::PresolveContext::VariableIsNotRepresentativeOfEquivalenceClass(this, a2);
  if (result) {
    return *((unsigned char *)this + 64) == 0;
  }
  return result;
}

BOOL operations_research::sat::PresolveContext::ConstraintVariableGraphIsUpToDate(operations_research::sat::PresolveContext *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 83) - *((void *)this + 82)) >> 3) == *(int *)(*((void *)this + 6) + 48);
}

BOOL operations_research::sat::PresolveContext::VariableWithCostIsUniqueAndRemovable(operations_research::sat::PresolveContext *this, int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 83) - *((void *)this + 82)) >> 3) != *(_DWORD *)(*((void *)this + 6) + 48)) {
    return 0;
  }
  if (~a2 > a2) {
    a2 = ~a2;
  }
  if (*((unsigned char *)this + 64)) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = (void *)(*((void *)this + 85) + 48 * a2);
  unint64_t v5 = ((((unint64_t)&off_264E82C18 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 7));
  unint64_t v6 = (v5 >> 7) ^ (*v4 >> 12);
  uint64_t v7 = v4[3];
  uint64_t v8 = 0x101010101010101 * (v5 & 0x7F);
  while (1)
  {
    uint64_t v9 = v6 & v7;
    uint64_t v10 = *(void *)(*v4 + v9);
    unint64_t v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_10:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v3 += 8;
    unint64_t v6 = v3 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_DWORD *)(v4[1] + 4 * v12) == -1) {
      break;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_10;
    }
  }
  return v12 != v7
      && v4[2] == 2
      && operations_research::sat::PresolveContext::VariableIsNotRepresentativeOfEquivalenceClass(this, a2);
}

BOOL operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(operations_research::sat::PresolveContext *this, int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 83) - *((void *)this + 82)) >> 3) != *(_DWORD *)(*((void *)this + 6) + 48)) {
    return 0;
  }
  if (~a2 <= a2) {
    int v2 = a2;
  }
  else {
    int v2 = ~a2;
  }
  return *(void *)(*((void *)this + 85) + 48 * v2 + 16) == 0;
}

unint64_t operations_research::sat::PresolveContext::MarkVariableAsRemoved(operations_research::sat::PresolveContext *this, int a2)
{
  uint64_t v3 = 0;
  unint64_t result = (unint64_t)this + 1368;
  if (~a2 <= a2) {
    int v5 = a2;
  }
  else {
    int v5 = ~a2;
  }
  unint64_t v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v5));
  unint64_t v7 = *((void *)this + 171);
  unint64_t v8 = (v6 >> 7) ^ (v7 >> 12);
  uint64_t v9 = *((void *)this + 174);
  while (1)
  {
    unint64_t v10 = v8 & v9;
    uint64_t v11 = *(void *)(v7 + v10);
    unint64_t v12 = ((v11 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_8:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)result, v6);
      *(_DWORD *)(*((void *)this + 172) + 4 * result) = v5;
      return result;
    }
    v3 += 8;
    unint64_t v8 = v3 + v10;
  }
  while (*(_DWORD *)(*((void *)this + 172) + 4 * ((v10 + (__clz(__rbit64(v12)) >> 3)) & v9)) != v5)
  {
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t operations_research::sat::PresolveContext::VariableWasRemoved(operations_research::sat::PresolveContext *this, const char *a2)
{
  if (~a2 <= (int)a2) {
    int v3 = (int)a2;
  }
  else {
    int v3 = ~a2;
  }
  if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * v3), a2)) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  unint64_t v6 = *((void *)this + 171);
  unint64_t v7 = (v5 >> 7) ^ (v6 >> 12);
  uint64_t v8 = *((void *)this + 174);
  uint64_t v9 = 0x101010101010101 * (v5 & 0x7F);
  while (1)
  {
    uint64_t v10 = v7 & v8;
    uint64_t v11 = *(void *)(v6 + v10);
    unint64_t v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_9:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v4 += 8;
    unint64_t v7 = v4 + v10;
  }
  while (1)
  {
    unint64_t v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(_DWORD *)(*((void *)this + 172) + 4 * v13) == v3) {
      break;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_9;
    }
  }
  if (v13 == v8) {
    return 0;
  }
  if (!*(void *)(*((void *)this + 85) + 48 * v3 + 16)) {
    return 1;
  }
  if (~v3 <= v3) {
    int v15 = v3;
  }
  else {
    int v15 = ~v3;
  }
  uint64_t v16 = v15;
  uint64_t v17 = *((void *)this + 137);
  if (v15 >= (unint64_t)((*((void *)this + 138) - v17) >> 2) || *(_DWORD *)(v17 + 4 * v15) == v15)
  {
    uint64_t v18 = *((void *)this + 153);
    if (v15 >= (unint64_t)((*((void *)this + 154) - v18) >> 2)) {
      goto LABEL_24;
    }
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v15);
    int v15 = *(_DWORD *)(*((void *)this + 137) + 4 * v15);
    uint64_t v16 = v15;
    uint64_t v18 = *((void *)this + 153);
    if (v15 >= (unint64_t)((*((void *)this + 154) - v18) >> 2)) {
      goto LABEL_24;
    }
  }
  if (*(_DWORD *)(v18 + 4 * v16) != v15) {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v15);
  }
LABEL_24:
  google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 202);
  uint64_t v19 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Variable ", 9);
  unint64_t v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" was removed, yet it appears in some constraints!", 49);
  google::LogMessage::~LogMessage((google::LogMessage *)&__p);
  google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 204);
  unint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"affine relation = ", 18);
  int32x4_t v22 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" * X", 4);
  unint64_t v23 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" + ", 3);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)&__p);
  uint64_t v24 = (char **)(*((void *)this + 85) + 48 * v3);
  unint64_t v25 = v24[1];
  uint64_t v26 = *v24;
  if (**v24 <= -2)
  {
    do
    {
      unint64_t v27 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v26 = (void *)((char *)v26 + v27);
      v25 += 4 * v27;
    }
    while (*(char *)v26 < -1);
  }
  uint64_t v28 = &v24[3][(void)*v24];
  while (v26 != (void *)v28)
  {
    int v29 = *(_DWORD *)v25;
    google::LogMessage::LogMessage((google::LogMessage *)v38, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 207);
    uint64_t v30 = (void *)google::LogMessage::stream((google::LogMessage *)v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"constraint #", 12);
    uint64_t v31 = (void *)std::ostream::operator<<();
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" : ", 3);
    if ((v29 & 0x80000000) == 0) {
      google::protobuf::Message::ShortDebugString(&__p);
    }
    char v37 = 0;
    LOBYTE(__p) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)&__p, 0);
    if (v37 < 0)
    {
      operator delete(__p);
      google::LogMessage::~LogMessage((google::LogMessage *)v38);
      int v34 = *((char *)v26 + 1);
      uint64_t v26 = (void *)((char *)v26 + 1);
      v25 += 4;
      if (v34 <= -2)
      {
        do
        {
LABEL_35:
          unint64_t v35 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v26 = (void *)((char *)v26 + v35);
          v25 += 4 * v35;
        }
        while (*(char *)v26 < -1);
      }
    }
    else
    {
      google::LogMessage::~LogMessage((google::LogMessage *)v38);
      int v33 = *((char *)v26 + 1);
      uint64_t v26 = (void *)((char *)v26 + 1);
      v25 += 4;
      if (v33 <= -2) {
        goto LABEL_35;
      }
    }
  }
  return 1;
}

void sub_23CD4CA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD4CA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD4CA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD4CA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void operations_research::sat::PresolveContext::GetAffineRelation(operations_research::sat::PresolveContext *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  if (~a2 > a2) {
    a2 = ~a2;
  }
  unint64_t v6 = a2;
  uint64_t v7 = *((void *)this + 137);
  if (a2 >= (unint64_t)((*((void *)this + 138) - v7) >> 2) || *(_DWORD *)(v7 + 4 * a2) == a2)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 1;
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), a2);
    a2 = *(_DWORD *)(*((void *)this + 137) + 4 * v6);
    uint64_t v9 = *(void *)(*((void *)this + 140) + 8 * v6);
    uint64_t v8 = *(void *)(*((void *)this + 143) + 8 * v6);
    unint64_t v6 = a2;
  }
  *(_DWORD *)a3 = a2;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v8;
  uint64_t v10 = *((void *)this + 153);
  if (v6 >= (*((void *)this + 154) - v10) >> 2
    || *(_DWORD *)(v10 + 4 * v6) == a2
    || (operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), a2), uint64_t v11 = *(void *)(*((void *)this + 156) + 8 * v6), *(_DWORD *)a3 = *(_DWORD *)(*((void *)this + 153) + 4 * v6), v11 != -1))
  {
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    *(void *)(a3 + 8) = -v9;
    *(void *)(a3 + 16) = -v8;
    return;
  }
  uint64_t v9 = -v9;
  *(void *)(a3 + 8) = v9;
  if (v3 < 0) {
    goto LABEL_13;
  }
}

BOOL operations_research::sat::PresolveContext::VariableIsOnlyUsedInEncoding(operations_research::sat::PresolveContext *this, int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 83) - *((void *)this + 82)) >> 3) != *(_DWORD *)(*((void *)this + 6) + 48)) {
    return 0;
  }
  if (~a2 <= a2) {
    int v2 = a2;
  }
  else {
    int v2 = ~a2;
  }
  return *(void *)(*((void *)this + 85) + 48 * v2 + 16) == *(int *)(*((void *)this + 91) + 4 * v2);
}

void operations_research::sat::PresolveContext::DomainOf(operations_research::sat::PresolveContext *this@<X0>, const char *a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  if ((a2 & 0x80000000) != 0)
  {
    operations_research::Domain::Negation((operations_research::Domain *)(*((void *)this + 64) + 24 * ~a2), a2, &v12);
    unint64_t v10 = *a3;
    if (&v12 == a3)
    {
      if (v10) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v11 = (void **)(a3 + 1);
      if (v10) {
        operator delete(*v11);
      }
      *a3 = v12;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)__p;
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(*((void *)this + 64) + 24 * a2);
    if (v4 != (uint64_t *)a3)
    {
      uint64_t v5 = *v4;
      uint64_t v8 = (long long *)v4[1];
      unint64_t v6 = (long long *)(v4 + 1);
      uint64_t v7 = v8;
      if (v5) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = v6;
      }
      absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Assign<absl::lts_2020_02_25::inlined_vector_internal::IteratorValueAdapter<std::allocator<operations_research::ClosedInterval>,operations_research::ClosedInterval const*>>(a3, v9, v5 >> 1);
    }
  }
}

void sub_23CD4CCC4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)v1) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::PresolveContext::DomainContains(operations_research::sat::PresolveContext *this, unsigned int a2, uint64_t a3)
{
  if ((a2 & 0x80000000) != 0) {
    return operations_research::Domain::Contains((operations_research::Domain *)(*((void *)this + 64) + 24 * ~a2), -a3);
  }
  else {
    return operations_research::Domain::Contains((operations_research::Domain *)(*((void *)this + 64) + 24 * a2), a3);
  }
}

uint64_t operations_research::sat::PresolveContext::IntersectDomainWith(operations_research::sat::PresolveContext *this, const char *a2, const operations_research::Domain *a3, BOOL *a4)
{
  if (~a2 <= (int)a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = ~a2;
  }
  if ((a2 & 0x80000000) != 0)
  {
    operations_research::Domain::Negation(a3, a2, &v27);
    if (operations_research::Domain::IsIncludedIn((operations_research::Domain *)(*((void *)this + 64) + 24 * (int)v7), (const operations_research::Domain *)&v27))
    {
      if (v27) {
        operator delete(__p[0]);
      }
      return 1;
    }
    operations_research::Domain::IntersectionWith((void *)(*((void *)this + 64) + 24 * (int)v7), (const operations_research::Domain *)&v27, &v25);
    uint64_t v11 = (unint64_t *)(*((void *)this + 64) + 24 * (int)v7);
    if (v11 == &v25)
    {
      if (v25) {
        operator delete(v26[0]);
      }
    }
    else
    {
      unint64_t v12 = (void **)(v11 + 1);
      if (*(unsigned char *)v11) {
        operator delete(*v12);
      }
      *uint64_t v11 = v25;
      *(_OWORD *)unint64_t v12 = *(_OWORD *)v26;
    }
  }
  else
  {
    if (operations_research::Domain::IsIncludedIn((operations_research::Domain *)(*((void *)this + 64) + 24 * (int)v7), a3))return 1; {
    uint64_t v8 = 24 * (int)v7;
    }
    operations_research::Domain::IntersectionWith((void *)(*((void *)this + 64) + v8), a3, &v27);
    uint64_t v9 = (unint64_t *)(*((void *)this + 64) + v8);
    if (v9 != &v27)
    {
      unint64_t v10 = (void **)(v9 + 1);
      if (*(unsigned char *)v9) {
        operator delete(*v10);
      }
      *uint64_t v9 = v27;
      *(_OWORD *)unint64_t v10 = *(_OWORD *)__p;
      goto LABEL_19;
    }
  }
  if (v27) {
    operator delete(__p[0]);
  }
LABEL_19:
  if (a4) {
    *a4 = 1;
  }
  operations_research::SparseBitset<long long>::Set((void *)this + 31, (int)v7);
  if (!operations_research::Domain::IsEmpty((operations_research::Domain *)(*((void *)this + 64) + 24 * (int)v7)))
  {
    if (~v7 <= (int)v7) {
      int v14 = v7;
    }
    else {
      int v14 = ~v7;
    }
    uint64_t v15 = v14;
    uint64_t v16 = *((void *)this + 137);
    if (v14 >= (unint64_t)((*((void *)this + 138) - v16) >> 2) || *(_DWORD *)(v16 + 4 * v14) == v14)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 1;
      uint64_t v19 = *((void *)this + 153);
      if (v14 >= (unint64_t)((*((void *)this + 154) - v19) >> 2)) {
        goto LABEL_34;
      }
    }
    else
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v14);
      int v14 = *(_DWORD *)(*((void *)this + 137) + 4 * v14);
      uint64_t v18 = *(void *)(*((void *)this + 140) + 8 * v15);
      uint64_t v17 = *(void *)(*((void *)this + 143) + 8 * v15);
      uint64_t v15 = v14;
      uint64_t v19 = *((void *)this + 153);
      if (v14 >= (unint64_t)((*((void *)this + 154) - v19) >> 2)) {
        goto LABEL_34;
      }
    }
    if (*(_DWORD *)(v19 + 4 * v15) != v14)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v14);
      int v14 = *(_DWORD *)(*((void *)this + 153) + 4 * v15);
      if (*(void *)(*((void *)this + 156) + 8 * v15) == -1) {
        uint64_t v18 = -v18;
      }
    }
LABEL_34:
    if ((v7 & 0x80000000) == 0) {
      uint64_t v20 = v18;
    }
    else {
      uint64_t v20 = -v18;
    }
    if (v14 == v7) {
      return 1;
    }
    if ((v7 & 0x80000000) == 0) {
      uint64_t v17 = -v17;
    }
    operations_research::sat::PresolveContext::DomainOf(this, (const char *)v7, v24);
    operations_research::Domain::Domain(v23, v17);
    operations_research::Domain::AdditionWith((operations_research::Domain *)v24, (const operations_research::Domain *)v23, &v25, v22);
    operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v25, v20, &v27);
    uint64_t v13 = operations_research::sat::PresolveContext::IntersectDomainWith(this, v14, (const operations_research::Domain *)&v27, 0);
    if (v27)
    {
      operator delete(__p[0]);
      if ((v25 & 1) == 0)
      {
LABEL_44:
        if (((uint64_t)v23[0] & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_49;
      }
    }
    else if ((v25 & 1) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v26[0]);
    if (((uint64_t)v23[0] & 1) == 0)
    {
LABEL_45:
      if ((v24[0] & 1) == 0) {
        return v13;
      }
LABEL_50:
      operator delete((void *)v24[1]);
      return v13;
    }
LABEL_49:
    operator delete(v23[1]);
    if ((v24[0] & 1) == 0) {
      return v13;
    }
    goto LABEL_50;
  }
  uint64_t v13 = 0;
  *((unsigned char *)this + 504) = 1;
  return v13;
}

void sub_23CD4D05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15, void *a16, uint64_t a17, char a18, void *__p)
{
  if (a18)
  {
    operator delete(__p);
    if ((a15 & 1) == 0)
    {
LABEL_3:
      if ((a9 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 1) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a9 & 1) == 0)
  {
LABEL_4:
    if ((a12 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(exception_object);
LABEL_9:
    operator delete(a13);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a10);
  if ((a12 & 1) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t operations_research::sat::PresolveContext::SetLiteralToFalse(operations_research::sat::PresolveContext *this, unsigned int a2)
{
  if ((int)~a2 <= (int)a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = ~a2;
  }
  operations_research::Domain::Domain(v6, a2 >> 31);
  uint64_t v4 = operations_research::sat::PresolveContext::IntersectDomainWith(this, (const char *)v3, (const operations_research::Domain *)v6, 0);
  if ((uint64_t)v6[0]) {
    operator delete(v6[1]);
  }
  return v4;
}

void sub_23CD4D178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if (a10) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::PresolveContext::SetLiteralToTrue(operations_research::sat::PresolveContext *this, int a2)
{
  if (a2 > ~a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = ~a2;
  }
  operations_research::Domain::Domain(v6, a2 >= 0);
  uint64_t v4 = operations_research::sat::PresolveContext::IntersectDomainWith(this, (const char *)v3, (const operations_research::Domain *)v6, 0);
  if ((uint64_t)v6[0]) {
    operator delete(v6[1]);
  }
  return v4;
}

void sub_23CD4D200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if (a10) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PresolveContext::UpdateRuleStats(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 65))
  {
    if (*operations_research::sat::PresolveContext::UpdateRuleStats(std::string const&)::vlocal__[0] >= 1
      && (operations_research::sat::PresolveContext::UpdateRuleStats(std::string const&)::vlocal__[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)operations_research::sat::PresolveContext::UpdateRuleStats(std::string const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 287);
      google::LogMessage::stream((google::LogMessage *)v14);
      uint64_t v4 = (void *)std::ostream::operator<<();
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" : ", 3);
      int v6 = *(char *)(a2 + 23);
      if (v6 >= 0) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = *(void *)a2;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
      google::LogMessage::~LogMessage((google::LogMessage *)v14);
    }
    unint64_t v9 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::find_or_prepare_insert<std::string>((uint64_t *)(a1 + 72), (unsigned __int8 *)a2);
    unint64_t v10 = v9;
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 80) + 32 * v9;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(*(void *)(a1 + 80) + 32 * v9), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v13 = *(_OWORD *)a2;
        *(void *)(v12 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)uint64_t v12 = v13;
      }
      *(_DWORD *)(v12 + 24) = 0;
    }
    ++*(_DWORD *)(*(void *)(a1 + 80) + 32 * v10 + 24);
  }
  ++*(void *)(a1 + 120);
}

void sub_23CD4D364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::PresolveContext::AddVariableUsage(operations_research::sat::PresolveContext *this, int a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 6) + 56) + 8 * a2 + 8);
  operations_research::sat::UsedVariables((operations_research::sat *)v5, &v33);
  uint64_t v6 = *((void *)this + 82);
  uint64_t v7 = v6 + 24 * a2;
  uint64_t v8 = *(void **)v7;
  if (*(void *)v7)
  {
    *(void *)(v6 + 24 * (int)v4 + 8) = v8;
    operator delete(v8);
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  *(_OWORD *)uint64_t v7 = v33;
  *(void *)(v6 + 24 * v4 + 16) = v34;
  operations_research::sat::UsedIntervals((operations_research::sat *)v5, (unint64_t *)&v33);
  uint64_t v9 = *((void *)this + 94);
  uint64_t v10 = v9 + 24 * v4;
  char v11 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v9 + 24 * (int)v4 + 8) = v11;
    operator delete(v11);
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
  }
  uint64_t v32 = v4;
  *(_OWORD *)uint64_t v10 = v33;
  *(void *)(v10 + 16) = v34;
  uint64_t v12 = *((void *)this + 82) + 24 * v4;
  long long v13 = *(int **)v12;
  int v14 = *(int **)(v12 + 8);
  if (*(int **)v12 != v14)
  {
    unint64_t v15 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v4)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v4));
    do
    {
      uint64_t v19 = 0;
      unint64_t v21 = (void *)(*((void *)this + 85) + 48 * *v13);
      unint64_t v20 = (v15 >> 7) ^ (*v21 >> 12);
      uint64_t v22 = v21[3];
      while (1)
      {
        unint64_t v16 = v20 & v22;
        uint64_t v17 = *(void *)(*v21 + v16);
        unint64_t v18 = ((v17 ^ (0x101010101010101 * (v15 & 0x7F))) - 0x101010101010101) & ~(v17 ^ (0x101010101010101
                                                                                            * (v15 & 0x7F))) & 0x8080808080808080;
        if (v18) {
          break;
        }
LABEL_10:
        if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v21[1]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*((void *)this + 85) + 48 * *v13), v15)) = a2;
          goto LABEL_13;
        }
        v19 += 8;
        unint64_t v20 = v19 + v16;
      }
      while (*(_DWORD *)(v21[1] + 4 * ((v16 + (__clz(__rbit64(v18)) >> 3)) & v22)) != a2)
      {
        v18 &= v18 - 1;
        if (!v18) {
          goto LABEL_10;
        }
      }
LABEL_13:
      ++v13;
    }
    while (v13 != v14);
  }
  uint64_t v23 = *((void *)this + 94) + 24 * (int)v32;
  uint64_t v24 = *(int **)v23;
  unint64_t v25 = *(int **)(v23 + 8);
  if (v24 != v25)
  {
    uint64_t v26 = *((void *)this + 97);
    do
    {
      uint64_t v27 = *v24++;
      ++*(_DWORD *)(v26 + 4 * v27);
    }
    while (v24 != v25);
  }
  uint64_t v28 = *((void *)this + 88);
  uint64_t v29 = *(unsigned int *)(v28 + 4 * v32);
  if ((v29 & 0x80000000) == 0) {
    --*(_DWORD *)(*((void *)this + 91) + 4 * v29);
  }
  if (*(_DWORD *)(v5 + 60) == 12)
  {
    uint64_t v30 = *(void *)(v5 + 48);
    if (*(_DWORD *)(v30 + 16) == 1)
    {
      int v31 = **(_DWORD **)(v30 + 24);
      if (~v31 > v31) {
        int v31 = ~v31;
      }
      *(_DWORD *)(v28 + 4 * v32) = v31;
      ++*(_DWORD *)(*((void *)this + 91) + 4 * v31);
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::insert<int,0,0>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  uint64_t v9 = *a1;
  unint64_t v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v11 = a1[3];
  while (1)
  {
    unint64_t v12 = v10 & v11;
    uint64_t v13 = *(void *)(v9 + (v10 & v11));
    unint64_t v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(a1, v8);
      uint64_t v9 = *a1;
      uint64_t v15 = a1[1];
      *(_DWORD *)(v15 + 4 * result) = *a2;
      char v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    unint64_t v10 = v6 + v12;
  }
  uint64_t v15 = a1[1];
  while (1)
  {
    unint64_t result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 4 * result) == v7) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_6;
    }
  }
  char v17 = 0;
LABEL_10:
  *(void *)a3 = v9 + result;
  *(void *)(a3 + 8) = v15 + 4 * result;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

char **operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(char **this, int a2)
{
  int v69 = a2;
  if (!*((unsigned char *)this + 504))
  {
    int v2 = this;
    uint64_t v3 = a2;
    uint64_t v4 = *(operations_research::sat **)(*((void *)this[6] + 7) + 8 * a2 + 8);
    uint64_t v5 = (uint64_t)&this[94][24 * a2];
    uint64_t v6 = *(int **)v5;
    uint64_t v7 = *(int **)(v5 + 8);
    if (v6 != v7)
    {
      unint64_t v8 = this[97];
      do
      {
        uint64_t v9 = *v6++;
        --*(_DWORD *)&v8[4 * v9];
      }
      while (v6 != v7);
    }
    operations_research::sat::UsedIntervals(v4, (unint64_t *)v68);
    unint64_t v10 = v2[94];
    uint64_t v11 = &v10[24 * (int)v3];
    unint64_t v12 = *(void **)v11;
    if (*(void *)v11)
    {
      *(void *)&v10[24 * (int)v3 + 8] = v12;
      operator delete(v12);
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
    }
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v68;
    *(void *)&v10[24 * v3 + 16] = *(void *)&v68[16];
    uint64_t v13 = (uint64_t)&v2[94][24 * v3];
    unint64_t v14 = *(int **)v13;
    uint64_t v15 = *(int **)(v13 + 8);
    if (v14 != v15)
    {
      unint64_t v16 = v2[97];
      do
      {
        uint64_t v17 = *v14++;
        ++*(_DWORD *)&v16[4 * v17];
      }
      while (v14 != v15);
    }
    operations_research::sat::UsedVariables(v4, v68);
    unint64_t v18 = v2[168];
    if (v18)
    {
      v2[169] = v18;
      operator delete(v18);
    }
    uint64_t v19 = *(int **)v68;
    v2[168] = *(char **)v68;
    unint64_t v20 = *(int **)&v68[8];
    *(_OWORD *)(v2 + 169) = *(_OWORD *)&v68[8];
    unint64_t v21 = &v2[82][24 * (int)v3];
    uint64_t v22 = (*((void *)v21 + 1) - *(void *)v21) >> 2;
    uint64_t v23 = v20;
    uint64_t v64 = v3;
    __n128 v65 = v4;
    long long v63 = v2 + 168;
    LODWORD(v24) = 0;
    if (v19 != v20)
    {
      unint64_t v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v3));
      unint64_t v26 = v25 >> 7;
      unint64_t v66 = v25;
      uint64_t v27 = 0x101010101010101 * (v25 & 0x7F);
      int v28 = a2;
      while (1)
      {
        int v35 = *v19;
        if ((int)v24 >= (int)v22) {
          goto LABEL_47;
        }
        uint64_t v24 = (int)v24;
        while (2)
        {
          int v50 = *(_DWORD *)(*(void *)v21 + 4 * v24);
          if (v50 < v35)
          {
            uint64_t v40 = 0;
            uint64_t v51 = &v2[85][48 * v50];
            uint64_t v52 = *(void *)v51;
            unint64_t v41 = v26 ^ (*(void *)v51 >> 12);
            uint64_t v53 = *((void *)v51 + 3);
            while (1)
            {
              uint64_t v36 = v41 & v53;
              uint64_t v37 = *(void *)(v52 + (v41 & v53));
              unint64_t v38 = ((v37 ^ v27) - 0x101010101010101) & ~(v37 ^ v27) & 0x8080808080808080;
              if (v38) {
                break;
              }
LABEL_26:
              if ((v37 & (~v37 << 6) & 0x8080808080808080) != 0) {
                goto LABEL_39;
              }
              v40 += 8;
              unint64_t v41 = v40 + v36;
            }
            while (1)
            {
              unint64_t v39 = (v36 + (__clz(__rbit64(v38)) >> 3)) & v53;
              if (*(_DWORD *)(*((void *)v51 + 1) + 4 * v39) == v28) {
                break;
              }
              v38 &= v38 - 1;
              if (!v38) {
                goto LABEL_26;
              }
            }
            if (v39 == v53) {
              goto LABEL_39;
            }
            --*((void *)v51 + 2);
            unint64_t v42 = *(void *)(v52 + v39) & (~*(void *)(v52 + v39) << 6) & 0x8080808080808080;
            unint64_t v43 = *(void *)(v52 + ((v39 - 8) & v53)) & (~*(void *)(v52 + ((v39 - 8) & v53)) << 6) & 0x8080808080808080;
            if (!v43 || v42 == 0)
            {
              uint64_t v48 = 0;
              char v45 = -2;
            }
            else
            {
              unsigned int v46 = (__clz(v43) >> 3) + (__clz(__rbit64(v42)) >> 3);
              BOOL v47 = v46 >= 8;
              uint64_t v48 = v46 < 8;
              char v45 = v47 ? -2 : 0x80;
            }
            *(unsigned char *)(v52 + v39) = v45;
            *(unsigned char *)((*((void *)v51 + 3) & (v39 - 8)) + (*((void *)v51 + 3) & 7) + *(void *)v51 + 1) = v45;
            uint64_t v49 = *((void *)v51 + 4);
            *((void *)v51 + 5) += v48;
            if (!v49)
            {
LABEL_39:
              if (++v24 != v22) {
                continue;
              }
              goto LABEL_43;
            }
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 16), 1uLL, memory_order_relaxed);
            if (++v24 != v22) {
              continue;
            }
LABEL_43:
            LODWORD(v24) = v22;
            goto LABEL_47;
          }
          break;
        }
        if (v50 == v35)
        {
          LODWORD(v24) = v24 + 1;
          if (++v19 == v23) {
            break;
          }
        }
        else
        {
LABEL_47:
          uint64_t v32 = 0;
          uint64_t v54 = (uint64_t *)&v2[85][48 * v35];
          unint64_t v33 = v26 ^ ((unint64_t)*v54 >> 12);
          uint64_t v55 = v54[3];
          while (1)
          {
            unint64_t v29 = v33 & v55;
            uint64_t v30 = *(void *)(*v54 + v29);
            unint64_t v31 = ((v30 ^ v27) - 0x101010101010101) & ~(v30 ^ v27) & 0x8080808080808080;
            if (v31) {
              break;
            }
LABEL_17:
            if ((v30 & (~v30 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v34 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v54, v66);
              int v28 = a2;
              *(_DWORD *)(v54[1] + 4 * v34) = a2;
              goto LABEL_20;
            }
            v32 += 8;
            unint64_t v33 = v32 + v29;
          }
          while (*(_DWORD *)(v54[1] + 4 * ((v29 + (__clz(__rbit64(v31)) >> 3)) & v55)) != v28)
          {
            v31 &= v31 - 1;
            if (!v31) {
              goto LABEL_17;
            }
          }
LABEL_20:
          if (++v19 == v23) {
            break;
          }
        }
      }
    }
    int v56 = v22 - v24;
    uint64_t v57 = v64;
    if ((int)v22 > (int)v24)
    {
      uint64_t v58 = 4 * (int)v24;
      do
      {
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)&v2[85][48 * *(int *)(*(void *)v21 + v58)], &v69);
        v58 += 4;
        --v56;
      }
      while (v56);
      uint64_t v57 = v69;
    }
    this = (char **)&v2[82][24 * (int)v57];
    if (this != v63)
    {
      this = (char **)std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(this, *v63, v2[169], (v2[169] - *v63) >> 2);
      uint64_t v57 = v69;
    }
    long long v59 = v2[88];
    uint64_t v60 = *(unsigned int *)&v59[4 * v57];
    if ((v60 & 0x80000000) == 0) {
      --*(_DWORD *)&v2[91][4 * v60];
    }
    if (*((_DWORD *)v65 + 15) == 12)
    {
      uint64_t v61 = *((void *)v65 + 6);
      if (*(_DWORD *)(v61 + 16) == 1)
      {
        int v62 = **(_DWORD **)(v61 + 24);
        if (~v62 > v62) {
          int v62 = ~v62;
        }
        *(_DWORD *)&v59[4 * v57] = v62;
        ++*(_DWORD *)&v2[91][4 * v62];
      }
    }
  }
  return this;
}

void operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(operations_research::sat::PresolveContext *this)
{
  if (!*((unsigned char *)this + 504))
  {
    uint64_t v2 = *((void *)this + 83);
    uint64_t v3 = *((void *)this + 82);
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3);
    unint64_t v5 = *(int *)(*((void *)this + 6) + 48);
    __x[0] = v4;
    LODWORD(v22) = v5;
    if ((int)v5 < (int)v4) {
      google::MakeCheckOpString<int,int>((int)__x, (int)&v22, "old_size <= new_size");
    }
    if (v5 <= v4)
    {
      if (v5 < v4)
      {
        uint64_t v6 = v3 + 24 * (int)v5;
        if (v2 != v6)
        {
          uint64_t v7 = v2;
          do
          {
            uint64_t v9 = *(void **)(v7 - 24);
            v7 -= 24;
            unint64_t v8 = v9;
            if (v9)
            {
              *(void *)(v2 - 16) = v8;
              operator delete(v8);
            }
            uint64_t v2 = v7;
          }
          while (v7 != v6);
        }
        *((void *)this + 83) = v6;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 656, v5 - v4);
    }
    __x[0] = -1;
    uint64_t v10 = *((void *)this + 88);
    unint64_t v11 = (*((void *)this + 89) - v10) >> 2;
    if (v5 <= v11)
    {
      if (v5 < v11) {
        *((void *)this + 89) = v10 + 4 * v5;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 704), v5 - v11, __x);
    }
    uint64_t v12 = *((void *)this + 95);
    uint64_t v13 = *((void *)this + 94);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3);
    if (v5 <= v14)
    {
      if (v5 < v14)
      {
        uint64_t v15 = v13 + 24 * (int)v5;
        if (v12 != v15)
        {
          uint64_t v16 = *((void *)this + 95);
          do
          {
            unint64_t v18 = *(void **)(v16 - 24);
            v16 -= 24;
            uint64_t v17 = v18;
            if (v18)
            {
              *(void *)(v12 - 16) = v17;
              operator delete(v17);
            }
            uint64_t v12 = v16;
          }
          while (v16 != v15);
        }
        *((void *)this + 95) = v15;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 752, v5 - v14);
    }
    uint64_t v19 = *((void *)this + 97);
    unint64_t v20 = (*((void *)this + 98) - v19) >> 2;
    if (v5 <= v20)
    {
      if (v5 < v20) {
        *((void *)this + 98) = v19 + 4 * v5;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 776), v5 - v20);
    }
    if ((int)v5 > (int)v4)
    {
      do
      {
        operations_research::sat::PresolveContext::AddVariableUsage(this, v4);
        LODWORD(v4) = v4 + 1;
      }
      while (v5 != v4);
    }
  }
}

void sub_23CD4DE8C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::PresolveContext::AddRelation(operations_research::sat::PresolveContext *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5, operations_research::AffineRelation *a6)
{
  int v10 = (int)a2;
  if (a4 >= 0) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = -a4;
  }
  if (v11 != 1) {
    goto LABEL_25;
  }
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 421);
    unint64_t v29 = (void *)google::LogMessage::stream((google::LogMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: !VariableWasRemoved(x) ", 37);
    goto LABEL_31;
  }
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 422);
    uint64_t v30 = (void *)google::LogMessage::stream((google::LogMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: !VariableWasRemoved(y) ", 37);
LABEL_31:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v31);
  }
  uint64_t v14 = *((void *)a6 + 1);
  unint64_t v15 = (*((void *)a6 + 2) - v14) >> 2;
  if (v15 <= v10)
  {
    int v16 = v10;
  }
  else
  {
    int v16 = v10;
    if (*(_DWORD *)(v14 + 4 * v10) != v10)
    {
      operations_research::AffineRelation::CompressPath(a6, v10);
      uint64_t v14 = *((void *)a6 + 1);
      int v16 = *(_DWORD *)(v14 + 4 * v10);
      unint64_t v15 = (*((void *)a6 + 2) - v14) >> 2;
    }
  }
  int v17 = (int)a3;
  if (v15 > (int)a3)
  {
    int v17 = (int)a3;
    if (*(_DWORD *)(v14 + 4 * (int)a3) != a3)
    {
      operations_research::AffineRelation::CompressPath(a6, (int)a3);
      int v17 = *(_DWORD *)(*((void *)a6 + 1) + 4 * (int)a3);
    }
  }
  if (~v16 > v16) {
    int v16 = ~v16;
  }
  BOOL v19 = (operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v16), v13) & 0x8000000000000000) == 0
     && operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * v16), v18) < 2;
  if (~v17 > v17) {
    int v17 = ~v17;
  }
  if (operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v17), v18) < 0)
  {
    BOOL v21 = 0;
    if (v19) {
      goto LABEL_23;
    }
  }
  else
  {
    BOOL v21 = operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * v17), v20) < 2;
    if (v19 || v21)
    {
LABEL_23:
      uint64_t v22 = a6;
      int v23 = v10;
      int v24 = (int)a3;
      uint64_t v25 = a4;
      uint64_t v26 = a5;
      int v27 = v19;
      goto LABEL_26;
    }
  }
LABEL_25:
  uint64_t v22 = a6;
  int v23 = v10;
  int v24 = (int)a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  int v27 = 1;
  BOOL v21 = 1;
LABEL_26:

  return operations_research::AffineRelation::TryAdd(v22, v23, v24, v25, v26, v27, v21);
}

void sub_23CD4E0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD4E0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::AffineRelation::TryAdd(operations_research::AffineRelation *this, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  v32[0] = a4;
  int v33 = 0;
  if (!a4) {
    google::MakeCheckOpString<long long,int>((int)v32, (int)&v33, "coeff != 0");
  }
  LODWORD(v32[0]) = a2;
  LODWORD(v34) = a3;
  if (a2 == a3) {
    google::MakeCheckOpString<int,int>((int)v32, (int)&v34, "x != y");
  }
  LODWORD(v32[0]) = a2;
  LODWORD(v34) = 0;
  if (a2 < 0) {
    google::MakeCheckOpString<int,int>((int)v32, (int)&v34, "x >= 0");
  }
  LODWORD(v32[0]) = a3;
  LODWORD(v34) = 0;
  if (a3 < 0) {
    google::MakeCheckOpString<int,int>((int)v32, (int)&v34, "y >= 0");
  }
  if (a2 <= a3) {
    int v14 = a3;
  }
  else {
    int v14 = a2;
  }
  operations_research::AffineRelation::IncreaseSizeOfMemberVectors(this, v14 + 1);
  uint64_t v15 = *((void *)this + 10);
  int v16 = *(_DWORD *)this;
  LODWORD(v32[0]) = *(_DWORD *)(v15 + 4 * a2);
  LODWORD(v34) = v16;
  if (LODWORD(v32[0]) == v16) {
    google::MakeCheckOpString<int,int>((int)v32, (int)&v34, "size_[x] != kSizeForRemovedEntry");
  }
  LODWORD(v32[0]) = *(_DWORD *)(v15 + 4 * a3);
  LODWORD(v34) = v16;
  if (LODWORD(v32[0]) == v16) {
    google::MakeCheckOpString<int,int>((int)v32, (int)&v34, "size_[y] != kSizeForRemovedEntry");
  }
  operations_research::AffineRelation::CompressPath(this, a2);
  operations_research::AffineRelation::CompressPath(this, a3);
  uint64_t v17 = *((void *)this + 1);
  int v18 = *(_DWORD *)(v17 + 4 * a2);
  int v19 = *(_DWORD *)(v17 + 4 * a3);
  if (v18 == v19) {
    return 0;
  }
  uint64_t v21 = *((void *)this + 4);
  uint64_t v22 = *(void *)(v21 + 8 * a2);
  uint64_t v23 = *(void *)(v21 + 8 * a3) * a4;
  uint64_t v24 = *((void *)this + 7);
  uint64_t v25 = a5 + *(void *)(v24 + 8 * a3) * a4 - *(void *)(v24 + 8 * a2);
  if (a7 && !(v23 % v22))
  {
    BOOL v26 = v25 % v22 == 0;
    if (!a6)
    {
LABEL_20:
      BOOL v27 = 0;
      uint64_t v28 = v18;
      uint64_t v29 = v19;
      if (!v26) {
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v26 = 0;
    if (!a6) {
      goto LABEL_20;
    }
  }
  if (v22 % v23) {
    goto LABEL_20;
  }
  BOOL v27 = v25 % v23 == 0;
  uint64_t v28 = v18;
  uint64_t v29 = v19;
  if (!v26)
  {
LABEL_17:
    if (!v27) {
      return 0;
    }
    uint64_t v30 = *((void *)this + 10);
    goto LABEL_23;
  }
LABEL_21:
  uint64_t v30 = *((void *)this + 10);
  if (!v27 || *(_DWORD *)(v30 + 4 * a2) <= *(_DWORD *)(v30 + 4 * a3))
  {
    *(_DWORD *)(v17 + 4 * v28) = v19;
    *(_DWORD *)(v30 + 4 * v29) += *(_DWORD *)(v30 + 4 * v28);
    *(void *)(v21 + 8 * v28) = v23 / v22;
    uint64_t v31 = v25 / v22;
    goto LABEL_25;
  }
LABEL_23:
  *(_DWORD *)(v17 + 4 * v29) = v18;
  *(_DWORD *)(v30 + 4 * v28) += *(_DWORD *)(v30 + 4 * v29);
  *(void *)(v21 + 8 * v29) = v22 / v23;
  uint64_t v31 = -(v25 / v23);
  uint64_t v28 = v29;
LABEL_25:
  *(void *)(v24 + 8 * v28) = v31;
  ++*((_DWORD *)this + 1);
  return 1;
}

void sub_23CD4E4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD4E4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD4E4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD4E4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD4E4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD4E500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t operations_research::sat::PresolveContext::ExploitFixedDomain(operations_research::sat::PresolveContext *this, const char *a2)
{
  if ((a2 & 0x80000000) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 438);
    unint64_t v38 = (void *)google::LogMessage::stream((google::LogMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
    goto LABEL_38;
  }
  if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * a2), a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 439);
    unint64_t v39 = (void *)google::LogMessage::stream((google::LogMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: IsFixed(var) ", 27);
LABEL_38:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v41);
  }
  int v5 = operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * a2), v4);
  uint64_t v6 = 0;
  unint64_t result = (unint64_t)this + 848;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v5));
  unint64_t v9 = *((void *)this + 106);
  unint64_t v10 = (v8 >> 7) ^ (v9 >> 12);
  uint64_t v11 = *((void *)this + 109);
  uint64_t v12 = 0x101010101010101 * (v8 & 0x7F);
  uint64_t v13 = *((void *)this + 107);
  for (unint64_t i = v10; ; unint64_t i = v6 + v15)
  {
    unint64_t v15 = i & v11;
    uint64_t v16 = *(void *)(v9 + v15);
    unint64_t v17 = ((v16 ^ v12) - 0x101010101010101) & ~(v16 ^ v12) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_7:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_10;
    }
    v6 += 8;
  }
  while (1)
  {
    unint64_t v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v11;
    if (*(void *)(v13 + 16 * v18) == v5) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_7;
    }
  }
  if (v18 != v11)
  {
    for (j = 0; ; unint64_t v10 = j + v25)
    {
      unint64_t v25 = v10 & v11;
      uint64_t v26 = *(void *)(v9 + (v10 & v11));
      unint64_t v27 = ((v26 ^ v12) - 0x101010101010101) & ~(v26 ^ v12) & 0x8080808080808080;
      if (v27) {
        break;
      }
LABEL_20:
      if ((v26 & (~v26 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v28 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert((uint64_t *)result, v8);
        uint64_t v13 = *((void *)this + 107);
        uint64_t v30 = v13 + 16 * v28;
        *(void *)uint64_t v30 = v5;
        *(_DWORD *)(v30 + 8) = 0;
        goto LABEL_26;
      }
      j += 8;
    }
    while (1)
    {
      unint64_t v28 = (v25 + (__clz(__rbit64(v27)) >> 3)) & v11;
      if (*(void *)(v13 + 16 * v28) == v5) {
        break;
      }
      v27 &= v27 - 1;
      if (!v27) {
        goto LABEL_20;
      }
    }
LABEL_26:
    unint64_t result = operations_research::sat::PresolveContext::GetVariableRepresentative(this, *(_DWORD *)(v13 + 16 * v28 + 8));
    unint64_t v31 = result;
    if ((result & 0x80000000) != 0)
    {
      uint64_t v37 = (const char *)~result;
      if (v37 == a2)
      {
        v41[0] = v5;
        LODWORD(v40) = 0;
        if (v5) {
          google::MakeCheckOpString<int,int>((int)v41, (int)&v40, "min == 0");
        }
        return result;
      }
      operations_research::sat::PresolveContext::AddRelation(this, a2, v37, -1, 0, (operations_research::sat::PresolveContext *)((char *)this + 1088));
      uint64_t v32 = (operations_research::sat::PresolveContext *)((char *)this + 1216);
      int v33 = this;
      uint64_t v34 = a2;
      int v35 = v37;
      uint64_t v36 = -1;
    }
    else
    {
      if (result == a2) {
        return result;
      }
      operations_research::sat::PresolveContext::AddRelation(this, a2, (const char *)result, 1, 0, (operations_research::sat::PresolveContext *)((char *)this + 1088));
      uint64_t v32 = (operations_research::sat::PresolveContext *)((char *)this + 1216);
      int v33 = this;
      uint64_t v34 = a2;
      int v35 = (const char *)v31;
      uint64_t v36 = 1;
    }
    return operations_research::sat::PresolveContext::AddRelation(v33, v34, v35, v36, 0, v32);
  }
LABEL_10:
  for (k = 0; ; unint64_t v10 = k + v20)
  {
    unint64_t v20 = v10 & v11;
    uint64_t v21 = *(void *)(v9 + (v10 & v11));
    unint64_t v22 = ((v21 ^ v12) - 0x101010101010101) & ~(v21 ^ v12) & 0x8080808080808080;
    if (v22) {
      break;
    }
LABEL_14:
    if ((v21 & (~v21 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert((uint64_t *)result, v8);
      unint64_t v23 = result;
      uint64_t v13 = *((void *)this + 107);
      uint64_t v29 = v13 + 16 * result;
      *(void *)uint64_t v29 = v5;
      *(_DWORD *)(v29 + 8) = 0;
      goto LABEL_23;
    }
    k += 8;
  }
  while (1)
  {
    unint64_t v23 = (v20 + (__clz(__rbit64(v22)) >> 3)) & v11;
    if (*(void *)(v13 + 16 * v23) == v5) {
      break;
    }
    v22 &= v22 - 1;
    if (!v22) {
      goto LABEL_14;
    }
  }
LABEL_23:
  *(_DWORD *)(v13 + 16 * v23 + 8) = a2;
  return result;
}

void sub_23CD4E8B8(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD4E8C0(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD4E8C8(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::PresolveContext::PropagateAffineRelation(operations_research::sat::PresolveContext *this, int a2)
{
  if (~a2 <= a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = ~a2;
  }
  if (~v3 <= (int)v3) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = ~v3;
  }
  uint64_t v5 = (int)v4;
  uint64_t v6 = *((void *)this + 137);
  if ((int)v4 >= (unint64_t)((*((void *)this + 138) - v6) >> 2)
    || *(_DWORD *)(v6 + 4 * (int)v4) == v4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 1;
    uint64_t v9 = *((void *)this + 153);
    if ((int)v4 >= (unint64_t)((*((void *)this + 154) - v9) >> 2)) {
      goto LABEL_15;
    }
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v4);
    unint64_t v4 = *(unsigned int *)(*((void *)this + 137) + 4 * (int)v4);
    uint64_t v8 = *(void *)(*((void *)this + 140) + 8 * v5);
    uint64_t v7 = *(void *)(*((void *)this + 143) + 8 * v5);
    uint64_t v5 = (int)v4;
    uint64_t v9 = *((void *)this + 153);
    if ((int)v4 >= (unint64_t)((*((void *)this + 154) - v9) >> 2)) {
      goto LABEL_15;
    }
  }
  if (*(_DWORD *)(v9 + 4 * v5) != v4)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v4);
    unint64_t v4 = *(unsigned int *)(*((void *)this + 153) + 4 * v5);
    if (*(void *)(*((void *)this + 156) + 8 * v5) == -1) {
      uint64_t v8 = -v8;
    }
  }
LABEL_15:
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v10 = v7;
  }
  else
  {
    uint64_t v8 = -v8;
    uint64_t v10 = -v7;
  }
  if (v4 != v3)
  {
    operations_research::sat::PresolveContext::DomainOf(this, (const char *)v3, &v18);
    operations_research::Domain::Domain(&v16, -v10);
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v18, (const operations_research::Domain *)&v16, &v20, v12);
    operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v20, v8, &v22);
    char v13 = operations_research::sat::PresolveContext::IntersectDomainWith(this, (const char *)v4, (const operations_research::Domain *)&v22, 0);
    if (v22)
    {
      operator delete(__p);
      if ((v20 & 1) == 0)
      {
LABEL_22:
        if ((v16 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }
    }
    else if ((v20 & 1) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v21);
    if ((v16 & 1) == 0)
    {
LABEL_23:
      if ((v18 & 1) == 0) {
        goto LABEL_24;
      }
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v17);
    if ((v18 & 1) == 0)
    {
LABEL_24:
      if (v13) {
        goto LABEL_25;
      }
      return 0;
    }
LABEL_33:
    operator delete(v19);
    if (v13)
    {
LABEL_25:
      operations_research::sat::PresolveContext::DomainOf(this, (const char *)v4, &v18);
      operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v18, 0, v8, &v20);
      operations_research::Domain::Domain(&v16, v10);
      operations_research::Domain::AdditionWith((operations_research::Domain *)&v20, (const operations_research::Domain *)&v16, &v22, v14);
      uint64_t v11 = operations_research::sat::PresolveContext::IntersectDomainWith(this, (const char *)v3, (const operations_research::Domain *)&v22, 0);
      if (v22)
      {
        operator delete(__p);
        if ((v16 & 1) == 0)
        {
LABEL_27:
          if ((v20 & 1) == 0) {
            goto LABEL_28;
          }
          goto LABEL_37;
        }
      }
      else if ((v16 & 1) == 0)
      {
        goto LABEL_27;
      }
      operator delete(v17);
      if ((v20 & 1) == 0)
      {
LABEL_28:
        if ((v18 & 1) == 0) {
          return v11;
        }
        goto LABEL_38;
      }
LABEL_37:
      operator delete(v21);
      if ((v18 & 1) == 0) {
        return v11;
      }
LABEL_38:
      operator delete(v19);
      return v11;
    }
    return 0;
  }
  return 1;
}

void sub_23CD4EB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15, void *a16, uint64_t a17, char a18, void *__p)
{
  if (a18)
  {
    operator delete(__p);
    if ((a9 & 1) == 0)
    {
LABEL_3:
      if ((a15 & 1) == 0)
      {
LABEL_8:
        if (a12) {
          operator delete(a13);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a9 & 1) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a15 & 1) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t operations_research::sat::PresolveContext::RemoveAllVariablesFromAffineRelationConstraint(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 680);
  for (unint64_t i = *(uint64_t **)(this + 688); v1 != i; v1 += 6)
    this = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>(v1, operations_research::sat::kAffineRelationConstraint);
  return this;
}

void operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(operations_research::sat::PresolveContext *this, const char *a2)
{
  unint64_t v4 = (operations_research::sat::PresolveContext *)((char *)this + 1088);
  if (~a2 <= (int)a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = ~a2;
  }
  uint64_t v6 = (int)v5;
  uint64_t v7 = *((void *)this + 137);
  unint64_t v8 = (int)v5;
  int v9 = v5;
  if ((int)v5 < (unint64_t)((*((void *)this + 138) - v7) >> 2))
  {
    unint64_t v8 = (int)v5;
    int v9 = v5;
    if (*(_DWORD *)(v7 + 4 * (int)v5) != v5)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v5);
      int v9 = *(_DWORD *)(*((void *)this + 137) + 4 * (int)v5);
      unint64_t v8 = v9;
    }
  }
  uint64_t v10 = *((void *)this + 153);
  if (v8 < (*((void *)this + 154) - v10) >> 2 && *(_DWORD *)(v10 + 4 * v8) != v9)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v9);
    int v9 = *(_DWORD *)(*((void *)this + 153) + 4 * v8);
  }
  if ((a2 & 0x80000000) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v60, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 495);
    uint64_t v58 = (void *)google::LogMessage::stream((google::LogMessage *)v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
LABEL_35:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v60);
  }
  LODWORD(v60[0]) = a2;
  LODWORD(v59[0]) = v9;
  if (v9 == a2) {
    google::MakeCheckOpString<int,int>((int)v60, (int)v59, "var != rep");
  }
  uint64_t v11 = *((void *)this + 85);
  v60[0] = *(void *)(v11 + 48 * a2 + 16);
  v61[0] = 1;
  if (v60[0] != 1) {
    google::MakeCheckOpString<unsigned long,int>((int)v60, (int)v61, "var_to_constraints_[var].size() == 1");
  }
  uint64_t v12 = 0;
  char v13 = (void *)(v11 + 48 * a2);
  unint64_t v14 = ((((unint64_t)&off_264E82C18 + 6) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 6));
  unint64_t v15 = v14 >> 7;
  unint64_t v16 = (v14 >> 7) ^ (*v13 >> 12);
  uint64_t v17 = 0x101010101010101 * (v14 & 0x7F);
  uint64_t v18 = v13[3];
  while (1)
  {
    uint64_t v19 = v16 & v18;
    uint64_t v20 = *(void *)(*v13 + v19);
    unint64_t v21 = ((v20 ^ v17) - 0x101010101010101) & ~(v20 ^ v17) & 0x8080808080808080;
    if (v21) {
      break;
    }
LABEL_17:
    if ((v20 & (~v20 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_33;
    }
    v12 += 8;
    unint64_t v16 = v12 + v19;
  }
  while (1)
  {
    unint64_t v22 = (v19 + (__clz(__rbit64(v21)) >> 3)) & v18;
    if (*(_DWORD *)(v13[1] + 4 * v22) == -2) {
      break;
    }
    v21 &= v21 - 1;
    if (!v21) {
      goto LABEL_17;
    }
  }
  if (v22 == v18)
  {
LABEL_33:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v60, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 498);
    unint64_t v39 = (void *)google::LogMessage::stream((google::LogMessage *)v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: var_to_constraints_[var].contains(kAffineRelationConstraint) ", 75);
    goto LABEL_35;
  }
  uint64_t v23 = 0;
  uint64_t v24 = (void *)(v11 + 48 * v9);
  uint64_t v25 = v15 ^ (*v24 >> 12);
  uint64_t v26 = v24[3];
  while (1)
  {
    uint64_t v27 = v25 & v26;
    uint64_t v28 = *(void *)(*v24 + v27);
    unint64_t v29 = ((v28 ^ v17) - 0x101010101010101) & ~(v28 ^ v17) & 0x8080808080808080;
    if (v29) {
      break;
    }
LABEL_24:
    if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_34;
    }
    v23 += 8;
    uint64_t v25 = v23 + v27;
  }
  while (1)
  {
    unint64_t v30 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v26;
    if (*(_DWORD *)(v24[1] + 4 * v30) == -2) {
      break;
    }
    v29 &= v29 - 1;
    if (!v29) {
      goto LABEL_24;
    }
  }
  if (v30 == v26)
  {
LABEL_34:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v60, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 499);
    uint64_t v40 = (void *)google::LogMessage::stream((google::LogMessage *)v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: var_to_constraints_[rep].contains(kAffineRelationConstraint) ", 75);
    goto LABEL_35;
  }
  uint64_t v31 = 0;
  unint64_t v32 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v5)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + (int)v5));
  unint64_t v33 = *((void *)this + 171);
  unint64_t v34 = (v33 >> 12) ^ (v32 >> 7);
  uint64_t v35 = *((void *)this + 174);
  while (1)
  {
    unint64_t v36 = v34 & v35;
    uint64_t v37 = *(void *)(v33 + v36);
    unint64_t v38 = ((v37 ^ (0x101010101010101 * (v32 & 0x7F))) - 0x101010101010101) & ~(v37 ^ (0x101010101010101
                                                                                        * (v32 & 0x7F))) & 0x8080808080808080;
    if (v38) {
      break;
    }
LABEL_31:
    if ((v37 & (~v37 << 6) & 0x8080808080808080) != 0)
    {
      *(_DWORD *)(*((void *)this + 172)
                + 4
                * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)this + 171, v32)) = v5;
      uint64_t v11 = *((void *)this + 85);
      goto LABEL_37;
    }
    v31 += 8;
    unint64_t v34 = v31 + v36;
  }
  while (*(_DWORD *)(*((void *)this + 172) + 4 * ((v36 + (__clz(__rbit64(v38)) >> 3)) & v35)) != v5)
  {
    v38 &= v38 - 1;
    if (!v38) {
      goto LABEL_31;
    }
  }
LABEL_37:
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(v11 + 48 * a2), operations_research::sat::kAffineRelationConstraint);
  operations_research::AffineRelation::IgnoreFromClassSize(v4, (int)a2);
  operations_research::AffineRelation::IgnoreFromClassSize((operations_research::sat::PresolveContext *)((char *)this + 1216), (int)a2);
  uint64_t v41 = *((void *)this + 137);
  if (v9 >= (unint64_t)((*((void *)this + 138) - v41) >> 2)) {
    goto LABEL_41;
  }
  int v42 = *(_DWORD *)(v41 + 4 * v9);
  uint64_t v43 = v9;
  if (v42 != v9)
  {
    operations_research::AffineRelation::CompressPath(v4, v9);
    uint64_t v43 = *(int *)(*((void *)this + 137) + 4 * v9);
  }
  if (*(_DWORD *)(*((void *)this + 146) + 4 * v43) == 1)
  {
LABEL_41:
    uint64_t v44 = *((void *)this + 153);
    if (v9 >= (unint64_t)((*((void *)this + 154) - v44) >> 2)) {
      goto LABEL_45;
    }
    int v45 = *(_DWORD *)(v44 + 4 * v9);
    uint64_t v46 = v9;
    if (v45 != v9)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v9);
      uint64_t v46 = *(int *)(*((void *)this + 153) + 4 * v9);
    }
    if (*(_DWORD *)(*((void *)this + 162) + 4 * v46) == 1) {
LABEL_45:
    }
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((void *)this + 85) + 48 * v9), operations_research::sat::kAffineRelationConstraint);
  }
  if (*operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(int)::vlocal__ >= 2
    && (operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(int)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(int)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)2)))
  {
    uint64_t v47 = *((void *)this + 137);
    if ((int)v5 >= (unint64_t)((*((void *)this + 138) - v47) >> 2)
      || *(_DWORD *)(v47 + 4 * (int)v5) == v5)
    {
      uint64_t v48 = *((void *)this + 153);
      if ((int)v5 >= (unint64_t)((*((void *)this + 154) - v48) >> 2)) {
        goto LABEL_56;
      }
    }
    else
    {
      operations_research::AffineRelation::CompressPath(v4, v5);
      unint64_t v5 = *(unsigned int *)(*((void *)this + 137) + 4 * (int)v5);
      uint64_t v6 = (int)v5;
      uint64_t v48 = *((void *)this + 153);
      if ((int)v5 >= (unint64_t)((*((void *)this + 154) - v48) >> 2))
      {
LABEL_56:
        google::LogMessage::LogMessage((google::LogMessage *)v61, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 517);
        uint64_t v49 = (void *)google::LogMessage::stream((google::LogMessage *)v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Removing affine relation for ", 29);
        int v50 = (void *)std::ostream::operator<<();
        uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" : ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, a2, v60);
        uint64_t v52 = operations_research::operator<<(v51, v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" =  ", 4);
        uint64_t v53 = (void *)std::ostream::operator<<();
        uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" * ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, (const char *)v5, v59);
        uint64_t v55 = operations_research::operator<<(v54, v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" + ", 3);
        int v56 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(rep : ", 9);
        uint64_t v57 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)").", 2);
        if (v59[0]) {
          operator delete((void *)v59[1]);
        }
        if (v60[0]) {
          operator delete((void *)v60[1]);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v61);
        return;
      }
    }
    if (*(_DWORD *)(v48 + 4 * v6) != v5)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v5);
      unint64_t v5 = *(unsigned int *)(*((void *)this + 153) + 4 * v6);
    }
    goto LABEL_56;
  }
}

void sub_23CD4F3C0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD4F3C8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD4F3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, char a12, void *__p, uint64_t a14, char a15)
{
  if ((a12 & 1) == 0)
  {
    google::LogMessage::~LogMessage((google::LogMessage *)&a15);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  google::LogMessage::~LogMessage((google::LogMessage *)&a15);
  _Unwind_Resume(a1);
}

void sub_23CD4F464(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD4F46C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD4F474(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::AffineRelation::IgnoreFromClassSize(operations_research::AffineRelation *this, int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *((void *)this + 10);
  if (a2 < (unint64_t)((*((void *)this + 11) - v4) >> 2))
  {
    int v6 = *(_DWORD *)this;
    v11[0] = *(_DWORD *)(v4 + 4 * a2);
    LODWORD(v12) = v6;
    if (v11[0] == v6) {
      google::MakeCheckOpString<int,int>((int)v11, (int)&v12, "size_[x] != kSizeForRemovedEntry");
    }
    uint64_t v7 = *((void *)this + 1);
    if (a2 >= (unint64_t)((*((void *)this + 2) - v7) >> 2)
      || *(_DWORD *)(v7 + 4 * a2) == a2
      || (operations_research::AffineRelation::CompressPath(this, a2),
          uint64_t v8 = *(int *)(*((void *)this + 1) + 4 * v3),
          v8 == a2))
    {
      uint64_t v9 = *((void *)this + 10);
      v11[0] = *(_DWORD *)(v9 + 4 * v3);
      int v13 = 1;
      if (v11[0] != 1) {
        google::MakeCheckOpString<int,int>((int)v11, (int)&v13, "size_[r] == 1");
      }
    }
    else
    {
      uint64_t v9 = *((void *)this + 10);
      int v10 = *(_DWORD *)(v9 + 4 * v8);
      v11[0] = v10;
      LODWORD(v12) = 1;
      if (v10 < 2) {
        google::MakeCheckOpString<int,int>((int)v11, (int)&v12, "size_[r] > 1");
      }
      *(_DWORD *)(v9 + 4 * v8) = v10 - 1;
    }
    *(_DWORD *)(v9 + 4 * v3) = *(_DWORD *)this;
  }
}

void sub_23CD4F648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD4F650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD4F658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL operations_research::sat::PresolveContext::StoreAffineRelation(operations_research::sat::PresolveContext *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  v96[0] = a4;
  v93[0] = 0;
  if (!a4) {
    google::MakeCheckOpString<long long,int>((int)v96, (int)v93, "coeff != 0");
  }
  if (*((unsigned char *)this + 504)) {
    return 0;
  }
  if (!operations_research::sat::PresolveContext::PropagateAffineRelation(this, (int)a2)
    || !operations_research::sat::PresolveContext::PropagateAffineRelation(this, (int)a3))
  {
    return 1;
  }
  if (~a2 <= (int)a2) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = ~a2;
  }
  unint64_t v90 = (const char *)v12;
  if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * (int)v12), v11))
  {
    operations_research::sat::PresolveContext::DomainOf(this, a2, v96);
    uint64_t v15 = operations_research::Domain::Min((operations_research::Domain *)v96, v14) - a5;
    if (v96[0]) {
      operator delete((void *)v96[1]);
    }
    if (a4 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = -a4;
    }
    if (v15 % v16) {
      goto LABEL_16;
    }
    operations_research::Domain::Domain(v96, v15 / a4);
    operations_research::sat::PresolveContext::IntersectDomainWith(this, a3, (const operations_research::Domain *)v96, 0);
    if (v96[0]) {
      operator delete((void *)v96[1]);
    }
    std::string::basic_string[abi:ne180100]<0>(v96, "affine: fixed");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
    goto LABEL_32;
  }
  if (~a3 <= (int)a3) {
    unint64_t v17 = a3;
  }
  else {
    unint64_t v17 = ~a3;
  }
  uint64_t v89 = (const char *)v17;
  if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * (int)v17), v13))
  {
    operations_research::sat::PresolveContext::DomainOf(this, a3, v96);
    uint64_t v19 = a5 + operations_research::Domain::Min((operations_research::Domain *)v96, v18) * a4;
    if (v96[0]) {
      operator delete((void *)v96[1]);
    }
    operations_research::Domain::Domain(v96, v19);
    operations_research::sat::PresolveContext::IntersectDomainWith(this, a2, (const operations_research::Domain *)v96, 0);
    if (v96[0]) {
      operator delete((void *)v96[1]);
    }
    char v97 = 13;
    strcpy((char *)v96, "affine: fixed");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
LABEL_32:
    if ((v97 & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v26 = (void *)v96[0];
LABEL_34:
    operator delete(v26);
    return 1;
  }
  unint64_t v20 = (int)v90;
  uint64_t v88 = (operations_research::sat::PresolveContext *)((char *)this + 1088);
  uint64_t v21 = *((void *)this + 137);
  if ((int)v90 >= (unint64_t)((*((void *)this + 138) - v21) >> 2)
    || *(_DWORD *)(v21 + 4 * (int)v90) == v90)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 1;
    unint64_t v24 = (int)v90;
    uint64_t v25 = v90;
  }
  else
  {
    operations_research::AffineRelation::CompressPath(v88, (int)v90);
    uint64_t v21 = *((void *)this + 137);
    uint64_t v25 = (const char *)*(unsigned int *)(v21 + 4 * (int)v90);
    uint64_t v23 = *(void *)(*((void *)this + 140) + 8 * (int)v90);
    uint64_t v22 = *(void *)(*((void *)this + 143) + 8 * (int)v90);
    unint64_t v24 = (int)v25;
  }
  uint64_t v27 = v89;
  unint64_t v28 = (int)v89;
  long long v87 = (operations_research::sat::PresolveContext *)((char *)this + 1216);
  uint64_t v29 = *((void *)this + 153);
  if (v24 < (*((void *)this + 154) - v29) >> 2 && *(_DWORD *)(v29 + 4 * v24) != v25)
  {
    operations_research::AffineRelation::CompressPath(v87, (int)v25);
    unint64_t v28 = (int)v89;
    uint64_t v27 = v89;
    uint64_t v29 = *((void *)this + 153);
    uint64_t v25 = (const char *)*(unsigned int *)(v29 + 4 * v24);
    if (*(void *)(*((void *)this + 156) + 8 * v24) == -1) {
      uint64_t v23 = -v23;
    }
    uint64_t v21 = *((void *)this + 137);
  }
  if ((int)a2 >= 0) {
    uint64_t v30 = v23;
  }
  else {
    uint64_t v30 = -v23;
  }
  if ((int)a2 >= 0) {
    uint64_t v31 = v22;
  }
  else {
    uint64_t v31 = -v22;
  }
  if (v28 >= (*((void *)this + 138) - v21) >> 2 || *(_DWORD *)(v21 + 4 * v28) == v27)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 1;
    unint64_t v34 = v28;
    int v35 = (int)v27;
  }
  else
  {
    unint64_t v36 = v28;
    uint64_t v37 = v25;
    uint64_t v38 = v31;
    uint64_t v39 = v30;
    operations_research::AffineRelation::CompressPath(v88, (int)v89);
    uint64_t v30 = v39;
    uint64_t v31 = v38;
    uint64_t v25 = v37;
    unint64_t v28 = v36;
    uint64_t v27 = v89;
    int v35 = *(_DWORD *)(*((void *)this + 137) + 4 * v36);
    uint64_t v33 = *(void *)(*((void *)this + 140) + 8 * v36);
    uint64_t v32 = *(void *)(*((void *)this + 143) + 8 * v36);
    unint64_t v34 = v35;
    uint64_t v29 = *((void *)this + 153);
  }
  if (v34 < (*((void *)this + 154) - v29) >> 2 && *(_DWORD *)(v29 + 4 * v34) != v35)
  {
    unint64_t v85 = v28;
    uint64_t v84 = v31;
    uint64_t v40 = v30;
    operations_research::AffineRelation::CompressPath(v87, v35);
    uint64_t v30 = v40;
    uint64_t v31 = v84;
    unint64_t v20 = (int)v90;
    unint64_t v28 = v85;
    uint64_t v27 = v89;
    int v35 = *(_DWORD *)(*((void *)this + 153) + 4 * v34);
    if (*(void *)(*((void *)this + 156) + 8 * v34) == -1) {
      uint64_t v33 = -v33;
    }
  }
  if ((int)a3 < 0)
  {
    uint64_t v33 = -v33;
    uint64_t v32 = -v32;
  }
  if (v25 != v35)
  {
    unint64_t v43 = v20;
    unint64_t v86 = v28;
    int v94 = (int)v27;
    int v95 = (int)v90;
    if ((int)a2 >= 0) {
      uint64_t v44 = a5;
    }
    else {
      uint64_t v44 = -a5;
    }
    if ((int)a2 >= 0 != (int)a3 >= 0) {
      uint64_t v45 = -a4;
    }
    else {
      uint64_t v45 = a4;
    }
    int v46 = operations_research::sat::PresolveContext::AddRelation(this, v90, v27, v45, v44, v88);
    BOOL v48 = v45 == 1 || v45 == -1;
    if (v44 || !v48)
    {
      if (!v46) {
        goto LABEL_78;
      }
    }
    else if (((v46 | operations_research::sat::PresolveContext::AddRelation(this, v90, v89, v45, 0, v87)) & 1) == 0)
    {
LABEL_78:
      std::string::basic_string[abi:ne180100]<0>(v96, "affine: incompatible relation");
      operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
      if (v97 < 0) {
        operator delete((void *)v96[0]);
      }
      if (*operations_research::sat::PresolveContext::StoreAffineRelation(int,int,long long,long long)::vlocal__[0] < 1) {
        return 0;
      }
      if (operations_research::sat::PresolveContext::StoreAffineRelation(int,int,long long,long long)::vlocal__[0] != &google::kLogSiteUninitialized
        || (BOOL result = google::InitVLOG3__((google *)operations_research::sat::PresolveContext::StoreAffineRelation(int,int,long long,long long)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 626);
        uint64_t v49 = (void *)google::LogMessage::stream((google::LogMessage *)v93);
        int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Cannot add relation ", 20);
        operations_research::sat::PresolveContext::DomainOf(this, a2, v96);
        uint64_t v51 = operations_research::operator<<(v50, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" = ", 3);
        uint64_t v52 = (void *)std::ostream::operator<<();
        uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" * ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, a3, &v91);
        uint64_t v54 = operations_research::operator<<(v53, &v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" + ", 3);
        uint64_t v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" because of incompatibilities with existing relation: ", 54);
        if (v91) {
          operator delete(v92);
        }
        if (v96[0]) {
          operator delete((void *)v96[1]);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v93);
        uint64_t v56 = *((void *)this + 137);
        if (v43 < (*((void *)this + 138) - v56) >> 2 && *(_DWORD *)(v56 + 4 * v43) != v90)
        {
          operations_research::AffineRelation::CompressPath(v88, (int)v90);
          __n128 v67 = (const char *)*(unsigned int *)(*((void *)this + 137) + 4 * v43);
          unint64_t v43 = (int)v67;
          unint64_t v90 = v67;
        }
        uint64_t v68 = *((void *)this + 153);
        if (v43 < (*((void *)this + 154) - v68) >> 2 && *(_DWORD *)(v68 + 4 * v43) != v90)
        {
          operations_research::AffineRelation::CompressPath(v87, (int)v90);
          unint64_t v90 = (const char *)*(unsigned int *)(*((void *)this + 153) + 4 * v43);
        }
        google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 631);
        int v69 = (void *)google::LogMessage::stream((google::LogMessage *)v93);
        operations_research::sat::PresolveContext::DomainOf(this, a2, v96);
        uint64_t v70 = operations_research::operator<<(v69, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" =  ", 4);
        long long v71 = (void *)std::ostream::operator<<();
        uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" * ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, v90, &v91);
        uint64_t v73 = operations_research::operator<<(v72, &v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" + ", 3);
        std::ostream::operator<<();
        if (v91) {
          operator delete(v92);
        }
        if (v96[0]) {
          operator delete((void *)v96[1]);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v93);
        uint64_t v74 = *((void *)this + 137);
        unint64_t v75 = v86;
        if (v86 >= (*((void *)this + 138) - v74) >> 2)
        {
          long long v76 = v89;
        }
        else
        {
          long long v76 = v89;
          if (*(_DWORD *)(v74 + 4 * v86) != v89)
          {
            operations_research::AffineRelation::CompressPath(v88, (int)v89);
            unint64_t v75 = *(int *)(*((void *)this + 137) + 4 * v86);
            long long v76 = (const char *)*(unsigned int *)(*((void *)this + 137) + 4 * v86);
          }
        }
        uint64_t v77 = *((void *)this + 153);
        if (v75 < (*((void *)this + 154) - v77) >> 2 && *(_DWORD *)(v77 + 4 * v75) != v76)
        {
          unint64_t v78 = v75;
          operations_research::AffineRelation::CompressPath(v87, (int)v76);
          long long v76 = (const char *)*(unsigned int *)(*((void *)this + 153) + 4 * v78);
        }
        google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 631);
        uint64_t v79 = (void *)google::LogMessage::stream((google::LogMessage *)v93);
        operations_research::sat::PresolveContext::DomainOf(this, a3, v96);
        uint64_t v80 = operations_research::operator<<(v79, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" =  ", 4);
        uint64_t v81 = (void *)std::ostream::operator<<();
        uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" * ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, v76, &v91);
        char v83 = operations_research::operator<<(v82, &v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" + ", 3);
        std::ostream::operator<<();
        if (v91) {
          operator delete(v92);
        }
        if (v96[0]) {
          operator delete((void *)v96[1]);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v93);
        return 0;
      }
      return result;
    }
    std::string::basic_string[abi:ne180100]<0>(v96, "affine: new relation");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
    if (v97 < 0) {
      operator delete((void *)v96[0]);
    }
    if ((operations_research::sat::PresolveContext::PropagateAffineRelation(this, (int)a2) & 1) == 0
      || !operations_research::sat::PresolveContext::PropagateAffineRelation(this, (int)a3))
    {
      return 1;
    }
    operations_research::sat::PresolveContext::GetAffineRelation(this, (int)v90, (uint64_t)v96);
    int v64 = v96[0];
    if (v90 == LODWORD(v96[0]))
    {
      if (v89 == LODWORD(v96[0])) {
        goto LABEL_108;
      }
    }
    else
    {
      std::deque<int>::push_back((void *)this + 112, &v95);
      if (v89 == v64)
      {
LABEL_108:
        unint64_t v65 = v95;
        if (v95 == v64) {
          goto LABEL_109;
        }
        goto LABEL_135;
      }
    }
    std::deque<int>::push_back((void *)this + 112, &v94);
    unint64_t v65 = v95;
    if (v95 == v64)
    {
LABEL_109:
      unint64_t v66 = v94;
      if (v94 == v64)
      {
LABEL_111:
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::insert<int,0,0>((uint64_t *)(*((void *)this + 85) + 48 * v95), operations_research::sat::kAffineRelationConstraint, (uint64_t)v96);
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::insert<int,0,0>((uint64_t *)(*((void *)this + 85) + 48 * v94), operations_research::sat::kAffineRelationConstraint, (uint64_t)v96);
        return 1;
      }
LABEL_110:
      operations_research::SparseBitset<long long>::Set((void *)this + 31, v66);
      goto LABEL_111;
    }
LABEL_135:
    operations_research::SparseBitset<long long>::Set((void *)this + 31, v65);
    unint64_t v66 = v94;
    if (v94 == v64) {
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  uint64_t v41 = a5 + v32 * a4;
  uint64_t v42 = v33 * a4 - v30;
  if (v33 * a4 != v30)
  {
    uint64_t v57 = v41 - v31;
    uint64_t v58 = v57 / v42;
    if (v57 % v42)
    {
LABEL_16:
      BOOL result = 1;
      *((unsigned char *)this + 504) = 1;
      return result;
    }
    uint64_t v59 = v30;
    uint64_t v60 = v31;
    std::string::basic_string[abi:ne180100]<0>(v96, "affine: unique solution");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
    if (v97 < 0) {
      operator delete((void *)v96[0]);
    }
    uint64_t v61 = -v58;
    operations_research::Domain::Domain(v96, v61);
    char v62 = operations_research::sat::PresolveContext::IntersectDomainWith(this, v25, (const operations_research::Domain *)v96, 0);
    if (v96[0]) {
      operator delete((void *)v96[1]);
    }
    if ((v62 & 1) == 0) {
      return 1;
    }
    operations_research::Domain::Domain(v96, v60 + v59 * v61);
    char v63 = operations_research::sat::PresolveContext::IntersectDomainWith(this, a2, (const operations_research::Domain *)v96, 0);
    if (v96[0]) {
      operator delete((void *)v96[1]);
    }
    if ((v63 & 1) == 0) {
      return 1;
    }
    operations_research::Domain::Domain(v96, v32 + v33 * v61);
    operations_research::sat::PresolveContext::IntersectDomainWith(this, a3, (const operations_research::Domain *)v96, 0);
    if ((v96[0] & 1) == 0) {
      return 1;
    }
    uint64_t v26 = (void *)v96[1];
    goto LABEL_34;
  }
  BOOL result = 1;
  if (v41 != v31) {
    *((unsigned char *)this + 504) = 1;
  }
  return result;
}

void sub_23CD501AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD501B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,void *__p,int a24,__int16 a25,char a26,char a27)
{
  if ((a22 & 1) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::deque<int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity((uint64_t)a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t operations_research::sat::PresolveContext::StoreBooleanEqualityRelation(uint64_t this, const char *a2, const char *a3)
{
  if (*(unsigned char *)(this + 504)) {
    return this;
  }
  uint64_t v5 = (operations_research::sat::PresolveContext *)this;
  if (operations_research::sat::PresolveContext::VariableWasRemoved((operations_research::sat::PresolveContext *)this, a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 642);
    int v13 = (void *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: !VariableWasRemoved(ref_a) ", 41);
    goto LABEL_35;
  }
  if (operations_research::sat::PresolveContext::VariableWasRemoved(v5, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 643);
    unint64_t v14 = (void *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: !VariableWasRemoved(ref_b) ", 41);
    goto LABEL_35;
  }
  operations_research::sat::PresolveContext::DomainOf(v5, a2, &v21);
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v21))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v20, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 644);
    uint64_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: !DomainOf(ref_a).IsEmpty() ", 41);
    goto LABEL_32;
  }
  if (v21) {
    operator delete(__p);
  }
  operations_research::sat::PresolveContext::DomainOf(v5, a3, &v21);
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v21))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v20, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 645);
    uint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: !DomainOf(ref_b).IsEmpty() ", 41);
LABEL_32:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v20);
  }
  if (v21) {
    operator delete(__p);
  }
  if (~a2 <= (int)a2) {
    int v7 = (int)a2;
  }
  else {
    int v7 = ~a2;
  }
  if (operations_research::Domain::Min((operations_research::Domain *)(*((void *)v5 + 64) + 24 * v7), v6) < 0
    || operations_research::Domain::Max((operations_research::Domain *)(*((void *)v5 + 64) + 24 * v7), v8) >= 2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 646);
    unint64_t v17 = (void *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: CanBeUsedAsLiteral(ref_a) ", 40);
    goto LABEL_35;
  }
  if (~a3 <= (int)a3) {
    int v10 = (int)a3;
  }
  else {
    int v10 = ~a3;
  }
  if (operations_research::Domain::Min((operations_research::Domain *)(*((void *)v5 + 64) + 24 * v10), v9) < 0
    || (this = operations_research::Domain::Max((operations_research::Domain *)(*((void *)v5 + 64) + 24 * v10), v11),
        this >= 2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 647);
    uint64_t v18 = (void *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: CanBeUsedAsLiteral(ref_b) ", 40);
    goto LABEL_35;
  }
  if (a2 == a3) {
    return this;
  }
  if (~a3 == a2)
  {
    *((unsigned char *)v5 + 504) = 1;
    return this;
  }
  if (((a3 ^ a2) & 0x80000000) != 0)
  {
    this = operations_research::sat::PresolveContext::StoreAffineRelation(v5, (const char *)v7, (const char *)v10, -1, 1);
    if (this) {
      return this;
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 661);
    uint64_t v19 = (void *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: StoreAffineRelation(var_a, var_b, -1, 1) ", 55);
LABEL_35:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v21);
  }
  this = operations_research::sat::PresolveContext::StoreAffineRelation(v5, (const char *)v7, (const char *)v10, 1, 0);
  if ((this & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 658);
    unint64_t v12 = (void *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: StoreAffineRelation(var_a, var_b, 1, 0) ", 54);
    goto LABEL_35;
  }
  return this;
}

void sub_23CD5064C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p)
{
  if (a12) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CD50694(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD5069C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD506A4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD506AC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::PresolveContext::StoreAbsRelation(operations_research::sat::PresolveContext *this, int a2, int a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = (uint64_t *)((char *)this + 800);
  if (~a3 <= a3) {
    int v7 = a3;
  }
  else {
    int v7 = ~a3;
  }
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  unint64_t v9 = *((void *)this + 100);
  unint64_t v10 = (v8 >> 7) ^ (v9 >> 12);
  uint64_t v11 = *((void *)this + 103);
  while (1)
  {
    unint64_t v12 = v10 & v11;
    uint64_t v13 = *(void *)(v9 + v12);
    unint64_t v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_9:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      uint64_t v32 = (_DWORD *)(*((void *)this + 101)
                     + 8
                     * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::prepare_insert(v6, v8));
      *uint64_t v32 = a2;
      uint64_t v18 = v32 + 1;
      goto LABEL_20;
    }
    v5 += 8;
    unint64_t v10 = v5 + v12;
  }
  uint64_t v15 = *((void *)this + 101);
  while (1)
  {
    unint64_t v16 = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 8 * v16) == a2) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_9;
    }
  }
  uint64_t v17 = v15 + 8 * v16;
  int v19 = *(_DWORD *)(v17 + 4);
  uint64_t v18 = (int *)(v17 + 4);
  int VariableRepresentative = operations_research::sat::PresolveContext::GetVariableRepresentative(this, v19);
  uint64_t v21 = 0;
  unint64_t v22 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + VariableRepresentative)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + VariableRepresentative));
  unint64_t v23 = *((void *)this + 171);
  unint64_t v24 = (v22 >> 7) ^ (v23 >> 12);
  uint64_t v25 = *((void *)this + 174);
  uint64_t v26 = 0x101010101010101 * (v22 & 0x7F);
  while (1)
  {
    uint64_t v27 = v24 & v25;
    uint64_t v28 = *(void *)(v23 + v27);
    unint64_t v29 = ((v28 ^ v26) - 0x101010101010101) & ~(v28 ^ v26) & 0x8080808080808080;
    if (v29) {
      break;
    }
LABEL_15:
    if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v21 += 8;
    unint64_t v24 = v21 + v27;
  }
  while (1)
  {
    unint64_t v30 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v25;
    if (*(_DWORD *)(*((void *)this + 172) + 4 * v30) == VariableRepresentative) {
      break;
    }
    v29 &= v29 - 1;
    if (!v29) {
      goto LABEL_15;
    }
  }
  if (v30 == v25) {
    return 0;
  }
LABEL_20:
  *uint64_t v18 = v7;
  return 1;
}

uint64_t operations_research::sat::PresolveContext::GetAbsRelation(operations_research::sat::PresolveContext *this, int a2, int *a3)
{
  uint64_t v5 = 0;
  unint64_t v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  unint64_t v7 = *((void *)this + 100);
  unint64_t v8 = (v6 >> 7) ^ (v7 >> 12);
  uint64_t v9 = 0x101010101010101 * (v6 & 0x7F);
  uint64_t v10 = *((void *)this + 103);
  while (1)
  {
    uint64_t v11 = v8 & v10;
    uint64_t v12 = *(void *)(v7 + v11);
    unint64_t v13 = ((v12 ^ v9) - 0x101010101010101) & ~(v12 ^ v9) & 0x8080808080808080;
    if (v13) {
      break;
    }
LABEL_6:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v5 += 8;
    unint64_t v8 = v5 + v11;
  }
  uint64_t v14 = *((void *)this + 101);
  while (1)
  {
    unint64_t v15 = (v11 + (__clz(__rbit64(v13)) >> 3)) & v10;
    if (*(_DWORD *)(v14 + 8 * v15) == a2) {
      break;
    }
    v13 &= v13 - 1;
    if (!v13) {
      goto LABEL_6;
    }
  }
  if (v15 == v10) {
    return 0;
  }
  unint64_t v16 = (void *)(v7 + v15);
  int VariableRepresentative = operations_research::sat::PresolveContext::GetVariableRepresentative(this, *(_DWORD *)(v14 + 8 * v15 + 4));
  uint64_t v18 = 0;
  unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + VariableRepresentative)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + VariableRepresentative));
  unint64_t v20 = *((void *)this + 171);
  unint64_t v21 = (v19 >> 7) ^ (v20 >> 12);
  uint64_t v22 = *((void *)this + 174);
  uint64_t v23 = 0x101010101010101 * (v19 & 0x7F);
  while (1)
  {
    uint64_t v24 = v21 & v22;
    uint64_t v25 = *(void *)(v20 + v24);
    unint64_t v26 = ((v25 ^ v23) - 0x101010101010101) & ~(v25 ^ v23) & 0x8080808080808080;
    if (v26) {
      break;
    }
LABEL_13:
    if ((v25 & (~v25 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_16;
    }
    v18 += 8;
    unint64_t v21 = v18 + v24;
  }
  while (1)
  {
    unint64_t v27 = (v24 + (__clz(__rbit64(v26)) >> 3)) & v22;
    if (*(_DWORD *)(*((void *)this + 172) + 4 * v27) == VariableRepresentative) {
      break;
    }
    v26 &= v26 - 1;
    if (!v26) {
      goto LABEL_13;
    }
  }
  if (v27 == v22)
  {
LABEL_16:
    *a3 = VariableRepresentative;
    return 1;
  }
  --*((void *)this + 102);
  uint64_t v29 = *((void *)this + 100);
  uint64_t v30 = (uint64_t)v16 - v29 - 8;
  uint64_t v31 = *(void *)(v29 + (v30 & *((void *)this + 103)));
  unint64_t v32 = *v16 & (~*v16 << 6) & 0x8080808080808080;
  unint64_t v33 = v31 & (~v31 << 6) & 0x8080808080808080;
  if (!v33 || v32 == 0)
  {
    uint64_t v38 = 0;
    char v35 = -2;
  }
  else
  {
    unsigned int v36 = (__clz(v33) >> 3) + (__clz(__rbit64(v32)) >> 3);
    BOOL v37 = v36 >= 8;
    uint64_t v38 = v36 < 8;
    char v35 = v37 ? -2 : 0x80;
  }
  *(unsigned char *)unint64_t v16 = v35;
  *(unsigned char *)((*((void *)this + 103) & v30) + (*((void *)this + 103) & 7) + *((void *)this + 100) + 1) = v35;
  *((void *)this + 105) += v38;
  uint64_t v39 = *((void *)this + 104);
  if (!v39) {
    return 0;
  }
  uint64_t result = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 16), 1uLL, memory_order_relaxed);
  return result;
}

BOOL operations_research::sat::PresolveContext::RemapEncodingMaps(operations_research::sat::PresolveContext *this)
{
  uint64_t v2 = (void **)*((void *)this + 113);
  uint64_t v3 = (void **)*((void *)this + 114);
  *((void *)this + 117) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v2 = (void **)(*((void *)this + 113) + 8);
      *((void *)this + 113) = v2;
      uint64_t v3 = (void **)*((void *)this + 114);
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      unint64_t v6 = 1024;
      *((void *)this + 116) = 1024;
      if (v3 == v2) {
        goto LABEL_99;
      }
    }
    else
    {
      unint64_t v6 = *((void *)this + 116);
      if (v3 == v2) {
        goto LABEL_99;
      }
    }
    goto LABEL_10;
  }
  unint64_t v6 = 512;
  *((void *)this + 116) = 512;
  if (v3 != v2)
  {
LABEL_10:
    unint64_t v7 = &v2[v6 >> 10];
    unint64_t v8 = (unsigned int *)((char *)*v7 + 4 * (v6 & 0x3FF));
    if (v8 == (unsigned int *)(*(char **)((char *)v2 + (((*((void *)this + 117) + v6) >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * ((*((void *)this + 117) + v6) & 0x3FF)))
      goto LABEL_99;
    uint64_t v96 = (uint64_t *)((char *)this + 944);
    char v97 = (uint64_t *)((char *)this + 992);
    int v94 = (uint64_t *)((char *)this + 1040);
    uint64_t v91 = *(uint64_t *)((char *)v2 + (((*((void *)this + 117) + v6) >> 7) & 0x1FFFFFFFFFFFFF8))
        + 4 * ((*((void *)this + 117) + v6) & 0x3FF);
    while (1)
    {
      int v103 = 0;
      unint64_t v9 = *v8;
      int v103 = v9;
      if ((v9 & 0x80000000) != 0)
      {
        uint64_t v89 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v104, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 782);
        unint64_t v90 = (void *)google::LogMessage::stream(v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v104);
      }
      uint64_t v10 = *((void *)this + 137);
      if (v9 >= (*((void *)this + 138) - v10) >> 2 || *(_DWORD *)(v10 + 4 * v9) == v9)
      {
        uint64_t v100 = 0;
        unint64_t v11 = v9;
        uint64_t v101 = 1;
        uint64_t v12 = *((void *)this + 153);
        int v92 = v8;
        uint64_t v93 = v7;
        if (v9 >= (*((void *)this + 154) - v12) >> 2) {
          goto LABEL_22;
        }
      }
      else
      {
        operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v9);
        unint64_t v11 = *(unsigned int *)(*((void *)this + 137) + 4 * v9);
        uint64_t v101 = *(void *)(*((void *)this + 140) + 8 * v9);
        uint64_t v100 = *(void *)(*((void *)this + 143) + 8 * v9);
        unint64_t v9 = (int)v11;
        uint64_t v12 = *((void *)this + 153);
        int v92 = v8;
        uint64_t v93 = v7;
        if ((int)v11 >= (unint64_t)((*((void *)this + 154) - v12) >> 2)) {
          goto LABEL_22;
        }
      }
      if (*(_DWORD *)(v12 + 4 * v9) != v11)
      {
        operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v11);
        unint64_t v11 = *(unsigned int *)(*((void *)this + 153) + 4 * v9);
        uint64_t v13 = v101;
        if (*(void *)(*((void *)this + 156) + 8 * v9) == -1) {
          uint64_t v13 = -v101;
        }
        uint64_t v101 = v13;
      }
LABEL_22:
      uint64_t v102 = (const char *)v11;
      BOOL v95 = v11 == v103;
      if (v11 == v103) {
        return v95;
      }
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>(v96, &v103, (uint64_t)v104);
      uint64_t v14 = (char *)v105[1];
      uint64_t v15 = v105[2];
      unint64_t v16 = v14;
      if (*v14 <= -2)
      {
        do
        {
          unint64_t v17 = (__clz(__rbit64(((*v16 >> 7) & ~*v16 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v16 = (void *)((char *)v16 + v17);
          v15 += 16 * v17;
        }
        while (*(char *)v16 < -1);
      }
      uint64_t v18 = &v14[v105[4]];
      if (v16 != (void *)v18)
      {
        int v19 = 0;
        while (2)
        {
          LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v15 + 8));
          uint64_t v21 = 0;
          if (~LiteralRepresentative <= (int)LiteralRepresentative) {
            int v22 = (int)LiteralRepresentative;
          }
          else {
            int v22 = ~LiteralRepresentative;
          }
          unint64_t v23 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v22)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v22));
          unint64_t v24 = *((void *)this + 171);
          unint64_t v25 = (v23 >> 7) ^ (v24 >> 12);
          uint64_t v26 = *((void *)this + 174);
          uint64_t v27 = 0x101010101010101 * (v23 & 0x7F);
          while (1)
          {
            uint64_t v28 = v25 & v26;
            uint64_t v29 = *(void *)(v24 + v28);
            unint64_t v30 = ((v29 ^ v27) - 0x101010101010101) & ~(v29 ^ v27) & 0x8080808080808080;
            if (v30) {
              break;
            }
LABEL_35:
            if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_38;
            }
            v21 += 8;
            unint64_t v25 = v21 + v28;
          }
          while (1)
          {
            unint64_t v31 = (v28 + (__clz(__rbit64(v30)) >> 3)) & v26;
            if (*(_DWORD *)(*((void *)this + 172) + 4 * v31) == v22) {
              break;
            }
            v30 &= v30 - 1;
            if (!v30) {
              goto LABEL_35;
            }
          }
          if (v31 == v26)
          {
LABEL_38:
            uint64_t v32 = *(void *)v15 - v100;
            if (v32 % v101) {
              goto LABEL_39;
            }
            operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(this, LiteralRepresentative, v102, v32 / v101, 0);
            if (*((unsigned char *)this + 504)) {
              return v95;
            }
            ++v19;
            int v34 = *((char *)v16 + 1);
            unint64_t v16 = (void *)((char *)v16 + 1);
            v15 += 16;
            if (v34 <= -2)
            {
              do
              {
LABEL_43:
                unint64_t v35 = (__clz(__rbit64(((*v16 >> 7) & ~*v16 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                unint64_t v16 = (void *)((char *)v16 + v35);
                v15 += 16 * v35;
              }
              while (*(char *)v16 < -1);
            }
          }
          else
          {
LABEL_39:
            int v33 = *((char *)v16 + 1);
            unint64_t v16 = (void *)((char *)v16 + 1);
            v15 += 16;
            if (v33 <= -2) {
              goto LABEL_43;
            }
          }
          if (v16 == (void *)v18) {
            goto LABEL_46;
          }
          continue;
        }
      }
      int v19 = 0;
LABEL_46:
      uint64_t v36 = 0;
      unint64_t v37 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v103)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v103));
      unint64_t v38 = *((void *)this + 118);
      unint64_t v39 = (v37 >> 7) ^ (v38 >> 12);
      uint64_t v40 = *((void *)this + 121);
      uint64_t v41 = 0x101010101010101 * (v37 & 0x7F);
      while (1)
      {
        uint64_t v42 = v39 & v40;
        uint64_t v43 = *(void *)(v38 + v42);
        unint64_t v44 = ((v43 ^ v41) - 0x101010101010101) & ~(v43 ^ v41) & 0x8080808080808080;
        if (v44) {
          break;
        }
LABEL_50:
        if ((v43 & (~v43 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_54;
        }
        v36 += 8;
        unint64_t v39 = v36 + v42;
      }
      while (1)
      {
        unint64_t v45 = (v42 + (__clz(__rbit64(v44)) >> 3)) & v40;
        int v46 = (_DWORD *)(*((void *)this + 119) + 56 * v45);
        if (*v46 == v103) {
          break;
        }
        v44 &= v44 - 1;
        if (!v44) {
          goto LABEL_50;
        }
      }
      if (v45 != v40) {
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::erase(v96, (void *)(v38 + v45), (uint64_t)v46);
      }
LABEL_54:
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>(v97, &v103, (uint64_t)v104);
      uint64_t v47 = (char *)v105[1];
      BOOL v48 = (void *)v105[2];
      uint64_t v49 = v47;
      if (*v47 <= -2)
      {
        do
        {
          unint64_t v50 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v49 = (void *)((char *)v49 + v50);
          v48 += 7 * v50;
        }
        while (*(char *)v49 < -1);
      }
      uint64_t v51 = &v47[v105[4]];
      long long v98 = v51;
      while (v49 != (void *)v51)
      {
        uint64_t v52 = *v48 - v100;
        uint64_t v53 = v52 / v101;
        if (!(v52 % v101))
        {
          uint64_t v56 = (char *)v48[1];
          uint64_t v57 = (unsigned int *)v48[2];
          uint64_t v58 = v56;
          if (*v56 <= -2)
          {
            do
            {
              unint64_t v59 = (__clz(__rbit64(((*v58 >> 7) & ~*v58 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              uint64_t v58 = (void *)((char *)v58 + v59);
              v57 += v59;
            }
            while (*(char *)v58 < -1);
          }
          uint64_t v60 = &v56[v48[4]];
          while (v58 != (void *)v60)
          {
            unsigned int v61 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*v57);
            operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(this, v61, (int)v102, v53, 1);
            if (*((unsigned char *)this + 504)) {
              return v95;
            }
            int v62 = *((char *)v58 + 1);
            uint64_t v58 = (void *)((char *)v58 + 1);
            ++v57;
            if (v62 <= -2)
            {
              do
              {
                unint64_t v63 = (__clz(__rbit64(((*v58 >> 7) & ~*v58 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                uint64_t v58 = (void *)((char *)v58 + v63);
                v57 += v63;
              }
              while (*(char *)v58 < -1);
            }
            ++v19;
          }
        }
        int v54 = *((char *)v49 + 1);
        uint64_t v49 = (void *)((char *)v49 + 1);
        v48 += 7;
        if (v54 <= -2)
        {
          do
          {
            unint64_t v55 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v49 = (void *)((char *)v49 + v55);
            v48 += 7 * v55;
          }
          while (*(char *)v49 < -1);
        }
        uint64_t v51 = v98;
      }
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::erase<int>(v97, &v103);
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>(v94, &v103, (uint64_t)v104);
      int v64 = (char *)v105[1];
      unint64_t v65 = (void *)v105[2];
      unint64_t v66 = v64;
      if (*v64 <= -2)
      {
        do
        {
          unint64_t v67 = (__clz(__rbit64(((*v66 >> 7) & ~*v66 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v66 = (void *)((char *)v66 + v67);
          v65 += 7 * v67;
        }
        while (*(char *)v66 < -1);
      }
      uint64_t v68 = &v64[v105[4]];
      uint64_t v99 = v68;
      while (v66 != (void *)v68)
      {
        uint64_t v69 = *v65 - v100;
        uint64_t v70 = v69 / v101;
        if (!(v69 % v101))
        {
          uint64_t v73 = (char *)v65[1];
          uint64_t v74 = (unsigned int *)v65[2];
          unint64_t v75 = v73;
          if (*v73 <= -2)
          {
            do
            {
              unint64_t v76 = (__clz(__rbit64(((*v75 >> 7) & ~*v75 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              unint64_t v75 = (void *)((char *)v75 + v76);
              v74 += v76;
            }
            while (*(char *)v75 < -1);
          }
          uint64_t v77 = &v73[v65[4]];
          while (v75 != (void *)v77)
          {
            unsigned int v78 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*v74);
            operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(this, v78, (int)v102, v70, 0);
            if (*((unsigned char *)this + 504)) {
              return v95;
            }
            int v79 = *((char *)v75 + 1);
            unint64_t v75 = (void *)((char *)v75 + 1);
            ++v74;
            if (v79 <= -2)
            {
              do
              {
                unint64_t v80 = (__clz(__rbit64(((*v75 >> 7) & ~*v75 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                unint64_t v75 = (void *)((char *)v75 + v80);
                v74 += v80;
              }
              while (*(char *)v75 < -1);
            }
            ++v19;
          }
        }
        int v71 = *((char *)v66 + 1);
        unint64_t v66 = (void *)((char *)v66 + 1);
        v65 += 7;
        if (v71 <= -2)
        {
          do
          {
            unint64_t v72 = (__clz(__rbit64(((*v66 >> 7) & ~*v66 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            unint64_t v66 = (void *)((char *)v66 + v72);
            v65 += 7 * v72;
          }
          while (*(char *)v66 < -1);
        }
        uint64_t v68 = v99;
      }
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::erase<int>(v94, &v103);
      if (v19 >= 1
        && *operations_research::sat::PresolveContext::RemapEncodingMaps(void)::vlocal__[0] >= 1
        && (operations_research::sat::PresolveContext::RemapEncodingMaps(void)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::PresolveContext::RemapEncodingMaps(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)1)))
      {
        uint64_t v81 = google::LogMessage::LogMessage((google::LogMessage *)v104, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 840);
        uint64_t v82 = (void *)google::LogMessage::stream(v81);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Remapped ", 9);
        char v83 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" encodings due to ", 18);
        uint64_t v84 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" -> ", 4);
        unint64_t v85 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)".", 1);
        google::LogMessage::~LogMessage((google::LogMessage *)v104);
      }
      unint64_t v7 = v93;
      unint64_t v8 = v92 + 1;
      if ((char *)(v92 + 1) - (unsigned char *)*v93 == 4096)
      {
        unint64_t v7 = v93 + 1;
        unint64_t v8 = (unsigned int *)v93[1];
      }
      if (v8 == (unsigned int *)v91)
      {
        uint64_t v2 = (void **)*((void *)this + 113);
        uint64_t v3 = (void **)*((void *)this + 114);
        break;
      }
    }
  }
LABEL_99:
  *((void *)this + 117) = 0;
  unint64_t v86 = (char *)v3 - (char *)v2;
  if (v86 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v2 = (void **)(*((void *)this + 113) + 8);
      *((void *)this + 113) = v2;
      unint64_t v86 = *((void *)this + 114) - (void)v2;
    }
    while (v86 > 0x10);
  }
  if (v86 >> 3 == 1)
  {
    uint64_t v87 = 512;
    goto LABEL_106;
  }
  if (v86 >> 3 == 2)
  {
    uint64_t v87 = 1024;
LABEL_106:
    *((void *)this + 116) = v87;
  }
  return *((unsigned char *)this + 504) == 0;
}

void sub_23CD5156C(_Unwind_Exception *a1)
{
  google::LogMessage::~LogMessage((google::LogMessage *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_23CD51580()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 104));
}

void operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(operations_research::sat::PresolveContext *this, const char *a2, const char *a3, uint64_t a4, int a5)
{
  int v68 = (int)a3;
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 937);
    int v62 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Check failed: !VariableWasRemoved(literal) ", 43);
    goto LABEL_65;
  }
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 938);
    unint64_t v63 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Check failed: !VariableWasRemoved(var) ", 39);
    goto LABEL_65;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>((uint64_t *)this + 118, &v68, (uint64_t)&__p);
  uint64_t v9 = 0;
  uint64_t v10 = v70[0];
  uint64_t v12 = (uint64_t *)((char *)v70[0] + 8);
  unint64_t v11 = *((void *)v70[0] + 1);
  unint64_t v13 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a4)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + a4));
  unint64_t v14 = (v13 >> 7) ^ (v11 >> 12);
  uint64_t v15 = 0x101010101010101 * (v13 & 0x7F);
  uint64_t v16 = *((void *)v70[0] + 4);
  while (1)
  {
    unint64_t v17 = v14 & v16;
    uint64_t v18 = *(void *)(v11 + v17);
    unint64_t v19 = ((v18 ^ v15) - 0x101010101010101) & ~(v18 ^ v15) & 0x8080808080808080;
    if (v19) {
      break;
    }
LABEL_8:
    if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_32;
    }
    v9 += 8;
    unint64_t v14 = v9 + v17;
  }
  uint64_t v20 = *((void *)v70[0] + 2);
  while (1)
  {
    unint64_t v21 = (v17 + (__clz(__rbit64(v19)) >> 3)) & v16;
    if (*(void *)(v20 + 16 * v21) == a4) {
      break;
    }
    v19 &= v19 - 1;
    if (!v19) {
      goto LABEL_8;
    }
  }
  if (v21 != v16)
  {
    unint64_t v65 = (void *)(v11 + v21);
    int LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v20 + 16 * v21 + 8));
    uint64_t v23 = 0;
    if (~LiteralRepresentative <= LiteralRepresentative) {
      int v24 = LiteralRepresentative;
    }
    else {
      int v24 = ~LiteralRepresentative;
    }
    unint64_t v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v24)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v24));
    unint64_t v26 = *((void *)this + 171);
    unint64_t v27 = (v25 >> 7) ^ (v26 >> 12);
    uint64_t v28 = 0x101010101010101 * (v25 & 0x7F);
    uint64_t v29 = *((void *)this + 174);
    while (1)
    {
      uint64_t v30 = v27 & v29;
      uint64_t v31 = *(void *)(v26 + v30);
      unint64_t v32 = ((v31 ^ v28) - 0x101010101010101) & ~(v31 ^ v28) & 0x8080808080808080;
      if (v32) {
        break;
      }
LABEL_18:
      if ((v31 & (~v31 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_32;
      }
      v23 += 8;
      unint64_t v27 = v23 + v30;
    }
    while (1)
    {
      unint64_t v33 = (v30 + (__clz(__rbit64(v32)) >> 3)) & v29;
      if (*(_DWORD *)(*((void *)this + 172) + 4 * v33) == v24) {
        break;
      }
      v32 &= v32 - 1;
      if (!v32) {
        goto LABEL_18;
      }
    }
    if (v33 != v29)
    {
      uint64_t v34 = v10[4];
      --v10[3];
      uint64_t v35 = v10[1];
      uint64_t v36 = (uint64_t)v65 - v35 - 8;
      unint64_t v37 = *v65 & (~*v65 << 6) & 0x8080808080808080;
      unint64_t v38 = *(void *)(v35 + (v36 & v34)) & (~*(void *)(v35 + (v36 & v34)) << 6) & 0x8080808080808080;
      if (!v38 || v37 == 0)
      {
        uint64_t v43 = 0;
        char v40 = -2;
      }
      else
      {
        unsigned int v41 = (__clz(v38) >> 3) + (__clz(__rbit64(v37)) >> 3);
        BOOL v42 = v41 >= 8;
        uint64_t v43 = v41 < 8;
        char v40 = v42 ? -2 : 0x80;
      }
      *(unsigned char *)unint64_t v65 = v40;
      *(unsigned char *)((v10[4] & v36) + (v10[4] & 7) + v10[1] + 1) = v40;
      uint64_t v44 = v10[5];
      v10[6] += v43;
      if (v44)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 16), 1uLL, memory_order_relaxed);
      }
    }
  }
LABEL_32:
  uint64_t v45 = 0;
  unint64_t v46 = v10[1];
  unint64_t v47 = (v13 >> 7) ^ (v46 >> 12);
  uint64_t v48 = v10[4];
  while (1)
  {
    unint64_t v49 = v47 & v48;
    uint64_t v50 = *(void *)(v46 + v49);
    unint64_t v51 = ((v50 ^ v15) - 0x101010101010101) & ~(v50 ^ v15) & 0x8080808080808080;
    if (v51) {
      break;
    }
LABEL_37:
    if ((v50 & (~v50 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v55 = v10[2]
          + 16
          * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v12, v13);
      *(void *)unint64_t v55 = a4;
      *(_DWORD *)(v55 + 8) = a2;
      operations_research::sat::PresolveContext::DomainOf(this, (const char *)v68, (unint64_t *)&__p);
      unint64_t v56 = operations_research::Domain::Size((operations_research::Domain *)&__p);
      if (__p) {
        operator delete(v70[0]);
      }
      if (v56 == 2)
      {
        operations_research::sat::PresolveContext::CanonicalizeDomainOfSizeTwo(this, (const char *)v68);
      }
      else
      {
        if (*operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(int,int,long long,BOOL)::vlocal__[0] >= 2
          && (operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(int,int,long long,BOOL)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(int,int,long long,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 970);
          uint64_t v57 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Insert lit(", 11);
          uint64_t v58 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)") <=> var(", 10);
          unint64_t v59 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)") == ", 5);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
        if (a5)
        {
          long long __p = operator new(0x28uLL);
          *(_OWORD *)uint64_t v70 = xmmword_23CE834D0;
          strcpy((char *)__p, "variables: add encoding constraint");
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&__p);
          if (SHIBYTE(v70[1]) < 0) {
            operator delete(__p);
          }
          unsigned int v60 = v68;
          operations_research::Domain::Domain(&__p, a4);
          operations_research::sat::PresolveContext::AddImplyInDomain(this, a2, v60, (const operations_research::Domain *)&__p);
          if (__p) {
            operator delete(v70[0]);
          }
          unsigned int v61 = v68;
          operations_research::Domain::Domain(v67, a4);
          operations_research::Domain::Complement((operations_research::Domain *)v67, (unint64_t *)&__p);
          operations_research::sat::PresolveContext::AddImplyInDomain(this, ~a2, v61, (const operations_research::Domain *)&__p);
          if (__p) {
            operator delete(v70[0]);
          }
          if ((uint64_t)v67[0]) {
            operator delete(v67[1]);
          }
        }
      }
      return;
    }
    v45 += 8;
    unint64_t v47 = v45 + v49;
  }
  uint64_t v52 = v10[2];
  while (1)
  {
    unint64_t v53 = (v49 + (__clz(__rbit64(v51)) >> 3)) & v48;
    if (*(void *)(v52 + 16 * v53) == a4) {
      break;
    }
    v51 &= v51 - 1;
    if (!v51) {
      goto LABEL_37;
    }
  }
  long long __p = operator new(0x38uLL);
  *(_OWORD *)uint64_t v70 = xmmword_23CE8E240;
  strcpy((char *)__p, "variables: merge equivalent var value encoding literals");
  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&__p);
  if (SHIBYTE(v70[1]) < 0) {
    operator delete(__p);
  }
  int v54 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v52 + 16 * v53 + 8));
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, v54))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 960);
    int v64 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Check failed: !VariableWasRemoved(previous_literal) ", 52);
LABEL_65:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
  }
  if (v54 != a2) {
    operations_research::sat::PresolveContext::StoreBooleanEqualityRelation((uint64_t)this, a2, v54);
  }
}

void sub_23CD51C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21)
{
  if (a16) {
    operator delete(__p);
  }
  if (a12)
  {
    operator delete(a13);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CD51C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD51C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD51C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(operations_research::sat::PresolveContext *this, unsigned int a2, int a3, uint64_t a4, int a5)
{
  int v35 = a3;
  uint64_t v34 = a4;
  if (!*((unsigned char *)this + 504))
  {
    if (a3 < 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 985);
      unint64_t v33 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
    }
    if (a5) {
      uint64_t v9 = (uint64_t *)((char *)this + 992);
    }
    else {
      uint64_t v9 = (uint64_t *)((char *)this + 1040);
    }
    absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>(v9, &v35, (uint64_t)&__p);
    absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<long long const&>((uint64_t *)(v37 + 8), &v34, (uint64_t)&__p);
    uint64_t v10 = v37;
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)(v37 + 8);
    unint64_t v13 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)a2)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + (int)a2));
    unint64_t v14 = (v13 >> 7) ^ (v12 >> 12);
    uint64_t v15 = *(void *)(v37 + 32);
    while (1)
    {
      unint64_t v16 = v14 & v15;
      uint64_t v17 = *(void *)(v12 + v16);
      unint64_t v18 = ((v17 ^ (0x101010101010101 * (v13 & 0x7F))) - 0x101010101010101) & ~(v17 ^ (0x101010101010101
                                                                                          * (v13 & 0x7F))) & 0x8080808080808080;
      if (v18) {
        break;
      }
LABEL_11:
      if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
      {
        *(_DWORD *)(*(void *)(v10 + 16)
                  + 4
                  * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(v37 + 8), v13)) = a2;
        if (*operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(int,int,long long,BOOL)::vlocal__ >= 2
          && (operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(int,int,long long,BOOL)::vlocal__ != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)&operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(int,int,long long,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 993);
          unint64_t v19 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Collect lit(", 12);
          uint64_t v20 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") implies var(", 14);
          unint64_t v21 = (void *)std::ostream::operator<<();
          if (a5) {
            int v22 = ") == ";
          }
          else {
            int v22 = ") != ";
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, 5);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
        long long __p = operator new(0x30uLL);
        long long v37 = xmmword_23CE85CC0;
        strcpy((char *)__p, "variables: detect half reified value encoding");
        operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&__p);
        if (SHIBYTE(v37) < 0)
        {
          operator delete(__p);
          if (!a5) {
            goto LABEL_24;
          }
LABEL_22:
          uint64_t v23 = (uint64_t *)((char *)this + 1040);
        }
        else
        {
          if (a5) {
            goto LABEL_22;
          }
LABEL_24:
          uint64_t v23 = (uint64_t *)((char *)this + 992);
        }
        absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>(v23, &v35, (uint64_t)&__p);
        absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<long long const&>((uint64_t *)(v37 + 8), &v34, (uint64_t)&__p);
        int v24 = *(char **)(v37 + 8);
        unint64_t v25 = *(unsigned int **)(v37 + 16);
        unint64_t v26 = v24;
        if (*v24 <= -2)
        {
          do
          {
            unint64_t v27 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            unint64_t v26 = (void *)((char *)v26 + v27);
            v25 += v27;
          }
          while (*(char *)v26 < -1);
        }
        uint64_t v28 = &v24[*(void *)(v37 + 32)];
        if (v26 != (void *)v28)
        {
          unsigned int v29 = ~a2;
          while (operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*v25) != v29)
          {
            int v30 = *((char *)v26 + 1);
            unint64_t v26 = (void *)((char *)v26 + 1);
            ++v25;
            if (v30 <= -2)
            {
              do
              {
                unint64_t v31 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                unint64_t v26 = (void *)((char *)v26 + v31);
                v25 += v31;
              }
              while (*(char *)v26 < -1);
            }
            if (v26 == (void *)v28) {
              return 1;
            }
          }
          long long __p = operator new(0x30uLL);
          long long v37 = xmmword_23CE7E450;
          strcpy((char *)__p, "variables: detect fully reified value encoding");
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&__p);
          if (SHIBYTE(v37) < 0) {
            operator delete(__p);
          }
          if (a5) {
            unint64_t v32 = a2;
          }
          else {
            unint64_t v32 = v29;
          }
          operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(this, (const char *)v32, (const char *)v35, v34, 0);
        }
        return 1;
      }
      v11 += 8;
      unint64_t v14 = v11 + v16;
    }
    while (*(_DWORD *)(*(void *)(v37 + 16) + 4 * ((v16 + (__clz(__rbit64(v18)) >> 3)) & v15)) != a2)
    {
      v18 &= v18 - 1;
      if (!v18) {
        goto LABEL_11;
      }
    }
  }
  return 0;
}

void sub_23CD520C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CD520F8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::erase<int>(uint64_t *a1, int *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v4)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v4));
  uint64_t v6 = *a1;
  unint64_t v7 = (v5 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  uint64_t v9 = 0x101010101010101 * (v5 & 0x7F);
  while (1)
  {
    uint64_t v10 = v7 & v8;
    uint64_t v11 = *(void *)(v6 + v10);
    unint64_t v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v3 += 8;
    unint64_t v7 = v3 + v10;
  }
  while (1)
  {
    unint64_t v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    unint64_t v14 = (_DWORD *)(a1[1] + 56 * v13);
    if (*v14 == v4) {
      break;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_5;
    }
  }
  if (v13 == v8) {
    return 0;
  }
  unint64_t v16 = (void *)(v6 + v13);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)(v14 + 2));
  uint64_t v17 = a1[3];
  --a1[2];
  unint64_t v18 = (char *)v16 - *a1;
  uint64_t v19 = *(void *)(*a1 + ((unint64_t)(v18 - 8) & v17));
  unint64_t v20 = *v16 & (~*v16 << 6) & 0x8080808080808080;
  unint64_t v21 = v19 & (~v19 << 6) & 0x8080808080808080;
  if (v21) {
    BOOL v22 = v20 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22)
  {
    uint64_t v26 = 0;
    char v23 = -2;
  }
  else
  {
    unsigned int v24 = (__clz(v21) >> 3) + (__clz(__rbit64(v20)) >> 3);
    BOOL v25 = v24 >= 8;
    uint64_t v26 = v24 < 8;
    if (v25) {
      char v23 = -2;
    }
    else {
      char v23 = 0x80;
    }
  }
  *(unsigned char *)unint64_t v16 = v23;
  *(unsigned char *)((a1[3] & (unint64_t)(v18 - 8)) + (a1[3] & 7) + *a1 + 1) = v23;
  uint64_t v27 = a1[4];
  a1[5] += v26;
  if (!v27) {
    return 1;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t result = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 16), 1uLL, memory_order_relaxed);
  return result;
}

void operations_research::sat::PresolveContext::CanonicalizeDomainOfSizeTwo(operations_research::sat::PresolveContext *this, const char *a2)
{
  int v150 = (int)a2;
  if ((a2 & 0x80000000) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v151, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 849);
    int v137 = (void *)google::LogMessage::stream((google::LogMessage *)&v151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
    goto LABEL_169;
  }
  operations_research::sat::PresolveContext::DomainOf(this, a2, (unint64_t *)&v151);
  unint64_t v148 = operations_research::Domain::Size((operations_research::Domain *)&v151);
  int v147 = 2;
  if (v148 != 2) {
    google::MakeCheckOpString<long long,int>((int)&v148, (int)&v147, "DomainOf(var).Size() == 2");
  }
  uint64_t v149 = 0;
  if (v151) {
    operator delete(__p[0]);
  }
  if (v150 < 0)
  {
    uint64_t v4 = -operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v150), v3);
    uint64_t v146 = -operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v150), v6);
    if (*((unsigned char *)this + 504)) {
      return;
    }
  }
  else
  {
    uint64_t v4 = operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v150), v3);
    uint64_t v146 = operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * v150), v5);
    if (*((unsigned char *)this + 504)) {
      return;
    }
  }
  absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>((uint64_t *)this + 118, &v150, (uint64_t)&v151);
  uint64_t v7 = 0;
  uint64_t v8 = __p[0];
  uint64_t v10 = (uint64_t *)((char *)__p[0] + 8);
  unint64_t v9 = *((void *)__p[0] + 1);
  unint64_t v11 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v4)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v4));
  unint64_t v143 = v11 >> 7;
  unint64_t v12 = (v11 >> 7) ^ (v9 >> 12);
  unint64_t v141 = v11;
  uint64_t v13 = 0x101010101010101 * (v11 & 0x7F);
  uint64_t v14 = *((void *)__p[0] + 4);
  uint64_t v144 = v13;
  while (1)
  {
    unint64_t v15 = v12 & v14;
    uint64_t v16 = *(void *)(v9 + v15);
    unint64_t v17 = ((v16 ^ v13) - 0x101010101010101) & ~(v16 ^ v13) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_14:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v20 = (void *)(v9 + v14);
      goto LABEL_41;
    }
    v7 += 8;
    unint64_t v12 = v7 + v15;
  }
  uint64_t v18 = *((void *)__p[0] + 2);
  while (1)
  {
    unint64_t v19 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v14;
    if (*(void *)(v18 + 16 * v19) == v4) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_14;
    }
  }
  unint64_t v20 = (void *)(v9 + v19);
  uint64_t v142 = v18 + 16 * v19;
  if (v19 != v14)
  {
    int LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v18 + 16 * v19 + 8));
    uint64_t v22 = 0;
    if (~LiteralRepresentative <= LiteralRepresentative) {
      int v23 = LiteralRepresentative;
    }
    else {
      int v23 = ~LiteralRepresentative;
    }
    unint64_t v24 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v23)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v23));
    unint64_t v25 = *((void *)this + 171);
    unint64_t v26 = (v24 >> 7) ^ (v25 >> 12);
    uint64_t v27 = 0x101010101010101 * (v24 & 0x7F);
    uint64_t v28 = *((void *)this + 174);
    while (1)
    {
      uint64_t v29 = v26 & v28;
      uint64_t v30 = *(void *)(v25 + v29);
      unint64_t v31 = ((v30 ^ v27) - 0x101010101010101) & ~(v30 ^ v27) & 0x8080808080808080;
      if (v31) {
        break;
      }
LABEL_24:
      if ((v30 & (~v30 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v9 = v8[1];
        uint64_t v14 = v8[4];
        goto LABEL_41;
      }
      v22 += 8;
      unint64_t v26 = v22 + v29;
    }
    while (1)
    {
      unint64_t v32 = (v29 + (__clz(__rbit64(v31)) >> 3)) & v28;
      if (*(_DWORD *)(*((void *)this + 172) + 4 * v32) == v23) {
        break;
      }
      v31 &= v31 - 1;
      if (!v31) {
        goto LABEL_24;
      }
    }
    unint64_t v9 = v8[1];
    uint64_t v14 = v8[4];
    if (v32 != v28)
    {
      --v8[3];
      uint64_t v33 = (uint64_t)v20 - v9 - 8;
      unint64_t v34 = *v20 & (~*v20 << 6) & 0x8080808080808080;
      unint64_t v35 = *(void *)(v9 + (v33 & v14)) & (~*(void *)(v9 + (v33 & v14)) << 6) & 0x8080808080808080;
      if (v35) {
        BOOL v36 = v34 == 0;
      }
      else {
        BOOL v36 = 1;
      }
      if (v36)
      {
        uint64_t v40 = 0;
        char v37 = -2;
      }
      else
      {
        unsigned int v38 = (__clz(v35) >> 3) + (__clz(__rbit64(v34)) >> 3);
        BOOL v39 = v38 >= 8;
        uint64_t v40 = v38 < 8;
        if (v39) {
          char v37 = -2;
        }
        else {
          char v37 = 0x80;
        }
      }
      *(unsigned char *)unint64_t v20 = v37;
      *(unsigned char *)((v8[4] & v33) + (v8[4] & 7) + v8[1] + 1) = v37;
      uint64_t v41 = v8[5];
      v8[6] += v40;
      if (v41)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 16), 1uLL, memory_order_relaxed);
      }
      unint64_t v9 = v8[1];
      uint64_t v14 = v8[4];
      unint64_t v20 = (void *)(v9 + v14);
    }
  }
LABEL_41:
  uint64_t v42 = 0;
  unint64_t v43 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v146)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v146));
  unint64_t v44 = v43 >> 7;
  unint64_t v45 = (v43 >> 7) ^ (v9 >> 12);
  uint64_t v46 = 0x101010101010101 * (v43 & 0x7F);
  uint64_t v145 = v4;
  while (1)
  {
    unint64_t v47 = v45 & v14;
    uint64_t v48 = *(void *)(v9 + v47);
    unint64_t v49 = ((v48 ^ v46) - 0x101010101010101) & ~(v48 ^ v46) & 0x8080808080808080;
    if (v49)
    {
      uint64_t v50 = v8[2];
      while (1)
      {
        unint64_t v51 = (v47 + (__clz(__rbit64(v49)) >> 3)) & v14;
        if (*(void *)(v50 + 16 * v51) == v146) {
          break;
        }
        v49 &= v49 - 1;
        if (!v49) {
          goto LABEL_46;
        }
      }
      uint64_t v4 = v50 + 16 * v51;
      uint64_t v52 = (void *)(v9 + v51);
      if (v51 != v14)
      {
        int v53 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v4 + 8));
        uint64_t v54 = 0;
        if (~v53 <= v53) {
          int v55 = v53;
        }
        else {
          int v55 = ~v53;
        }
        unint64_t v56 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v55)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v55));
        unint64_t v57 = *((void *)this + 171);
        unint64_t v58 = (v56 >> 7) ^ (v57 >> 12);
        uint64_t v59 = 0x101010101010101 * (v56 & 0x7F);
        uint64_t v60 = *((void *)this + 174);
        while (1)
        {
          uint64_t v61 = v58 & v60;
          uint64_t v62 = *(void *)(v57 + v61);
          unint64_t v63 = ((v62 ^ v59) - 0x101010101010101) & ~(v62 ^ v59) & 0x8080808080808080;
          if (v63) {
            break;
          }
LABEL_56:
          if ((v62 & (~v62 << 6) & 0x8080808080808080) != 0)
          {
            uint64_t v46 = 0x101010101010101 * (v43 & 0x7F);
            unint64_t v9 = v8[1];
            uint64_t v14 = v8[4];
            goto LABEL_68;
          }
          v54 += 8;
          unint64_t v58 = v54 + v61;
        }
        while (1)
        {
          unint64_t v64 = (v61 + (__clz(__rbit64(v63)) >> 3)) & v60;
          if (*(_DWORD *)(*((void *)this + 172) + 4 * v64) == v55) {
            break;
          }
          v63 &= v63 - 1;
          if (!v63) {
            goto LABEL_56;
          }
        }
        uint64_t v46 = 0x101010101010101 * (v43 & 0x7F);
        unint64_t v9 = v8[1];
        uint64_t v14 = v8[4];
        if (v64 != v60)
        {
          --v8[3];
          uint64_t v66 = (uint64_t)v52 - v9 - 8;
          unint64_t v67 = *v52 & (~*v52 << 6) & 0x8080808080808080;
          unint64_t v68 = *(void *)(v9 + (v66 & v14)) & (~*(void *)(v9 + (v66 & v14)) << 6) & 0x8080808080808080;
          if (v68) {
            BOOL v69 = v67 == 0;
          }
          else {
            BOOL v69 = 1;
          }
          unint64_t v44 = v43 >> 7;
          if (v69)
          {
            uint64_t v91 = 0;
            char v70 = -2;
          }
          else
          {
            unsigned int v89 = (__clz(v68) >> 3) + (__clz(__rbit64(v67)) >> 3);
            BOOL v90 = v89 >= 8;
            uint64_t v91 = v89 < 8;
            if (v90) {
              char v70 = -2;
            }
            else {
              char v70 = 0x80;
            }
          }
          *(unsigned char *)uint64_t v52 = v70;
          *(unsigned char *)((v8[4] & v66) + (v8[4] & 7) + v8[1] + 1) = v70;
          uint64_t v92 = v8[5];
          v8[6] += v91;
          if (v92)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 16), 1uLL, memory_order_relaxed);
          }
          uint64_t v52 = (void *)(v8[1] + v8[4]);
          unint64_t v65 = v52;
          if (v20 != v52) {
            goto LABEL_70;
          }
LABEL_96:
          if (v52 != v20)
          {
            unint64_t v151 = operator new(0x38uLL);
            *(_OWORD *)long long __p = xmmword_23CE7E430;
            strcpy((char *)v151, "variables with 2 values: register other encoding");
            operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v151);
            if (SHIBYTE(__p[1]) < 0) {
              operator delete(v151);
            }
            signed int v76 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v4 + 8));
            uint64_t v93 = 0;
            signed int v74 = ~v76;
            unint64_t v94 = v8[1];
            unint64_t v95 = v143 ^ (v94 >> 12);
            uint64_t v96 = v8[4];
            while (1)
            {
              uint64_t v97 = v95 & v96;
              uint64_t v98 = *(void *)(v94 + v97);
              unint64_t v99 = ((v98 ^ v144) - 0x101010101010101) & ~(v98 ^ v144) & 0x8080808080808080;
              if (v99) {
                break;
              }
LABEL_104:
              if ((v98 & (~v98 << 6) & 0x8080808080808080) != 0)
              {
                unint64_t v101 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v10, v141);
                uint64_t v100 = v8[2];
                uint64_t v114 = v100 + 16 * v101;
                *(void *)uint64_t v114 = v145;
                *(_DWORD *)(v114 + 8) = 0;
                goto LABEL_118;
              }
              v93 += 8;
              unint64_t v95 = v93 + v97;
            }
            uint64_t v100 = v8[2];
            while (1)
            {
              unint64_t v101 = (v97 + (__clz(__rbit64(v99)) >> 3)) & v96;
              if (*(void *)(v100 + 16 * v101) == v145) {
                break;
              }
              v99 &= v99 - 1;
              if (!v99) {
                goto LABEL_104;
              }
            }
LABEL_118:
            *(_DWORD *)(v100 + 16 * v101 + 8) = v74;
LABEL_129:
            if (~v74 <= v74) {
              int v122 = v74;
            }
            else {
              int v122 = ~v74;
            }
            int v123 = v122;
            if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * v122), v78)|| (~v76 <= v76 ? (unint64_t v125 = v76) : (unint64_t v125 = ~v76), operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * (int)v125), v124)))
            {
              if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * v123), v124))
              {
                if (~v76 <= v76) {
                  int v127 = v76;
                }
                else {
                  int v127 = ~v76;
                }
                if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * v127), v126))
                {
                  unint64_t v151 = operator new(0x28uLL);
                  *(_OWORD *)long long __p = xmmword_23CE834B0;
                  strcpy((char *)v151, "variables with 2 values: fixed encoding");
                  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v151);
                  if (SHIBYTE(__p[1]) < 0)
                  {
                    operator delete(v151);
                    uint64_t v129 = *((void *)this + 64);
                    if ((v74 & 0x80000000) == 0)
                    {
LABEL_144:
                      if (operations_research::Domain::Min((operations_research::Domain *)(v129 + 24 * v74), v128) == 1)
                      {
LABEL_145:
                        uint64_t v130 = (const char *)v150;
                        operations_research::Domain::Domain(&v151, v145);
                        operations_research::sat::PresolveContext::IntersectDomainWith(this, v130, (const operations_research::Domain *)&v151, 0);
                        goto LABEL_149;
                      }
LABEL_148:
                      int v131 = (const char *)v150;
                      operations_research::Domain::Domain(&v151, v146);
                      operations_research::sat::PresolveContext::IntersectDomainWith(this, v131, (const operations_research::Domain *)&v151, 0);
LABEL_149:
                      if (v151) {
                        operator delete(__p[0]);
                      }
                      return;
                    }
                  }
                  else
                  {
                    uint64_t v129 = *((void *)this + 64);
                    if ((v74 & 0x80000000) == 0) {
                      goto LABEL_144;
                    }
                  }
                  if (!operations_research::Domain::Max((operations_research::Domain *)(v129 + 24 * ~v74), v128))goto LABEL_145; {
                  goto LABEL_148;
                  }
                }
                google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v151, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 912);
                uint64_t v139 = (void *)google::LogMessage::stream((google::LogMessage *)&v151);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"Check failed: IsFixed(max_literal) ", 35);
              }
              else
              {
                google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v151, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 911);
                uint64_t v138 = (void *)google::LogMessage::stream((google::LogMessage *)&v151);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Check failed: IsFixed(min_literal) ", 35);
              }
            }
            else
            {
              if (~v150 <= v150) {
                int v132 = v150;
              }
              else {
                int v132 = ~v150;
              }
              unint64_t v133 = v132;
              uint64_t v134 = *((void *)this + 137);
              if (v132 < (unint64_t)((*((void *)this + 138) - v134) >> 2)
                && *(_DWORD *)(v134 + 4 * v132) != v132)
              {
                operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v132);
                int v132 = *(_DWORD *)(*((void *)this + 137) + 4 * v133);
                unint64_t v133 = v132;
              }
              uint64_t v135 = *((void *)this + 153);
              if (v133 < (*((void *)this + 154) - v135) >> 2 && *(_DWORD *)(v135 + 4 * v133) != v132)
              {
                operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v132);
                int v132 = *(_DWORD *)(*((void *)this + 153) + 4 * v133);
              }
              if (v132 == v123) {
                return;
              }
              unint64_t v151 = operator new(0x30uLL);
              *(_OWORD *)long long __p = xmmword_23CE8E250;
              strcpy((char *)v151, "variables with 2 values: new affine relation");
              operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v151);
              if (SHIBYTE(__p[1]) < 0) {
                operator delete(v151);
              }
              if (v76 < 0)
              {
                if (operations_research::sat::PresolveContext::StoreAffineRelation(this, (const char *)v150, (const char *)v125, v145 - v146, v146))
                {
                  return;
                }
                google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v151, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 929);
                char v140 = (void *)google::LogMessage::stream((google::LogMessage *)&v151);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"Check failed: StoreAffineRelation(var, PositiveRef(max_literal), var_min - var_max, var_max) ", 93);
              }
              else
              {
                if (operations_research::sat::PresolveContext::StoreAffineRelation(this, (const char *)v150, (const char *)v125, v146 - v145, v145))
                {
                  return;
                }
                google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v151, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 926);
                int v136 = (void *)google::LogMessage::stream((google::LogMessage *)&v151);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"Check failed: StoreAffineRelation(var, PositiveRef(max_literal), var_max - var_min, var_min) ", 93);
              }
            }
LABEL_169:
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v151);
          }
          uint64_t v102 = v46;
          unint64_t v151 = operator new(0x38uLL);
          *(_OWORD *)long long __p = xmmword_23CE7E430;
          strcpy((char *)v151, "variables with 2 values: create encoding literal");
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v151);
          if (SHIBYTE(__p[1]) < 0) {
            operator delete(v151);
          }
          operations_research::Domain::Domain(&v151, 0, 1);
          signed int v76 = operations_research::sat::PresolveContext::NewIntVar(this, (const operations_research::Domain *)&v151);
          if (v151) {
            operator delete(__p[0]);
          }
          uint64_t v103 = 0;
          signed int v74 = ~v76;
          unint64_t v104 = v8[1];
          unint64_t v105 = v104 >> 12;
          unint64_t v106 = (v104 >> 12) ^ v143;
          uint64_t v107 = v8[4];
          while (1)
          {
            uint64_t v108 = v102;
            uint64_t v109 = v106 & v107;
            uint64_t v110 = *(void *)(v104 + (v106 & v107));
            unint64_t v111 = ((v110 ^ v144) - 0x101010101010101) & ~(v110 ^ v144) & 0x8080808080808080;
            if (v111) {
              break;
            }
LABEL_115:
            if ((v110 & (~v110 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v113 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v10, v141);
              uint64_t v112 = v8[2];
              uint64_t v115 = v112 + 16 * v113;
              *(void *)uint64_t v115 = v145;
              *(_DWORD *)(v115 + 8) = 0;
              unint64_t v104 = v8[1];
              uint64_t v107 = v8[4];
              unint64_t v105 = v104 >> 12;
              uint64_t v108 = v102;
              goto LABEL_120;
            }
            v103 += 8;
            unint64_t v106 = v103 + v109;
          }
          uint64_t v112 = v8[2];
          while (1)
          {
            unint64_t v113 = (v109 + (__clz(__rbit64(v111)) >> 3)) & v107;
            if (*(void *)(v112 + 16 * v113) == v145) {
              break;
            }
            v111 &= v111 - 1;
            if (!v111) {
              goto LABEL_115;
            }
          }
LABEL_120:
          uint64_t v116 = 0;
          *(_DWORD *)(v112 + 16 * v113 + 8) = v74;
          for (unint64_t i = v105 ^ v44; ; unint64_t i = v116 + v118)
          {
            unint64_t v118 = i & v107;
            uint64_t v119 = *(void *)(v104 + v118);
            unint64_t v120 = ((v119 ^ v108) - 0x101010101010101) & ~(v119 ^ v108) & 0x8080808080808080;
            if (v120) {
              break;
            }
LABEL_125:
            if ((v119 & (~v119 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_127;
            }
            v116 += 8;
          }
          uint64_t v87 = v8[2];
          while (1)
          {
            unint64_t v88 = (v118 + (__clz(__rbit64(v120)) >> 3)) & v107;
            if (*(void *)(v87 + 16 * v88) == v146) {
              break;
            }
            v120 &= v120 - 1;
            if (!v120) {
              goto LABEL_125;
            }
          }
LABEL_128:
          *(_DWORD *)(v87 + 16 * v88 + 8) = v76;
          goto LABEL_129;
        }
LABEL_68:
        unint64_t v44 = v43 >> 7;
      }
      unint64_t v65 = (void *)(v9 + v14);
      if (v20 == v65) {
        goto LABEL_96;
      }
      goto LABEL_70;
    }
LABEL_46:
    if ((v48 & (~v48 << 6) & 0x8080808080808080) != 0) {
      break;
    }
    v42 += 8;
    unint64_t v45 = v42 + v47;
  }
  uint64_t v52 = (void *)(v9 + v14);
  unint64_t v65 = (void *)(v9 + v14);
  if (v20 == v65) {
    goto LABEL_96;
  }
LABEL_70:
  if (v52 == v65)
  {
    uint64_t v79 = v46;
    unint64_t v151 = operator new(0x38uLL);
    *(_OWORD *)long long __p = xmmword_23CE7E430;
    strcpy((char *)v151, "variables with 2 values: register other encoding");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v151);
    if (SHIBYTE(__p[1]) < 0) {
      operator delete(v151);
    }
    signed int v74 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v142 + 8));
    uint64_t v80 = 0;
    signed int v76 = ~v74;
    unint64_t v81 = v8[1];
    unint64_t v82 = v44 ^ (v81 >> 12);
    uint64_t v83 = v8[4];
    while (1)
    {
      unint64_t v84 = v82 & v83;
      uint64_t v85 = *(void *)(v81 + v84);
      unint64_t v86 = ((v85 ^ v79) - 0x101010101010101) & ~(v85 ^ v79) & 0x8080808080808080;
      if (v86) {
        break;
      }
LABEL_88:
      if ((v85 & (~v85 << 6) & 0x8080808080808080) != 0)
      {
LABEL_127:
        unint64_t v88 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v10, v43);
        uint64_t v87 = v8[2];
        uint64_t v121 = v87 + 16 * v88;
        *(void *)uint64_t v121 = v146;
        *(_DWORD *)(v121 + 8) = 0;
        goto LABEL_128;
      }
      v80 += 8;
      unint64_t v82 = v80 + v84;
    }
    uint64_t v87 = v8[2];
    while (1)
    {
      unint64_t v88 = (v84 + (__clz(__rbit64(v86)) >> 3)) & v83;
      if (*(void *)(v87 + 16 * v88) == v146) {
        goto LABEL_128;
      }
      v86 &= v86 - 1;
      if (!v86) {
        goto LABEL_88;
      }
    }
  }
  int v71 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v142 + 8));
  unint64_t v72 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v4 + 8));
  uint64_t v73 = (const char *)~v72;
  if (v71 == v73) {
    goto LABEL_75;
  }
  unint64_t v151 = operator new(0x38uLL);
  *(_OWORD *)long long __p = xmmword_23CE7E430;
  strcpy((char *)v151, "variables with 2 values: merge encoding literals");
  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v151);
  if (SHIBYTE(__p[1]) < 0) {
    operator delete(v151);
  }
  operations_research::sat::PresolveContext::StoreBooleanEqualityRelation((uint64_t)this, v71, v73);
  if (!*((unsigned char *)this + 504))
  {
LABEL_75:
    signed int v74 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, v71);
    signed int v76 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, v72);
    if (~v74 <= v74) {
      int v77 = v74;
    }
    else {
      int v77 = ~v74;
    }
    if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * v77), v75))
    {
      LODWORD(v151) = v74;
      LODWORD(v149) = ~v76;
      if (v74 != ~v76) {
        google::MakeCheckOpString<int,int>((int)&v151, (int)&v149, "min_literal == NegatedRef(max_literal)");
      }
    }
    goto LABEL_129;
  }
}

void sub_23CD531EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD531F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,int a22,__int16 a23,char a24,char a25)
{
  if (a20) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CD53250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD53258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD53260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD53268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD53270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::find<long long>(uint64_t *a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v4 = *a1;
  unint64_t v5 = (v3 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v6 = a1[3];
  uint64_t v7 = 0x101010101010101 * (v3 & 0x7F);
  while (1)
  {
    uint64_t v8 = v5 & v6;
    uint64_t v9 = *(void *)(v4 + v8);
    unint64_t v10 = ((v9 ^ v7) - 0x101010101010101) & ~(v9 ^ v7) & 0x8080808080808080;
    if (v10) {
      break;
    }
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0) {
      return v4 + v6;
    }
    v2 += 8;
    unint64_t v5 = v2 + v8;
  }
  while (1)
  {
    unint64_t v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v6;
    if (*(void *)(a1[1] + 16 * v11) == *a2) {
      return v4 + v11;
    }
    v10 &= v10 - 1;
    if (!v10) {
      goto LABEL_5;
    }
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v7 = *a1;
  unint64_t v8 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v9 = a1[3];
  while (1)
  {
    unint64_t v10 = v8 & v9;
    uint64_t v11 = *(void *)(v7 + v10);
    unint64_t v12 = ((v11 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_6:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v14 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(a1, v6);
      uint64_t v13 = a1[1];
      unint64_t v15 = v13 + 16 * v14;
      *(void *)unint64_t v15 = *a2;
      *(_DWORD *)(v15 + 8) = 0;
      return v13 + 16 * v14 + 8;
    }
    v4 += 8;
    unint64_t v8 = v4 + v10;
  }
  uint64_t v13 = a1[1];
  while (1)
  {
    unint64_t v14 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v9;
    if (*(void *)(v13 + 16 * v14) == v5) {
      return v13 + 16 * v14 + 8;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_6;
    }
  }
}

BOOL operations_research::sat::PresolveContext::CanonicalizeEncoding(operations_research::sat::PresolveContext *this, int *a2, uint64_t *a3)
{
  int v6 = *a2;
  if (~*a2 <= *a2) {
    int v7 = *a2;
  }
  else {
    int v7 = ~v6;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *((void *)this + 137);
  if (v7 >= (unint64_t)((*((void *)this + 138) - v9) >> 2) || *(_DWORD *)(v9 + 4 * v7) == v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 1;
    uint64_t v12 = *((void *)this + 153);
    if (v7 >= (unint64_t)((*((void *)this + 154) - v12) >> 2)) {
      goto LABEL_12;
    }
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v7);
    int v7 = *(_DWORD *)(*((void *)this + 137) + 4 * v8);
    uint64_t v11 = *(void *)(*((void *)this + 140) + 8 * v8);
    uint64_t v10 = *(void *)(*((void *)this + 143) + 8 * v8);
    uint64_t v8 = v7;
    uint64_t v12 = *((void *)this + 153);
    if (v7 >= (unint64_t)((*((void *)this + 154) - v12) >> 2)) {
      goto LABEL_12;
    }
  }
  if (*(_DWORD *)(v12 + 4 * v8) != v7)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v7);
    int v7 = *(_DWORD *)(*((void *)this + 153) + 4 * v8);
    if (*(void *)(*((void *)this + 156) + 8 * v8) == -1) {
      uint64_t v11 = -v11;
    }
  }
LABEL_12:
  if (v6 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = -v11;
  }
  if (v6 < 0) {
    uint64_t v14 = v10;
  }
  else {
    uint64_t v14 = -v10;
  }
  uint64_t v15 = *a3 + v14;
  uint64_t v16 = v15 / v13;
  uint64_t v17 = v15 % v13;
  if (!v17)
  {
    *a2 = v7;
    *a3 = v16;
  }
  return v17 == 0;
}