ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineVectorLoadOp,mlir::VectorType,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  ZinIrHalH13g *v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  unint64_t v27[2];
  void v28[39];

  v28[38] = *MEMORY[0x263EF8340];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.vector_load", (const unsigned __int8 *)0x12, Context);
  if (!v14)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"affine.vector_load";
    v25[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  v18 = mlir::ValueRange::ValueRange(v27, *(void *)a6, *(void *)(a6 + 8));
  mlir::affine::AffineVectorLoadOp::build((uint64_t)v18, (uint64_t)v28, v15, v16, v17, v27[0], v27[1]);
  v19 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineVectorLoadOp,void>::id) {
    v20 = v19;
  }
  else {
    v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

void *anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>::~SimplifyAffineOp(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>::~SimplifyAffineOp(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorStoreOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorStoreOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorStoreOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v38[8] = *MEMORY[0x263EF8340];
  v36 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  unint64_t v31 = Value;
  if ((*(unsigned char *)(a2 + 46) & 0x80) == 0)
  {
    v36 = v38;
    uint64_t v37 = 0x800000000;
    unint64_t v7 = -2;
    uint64_t v8 = 64;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v7, 8);
    unint64_t v9 = v37;
    v10 = v36;
    v11 = (char *)v36 + 8 * v37;
    if (v7 < 0xD) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v6 = *(unsigned int *)(a2 + 68);
  unint64_t v7 = v6 - 2;
  uint64_t v8 = *(void *)(a2 + 72) + 64;
  v36 = v38;
  uint64_t v37 = 0x800000000;
  if ((unint64_t)(v6 - 2) >= 9) {
    goto LABEL_3;
  }
  unint64_t v9 = 0;
  if (v6 == 2)
  {
    int v21 = 0;
    goto LABEL_17;
  }
  v10 = v38;
  v11 = v38;
  if (v7 < 0xD) {
    goto LABEL_9;
  }
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    uint64_t v13 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v13 = 4;
    }
    unint64_t v12 = v7 - v13;
    v11 += v12;
    v14 = (const double *)(v8 + 88);
    v15 = (unsigned long long *)&v10[v9 + 2];
    unint64_t v16 = v12;
    do
    {
      v17 = v14 - 8;
      unsigned long long v18 = (unsigned __int128)vld4q_f64(v17);
      unsigned long long v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      unsigned long long *v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  unint64_t v12 = 0;
LABEL_14:
  uint64_t v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(void *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  int v21 = v37;
  unint64_t v9 = v7;
LABEL_17:
  LODWORD(v37) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  simplifyMapWithOperands((mlir::AffineExpr *)&v31, (uint64_t *)v36, v37);
  if (v31 != Value)
  {
    v22 = v36;
    goto LABEL_19;
  }
  v22 = v36;
  if (!v9)
  {
LABEL_29:
    uint64_t v25 = 0;
    if (v36 == v38) {
      return v25;
    }
    goto LABEL_20;
  }
  if (*(void *)(v8 + 24) == *(void *)v36)
  {
    v27 = (uint64_t *)(v8 + 56);
    uint64_t v28 = 1;
    while (v9 != v28)
    {
      uint64_t v29 = *v27;
      v27 += 4;
      uint64_t v30 = *((void *)v36 + v28++);
      if (v29 != v30) {
        goto LABEL_19;
      }
    }
    goto LABEL_29;
  }
LABEL_19:
  v34[1] = v37;
  unint64_t v35 = v31;
  uint64_t v23 = *(void *)(a2 + 72);
  uint64_t v33 = *(void *)(v23 + 24);
  v34[0] = v22;
  uint64_t v32 = *(void *)(v23 + 56);
  v24 = mlir::OpBuilder::create<mlir::affine::AffineVectorStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), &v33, &v32, &v35, (uint64_t)v34);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v24);
  uint64_t v25 = 1;
  v22 = v36;
  if (v36 != v38) {
LABEL_20:
  }
    free(v22);
  return v25;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineVectorStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  v35[24] = *MEMORY[0x263EF8340];
  uint64_t v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.vector_store", (const unsigned __int8 *)0x13, Context);
  if (!v14)
  {
    __int16 v32 = 1283;
    v31[2] = (uint64_t)"affine.vector_store";
    v31[3] = 19;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    __int16 v28 = 259;
    llvm::operator+(v31, v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  unint64_t v17 = *a5;
  mlir::ValueRange::ValueRange(v33, *(void *)a6, *(void *)(a6 + 8));
  uint64_t v18 = v33[0];
  uint64_t v19 = v33[1];
  uint64_t v29 = v16;
  uint64_t v30 = v15;
  mlir::OperationState::addOperands((uint64_t)v34, (uint64_t)&v30, 1);
  mlir::OperationState::addOperands((uint64_t)v34, (uint64_t)&v29, 1);
  mlir::OperationState::addOperands((uint64_t)v34, v18, v19);
  uint64_t v20 = mlir::AffineMapAttr::get(v17);
  int v21 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)v34);
  __int16 v32 = 261;
  v31[0] = (uint64_t)"map";
  v31[1] = 3;
  uint64_t v22 = mlir::StringAttr::get(v21, (mlir::MLIRContext *)v31);
  ZinMirCacheTensors::ZinMirCacheTensors(v27, v22, v20);
  mlir::NamedAttrList::push_back((uint64_t)v35, v27[0], v27[1]);
  uint64_t v23 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineVectorStoreOp,void>::id) {
    v24 = v23;
  }
  else {
    v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v24;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

uint64_t mlir::affine::AffineValueMap::AffineValueMap(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  v11 = mlir::MutableAffineMap::MutableAffineMap((void *)a1, a2);
  unint64_t v12 = (char *)(v11 + 14);
  v11[12] = v11 + 14;
  uint64_t v13 = (uint64_t)(v11 + 12);
  *(void *)(v13 + 8) = 0x400000000;
  if (a4 < 5)
  {
    uint64_t v14 = 0;
    uint64_t v26 = a3;
    uint64_t v27 = 0;
    if (!a4)
    {
      int v18 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, a4, 8);
    uint64_t v14 = *(unsigned int *)(a1 + 104);
    unint64_t v12 = *(char **)(a1 + 96);
    uint64_t v26 = a3;
    uint64_t v27 = 0;
  }
  uint64_t v15 = 0;
  uint64_t v16 = (uint64_t *)&v12[8 * v14];
  do
  {
    *v16++ = mlir::ValueRange::dereference_iterator(&v26, v15);
    uint64_t v15 = ++v27;
  }
  while (v26 != a3 || v15 != a4);
  int v18 = *(_DWORD *)(a1 + 104);
LABEL_11:
  uint64_t v19 = (char *)(a1 + 160);
  *(void *)(a1 + 144) = a1 + 160;
  *(_DWORD *)(a1 + 104) = v18 + a4;
  *(void *)(a1 + 152) = 0x400000000;
  if (a6 < 5)
  {
    uint64_t v20 = 0;
    uint64_t v26 = a5;
    uint64_t v27 = 0;
    if (!a6)
    {
      int v24 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 144, v19, a6, 8);
    uint64_t v20 = *(unsigned int *)(a1 + 152);
    uint64_t v19 = *(char **)(a1 + 144);
    uint64_t v26 = a5;
    uint64_t v27 = 0;
  }
  uint64_t v21 = 0;
  uint64_t v22 = (uint64_t *)&v19[8 * v20];
  do
  {
    *v22++ = mlir::ValueRange::dereference_iterator(&v26, v21);
    uint64_t v21 = ++v27;
  }
  while (v26 != a5 || v21 != a6);
  int v24 = *(_DWORD *)(a1 + 152);
LABEL_21:
  *(_DWORD *)(a1 + 152) = v24 + a6;
  return a1;
}

uint64_t *mlir::affine::AffineValueMap::reset(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  mlir::MutableAffineMap::reset(a1, a2);
  v11 = (uint64_t *)(a1 + 96);
  *(_DWORD *)(a1 + 104) = 0;
  if (a4 <= *(unsigned int *)(a1 + 108))
  {
    uint64_t v13 = *v11;
    uint64_t v25 = a3;
    uint64_t v26 = 0;
    if (!a4)
    {
      int v17 = 0;
      goto LABEL_12;
    }
    uint64_t v12 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, (void *)(a1 + 112), a4, 8);
    uint64_t v12 = *(unsigned int *)(a1 + 104);
    uint64_t v13 = *(void *)(a1 + 96);
    uint64_t v25 = a3;
    uint64_t v26 = 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = (uint64_t *)(v13 + 8 * v12);
  do
  {
    *v15++ = mlir::ValueRange::dereference_iterator(&v25, v14);
    uint64_t v14 = ++v26;
  }
  while (v25 != a3 || v14 != a4);
  int v17 = *(_DWORD *)(a1 + 104);
LABEL_12:
  *(_DWORD *)(a1 + 104) = v17 + a4;
  __n128 result = (uint64_t *)(a1 + 144);
  *(_DWORD *)(a1 + 152) = 0;
  if (a6 <= *(unsigned int *)(a1 + 156))
  {
    uint64_t v20 = *result;
    uint64_t v25 = a5;
    uint64_t v26 = 0;
    if (!a6)
    {
      int v24 = 0;
      goto LABEL_23;
    }
    uint64_t v19 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (void *)(a1 + 160), a6, 8);
    uint64_t v19 = *(unsigned int *)(a1 + 152);
    uint64_t v20 = *(void *)(a1 + 144);
    uint64_t v25 = a5;
    uint64_t v26 = 0;
  }
  uint64_t v21 = 0;
  uint64_t v22 = (uint64_t **)(v20 + 8 * v19);
  do
  {
    __n128 result = (uint64_t *)mlir::ValueRange::dereference_iterator(&v25, v21);
    *v22++ = result;
    uint64_t v21 = ++v26;
  }
  while (v25 != a5 || v21 != a6);
  int v24 = *(_DWORD *)(a1 + 152);
LABEL_23:
  *(_DWORD *)(a1 + 152) = v24 + a6;
  return result;
}

uint64_t mlir::affine::AffineValueMap::getOperands(mlir::affine::AffineValueMap *this)
{
  return *((void *)this + 12);
}

void mlir::affine::AffineValueMap::~AffineValueMap(mlir::affine::AffineValueMap *this)
{
  v2 = (char *)*((void *)this + 18);
  if (v2 != (char *)this + 160) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 12);
  if (v3 != (char *)this + 112) {
    free(v3);
  }
  if (*(mlir::affine::AffineValueMap **)this != (mlir::affine::AffineValueMap *)((char *)this + 16)) {
    free(*(void **)this);
  }
}

uint64_t mlir::detail::verifyShapedDimOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 9) == 1)
  {
    v21[0] = *((void *)this - 1) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::Type::isIndex((mlir::Type *)v21)) {
      return 1;
    }
    v19[0] = "expect index result type";
    __int16 v20 = 259;
    mlir::Operation::emitError((uint64_t)this, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      uint64_t v12 = __p;
      if (__p)
      {
        uint64_t v13 = v27;
        uint64_t v14 = __p;
        if (v27 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v27 = v12;
        operator delete(v14);
      }
      unint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      uint64_t v15 = v25;
      unint64_t v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        uint64_t v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23) {
          free(v22);
        }
        return v3;
      }
      do
      {
        uint64_t v17 = *--v15;
        uint64_t v16 = v17;
        void *v15 = 0;
        if (v17) {
          MEMORY[0x21667D390](v16, 0x1000C8077774924);
        }
      }
      while (v15 != v7);
LABEL_32:
      unint64_t v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "expected single op result";
    __int16 v20 = 259;
    mlir::Operation::emitError((uint64_t)this, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      long long v4 = __p;
      if (__p)
      {
        v5 = v27;
        uint64_t v6 = __p;
        if (v27 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        uint64_t v27 = v4;
        operator delete(v6);
      }
      unint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      uint64_t v8 = v25;
      unint64_t v9 = v24;
      if (v25 == v24) {
        goto LABEL_33;
      }
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x21667D390](v10, 0x1000C8077774924);
        }
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

uint64_t mlir::DestinationStyleOpInterface::getDpsInitsMutable(mlir::DestinationStyleOpInterface *this)
{
  return (**((uint64_t (***)(void, void))this + 1))(*((void *)this + 1), *(void *)this);
}

unint64_t mlir::detail::verifyDestinationStyleOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  void (**v9)(void ***__return_ptr, void, mlir::detail *);
  uint64_t Values;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned int OperandNumber;
  uint64_t *v26;
  char *v27;
  char *v28;
  long long v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  long long v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  int v51;
  unsigned int v52;
  mlir::detail *v53;
  const char *v54;
  char *v55;
  void **v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  unsigned int v60;
  void ***v61;
  char *v62;
  char *v63;
  long long v64;
  uint64_t v65;
  void ***v66;
  char *v67;
  char *v68;
  long long v69;
  void ***v70;
  char *v71;
  char *v72;
  long long v73;
  uint64_t v74;
  void ***v75;
  char *v76;
  char *v77;
  long long v78;
  uint64_t v79;
  void ***v80;
  char *v81;
  char *v82;
  long long v83;
  void ***v84;
  char *v85;
  char *v86;
  long long v87;
  uint64_t v88;
  void ***v89;
  char *v90;
  char *v91;
  long long v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void ***v103;
  char *v104;
  char *v105;
  long long v106;
  uint64_t v107;
  void ***v108;
  char *v109;
  char *v110;
  long long v111;
  uint64_t v112;
  void ***v113;
  char *v114;
  char *v115;
  long long v116;
  uint64_t v117;
  void ***v118;
  char *v119;
  char *v120;
  long long v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  unint64_t v132;
  unint64_t v133;
  BOOL v134;
  unint64_t v135;
  unint64_t v136;
  BOOL v137;
  unint64_t v138;
  unint64_t v139;
  BOOL v140;
  unint64_t v141;
  BOOL v142;
  unint64_t v143;
  BOOL v144;
  unint64_t v145;
  unint64_t v146;
  BOOL v147;
  unint64_t v148;
  BOOL v149;
  unint64_t v150;
  unint64_t v151;
  BOOL v152;
  int64_t v153;
  int64_t v154;
  int64_t v155;
  int64_t v156;
  int64_t v157;
  int64_t v158;
  int64_t v159;
  int64_t v160;
  int64_t v161;
  int64_t v162;
  int64_t v163;
  int64_t v164;
  int64_t v165;
  void **v166;
  const char *v167;
  uint64_t v168;
  const char *v169;
  __int16 v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  unsigned int v178;
  unsigned int v179;
  unsigned char v180[96];
  void *v181;
  void *v182;
  void *__p;
  void *v184;
  char v185;
  void **v186[2];
  _WORD *v187;
  _WORD v188[12];
  unint64_t *v189;
  uint64_t v190;
  void v191[8];

  v191[6] = *MEMORY[0x263EF8340];
  if (this)
  {
    uint64_t v4 = *((void *)this + 6);
    v5 = *(void **)(v4 + 16);
    BOOL v6 = v5 == &mlir::detail::TypeIDResolver<void,void>::id;
    if (v5 == &mlir::detail::TypeIDResolver<void,void>::id) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *((void *)this + 6);
    }
    if (!v6)
    {
      unint64_t v8 = v7 | v4 & 0xFFFFFFFFFFFFFF00;
      unint64_t v9 = (void (**)(void ***__return_ptr, void, mlir::detail *))mlir::detail::InterfaceMap::lookup<mlir::DestinationStyleOpInterface>(v8 + 32);
      if (v9) {
        goto LABEL_12;
      }
      Values = *(void *)(v8 + 24);
      uint64_t v11 = *((void *)this + 6);
      goto LABEL_10;
    }
    v174 = *(void **)(v4 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v174);
    if (Values)
    {
      uint64_t v11 = v4;
LABEL_10:
      unint64_t v9 = (void (**)(void ***__return_ptr, void, mlir::detail *))mlir::Dialect::getRegisteredInterfaceForOp<mlir::DestinationStyleOpInterface>(Values, v11);
      goto LABEL_12;
    }
  }
  unint64_t v9 = 0;
LABEL_12:
  v189 = v191;
  v190 = 0x600000000;
  (*v9)(v186, v9, this);
  uint64_t v12 = mlir::MutableOperandRange::begin((mlir::MutableOperandRange *)v186);
  uint64_t v13 = mlir::MutableOperandRange::end((mlir::MutableOperandRange *)v186);
  if (v12 == v13)
  {
LABEL_20:
    uint64_t v17 = 1;
    int v18 = v187;
    if (v187 == v188) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v14 = v13;
  unint64_t v2 = v12;
  while (1)
  {
    while (1)
    {
      uint64_t v15 = *(void **)(*(void *)(*(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      if (v15 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
        break;
      }
      uint64_t v16 = v190;
      if (v190 >= (unint64_t)HIDWORD(v190))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, v191, v190 + 1, 8);
        uint64_t v16 = v190;
      }
      v189[v16] = v12;
      LODWORD(v190) = v190 + 1;
      v2 += 32;
      v12 += 32;
      if (v2 == v14) {
        goto LABEL_20;
      }
    }
    if (v15 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      break;
    }
    v2 += 32;
    v12 += 32;
    if (v2 == v14) {
      goto LABEL_20;
    }
  }
  v166 = (void **)"expected that operand #";
  v170 = 259;
  mlir::Operation::emitOpError((uint64_t)this, &v166, (uint64_t)&v174);
  OperandNumber = mlir::OpOperand::getOperandNumber(v2);
  if (v174)
  {
    LODWORD(v171) = 5;
    v172 = OperandNumber;
    uint64_t v26 = (uint64_t *)&v171;
    uint64_t v27 = (char *)v177;
    if (v178 >= v179)
    {
      v132 = v178 + 1;
      if (v177 <= &v171 && (char *)v177 + 24 * v178 > (char *)&v171)
      {
        v153 = (char *)&v171 - (unsigned char *)v177;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v132, 24);
        uint64_t v27 = (char *)v177;
        uint64_t v26 = (uint64_t *)((char *)v177 + v153);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v132, 24);
        uint64_t v26 = (uint64_t *)&v171;
        uint64_t v27 = (char *)v177;
      }
    }
    char v28 = &v27[24 * v178];
    uint64_t v29 = *(_OWORD *)v26;
    *((void *)v28 + 2) = v26[2];
    *(_OWORD *)char v28 = v29;
    uint64_t v30 = ++v178;
    if (v174)
    {
      LODWORD(v171) = 3;
      v172 = (unint64_t)" is a ranked tensor or a ranked memref";
      v173 = 38;
      unint64_t v31 = (uint64_t *)&v171;
      __int16 v32 = (char *)v177;
      if (v30 >= v179)
      {
        v133 = v30 + 1;
        v134 = (char *)v177 + 24 * v30 > (char *)&v171;
        if (v177 <= &v171 && v134)
        {
          v154 = (char *)&v171 - (unsigned char *)v177;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v133, 24);
          __int16 v32 = (char *)v177;
          unint64_t v31 = (uint64_t *)((char *)v177 + v154);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v133, 24);
          unint64_t v31 = (uint64_t *)&v171;
          __int16 v32 = (char *)v177;
        }
      }
      uint64_t v33 = &v32[24 * v178];
      v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = v31[2];
      *(_OWORD *)uint64_t v33 = v34;
      ++v178;
    }
  }
  unint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
  if (v174) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
  }
  if (v185)
  {
    unint64_t v35 = __p;
    if (__p)
    {
      v36 = v184;
      uint64_t v37 = __p;
      if (v184 != __p)
      {
        do
          v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
        while (v36 != v35);
        uint64_t v37 = __p;
      }
      v184 = v35;
      operator delete(v37);
    }
    v38 = v181;
    if (v181)
    {
      v39 = v182;
      v40 = v181;
      if (v182 != v181)
      {
        do
        {
          v42 = *--v39;
          v41 = v42;
          *v39 = 0;
          if (v42) {
            MEMORY[0x21667D390](v41, 0x1000C8077774924);
          }
        }
        while (v39 != v38);
        v40 = v181;
      }
      v182 = v38;
      operator delete(v40);
    }
    if (v177 != v180) {
      free(v177);
    }
  }
  uint64_t v17 = 0;
  int v18 = v187;
  if (v187 != v188) {
LABEL_21:
  }
    free(v18);
LABEL_22:
  if (!v17) {
    goto LABEL_144;
  }
  uint64_t v19 = (void **)*((unsigned int *)this + 9);
  if (v19) {
    __int16 v20 = (void **)((char *)this - 16);
  }
  else {
    __int16 v20 = 0;
  }
  v186[0] = v20;
  v186[1] = v19;
  mlir::OperandRange::getTypes((uint64_t *)v186, (uint64_t *)&v174);
  uint64_t v21 = (uint64_t)v174;
  uint64_t v22 = (uint64_t)v175;
  uint64_t v23 = v177;
  if (v174 != v176 || (int v24 = 0, v175 != v177))
  {
    if (v174 != v176)
    {
      while (1)
        mlir::detail::OpResultImpl::getNextResultAtOffset(v21, v22++);
    }
    int v24 = 0;
    do
    {
      v43 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v21, v22) + 8) & 0xFFFFFFFFFFFFFFF8)
                     + 136);
      if (v43 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v43 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        ++v24;
      }
      ++v22;
    }
    while (v23 != (void *)v22);
  }
  if (v24 != v190)
  {
    v186[0] = (void **)"expected the number of tensor results (";
    v188[0] = 259;
    mlir::Operation::emitOpError((uint64_t)this, v186, (uint64_t)&v174);
    v54 = (const char *)*((unsigned int *)this + 9);
    if (v54) {
      v55 = (char *)this - 16;
    }
    else {
      v55 = 0;
    }
    v171 = v55;
    v172 = (unint64_t)v54;
    mlir::OperandRange::getTypes((uint64_t *)&v171, (uint64_t *)&v166);
    v56 = v166;
    v57 = (uint64_t)v167;
    v58 = v169;
    if (v166 != (void **)v168 || (v59 = 0, v167 != v169))
    {
      if (v166 != (void **)v168)
      {
        while (1)
          mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v56, v57++);
      }
      v59 = 0;
      do
      {
        v101 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v56, v57)
                                                + 8) & 0xFFFFFFFFFFFFFFF8)
                        + 136);
        if (v101 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v101 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          ++v59;
        }
        ++v57;
      }
      while (v58 != (const char *)v57);
    }
    if (v174)
    {
      LODWORD(v166) = 5;
      v167 = v59;
      v103 = &v166;
      v104 = (char *)v177;
      if (v178 >= v179)
      {
        v135 = v178 + 1;
        if (v177 <= &v166 && (char *)v177 + 24 * v178 > (char *)&v166)
        {
          v155 = (char *)&v166 - (unsigned char *)v177;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v135, 24);
          v104 = (char *)v177;
          v103 = (void ***)((char *)v177 + v155);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v135, 24);
          v103 = &v166;
          v104 = (char *)v177;
        }
      }
      v105 = &v104[24 * v178];
      v106 = *(_OWORD *)v103;
      *((void *)v105 + 2) = v103[2];
      *(_OWORD *)v105 = v106;
      v107 = ++v178;
      if (v174)
      {
        LODWORD(v166) = 3;
        v167 = ") to be equal to the number of output tensors (";
        v168 = 47;
        v108 = &v166;
        v109 = (char *)v177;
        if (v107 >= v179)
        {
          v136 = v107 + 1;
          v137 = (char *)v177 + 24 * v107 > (char *)&v166;
          if (v177 <= &v166 && v137)
          {
            v156 = (char *)&v166 - (unsigned char *)v177;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v136, 24);
            v109 = (char *)v177;
            v108 = (void ***)((char *)v177 + v156);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v136, 24);
            v108 = &v166;
            v109 = (char *)v177;
          }
        }
        v110 = &v109[24 * v178];
        v111 = *(_OWORD *)v108;
        *((void *)v110 + 2) = v108[2];
        *(_OWORD *)v110 = v111;
        v112 = ++v178;
        if (v174)
        {
          LODWORD(v166) = 5;
          v167 = (const char *)v190;
          v113 = &v166;
          v114 = (char *)v177;
          if (v112 >= v179)
          {
            v139 = v112 + 1;
            v140 = (char *)v177 + 24 * v112 > (char *)&v166;
            if (v177 <= &v166 && v140)
            {
              v158 = (char *)&v166 - (unsigned char *)v177;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v139, 24);
              v114 = (char *)v177;
              v113 = (void ***)((char *)v177 + v158);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v139, 24);
              v113 = &v166;
              v114 = (char *)v177;
            }
          }
          v115 = &v114[24 * v178];
          v116 = *(_OWORD *)v113;
          *((void *)v115 + 2) = v113[2];
          *(_OWORD *)v115 = v116;
          v117 = ++v178;
          if (v174)
          {
            LODWORD(v166) = 3;
            v167 = ")";
            v168 = 1;
            v118 = &v166;
            v119 = (char *)v177;
            if (v117 >= v179)
            {
              v143 = v117 + 1;
              v144 = (char *)v177 + 24 * v117 > (char *)&v166;
              if (v177 <= &v166 && v144)
              {
                v160 = (char *)&v166 - (unsigned char *)v177;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v143, 24);
                v119 = (char *)v177;
                v118 = (void ***)((char *)v177 + v160);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v143, 24);
                v118 = &v166;
                v119 = (char *)v177;
              }
            }
            v120 = &v119[24 * v178];
            v121 = *(_OWORD *)v118;
            *((void *)v120 + 2) = v118[2];
            *(_OWORD *)v120 = v121;
            ++v178;
          }
        }
      }
    }
    unint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
    if (v174) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
    }
    if (!v185) {
      goto LABEL_144;
    }
    v122 = __p;
    if (__p)
    {
      v123 = v184;
      v124 = __p;
      if (v184 != __p)
      {
        do
          v123 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v123 - 1);
        while (v123 != v122);
        v124 = __p;
      }
      v184 = v122;
      operator delete(v124);
    }
    v125 = v181;
    if (v181)
    {
      v126 = v182;
      v127 = v181;
      if (v182 != v181)
      {
        do
        {
          v129 = *--v126;
          v128 = v129;
          *v126 = 0;
          if (v129) {
            MEMORY[0x21667D390](v128, 0x1000C8077774924);
          }
        }
        while (v126 != v125);
        v127 = v181;
      }
      v182 = v125;
      operator delete(v127);
    }
    v130 = v177;
    if (v177 == v180) {
      goto LABEL_144;
    }
LABEL_143:
    free(v130);
    goto LABEL_144;
  }
  if (!v190)
  {
    unint64_t v2 = 1;
    goto LABEL_144;
  }
  v45 = v189;
  v46 = 8 * v24;
  while (1)
  {
    v47 = *v45;
    (*v9)((void ***)&v174, v9, this);
    v48 = (void *)mlir::MutableOperandRange::operator mlir::OperandRange((unsigned int *)&v174);
    v50 = v49;
    if (v176 != &v178) {
      free(v176);
    }
    v174 = v48;
    v175 = v50;
    v51 = mlir::OpOperand::getOperandNumber(v47);
    v52 = v51 - mlir::OperandRange::getBeginOperandIndex((mlir::OperandRange *)&v174);
    v53 = v52 <= 5 ? (mlir::detail *)((char *)this - 16 * v52 - 16) : (mlir::detail *)((char *)this - 24 * v52 + 24);
    if ((*((void *)v53 + 1) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)(v47 + 24) + 8) & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    ++v45;
    v46 -= 8;
    if (!v46)
    {
      unint64_t v2 = 1;
      goto LABEL_144;
    }
  }
  v186[0] = (void **)"expected type of operand #";
  v188[0] = 259;
  mlir::Operation::emitOpError((uint64_t)this, v186, (uint64_t)&v174);
  v60 = mlir::OpOperand::getOperandNumber(v47);
  if (v174)
  {
    LODWORD(v166) = 5;
    v167 = (const char *)v60;
    v61 = &v166;
    v62 = (char *)v177;
    if (v178 >= v179)
    {
      v138 = v178 + 1;
      if (v177 <= &v166 && (char *)v177 + 24 * v178 > (char *)&v166)
      {
        v157 = (char *)&v166 - (unsigned char *)v177;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v138, 24);
        v62 = (char *)v177;
        v61 = (void ***)((char *)v177 + v157);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v138, 24);
        v61 = &v166;
        v62 = (char *)v177;
      }
    }
    v63 = &v62[24 * v178];
    v64 = *(_OWORD *)v61;
    *((void *)v63 + 2) = v61[2];
    *(_OWORD *)v63 = v64;
    v65 = ++v178;
    if (v174)
    {
      LODWORD(v166) = 3;
      v167 = " (";
      v168 = 2;
      v66 = &v166;
      v67 = (char *)v177;
      if (v65 >= v179)
      {
        v141 = v65 + 1;
        v142 = (char *)v177 + 24 * v65 > (char *)&v166;
        if (v177 <= &v166 && v142)
        {
          v159 = (char *)&v166 - (unsigned char *)v177;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v141, 24);
          v67 = (char *)v177;
          v66 = (void ***)((char *)v177 + v159);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v141, 24);
          v66 = &v166;
          v67 = (char *)v177;
        }
      }
      v68 = &v67[24 * v178];
      v69 = *(_OWORD *)v66;
      *((void *)v68 + 2) = v66[2];
      *(_OWORD *)v68 = v69;
      ++v178;
      if (v174)
      {
        v70 = &v166;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v166, *(void *)(*(void *)(v47 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        v71 = (char *)v177;
        if (v178 >= v179)
        {
          v145 = v178 + 1;
          if (v177 <= &v166 && (char *)v177 + 24 * v178 > (char *)&v166)
          {
            v161 = (char *)&v166 - (unsigned char *)v177;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v145, 24);
            v71 = (char *)v177;
            v70 = (void ***)((char *)v177 + v161);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v145, 24);
            v70 = &v166;
            v71 = (char *)v177;
          }
        }
        v72 = &v71[24 * v178];
        v73 = *(_OWORD *)v70;
        *((void *)v72 + 2) = v70[2];
        *(_OWORD *)v72 = v73;
        v74 = ++v178;
        if (v174)
        {
          LODWORD(v166) = 3;
          v167 = ")";
          v168 = 1;
          v75 = &v166;
          v76 = (char *)v177;
          if (v74 >= v179)
          {
            v146 = v74 + 1;
            v147 = (char *)v177 + 24 * v74 > (char *)&v166;
            if (v177 <= &v166 && v147)
            {
              v162 = (char *)&v166 - (unsigned char *)v177;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v146, 24);
              v76 = (char *)v177;
              v75 = (void ***)((char *)v177 + v162);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v146, 24);
              v75 = &v166;
              v76 = (char *)v177;
            }
          }
          v77 = &v76[24 * v178];
          v78 = *(_OWORD *)v75;
          *((void *)v77 + 2) = v75[2];
          *(_OWORD *)v77 = v78;
          v79 = ++v178;
          if (v174)
          {
            LODWORD(v166) = 3;
            v167 = " to match type of corresponding result (";
            v168 = 40;
            v80 = &v166;
            v81 = (char *)v177;
            if (v79 >= v179)
            {
              v148 = v79 + 1;
              v149 = (char *)v177 + 24 * v79 > (char *)&v166;
              if (v177 <= &v166 && v149)
              {
                v163 = (char *)&v166 - (unsigned char *)v177;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v148, 24);
                v81 = (char *)v177;
                v80 = (void ***)((char *)v177 + v163);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v148, 24);
                v80 = &v166;
                v81 = (char *)v177;
              }
            }
            v82 = &v81[24 * v178];
            v83 = *(_OWORD *)v80;
            *((void *)v82 + 2) = v80[2];
            *(_OWORD *)v82 = v83;
            ++v178;
            if (v174)
            {
              v84 = &v166;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v166, *((void *)v53 + 1) & 0xFFFFFFFFFFFFFFF8);
              v85 = (char *)v177;
              if (v178 >= v179)
              {
                v150 = v178 + 1;
                if (v177 <= &v166 && (char *)v177 + 24 * v178 > (char *)&v166)
                {
                  v164 = (char *)&v166 - (unsigned char *)v177;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v150, 24);
                  v85 = (char *)v177;
                  v84 = (void ***)((char *)v177 + v164);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v150, 24);
                  v84 = &v166;
                  v85 = (char *)v177;
                }
              }
              v86 = &v85[24 * v178];
              v87 = *(_OWORD *)v84;
              *((void *)v86 + 2) = v84[2];
              *(_OWORD *)v86 = v87;
              v88 = ++v178;
              if (v174)
              {
                LODWORD(v166) = 3;
                v167 = ")";
                v168 = 1;
                v89 = &v166;
                v90 = (char *)v177;
                if (v88 >= v179)
                {
                  v151 = v88 + 1;
                  v152 = (char *)v177 + 24 * v88 > (char *)&v166;
                  if (v177 <= &v166 && v152)
                  {
                    v165 = (char *)&v166 - (unsigned char *)v177;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v151, 24);
                    v90 = (char *)v177;
                    v89 = (void ***)((char *)v177 + v165);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v180, v151, 24);
                    v89 = &v166;
                    v90 = (char *)v177;
                  }
                }
                v91 = &v90[24 * v178];
                v92 = *(_OWORD *)v89;
                *((void *)v91 + 2) = v89[2];
                *(_OWORD *)v91 = v92;
                ++v178;
              }
            }
          }
        }
      }
    }
  }
  unint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
  if (v174) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
  }
  if (v185)
  {
    v93 = __p;
    if (__p)
    {
      v94 = v184;
      v95 = __p;
      if (v184 != __p)
      {
        do
          v94 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v94 - 1);
        while (v94 != v93);
        v95 = __p;
      }
      v184 = v93;
      operator delete(v95);
    }
    v96 = v181;
    if (v181)
    {
      v97 = v182;
      v98 = v181;
      if (v182 != v181)
      {
        do
        {
          v100 = *--v97;
          v99 = v100;
          *v97 = 0;
          if (v100) {
            MEMORY[0x21667D390](v99, 0x1000C8077774924);
          }
        }
        while (v97 != v96);
        v98 = v181;
      }
      v182 = v96;
      operator delete(v98);
    }
    v130 = v177;
    if (v177 != v180) {
      goto LABEL_143;
    }
  }
LABEL_144:
  if (v189 != v191) {
    free(v189);
  }
  return v2;
}

llvm::APInt *mlir::intrange::truncRange@<X0>(mlir::intrange *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3 = a2;
  ZinIrHalH13g::~ZinIrHalH13g(this);
  unsigned int v7 = *((_DWORD *)v6 + 2);
  unsigned int v51 = v7;
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v50, v6);
  }
  unint64_t v50 = *(void *)v6;
  if (v7 == v3) {
    unint64_t v50 = 0;
  }
  else {
    v50 >>= v3;
  }
  AneIndex = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(this);
  unsigned int v9 = *((_DWORD *)AneIndex + 2);
  unsigned int v49 = v9;
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v48, AneIndex);
  }
  unint64_t v48 = *(void *)AneIndex;
  if (v9 == v3)
  {
    unint64_t v48 = 0;
    unsigned int v10 = v51;
    if (v51 > 0x40)
    {
LABEL_16:
      BOOL v11 = llvm::APInt::equalSlowCase((const void **)&v50, (const void **)&v48);
      if (v49 < 0x41) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    v48 >>= v3;
    unsigned int v10 = v51;
    if (v51 > 0x40) {
      goto LABEL_16;
    }
  }
  BOOL v11 = v50 == v48;
  if (v49 < 0x41) {
    goto LABEL_19;
  }
LABEL_17:
  if (v48)
  {
    MEMORY[0x21667D390](v48, 0x1000C8000313F17);
    unsigned int v10 = v51;
  }
LABEL_19:
  if (v10 >= 0x41 && v50) {
    MEMORY[0x21667D390](v50, 0x1000C8000313F17);
  }
  if (v11)
  {
    ZinIrHalH13g::~ZinIrHalH13g(this);
    llvm::APInt::trunc(v12, v3, (uint64_t)&v50);
    uint64_t v13 = ZinBondedInfo::GetAneIndex(this);
    llvm::APInt::trunc(v13, v3, (uint64_t)&v48);
  }
  else
  {
    unsigned int v51 = v3;
    if (v3 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v50);
    }
    unint64_t v50 = 0;
    unsigned int v49 = v3;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    if (!v3) {
      unint64_t v14 = 0;
    }
    unint64_t v48 = v14;
  }
  PaddingInfo = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(this);
  unsigned int v16 = v3 - 1;
  unsigned int v17 = *((_DWORD *)PaddingInfo + 2);
  unsigned int v47 = v17;
  if (v17 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v46, PaddingInfo);
  }
  if (v17 == v16) {
    char v18 = 63;
  }
  else {
    char v18 = v3 - 1;
  }
  uint64_t v19 = (uint64_t)(*(void *)PaddingInfo << -(char)v17) >> -(char)v17 >> v18;
  if (v17) {
    unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
  }
  else {
    unint64_t v20 = 0;
  }
  v46 = (llvm::APInt *)(v20 & v19);
  uint64_t v21 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(this);
  unsigned int v22 = *((_DWORD *)v21 + 2);
  unsigned int v45 = v22;
  if (v22 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v44, v21);
  }
  if (v22 == v16) {
    char v23 = 63;
  }
  else {
    char v23 = v3 - 1;
  }
  uint64_t v24 = (uint64_t)(*(void *)v21 << -(char)v22) >> -(char)v22 >> v23;
  if (v22) {
    unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
  }
  else {
    unint64_t v25 = 0;
  }
  v44 = (llvm::APInt *)(v25 & v24);
  unsigned int v26 = v47;
  if (v47 > 0x40)
  {
    if (llvm::APInt::equalSlowCase((const void **)&v46, (const void **)&v44)) {
      goto LABEL_72;
    }
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v46) != v26) {
      goto LABEL_63;
    }
  }
  else
  {
    if (v46 == v44) {
      goto LABEL_72;
    }
    if (v47 && v46 != (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v47))
    {
      if (v46) {
        goto LABEL_66;
      }
      goto LABEL_64;
    }
  }
  unsigned int v27 = v45;
  if (!v45) {
    goto LABEL_72;
  }
  if (v45 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v44) == v27
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v44) == v27)
    {
      goto LABEL_72;
    }
  }
  else if (v44 == (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v45) || !v44)
  {
    goto LABEL_72;
  }
  if (v26 <= 0x40)
  {
    if (v46) {
      goto LABEL_66;
    }
    goto LABEL_64;
  }
LABEL_63:
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v46) != v26) {
    goto LABEL_66;
  }
LABEL_64:
  unsigned int v28 = v45;
  if (v45 <= 0x40)
  {
    if (v44) {
      goto LABEL_66;
    }
LABEL_72:
    uint64_t v30 = ZinSpatialSplitTransform::GetPaddingInfo(this);
    llvm::APInt::trunc(v30, v3, (uint64_t)&v42);
    uint64_t v31 = mlir::ConstantIntRanges::smax(this);
    llvm::APInt::trunc(v31, v3, (uint64_t)&v40);
    unsigned int v32 = v51;
    a3[2] = v51;
    if (v32 > 0x40) {
      goto LABEL_78;
    }
    goto LABEL_73;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v44) == v28) {
    goto LABEL_72;
  }
LABEL_66:
  unsigned int v43 = v3;
  if (v3 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v42);
  }
  v42 = (llvm::APInt *)(1 << v16);
  unsigned int v41 = v3;
  unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
  if (!v3) {
    unint64_t v29 = 0;
  }
  unint64_t v40 = v29;
  v40 &= ~(1 << v16);
  unsigned int v35 = v51;
  a3[2] = v51;
  if (v35 > 0x40) {
LABEL_78:
  }
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v50);
LABEL_73:
  *(void *)a3 = v50;
  uint64_t v33 = (llvm::APInt *)(a3 + 4);
  unsigned int v34 = v49;
  a3[6] = v49;
  if (v34 > 0x40) {
    llvm::APInt::initSlowCase(v33, (const llvm::APInt *)&v48);
  }
  *(void *)uint64_t v33 = v48;
  v36 = (llvm::APInt *)(a3 + 8);
  unsigned int v37 = v43;
  a3[10] = v43;
  if (v37 > 0x40) {
    llvm::APInt::initSlowCase(v36, (const llvm::APInt *)&v42);
  }
  *(void *)v36 = v42;
  __n128 result = (llvm::APInt *)(a3 + 12);
  unsigned int v39 = v41;
  a3[14] = v41;
  if (v39 > 0x40) {
    llvm::APInt::initSlowCase(result, (const llvm::APInt *)&v40);
  }
  *(void *)__n128 result = v40;
  if (v43 >= 0x41)
  {
    __n128 result = v42;
    if (v42) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v42, 0x1000C8000313F17);
    }
  }
  if (v45 >= 0x41)
  {
    __n128 result = v44;
    if (v44) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v44, 0x1000C8000313F17);
    }
  }
  if (v47 >= 0x41)
  {
    __n128 result = v46;
    if (v46) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v46, 0x1000C8000313F17);
    }
  }
  if (v49 >= 0x41)
  {
    __n128 result = (llvm::APInt *)v48;
    if (v48) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v48, 0x1000C8000313F17);
    }
  }
  if (v51 >= 0x41)
  {
    __n128 result = (llvm::APInt *)v50;
    if (v50) {
      return (llvm::APInt *)MEMORY[0x21667D390](v50, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *mlir::intrange::extUIRange@<X0>(mlir::intrange *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3 = a2;
  ZinIrHalH13g::~ZinIrHalH13g(this);
  llvm::APInt::zext(v6, v3, (uint64_t)&v11);
  AneIndex = (uint64_t *)ZinBondedInfo::GetAneIndex(this);
  llvm::APInt::zext(AneIndex, v3, (uint64_t)&v9);
  __n128 result = mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v11, (const llvm::APInt *)&v9, a3);
  if (v10 >= 0x41)
  {
    __n128 result = v9;
    if (v9) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v9, 0x1000C8000313F17);
    }
  }
  if (v12 >= 0x41)
  {
    __n128 result = v11;
    if (v11) {
      return (llvm::APInt *)MEMORY[0x21667D390](v11, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *mlir::intrange::extSIRange@<X0>(mlir::intrange *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(this);
  llvm::APInt::sext(PaddingInfo, v3, (uint64_t)&v12);
  uint64_t v7 = mlir::ConstantIntRanges::smax(this);
  llvm::APInt::sext(v7, v3, (uint64_t)&v10);
  __n128 result = mlir::ConstantIntRanges::fromSigned((mlir::ConstantIntRanges *)&v12, (const llvm::APInt *)&v10, v8, a3);
  if (v11 >= 0x41)
  {
    __n128 result = v10;
    if (v10) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    __n128 result = v12;
    if (v12) {
      return (llvm::APInt *)MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *mlir::intrange::inferAdd@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  uint64_t v6 = v5;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  uint64_t v8 = v7;
  uint64_t AneIndex = ZinBondedInfo::GetAneIndex(a1);
  uint64_t v10 = ZinBondedInfo::GetAneIndex(v4);
  computeBoundsBy(&v24, (void (*)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v24, v6, v8, AneIndex, v10, 0);
  uint64_t PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(a1);
  uint64_t v12 = ZinSpatialSplitTransform::GetPaddingInfo(v4);
  uint64_t v13 = mlir::ConstantIntRanges::smax(a1);
  uint64_t v14 = mlir::ConstantIntRanges::smax(v4);
  computeBoundsBy(&v16, (void (*)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>, (uint64_t)&v24, PaddingInfo, v12, v13, v14, (const llvm::APInt *)1);
  __n128 result = mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v24, (const mlir::ConstantIntRanges *)&v16, a2);
  if (v23 >= 0x41)
  {
    __n128 result = v22;
    if (v22) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v22, 0x1000C8000313F17);
    }
  }
  if (v21 >= 0x41)
  {
    __n128 result = v20;
    if (v20) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    __n128 result = v18;
    if (v18) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    __n128 result = v16;
    if (v16) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v31 >= 0x41)
  {
    __n128 result = v30;
    if (v30) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v30, 0x1000C8000313F17);
    }
  }
  if (v29 >= 0x41)
  {
    __n128 result = v28;
    if (v28) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v28, 0x1000C8000313F17);
    }
  }
  if (v27 >= 0x41)
  {
    __n128 result = v26;
    if (v26) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v26, 0x1000C8000313F17);
    }
  }
  if (v25 >= 0x41)
  {
    __n128 result = v24;
    if (v24) {
      return (llvm::APInt *)MEMORY[0x21667D390](v24, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *computeBoundsBy(_DWORD *a1, void (*a2)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const llvm::APInt *a8)
{
  a2(&v20, a3, a4, a5);
  a2(&v17, a3, a6, a7);
  if (v22) {
    BOOL v15 = v19 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    __n128 result = mlir::ConstantIntRanges::maxRange((mlir::ConstantIntRanges *)*(unsigned int *)(a4 + 8), a1);
    if (!v19) {
      goto LABEL_12;
    }
  }
  else
  {
    __n128 result = mlir::ConstantIntRanges::range((mlir::ConstantIntRanges *)&v20, (const llvm::APInt *)&v17, a8, a1);
    if (!v19) {
      goto LABEL_12;
    }
  }
  if (v18 >= 0x41)
  {
    __n128 result = v17;
    if (v17) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v17, 0x1000C8000313F17);
    }
  }
LABEL_12:
  if (v22 && v21 >= 0x41)
  {
    __n128 result = v20;
    if (v20) {
      return (llvm::APInt *)MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *mlir::intrange::inferSub@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  uint64_t v6 = v5;
  uint64_t AneIndex = ZinBondedInfo::GetAneIndex(v4);
  uint64_t v8 = ZinBondedInfo::GetAneIndex(a1);
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  computeBoundsBy(&v23, (void (*)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v23, v6, AneIndex, v8, v9, 0);
  uint64_t PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(a1);
  uint64_t v11 = mlir::ConstantIntRanges::smax(v4);
  uint64_t v12 = mlir::ConstantIntRanges::smax(a1);
  uint64_t v13 = ZinSpatialSplitTransform::GetPaddingInfo(v4);
  computeBoundsBy(&v15, (void (*)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>, (uint64_t)&v23, PaddingInfo, v11, v12, v13, (const llvm::APInt *)1);
  __n128 result = mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v23, (const mlir::ConstantIntRanges *)&v15, a2);
  if (v22 >= 0x41)
  {
    __n128 result = v21;
    if (v21) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v21, 0x1000C8000313F17);
    }
  }
  if (v20 >= 0x41)
  {
    __n128 result = v19;
    if (v19) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v19, 0x1000C8000313F17);
    }
  }
  if (v18 >= 0x41)
  {
    __n128 result = v17;
    if (v17) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v17, 0x1000C8000313F17);
    }
  }
  if (v16 >= 0x41)
  {
    __n128 result = v15;
    if (v15) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v15, 0x1000C8000313F17);
    }
  }
  if (v30 >= 0x41)
  {
    __n128 result = v29;
    if (v29) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v29, 0x1000C8000313F17);
    }
  }
  if (v28 >= 0x41)
  {
    __n128 result = v27;
    if (v27) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v27, 0x1000C8000313F17);
    }
  }
  if (v26 >= 0x41)
  {
    __n128 result = v25;
    if (v25) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v25, 0x1000C8000313F17);
    }
  }
  if (v24 >= 0x41)
  {
    __n128 result = v23;
    if (v23) {
      return (llvm::APInt *)MEMORY[0x21667D390](v23, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *mlir::intrange::inferMul@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  unsigned int v27 = *((_DWORD *)v5 + 2);
  if (v27 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, v5);
  }
  unsigned int v26 = *(llvm::APInt **)v5;
  uint64_t AneIndex = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a1);
  unsigned int v29 = *((_DWORD *)AneIndex + 2);
  if (v29 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v28, AneIndex);
  }
  unsigned int v28 = *(llvm::APInt **)AneIndex;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  unsigned int v35 = *((_DWORD *)v7 + 2);
  if (v35 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, v7);
  }
  uint64_t v34 = *(void *)v7;
  uint64_t v8 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  unsigned int v37 = *((_DWORD *)v8 + 2);
  if (v37 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, v8);
  }
  uint64_t v36 = *(void *)v8;
  minMaxBy(&v14, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v26, 2, (uint64_t)&v34, 2, 0);
  if (v37 >= 0x41 && v36) {
    MEMORY[0x21667D390](v36, 0x1000C8000313F17);
  }
  if (v35 >= 0x41 && v34) {
    MEMORY[0x21667D390](v34, 0x1000C8000313F17);
  }
  if (v29 >= 0x41 && v28) {
    MEMORY[0x21667D390](v28, 0x1000C8000313F17);
  }
  if (v27 >= 0x41 && v26) {
    MEMORY[0x21667D390](v26, 0x1000C8000313F17);
  }
  uint64_t PaddingInfo = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a1);
  unsigned int v35 = *((_DWORD *)PaddingInfo + 2);
  if (v35 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, PaddingInfo);
  }
  uint64_t v34 = *(void *)PaddingInfo;
  uint64_t v10 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  unsigned int v37 = *((_DWORD *)v10 + 2);
  if (v37 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, v10);
  }
  uint64_t v36 = *(void *)v10;
  uint64_t v11 = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(v4);
  unsigned int v23 = *((_DWORD *)v11 + 2);
  if (v23 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v22, v11);
  }
  uint64_t v22 = *(void *)v11;
  uint64_t v12 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v4);
  unsigned int v25 = *((_DWORD *)v12 + 2);
  if (v25 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, v12);
  }
  uint64_t v24 = *(void *)v12;
  minMaxBy(&v26, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>, (uint64_t)&v14, (uint64_t)&v34, 2, (uint64_t)&v22, 2, (llvm::APInt *)1);
  if (v25 >= 0x41 && v24) {
    MEMORY[0x21667D390](v24, 0x1000C8000313F17);
  }
  if (v23 >= 0x41 && v22) {
    MEMORY[0x21667D390](v22, 0x1000C8000313F17);
  }
  if (v37 >= 0x41 && v36) {
    MEMORY[0x21667D390](v36, 0x1000C8000313F17);
  }
  if (v35 >= 0x41 && v34) {
    MEMORY[0x21667D390](v34, 0x1000C8000313F17);
  }
  __n128 result = mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v14, (const mlir::ConstantIntRanges *)&v26, a2);
  if (v33 >= 0x41)
  {
    __n128 result = v32;
    if (v32) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v32, 0x1000C8000313F17);
    }
  }
  if (v31 >= 0x41)
  {
    __n128 result = v30;
    if (v30) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v30, 0x1000C8000313F17);
    }
  }
  if (v29 >= 0x41)
  {
    __n128 result = v28;
    if (v28) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v28, 0x1000C8000313F17);
    }
  }
  if (v27 >= 0x41)
  {
    __n128 result = v26;
    if (v26) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v26, 0x1000C8000313F17);
    }
  }
  if (v21 >= 0x41)
  {
    __n128 result = v20;
    if (v20) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    __n128 result = v18;
    if (v18) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    __n128 result = v16;
    if (v16) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    __n128 result = v14;
    if (v14) {
      return (llvm::APInt *)MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  return result;
}

void *minMaxBy(_DWORD *a1, void (*a2)(void **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, llvm::APInt *a8)
{
  uint64_t v9 = a6;
  uint64_t v10 = a4;
  uint64_t v14 = (mlir::ConstantIntRanges *)*(unsigned int *)(a4 + 8);
  unsigned int v36 = *(_DWORD *)(a4 + 8);
  if (a8)
  {
    if (v14 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v35);
    }
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    if (!v14) {
      unint64_t v15 = 0;
    }
    unsigned int v35 = (void *)(v15 & ~(1 << (v14 - 1)));
    unsigned int v34 = v14;
    unint64_t v33 = 0;
    v33 |= 1 << (v14 - 1);
    if (!a5) {
      goto LABEL_47;
    }
  }
  else
  {
    if (v14 >= 0x41) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v35);
    }
    unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    if (!v14) {
      unint64_t v16 = 0;
    }
    unsigned int v35 = (void *)v16;
    unsigned int v34 = v14;
    unint64_t v33 = 0;
    if (!a5) {
      goto LABEL_47;
    }
  }
  if (a7)
  {
    uint64_t v17 = 16 * a7;
    uint64_t v25 = a4 + 16 * a5;
    uint64_t v26 = 16 * a7;
    do
    {
      uint64_t v18 = v9;
      do
      {
        a2(&v30, a3, v10, v18);
        int v19 = v32;
        if (!v32)
        {
          __n128 result = mlir::ConstantIntRanges::maxRange(v14, a1);
          goto LABEL_40;
        }
        unsigned int v29 = v31;
        unsigned int v28 = v30;
        unsigned int v31 = 0;
        unsigned int v20 = &v28;
        if (a8)
        {
          if ((llvm::APInt::compareSigned((llvm::APInt *)&v28, (const llvm::APInt *)&v35) & 0x80000000) != 0) {
            goto LABEL_24;
          }
LABEL_23:
          unsigned int v20 = &v35;
          goto LABEL_24;
        }
        if ((llvm::APInt::compare((llvm::APInt *)&v28, (const llvm::APInt *)&v35) & 0x80000000) == 0) {
          goto LABEL_23;
        }
LABEL_24:
        if (v36 > 0x40 || (unsigned int v22 = *((_DWORD *)v20 + 2), v22 > 0x40))
        {
          llvm::APInt::assignSlowCase((unsigned int *)&v35, (const llvm::APInt *)v20);
          unsigned int v23 = &v28;
          if (!a8)
          {
LABEL_27:
            __n128 result = (void *)llvm::APInt::compare((llvm::APInt *)&v28, (const llvm::APInt *)&v33);
            if ((int)result > 0) {
              goto LABEL_31;
            }
            goto LABEL_33;
          }
        }
        else
        {
          unsigned int v35 = *v20;
          unsigned int v36 = v22;
          unsigned int v23 = &v28;
          if (!a8) {
            goto LABEL_27;
          }
        }
        __n128 result = (void *)llvm::APInt::compareSigned((llvm::APInt *)&v28, (const llvm::APInt *)&v33);
        if ((int)result > 0)
        {
LABEL_31:
          if (v34 > 0x40) {
            goto LABEL_37;
          }
          goto LABEL_34;
        }
LABEL_33:
        unsigned int v23 = (void **)&v33;
        if (v34 > 0x40) {
          goto LABEL_37;
        }
LABEL_34:
        unsigned int v24 = *((_DWORD *)v23 + 2);
        if (v24 > 0x40)
        {
LABEL_37:
          __n128 result = llvm::APInt::assignSlowCase((unsigned int *)&v33, (const llvm::APInt *)v23);
          if (v29 < 0x41) {
            goto LABEL_40;
          }
          goto LABEL_38;
        }
        unint64_t v33 = (unint64_t)*v23;
        unsigned int v34 = v24;
        if (v29 < 0x41) {
          goto LABEL_40;
        }
LABEL_38:
        __n128 result = v28;
        if (v28) {
          __n128 result = (void *)MEMORY[0x21667D390](v28, 0x1000C8000313F17);
        }
LABEL_40:
        if (v32)
        {
          if (v31 >= 0x41)
          {
            __n128 result = v30;
            if (v30) {
              __n128 result = (void *)MEMORY[0x21667D390](v30, 0x1000C8000313F17);
            }
          }
        }
        if (!v19) {
          goto LABEL_48;
        }
        v18 += 16;
        v17 -= 16;
      }
      while (v17);
      v10 += 16;
      uint64_t v17 = v26;
      uint64_t v9 = a6;
    }
    while (v10 != v25);
  }
LABEL_47:
  __n128 result = mlir::ConstantIntRanges::range((mlir::ConstantIntRanges *)&v35, (const llvm::APInt *)&v33, a8, a1);
LABEL_48:
  if (v34 >= 0x41)
  {
    __n128 result = (void *)v33;
    if (v33) {
      __n128 result = (void *)MEMORY[0x21667D390](v33, 0x1000C8000313F17);
    }
  }
  if (v36 >= 0x41)
  {
    __n128 result = v35;
    if (v35) {
      return (void *)MEMORY[0x21667D390](v35, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *mlir::intrange::inferDivU@<X0>(ZinIrHalH13g *this@<X0>, _DWORD *a2@<X8>)
{
  return inferDivURange(a2, this, (ZinIrHalH13g *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *inferDivURange(_DWORD *a1, ZinIrHalH13g *this, ZinIrHalH13g *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  v17[0] = a4;
  v17[1] = a5;
  ZinIrHalH13g::~ZinIrHalH13g(this);
  uint64_t v9 = v8;
  uint64_t AneIndex = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(this);
  ZinIrHalH13g::~ZinIrHalH13g(a3);
  uint64_t v12 = v11;
  uint64_t v13 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a3);
  uint64_t v14 = (mlir::ConstantIntRanges *)v12[2];
  if (v14 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v12) != v14) {
      goto LABEL_3;
    }
  }
  else if (*(void *)v12)
  {
LABEL_3:
    unint64_t v16 = v17;
    unsigned int v23 = *((_DWORD *)v9 + 2);
    if (v23 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v22, v9);
    }
    unsigned int v22 = *(llvm::APInt **)v9;
    unsigned int v25 = *((_DWORD *)AneIndex + 2);
    if (v25 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v24, AneIndex);
    }
    unsigned int v24 = *(llvm::APInt **)AneIndex;
    unsigned int v19 = v12[2];
    if (v19 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v18, (const llvm::APInt *)v12);
    }
    uint64_t v18 = *(llvm::APInt **)v12;
    unsigned int v21 = *((_DWORD *)v13 + 2);
    if (v21 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v20, v13);
    }
    unsigned int v20 = *(llvm::APInt **)v13;
    __n128 result = (llvm::APInt *)minMaxBy(a1, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivURange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>, (uint64_t)&v16, (uint64_t)&v22, 2, (uint64_t)&v18, 2, 0);
    if (v21 >= 0x41)
    {
      __n128 result = v20;
      if (v20) {
        __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v20, 0x1000C8000313F17);
      }
    }
    if (v19 >= 0x41)
    {
      __n128 result = v18;
      if (v18) {
        __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v18, 0x1000C8000313F17);
      }
    }
    if (v25 >= 0x41)
    {
      __n128 result = v24;
      if (v24) {
        __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v24, 0x1000C8000313F17);
      }
    }
    if (v23 >= 0x41)
    {
      __n128 result = v22;
      if (v22) {
        return (llvm::APInt *)MEMORY[0x21667D390](v22, 0x1000C8000313F17);
      }
    }
    return result;
  }

  return mlir::ConstantIntRanges::maxRange(v14, a1);
}

llvm::APInt *mlir::intrange::inferCeilDivU@<X0>(ZinIrHalH13g *this@<X0>, _DWORD *a2@<X8>)
{
  return inferDivURange(a2, this, (ZinIrHalH13g *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *mlir::intrange::inferDivS@<X0>(ZinSpatialSplitTransform *this@<X0>, _DWORD *a2@<X8>)
{
  return inferDivSRange(a2, this, (ZinSpatialSplitTransform *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *inferDivSRange(_DWORD *a1, ZinSpatialSplitTransform *this, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  v19[0] = a4;
  v19[1] = a5;
  uint64_t PaddingInfo = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(this);
  uint64_t v9 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(this);
  uint64_t v10 = (unsigned int *)ZinSpatialSplitTransform::GetPaddingInfo(a3);
  uint64_t v11 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
  uint64_t v12 = (mlir::ConstantIntRanges *)v10[2];
  unsigned int v13 = v12 - 1;
  if (v12 > 0x40)
  {
    if (((*(void *)(*(void *)v10 + 8 * (v13 >> 6)) >> v13) & 1) != 0
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v10) == v12)
    {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v18 = v19;
    unsigned int v25 = *((_DWORD *)PaddingInfo + 2);
    if (v25 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v24, PaddingInfo);
    }
    unsigned int v24 = *(llvm::APInt **)PaddingInfo;
    unsigned int v27 = *((_DWORD *)v9 + 2);
    if (v27 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v26, v9);
    }
    uint64_t v26 = *(llvm::APInt **)v9;
    unsigned int v21 = v10[2];
    if (v21 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v20, (const llvm::APInt *)v10);
    }
    unsigned int v20 = *(llvm::APInt **)v10;
    unsigned int v23 = *((_DWORD *)v11 + 2);
    if (v23 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v22, v11);
    }
    unsigned int v22 = *(llvm::APInt **)v11;
    __n128 result = (llvm::APInt *)minMaxBy(a1, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivSRange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>, (uint64_t)&v18, (uint64_t)&v24, 2, (uint64_t)&v20, 2, (llvm::APInt *)1);
    if (v23 >= 0x41)
    {
      __n128 result = v22;
      if (v22) {
        __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v22, 0x1000C8000313F17);
      }
    }
    if (v21 >= 0x41)
    {
      __n128 result = v20;
      if (v20) {
        __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v20, 0x1000C8000313F17);
      }
    }
    if (v27 >= 0x41)
    {
      __n128 result = v26;
      if (v26) {
        __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v26, 0x1000C8000313F17);
      }
    }
    if (v25 >= 0x41)
    {
      __n128 result = v24;
      if (v24) {
        return (llvm::APInt *)MEMORY[0x21667D390](v24, 0x1000C8000313F17);
      }
    }
    return result;
  }
  if (((*(void *)v10 >> v13) & 1) == 0 && *(void *)v10) {
    goto LABEL_11;
  }
LABEL_7:
  unsigned int v14 = *((_DWORD *)v11 + 2);
  char v15 = v14 - 1;
  if (v14 >= 0x41) {
    unint64_t v16 = (const llvm::APInt *)(*(void *)v11 + 8 * ((v14 - 1) >> 6));
  }
  else {
    unint64_t v16 = v11;
  }
  if ((*(void *)v16 >> v15)) {
    goto LABEL_11;
  }

  return mlir::ConstantIntRanges::maxRange(v12, a1);
}

llvm::APInt *mlir::intrange::inferCeilDivS@<X0>(ZinSpatialSplitTransform *this@<X0>, _DWORD *a2@<X8>)
{
  return inferDivSRange(a2, this, (ZinSpatialSplitTransform *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *mlir::intrange::inferFloorDivS@<X0>(ZinSpatialSplitTransform *this@<X0>, _DWORD *a2@<X8>)
{
  return inferDivSRange(a2, this, (ZinSpatialSplitTransform *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferFloorDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *mlir::intrange::inferRemS@<X0>(ZinSpatialSplitTransform *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = (ZinSpatialSplitTransform *)((char *)a1 + 64);
  uint64_t PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(a1);
  uint64_t v6 = (llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  uint64_t v7 = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(v4);
  uint64_t v9 = (_DWORD *)mlir::ConstantIntRanges::smax(v4);
  unsigned int v10 = v9[2];
  unsigned int v64 = v10;
  if (v10 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v63);
  }
  uint64_t v63 = 1 << (v10 - 1);
  unsigned int v62 = v10;
  unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> ((v10 - 1) & 0x3F ^ 0x3F);
  if (!v10) {
    unint64_t v11 = 0;
  }
  unint64_t v61 = v11;
  v61 &= ~(1 << (v10 - 1));
  unsigned int v12 = *((_DWORD *)v7 + 2);
  unsigned int v13 = v12 - 1;
  if (v12 > 0x40)
  {
    unint64_t v15 = *(void *)v7;
    if (((*(void *)(*(void *)v7 + 8 * (v13 >> 6)) >> v13) & 1) == 0
      && llvm::APInt::countLeadingZerosSlowCase(v7) != v12)
    {
      goto LABEL_17;
    }
    unint64_t v14 = v15;
  }
  else
  {
    unint64_t v14 = *(void *)v7;
    if (((*(void *)v7 >> v13) & 1) == 0 && v14) {
      goto LABEL_21;
    }
    unint64_t v15 = *(void *)v7;
  }
  unsigned int v16 = v9[2];
  char v17 = v16 - 1;
  if (v16 >= 0x41) {
    uint64_t v18 = (void *)(*(void *)v9 + 8 * ((v16 - 1) >> 6));
  }
  else {
    uint64_t v18 = v9;
  }
  if (((*v18 >> v17) & 1) == 0) {
    goto LABEL_104;
  }
  if (v12 <= 0x40)
  {
LABEL_21:
    if (((v14 >> v13) & 1) == 0 && v14) {
      goto LABEL_23;
    }
LABEL_25:
    llvm::APInt::abs((uint64_t **)v7, (llvm::APInt *)&v59);
    goto LABEL_27;
  }
LABEL_17:
  if (((*(void *)(v15 + 8 * (v13 >> 6)) >> v13) & 1) != 0
    || llvm::APInt::countLeadingZerosSlowCase(v7) == v12)
  {
    goto LABEL_25;
  }
LABEL_23:
  unsigned int v60 = v9[2];
  if (v60 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v59, (const llvm::APInt *)v9);
  }
  v59 = *(unint64_t **)v9;
LABEL_27:
  unsigned int v19 = *(_DWORD *)(PaddingInfo + 8);
  char v20 = v19 - 1;
  if (v19 >= 0x41) {
    unsigned int v21 = (uint64_t *)(*(void *)PaddingInfo + 8 * ((v19 - 1) >> 6));
  }
  else {
    unsigned int v21 = (uint64_t *)PaddingInfo;
  }
  uint64_t v22 = *v21;
  unsigned int v23 = *((_DWORD *)v6 + 2);
  unsigned int v24 = v23 - 1;
  if (v23 <= 0x40)
  {
    if (((*(void *)v6 >> v24) & 1) == 0)
    {
      BOOL v25 = *(void *)v6 == 0;
      goto LABEL_37;
    }
LABEL_34:
    int v26 = 0;
    uint64_t v27 = 1 << v20;
    unsigned int v28 = v60;
    unsigned int v58 = v60;
    if (v60 > 0x40) {
      goto LABEL_41;
    }
    goto LABEL_35;
  }
  if ((*(void *)(*(void *)v6 + 8 * (v24 >> 6)) >> v24)) {
    goto LABEL_34;
  }
  BOOL v25 = llvm::APInt::countLeadingZerosSlowCase(v6) == v23;
LABEL_37:
  int v29 = v25;
  int v26 = v29 ^ 1;
  uint64_t v27 = 1 << v20;
  unsigned int v28 = v60;
  unsigned int v58 = v60;
  if (v60 > 0x40) {
LABEL_41:
  }
    llvm::APInt::initSlowCase((llvm::APInt *)&v57);
LABEL_35:
  uint64_t v57 = 0;
  unsigned int v54 = v28;
  unint64_t v53 = (unint64_t)v59;
  uint64_t v30 = v27 & v22;
  llvm::APInt::operator-=((unint64_t **)&v53, 1uLL);
  unsigned int v31 = v54;
  unsigned int v56 = v54;
  unint64_t v55 = v53;
  unsigned int v54 = 0;
  unsigned int v50 = v56;
  if (v56 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v49, (const llvm::APInt *)&v55);
  }
  if (v31) {
    unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
  }
  else {
    unint64_t v32 = 0;
  }
  unsigned int v49 = (uint64_t *)(v32 & ~v53);
  llvm::APInt::operator++(&v49);
  unsigned int v33 = v50;
  unsigned int v52 = v50;
  unsigned int v51 = v49;
  unsigned int v50 = 0;
  if (v30) {
    unsigned int v34 = (const llvm::APInt *)&v51;
  }
  else {
    unsigned int v34 = (const llvm::APInt *)&v57;
  }
  if (v64 > 0x40) {
    goto LABEL_55;
  }
  if (!v30) {
    unsigned int v33 = v58;
  }
  if (v33 > 0x40)
  {
LABEL_55:
    llvm::APInt::assignSlowCase((unsigned int *)&v63, v34);
  }
  else
  {
    uint64_t v63 = *(void *)v34;
    unsigned int v64 = v33;
  }
  unsigned int v35 = (unint64_t *)&v57;
  if (v26) {
    unsigned int v36 = (const llvm::APInt *)&v55;
  }
  else {
    unsigned int v36 = (const llvm::APInt *)&v57;
  }
  if (v62 <= 0x40)
  {
    if (v26) {
      unsigned int v35 = &v55;
    }
    unsigned int v37 = *((_DWORD *)v35 + 2);
    if (v37 <= 0x40)
    {
      unint64_t v61 = *(void *)v36;
      unsigned int v62 = v37;
      if (*((_DWORD *)v7 + 2) > 0x40u) {
        goto LABEL_64;
      }
LABEL_67:
      if (*(void *)v7 != *(void *)v9) {
        goto LABEL_92;
      }
LABEL_68:
      unsigned int v46 = *((_DWORD *)v6 + 2);
      if (v46 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v45, v6);
      }
      uint64_t v45 = *(void *)v6;
      llvm::APInt::operator-=((uint64_t)&v45, (void **)PaddingInfo);
      unsigned int v38 = v46;
      unsigned int v48 = v46;
      uint64_t v39 = v45;
      uint64_t v47 = v45;
      unsigned int v46 = 0;
      int v40 = llvm::APInt::compare((llvm::APInt *)&v47, (const llvm::APInt *)&v59);
      int v41 = v40;
      if (v38 >= 0x41)
      {
        if (v39)
        {
          MEMORY[0x21667D390](v39, 0x1000C8000313F17);
          if (v46 >= 0x41)
          {
            if (v45) {
              MEMORY[0x21667D390](v45, 0x1000C8000313F17);
            }
          }
        }
      }
      if (v41 < 0)
      {
        llvm::APInt::srem((llvm::APInt *)PaddingInfo, (const llvm::APInt *)&v59, (uint64_t)&v47);
        llvm::APInt::srem(v6, (const llvm::APInt *)&v59, (uint64_t)&v43);
        if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v47, (const llvm::APInt *)&v43) <= 0)
        {
          if (v64 > 0x40 || v48 > 0x40)
          {
            llvm::APInt::assignSlowCase((unsigned int *)&v63, (const llvm::APInt *)&v47);
          }
          else
          {
            uint64_t v63 = v47;
            unsigned int v64 = v48;
          }
          if (v62 > 0x40 || v44 > 0x40)
          {
            llvm::APInt::assignSlowCase((unsigned int *)&v61, (const llvm::APInt *)&v43);
          }
          else
          {
            unint64_t v61 = v43;
            unsigned int v62 = v44;
          }
        }
        if (v44 >= 0x41 && v43) {
          MEMORY[0x21667D390](v43, 0x1000C8000313F17);
        }
        if (v48 >= 0x41 && v47) {
          MEMORY[0x21667D390](v47, 0x1000C8000313F17);
        }
      }
      goto LABEL_92;
    }
  }
  llvm::APInt::assignSlowCase((unsigned int *)&v61, v36);
  if (*((_DWORD *)v7 + 2) <= 0x40u) {
    goto LABEL_67;
  }
LABEL_64:
  if (llvm::APInt::equalSlowCase((const void **)v7, (const void **)v9)) {
    goto LABEL_68;
  }
LABEL_92:
  if (v52 >= 0x41 && v51) {
    MEMORY[0x21667D390](v51, 0x1000C8000313F17);
  }
  if (v56 >= 0x41 && v55) {
    MEMORY[0x21667D390](v55, 0x1000C8000313F17);
  }
  if (v58 >= 0x41 && v57) {
    MEMORY[0x21667D390](v57, 0x1000C8000313F17);
  }
  if (v60 >= 0x41 && v59) {
    MEMORY[0x21667D390](v59, 0x1000C8000313F17);
  }
LABEL_104:
  __n128 result = mlir::ConstantIntRanges::fromSigned((mlir::ConstantIntRanges *)&v63, (const llvm::APInt *)&v61, v8, a2);
  if (v62 >= 0x41)
  {
    __n128 result = (llvm::APInt *)v61;
    if (v61) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v61, 0x1000C8000313F17);
    }
  }
  if (v64 >= 0x41)
  {
    __n128 result = (llvm::APInt *)v63;
    if (v63) {
      return (llvm::APInt *)MEMORY[0x21667D390](v63, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t **llvm::APInt::abs@<X0>(uint64_t **this@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v3 = *((_DWORD *)this + 2);
  unsigned int v4 = v3 - 1;
  if (v3 > 0x40)
  {
    if (((unint64_t)(*this)[v4 >> 6] >> v4))
    {
      int v8 = *((_DWORD *)this + 2);
      llvm::APInt::initSlowCase((llvm::APInt *)&v7, (const llvm::APInt *)this);
    }
    *((_DWORD *)a2 + 2) = v3;
    llvm::APInt::initSlowCase(a2, (const llvm::APInt *)this);
  }
  uint64_t v5 = *this;
  if (((unint64_t)*this >> v4))
  {
    int v8 = *((_DWORD *)this + 2);
    unint64_t v7 = (unint64_t)v5;
    if (v3) {
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    }
    else {
      unint64_t v6 = 0;
    }
    unint64_t v7 = v6 & ~v7;
    this = llvm::APInt::operator++((uint64_t **)&v7);
    *((_DWORD *)a2 + 2) = v8;
    *(void *)a2 = v7;
    int v8 = 0;
  }
  else
  {
    *((_DWORD *)a2 + 2) = v3;
    *(void *)a2 = v5;
  }
  return this;
}

llvm::APInt *mlir::intrange::inferRemU@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v4 = (ZinBondedInfo *)(a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)(a1 + 64));
  uint64_t v6 = v5;
  uint64_t AneIndex = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  unsigned int v8 = *(_DWORD *)(v6 + 8);
  unsigned int v32 = v8;
  if (v8 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v31);
  }
  unsigned int v31 = 0;
  unsigned int v30 = v8;
  unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
  if (!v8) {
    unint64_t v9 = 0;
  }
  int v29 = (unint64_t *)v9;
  if (*(void *)v6)
  {
    unsigned int v28 = *((_DWORD *)AneIndex + 2);
    if (v28 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v27, AneIndex);
    }
    uint64_t v27 = *(unint64_t **)AneIndex;
    llvm::APInt::operator-=(&v27, 1uLL);
    unsigned int v10 = v28;
    unint64_t v11 = v27;
    unsigned int v28 = 0;
    if (v30 > 0x40 && v29)
    {
      MEMORY[0x21667D390](v29, 0x1000C8000313F17);
      int v29 = v11;
      unsigned int v30 = v10;
      if (v28 >= 0x41 && v27) {
        MEMORY[0x21667D390](v27, 0x1000C8000313F17);
      }
      if (*(_DWORD *)(v6 + 8) <= 0x40u)
      {
LABEL_16:
        if (*(void *)v6 != *(void *)AneIndex) {
          goto LABEL_44;
        }
LABEL_20:
        ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
        unsigned int v13 = v12;
        unint64_t v14 = (const void **)ZinBondedInfo::GetAneIndex((ZinBondedInfo *)a1);
        unint64_t v15 = v14;
        unsigned int v24 = *((_DWORD *)v14 + 2);
        if (v24 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v23, (const llvm::APInt *)v14);
        }
        unsigned int v23 = (llvm::APInt *)*v14;
        llvm::APInt::operator-=((uint64_t)&v23, (void **)v13);
        unsigned int v16 = v24;
        unsigned int v26 = v24;
        char v17 = v23;
        BOOL v25 = v23;
        unsigned int v24 = 0;
        int v18 = llvm::APInt::compare((llvm::APInt *)&v25, AneIndex);
        int v19 = v18;
        if (v16 >= 0x41)
        {
          if (v17)
          {
            MEMORY[0x21667D390](v17, 0x1000C8000313F17);
            if (v24 >= 0x41)
            {
              if (v23) {
                MEMORY[0x21667D390](v23, 0x1000C8000313F17);
              }
            }
          }
        }
        if (v19 < 0)
        {
          llvm::APInt::urem(v13, AneIndex, (uint64_t)&v25);
          llvm::APInt::urem(v15, AneIndex, (uint64_t)&v21);
          if ((int)llvm::APInt::compare((llvm::APInt *)&v25, (const llvm::APInt *)&v21) <= 0)
          {
            if (v32 > 0x40 || v26 > 0x40)
            {
              llvm::APInt::assignSlowCase((unsigned int *)&v31, (const llvm::APInt *)&v25);
            }
            else
            {
              unsigned int v31 = v25;
              unsigned int v32 = v26;
            }
            if (v30 > 0x40 || v22 > 0x40)
            {
              llvm::APInt::assignSlowCase((unsigned int *)&v29, (const llvm::APInt *)&v21);
            }
            else
            {
              int v29 = v21;
              unsigned int v30 = v22;
            }
          }
          if (v22 >= 0x41 && v21) {
            MEMORY[0x21667D390](v21, 0x1000C8000313F17);
          }
          if (v26 >= 0x41 && v25) {
            MEMORY[0x21667D390](v25, 0x1000C8000313F17);
          }
        }
        goto LABEL_44;
      }
    }
    else
    {
      int v29 = v27;
      unsigned int v30 = v10;
      if (*(_DWORD *)(v6 + 8) <= 0x40u) {
        goto LABEL_16;
      }
    }
    if (!llvm::APInt::equalSlowCase((const void **)v6, (const void **)AneIndex)) {
      goto LABEL_44;
    }
    goto LABEL_20;
  }
LABEL_44:
  __n128 result = mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v31, (const llvm::APInt *)&v29, a2);
  if (v30 >= 0x41)
  {
    __n128 result = (llvm::APInt *)v29;
    if (v29) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v29, 0x1000C8000313F17);
    }
  }
  if (v32 >= 0x41)
  {
    __n128 result = v31;
    if (v31) {
      return (llvm::APInt *)MEMORY[0x21667D390](v31, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *mlir::intrange::inferMaxS@<X0>(ZinSpatialSplitTransform *a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v4 = (ZinSpatialSplitTransform *)((char *)a1 + 64);
  uint64_t PaddingInfo = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a1);
  uint64_t v6 = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(v4);
  if ((int)llvm::APInt::compareSigned(PaddingInfo, v6) <= 0) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = a1;
  }
  unsigned int v8 = (mlir::ConstantIntRanges *)ZinSpatialSplitTransform::GetPaddingInfo(v7);
  unint64_t v9 = (llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  unsigned int v10 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v4);
  if ((int)llvm::APInt::compareSigned(v9, v10) <= 0) {
    unint64_t v11 = v4;
  }
  else {
    unint64_t v11 = a1;
  }
  unsigned int v12 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v11);

  return mlir::ConstantIntRanges::fromSigned(v8, v12, v13, a2);
}

llvm::APInt *mlir::intrange::inferMaxU@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  uint64_t v6 = v5;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  if ((int)llvm::APInt::compare(v6, v7) <= 0) {
    unsigned int v8 = v4;
  }
  else {
    unsigned int v8 = a1;
  }
  ZinIrHalH13g::~ZinIrHalH13g(v8);
  unsigned int v10 = v9;
  uint64_t AneIndex = (llvm::APInt *)ZinBondedInfo::GetAneIndex(a1);
  unsigned int v12 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  if ((int)llvm::APInt::compare(AneIndex, v12) <= 0) {
    unsigned int v13 = v4;
  }
  else {
    unsigned int v13 = a1;
  }
  unint64_t v14 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v13);

  return mlir::ConstantIntRanges::fromUnsigned(v10, v14, a2);
}

llvm::APInt *mlir::intrange::inferMinS@<X0>(ZinSpatialSplitTransform *a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v4 = (ZinSpatialSplitTransform *)((char *)a1 + 64);
  uint64_t PaddingInfo = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a1);
  uint64_t v6 = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(v4);
  if ((int)llvm::APInt::compareSigned(PaddingInfo, v6) >= 0) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = a1;
  }
  unsigned int v8 = (mlir::ConstantIntRanges *)ZinSpatialSplitTransform::GetPaddingInfo(v7);
  unint64_t v9 = (llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  unsigned int v10 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v4);
  if ((int)llvm::APInt::compareSigned(v9, v10) >= 0) {
    unint64_t v11 = v4;
  }
  else {
    unint64_t v11 = a1;
  }
  unsigned int v12 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v11);

  return mlir::ConstantIntRanges::fromSigned(v8, v12, v13, a2);
}

llvm::APInt *mlir::intrange::inferMinU@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  uint64_t v6 = v5;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  if ((int)llvm::APInt::compare(v6, v7) >= 0) {
    unsigned int v8 = v4;
  }
  else {
    unsigned int v8 = a1;
  }
  ZinIrHalH13g::~ZinIrHalH13g(v8);
  unsigned int v10 = v9;
  uint64_t AneIndex = (llvm::APInt *)ZinBondedInfo::GetAneIndex(a1);
  unsigned int v12 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  if ((int)llvm::APInt::compare(AneIndex, v12) >= 0) {
    unsigned int v13 = v4;
  }
  else {
    unsigned int v13 = a1;
  }
  unint64_t v14 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v13);

  return mlir::ConstantIntRanges::fromUnsigned(v10, v14, a2);
}

void *mlir::intrange::inferAnd@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v10, (ZinIrHalH13g *)a1);
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v6, (ZinIrHalH13g *)(a1 + 64));
  unsigned int v19 = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v18, (const llvm::APInt *)&v10);
  }
  int v18 = v10;
  unsigned int v21 = v13;
  if (v13 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v20, (const llvm::APInt *)&v12);
  }
  char v20 = v12;
  unsigned int v15 = v7;
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const llvm::APInt *)&v6);
  }
  unint64_t v14 = v6;
  unsigned int v17 = v9;
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const llvm::APInt *)&v8);
  }
  unsigned int v16 = v8;
  __n128 result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAnd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v5, (uint64_t)&v18, 2, (uint64_t)&v14, 2, 0);
  if (v17 >= 0x41)
  {
    __n128 result = v16;
    if (v16) {
      __n128 result = (void *)MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    __n128 result = v14;
    if (v14) {
      __n128 result = (void *)MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v21 >= 0x41)
  {
    __n128 result = v20;
    if (v20) {
      __n128 result = (void *)MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    __n128 result = v18;
    if (v18) {
      __n128 result = (void *)MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v9 >= 0x41)
  {
    __n128 result = v8;
    if (v8) {
      __n128 result = (void *)MEMORY[0x21667D390](v8, 0x1000C8000313F17);
    }
  }
  if (v7 >= 0x41)
  {
    __n128 result = v6;
    if (v6) {
      __n128 result = (void *)MEMORY[0x21667D390](v6, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    __n128 result = v12;
    if (v12) {
      __n128 result = (void *)MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    __n128 result = v10;
    if (v10) {
      return (void *)MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t widenBitwiseBounds(const mlir::ConstantIntRanges *a1, ZinIrHalH13g *a2)
{
  ZinIrHalH13g::~ZinIrHalH13g(a2);
  unsigned int v15 = *((_DWORD *)v4 + 2);
  if (v15 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, v4);
  }
  uint64_t v14 = *(void *)v4;
  uint64_t AneIndex = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a2);
  unsigned int v13 = *((_DWORD *)AneIndex + 2);
  if (v13 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v12, AneIndex);
  }
  uint64_t v12 = *(void *)AneIndex;
  unsigned int v6 = v15;
  unsigned int v11 = v15;
  uint64_t v10 = v14 ^ v12;
  unsigned int v11 = 0;
  int v7 = v15 + __clz(v14 ^ v12) - 64;
  uint64_t result = llvm::APInt::clearLowBits((uint64_t)&v14, v15 - v7);
  unsigned int v9 = v6 - v7;
  if (v6 != v7)
  {
    if (v9 > 0x40) {
      uint64_t result = (uint64_t)llvm::APInt::setBitsSlowCase(&v12, 0, v9);
    }
    else {
      v12 |= 0xFFFFFFFFFFFFFFFFLL >> (v7 - v6);
    }
  }
  *((_DWORD *)a1 + 2) = v15;
  *(void *)a1 = v14;
  *((_DWORD *)a1 + 6) = v13;
  *((void *)a1 + 2) = v12;
  return result;
}

void *mlir::intrange::inferOr@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v10, (ZinIrHalH13g *)a1);
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v6, (ZinIrHalH13g *)(a1 + 64));
  unsigned int v19 = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v18, (const llvm::APInt *)&v10);
  }
  int v18 = v10;
  unsigned int v21 = v13;
  if (v13 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v20, (const llvm::APInt *)&v12);
  }
  char v20 = v12;
  unsigned int v15 = v7;
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const llvm::APInt *)&v6);
  }
  uint64_t v14 = v6;
  unsigned int v17 = v9;
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const llvm::APInt *)&v8);
  }
  unsigned int v16 = v8;
  uint64_t result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferOr(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v5, (uint64_t)&v18, 2, (uint64_t)&v14, 2, 0);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = (void *)MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = (void *)MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v21 >= 0x41)
  {
    uint64_t result = v20;
    if (v20) {
      uint64_t result = (void *)MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = (void *)MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v9 >= 0x41)
  {
    uint64_t result = v8;
    if (v8) {
      uint64_t result = (void *)MEMORY[0x21667D390](v8, 0x1000C8000313F17);
    }
  }
  if (v7 >= 0x41)
  {
    uint64_t result = v6;
    if (v6) {
      uint64_t result = (void *)MEMORY[0x21667D390](v6, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = (void *)MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return (void *)MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

void *mlir::intrange::inferXor@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v10, (ZinIrHalH13g *)a1);
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v6, (ZinIrHalH13g *)(a1 + 64));
  unsigned int v19 = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v18, (const llvm::APInt *)&v10);
  }
  int v18 = v10;
  unsigned int v21 = v13;
  if (v13 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v20, (const llvm::APInt *)&v12);
  }
  char v20 = v12;
  unsigned int v15 = v7;
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const llvm::APInt *)&v6);
  }
  uint64_t v14 = v6;
  unsigned int v17 = v9;
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const llvm::APInt *)&v8);
  }
  unsigned int v16 = v8;
  uint64_t result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferXor(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v5, (uint64_t)&v18, 2, (uint64_t)&v14, 2, 0);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = (void *)MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = (void *)MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v21 >= 0x41)
  {
    uint64_t result = v20;
    if (v20) {
      uint64_t result = (void *)MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = (void *)MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v9 >= 0x41)
  {
    uint64_t result = v8;
    if (v8) {
      uint64_t result = (void *)MEMORY[0x21667D390](v8, 0x1000C8000313F17);
    }
  }
  if (v7 >= 0x41)
  {
    uint64_t result = v6;
    if (v6) {
      uint64_t result = (void *)MEMORY[0x21667D390](v6, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = (void *)MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return (void *)MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *mlir::intrange::inferShl@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unsigned int v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  unsigned int v27 = *((_DWORD *)v5 + 2);
  if (v27 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, v5);
  }
  unsigned int v26 = *(llvm::APInt **)v5;
  uint64_t AneIndex = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a1);
  unsigned int v29 = *((_DWORD *)AneIndex + 2);
  if (v29 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v28, AneIndex);
  }
  unsigned int v28 = *(llvm::APInt **)AneIndex;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  unsigned int v35 = *((_DWORD *)v7 + 2);
  if (v35 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, v7);
  }
  uint64_t v34 = *(void *)v7;
  unsigned int v8 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  unsigned int v37 = *((_DWORD *)v8 + 2);
  if (v37 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, v8);
  }
  uint64_t v36 = *(void *)v8;
  minMaxBy(&v14, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShl(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v26, 2, (uint64_t)&v34, 2, 0);
  if (v37 >= 0x41 && v36) {
    MEMORY[0x21667D390](v36, 0x1000C8000313F17);
  }
  if (v35 >= 0x41 && v34) {
    MEMORY[0x21667D390](v34, 0x1000C8000313F17);
  }
  if (v29 >= 0x41 && v28) {
    MEMORY[0x21667D390](v28, 0x1000C8000313F17);
  }
  if (v27 >= 0x41 && v26) {
    MEMORY[0x21667D390](v26, 0x1000C8000313F17);
  }
  uint64_t PaddingInfo = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a1);
  unsigned int v35 = *((_DWORD *)PaddingInfo + 2);
  if (v35 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, PaddingInfo);
  }
  uint64_t v34 = *(void *)PaddingInfo;
  uint64_t v10 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  unsigned int v37 = *((_DWORD *)v10 + 2);
  if (v37 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, v10);
  }
  uint64_t v36 = *(void *)v10;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  unsigned int v23 = *((_DWORD *)v11 + 2);
  if (v23 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v22, v11);
  }
  uint64_t v22 = *(void *)v11;
  uint64_t v12 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  unsigned int v25 = *((_DWORD *)v12 + 2);
  if (v25 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, v12);
  }
  uint64_t v24 = *(void *)v12;
  minMaxBy(&v26, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShl(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v34, 2, (uint64_t)&v22, 2, (llvm::APInt *)1);
  if (v25 >= 0x41 && v24) {
    MEMORY[0x21667D390](v24, 0x1000C8000313F17);
  }
  if (v23 >= 0x41 && v22) {
    MEMORY[0x21667D390](v22, 0x1000C8000313F17);
  }
  if (v37 >= 0x41 && v36) {
    MEMORY[0x21667D390](v36, 0x1000C8000313F17);
  }
  if (v35 >= 0x41 && v34) {
    MEMORY[0x21667D390](v34, 0x1000C8000313F17);
  }
  uint64_t result = mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v14, (const mlir::ConstantIntRanges *)&v26, a2);
  if (v33 >= 0x41)
  {
    uint64_t result = v32;
    if (v32) {
      uint64_t result = (llvm::APInt *)MEMORY[0x21667D390](v32, 0x1000C8000313F17);
    }
  }
  if (v31 >= 0x41)
  {
    uint64_t result = v30;
    if (v30) {
      uint64_t result = (llvm::APInt *)MEMORY[0x21667D390](v30, 0x1000C8000313F17);
    }
  }
  if (v29 >= 0x41)
  {
    uint64_t result = v28;
    if (v28) {
      uint64_t result = (llvm::APInt *)MEMORY[0x21667D390](v28, 0x1000C8000313F17);
    }
  }
  if (v27 >= 0x41)
  {
    uint64_t result = v26;
    if (v26) {
      uint64_t result = (llvm::APInt *)MEMORY[0x21667D390](v26, 0x1000C8000313F17);
    }
  }
  if (v21 >= 0x41)
  {
    uint64_t result = v20;
    if (v20) {
      uint64_t result = (llvm::APInt *)MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = (llvm::APInt *)MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = (llvm::APInt *)MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      return (llvm::APInt *)MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  return result;
}

void *mlir::intrange::inferShrS@<X0>(ZinSpatialSplitTransform *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v4 = (ZinSpatialSplitTransform *)((char *)a1 + 64);
  uint64_t PaddingInfo = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a1);
  unsigned int v15 = *((_DWORD *)PaddingInfo + 2);
  if (v15 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, PaddingInfo);
  }
  uint64_t v14 = *(void **)PaddingInfo;
  unsigned int v6 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  unsigned int v17 = *((_DWORD *)v6 + 2);
  if (v17 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, v6);
  }
  unsigned int v16 = *(void **)v6;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  unsigned int v11 = *((_DWORD *)v7 + 2);
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v10, v7);
  }
  uint64_t v10 = *(void **)v7;
  uint64_t AneIndex = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  unsigned int v13 = *((_DWORD *)AneIndex + 2);
  if (v13 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v12, AneIndex);
  }
  uint64_t v12 = *(void **)AneIndex;
  uint64_t result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v14, 2, (uint64_t)&v10, 2, (llvm::APInt *)1);
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = (void *)MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      uint64_t result = (void *)MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = (void *)MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      return (void *)MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  return result;
}

void *mlir::intrange::inferShrU@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  unsigned int v15 = *((_DWORD *)v5 + 2);
  if (v15 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, v5);
  }
  uint64_t v14 = *(void **)v5;
  uint64_t AneIndex = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a1);
  unsigned int v17 = *((_DWORD *)AneIndex + 2);
  if (v17 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, AneIndex);
  }
  unsigned int v16 = *(void **)AneIndex;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  unsigned int v11 = *((_DWORD *)v7 + 2);
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v10, v7);
  }
  uint64_t v10 = *(void **)v7;
  unsigned int v8 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  unsigned int v13 = *((_DWORD *)v8 + 2);
  if (v13 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v12, v8);
  }
  uint64_t v12 = *(void **)v8;
  uint64_t result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v14, 2, (uint64_t)&v10, 2, 0);
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = (void *)MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      uint64_t result = (void *)MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = (void *)MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      return (void *)MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::intrange::evaluatePred(uint64_t a1, mlir::ConstantIntRanges *a2, ZinSpatialSplitTransform *a3)
{
  if (isStaticallyTrue(a1, a2, a3)) {
    return 257;
  }
  else {
    return isStaticallyTrue(qword_211F1B3B0[a1], a2, a3) << 8;
  }
}

BOOL isStaticallyTrue(uint64_t a1, mlir::ConstantIntRanges *this, ZinSpatialSplitTransform *a3)
{
  switch(a1)
  {
    case 0:
      mlir::ConstantIntRanges::getConstantValue((uint64_t)this, (uint64_t)&v45);
      mlir::ConstantIntRanges::getConstantValue((uint64_t)a3, (uint64_t)&v42);
      int v5 = v47;
      int v6 = v44;
      if (v47) {
        BOOL v7 = v44 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        BOOL v8 = 0;
      }
      else if (v46 > 0x40)
      {
        BOOL v8 = llvm::APInt::equalSlowCase(&v45, &v42);
      }
      else
      {
        BOOL v8 = v45 == v42;
      }
      if (v6 && v43 >= 0x41 && v42)
      {
        MEMORY[0x21667D390](v42, 0x1000C8000313F17);
        int v5 = v47;
      }
      if (!v5 || v46 < 0x41 || !v45) {
        return v8;
      }
      MEMORY[0x21667D390](v45, 0x1000C8000313F17);
      return v8;
    case 1:
      uint64_t v24 = (llvm::APInt *)mlir::ConstantIntRanges::smax(this);
      uint64_t PaddingInfo = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a3);
      if ((llvm::APInt::compareSigned(v24, PaddingInfo) & 0x80000000) != 0)
      {
        BOOL v28 = 1;
      }
      else
      {
        unsigned int v26 = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(this);
        unsigned int v27 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
        BOOL v28 = (int)llvm::APInt::compareSigned(v26, v27) > 0;
      }
      uint64_t AneIndex = (llvm::APInt *)ZinBondedInfo::GetAneIndex(this);
      ZinIrHalH13g::~ZinIrHalH13g(a3);
      if ((llvm::APInt::compare(AneIndex, v37) & 0x80000000) != 0)
      {
        BOOL v41 = 1;
      }
      else
      {
        ZinIrHalH13g::~ZinIrHalH13g(this);
        uint64_t v39 = v38;
        int v40 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a3);
        BOOL v41 = (int)llvm::APInt::compare(v39, v40) > 0;
      }
      return v28 & v41;
    case 2:
      unsigned int v9 = (llvm::APInt *)mlir::ConstantIntRanges::smax(this);
      uint64_t v10 = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a3);
      return llvm::APInt::compareSigned(v9, v10) >> 31;
    case 3:
      uint64_t v12 = (llvm::APInt *)mlir::ConstantIntRanges::smax(this);
      unsigned int v13 = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a3);
      int v14 = llvm::APInt::compareSigned(v12, v13);
      return v14 < 1;
    case 4:
      unsigned int v15 = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(this);
      unsigned int v16 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
      int v17 = llvm::APInt::compareSigned(v15, v16);
      goto LABEL_22;
    case 5:
      unsigned int v29 = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(this);
      unsigned int v30 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
      int v23 = llvm::APInt::compareSigned(v29, v30);
      goto LABEL_19;
    case 6:
      unsigned int v31 = (llvm::APInt *)ZinBondedInfo::GetAneIndex(this);
      ZinIrHalH13g::~ZinIrHalH13g(a3);
      return llvm::APInt::compare(v31, v32) >> 31;
    case 7:
      uint64_t v18 = (llvm::APInt *)ZinBondedInfo::GetAneIndex(this);
      ZinIrHalH13g::~ZinIrHalH13g(a3);
      int v14 = llvm::APInt::compare(v18, v19);
      return v14 < 1;
    case 8:
      ZinIrHalH13g::~ZinIrHalH13g(this);
      uint64_t v34 = v33;
      unsigned int v35 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a3);
      int v17 = llvm::APInt::compare(v34, v35);
LABEL_22:
      BOOL result = v17 > 0;
      break;
    case 9:
      ZinIrHalH13g::~ZinIrHalH13g(this);
      unsigned int v21 = v20;
      uint64_t v22 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a3);
      int v23 = llvm::APInt::compare(v21, v22);
LABEL_19:
      BOOL result = v23 >= 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivURange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>(uint64_t *a1, const void **this, llvm::APInt *a3)
{
  uint64_t v5 = *a1;
  llvm::APInt::udiv(this, a3, (uint64_t)&v7);
  uint64_t result = (*(uint64_t (**)(void, const void **, llvm::APInt *, uint64_t *))v5)(*(void *)(v5 + 8), this, a3, &v7);
  if (v8 >= 0x41)
  {
    uint64_t result = v7;
    if (v7) {
      return MEMORY[0x21667D390](v7, 0x1000C8000313F17);
    }
  }
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivSRange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X0>, unsigned char *a4@<X8>)
{
  BOOL v10 = 0;
  llvm::APInt::sdiv_ov(this, a2, &v10, (uint64_t)&v8);
  if (v10)
  {
    *a4 = 0;
    a4[16] = 0;
    if (v9 < 0x41) {
      return;
    }
  }
  else
  {
    (**(void (***)(void, llvm::APInt *, llvm::APInt *, uint64_t *))a3)(*(void *)(*(void *)a3 + 8), this, a2, &v8);
    if (v9 < 0x41) {
      return;
    }
  }
  if (v8) {
    MEMORY[0x21667D390](v8, 0x1000C8000313F17);
  }
}

uint64_t llvm::APInt::clearLowBits(uint64_t this, unsigned int a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(unsigned int *)(this + 8);
  unsigned int v6 = v3;
  if (v3 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v5);
  }
  uint64_t v5 = 0;
  uint64_t v4 = v3;
  if (v3 == a2)
  {
LABEL_7:
    if (*(_DWORD *)(this + 8) <= 0x40u) {
      goto LABEL_8;
    }
LABEL_11:
    this = llvm::APInt::andAssignSlowCase(v2, (const llvm::APInt *)&v5);
    if (v6 < 0x41) {
      return this;
    }
    goto LABEL_12;
  }
  if (a2 <= 0x3F)
  {
    v5 |= 0xFFFFFFFFFFFFFFFFLL >> (a2 - v3) << a2;
    goto LABEL_7;
  }
  this = (uint64_t)llvm::APInt::setBitsSlowCase(&v5, a2, v3);
  if (*(_DWORD *)(v2 + 8) > 0x40u) {
    goto LABEL_11;
  }
LABEL_8:
  *(void *)v2 &= v5;
  if (v6 < 0x41) {
    return this;
  }
LABEL_12:
  this = v5;
  if (v5) {
    return MEMORY[0x21667D390](v5, 0x1000C8000313F17, v4);
  }
  return this;
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v8 = 0;
  uint64_t result = llvm::APInt::uadd_ov((uint64_t)this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v7 < 0x41) {
      return result;
    }
    goto LABEL_8;
  }
  unsigned int v5 = v7;
  *(_DWORD *)(a3 + 8) = v7;
  if (v5 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v6);
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 1;
  if (v7 >= 0x41)
  {
LABEL_8:
    uint64_t result = v6;
    if (v6) {
      return MEMORY[0x21667D390](v6, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>@<X0>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v8 = 0;
  uint64_t result = llvm::APInt::sadd_ov((uint64_t *)this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v7 < 0x41) {
      return result;
    }
    goto LABEL_8;
  }
  unsigned int v5 = v7;
  *(_DWORD *)(a3 + 8) = v7;
  if (v5 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v6);
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 1;
  if (v7 >= 0x41)
  {
LABEL_8:
    uint64_t result = v6;
    if (v6) {
      return (uint64_t *)MEMORY[0x21667D390](v6, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v8 = 0;
  uint64_t result = llvm::APInt::usub_ov((uint64_t)this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v7 < 0x41) {
      return result;
    }
    goto LABEL_8;
  }
  unsigned int v5 = v7;
  *(_DWORD *)(a3 + 8) = v7;
  if (v5 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v6);
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 1;
  if (v7 >= 0x41)
  {
LABEL_8:
    uint64_t result = v6;
    if (v6) {
      return MEMORY[0x21667D390](v6, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>@<X0>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v8 = 0;
  uint64_t result = llvm::APInt::ssub_ov((uint64_t *)this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v7 < 0x41) {
      return result;
    }
    goto LABEL_8;
  }
  unsigned int v5 = v7;
  *(_DWORD *)(a3 + 8) = v7;
  if (v5 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v6);
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 1;
  if (v7 >= 0x41)
  {
LABEL_8:
    uint64_t result = v6;
    if (v6) {
      return (uint64_t *)MEMORY[0x21667D390](v6, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v8 = 0;
  uint64_t result = llvm::APInt::umul_ov((uint64_t)this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v7 < 0x41) {
      return result;
    }
    goto LABEL_8;
  }
  unsigned int v5 = v7;
  *(_DWORD *)(a3 + 8) = v7;
  if (v5 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v6);
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 1;
  if (v7 >= 0x41)
  {
LABEL_8:
    uint64_t result = v6;
    if (v6) {
      return MEMORY[0x21667D390](v6, 0x1000C8000313F17);
    }
  }
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v7 = 0;
  llvm::APInt::smul_ov(this, a2, &v7, (llvm::APInt *)&v5);
  if (v7)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v6 < 0x41) {
      return;
    }
    goto LABEL_8;
  }
  unsigned int v4 = v6;
  *(_DWORD *)(a3 + 8) = v6;
  if (v4 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v5);
  }
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 16) = 1;
  if (v6 >= 0x41)
  {
LABEL_8:
    if (v5) {
      MEMORY[0x21667D390](v5, 0x1000C8000313F17);
    }
  }
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X3>, uint64_t a2@<X8>)
{
  unsigned int v3 = *((_DWORD *)a1 + 2);
  v5[2] = v3;
  if (v3 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)v5, a1);
  }
  uint64_t v4 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(const void **this@<X1>, llvm::APInt *a2@<X2>, const llvm::APInt *a3@<X3>, uint64_t a4@<X8>)
{
  llvm::APInt::urem(this, a2, (uint64_t)&v14);
  unsigned int v6 = v15;
  if (v15 > 0x40)
  {
    int v8 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v14);
    if (v14) {
      MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
    if (v8 != v6) {
      goto LABEL_3;
    }
LABEL_8:
    unsigned int v9 = *((_DWORD *)a3 + 2);
    *(_DWORD *)(a4 + 8) = v9;
    if (v9 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)a4, a3);
    }
    *(void *)a4 = *(void *)a3;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  if (!v14) {
    goto LABEL_8;
  }
LABEL_3:
  BOOL v13 = 0;
  unsigned int v7 = *((_DWORD *)a3 + 2);
  unsigned int v12 = v7;
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v11);
  }
  BOOL v11 = v7 != 0;
  llvm::APInt::uadd_ov((uint64_t)a3, (const llvm::APInt *)&v11, &v13, (uint64_t)&v14);
  if (v12 >= 0x41 && v11) {
    MEMORY[0x21667D390](v11, 0x1000C8000313F17);
  }
  if (v13)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    if (v15 < 0x41) {
      return;
    }
    goto LABEL_22;
  }
  unsigned int v10 = v15;
  *(_DWORD *)(a4 + 8) = v15;
  if (v10 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v14);
  }
  *(void *)a4 = v14;
  *(unsigned char *)(a4 + 16) = 1;
  if (v15 >= 0x41)
  {
LABEL_22:
    if (v14) {
      MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X3>, uint64_t a2@<X8>)
{
  unsigned int v3 = *((_DWORD *)a1 + 2);
  v5[2] = v3;
  if (v3 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)v5, a1);
  }
  uint64_t v4 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, const llvm::APInt *a3@<X3>, uint64_t a4@<X8>)
{
  llvm::APInt::srem(this, a2, (uint64_t)&v23);
  unsigned int v8 = v24;
  if (v24 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v23) == v8)
    {
      if (v23) {
        MEMORY[0x21667D390](v23, 0x1000C8000313F17);
      }
      goto LABEL_17;
    }
  }
  else if (!v23)
  {
LABEL_17:
    unsigned int v17 = *((_DWORD *)a3 + 2);
    *(_DWORD *)(a4 + 8) = v17;
    if (v17 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)a4, a3);
    }
    *(void *)a4 = *(void *)a3;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  unsigned int v9 = *((_DWORD *)this + 2);
  char v10 = v9 - 1;
  if (v9 >= 0x41) {
    BOOL v11 = (llvm::APInt *)(*(void *)this + 8 * ((v9 - 1) >> 6));
  }
  else {
    BOOL v11 = this;
  }
  BOOL v12 = ((*(void *)v11 >> v10) & 1) == 0;
  unsigned int v13 = *((_DWORD *)a2 + 2);
  char v14 = v13 - 1;
  if (v13 >= 0x41) {
    unsigned int v15 = (llvm::APInt *)(*(void *)a2 + 8 * ((v13 - 1) >> 6));
  }
  else {
    unsigned int v15 = a2;
  }
  char v16 = v12 ^ (((*(void *)v15 >> v14) & 1) == 0);
  if (v8 >= 0x41 && v23) {
    MEMORY[0x21667D390](v23, 0x1000C8000313F17);
  }
  if (v16) {
    goto LABEL_17;
  }
  BOOL v22 = 0;
  unsigned int v18 = *((_DWORD *)a3 + 2);
  unsigned int v21 = v18;
  if (v18 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v20);
  }
  BOOL v20 = v18 != 0;
  llvm::APInt::sadd_ov((uint64_t *)a3, (const llvm::APInt *)&v20, &v22, (uint64_t)&v23);
  if (v21 >= 0x41 && v20) {
    MEMORY[0x21667D390](v20, 0x1000C8000313F17);
  }
  if (v22)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    if (v24 < 0x41) {
      return;
    }
    goto LABEL_34;
  }
  unsigned int v19 = v24;
  *(_DWORD *)(a4 + 8) = v24;
  if (v19 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v23);
  }
  *(void *)a4 = v23;
  *(unsigned char *)(a4 + 16) = 1;
  if (v24 >= 0x41)
  {
LABEL_34:
    if (v23) {
      MEMORY[0x21667D390](v23, 0x1000C8000313F17);
    }
  }
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferFloorDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, const llvm::APInt *a3@<X3>, uint64_t a4@<X8>)
{
  llvm::APInt::srem(this, a2, (uint64_t)&v23);
  unsigned int v8 = v24;
  if (v24 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v23) == v8)
    {
      if (v23) {
        MEMORY[0x21667D390](v23, 0x1000C8000313F17);
      }
      goto LABEL_19;
    }
  }
  else if (!v23)
  {
LABEL_19:
    unsigned int v18 = *((_DWORD *)a3 + 2);
    *(_DWORD *)(a4 + 8) = v18;
    if (v18 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)a4, a3);
    }
    *(void *)a4 = *(void *)a3;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  unsigned int v9 = *((_DWORD *)this + 2);
  char v10 = v9 - 1;
  if (v9 >= 0x41) {
    BOOL v11 = (llvm::APInt *)(*(void *)this + 8 * ((v9 - 1) >> 6));
  }
  else {
    BOOL v11 = this;
  }
  BOOL v12 = ((*(void *)v11 >> v10) & 1) == 0;
  unsigned int v13 = *((_DWORD *)a2 + 2);
  char v14 = v13 - 1;
  if (v13 >= 0x41) {
    unsigned int v15 = (llvm::APInt *)(*(void *)a2 + 8 * ((v13 - 1) >> 6));
  }
  else {
    unsigned int v15 = a2;
  }
  int v16 = v12 ^ (((*(void *)v15 >> v14) & 1) == 0);
  if (v8 >= 0x41 && v23) {
    MEMORY[0x21667D390](v23, 0x1000C8000313F17);
  }
  if (!v16) {
    goto LABEL_19;
  }
  BOOL v22 = 0;
  unsigned int v17 = *((_DWORD *)a3 + 2);
  unsigned int v21 = v17;
  if (v17 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v20);
  }
  BOOL v20 = v17 != 0;
  llvm::APInt::ssub_ov((uint64_t *)a3, (const llvm::APInt *)&v20, &v22, (uint64_t)&v23);
  if (v21 >= 0x41 && v20) {
    MEMORY[0x21667D390](v20, 0x1000C8000313F17);
  }
  if (v22)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    if (v24 < 0x41) {
      return;
    }
    goto LABEL_34;
  }
  unsigned int v19 = v24;
  *(_DWORD *)(a4 + 8) = v24;
  if (v19 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v23);
  }
  *(void *)a4 = v23;
  *(unsigned char *)(a4 + 16) = 1;
  if (v24 >= 0x41)
  {
LABEL_34:
    if (v23) {
      MEMORY[0x21667D390](v23, 0x1000C8000313F17);
    }
  }
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAnd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(const llvm::APInt *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4 = *((_DWORD *)a1 + 2);
  unsigned int v7 = v4;
  if (v4 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v6, a1);
  }
  uint64_t v5 = *a2 & *(void *)a1;
  *(_DWORD *)(a3 + 8) = v4;
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferOr(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(const llvm::APInt *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4 = *((_DWORD *)a1 + 2);
  unsigned int v7 = v4;
  if (v4 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v6, a1);
  }
  uint64_t v5 = *a2 | *(void *)a1;
  *(_DWORD *)(a3 + 8) = v4;
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferXor(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(const llvm::APInt *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4 = *((_DWORD *)a1 + 2);
  unsigned int v7 = v4;
  if (v4 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v6, a1);
  }
  uint64_t v5 = *a2 ^ *(void *)a1;
  *(_DWORD *)(a3 + 8) = v4;
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShl(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X1>, llvm::APInt *this@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6 = *((unsigned int *)this + 2);
  unsigned int v7 = this;
  if (v6 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40)
    {
LABEL_7:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 16) = 0;
      return;
    }
    unsigned int v7 = *(llvm::APInt **)this;
  }
  if (*(void *)v7 >= v6) {
    goto LABEL_7;
  }
  unsigned int v9 = *((_DWORD *)a1 + 2);
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, a1);
  }
  uint64_t v8 = *(void *)a1;
  llvm::APInt::operator<<=((uint64_t)&v8, (uint64_t)this);
  *(_DWORD *)(a3 + 8) = v9;
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6 = *((unsigned int *)a2 + 2);
  unsigned int v7 = a2;
  if (v6 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase(a2) > 0x40)
    {
LABEL_7:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 16) = 0;
      return;
    }
    unsigned int v7 = *(llvm::APInt **)a2;
  }
  if (*(void *)v7 >= v6) {
    goto LABEL_7;
  }
  unsigned int v9 = *((_DWORD *)a1 + 2);
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, a1);
  }
  uint64_t v8 = *(void *)a1;
  llvm::APInt::ashrInPlace((unsigned int *)&v8, (unint64_t **)a2);
  *(_DWORD *)(a3 + 8) = v9;
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6 = *((unsigned int *)a2 + 2);
  unsigned int v7 = a2;
  if (v6 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase(a2) > 0x40)
    {
LABEL_7:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 16) = 0;
      return;
    }
    unsigned int v7 = *(llvm::APInt **)a2;
  }
  if (*(void *)v7 >= v6) {
    goto LABEL_7;
  }
  unsigned int v9 = *((_DWORD *)a1 + 2);
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, a1);
  }
  uint64_t v8 = *(void *)a1;
  llvm::APInt::lshrInPlace((llvm::APInt *)&v8, a2);
  *(_DWORD *)(a3 + 8) = v9;
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 16) = 1;
}

void mlir::mpsx::MPSXDialect::initialize(mlir::mpsx::MPSXDialect *this)
{
}

void mlir::mpsx::MPSXDialect::MPSXDialect(mlir::mpsx::MPSXDialect *this, mlir::MLIRContext *a2)
{
  uint64_t v2 = (mlir::mpsx::MPSXDialect *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"mpsx", 4, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id);
  *(void *)uint64_t v2 = &unk_26C37F160;
  mlir::mpsx::MPSXDialect::initialize(v2);
}

void mlir::mpsx::MPSXDialect::~MPSXDialect(llvm **this)
{
}

void sub_211A1B6E8()
{
  JUMPOUT(0x21667D3C0);
}

void mlir::Dialect::addOperations<mlir::mpsx::ANEOp,mlir::mpsx::CPUOp,mlir::mpsx::DeinterleaveOp,mlir::mpsx::FPToIntClampedOp,mlir::mpsx::GPUOp,mlir::mpsx::InterleaveOp,mlir::mpsx::ListPopBackOp,mlir::mpsx::ListPushBackOp,mlir::mpsx::MakeListOp,mlir::mpsx::QuantizedGatherOp,mlir::mpsx::QuantizedMatMulOp,mlir::mpsx::RMSNormOp,mlir::mpsx::RegionReturnOp,mlir::mpsx::ReturnStitchedOp,mlir::mpsx::ScaledDotProductAttentionOp,mlir::mpsx::SparseDenseMatMulOp,mlir::mpsx::StitchedOp,mlir::mpsx::VarHandleOp>()
{
}

uint64_t *mlir::mpsx::MPSXDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a4;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3);
  v9[0] = result;
  v9[1] = v8;
  if (result) {
    return (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(a2, a5, &v10, v9);
  }
  return result;
}

uint64_t *mlir::mpsx::QuantizedMatMulOp::getInputDequantizedType(mlir::Operation **this)
{
  int v16 = *this;
  v1 = v16;
  uint64_t v2 = (uint64_t *)(*(void *)(*(void *)(*((void *)v1 + 9)
                                         + 32
                                         * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v16, 0)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = *v2;
  unint64_t v4 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v5 = *(unsigned int *)(v3 + 16);
  if (!v5) {
    goto LABEL_10;
  }
  unint64_t v6 = *(void **)(v3 + 8);
  unsigned int v7 = &v6[2 * v5];
  do
  {
    unint64_t v8 = v5 >> 1;
    unsigned int v9 = &v6[2 * (v5 >> 1)];
    unint64_t v11 = *v9;
    uint64_t v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4) {
      unint64_t v6 = v10;
    }
    else {
      unint64_t v5 = v8;
    }
  }
  while (v5);
  if (v6 != v7 && *v6 == v4) {
    uint64_t v12 = v6[1];
  }
  else {
LABEL_10:
  }
    uint64_t v12 = 0;
  v15[0] = (uint64_t)v2;
  v15[1] = v12;
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(v2) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    *(void *)&long long v17 = mlir::mpsx::QuantizedMatMulOp::getOutputTypeAttr(&v16);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v17);
    LOBYTE(v17) = 0;
    char v18 = 0;
    return (uint64_t *)mlir::ShapedType::cloneWith(v15, &v17, Value);
  }
  return v2;
}

void *mlir::mpsx::QuantizedMatMulOp::getWeightsDequantizedType(mlir::Operation **this)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  v75 = *this;
  v1 = v75;
  uint64_t v2 = (void *)(*(void *)(*(void *)(*((void *)v1 + 9)
                                        + 32
                                        * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v75, 4)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = *v2;
  unint64_t v4 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v5 = *(unsigned int *)(v3 + 16);
  if (!v5) {
    goto LABEL_10;
  }
  unint64_t v6 = *(void **)(v3 + 8);
  unsigned int v7 = &v6[2 * v5];
  do
  {
    unint64_t v8 = v5 >> 1;
    unsigned int v9 = &v6[2 * (v5 >> 1)];
    unint64_t v11 = *v9;
    uint64_t v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4) {
      unint64_t v6 = v10;
    }
    else {
      unint64_t v5 = v8;
    }
  }
  while (v5);
  if (v6 != v7 && *v6 == v4) {
    uint64_t v12 = v6[1];
  }
  else {
LABEL_10:
  }
    uint64_t v12 = 0;
  v73 = v2;
  uint64_t v74 = v12;
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(v2) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    *(void *)&long long v77 = v1;
    unint64_t ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v77, 8);
    if ((*((unsigned char *)v1 + 46) & 0x80) != 0) {
      uint64_t v14 = *((void *)v1 + 9);
    }
    else {
      uint64_t v14 = 0;
    }
    if (HIDWORD(ODSOperandIndexAndLength) + ODSOperandIndexAndLength != (unint64_t)ODSOperandIndexAndLength
      && *(void *)(v14 + 32 * ODSOperandIndexAndLength + 24))
    {
      unsigned int v15 = (uint64_t *)(*(void *)(*(void *)(*((void *)v1 + 9)
                                              + 32
                                              * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v75, 8)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v15) {
        goto LABEL_25;
      }
      uint64_t v16 = *v15;
      unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v18 = *(unsigned int *)(v16 + 16);
      if (!v18) {
        goto LABEL_25;
      }
      unsigned int v19 = *(void **)(v16 + 8);
      BOOL v20 = &v19[2 * v18];
      do
      {
        unint64_t v21 = v18 >> 1;
        BOOL v22 = &v19[2 * (v18 >> 1)];
        unint64_t v24 = *v22;
        uint64_t v23 = v22 + 2;
        v18 += ~(v18 >> 1);
        if (v24 < v17) {
          unsigned int v19 = v23;
        }
        else {
          unint64_t v18 = v21;
        }
      }
      while (v18);
      if (v19 != v20 && *v19 == v17) {
        uint64_t v25 = v19[1];
      }
      else {
LABEL_25:
      }
        uint64_t v25 = 0;
      v72[0] = v15;
      v72[1] = v25;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v72))
      {
        Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v72);
        if (v27)
        {
          uint64_t v28 = 8 * v27;
          while (*Shape != 0x8000000000000000)
          {
            ++Shape;
            v28 -= 8;
            if (!v28) {
              goto LABEL_31;
            }
          }
        }
        else
        {
LABEL_31:
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v73))
          {
            unsigned int v29 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v73);
            if (!v30)
            {
LABEL_36:
              uint64_t WeightsQuantParamsAxisAttr = mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(&v75);
              if (WeightsQuantParamsAxisAttr)
              {
                mlir::IntegerAttr::getValue((uint64_t)&WeightsQuantParamsAxisAttr, (llvm::APInt *)&v77);
                if (DWORD2(v77) > 0x40)
                {
                  LODWORD(v32) = *(_DWORD *)v77;
                  MEMORY[0x21667D390]();
                }
                else
                {
                  uint64_t v32 = (uint64_t)((void)v77 << -(uint64_t)DWORD2(v77)) >> -(uint64_t)DWORD2(v77);
                }
                uint64_t v48 = v32 | 0x100000000;
              }
              else
              {
                uint64_t v48 = 0;
              }
              mlir::ShapedType::getShape((mlir::ShapedType *)v72);
              if (v49 != 1 && (v48 & 0x100000000) != 0)
              {
                uint64_t v50 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v72) + 8 * (v49 - 1));
                if (v50 >= 2)
                {
                  if ((int)v48 <= 0)
                  {
                    mlir::ShapedType::getShape((mlir::ShapedType *)&v73);
                    LODWORD(v48) = v51 + v48;
                  }
                  unint64_t v53 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v73);
                  uint64_t v54 = v52;
                  *(void *)&long long v77 = v78;
                  *((void *)&v77 + 1) = 0x500000000;
                  size_t v55 = 8 * v52;
                  if ((unint64_t)(8 * v52) < 0x29)
                  {
                    int v56 = 0;
                    uint64_t v57 = v78;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v78, (8 * v52) >> 3, 8);
                    int v56 = DWORD2(v77);
                    uint64_t v57 = (unsigned char *)v77;
                  }
                  if (v54)
                  {
                    memcpy(&v57[8 * v56], v53, v55);
                    int v56 = DWORD2(v77);
                    uint64_t v57 = (unsigned char *)v77;
                  }
                  uint64_t v58 = v56 + (v55 >> 3);
                  DWORD2(v77) = v58;
                  *(void *)&v57[8 * (int)v48] *= v50;
                  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v73);
                  unsigned int v60 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v57, v58, OperandRange, 0);
                  uint64_t v61 = (uint64_t)v60;
                  if (!v60) {
                    goto LABEL_77;
                  }
                  uint64_t v62 = *v60;
                  unint64_t v63 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v64 = *(unsigned int *)(v62 + 16);
                  if (!v64) {
                    goto LABEL_77;
                  }
                  v65 = *(void **)(v62 + 8);
                  v66 = &v65[2 * v64];
                  do
                  {
                    unint64_t v67 = v64 >> 1;
                    v68 = &v65[2 * (v64 >> 1)];
                    unint64_t v70 = *v68;
                    v69 = v68 + 2;
                    v64 += ~(v64 >> 1);
                    if (v70 < v63) {
                      v65 = v69;
                    }
                    else {
                      unint64_t v64 = v67;
                    }
                  }
                  while (v64);
                  if (v65 != v66 && *v65 == v63) {
                    uint64_t v71 = v65[1];
                  }
                  else {
LABEL_77:
                  }
                    uint64_t v71 = 0;
                  v73 = (void *)v61;
                  uint64_t v74 = v71;
                  if ((unsigned char *)v77 != v78) {
                    free((void *)v77);
                  }
                }
              }
              goto LABEL_50;
            }
            uint64_t v31 = 8 * v30;
            while (*v29 != 0x8000000000000000)
            {
              ++v29;
              v31 -= 8;
              if (!v31) {
                goto LABEL_36;
              }
            }
          }
        }
      }
      uint64_t v33 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v73);
      uint64_t v34 = (uint64_t *)mlir::UnrankedTensorType::get(v33);
      uint64_t v35 = (uint64_t)v34;
      if (!v34) {
        goto LABEL_48;
      }
      uint64_t v36 = *v34;
      unint64_t v37 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v38 = *(unsigned int *)(v36 + 16);
      if (!v38) {
        goto LABEL_48;
      }
      uint64_t v39 = *(void **)(v36 + 8);
      int v40 = &v39[2 * v38];
      do
      {
        unint64_t v41 = v38 >> 1;
        v42 = &v39[2 * (v38 >> 1)];
        unint64_t v44 = *v42;
        unsigned int v43 = v42 + 2;
        v38 += ~(v38 >> 1);
        if (v44 < v37) {
          uint64_t v39 = v43;
        }
        else {
          unint64_t v38 = v41;
        }
      }
      while (v38);
      if (v39 != v40 && *v39 == v37) {
        uint64_t v45 = v39[1];
      }
      else {
LABEL_48:
      }
        uint64_t v45 = 0;
      v73 = (void *)v35;
      uint64_t v74 = v45;
    }
LABEL_50:
    *(void *)&long long v77 = mlir::mpsx::QuantizedMatMulOp::getOutputTypeAttr(&v75);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v77);
    LOBYTE(v77) = 0;
    v78[0] = 0;
    return (void *)mlir::ShapedType::cloneWith((uint64_t *)&v73, &v77, Value);
  }
  return v2;
}

BOOL mlir::mpsx::QuantizedMatMulOp::verify(mlir::Operation **this)
{
  v190[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = *this;
  v183 = v2;
  uint64_t TransposeLhsAttr = (uint64_t)v2;
  unint64_t ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 1);
  if ((*((unsigned char *)v2 + 46) & 0x80) != 0) {
    uint64_t v4 = *((void *)v2 + 9);
  }
  else {
    uint64_t v4 = 0;
  }
  if (HIDWORD(ODSOperandIndexAndLength) + ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength
    || !*(void *)(v4 + 32 * ODSOperandIndexAndLength + 24))
  {
    unint64_t v12 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 1);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v13 = *((void *)v183 + 9);
    }
    else {
      uint64_t v13 = 0;
    }
    if (HIDWORD(v12) + v12 != (unint64_t)v12
      && *(void *)(v13 + 32 * v12 + 24)
      || ((unint64_t v14 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 2),
           (*((unsigned char *)v183 + 46) & 0x80) == 0)
        ? (uint64_t v15 = 0)
        : (uint64_t v15 = *((void *)v183 + 9)),
          HIDWORD(v14) + v14 != (unint64_t)v14
       && *(void *)(v15 + 32 * v14 + 24)))
    {
      unint64_t v11 = "no input quantization parameters must be set when input isn't quantized";
      goto LABEL_155;
    }
    unsigned int v16 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 0);
    unint64_t v17 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)v183 + 9)
                                                                                            + 32 * v16
                                                                                            + 24)
                                                                                + 8) & 0xFFFFFFFFFFFFFFF8))
                   + 136);
    if (v17 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      unint64_t v11 = "unquantized input must be float type";
      goto LABEL_155;
    }
  }
  else
  {
    uint64_t TransposeLhsAttr = (uint64_t)v2;
    mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 1);
    unint64_t v5 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 1);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v6 = *((void *)v183 + 9);
    }
    else {
      uint64_t v6 = 0;
    }
    if (HIDWORD(v5) + v5 == (unint64_t)v5
      || !*(void *)(v6 + 32 * v5 + 24)
      || ((unint64_t v7 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 2), (*((unsigned char *)v183 + 46) & 0x80) == 0)
        ? (uint64_t v8 = 0)
        : (uint64_t v8 = *((void *)v183 + 9)),
          HIDWORD(v7) + v7 == (unint64_t)v7
       || !*(void *)(v8 + 32 * v7 + 24)))
    {
      unint64_t v11 = "quantization parameters missing for affine quantized input";
      goto LABEL_155;
    }
    unsigned int v9 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 0);
    uint64_t v10 = v183;
    if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)v183 + 9)
                                                                                               + 32 * v9
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      unint64_t v11 = "quantized input must be quantized type";
      goto LABEL_155;
    }
    unsigned int v103 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 0);
    uint64_t v104 = *(void *)(*((void *)v183 + 9) + 32 * v103 + 24);
    unint64_t v105 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 1);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v106 = *((void *)v183 + 9);
    }
    else {
      uint64_t v106 = 0;
    }
    if (HIDWORD(v105) + v105 == (unint64_t)v105) {
      uint64_t v107 = 0;
    }
    else {
      uint64_t v107 = *(void *)(v106 + 32 * v105 + 24);
    }
    unint64_t v109 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 2);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v110 = *((void *)v183 + 9);
    }
    else {
      uint64_t v110 = 0;
    }
    if (HIDWORD(v109) + v109 == (unint64_t)v109) {
      uint64_t v111 = 0;
    }
    else {
      uint64_t v111 = *(void *)(v110 + 32 * v109 + 24);
    }
    unint64_t v112 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 3);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v113 = *((void *)v183 + 9);
    }
    else {
      uint64_t v113 = 0;
    }
    if (HIDWORD(v112) + v112 == (unint64_t)v112) {
      uint64_t v114 = 0;
    }
    else {
      uint64_t v114 = *(void *)(v113 + 32 * v112 + 24);
    }
    v178[0] = (void **)mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxisAttr(&v183);
    if (v178[0])
    {
      mlir::IntegerAttr::getValue((uint64_t)v178, (llvm::APInt *)&TransposeLhsAttr);
      if (v186[0] > 0x40u)
      {
        LODWORD(v115) = *(_DWORD *)TransposeLhsAttr;
        MEMORY[0x21667D390](TransposeLhsAttr);
      }
      else
      {
        uint64_t v115 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
      }
      uint64_t v116 = v115 | 0x100000000;
    }
    else
    {
      uint64_t v116 = 0;
    }
      return 0;
  }
  if (!mlir::mpsx::QuantizedMatMulOp::isWeightsQuantized(&v183))
  {
    unint64_t v45 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 5);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v46 = *((void *)v183 + 9);
    }
    else {
      uint64_t v46 = 0;
    }
    if (HIDWORD(v45) + v45 != (unint64_t)v45
      && *(void *)(v46 + 32 * v45 + 24))
    {
      goto LABEL_110;
    }
    unint64_t v47 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 6);
    uint64_t v48 = (*((unsigned char *)v183 + 46) & 0x80) != 0 ? *((void *)v183 + 9) : 0;
    if ((HIDWORD(v47) + v47 == (unint64_t)v47
       || !*(void *)(v48 + 32 * v47 + 24))
      && ((unint64_t v49 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 8),
           (*((unsigned char *)v183 + 46) & 0x80) == 0)
        ? (uint64_t v50 = 0)
        : (uint64_t v50 = *((void *)v183 + 9)),
          (HIDWORD(v49) + v49 == (unint64_t)v49
        || !*(void *)(v50 + 32 * v49 + 24))
       && ((unint64_t v51 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 9),
            (*((unsigned char *)v183 + 46) & 0x80) == 0)
         ? (uint64_t v52 = 0)
         : (uint64_t v52 = *((void *)v183 + 9)),
           (HIDWORD(v51) + v51 == (unint64_t)v51
         || !*(void *)(v52 + 32 * v51 + 24))
        && ((unint64_t v53 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 10),
             (*((unsigned char *)v183 + 46) & 0x80) == 0)
          ? (uint64_t v54 = 0)
          : (uint64_t v54 = *((void *)v183 + 9)),
            HIDWORD(v53) + v53 == (unint64_t)v53
         || !*(void *)(v54 + 32 * v53 + 24)))))
    {
      unsigned int v101 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 4);
      v102 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)v183 + 9)
                                                                                               + 32 * v101
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136);
      if (v102 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        goto LABEL_158;
      }
      unint64_t v11 = "unquantized weights must be float type";
    }
    else
    {
LABEL_110:
      unint64_t v11 = "no weight quantization parameters must be set when weight isn't quantized";
    }
    goto LABEL_155;
  }
  unsigned int v29 = v183;
  uint64_t TransposeLhsAttr = (uint64_t)v183;
  unint64_t v30 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 5);
  if ((*((unsigned char *)v29 + 46) & 0x80) != 0) {
    uint64_t v31 = *((void *)v29 + 9);
  }
  else {
    uint64_t v31 = 0;
  }
  if (HIDWORD(v30) + v30 != (unint64_t)v30
    && *(void *)(v31 + 32 * v30 + 24))
  {
    unint64_t v32 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 9);
    uint64_t v33 = (*((unsigned char *)v29 + 46) & 0x80) != 0 ? *((void *)v29 + 9) : 0;
    if (HIDWORD(v32) + v32 == (unint64_t)v32
      || !*(void *)(v33 + 32 * v32 + 24))
    {
      unint64_t v65 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 5);
      if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
        uint64_t v66 = *((void *)v183 + 9);
      }
      else {
        uint64_t v66 = 0;
      }
      if (HIDWORD(v65) + v65 == (unint64_t)v65
        || !*(void *)(v66 + 32 * v65 + 24)
        || ((unint64_t v67 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 6),
             (*((unsigned char *)v183 + 46) & 0x80) == 0)
          ? (uint64_t v68 = 0)
          : (uint64_t v68 = *((void *)v183 + 9)),
            HIDWORD(v67) + v67 == (unint64_t)v67
         || !*(void *)(v68 + 32 * v67 + 24)))
      {
        unint64_t v11 = "quantization parameters missing for affine quantized weights";
        goto LABEL_155;
      }
      unint64_t v69 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 8);
      if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
        uint64_t v70 = *((void *)v183 + 9);
      }
      else {
        uint64_t v70 = 0;
      }
      if (HIDWORD(v69) + v69 != (unint64_t)v69
        && *(void *)(v70 + 32 * v69 + 24)
        || ((unint64_t v71 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 9),
             (*((unsigned char *)v183 + 46) & 0x80) == 0)
          ? (uint64_t v72 = 0)
          : (uint64_t v72 = *((void *)v183 + 9)),
            HIDWORD(v71) + v71 != (unint64_t)v71
         && *(void *)(v72 + 32 * v71 + 24)
         || ((unint64_t v73 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 10),
              (*((unsigned char *)v183 + 46) & 0x80) == 0)
           ? (uint64_t v74 = 0)
           : (uint64_t v74 = *((void *)v183 + 9)),
             HIDWORD(v73) + v73 != (unint64_t)v73
          && *(void *)(v74 + 32 * v73 + 24))))
      {
        unint64_t v11 = "extra quantization parameters set when weight is affine quantized";
        goto LABEL_155;
      }
      unsigned int v125 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 4);
      if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)v183 + 9)
                                                                                                 + 32 * v125
                                                                                                 + 24)
                                                                                     + 8) & 0xFFFFFFFFFFFFFFF8))
                        + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        goto LABEL_202;
      unsigned int v126 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 5);
      v127 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)v183 + 9)
                                                                                               + 32 * v126
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136);
      if (v127 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        unint64_t v11 = "weights affine quantization scale must be float";
        goto LABEL_155;
      }
      v130 = v183;
      unsigned int v131 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 4);
      uint64_t v132 = *(void *)(*((void *)v183 + 9) + 32 * v131 + 24);
      unint64_t v133 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 5);
      if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
        uint64_t v134 = *((void *)v183 + 9);
      }
      else {
        uint64_t v134 = 0;
      }
      if (HIDWORD(v133) + v133 == (unint64_t)v133) {
        uint64_t v135 = 0;
      }
      else {
        uint64_t v135 = *(void *)(v134 + 32 * v133 + 24);
      }
      unint64_t v136 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 6);
      if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
        uint64_t v137 = *((void *)v183 + 9);
      }
      else {
        uint64_t v137 = 0;
      }
      if (HIDWORD(v136) + v136 == (unint64_t)v136) {
        uint64_t v138 = 0;
      }
      else {
        uint64_t v138 = *(void *)(v137 + 32 * v136 + 24);
      }
      unint64_t v139 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 7);
      if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
        uint64_t v140 = *((void *)v183 + 9);
      }
      else {
        uint64_t v140 = 0;
      }
      if (HIDWORD(v139) + v139 == (unint64_t)v139) {
        uint64_t v141 = 0;
      }
      else {
        uint64_t v141 = *(void *)(v140 + 32 * v139 + 24);
      }
      v178[0] = (void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(&v183);
      if (v178[0])
      {
        mlir::IntegerAttr::getValue((uint64_t)v178, (llvm::APInt *)&TransposeLhsAttr);
        if (v186[0] > 0x40u)
        {
          LODWORD(v142) = *(_DWORD *)TransposeLhsAttr;
          MEMORY[0x21667D390](TransposeLhsAttr);
        }
        else
        {
          uint64_t v142 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
        }
        uint64_t v143 = v142 | 0x100000000;
      }
      else
      {
        uint64_t v143 = 0;
      }
      uint64_t v144 = (uint64_t)v130;
      uint64_t v145 = v132;
      uint64_t v146 = v135;
      uint64_t v147 = v138;
      uint64_t v148 = v141;
LABEL_278:
        return 0;
      goto LABEL_158;
    }
  }
  uint64_t v34 = v183;
  uint64_t TransposeLhsAttr = (uint64_t)v183;
  unint64_t v35 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 8);
  if ((*((unsigned char *)v34 + 46) & 0x80) != 0) {
    uint64_t v36 = *((void *)v34 + 9);
  }
  else {
    uint64_t v36 = 0;
  }
  if (HIDWORD(v35) + v35 == (unint64_t)v35
    || !*(void *)(v36 + 32 * v35 + 24))
  {
    uint64_t TransposeLhsAttr = (uint64_t)v183;
    mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 9);
    unint64_t v55 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 5);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v56 = *((void *)v183 + 9);
    }
    else {
      uint64_t v56 = 0;
    }
    if (HIDWORD(v55) + v55 == (unint64_t)v55
      || !*(void *)(v56 + 32 * v55 + 24)
      || ((unint64_t v57 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 6),
           (*((unsigned char *)v183 + 46) & 0x80) == 0)
        ? (uint64_t v58 = 0)
        : (uint64_t v58 = *((void *)v183 + 9)),
          HIDWORD(v57) + v57 == (unint64_t)v57
       || !*(void *)(v58 + 32 * v57 + 24)
       || ((unint64_t v59 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 9),
            (*((unsigned char *)v183 + 46) & 0x80) == 0)
         ? (uint64_t v60 = 0)
         : (uint64_t v60 = *((void *)v183 + 9)),
           HIDWORD(v59) + v59 == (unint64_t)v59
        || !*(void *)(v60 + 32 * v59 + 24)
        || ((unint64_t v61 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 10),
             (*((unsigned char *)v183 + 46) & 0x80) == 0)
          ? (uint64_t v62 = 0)
          : (uint64_t v62 = *((void *)v183 + 9)),
            HIDWORD(v61) + v61 == (unint64_t)v61
         || !*(void *)(v62 + 32 * v61 + 24)))))
    {
      unint64_t v11 = "quantization parameters missing for double affine quantized weights";
      goto LABEL_155;
    }
    unint64_t v63 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 8);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v64 = *((void *)v183 + 9);
    }
    else {
      uint64_t v64 = 0;
    }
    if (HIDWORD(v63) + v63 != (unint64_t)v63
      && *(void *)(v64 + 32 * v63 + 24))
    {
      unint64_t v11 = "extra quantization parameters set when weight is double affine quantized";
      goto LABEL_155;
    }
    unsigned int v128 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 4);
    if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)v183 + 9)
                                                                                               + 32 * v128
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      goto LABEL_202;
    unsigned int v129 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 5);
    if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)v183 + 9)
                                                                                               + 32 * v129
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      unint64_t v11 = "weights double affine quantization scale must be quantized";
LABEL_155:
      v178[0] = (void **)v11;
      __int16 v179 = 259;
      mlir::OpState::emitOpError((uint64_t *)&v183, v178, (uint64_t)&TransposeLhsAttr);
      char v75 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&TransposeLhsAttr);
      if (TransposeLhsAttr) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&TransposeLhsAttr);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v186);
      if (!v75) {
        return 0;
      }
      goto LABEL_158;
    }
    v149 = v183;
    unsigned int v150 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 4);
    uint64_t v151 = *(void *)(*((void *)v183 + 9) + 32 * v150 + 24);
    unint64_t v152 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 5);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v153 = *((void *)v183 + 9);
    }
    else {
      uint64_t v153 = 0;
    }
    if (HIDWORD(v152) + v152 == (unint64_t)v152) {
      uint64_t v154 = 0;
    }
    else {
      uint64_t v154 = *(void *)(v153 + 32 * v152 + 24);
    }
    unint64_t v155 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 6);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v156 = *((void *)v183 + 9);
    }
    else {
      uint64_t v156 = 0;
    }
    if (HIDWORD(v155) + v155 == (unint64_t)v155) {
      uint64_t v157 = 0;
    }
    else {
      uint64_t v157 = *(void *)(v156 + 32 * v155 + 24);
    }
    unint64_t v158 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 7);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v159 = *((void *)v183 + 9);
    }
    else {
      uint64_t v159 = 0;
    }
    if (HIDWORD(v158) + v158 == (unint64_t)v158) {
      uint64_t v160 = 0;
    }
    else {
      uint64_t v160 = *(void *)(v159 + 32 * v158 + 24);
    }
    v178[0] = (void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(&v183);
    if (v178[0])
    {
      mlir::IntegerAttr::getValue((uint64_t)v178, (llvm::APInt *)&TransposeLhsAttr);
      if (v186[0] > 0x40u)
      {
        LODWORD(v161) = *(_DWORD *)TransposeLhsAttr;
        MEMORY[0x21667D390](TransposeLhsAttr);
      }
      else
      {
        uint64_t v161 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
      }
      uint64_t v163 = v161 | 0x100000000;
    }
    else
    {
      uint64_t v163 = 0;
    }
      return 0;
    v164 = v183;
    unint64_t v165 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 5);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v166 = *((void *)v183 + 9);
    }
    else {
      uint64_t v166 = 0;
    }
    if (HIDWORD(v165) + v165 == (unint64_t)v165) {
      uint64_t v167 = 0;
    }
    else {
      uint64_t v167 = *(void *)(v166 + 32 * v165 + 24);
    }
    unint64_t v168 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 9);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v169 = *((void *)v183 + 9);
    }
    else {
      uint64_t v169 = 0;
    }
    if (HIDWORD(v168) + v168 == (unint64_t)v168) {
      uint64_t v170 = 0;
    }
    else {
      uint64_t v170 = *(void *)(v169 + 32 * v168 + 24);
    }
    unint64_t v171 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 10);
    if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
      uint64_t v172 = *((void *)v183 + 9);
    }
    else {
      uint64_t v172 = 0;
    }
    if (HIDWORD(v171) + v171 == (unint64_t)v171) {
      uint64_t v173 = 0;
    }
    else {
      uint64_t v173 = *(void *)(v172 + 32 * v171 + 24);
    }
    v178[0] = (void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(&v183);
    if (v178[0])
    {
      mlir::IntegerAttr::getValue((uint64_t)v178, (llvm::APInt *)&TransposeLhsAttr);
      if (v186[0] > 0x40u)
      {
        LODWORD(v174) = *(_DWORD *)TransposeLhsAttr;
        MEMORY[0x21667D390](TransposeLhsAttr);
      }
      else
      {
        uint64_t v174 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
      }
      uint64_t v143 = v174 | 0x100000000;
    }
    else
    {
      uint64_t v143 = 0;
    }
    uint64_t v144 = (uint64_t)v164;
    uint64_t v145 = v167;
    uint64_t v146 = v170;
    uint64_t v147 = v173;
    uint64_t v148 = 0;
    goto LABEL_278;
  }
  unint64_t v37 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 5);
  if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
    uint64_t v38 = *((void *)v183 + 9);
  }
  else {
    uint64_t v38 = 0;
  }
  if (HIDWORD(v37) + v37 != (unint64_t)v37
    && *(void *)(v38 + 32 * v37 + 24)
    || ((unint64_t v39 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 6), (*((unsigned char *)v183 + 46) & 0x80) == 0)
      ? (uint64_t v40 = 0)
      : (uint64_t v40 = *((void *)v183 + 9)),
        HIDWORD(v39) + v39 != (unint64_t)v39
     && *(void *)(v40 + 32 * v39 + 24)
     || ((unint64_t v41 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 9), (*((unsigned char *)v183 + 46) & 0x80) == 0)
       ? (uint64_t v42 = 0)
       : (uint64_t v42 = *((void *)v183 + 9)),
         HIDWORD(v41) + v41 != (unint64_t)v41
      && *(void *)(v42 + 32 * v41 + 24)
      || ((unint64_t v43 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 10),
           (*((unsigned char *)v183 + 46) & 0x80) == 0)
        ? (uint64_t v44 = 0)
        : (uint64_t v44 = *((void *)v183 + 9)),
          HIDWORD(v43) + v43 != (unint64_t)v43
       && *(void *)(v44 + 32 * v43 + 24)))))
  {
    unint64_t v11 = "extra quantization parameters set when weight is LUT quantized";
    goto LABEL_155;
  }
  unsigned int v108 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 4);
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)v183 + 9)
                                                                                             + 32 * v108
                                                                                             + 24)
                                                                                 + 8) & 0xFFFFFFFFFFFFFFF8))
                    + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
LABEL_202:
    unint64_t v11 = "quantized weights must be quantized type";
    goto LABEL_155;
  }
  v117 = v183;
  unsigned int v118 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 4);
  uint64_t v119 = *(void *)(*((void *)v183 + 9) + 32 * v118 + 24);
  unint64_t v120 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v183, 8);
  if ((*((unsigned char *)v183 + 46) & 0x80) != 0) {
    uint64_t v121 = *((void *)v183 + 9);
  }
  else {
    uint64_t v121 = 0;
  }
  if (HIDWORD(v120) + v120 == (unint64_t)v120) {
    uint64_t v122 = 0;
  }
  else {
    uint64_t v122 = *(void *)(v121 + 32 * v120 + 24);
  }
  v178[0] = (void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(&v183);
  if (v178[0])
  {
    mlir::IntegerAttr::getValue((uint64_t)v178, (llvm::APInt *)&TransposeLhsAttr);
    if (v186[0] > 0x40u)
    {
      LODWORD(v123) = *(_DWORD *)TransposeLhsAttr;
      MEMORY[0x21667D390](TransposeLhsAttr);
    }
    else
    {
      uint64_t v123 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
    }
    uint64_t v124 = v123 | 0x100000000;
  }
  else
  {
    uint64_t v124 = 0;
  }
  if (!mlir::mps::verifyDequantLUT((uint64_t)v117, v119, v122, v124)) {
    return 0;
  }
LABEL_158:
  v182 = *this;
  InputDequantizedType = mlir::mpsx::QuantizedMatMulOp::getInputDequantizedType(&v182);
  v181[0] = InputDequantizedType;
  v181[1] = v77;
  WeightsDequantizedType = mlir::mpsx::QuantizedMatMulOp::getWeightsDequantizedType(&v182);
  v180[0] = WeightsDequantizedType;
  v180[1] = v79;
  if (*(_UNKNOWN **)(*InputDequantizedType + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*WeightsDequantizedType + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return 1;
  }
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v181);
  uint64_t v82 = v81;
  v84 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v180);
  uint64_t v85 = v83;
  if (v82)
  {
    if (v82 != 1)
    {
      uint64_t TransposeLhsAttr = mlir::mpsx::QuantizedMatMulOp::getTransposeLhsAttr(&v182);
      Shape = &Shape[v82 - 1 + ((uint64_t)mlir::BoolAttr::getValue((mlir::BoolAttr *)&TransposeLhsAttr) << 63 >> 63)];
    }
    uint64_t v86 = *Shape;
    if (v85) {
      goto LABEL_164;
    }
LABEL_170:
    uint64_t v90 = 1;
    goto LABEL_171;
  }
  uint64_t v86 = 1;
  if (!v83) {
    goto LABEL_170;
  }
LABEL_164:
  if (v85 != 1)
  {
    v87 = &v84[v85];
    uint64_t TransposeLhsAttr = mlir::mpsx::QuantizedMatMulOp::getTransposeRhsAttr(&v182);
    BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&TransposeLhsAttr);
    uint64_t v89 = 0x1FFFFFFFFFFFFFFELL;
    if (Value) {
      uint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
    }
    v84 = &v87[v89];
  }
  uint64_t v90 = *v84;
LABEL_171:
  if (v86 == 0x8000000000000000 || v90 == 0x8000000000000000 || v86 == v90) {
    return 1;
  }
  v178[0] = (void **)"contracting dimensions differ ";
  __int16 v179 = 259;
  mlir::OpState::emitOpError((uint64_t *)&v182, v178, (uint64_t)&TransposeLhsAttr);
  if (TransposeLhsAttr)
  {
    LODWORD(v183) = 2;
    uint64_t v184 = v86;
    v91 = &v183;
    unint64_t v92 = v187;
    if (v188 >= v189)
    {
      unint64_t v162 = v188 + 1;
      if (v187 <= (unint64_t)&v183 && v187 + 24 * v188 > (unint64_t)&v183)
      {
        v176 = (char *)&v183 - v187;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v162, 24);
        unint64_t v92 = v187;
        v91 = (mlir::Operation **)&v176[v187];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v162, 24);
        v91 = &v183;
        unint64_t v92 = v187;
      }
    }
    unint64_t v93 = v92 + 24 * v188;
    long long v94 = *(_OWORD *)v91;
    *(void *)(v93 + 16) = v91[2];
    *(_OWORD *)unint64_t v93 = v94;
    ++v188;
    if (TransposeLhsAttr)
    {
      mlir::Diagnostic::operator<<((uint64_t)v186, " & ");
      if (TransposeLhsAttr)
      {
        LODWORD(v183) = 2;
        uint64_t v184 = v90;
        v95 = &v183;
        unint64_t v96 = v187;
        if (v188 >= v189)
        {
          unint64_t v175 = v188 + 1;
          if (v187 <= (unint64_t)&v183 && v187 + 24 * v188 > (unint64_t)&v183)
          {
            v177 = (char *)&v183 - v187;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v175, 24);
            unint64_t v96 = v187;
            v95 = (mlir::Operation **)&v177[v187];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v175, 24);
            v95 = &v183;
            unint64_t v96 = v187;
          }
        }
        unint64_t v97 = v96 + 24 * v188;
        long long v98 = *(_OWORD *)v95;
        *(void *)(v97 + 16) = v95[2];
        *(_OWORD *)unint64_t v97 = v98;
        ++v188;
      }
    }
  }
  char v99 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&TransposeLhsAttr);
  if (TransposeLhsAttr) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&TransposeLhsAttr);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v186);
  return v99 != 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v178 = *MEMORY[0x263EF8340];
  *(void *)&long long v168 = a6;
  BYTE8(v168) = 0;
  LOBYTE(v169) = 0;
  *((void *)&v169 + 1) = a9;
  *(void *)&long long v170 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v168);
    if ((_BYTE)v169) {
      LOBYTE(v169) = 0;
    }
    mlir::OperationName::OperationName((char *)&v168 + 8, "mpsx.quantized_matmul", 21, Context);
    LOBYTE(v169) = 1;
  }
  *((void *)&v170 + 1) = a4;
  uint64_t v171 = a5;
  uint64_t v17 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mpsx::QuantizedMatMulOpAdaptor::verify((uint64_t *)&v168, v17))
  {
    uint64_t v24 = mlir::Float32Type::get(this, v18);
LABEL_113:
    uint64_t v134 = mlir::UnrankedTensorType::get(v24);
    goto LABEL_114;
  }
  v165[0] = v168;
  v165[1] = v169;
  long long v166 = v170;
  uint64_t v167 = v171;
  BOOL Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v165);
  uint64_t v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)v165);
  unint64_t v21 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v20 - 16), *(void *)(*(void *)(*((void *)&v165[0] + 1) + 96) + 8));
  if (v22) {
    uint64_t v23 = *((void *)v21 + 1);
  }
  else {
    uint64_t v23 = 0;
  }
  *(void *)&long long v174 = v23;
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v174);
  long long v174 = *((unint64_t *)&v166 + 1);
  uint64_t v25 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v174, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_19;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_19;
  }
  unsigned int v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    unint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    uint64_t v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      unsigned int v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_19:
  }
    uint64_t v35 = 0;
  *(void *)&long long v172 = v25;
  *((void *)&v172 + 1) = v35;
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(v25) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    uint64_t v36 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v165) + 16);
    unint64_t v37 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)v165);
    uint64_t v38 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v36, v37, *(void *)(*(void *)(*((void *)&v165[0] + 1) + 96) + 16));
    if (v39) {
      uint64_t v40 = *((void *)v38 + 1);
    }
    else {
      uint64_t v40 = 0;
    }
    *(void *)&long long v174 = v40;
    uint64_t v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v174);
    LOBYTE(v174) = 0;
    LOBYTE(v175) = 0;
    uint64_t v25 = (uint64_t *)mlir::ShapedType::cloneWith((uint64_t *)&v172, &v174, v41);
  }
  long long v161 = v168;
  long long v162 = v169;
  long long v163 = v170;
  uint64_t v164 = v171;
  unsigned int ODSOperandIndexAndLength = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v161, 4);
  unint64_t v43 = *((void *)&v163 + 1);
  *(void *)&long long v174 = *((void *)&v163 + 1);
  *((void *)&v174 + 1) = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v43 = mlir::ValueRange::offset_base(&v174, ODSOperandIndexAndLength);
  }
  long long v174 = v43;
  uint64_t v44 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v174, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v44) {
    goto LABEL_36;
  }
  uint64_t v45 = *v44;
  unint64_t v46 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v47 = *(unsigned int *)(v45 + 16);
  if (!v47) {
    goto LABEL_36;
  }
  uint64_t v48 = *(void **)(v45 + 8);
  unint64_t v49 = &v48[2 * v47];
  do
  {
    unint64_t v50 = v47 >> 1;
    unint64_t v51 = &v48[2 * (v47 >> 1)];
    unint64_t v53 = *v51;
    uint64_t v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46) {
      uint64_t v48 = v52;
    }
    else {
      unint64_t v47 = v50;
    }
  }
  while (v47);
  if (v48 != v49 && *v48 == v46) {
    uint64_t v54 = v48[1];
  }
  else {
LABEL_36:
  }
    uint64_t v54 = 0;
  uint64_t v159 = v44;
  uint64_t v160 = v54;
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(v44) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    unint64_t v55 = v159;
    goto LABEL_94;
  }
  long long v174 = v161;
  long long v175 = v162;
  long long v176 = v163;
  uint64_t v177 = v164;
  unint64_t v56 = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v174, 8);
  unint64_t v57 = *((void *)&v176 + 1);
  *(void *)&long long v172 = *((void *)&v176 + 1);
  *((void *)&v172 + 1) = v56;
  if (v56)
  {
    unint64_t v57 = mlir::ValueRange::offset_base(&v172, v56);
    uint64_t v58 = *((void *)&v172 + 1);
  }
  else
  {
    uint64_t v58 = 0;
  }
  if (HIDWORD(v56) + v56 != v58)
  {
    long long v172 = v57;
    if (mlir::ValueRange::dereference_iterator(&v172, 0))
    {
      unint64_t v59 = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v161, 8);
      unint64_t v60 = *((void *)&v163 + 1);
      *(void *)&long long v172 = *((void *)&v163 + 1);
      *((void *)&v172 + 1) = v59;
      if (v59)
      {
        unint64_t v60 = mlir::ValueRange::offset_base(&v172, v59);
        uint64_t v61 = *((void *)&v172 + 1);
      }
      else
      {
        uint64_t v61 = 0;
      }
      if (HIDWORD(v59) + v59 == v61)
      {
        uint64_t v62 = 0;
      }
      else
      {
        long long v172 = v60;
        uint64_t v62 = mlir::ValueRange::dereference_iterator(&v172, 0);
      }
      unint64_t v63 = (void *)(*(void *)(v62 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v63) {
        goto LABEL_61;
      }
      uint64_t v64 = *v63;
      unint64_t v65 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v66 = *(unsigned int *)(v64 + 16);
      if (!v66) {
        goto LABEL_61;
      }
      unint64_t v67 = *(void **)(v64 + 8);
      uint64_t v68 = &v67[2 * v66];
      do
      {
        unint64_t v69 = v66 >> 1;
        uint64_t v70 = &v67[2 * (v66 >> 1)];
        unint64_t v72 = *v70;
        unint64_t v71 = v70 + 2;
        v66 += ~(v66 >> 1);
        if (v72 < v65) {
          unint64_t v67 = v71;
        }
        else {
          unint64_t v66 = v69;
        }
      }
      while (v66);
      if (v67 != v68 && *v67 == v65) {
        uint64_t v73 = v67[1];
      }
      else {
LABEL_61:
      }
        uint64_t v73 = 0;
      uint64_t v157 = v63;
      uint64_t v158 = v73;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v157))
      {
        Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v157);
        if (v75)
        {
          uint64_t v76 = 8 * v75;
          while (*Shape != 0x8000000000000000)
          {
            ++Shape;
            v76 -= 8;
            if (!v76) {
              goto LABEL_67;
            }
          }
        }
        else
        {
LABEL_67:
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v159))
          {
            uint64_t v77 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v159);
            if (!v78)
            {
LABEL_72:
              uint64_t WeightsQuantParamsAxis = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getWeightsQuantParamsAxis((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v161);
              mlir::ShapedType::getShape((mlir::ShapedType *)&v157);
              if (v81 != 1 && (WeightsQuantParamsAxis & 0xFF00000000) != 0)
              {
                uint64_t v82 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v157) + 8 * (v81 - 1));
                if (v82 >= 2)
                {
                  if ((int)WeightsQuantParamsAxis <= 0)
                  {
                    mlir::ShapedType::getShape((mlir::ShapedType *)&v159);
                    LODWORD(WeightsQuantParamsAxis) = v83 + WeightsQuantParamsAxis;
                  }
                  uint64_t v85 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v159);
                  uint64_t v86 = v84;
                  v87 = v173;
                  *(void *)&long long v172 = v173;
                  *((void *)&v172 + 1) = 0x500000000;
                  size_t v88 = 8 * v84;
                  if ((unint64_t)(8 * v84) < 0x29)
                  {
                    int v89 = 0;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v173, (8 * v84) >> 3, 8);
                    int v89 = DWORD2(v172);
                    v87 = (unsigned char *)v172;
                  }
                  if (v86)
                  {
                    memcpy(&v87[8 * v89], v85, v88);
                    int v89 = DWORD2(v172);
                    v87 = (unsigned char *)v172;
                  }
                  uint64_t v143 = v89 + (v88 >> 3);
                  DWORD2(v172) = v143;
                  *(void *)&v87[8 * (int)WeightsQuantParamsAxis] *= v82;
                  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v159);
                  uint64_t v145 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v87, v143, OperandRange, 0);
                  uint64_t v146 = (uint64_t)v145;
                  if (!v145) {
                    goto LABEL_147;
                  }
                  uint64_t v147 = *v145;
                  unint64_t v148 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v149 = *(unsigned int *)(v147 + 16);
                  if (!v149) {
                    goto LABEL_147;
                  }
                  unsigned int v150 = *(void **)(v147 + 8);
                  uint64_t v151 = &v150[2 * v149];
                  do
                  {
                    unint64_t v152 = v149 >> 1;
                    uint64_t v153 = &v150[2 * (v149 >> 1)];
                    unint64_t v155 = *v153;
                    uint64_t v154 = v153 + 2;
                    v149 += ~(v149 >> 1);
                    if (v155 < v148) {
                      unsigned int v150 = v154;
                    }
                    else {
                      unint64_t v149 = v152;
                    }
                  }
                  while (v149);
                  if (v150 != v151 && *v150 == v148) {
                    uint64_t v156 = v150[1];
                  }
                  else {
LABEL_147:
                  }
                    uint64_t v156 = 0;
                  uint64_t v159 = (uint64_t *)v146;
                  uint64_t v160 = v156;
                  if ((unsigned char *)v172 != v173) {
                    free((void *)v172);
                  }
                }
              }
              goto LABEL_90;
            }
            uint64_t v79 = 8 * v78;
            while (*v77 != 0x8000000000000000)
            {
              ++v77;
              v79 -= 8;
              if (!v79) {
                goto LABEL_72;
              }
            }
          }
        }
      }
      uint64_t v90 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v159);
      v91 = (uint64_t *)mlir::UnrankedTensorType::get(v90);
      uint64_t v92 = (uint64_t)v91;
      if (!v91) {
        goto LABEL_88;
      }
      uint64_t v93 = *v91;
      unint64_t v94 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v95 = *(unsigned int *)(v93 + 16);
      if (!v95) {
        goto LABEL_88;
      }
      unint64_t v96 = *(void **)(v93 + 8);
      unint64_t v97 = &v96[2 * v95];
      do
      {
        unint64_t v98 = v95 >> 1;
        char v99 = &v96[2 * (v95 >> 1)];
        unint64_t v101 = *v99;
        v100 = v99 + 2;
        v95 += ~(v95 >> 1);
        if (v101 < v94) {
          unint64_t v96 = v100;
        }
        else {
          unint64_t v95 = v98;
        }
      }
      while (v95);
      if (v96 != v97 && *v96 == v94) {
        uint64_t v102 = v96[1];
      }
      else {
LABEL_88:
      }
        uint64_t v102 = 0;
      uint64_t v159 = (uint64_t *)v92;
      uint64_t v160 = v102;
    }
  }
LABEL_90:
  unsigned int v103 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v161) + 16);
  uint64_t v104 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v161);
  unint64_t v105 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v103, v104, *(void *)(*(void *)(*((void *)&v161 + 1) + 96) + 16));
  if (v106) {
    uint64_t v107 = *((void *)v105 + 1);
  }
  else {
    uint64_t v107 = 0;
  }
  *(void *)&long long v172 = v107;
  uint64_t v108 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v172);
  LOBYTE(v172) = 0;
  v173[0] = 0;
  unint64_t v55 = (uint64_t *)mlir::ShapedType::cloneWith((uint64_t *)&v159, &v172, v108);
LABEL_94:
  unint64_t v109 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v168) + 16);
  uint64_t v110 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v168);
  uint64_t v111 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v109, v110, *(void *)(*(void *)(*((void *)&v168 + 1) + 96) + 16));
  if (v112) {
    uint64_t v113 = *((void *)v111 + 1);
  }
  else {
    uint64_t v113 = 0;
  }
  *(void *)&long long v174 = v113;
  uint64_t v114 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v174);
  uint64_t v115 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v168) + 32);
  uint64_t v116 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v168);
  v117 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v115, v116, *(void *)(*(void *)(*((void *)&v168 + 1) + 96) + 24));
  if ((v118 & 1) != 0 && (uint64_t v119 = *((void *)v117 + 1)) != 0)
  {
    if (mlir::BoolAttr::classof(*((void **)v117 + 1))) {
      uint64_t v120 = v119;
    }
    else {
      uint64_t v120 = 0;
    }
  }
  else
  {
    uint64_t v120 = 0;
  }
  *(void *)&long long v174 = v120;
  BOOL v121 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v174);
  uint64_t v122 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v168) + 32);
  uint64_t v123 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v168);
  uint64_t v124 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v122, v123, *(void *)(*(void *)(*((void *)&v168 + 1) + 96) + 32));
  if ((v125 & 1) != 0 && (uint64_t v126 = *((void *)v124 + 1)) != 0)
  {
    if (mlir::BoolAttr::classof(*((void **)v124 + 1))) {
      uint64_t v127 = v126;
    }
    else {
      uint64_t v127 = 0;
    }
  }
  else
  {
    uint64_t v127 = 0;
  }
  *(void *)&long long v174 = v127;
  BOOL v128 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v174);
  if (*(_UNKNOWN **)(*v25 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*v55 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || (int v129 = v128,
        v130 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v25),
        uint64_t v159 = v130,
        uint64_t v160 = v131,
        unint64_t v132 = (unint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v55),
        uint64_t v157 = (void *)v132,
        uint64_t v158 = v133,
        !((unint64_t)v130 | v132)))
  {
    uint64_t v24 = v114;
    goto LABEL_113;
  }
  if (*(_UNKNOWN **)(*v130 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && *(_UNKNOWN **)(*(void *)v132 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    *(void *)&long long v172 = v173;
    *((void *)&v172 + 1) = 0x400000000;
    uint64_t v138 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v159);
    unint64_t v140 = v139;
    uint64_t v141 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v157);
    {
      uint64_t v134 = mlir::RankedTensorType::get(v172, DWORD2(v172), v114, 0);
      char v137 = 1;
    }
    else if ((_BYTE)a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v174);
      if ((void)v174) {
        mlir::Diagnostic::operator<<((uint64_t)&v174 + 8, "invalid shape");
      }
      char v137 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
      if ((void)v174) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v174 + 8);
      uint64_t v134 = 0;
    }
    else
    {
      uint64_t v134 = 0;
      char v137 = 0;
    }
    if ((unsigned char *)v172 != v173) {
      free((void *)v172);
    }
  }
  else
  {
    char v137 = mlir::emitOptionalError<char const(&)[22],mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>((uint64_t)a2, a3, "invalid input types: ", (uint64_t *)&v159, ", ", (uint64_t *)&v157);
    uint64_t v134 = 0;
  }
  if (!v137) {
    return 0;
  }
LABEL_114:
  unsigned int v135 = *(_DWORD *)(a11 + 8);
  if (v135 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v135 + 1, 8);
    unsigned int v135 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v135) = v134;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::QuantizedMatMulOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v34[19] = *MEMORY[0x263EF8340];
  uint64_t v26 = *a1;
  BOOL Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
  {
LABEL_7:
    uint64_t v6 = "'mpsx.quantized_matmul' op requires attribute 'operandSegmentSizes'";
LABEL_13:
    v24[0] = v6;
    __int16 v25 = 259;
    mlir::emitError(a2, (uint64_t)v24, (uint64_t)&v29);
LABEL_14:
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v29);
    if (v29) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v29);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v30);
    return v8;
  }
  uint64_t v5 = 0;
  while (*(void *)(*(void *)(a1[1] + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(void **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value)) {
      uint64_t v5 = *((void *)Value + 1);
    }
    BOOL Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26)) {
      goto LABEL_7;
    }
  }
  uint64_t v7 = *((void *)Value + 1);
  while (1)
  {
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
    {
      uint64_t v6 = "'mpsx.quantized_matmul' op requires attribute 'output_type'";
      goto LABEL_13;
    }
    if (*(void *)(*(void *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(Value)) {
      break;
    }
    BOOL Value = (MirInfoChannelAssignment *)((char *)Value + 16);
  }
  uint64_t v10 = *((void *)Value + 1);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
  {
    uint64_t v13 = 0;
    unint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      if (*(void *)(*(void *)(a1[1] + 96) + 24) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        uint64_t v13 = (void *)*((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 32) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        unint64_t v12 = (void *)*((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 40) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        uint64_t v11 = *((void *)Value + 1);
      }
      BOOL Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    while (Value != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26));
  }
  uint64_t v23 = v7;
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v23);
  if (v14 != 11)
  {
    uint64_t v16 = v14;
    v24[0] = "'mpsx.quantized_matmul' op 'operandSegmentSizes' attribute for specifying operand segments must have 11 elements, but got ";
    __int16 v25 = 259;
    mlir::emitError(a2, (uint64_t)v24, (uint64_t)&v29);
    if (v29)
    {
      int v27 = 5;
      uint64_t v28 = v16;
      uint64_t v17 = &v27;
      unint64_t v18 = v31;
      if (v32 >= v33)
      {
        unint64_t v21 = v32 + 1;
        if (v31 <= (unint64_t)&v27 && v31 + 24 * v32 > (unint64_t)&v27)
        {
          char v22 = (char *)&v27 - v31;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v21, 24);
          unint64_t v18 = v31;
          uint64_t v17 = (int *)&v22[v31];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v21, 24);
          uint64_t v17 = &v27;
          unint64_t v18 = v31;
        }
      }
      unint64_t v19 = v18 + 24 * v32;
      long long v20 = *(_OWORD *)v17;
      *(void *)(v19 + 16) = *((void *)v17 + 2);
      *(_OWORD *)unint64_t v19 = v20;
      ++v32;
    }
    goto LABEL_14;
  }
  if (v5)
  {
    if (*(_UNKNOWN **)(*(void *)v5 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v24[0] = v5,
          uint64_t v29 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24),
          !mlir::Type::isSignedInteger((mlir::Type *)&v29, 32)))
    {
      uint64_t v6 = "'mpsx.quantized_matmul' op attribute 'input_quant_params_axis' failed to satisfy constraint: 32-bit signed integer attribute";
      goto LABEL_13;
    }
  }
  if (v11)
  {
    if (*(_UNKNOWN **)(*(void *)v11 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v24[0] = v11,
          uint64_t v29 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24),
          !mlir::Type::isSignedInteger((mlir::Type *)&v29, 32)))
    {
      uint64_t v6 = "'mpsx.quantized_matmul' op attribute 'weights_quant_params_axis' failed to satisfy constraint: 32-bit signed "
           "integer attribute";
      goto LABEL_13;
    }
  }
  if (v10)
  {
    if (*(_UNKNOWN **)(*(void *)v10 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      uint64_t v15 = "'mpsx.quantized_matmul' op attribute 'output_type' failed to satisfy constraint: any type attribute";
LABEL_52:
      v24[0] = v15;
      __int16 v25 = 259;
      mlir::emitError(a2, (uint64_t)v24, (uint64_t)&v29);
      uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v29);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v29);
      return v8;
    }
    uint64_t v29 = v10;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v29);
  }
  if (v13 && !mlir::BoolAttr::classof(v13))
  {
    uint64_t v15 = "'mpsx.quantized_matmul' op attribute 'transpose_lhs' failed to satisfy constraint: BOOL attribute";
    goto LABEL_52;
  }
  if (v12 && !mlir::BoolAttr::classof(v12))
  {
    uint64_t v15 = "'mpsx.quantized_matmul' op attribute 'transpose_rhs' failed to satisfy constraint: BOOL attribute";
    goto LABEL_52;
  }
  return 1;
}

uint64_t mlir::mpsx::inferMatMulResultType(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, int a7)
{
  v29[4] = *MEMORY[0x263EF8340];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a3);
  v26[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(a3);
  v26[1] = v15;
  v25[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(a4);
  v25[1] = v16;
  if (v26[0] | v25[0]
    && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v26)
    && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v25) & 1) != 0)
  {
    int v27 = v29;
    uint64_t v28 = 0x400000000;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
    unint64_t v19 = v18;
    long long v20 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
    {
      uint64_t v22 = mlir::RankedTensorType::get((uint64_t)v27, v28, ElementTypeOrSelf, 0);
      uint64_t v23 = 1;
    }
    else
    {
      uint64_t v22 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      uint64_t v23 = 0;
    }
    *a5 = v22;
    if (v27 != v29) {
      free(v27);
    }
  }
  else
  {
    *a5 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    return 1;
  }
  return v23;
}

uint64_t mlir::mpsx::anonymous namespace'::inferMatMulShape(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, void *a5, unint64_t a6, int a7, int a8, uint64_t a9)
{
  int v9 = a8;
  v76[22] = *MEMORY[0x263EF8340];
  unint64_t v67 = &v73;
  __dst = &v73;
  unint64_t v72 = 0x400000000;
  uint64_t v68 = v70;
  unint64_t v69 = 0x400000000;
  uint64_t v66 = a2;
  if (a4 == 1)
  {
    uint64_t v14 = *a3;
    v73.i64[0] = 1;
    v73.i64[1] = v14;
    goto LABEL_5;
  }
  if (!a4)
  {
    int64x2_t v73 = vdupq_n_s64(1uLL);
LABEL_5:
    LODWORD(v72) = 2;
    goto LABEL_6;
  }
  uint64_t v17 = a4;
  uint64_t v74 = v76;
  uint64_t v75 = 0x400000000;
  if (8 * a4 < 0x21)
  {
    int v18 = 0;
    unint64_t v19 = v76;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, (uint64_t)(8 * a4) >> 3, 8);
    int v18 = v75;
    unint64_t v19 = v74;
  }
  memcpy(&v19[v18], a3, 8 * a4);
  int v27 = v74;
  unint64_t v28 = (v75 + a4);
  LODWORD(v75) = v75 + a4;
  if (v74 == v76)
  {
    unint64_t v63 = a5;
    uint64_t v59 = v72;
    if (v72 >= v28)
    {
      a5 = v63;
      if (v28) {
        memmove(__dst, v76, 8 * v28);
      }
      LODWORD(v72) = v28;
      goto LABEL_94;
    }
    if (HIDWORD(v72) >= v28)
    {
      if (v72)
      {
        memmove(__dst, v76, 8 * v72);
LABEL_91:
        if (v59 != v75) {
          memcpy((char *)__dst + 8 * v59, (char *)v74 + 8 * v59, 8 * v75 - 8 * v59);
        }
        LODWORD(v72) = v28;
        a5 = v63;
        goto LABEL_94;
      }
    }
    else
    {
      LODWORD(v72) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v67, v28, 8);
    }
    uint64_t v59 = 0;
    goto LABEL_91;
  }
  if (__dst != v67)
  {
    free(__dst);
    int v27 = v74;
    LODWORD(v28) = v75;
  }
  __dst = v27;
  unint64_t v72 = __PAIR64__(HIDWORD(v75), v28);
  uint64_t v74 = v76;
  HIDWORD(v75) = 0;
LABEL_94:
  LODWORD(v75) = 0;
  int v9 = a8;
  if (v74 != v76) {
    free(v74);
  }
  if (a7)
  {
    uint64_t v61 = (char *)__dst + 8 * v72;
    *((void *)v61 - 1) = a3[v17 - 2];
    *((void *)v61 - 2) = a3[v17 - 1];
  }
LABEL_6:
  if (a6 == 1)
  {
    uint64_t v20 = *a5;
    LODWORD(v69) = 0;
    if (HIDWORD(v69) > 1)
    {
      uint64_t v21 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, 2uLL, 8);
      uint64_t v21 = v69;
    }
    uint64_t v26 = (char *)v68 + 8 * v21;
    *(void *)uint64_t v26 = v20;
    goto LABEL_25;
  }
  if (a6)
  {
    uint64_t v22 = a6;
    uint64_t v74 = v76;
    uint64_t v75 = 0x400000000;
    int v23 = v9;
    if (8 * a6 < 0x21)
    {
      int v24 = 0;
      __int16 v25 = v76;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, (uint64_t)(8 * a6) >> 3, 8);
      int v24 = v75;
      __int16 v25 = v74;
    }
    memcpy(&v25[v24], a5, 8 * a6);
    uint64_t v58 = v74;
    unint64_t v29 = (v75 + a6);
    LODWORD(v75) = v75 + a6;
    if (v74 != v76)
    {
      if (v68 != v70)
      {
        free(v68);
        uint64_t v58 = v74;
        LODWORD(v29) = v75;
      }
      uint64_t v68 = v58;
      unint64_t v69 = __PAIR64__(HIDWORD(v75), v29);
      uint64_t v74 = v76;
      HIDWORD(v75) = 0;
      goto LABEL_104;
    }
    uint64_t v60 = v69;
    if (v69 >= v29)
    {
      if (v29) {
        memmove(v68, v76, 8 * v29);
      }
      goto LABEL_103;
    }
    if (HIDWORD(v69) >= v29)
    {
      if (v69)
      {
        memmove(v68, v76, 8 * v69);
        goto LABEL_101;
      }
    }
    else
    {
      LODWORD(v69) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v29, 8);
    }
    uint64_t v60 = 0;
LABEL_101:
    if (v60 != v75) {
      memcpy((char *)v68 + 8 * v60, (char *)v74 + 8 * v60, 8 * v75 - 8 * v60);
    }
LABEL_103:
    LODWORD(v69) = v29;
LABEL_104:
    LODWORD(v75) = 0;
    if (v74 != v76)
    {
      free(v74);
      LODWORD(v29) = v69;
    }
    if (v23)
    {
      uint64_t v62 = (char *)v68 + 8 * v29;
      *((void *)v62 - 1) = a5[v22 - 2];
      *((void *)v62 - 2) = a5[v22 - 1];
    }
    goto LABEL_26;
  }
  LODWORD(v69) = 0;
  if (HIDWORD(v69) > 1)
  {
    uint64_t v15 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, 2uLL, 8);
    uint64_t v15 = v69;
  }
  uint64_t v26 = (char *)v68 + 8 * v15;
  *(void *)uint64_t v26 = 1;
LABEL_25:
  *((void *)v26 + 1) = 1;
  LODWORD(v29) = v69 + 2;
  LODWORD(v69) = v69 + 2;
LABEL_26:
  *(_DWORD *)(a9 + 8) = 0;
  if (v72 <= v29)
  {
    unsigned int v30 = 0;
    if (v29)
    {
      unint64_t v34 = (uint64_t *)v68;
      uint64_t v35 = 8 * v29;
      do
      {
        uint64_t v36 = *v34;
        if (v30 >= *(_DWORD *)(a9 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v30 + 1, 8);
          unsigned int v30 = *(_DWORD *)(a9 + 8);
        }
        *(void *)(*(void *)a9 + 8 * v30) = v36;
        unsigned int v30 = *(_DWORD *)(a9 + 8) + 1;
        *(_DWORD *)(a9 + 8) = v30;
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  else
  {
    unsigned int v30 = 0;
    unint64_t v31 = (uint64_t *)__dst;
    uint64_t v32 = 8 * v72;
    do
    {
      uint64_t v33 = *v31;
      if (v30 >= *(_DWORD *)(a9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v30 + 1, 8);
        unsigned int v30 = *(_DWORD *)(a9 + 8);
      }
      *(void *)(*(void *)a9 + 8 * v30) = v33;
      unsigned int v30 = *(_DWORD *)(a9 + 8) + 1;
      *(_DWORD *)(a9 + 8) = v30;
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  unint64_t v37 = (char *)__dst;
  uint64_t v38 = v72;
  char v39 = (char *)__dst + 8 * v72;
  uint64_t v40 = (char *)v68;
  uint64_t v41 = v69;
  uint64_t v42 = (char *)v68 + 8 * v69;
  uint64_t v43 = *(void *)a9;
  uint64_t v44 = *(void *)a9 + 8 * v30;
  *(void *)(v44 - 8) = *((void *)v42 - 1);
  uint64_t v45 = v42 - 16;
  *(void *)(v44 - 16) = *((void *)v39 - 2);
  if (v39 - 16 == v37 || v45 == v40)
  {
LABEL_56:
    if (a4 <= 1)
    {
      uint64_t v55 = *(void *)(v44 - 8);
      *(_DWORD *)(a9 + 8) = --v30;
      *(void *)(v43 + 8 * v30 - 8) = v55;
    }
    if (a6 <= 1) {
      *(_DWORD *)(a9 + 8) = v30 - 1;
    }
    uint64_t v56 = 1;
    goto LABEL_61;
  }
  uint64_t v47 = 8 * v38 - 24;
  uint64_t v48 = (unint64_t *)(v43 + 8 * v30 - 24);
  uint64_t v49 = 8 * v41 - 24;
  while (1)
  {
    uint64_t v50 = *(void *)&v37[v47];
    uint64_t v51 = *(void *)&v40[v49];
    if (v50 != 0x8000000000000000) {
      break;
    }
    unint64_t v52 = *(void *)&v40[v49];
    if (v51 > 1) {
      goto LABEL_54;
    }
    unint64_t v52 = *(void *)&v37[v47];
    if (v51 == 1) {
      goto LABEL_54;
    }
LABEL_48:
    unint64_t v52 = 0x8000000000000000;
LABEL_54:
    *v48-- = v52;
    if (v47)
    {
      v47 -= 8;
      uint64_t v54 = v49;
      v49 -= 8;
      if (v54) {
        continue;
      }
    }
    goto LABEL_56;
  }
  if (v51 == 0x8000000000000000)
  {
    unint64_t v52 = *(void *)&v37[v47];
    if (v50 > 1) {
      goto LABEL_54;
    }
    goto LABEL_48;
  }
  BOOL v53 = v50 == v51 || v51 == 1;
  unint64_t v52 = *(void *)&v37[v47];
  if (v53) {
    goto LABEL_54;
  }
  unint64_t v52 = *(void *)&v40[v49];
  if (v50 == 1) {
    goto LABEL_54;
  }
  *(_DWORD *)(a9 + 8) = 0;
  if ((_BYTE)v66)
  {
    mlir::emitError(a1, (uint64_t)&v74);
    if (v74) {
      mlir::Diagnostic::operator<<((uint64_t)&v75, "incompatible dimensions");
    }
    uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
    if (v74) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v75);
    uint64_t v40 = (char *)v68;
  }
  else
  {
    uint64_t v56 = 0;
  }
LABEL_61:
  if (v40 != v70) {
    free(v40);
  }
  if (__dst != v67) {
    free(__dst);
  }
  return v56;
}

uint64_t mlir::mpsx::anonymous namespace'::isCompatibleReturnTypesDefaultImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v9 = (void *)a5[3];
  if (!v9)
  {
    uint64_t v14 = 0;
    int v18 = 0;
    goto LABEL_10;
  }
  if (v9 != a5)
  {
    uint64_t v10 = (void *)(*(uint64_t (**)(void *))(*v9 + 16))(v9);
    uint64_t v14 = v10;
    if (v10) {
      goto LABEL_4;
    }
LABEL_8:
    int v18 = 0;
    goto LABEL_10;
  }
  uint64_t v14 = v13;
  (*(void (**)(void *, void *))(*a5 + 24))(a5, v13);
  uint64_t v10 = v14;
  if (!v14) {
    goto LABEL_8;
  }
LABEL_4:
  if (v10 == v13)
  {
    int v18 = v17;
    (*(void (**)(void *, void *))(v13[0] + 24))(v13, v17);
  }
  else
  {
    int v18 = (void *)(*(uint64_t (**)(void *))(*v10 + 16))(v10);
  }
LABEL_10:
  {
    uint64_t v11 = 1;
  }
  else
  {
    if (v14)
    {
      if (v14 == v13)
      {
        uint64_t v16 = v15;
        (*(void (**)(void *, void *))(v13[0] + 24))(v13, v15);
      }
      else
      {
        uint64_t v16 = (void *)(*(uint64_t (**)(void))(*v14 + 16))();
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (v16 == v15)
    {
      (*(void (**)(void *))(v15[0] + 32))(v15);
    }
    else if (v16)
    {
      (*(void (**)(void))(*v16 + 40))();
    }
  }
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v11;
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v75 = a6;
  LOBYTE(v76) = 0;
  char v77 = 0;
  uint64_t v78 = a9;
  uint64_t v79 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v75);
    if (v77) {
      char v77 = 0;
    }
    mlir::OperationName::OperationName(&v76, "mpsx.sparse_dense_matmul", 24, Context);
    char v77 = 1;
  }
  v80 = a4;
  unint64_t v81 = a5;
  if (a5 >= 4)
  {
    uint64_t v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mpsx::SparseDenseMatMulOpAdaptor::verify(&v75, v15))
    {
      v73[0] = v74;
      v73[1] = (void *)0x400000000;
      __b = v80;
      uint64_t v71 = 3;
      __b = (void *)mlir::ValueRange::offset_base(&__b, 3);
      uint64_t v71 = 0;
      uint64_t v16 = mlir::ValueRange::dereference_iterator(&__b, 0);
      if (mlir::matchConstantWithIntVector<long long>(v16, (uint64_t)v73))
      {
        __b = v80;
        uint64_t v71 = 4;
        __b = (void *)mlir::ValueRange::offset_base(&__b, 4);
        uint64_t v71 = 0;
        uint64_t v18 = mlir::ValueRange::dereference_iterator(&__b, 0);
        v68[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
        v68[1] = v19;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v68))
        {
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v68))
          {
            Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v68);
            if (!v21)
            {
LABEL_14:
              uint64_t v23 = *(void *)v73[0];
              uint64_t v24 = *((void *)v73[0] + 1);
              __int16 v25 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75) + 16);
              uint64_t v26 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v75);
              int v27 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v25, v26, *(void *)(*(void *)(v76 + 96) + 8));
              if ((v28 & 1) != 0 && (unint64_t v29 = (void *)*((void *)v27 + 1)) != 0)
              {
                if (mlir::BoolAttr::classof(*((void **)v27 + 1))) {
                  unsigned int v30 = v29;
                }
                else {
                  unsigned int v30 = 0;
                }
              }
              else
              {
                unsigned int v30 = 0;
              }
              __b = v30;
              if (!mlir::BoolAttr::getValue((mlir::BoolAttr *)&__b)) {
                uint64_t v24 = v23;
              }
              mlir::ShapedType::getShape((mlir::ShapedType *)v68);
              uint64_t v48 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v68) + 8 * (v47 - 2));
              mlir::ShapedType::getShape((mlir::ShapedType *)v68);
              uint64_t v50 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v68) + 8 * (v49 - 1));
              uint64_t v51 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75) + 16);
              unint64_t v52 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v75);
              BOOL v53 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v51, v52, *(void *)(*(void *)(v76 + 96) + 16));
              if ((v54 & 1) != 0 && (uint64_t v55 = (void *)*((void *)v53 + 1)) != 0)
              {
                if (mlir::BoolAttr::classof(*((void **)v53 + 1))) {
                  uint64_t v56 = v55;
                }
                else {
                  uint64_t v56 = 0;
                }
              }
              else
              {
                uint64_t v56 = 0;
              }
              __b = v56;
              if (mlir::BoolAttr::getValue((mlir::BoolAttr *)&__b)) {
                uint64_t v50 = v48;
              }
              __b = v72;
              uint64_t v71 = 0x400000000;
              uint64_t v57 = mlir::ShapedType::getShape((mlir::ShapedType *)v68);
              unsigned int v59 = v71;
              if (v57 + 8 * v58 - 16 != v57)
              {
                uint64_t v60 = (uint64_t *)v57;
                uint64_t v61 = 8 * v58 - 16;
                do
                {
                  uint64_t v62 = *v60;
                  if (v59 >= HIDWORD(v71))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v72, v59 + 1, 8);
                    unsigned int v59 = v71;
                  }
                  *((void *)__b + v59) = v62;
                  unsigned int v59 = v71 + 1;
                  LODWORD(v71) = v71 + 1;
                  ++v60;
                  v61 -= 8;
                }
                while (v61);
              }
              __src[0] = v24;
              __src[1] = v50;
              llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&__b, (uint64_t)__b + 8 * v59, (char *)__src, (char *)&__b);
              unint64_t v63 = __b;
              uint64_t v64 = v71;
              uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v68[0]);
              uint64_t v45 = (uint64_t)v63;
              uint64_t v46 = v64;
LABEL_54:
              uint64_t v65 = mlir::RankedTensorType::get(v45, v46, ElementTypeOrSelf, 0);
              uint64_t v66 = *(unsigned int *)(a11 + 8);
              if (v66 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v66 + 1, 8);
                LODWORD(v66) = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v66) = v65;
              ++*(_DWORD *)(a11 + 8);
              if (__b != v72) {
                free(__b);
              }
              goto LABEL_58;
            }
            uint64_t v22 = 8 * v21;
            while (*Shape != 0x8000000000000000)
            {
              ++Shape;
              v22 -= 8;
              if (!v22) {
                goto LABEL_14;
              }
            }
          }
          mlir::ShapedType::getShape((mlir::ShapedType *)v68);
          unint64_t v42 = v41;
          __b = v72;
          HIDWORD(v71) = 6;
          if (v41 < 7)
          {
            if (v41) {
              memset_pattern16(v72, &unk_211F0B1A0, 8 * v41);
            }
            uint64_t v43 = v72;
          }
          else
          {
            LODWORD(v71) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v72, v41, 8);
            uint64_t v43 = __b;
            memset_pattern16(__b, &unk_211F0B1A0, 8 * v42);
          }
          LODWORD(v71) = v42;
          uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v68[0]);
          uint64_t v45 = (uint64_t)v43;
          uint64_t v46 = v42;
          goto LABEL_54;
        }
        uint64_t v37 = mlir::getElementTypeOrSelf(v68[0]);
        if (!v37) {
          uint64_t v37 = mlir::Float32Type::get(this, v38);
        }
        uint64_t v39 = mlir::UnrankedTensorType::get(v37);
        unsigned int v40 = *(_DWORD *)(a11 + 8);
        if (v40 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v40 + 1, 8);
          unsigned int v40 = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v40) = v39;
      }
      else
      {
        uint64_t v34 = mlir::Float32Type::get(this, v17);
        uint64_t v35 = mlir::UnrankedTensorType::get(v34);
        uint64_t v36 = *(unsigned int *)(a11 + 8);
        if (v36 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
          LODWORD(v36) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v36) = v35;
      }
      ++*(_DWORD *)(a11 + 8);
LABEL_58:
      if (v73[0] != v74) {
        free(v73[0]);
      }
      return 1;
    }
  }
  uint64_t v31 = mlir::Float32Type::get(this, a2);
  uint64_t v32 = mlir::UnrankedTensorType::get(v31);
  uint64_t v33 = *(unsigned int *)(a11 + 8);
  if (v33 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
    LODWORD(v33) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v33) = v32;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::SparseDenseMatMulOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v15[23] = *MEMORY[0x263EF8340];
  uint64_t v13 = *a1;
  for (i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
        ;
        i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
    {
      uint64_t v5 = "'mpsx.sparse_dense_matmul' op requires attribute 'storage_type'";
      goto LABEL_6;
    }
    if (**(void **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i)) {
      break;
    }
  }
  uint64_t v8 = *((void *)i + 1);
  if (i != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
  {
    int v9 = 0;
    uint64_t v10 = 0;
    do
    {
      if (*(void *)(*(void *)(a1[1] + 96) + 8) == MirInfoChannelAssignment::GetNumNeededNEs(i))
      {
        uint64_t v10 = (void *)*((void *)i + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(i))
      {
        int v9 = (void *)*((void *)i + 1);
      }
      i = (MirInfoChannelAssignment *)((char *)i + 16);
    }
    while (i != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13));
    if (v10 && !mlir::BoolAttr::classof(v10))
    {
      uint64_t v5 = "'mpsx.sparse_dense_matmul' op attribute 'transpose_lhs' failed to satisfy constraint: BOOL attribute";
      goto LABEL_6;
    }
    if (v9 && !mlir::BoolAttr::classof(v9))
    {
      uint64_t v5 = "'mpsx.sparse_dense_matmul' op attribute 'transpose_rhs' failed to satisfy constraint: BOOL attribute";
      goto LABEL_6;
    }
  }
  if (!v8
    || *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
  {
    return 1;
  }
  uint64_t v5 = "'mpsx.sparse_dense_matmul' op attribute 'storage_type' failed to satisfy constraint: valid SparseTensorStorage";
LABEL_6:
  uint64_t v11 = v5;
  __int16 v12 = 259;
  mlir::emitError(a2, (uint64_t)&v11, (uint64_t)&v14);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
  if (v14) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v6;
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::verify(mlir::Operation **this)
{
  v21[22] = *MEMORY[0x263EF8340];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v17 = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*((void *)*this + 9) + 152) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (ElementTypeOrSelf == v17)
  {
    uint64_t v19 = v21;
    uint64_t v20 = 0x600000000;
    if (mlir::matchConstantWithIntVector<long long>(*(void *)(*((void *)*this + 9) + 120), (uint64_t)&v19))
    {
      uint64_t v3 = (void *)*((void *)*this + 9);
      uint64_t v4 = v3[3];
      uint64_t v5 = v3[7];
      uint64_t v6 = v3[11];
      v11[0] = mlir::anec::BatchToSpace::getFactorsAttr(this);
      int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)v11);
      uint64_t v8 = *(void *)v19;
      uint64_t v9 = *((void *)v19 + 1);
      v11[0] = this;
      uint64_t v2 = mlir::mps::verifySparseTensorHelper(v4, v5, v6, Kind, v8, v9, (void (*)(void *__return_ptr, uint64_t, void *))llvm::function_ref<mlir::InFlightDiagnostic ()(llvm::Twine const&)>::callback_fn<mlir::mpsx::SparseDenseMatMulOp::verify(void)::$_0>, (uint64_t)v11) != 0;
    }
    else
    {
      uint64_t v2 = 1;
    }
    if (v19 != v21) {
      free(v19);
    }
  }
  else
  {
    v11[0] = "failed: expected same element type between the sparse and the dense matrix, but got {0} and {1}";
    v11[1] = 95;
    v11[2] = v14;
    v11[3] = 2;
    v12[0] = &unk_26C35C490;
    v12[1] = &ElementTypeOrSelf;
    v13[0] = &unk_26C35C490;
    v13[1] = &v17;
    v14[0] = v12;
    v14[1] = v13;
    __int16 v16 = 263;
    uint64_t v15 = (void **)v11;
    mlir::OpState::emitOpError((uint64_t *)this, &v15, (uint64_t)&v19);
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v19);
    if (v19) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v20);
  }
  return v2;
}

const char *llvm::formatv<mlir::Type &,mlir::Type &>@<X0>(const char *__s@<X0>, const char *a2@<X1>, const char *a3@<X2>, const char **a4@<X8>)
{
  uint64_t v6 = __s;
  if (__s) {
    __s = (const char *)strlen(__s);
  }
  *a4 = v6;
  a4[1] = __s;
  a4[8] = (const char *)(a4 + 4);
  a4[2] = (const char *)(a4 + 8);
  a4[3] = (const char *)2;
  a4[4] = (const char *)&unk_26C35C490;
  a4[5] = a2;
  a4[6] = (const char *)&unk_26C35C490;
  a4[7] = a3;
  a4[9] = (const char *)(a4 + 6);
  return __s;
}

uint64_t mlir::mpsx::getAxis(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = a4;
  uint64_t v15 = (uint64_t **)&v16;
  uint64_t v18 = a3;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v15, DefiningOp)) {
    return 1;
  }
  int64_t SingleInt = mlir::getSingleIntValue<long long>(v16, v17);
  uint64_t v16 = SingleInt;
  uint64_t v17 = v11;
  uint64_t v12 = 1;
  if ((_BYTE)v11)
  {
    *(void *)a5 = SingleInt;
    *(unsigned char *)(a5 + 8) = 1;
    if (SingleInt < 0)
    {
      SingleInt += a4;
      *(void *)a5 = SingleInt;
      if (SingleInt < 0) {
        return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", &v16, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
      }
    }
    if (SingleInt >= a4) {
      return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", &v16, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
    }
  }
  return v12;
}

uint64_t mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, char *a6, uint64_t *a7)
{
  v15[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v14);
  if (v14)
  {
    mlir::Diagnostic::operator<<((uint64_t)v15, a3);
    mlir::Diagnostic::append<long long &,char const(&)[47],char const(&)[9],long long &>((uint64_t)v15, a4, a5, a6, a7);
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
  if (v14) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v12;
}

uint64_t mlir::mpsx::QuantizedGatherOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v66[2] = *MEMORY[0x263EF8340];
  v66[0] = a4;
  v66[1] = a5;
  uint64_t v59 = a6;
  LOBYTE(v60) = 0;
  char v61 = 0;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61) {
      char v61 = 0;
    }
    mlir::OperationName::OperationName(&v60, "mpsx.quantized_gather", 21, Context);
    char v61 = 1;
  }
  uint64_t v64 = a4;
  unint64_t v65 = a5;
  if (a5 < 4
    || (uint64_t v17 = mlir::UnknownLoc::get(this, a2), !mlir::mpsx::QuantizedGatherOpAdaptor::verify(&v59, v17)))
  {
    uint64_t v28 = mlir::Float32Type::get(this, a2);
    uint64_t v29 = mlir::UnrankedTensorType::get(v28);
    uint64_t v30 = *(unsigned int *)(a11 + 8);
    if (v30 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v30 + 1, 8);
      LODWORD(v30) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v30) = v29;
    goto LABEL_14;
  }
  uint64_t v18 = mlir::ValueRange::dereference_iterator(v66, 0);
  v55[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
  v55[1] = v19;
  uint64_t v20 = mlir::ValueRange::dereference_iterator(v66, 1);
  uint64_t v21 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
  v54[0] = v21;
  v54[1] = v22;
  if (!v55[0] || !v21)
  {
    uint64_t v32 = mlir::ValueRange::dereference_iterator(v66, 0);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v32);
    if (!ElementTypeOrSelf) {
      uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, v34);
    }
    uint64_t v35 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    unsigned int v36 = *(_DWORD *)(a11 + 8);
    if (v36 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
      unsigned int v36 = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v36) = v35;
    goto LABEL_14;
  }
  uint64_t v23 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59) + 16);
  uint64_t v24 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v59);
  __int16 v25 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v23, (MirInfoChannelAssignment *)(v24 - 16), *(void *)(*(void *)(v60 + 96) + 16));
  if (v26) {
    uint64_t v27 = *((void *)v25 + 1);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v53 = v27;
  BOOL Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v53);
  uint64_t v38 = mlir::getElementTypeOrSelf(Value);
  uint64_t v39 = mlir::UnrankedTensorType::get(v38);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v55)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v54))
  {
    goto LABEL_30;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v55);
  uint64_t v41 = v40;
  LOBYTE(v51) = 0;
  char v52 = 0;
  uint64_t v42 = mlir::ValueRange::dereference_iterator(v66, 2);
  if (mlir::mpsx::getAxis((uint64_t)a2, a3, v42, v41, (uint64_t)&v51))
  {
    if (!v52) {
      goto LABEL_30;
    }
    unsigned int BatchDims = mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase::getBatchDims((mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase *)&v59);
    uint64_t v56 = v58;
    uint64_t v57 = 0x400000000;
    Shape = (unint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v55);
    unint64_t v46 = v45;
    int v47 = (unint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v54);
    if (v49) {
      uint64_t v39 = mlir::RankedTensorType::get((uint64_t)v56, v57, v38, 0);
    }
    if (v56 != v58) {
      free(v56);
    }
    if (v49)
    {
LABEL_30:
      uint64_t v50 = *(unsigned int *)(a11 + 8);
      if (v50 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
        LODWORD(v50) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v50) = v39;
LABEL_14:
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::mpsx::QuantizedGatherOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v31[19] = *MEMORY[0x263EF8340];
  uint64_t v23 = *a1;
  BOOL Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v23);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
  {
LABEL_7:
    uint64_t v6 = "'mpsx.quantized_gather' op requires attribute 'batch_dims'";
LABEL_18:
    v21[0] = v6;
    __int16 v22 = 259;
    mlir::emitError(a2, (uint64_t)v21, (uint64_t)&v26);
LABEL_19:
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
    if (v26) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v27);
    return v9;
  }
  uint64_t v5 = 0;
  while (*(void *)(*(void *)(a1[1] + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(void **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value)) {
      uint64_t v5 = *((void *)Value + 1);
    }
    BOOL Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23)) {
      goto LABEL_7;
    }
  }
  uint64_t v7 = *((void *)Value + 1);
  while (1)
  {
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
    {
      uint64_t v6 = "'mpsx.quantized_gather' op requires attribute 'dtype'";
      goto LABEL_18;
    }
    if (*(void *)(*(void *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(Value)) {
      break;
    }
    BOOL Value = (MirInfoChannelAssignment *)((char *)Value + 16);
  }
  uint64_t v8 = *((void *)Value + 1);
  while (1)
  {
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
    {
      uint64_t v6 = "'mpsx.quantized_gather' op requires attribute 'operandSegmentSizes'";
      goto LABEL_18;
    }
    if (*(void *)(*(void *)(a1[1] + 96) + 24) == MirInfoChannelAssignment::GetNumNeededNEs(Value)) {
      break;
    }
    BOOL Value = (MirInfoChannelAssignment *)((char *)Value + 16);
  }
  uint64_t v20 = *((void *)Value + 1);
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v20);
  if (v11 != 6)
  {
    uint64_t v12 = v11;
    v21[0] = "'mpsx.quantized_gather' op 'operandSegmentSizes' attribute for specifying operand segments must have 6 elements, but got ";
    __int16 v22 = 259;
    mlir::emitError(a2, (uint64_t)v21, (uint64_t)&v26);
    if (v26)
    {
      int v24 = 5;
      uint64_t v25 = v12;
      uint64_t v13 = &v24;
      unint64_t v14 = v28;
      if (v29 >= v30)
      {
        unint64_t v18 = v29 + 1;
        if (v28 <= (unint64_t)&v24 && v28 + 24 * v29 > (unint64_t)&v24)
        {
          uint64_t v19 = (char *)&v24 - v28;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v18, 24);
          unint64_t v14 = v28;
          uint64_t v13 = (int *)&v19[v28];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v18, 24);
          uint64_t v13 = &v24;
          unint64_t v14 = v28;
        }
      }
      unint64_t v15 = v14 + 24 * v29;
      long long v16 = *(_OWORD *)v13;
      *(void *)(v15 + 16) = *((void *)v13 + 2);
      *(_OWORD *)unint64_t v15 = v16;
      ++v29;
    }
    goto LABEL_19;
  }
  if (v8)
  {
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      uint64_t v6 = "'mpsx.quantized_gather' op attribute 'dtype' failed to satisfy constraint: any type attribute";
      goto LABEL_18;
    }
    uint64_t v26 = v8;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  }
  if (!v7
    || *(_UNKNOWN **)(*(void *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && (v21[0] = v7,
        uint64_t v26 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v21),
        mlir::Type::isUnsignedInteger((mlir::Type *)&v26, 32)))
  {
    if (!v5 || *(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
      return 1;
    }
    uint64_t v17 = "'mpsx.quantized_gather' op attribute 'allow_negative_indices' failed to satisfy constraint: unit attribute";
  }
  else
  {
    uint64_t v17 = "'mpsx.quantized_gather' op attribute 'batch_dims' failed to satisfy constraint: 32-bit unsigned integer attribute";
  }
  v21[0] = v17;
  __int16 v22 = 259;
  mlir::emitError(a2, (uint64_t)v21, (uint64_t)&v26);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v26);
  return v9;
}

uint64_t *mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase::getBatchDims(mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase *this)
{
  BOOL Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue(this);
  uint64_t v3 = mlir::DictionaryAttr::end(this);
  uint64_t v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v3 - 32), *(void *)(*(void *)(*((void *)this + 1) + 96) + 8));
  if (v5) {
    uint64_t v6 = *((void *)v4 + 1);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v11 = v6;
  mlir::IntegerAttr::getValue((uint64_t)&v11, (llvm::APInt *)&v9);
  if (v10 <= 0x40) {
    return v9;
  }
  uint64_t v7 = *v9;
  MEMORY[0x21667D390]();
  return (uint64_t *)v7;
}

uint64_t mlir::mpsx::anonymous namespace'::inferQuantizedGatherShape(uint64_t a1, char a2, unint64_t *a3, unint64_t a4, unint64_t *a5, unint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  v76[2] = *MEMORY[0x263EF8340];
  uint64_t v75 = a7;
  unsigned int v74 = a8;
  uint64_t v10 = a8;
  unint64_t v11 = a4 - a8;
  if (a4 <= a8 || a6 < a8) {
    return mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>(a1, a2, "invalid batch dimensions: ", &v74, ", must be less than ranks of all input tensors");
  }
  uint64_t v16 = a7 - a8;
  if (a7 < a8) {
    return mlir::emitOptionalError<char const(&)[39],char const(&)[19],long long &,char const(&)[4],unsigned int &>(a1, a2, "Axis must be greater than or equal to ", "batch dimensions, ", &v75, " < ", &v74);
  }
  unint64_t v19 = a6 - a8;
  unint64_t v20 = v11 - 1;
  if ((uint64_t)(v11 - 1 + v19) >= 0)
  {
    unint64_t v22 = v20 + a6;
    unint64_t v23 = *(unsigned int *)(a9 + 8);
    if (v20 + a6 != v23)
    {
      if (v20 + a6 >= v23)
      {
        uint64_t v72 = a7 - a8;
        unint64_t v73 = v11;
        unint64_t v71 = a6 - a8;
        if (v22 > *(unsigned int *)(a9 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v20 + a6, 8);
          unint64_t v19 = v71;
          uint64_t v16 = v72;
          unint64_t v11 = v73;
          unint64_t v23 = *(unsigned int *)(a9 + 8);
        }
        if (v22 != v23)
        {
          bzero((void *)(*(void *)a9 + 8 * v23), 8 * (v22 - v23));
          unint64_t v19 = v71;
          uint64_t v16 = v72;
          unint64_t v11 = v73;
        }
      }
      *(_DWORD *)(a9 + 8) = v22;
      unint64_t v23 = v22;
    }
    int v24 = &a3[a4];
    uint64_t v25 = *(unint64_t **)a9;
    uint64_t v26 = *(void *)a9 + 8 * v23;
    unint64_t v27 = v16 - v20;
    if (v16 != v20)
    {
      uint64_t v28 = 8 * a4 - 16;
      unint64_t v29 = v28 - 8 * a7;
      if (v29 < 0x78)
      {
        unsigned int v30 = (char *)&a3[a4];
        uint64_t v31 = &v25[v23];
LABEL_26:
        uint64_t v38 = v31 - 1;
        do
        {
          unint64_t v39 = *((void *)v30 - 1);
          v30 -= 8;
          *v38-- = v39;
        }
        while (v30 != (char *)&v24[v27]);
        goto LABEL_28;
      }
      unsigned int v30 = (char *)&a3[a4];
      uint64_t v31 = &v25[v23];
      if (v30 - (char *)v25 - 8 * v23 < 0x20) {
        goto LABEL_26;
      }
      uint64_t v32 = (v29 >> 3) + 1;
      uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v30 = (char *)&v24[v33 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v31 = (unint64_t *)(v26 - v33);
      uint64_t v34 = &v25[v23 - 2];
      uint64_t v35 = (long long *)((char *)a3 + v28);
      uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v37 = *v35;
        *((_OWORD *)v34 - 1) = *(v35 - 1);
        *(_OWORD *)uint64_t v34 = v37;
        v34 -= 4;
        v35 -= 2;
        v36 -= 4;
      }
      while (v36);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_26;
      }
    }
LABEL_28:
    if (a6 != v10)
    {
      uint64_t v40 = &a5[a6];
      uint64_t v41 = v26 + 8 * v27;
      unint64_t v42 = 8 * a6 - 8 * v10 - 8;
      if (v42 >= 0x98)
      {
        uint64_t v44 = v23 + a7;
        uint64_t v43 = &a5[a6];
        if ((unint64_t)v43 + 8 * a4 - (void)&v25[v44] - 8 >= 0x20)
        {
          uint64_t v45 = (v42 >> 3) + 1;
          uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v43 = &v40[v46 / 0xFFFFFFFFFFFFFFF8];
          v41 -= v46;
          int v47 = (_OWORD *)((char *)v25 + v44 * 8 - 8 * a4 - 8);
          unint64_t v48 = &a5[a6 - 2];
          uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *int v47 = v50;
            v47 -= 2;
            v48 -= 4;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        uint64_t v43 = &a5[a6];
      }
      uint64_t v51 = &v40[-v19];
      char v52 = (void *)(v41 - 8);
      do
      {
        uint64_t v53 = *--v43;
        *v52-- = v53;
      }
      while (v43 != v51);
    }
LABEL_37:
    if (a7 != v10)
    {
      uint64_t v54 = v26 + 8 * (v16 - (v11 + v19)) + 8;
      uint64_t v55 = &v24[v16 - v11];
      unint64_t v56 = 8 * a7 - 8 * v10 - 8;
      if (v56 < 0xB8) {
        goto LABEL_43;
      }
      uint64_t v57 = v23 + a7 + v10;
      uint64_t v58 = 8 * (a6 + a4);
      if ((unint64_t)&a3[a7 - 1] + v58 - (void)&v25[v57] < 0x20) {
        goto LABEL_43;
      }
      uint64_t v59 = (v56 >> 3) + 1;
      uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v55 = (unint64_t *)((char *)v55 - v60);
      v54 -= v60;
      char v61 = (_OWORD *)((char *)v25 + v57 * 8 - v58 - 8);
      uint64_t v62 = &a3[a7 - 2];
      uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v64 = *(_OWORD *)v62;
        *(v61 - 1) = *((_OWORD *)v62 - 1);
        *char v61 = v64;
        v61 -= 2;
        v62 -= 4;
        v63 -= 4;
      }
      while (v63);
      if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        unint64_t v65 = &v24[-v11];
        uint64_t v66 = (void *)(v54 - 8);
        do
        {
          uint64_t v67 = *--v55;
          *v66-- = v67;
        }
        while (v55 != v65);
      }
    }
    if (a8)
    {
      uint64_t v68 = 8 * v10;
      do
      {
        unint64_t v69 = *a5++;
        v76[0] = v69;
        unint64_t v70 = *a3++;
        v76[1] = v70;
        *v25++ = mlir::mps::mergeDynamicDims(v76, 2);
        v68 -= 8;
      }
      while (v68);
    }
    return 1;
  }

  return mlir::emitOptionalError<char const(&)[57],char const(&)[5]>(a1, a2, "Rank of destination array must be greater than or equal ", "to 0");
}

BOOL mlir::mpsx::QuantizedGatherOp::verify(mlir::Operation **this)
{
  v59[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(*(void *)(*(void *)(*((void *)*this + 9)
                                         + 32
                                         * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 0)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = *v2;
  unint64_t v4 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v5 = *(unsigned int *)(v3 + 16);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *(void **)(v3 + 8);
  uint64_t v7 = &v6[2 * v5];
  do
  {
    unint64_t v8 = v5 >> 1;
    uint64_t v9 = &v6[2 * (v5 >> 1)];
    unint64_t v11 = *v9;
    uint64_t v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4) {
      uint64_t v6 = v10;
    }
    else {
      unint64_t v5 = v8;
    }
  }
  while (v5);
  if (v6 != v7 && *v6 == v4) {
    uint64_t v12 = v6[1];
  }
  else {
LABEL_10:
  }
    uint64_t v12 = 0;
  v51[0] = v2;
  v51[1] = v12;
  uint64_t v13 = (uint64_t *)(*(void *)(*(void *)(*((void *)*this + 9)
                                          + 32
                                          * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 1)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13) {
    goto LABEL_20;
  }
  uint64_t v14 = *v13;
  unint64_t v15 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v16 = *(unsigned int *)(v14 + 16);
  if (!v16) {
    goto LABEL_20;
  }
  uint64_t v17 = *(void **)(v14 + 8);
  unint64_t v18 = &v17[2 * v16];
  do
  {
    unint64_t v19 = v16 >> 1;
    unint64_t v20 = &v17[2 * (v16 >> 1)];
    unint64_t v22 = *v20;
    uint64_t v21 = v20 + 2;
    v16 += ~(v16 >> 1);
    if (v22 < v15) {
      uint64_t v17 = v21;
    }
    else {
      unint64_t v16 = v19;
    }
  }
  while (v16);
  if (v17 != v18 && *v17 == v15) {
    uint64_t v23 = v17[1];
  }
  else {
LABEL_20:
  }
    uint64_t v23 = 0;
  v50[0] = v13;
  v50[1] = v23;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51))
  {
    Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v51);
    unint64_t v26 = v25;
  }
  else
  {
    Shape = 0;
    unint64_t v26 = 0x8000000000000000;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v50))
  {
    unint64_t v27 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v50);
    unint64_t v29 = v28;
  }
  else
  {
    unint64_t v27 = 0;
    unint64_t v29 = 0x8000000000000000;
  }
  v47[0] = (void **)mlir::anec::AveragePool::getKsizeAttr(this);
  mlir::IntegerAttr::getValue((uint64_t)v47, (llvm::APInt *)&v54);
  if (LODWORD(v55[0]) > 0x40)
  {
    unint64_t v30 = *v54;
    MEMORY[0x21667D390]();
  }
  else
  {
    unint64_t v30 = v54;
  }
  unint64_t v49 = v30;
  if ((v26 == 0x8000000000000000 || v30 < v26) && (v29 == 0x8000000000000000 || v30 <= v29))
  {
    uint64_t v35 = 1;
    if (v26 == 0x8000000000000000 || v29 == 0x8000000000000000) {
      return v35;
    }
    if (mlir::verifyCompatibleShape(Shape, v30, v27, v30))
    {
      LOBYTE(v52) = 0;
      LOBYTE(v53) = 0;
      uint64_t v37 = *((void *)*this + 3);
      unsigned int ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 2);
      if (!mlir::mpsx::getAxis(v37, 1, *(void *)(*((void *)*this + 9) + 32 * ODSOperandIndexAndLength + 24), v26, (uint64_t)&v52))return 0; {
      if (!(_BYTE)v53)
      }
        return v35;
      if (v52 < v30)
      {
        v47[0] = (void **)"Axis must be greater than or equal to batch ";
        __int16 v48 = 259;
        mlir::OpState::emitOpError((uint64_t *)this, v47, (uint64_t)&v54);
        if (v54) {
          mlir::Diagnostic::operator<<((uint64_t)v55, "dimensions, ");
        }
        unint64_t v39 = (void *)mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)&v54, (uint64_t *)&v52);
        uint64_t v40 = (uint64_t)v39;
        if (*v39) {
          mlir::Diagnostic::operator<<((uint64_t)(v39 + 1), " < ");
        }
        uint64_t v41 = (unsigned int **)mlir::InFlightDiagnostic::operator<<<unsigned long &>(v40, (uint64_t *)&v49);
        goto LABEL_58;
      }
      if ((uint64_t)(v26 + v29 - 1) >= 0)
      {
        uint64_t v54 = (unsigned int *)v51;
        v55[0] = this;
        if (!v51[0] || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51)) {
          return v35;
        }
        unsigned int v42 = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 3);
        if (mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()((uint64_t)&v54, "scale", *(void *)(*((void *)*this + 9) + 32 * v42 + 24)))
        {
          uint64_t ZeroPoint = mlir::mpsx::QuantizedGatherOp::getZeroPoint(this);
          if (mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()((uint64_t)&v54, "zeroPoint", ZeroPoint))
          {
            uint64_t Min = mlir::mpsx::QuantizedGatherOp::getMin(this);
            return mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()((uint64_t)&v54, "min", Min) != 0;
          }
        }
        return 0;
      }
      v47[0] = (void **)"Rank of destination array must be greater than or equal to 0";
      __int16 v48 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v47, (uint64_t)&v54);
    }
    else
    {
      v47[0] = (void **)"invalid input tensor shapes: input tensor shapes ";
      __int16 v48 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v47, (uint64_t)&v54);
      if (v54) {
        mlir::Diagnostic::operator<<((uint64_t)v55, "must match along batch dimensions");
      }
    }
    uint64_t v41 = &v54;
LABEL_58:
    uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v54);
    return v35;
  }
  v47[0] = (void **)"invalid batch dimensions: ";
  __int16 v48 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v47, (uint64_t)&v54);
  if (v54)
  {
    LODWORD(v52) = 5;
    unint64_t v53 = v30;
    uint64_t v31 = &v52;
    unint64_t v32 = v56;
    if (v57 >= v58)
    {
      unint64_t v45 = v57 + 1;
      if (v56 <= (unint64_t)&v52 && v56 + 24 * v57 > (unint64_t)&v52)
      {
        uint64_t v46 = (char *)&v52 - v56;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
        unint64_t v32 = v56;
        uint64_t v31 = (unint64_t *)&v46[v56];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
        uint64_t v31 = &v52;
        unint64_t v32 = v56;
      }
    }
    unint64_t v33 = v32 + 24 * v57;
    long long v34 = *(_OWORD *)v31;
    *(void *)(v33 + 16) = v31[2];
    *(_OWORD *)unint64_t v33 = v34;
    ++v57;
    if (v54) {
      mlir::Diagnostic::operator<<((uint64_t)v55, ", must be less than ranks of all input tensors");
    }
  }
  uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
  if (v54) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v55);
  return v35;
}

uint64_t mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()(uint64_t a1, char *a2, uint64_t a3)
{
  v48[19] = *MEMORY[0x263EF8340];
  if (!a3) {
    return 1;
  }
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  v40[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v40[1] = v6;
  if (!v40[0] || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v40)) {
    return 1;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v40)
    || (mlir::ShapedType::getShape((mlir::ShapedType *)v40),
        uint64_t v8 = v7,
        mlir::ShapedType::getShape(*(mlir::ShapedType **)a1),
        v8 == v9))
  {
    mlir::ShapedType::getShape(*(mlir::ShapedType **)a1);
    if (v10 >= 1)
    {
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v13 = 8 * v11;
        uint64_t v14 = *(void *)(mlir::ShapedType::getShape(*(mlir::ShapedType **)a1) + v13);
        uint64_t v15 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v40) + v13);
        BOOL v16 = v14 == 0x8000000000000000 || v15 == 0x8000000000000000;
        if (!v16 && v14 % v15) {
          break;
        }
        ++v11;
        mlir::ShapedType::getShape(*(mlir::ShapedType **)a1);
        if (v11 >= v12) {
          return 1;
        }
      }
      __int16 v39 = 257;
      mlir::OpState::emitOpError(v5, v38, (uint64_t)&v43);
      if (!v43) {
        goto LABEL_32;
      }
      mlir::Diagnostic::operator<<((uint64_t)v44, a2);
      if (!v43) {
        goto LABEL_32;
      }
      mlir::Diagnostic::operator<<((uint64_t)v44, " shape not compatible with updates for axis ");
      if (!v43) {
        goto LABEL_32;
      }
      int v41 = 2;
      uint64_t v42 = v11;
      uint64_t v17 = &v41;
      unint64_t v18 = v45;
      if (v46 >= v47)
      {
        unint64_t v32 = v46 + 1;
        if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
        {
          uint64_t v35 = (char *)&v41 - v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v32, 24);
          unint64_t v18 = v45;
          uint64_t v17 = (int *)&v35[v45];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v32, 24);
          uint64_t v17 = &v41;
          unint64_t v18 = v45;
        }
      }
      unint64_t v19 = v18 + 24 * v46;
      long long v20 = *(_OWORD *)v17;
      *(void *)(v19 + 16) = *((void *)v17 + 2);
      *(_OWORD *)unint64_t v19 = v20;
      ++v46;
      if (!v43) {
        goto LABEL_32;
      }
      mlir::Diagnostic::operator<<((uint64_t)v44, ": ");
      if (!v43) {
        goto LABEL_32;
      }
      int v41 = 2;
      uint64_t v42 = v14;
      uint64_t v21 = &v41;
      unint64_t v22 = v45;
      if (v46 >= v47)
      {
        unint64_t v33 = v46 + 1;
        if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
        {
          uint64_t v36 = (char *)&v41 - v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
          unint64_t v22 = v45;
          uint64_t v21 = (int *)&v36[v45];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
          uint64_t v21 = &v41;
          unint64_t v22 = v45;
        }
      }
      unint64_t v23 = v22 + 24 * v46;
      long long v24 = *(_OWORD *)v21;
      *(void *)(v23 + 16) = *((void *)v21 + 2);
      *(_OWORD *)unint64_t v23 = v24;
      ++v46;
      if (!v43) {
        goto LABEL_32;
      }
      mlir::Diagnostic::operator<<((uint64_t)v44, " % ");
      if (!v43) {
        goto LABEL_32;
      }
      int v41 = 2;
      uint64_t v42 = v15;
      unint64_t v25 = &v41;
      unint64_t v26 = v45;
      if (v46 >= v47)
      {
        unint64_t v34 = v46 + 1;
        if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
        {
          uint64_t v37 = (char *)&v41 - v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
          unint64_t v26 = v45;
          unint64_t v25 = (int *)&v37[v45];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
          unint64_t v25 = &v41;
          unint64_t v26 = v45;
        }
      }
      unint64_t v27 = v26 + 24 * v46;
      long long v28 = *(_OWORD *)v25;
      *(void *)(v27 + 16) = *((void *)v25 + 2);
      *(_OWORD *)unint64_t v27 = v28;
      ++v46;
      if (!v43) {
        goto LABEL_32;
      }
      unint64_t v29 = " != 0";
      goto LABEL_31;
    }
    return 1;
  }
  __int16 v39 = 257;
  mlir::OpState::emitOpError(v5, v38, (uint64_t)&v43);
  if (!v43) {
    goto LABEL_32;
  }
  mlir::Diagnostic::operator<<((uint64_t)v44, a2);
  if (!v43) {
    goto LABEL_32;
  }
  unint64_t v29 = " rank doesn't match the rank of updates";
LABEL_31:
  mlir::Diagnostic::operator<<((uint64_t)v44, v29);
LABEL_32:
  uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
  if (v43) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
  return v30;
}

uint64_t mlir::mpsx::QuantizedGatherOp::getZeroPoint(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 4);
  if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
    uint64_t v3 = *((void *)*this + 9);
  }
  else {
    uint64_t v3 = 0;
  }
  if (HIDWORD(ODSOperandIndexAndLength) + ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength) {
    return 0;
  }
  else {
    return *(void *)(v3 + 32 * ODSOperandIndexAndLength + 24);
  }
}

uint64_t mlir::mpsx::QuantizedGatherOp::getMin(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 5);
  if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
    uint64_t v3 = *((void *)*this + 9);
  }
  else {
    uint64_t v3 = 0;
  }
  if (HIDWORD(ODSOperandIndexAndLength) + ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength) {
    return 0;
  }
  else {
    return *(void *)(v3 + 32 * ODSOperandIndexAndLength + 24);
  }
}

uint64_t mlir::mpsx::MakeListOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v29 = a6;
  LOBYTE(v30) = 0;
  char v31 = 0;
  uint64_t v32 = a9;
  uint64_t v33 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31) {
      char v31 = 0;
    }
    mlir::OperationName::OperationName(&v30, "mpsx.make_list", 14, Context);
    char v31 = 1;
  }
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v15 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mpsx::MakeListOpAdaptor::verify(&v29, v15)) {
    return 0;
  }
  BOOL Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v29);
  uint64_t v17 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v29);
  unint64_t v18 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v17, **(void **)(v30 + 96));
  if (v19) {
    uint64_t v20 = *((void *)v18 + 1);
  }
  else {
    uint64_t v20 = 0;
  }
  v27[0] = v20;
  uint64_t v26 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27);
  uint64_t v22 = mlir::TypeID::get<mlir::mpsx::ListType>();
  long long v28 = this;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(this);
  v27[0] = v22;
  v27[1] = &v28;
  uint64_t v24 = mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir4mpsx6detail29TypeWithStaticSubtypesStorageILj1EEEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_8ListTypeEJRNSt3__15arrayINS1_4TypeELm1EEEEEENSE_9enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS6_, (uint64_t)v27, v22, &v26);
  uint64_t v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::MakeListOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v15[23] = *MEMORY[0x263EF8340];
  uint64_t v13 = *a1;
  for (i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
        ;
        i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
    {
      unint64_t v5 = "'mpsx.make_list' op requires attribute 'element_type'";
      goto LABEL_6;
    }
    if (**(void **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i)) {
      break;
    }
  }
  uint64_t v8 = *((void *)i + 1);
  if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      if (*(void *)(*(void *)(a1[1] + 96) + 8) == MirInfoChannelAssignment::GetNumNeededNEs(i)) {
        uint64_t v9 = *((void *)i + 1);
      }
      i = (MirInfoChannelAssignment *)((char *)i + 16);
    }
    while (i != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13));
  }
  if (!v8
    || *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
    && (uint64_t Value = v8,
        mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value),
        v11[0] = v8,
        uint64_t v10 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v11),
        mlir::mpsx::isMPSXListElementType(v10)))
  {
    if (!v9) {
      return 1;
    }
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v11[0] = v9;
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v11);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)) {
        return 1;
      }
    }
    unint64_t v5 = "'mpsx.make_list' op attribute 'max_size' failed to satisfy constraint: 32-bit unsigned integer attribute";
  }
  else
  {
    unint64_t v5 = "'mpsx.make_list' op attribute 'element_type' failed to satisfy constraint: any type attribute MPSX list element type attribute";
  }
LABEL_6:
  v11[0] = v5;
  __int16 v12 = 259;
  mlir::emitError(a2, (uint64_t)v11, (uint64_t)&Value);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v6;
}

uint64_t mlir::mpsx::ListPushBackOp::verify(mlir::mpsx::ListPushBackOp *this)
{
  void v14[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)this + 72);
  unint64_t v3 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v14, (uint64_t)&v9, 1uLL);
  v7[0] = *(void ***)(v3 + 8);
  mlir::ValueRange::ValueRange(v13, (uint64_t)v7, 1uLL);
  v11[0] = &unk_26C3282B0;
  __int16 v12 = v11;
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
    if (v4) {
      return 1;
    }
  }
  else
  {
    if (v12) {
      (*(void (**)(void *))(*v12 + 40))(v12);
    }
    if (v4) {
      return 1;
    }
  }
  v7[0] = (void **)"list's element_type and element's type are not compatible";
  __int16 v8 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v7, (uint64_t)&v9);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v9);
  if (v9) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v9);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v10);
  return v5;
}

uint64_t mlir::mpsx::anonymous namespace'::areMoreSpecializedTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2 != a4) {
    return 0;
  }
  v16[0] = &unk_26C387A48;
  v16[1] = v16;
  v16[2] = a5;
  uint64_t v17 = v16;
  if (!a2)
  {
    uint64_t v12 = 1;
LABEL_15:
    (*(void (**)(void *))(v16[0] + 32))(v16);
    return v12;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a2 - 1;
  do
  {
    unint64_t v9 = mlir::TypeRange::dereference_iterator(a1, v7);
    unint64_t v14 = mlir::TypeRange::dereference_iterator(a3, v7);
    unint64_t v15 = v9;
    if (!v17) {
      std::__throw_bad_function_call[abi:nn180100]();
    }
    uint64_t v10 = (*(uint64_t (**)(void *, unint64_t *, unint64_t *))(*v17 + 48))(v17, &v15, &v14);
    if (v10) {
      BOOL v11 = v8 == v7;
    }
    else {
      BOOL v11 = 1;
    }
    ++v7;
  }
  while (!v11);
  uint64_t v12 = v10;
  if (v17 == v16) {
    goto LABEL_15;
  }
  if (v17) {
    (*(void (**)(void))(*v17 + 40))();
  }
  return v12;
}

uint64_t mlir::mpsx::ANEOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, void, void *, void, void, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::ANEOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(void **)(*(void *)(a2 + 8) + 96), *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::mpsx::GPUOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, void, void *, void, void, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::GPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(void **)(*(void *)(a2 + 8) + 96), *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::mpsx::CPUOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, void, void *, void, void, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::CPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(void **)(*(void *)(a2 + 8) + 96), *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::mpsx::InterleaveOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v40 = a6;
  v41[0] = 0;
  char v42 = 0;
  uint64_t v43 = a9;
  uint64_t v44 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v40);
    if (v42) {
      char v42 = 0;
    }
    mlir::OperationName::OperationName(v41, "mpsx.interleave", 15, Context);
    char v42 = 1;
  }
  unint64_t v45 = a4;
  uint64_t v46 = a5;
  if (a5
    && (uint64_t v15 = mlir::UnknownLoc::get(this, a2), mlir::mpsx::InterleaveOpAdaptor::verify(&v40, v15))
    && (uint64_t v37 = v45,
        uint64_t v38 = 0,
        uint64_t v16 = mlir::ValueRange::dereference_iterator(&v37, 0),
        v36[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v36[1] = a2,
        v36[0]))
  {
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v36))
    {
      Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
      uint64_t v20 = v18;
      uint64_t v37 = v39;
      uint64_t v38 = 0x500000000;
      size_t v21 = 8 * v18;
      if ((unint64_t)(8 * v18) < 0x29)
      {
        unsigned int v22 = 0;
        if (!v18)
        {
LABEL_20:
          uint64_t v27 = v22 + (v21 >> 3);
          LODWORD(v38) = v27;
          if ((unint64_t)(v27 - 6) > 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t Axis = mlir::anec::detail::ConcatGenericAdaptorBase::getAxis((mlir::anec::detail::ConcatGenericAdaptorBase *)&v40);
            uint64_t v30 = 1;
            if (v27 != 4) {
              uint64_t v30 = 2;
            }
            char v31 = v37;
            uint64_t v32 = *((void *)v37 + v30);
            if (v32 != 0x8000000000000000) {
              *((void *)v37 + v30) = v32 / Axis;
            }
            uint64_t v33 = v31[v27 - 1];
            if (v33 != 0x8000000000000000) {
              v31[v27 - 1] = v33 * Axis;
            }
            uint64_t v28 = mlir::RankedTensorType::get((uint64_t)v31, v38, OperandRange, 0);
          }
          else
          {
            uint64_t v28 = mlir::UnrankedTensorType::get(OperandRange);
          }
          uint64_t v34 = v28;
          unsigned int v35 = *(_DWORD *)(a11 + 8);
          if (v35 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
            unsigned int v35 = *(_DWORD *)(a11 + 8);
          }
          *(void *)(*(void *)a11 + 8 * v35) = v34;
          ++*(_DWORD *)(a11 + 8);
          if (v37 != v39) {
            free(v37);
          }
          return 1;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, (8 * v18) >> 3, 8);
        unsigned int v22 = v38;
        if (!v20) {
          goto LABEL_20;
        }
      }
      memcpy((char *)v37 + 8 * v22, Shape, v21);
      unsigned int v22 = v38;
      goto LABEL_20;
    }
    uint64_t v23 = OperandRange;
  }
  else
  {
    uint64_t v23 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v24 = mlir::UnrankedTensorType::get(v23);
  uint64_t v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::InterleaveOp::verify(mlir::Operation **this)
{
  v50[19] = *MEMORY[0x263EF8340];
  v1 = *this;
  char v42 = *this;
  v40[0] = (void **)mlir::anec::BatchToSpace::getFactorsAttr(&v42);
  mlir::IntegerAttr::getValue((uint64_t)v40, (llvm::APInt *)&v45);
  if (v46[0] > 0x40u)
  {
    uint64_t v2 = *(unsigned int *)v45;
    MEMORY[0x21667D390]();
  }
  else
  {
    uint64_t v2 = v45;
  }
  mlir::getANENextSupportedInterleaveValue(v2);
  if (v3)
  {
    char v4 = (uint64_t *)(*(void *)(*(void *)(*((void *)v1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v4) {
      goto LABEL_14;
    }
    uint64_t v5 = *v4;
    unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v7 = *(unsigned int *)(v5 + 16);
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void **)(v5 + 8);
    unint64_t v9 = &v8[2 * v7];
    do
    {
      unint64_t v10 = v7 >> 1;
      BOOL v11 = &v8[2 * (v7 >> 1)];
      unint64_t v13 = *v11;
      uint64_t v12 = v11 + 2;
      v7 += ~(v7 >> 1);
      if (v13 < v6) {
        uint64_t v8 = v12;
      }
      else {
        unint64_t v7 = v10;
      }
    }
    while (v7);
    if (v8 != v9 && *v8 == v6) {
      uint64_t v14 = v8[1];
    }
    else {
LABEL_14:
    }
      uint64_t v14 = 0;
    v39[0] = v4;
    v39[1] = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39))
    {
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v39);
      if ((unint64_t)(v16 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        __int16 v41 = 257;
        mlir::Operation::emitOpError((uint64_t)v1, v40, (uint64_t)&v45);
        if (v45)
        {
          uint64_t v17 = "Interleave can only be applied on 4D or 5D tensor";
LABEL_21:
          mlir::Diagnostic::operator<<((uint64_t)v46, v17);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
      uint64_t v19 = Shape;
      uint64_t v20 = v16;
      v40[0] = (void **)mlir::anec::BatchToSpace::getFactorsAttr(&v42);
      mlir::IntegerAttr::getValue((uint64_t)v40, (llvm::APInt *)&v45);
      if (v46[0] > 0x40u)
      {
        uint64_t v21 = *(unsigned int *)v45;
        MEMORY[0x21667D390]();
      }
      else
      {
        uint64_t v21 = v45;
      }
      BOOL v22 = v20 == 4;
      uint64_t v18 = 1;
      if (v22) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = 2;
      }
      uint64_t v24 = *(void *)(v19 + 8 * v23);
      if (v24 == 0x8000000000000000) {
        return v18;
      }
      if (v24 % v21)
      {
        __int16 v41 = 257;
        mlir::Operation::emitOpError((uint64_t)v1, v40, (uint64_t)&v45);
        if (v45)
        {
          mlir::Diagnostic::operator<<((uint64_t)v46, "channel ");
          if (v45)
          {
            uint64_t v25 = *(void *)(v19 + 8 * v23);
            int v43 = 2;
            uint64_t v44 = v25;
            uint64_t v26 = &v43;
            unint64_t v27 = v47;
            if (v48 >= v49)
            {
              unint64_t v35 = v48 + 1;
              if (v47 <= (unint64_t)&v43 && v47 + 24 * v48 > (unint64_t)&v43)
              {
                uint64_t v37 = (char *)&v43 - v47;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
                unint64_t v27 = v47;
                uint64_t v26 = (int *)&v37[v47];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
                uint64_t v26 = &v43;
                unint64_t v27 = v47;
              }
            }
            unint64_t v28 = v27 + 24 * v48;
            long long v29 = *(_OWORD *)v26;
            *(void *)(v28 + 16) = *((void *)v26 + 2);
            *(_OWORD *)unint64_t v28 = v29;
            ++v48;
            if (v45)
            {
              mlir::Diagnostic::operator<<((uint64_t)v46, " must be a multiple of interleave ");
              if (v45)
              {
                int v43 = 2;
                uint64_t v44 = v21;
                uint64_t v30 = &v43;
                unint64_t v31 = v47;
                if (v48 >= v49)
                {
                  unint64_t v36 = v48 + 1;
                  if (v47 <= (unint64_t)&v43 && v47 + 24 * v48 > (unint64_t)&v43)
                  {
                    uint64_t v38 = (char *)&v43 - v47;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
                    unint64_t v31 = v47;
                    uint64_t v30 = (int *)&v38[v47];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
                    uint64_t v30 = &v43;
                    unint64_t v31 = v47;
                  }
                }
                unint64_t v32 = v31 + 24 * v48;
                long long v33 = *(_OWORD *)v30;
                *(void *)(v32 + 16) = *((void *)v30 + 2);
                *(_OWORD *)unint64_t v32 = v33;
                ++v48;
              }
            }
          }
        }
        goto LABEL_22;
      }
    }
    return 1;
  }
  __int16 v41 = 257;
  mlir::Operation::emitOpError((uint64_t)v1, v40, (uint64_t)&v45);
  if (v45)
  {
    uint64_t v17 = "interleave factor not supported";
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v46);
  return v18;
}

uint64_t mlir::mpsx::DeinterleaveOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v40 = a6;
  v41[0] = 0;
  char v42 = 0;
  uint64_t v43 = a9;
  uint64_t v44 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v40);
    if (v42) {
      char v42 = 0;
    }
    mlir::OperationName::OperationName(v41, "mpsx.deinterleave", 17, Context);
    char v42 = 1;
  }
  unint64_t v45 = a4;
  uint64_t v46 = a5;
  if (a5
    && (uint64_t v15 = mlir::UnknownLoc::get(this, a2), mlir::mpsx::DeinterleaveOpAdaptor::verify(&v40, v15))
    && (uint64_t v37 = v45,
        uint64_t v38 = 0,
        uint64_t v16 = mlir::ValueRange::dereference_iterator(&v37, 0),
        v36[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v36[1] = a2,
        v36[0]))
  {
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v36))
    {
      uint64_t Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
      uint64_t v20 = v18;
      uint64_t v37 = v39;
      uint64_t v38 = 0x500000000;
      size_t v21 = 8 * v18;
      if ((unint64_t)(8 * v18) < 0x29)
      {
        unsigned int v22 = 0;
        if (!v18)
        {
LABEL_20:
          uint64_t v27 = v22 + (v21 >> 3);
          LODWORD(v38) = v27;
          if ((unint64_t)(v27 - 6) > 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t Axis = mlir::anec::detail::ConcatGenericAdaptorBase::getAxis((mlir::anec::detail::ConcatGenericAdaptorBase *)&v40);
            uint64_t v30 = 1;
            if (v27 != 4) {
              uint64_t v30 = 2;
            }
            unint64_t v31 = v37;
            uint64_t v32 = *((void *)v37 + v30);
            if (v32 != 0x8000000000000000) {
              *((void *)v37 + v30) = v32 * Axis;
            }
            uint64_t v33 = v31[v27 - 1];
            if (v33 != 0x8000000000000000) {
              v31[v27 - 1] = v33 / Axis;
            }
            uint64_t v28 = mlir::RankedTensorType::get((uint64_t)v31, v38, OperandRange, 0);
          }
          else
          {
            uint64_t v28 = mlir::UnrankedTensorType::get(OperandRange);
          }
          uint64_t v34 = v28;
          unsigned int v35 = *(_DWORD *)(a11 + 8);
          if (v35 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
            unsigned int v35 = *(_DWORD *)(a11 + 8);
          }
          *(void *)(*(void *)a11 + 8 * v35) = v34;
          ++*(_DWORD *)(a11 + 8);
          if (v37 != v39) {
            free(v37);
          }
          return 1;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, (8 * v18) >> 3, 8);
        unsigned int v22 = v38;
        if (!v20) {
          goto LABEL_20;
        }
      }
      memcpy((char *)v37 + 8 * v22, Shape, v21);
      unsigned int v22 = v38;
      goto LABEL_20;
    }
    uint64_t v23 = OperandRange;
  }
  else
  {
    uint64_t v23 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v24 = mlir::UnrankedTensorType::get(v23);
  uint64_t v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::DeinterleaveOp::verify(mlir::Operation **this)
{
  v48[19] = *MEMORY[0x263EF8340];
  v1 = *this;
  uint64_t v40 = *this;
  v38[0] = (void **)mlir::anec::BatchToSpace::getFactorsAttr(&v40);
  mlir::IntegerAttr::getValue((uint64_t)v38, (llvm::APInt *)&v43);
  if (v44[0] > 0x40u)
  {
    uint64_t v2 = *(unsigned int *)v43;
    MEMORY[0x21667D390]();
  }
  else
  {
    uint64_t v2 = v43;
  }
  mlir::getANENextSupportedInterleaveValue(v2);
  if (v3)
  {
    char v4 = (uint64_t *)(*(void *)(*(void *)(*((void *)v1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v4) {
      goto LABEL_14;
    }
    uint64_t v5 = *v4;
    unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v7 = *(unsigned int *)(v5 + 16);
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void **)(v5 + 8);
    unint64_t v9 = &v8[2 * v7];
    do
    {
      unint64_t v10 = v7 >> 1;
      BOOL v11 = &v8[2 * (v7 >> 1)];
      unint64_t v13 = *v11;
      uint64_t v12 = v11 + 2;
      v7 += ~(v7 >> 1);
      if (v13 < v6) {
        uint64_t v8 = v12;
      }
      else {
        unint64_t v7 = v10;
      }
    }
    while (v7);
    if (v8 != v9 && *v8 == v6) {
      uint64_t v14 = v8[1];
    }
    else {
LABEL_14:
    }
      uint64_t v14 = 0;
    v37[0] = v4;
    v37[1] = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v37))
    {
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v37);
      if ((unint64_t)(v16 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        __int16 v39 = 257;
        mlir::Operation::emitOpError((uint64_t)v1, v38, (uint64_t)&v43);
        if (v43)
        {
          uint64_t v17 = "Interleave can only be applied on 4D or 5D tensor";
LABEL_21:
          mlir::Diagnostic::operator<<((uint64_t)v44, v17);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
      uint64_t v19 = Shape;
      uint64_t v20 = v16;
      v38[0] = (void **)mlir::anec::BatchToSpace::getFactorsAttr(&v40);
      mlir::IntegerAttr::getValue((uint64_t)v38, (llvm::APInt *)&v43);
      if (v44[0] > 0x40u)
      {
        uint64_t v21 = *(unsigned int *)v43;
        MEMORY[0x21667D390]();
      }
      else
      {
        uint64_t v21 = v43;
      }
      uint64_t v22 = *(void *)(v19 + 8 * (v20 - 1));
      if (v22 != 0x8000000000000000 && v22 % v21)
      {
        __int16 v39 = 257;
        mlir::Operation::emitOpError((uint64_t)v1, v38, (uint64_t)&v43);
        if (v43)
        {
          mlir::Diagnostic::operator<<((uint64_t)v44, "width ");
          if (v43)
          {
            uint64_t v23 = *(void *)(v19 + 8 * (v20 - 1));
            int v41 = 2;
            uint64_t v42 = v23;
            uint64_t v24 = &v41;
            unint64_t v25 = v45;
            if (v46 >= v47)
            {
              unint64_t v33 = v46 + 1;
              if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
              {
                unsigned int v35 = (char *)&v41 - v45;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
                unint64_t v25 = v45;
                uint64_t v24 = (int *)&v35[v45];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
                uint64_t v24 = &v41;
                unint64_t v25 = v45;
              }
            }
            unint64_t v26 = v25 + 24 * v46;
            long long v27 = *(_OWORD *)v24;
            *(void *)(v26 + 16) = *((void *)v24 + 2);
            *(_OWORD *)unint64_t v26 = v27;
            ++v46;
            if (v43)
            {
              mlir::Diagnostic::operator<<((uint64_t)v44, " must be a multiple of interleave ");
              if (v43)
              {
                int v41 = 2;
                uint64_t v42 = v21;
                uint64_t v28 = &v41;
                unint64_t v29 = v45;
                if (v46 >= v47)
                {
                  unint64_t v34 = v46 + 1;
                  if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
                  {
                    unint64_t v36 = (char *)&v41 - v45;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
                    unint64_t v29 = v45;
                    uint64_t v28 = (int *)&v36[v45];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
                    uint64_t v28 = &v41;
                    unint64_t v29 = v45;
                  }
                }
                unint64_t v30 = v29 + 24 * v46;
                long long v31 = *(_OWORD *)v28;
                *(void *)(v30 + 16) = *((void *)v28 + 2);
                *(_OWORD *)unint64_t v30 = v31;
                ++v46;
              }
            }
          }
        }
        goto LABEL_22;
      }
    }
    return 1;
  }
  __int16 v39 = 257;
  mlir::Operation::emitOpError((uint64_t)v1, v38, (uint64_t)&v43);
  if (v43)
  {
    uint64_t v17 = "interleave factor not supported";
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
  if (v43) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
  return v18;
}

uint64_t mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v45 = a4;
  unint64_t v46 = a5;
  if (!a5)
  {
    uint64_t v27 = mlir::Float32Type::get(this, a2);
    uint64_t v28 = mlir::UnrankedTensorType::get(v27);
    uint64_t v29 = *(unsigned int *)(a11 + 8);
    if (v29 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v29 + 1, 8);
      LODWORD(v29) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v29) = v28;
    goto LABEL_20;
  }
  uint64_t v12 = mlir::ValueRange::dereference_iterator(&v45, 0);
  unint64_t v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  v39[0] = v13;
  v39[1] = v14;
  if (v13) {
    BOOL v15 = v46 > 2;
  }
  else {
    BOOL v15 = 0;
  }
  if (!v15
    || (uint64_t v16 = mlir::ValueRange::dereference_iterator(&v45, 2),
        v38[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v38[1] = v17,
        !v38[0]))
  {
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v13);
    if (ElementTypeOrSelf)
    {
LABEL_14:
      uint64_t v25 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      unsigned int v26 = *(_DWORD *)(a11 + 8);
      if (v26 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
        unsigned int v26 = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v26) = v25;
LABEL_20:
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
LABEL_13:
    uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, v24);
    goto LABEL_14;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39)
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v38) & 1) == 0)
  {
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v39[0]);
    if (ElementTypeOrSelf) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v39);
  uint64_t v20 = v18;
  uint64_t v42 = v44;
  uint64_t v43 = 0x400000000;
  size_t v21 = 8 * v18;
  if ((unint64_t)(8 * v18) < 0x21)
  {
    unsigned int v22 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v44, (8 * v18) >> 3, 8);
    unsigned int v22 = v43;
  }
  if (v20)
  {
    memcpy((char *)v42 + 8 * v22, Shape, v21);
    unsigned int v22 = v43;
  }
  LODWORD(v43) = v22 + (v21 >> 3);
  uint64_t v31 = mlir::ShapedType::getShape((mlir::ShapedType *)v38);
  unint64_t v33 = v42;
  uint64_t v34 = v43;
  *((void *)v42 + v43 - 1) = *(void *)(v31 + 8 * v32 - 8);
  *(void *)&long long v40 = v33;
  *((void *)&v40 + 1) = v34;
  char v41 = 1;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v39);
  uint64_t v36 = mlir::ShapedType::cloneWith((uint64_t *)v39, &v40, OperandRange);
  uint64_t v37 = *(unsigned int *)(a11 + 8);
  if (v37 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v37 + 1, 8);
    LODWORD(v37) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v37) = v36;
  ++*(_DWORD *)(a11 + 8);
  if (v42 != v44) {
    free(v42);
  }
  return 1;
}

uint64_t mlir::mpsx::ScaledDotProductAttentionOp::verify(mlir::mpsx::ScaledDotProductAttentionOp *this)
{
  v135[22] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(*(void *)this + 72);
  uint64_t v3 = *(void *)(v2[3] + 8);
  char v4 = (uint64_t *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (uint64_t *)(*(void *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
  v130 = v5;
  uint64_t v131 = v4;
  unint64_t v6 = (void *)(*(void *)(v2[15] + 8) & 0xFFFFFFFFFFFFFFF8);
  int v129 = v6;
  unint64_t v7 = (void *)(v3 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v132 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 0xFFFFFFFFFFFFFFF8) == 0) {
    goto LABEL_10;
  }
  uint64_t v8 = *v7;
  unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v10 = *(unsigned int *)(v8 + 16);
  if (!v10) {
    goto LABEL_10;
  }
  BOOL v11 = *(void **)(v8 + 8);
  uint64_t v12 = &v11[2 * v10];
  do
  {
    unint64_t v13 = v10 >> 1;
    uint64_t v14 = &v11[2 * (v10 >> 1)];
    unint64_t v16 = *v14;
    BOOL v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9) {
      BOOL v11 = v15;
    }
    else {
      unint64_t v10 = v13;
    }
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
  {
    uint64_t v68 = v11[1];
    uint64_t v127 = v7;
    uint64_t v128 = v68;
    if (!v4) {
      goto LABEL_19;
    }
  }
  else
  {
LABEL_10:
    uint64_t v127 = v7;
    uint64_t v128 = 0;
    if (!v4) {
      goto LABEL_19;
    }
  }
  uint64_t v17 = *v4;
  unint64_t v18 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v19 = *(unsigned int *)(v17 + 16);
  if (v19)
  {
    uint64_t v20 = *(void **)(v17 + 8);
    size_t v21 = &v20[2 * v19];
    do
    {
      unint64_t v22 = v19 >> 1;
      uint64_t v23 = &v20[2 * (v19 >> 1)];
      unint64_t v25 = *v23;
      uint64_t v24 = v23 + 2;
      v19 += ~(v19 >> 1);
      if (v25 < v18) {
        uint64_t v20 = v24;
      }
      else {
        unint64_t v19 = v22;
      }
    }
    while (v19);
    if (v20 != v21 && *v20 == v18)
    {
      uint64_t v69 = v20[1];
      char v125 = v4;
      uint64_t v126 = v69;
      if (v5) {
        goto LABEL_20;
      }
LABEL_28:
      uint64_t v35 = 0;
      goto LABEL_29;
    }
  }
LABEL_19:
  char v125 = v4;
  uint64_t v126 = 0;
  if (!v5) {
    goto LABEL_28;
  }
LABEL_20:
  uint64_t v26 = *v5;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_28;
  }
  uint64_t v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    uint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    unint64_t v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      uint64_t v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 == v30 || *v29 != v27) {
    goto LABEL_28;
  }
  uint64_t v35 = v29[1];
LABEL_29:
  v124[0] = v5;
  v124[1] = v35;
  int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v127);
  int v37 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v125);
  int v38 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v124);
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v119 = 0;
  __int16 v39 = (uint64_t *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v39) {
    goto LABEL_38;
  }
  uint64_t v40 = *v39;
  unint64_t v41 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v42 = *(unsigned int *)(v40 + 16);
  if (!v42) {
    goto LABEL_38;
  }
  uint64_t v43 = *(void **)(v40 + 8);
  uint64_t v44 = &v43[2 * v42];
  do
  {
    unint64_t v45 = v42 >> 1;
    unint64_t v46 = &v43[2 * (v42 >> 1)];
    unint64_t v48 = *v46;
    uint64_t v47 = v46 + 2;
    v42 += ~(v42 >> 1);
    if (v48 < v41) {
      uint64_t v43 = v47;
    }
    else {
      unint64_t v42 = v45;
    }
  }
  while (v42);
  if (v43 != v44 && *v43 == v41) {
    uint64_t v49 = v43[1];
  }
  else {
LABEL_38:
  }
    uint64_t v49 = 0;
  uint64_t v133 = v39;
  uint64_t v134 = v49;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v133))
  {
    if (ArgOperands)
    {
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
      uint64_t v52 = v51;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
      if (v53 <= 1)
      {
        unint64_t v109 = "failed: expected query to have at least two dimensions but got {0}";
        uint64_t v110 = 66;
        uint64_t v111 = v115;
        uint64_t v112 = 1;
        uint64_t v54 = &v132;
LABEL_51:
        uint64_t v113 = &unk_26C35C490;
        uint64_t v114 = v54;
        v115[0] = &v113;
LABEL_102:
        __int16 v118 = 263;
        goto LABEL_103;
      }
      uint64_t v123 = *(void *)(Shape + 8 * v52 - 8);
    }
    if (v37)
    {
      uint64_t v55 = mlir::ShapedType::getShape((mlir::ShapedType *)&v125);
      uint64_t v57 = v56;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v125);
      if (v58 <= 1)
      {
        unint64_t v109 = "failed: expected key to have at least two dimensions but got {0}";
        uint64_t v110 = 64;
        uint64_t v111 = v115;
        uint64_t v112 = 1;
        uint64_t v54 = &v131;
        goto LABEL_51;
      }
      uint64_t v65 = v55 + 8 * v57;
      uint64_t v60 = *(void *)(v65 - 8);
      uint64_t v122 = v60;
      uint64_t v59 = *(void *)(v65 - 16);
      uint64_t v121 = v59;
      if (!v38) {
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      if (!v38)
      {
LABEL_53:
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        goto LABEL_61;
      }
    }
    uint64_t v61 = mlir::ShapedType::getShape((mlir::ShapedType *)v124);
    uint64_t v63 = v62;
    mlir::ShapedType::getShape((mlir::ShapedType *)v124);
    if (v64 <= 1)
    {
      unint64_t v109 = "failed: expected value to have at least two dimensions but got {0}";
      uint64_t v110 = 66;
      uint64_t v111 = v115;
      uint64_t v112 = 1;
      uint64_t v54 = &v130;
      goto LABEL_51;
    }
    uint64_t v70 = v61 + 8 * v63;
    uint64_t v66 = *(void *)(v70 - 8);
    uint64_t v120 = v66;
    uint64_t v67 = *(void *)(v70 - 16);
    uint64_t v119 = v67;
LABEL_61:
    unsigned __int8 v71 = ArgOperands ^ 1;
    if (((ArgOperands ^ 1 | v37 ^ 1) & 1) == 0
      && v123 != 0x8000000000000000
      && v60 != 0x8000000000000000
      && v123 != v60)
    {
      unint64_t v109 = "failed: query and key must have matching inner dimension but have {0} and {1}";
      uint64_t v110 = 77;
      uint64_t v111 = v116;
      uint64_t v112 = 2;
      uint64_t v113 = &unk_26C35C280;
      uint64_t v114 = (uint64_t **)&v123;
      uint64_t v72 = &unk_26C35C280;
      unint64_t v73 = (uint64_t **)&v122;
LABEL_101:
      v115[0] = v72;
      v115[1] = v73;
      v116[0] = &v113;
      v116[1] = v115;
      goto LABEL_102;
    }
    unsigned __int8 v74 = v38 ^ 1;
    if (((v37 ^ 1 | v38 ^ 1) & 1) == 0 && v59 != 0x8000000000000000 && v67 != 0x8000000000000000 && v59 != v67)
    {
      unint64_t v109 = "failed: key and value must have matching outer dimension but have {0} and {1}";
      uint64_t v110 = 77;
      uint64_t v111 = v116;
      uint64_t v112 = 2;
      uint64_t v113 = &unk_26C35C280;
      uint64_t v114 = (uint64_t **)&v121;
      uint64_t v72 = &unk_26C35C280;
      unint64_t v73 = (uint64_t **)&v119;
      goto LABEL_101;
    }
    char v75 = v71 | v74;
    if (((v71 | v74) & 1) == 0 && v123 != 0x8000000000000000 && v66 != 0x8000000000000000 && v123 != v66)
    {
      unint64_t v109 = "failed: query and value must have matching inner dimension but have {0} and {1}";
      uint64_t v110 = 79;
      uint64_t v111 = v116;
      uint64_t v112 = 2;
      uint64_t v113 = &unk_26C35C280;
      uint64_t v114 = (uint64_t **)&v123;
      uint64_t v72 = &unk_26C35C280;
      unint64_t v73 = (uint64_t **)&v120;
      goto LABEL_101;
    }
    if (((ArgOperands ^ 1 | v37 ^ 1) & 1) != 0
      || (mlir::ShapedType::getShape((mlir::ShapedType *)&v127), v76 < 3)
      || (mlir::ShapedType::getShape((mlir::ShapedType *)&v125), v77 < 3))
    {
      uint64_t v82 = 0;
      char v84 = 1;
      if (v75) {
        goto LABEL_96;
      }
    }
    else
    {
      mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
      uint64_t v79 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v127) + 8 * (v78 - 3));
      mlir::ShapedType::getShape((mlir::ShapedType *)&v125);
      uint64_t v81 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v125) + 8 * (v80 - 3));
      uint64_t v82 = v79 / v81;
      if (v79 % v81)
      {
        int v83 = "failed: key heads dimensions do not represent a valid group for the head dimensions available in the query tensor";
LABEL_111:
        unint64_t v109 = v83;
        LOWORD(v113) = 259;
        char v106 = (void ***)&v109;
        goto LABEL_112;
      }
      unint64_t v109 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v131);
      uint64_t v110 = v91;
      uint64_t v92 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v109);
      llvm::SmallVector<long long,6u>::SmallVector(&v133, v92, v93);
      *((void *)v133 + v134 - 3) *= v82;
      unint64_t v109 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v131);
      uint64_t v110 = v94;
      uint64_t v131 = (uint64_t *)mlir::ShapedType::clone((mlir::MemoryMapperInterface *)&v109, (uint64_t)v133, v134);
      if (v133 != v135) {
        free(v133);
      }
      char v84 = 0;
      if (v75)
      {
LABEL_96:
        uint64_t v108 = 0;
        if (!mlir::mpsx::inferMatMulResultType(0, 0, v132, v131, (uint64_t *)&v108, 0, 1))
        {
          unint64_t v109 = "failed: query with type {0} cannot be multiplied with the key (transposed) of type {1}";
          uint64_t v110 = 86;
          uint64_t v111 = v116;
          uint64_t v112 = 2;
          uint64_t v113 = &unk_26C35C490;
          uint64_t v114 = &v132;
          uint64_t v72 = &unk_26C35C490;
          unint64_t v73 = &v131;
          goto LABEL_101;
        }
        v100 = v108;
        if (mlir::mpsx::inferMatMulResultType(0, 0, v108, v130, &v107, 0, 0))
        {
          if (mlir::OpTrait::util::getBroadcastedType(v100, v6, 0)) {
            return 1;
          }
          unsigned int v103 = "failed: mask with type {0} is not broadcastable with the product of query and key transpose of type {1}";
          uint64_t v104 = (const char *)&v129;
          unint64_t v105 = &v108;
        }
        else
        {
          unsigned int v103 = "failed: product of query and key transpose of type {0} cannot be multiplied with value of type {1}";
          uint64_t v104 = (const char *)&v108;
          unint64_t v105 = &v130;
        }
        llvm::formatv<mlir::Type &,mlir::Type &>(v103, v104, (const char *)v105, &v109);
        __int16 v118 = 263;
        v117[0] = (void **)&v109;
        char v106 = v117;
LABEL_112:
        mlir::OpState::emitOpError((uint64_t *)this, v106, (uint64_t)&v133);
        uint64_t v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v133);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v133);
        return v101;
      }
    }
    mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
    if (v85 >= 3)
    {
      mlir::ShapedType::getShape((mlir::ShapedType *)v124);
      if (v86 >= 3)
      {
        mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
        uint64_t v88 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v127) + 8 * (v87 - 3));
        mlir::ShapedType::getShape((mlir::ShapedType *)v124);
        uint64_t v90 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v124) + 8 * (v89 - 3));
        if (v88 % v90)
        {
          int v83 = "failed: value heads dimensions do not represent a valid group for the head dimensions available in the query tensor";
          goto LABEL_111;
        }
        if (v82 == v88 / v90) {
          char v95 = 1;
        }
        else {
          char v95 = v84;
        }
        if ((v95 & 1) == 0)
        {
          int v83 = "failed: grouping for the value tensor does not match the one available on the key tensor";
          goto LABEL_111;
        }
        unint64_t v109 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v130);
        uint64_t v110 = v96;
        unint64_t v97 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v109);
        llvm::SmallVector<long long,6u>::SmallVector(&v133, v97, v98);
        *((void *)v133 + v134 - 3) = v88;
        unint64_t v109 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v130);
        uint64_t v110 = v99;
        v130 = (uint64_t *)mlir::ShapedType::clone((mlir::MemoryMapperInterface *)&v109, (uint64_t)v133, v134);
        if (v133 != v135) {
          free(v133);
        }
      }
    }
    goto LABEL_96;
  }
  unint64_t v109 = "failed: expected scale to be scalar but it is unranked";
  uint64_t v110 = 54;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  __int16 v118 = 263;
LABEL_103:
  v117[0] = (void **)&v109;
  mlir::OpState::emitOpError((uint64_t *)this, v117, (uint64_t)&v133);
  uint64_t v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v133);
  if (v133) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v133);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v134);
  return v101;
}

uint64_t mlir::mpsx::RMSNormOp::verify(mlir::mpsx::RMSNormOp *this)
{
  v53[6] = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = *v2;
  unint64_t v4 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v5 = *(unsigned int *)(v3 + 16);
  if (!v5) {
    goto LABEL_10;
  }
  unint64_t v6 = *(void **)(v3 + 8);
  unint64_t v7 = &v6[2 * v5];
  do
  {
    unint64_t v8 = v5 >> 1;
    unint64_t v9 = &v6[2 * (v5 >> 1)];
    unint64_t v11 = *v9;
    unint64_t v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4) {
      unint64_t v6 = v10;
    }
    else {
      unint64_t v5 = v8;
    }
  }
  while (v5);
  if (v6 != v7 && *v6 == v4) {
    uint64_t v12 = v6[1];
  }
  else {
LABEL_10:
  }
    uint64_t v12 = 0;
  v40[0] = v2;
  v40[1] = v12;
  v39[0] = 0;
  v39[1] = 0;
  uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v40);
  if (mlir::ShapedType::getNumElements(Shape, v14) == 1
    || (uint64_t v35 = *(void *)(*(void *)(*(void *)this + 72) + 56),
        v41[0] = (void **)v39,
        uint64_t v49 = v35,
        (uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v49)) != 0)
    && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)v41, DefiningOp)
    && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v39) & 1) != 0)
  {
    uint64_t v15 = *(void *)this;
    uint64_t v16 = *(void *)(v15 + 72);
    uint64_t v17 = *(void *)(v16 + 88);
    unint64_t v18 = (uint64_t *)(*(void *)(*(void *)(v16 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v18) {
      goto LABEL_21;
    }
    uint64_t v19 = *v18;
    unint64_t v20 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v21 = *(unsigned int *)(v19 + 16);
    if (!v21) {
      goto LABEL_21;
    }
    unint64_t v22 = *(void **)(v19 + 8);
    uint64_t v23 = &v22[2 * v21];
    do
    {
      unint64_t v24 = v21 >> 1;
      unint64_t v25 = &v22[2 * (v21 >> 1)];
      unint64_t v27 = *v25;
      uint64_t v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20) {
        unint64_t v22 = v26;
      }
      else {
        unint64_t v21 = v24;
      }
    }
    while (v21);
    if (v22 != v23 && *v22 == v20) {
      uint64_t v28 = v22[1];
    }
    else {
LABEL_21:
    }
      uint64_t v28 = 0;
    v48[0] = v18;
    v48[1] = v28;
    uint64_t v51 = v53;
    uint64_t v52 = 0x600000000;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v48)
      && mlir::matchConstantWithIntVector<long long>(v17, (uint64_t)&v51)
      && v52)
    {
      uint64_t v29 = v51;
      uint64_t v30 = 8 * v52;
      while (1)
      {
        uint64_t v47 = *v29;
        uint64_t v31 = v47;
        mlir::ShapedType::getShape((mlir::ShapedType *)v48);
        mlir::tryGetPositiveAxis(v31, v32, 0, 0, 0);
        if (!v33) {
          break;
        }
        ++v29;
        v30 -= 8;
        if (!v30) {
          goto LABEL_28;
        }
      }
      mlir::ShapedType::getShape((mlir::ShapedType *)v48);
      v41[0] = (void **)"failed: constant axis ({0}) is not within range for the input tensor rank ({1})";
      v41[1] = (void **)79;
      v41[2] = (void **)v44;
      v41[3] = (void **)2;
      v42[0] = &unk_26C35C280;
      v42[1] = &v47;
      v43[0] = &unk_26C35C340;
      v43[1] = v38;
      v44[0] = v42;
      v44[1] = v43;
      __int16 v46 = 263;
      unint64_t v45 = v41;
      mlir::Operation::emitOpError(v15, (void ***)&v45, (uint64_t)&v49);
      uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v49);
      if (v49) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v49);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v50);
    }
    else
    {
LABEL_28:
      uint64_t v34 = 1;
    }
    if (v51 != v53) {
      free(v51);
    }
  }
  else
  {
    v41[0] = (void **)"requires epsilon to be a scalar";
    LOWORD(v42[0]) = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v41, (uint64_t)&v49);
    uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v49);
    if (v49) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v49);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v50);
  }
  return v34;
}

uint64_t mlir::mpsx::FPToIntClampedOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  v38[0] = a4;
  v38[1] = a5;
  uint64_t v31 = a6;
  LOBYTE(v32) = 0;
  char v33 = 0;
  uint64_t v34 = a9;
  uint64_t v35 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v31);
    if (v33) {
      char v33 = 0;
    }
    mlir::OperationName::OperationName(&v32, "mpsx.fp_to_int_clamped", 22, Context);
    char v33 = 1;
  }
  unint64_t v36 = a4;
  uint64_t v37 = a5;
  if (a5
    && (uint64_t v15 = mlir::UnknownLoc::get(this, a2), mlir::mpsx::FPToIntClampedOpAdaptor::verify(&v31, v15)))
  {
    long long v39 = v36;
    uint64_t v16 = mlir::ValueRange::dereference_iterator(&v39, 0);
    v30[0] = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v17;
    if (v30[0])
    {
      uint64_t Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
      uint64_t v19 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v31);
      unint64_t v20 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v19, **(void **)(v32 + 96));
      if (v21) {
        uint64_t v22 = *((void *)v20 + 1);
      }
      else {
        uint64_t v22 = 0;
      }
      *(void *)&long long v39 = v22;
      uint64_t v27 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39);
      LOBYTE(v39) = 0;
      char v40 = 0;
      unint64_t v26 = mlir::ShapedType::cloneWith(v30, &v39, v27);
    }
    else
    {
      unint64_t v26 = *(void *)(mlir::ValueRange::dereference_iterator(v38, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    unsigned int v28 = *(_DWORD *)(a11 + 8);
    if (v28 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v28 + 1, 8);
      unsigned int v28 = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v28) = v26;
  }
  else
  {
    uint64_t v23 = mlir::Float32Type::get(this, a2);
    uint64_t v24 = mlir::UnrankedTensorType::get(v23);
    uint64_t v25 = *(unsigned int *)(a11 + 8);
    if (v25 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
      LODWORD(v25) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v25) = v24;
  }
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::FPToIntClampedOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v13[23] = *MEMORY[0x263EF8340];
  uint64_t v11 = *a1;
  for (i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        i != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11);
        i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (**(void **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i))
    {
      uint64_t v8 = *((void *)i + 1);
      if (v8)
      {
        if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
        {
          unint64_t v5 = "'mpsx.fp_to_int_clamped' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
          goto LABEL_6;
        }
        uint64_t v12 = *((void *)i + 1);
        mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
      }
      return 1;
    }
  }
  unint64_t v5 = "'mpsx.fp_to_int_clamped' op requires attribute 'resultElementType'";
LABEL_6:
  unint64_t v9 = v5;
  __int16 v10 = 259;
  mlir::emitError(a2, (uint64_t)&v9, (uint64_t)&v12);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v12);
  if (v12) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v12);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v6;
}

uint64_t mlir::mpsx::ANEOp::getFunctionTypeAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  unint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t v7 = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 8));
  if (v10) {
    return *((void *)v9 + 1);
  }
  else {
    return 0;
  }
}

uint64_t mlir::mpsx::ANEOp::getArgAttrsAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  unint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t v7 = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8 - 16), **(void **)(*((void *)*this + 6) + 96));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

uint64_t mlir::mpsx::ANEOp::getResAttrsAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  unint64_t v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  unint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

void mlir::mpsx::ANEOp::build(mlir::StringAttr **a1, uint64_t a2, void *a3, void *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__src, uint64_t a18)
{
  v35[4] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2 + 112;
  *(void *)(a2 + 192) = 0;
  uint64_t v23 = *(unsigned int *)(a2 + 120);
  if (a18 + v23 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v22, (void *)(a2 + 128), a18 + v23, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 120);
  }
  if (a18)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v23), __src, 16 * a18);
    LODWORD(v23) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v23 + a18;
  __int16 v34 = 261;
  v33[0] = a3;
  v33[1] = a4;
  uint64_t StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v33);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v32 = 261;
  uint64_t v30 = "sym_name";
  uint64_t v31 = 8;
  uint64_t v26 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v30);
  ZinMirCacheTensors::ZinMirCacheTensors(v35, v26, StringAttr);
  mlir::NamedAttrList::push_back(v22, v35[0], v35[1]);
  uint64_t v27 = mlir::FunctionType::get(*a1, a9, a10, a13, a14);
  uint64_t v28 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8);
  uint64_t v29 = mlir::TypeAttr::get(v27);
  ZinMirCacheTensors::ZinMirCacheTensors(&v30, v28, v29);
  mlir::NamedAttrList::push_back(v22, (uint64_t)v30, v31);
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mpsx::RegionReturnOp,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v18[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.region_return", (const unsigned __int8 *)0x12, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    uint64_t v15[2] = (uint64_t)"mpsx.region_return";
    void v15[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  unint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::RegionReturnOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

BOOL mlir::mpsx::ANEOp::verifyInvariantsImpl(mlir::mpsx::ANEOp *this)
{
  v18[23] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 16 * v4;
    while (1)
    {
      uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      uint64_t v9 = *(void *)this;
      if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8) == NumNeededNEs) {
        break;
      }
      if (**(void **)(*(void *)(*(void *)this + 48) + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value)) {
        uint64_t v6 = *((void *)Value + 1);
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v7 -= 16;
      if (!v7) {
        goto LABEL_10;
      }
    }
    uint64_t v11 = (void **)*((void *)Value + 1);
    for (uint64_t i = 0; v7; v7 -= 16)
    {
      uint64_t v13 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      uint64_t v9 = *(void *)this;
      if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16) == v13) {
        uint64_t i = *((void *)Value + 1);
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    return mlir::anec::__mlir_ods_local_attr_constraint_ANECOps1(v9, v11, (void **)"function_type", (void **)0xD)&& mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*(void *)this, v6, (void **)"arg_attrs", (void **)9)&& mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*(void *)this, i, (void **)"res_attrs", (void **)9)&& mlir::anec::__mlir_ods_local_region_constraint_ANECOps0(*(void *)this, ((*(void *)this+ 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                              + 71) & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *(unsigned int *)(*(void *)this + 40),
                              (uint64_t)"body",
                              4,
                              0) != 0;
  }
  else
  {
LABEL_10:
    uint64_t v15 = (void **)"requires attribute 'function_type'";
    __int16 v16 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v15, (uint64_t)&AttrDictionary);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
  }
  return v10;
}

uint64_t mlir::mpsx::DeinterleaveOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v13[23] = *MEMORY[0x263EF8340];
  uint64_t v11 = *a1;
  for (uint64_t i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        ;
        uint64_t i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11))
    {
      unint64_t v5 = "'mpsx.deinterleave' op requires attribute 'interleave_factor'";
      goto LABEL_6;
    }
    if (**(void **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i)) {
      break;
    }
  }
  uint64_t v8 = *((void *)i + 1);
  if (!v8) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = *((void *)i + 1);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)) {
      return 1;
    }
  }
  unint64_t v5 = "'mpsx.deinterleave' op attribute 'interleave_factor' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_6:
  v9[0] = v5;
  __int16 v10 = 259;
  mlir::emitError(a2, (uint64_t)v9, (uint64_t)&Value);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v6;
}

BOOL mlir::mpsx::DeinterleaveOp::verifyInvariantsImpl(mlir::mpsx::DeinterleaveOp *this)
{
  v14[23] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    while (**(void **)(*(void *)(*(void *)this + 48) + 96) != MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*(void *)this, Value[1], (void **)"interleave_factor", (void **)0x11)&& mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v8 = *(void *)this - 16;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    uint64_t v11 = (void **)"requires attribute 'interleave_factor'";
    __int16 v12 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v11, (uint64_t)&AttrDictionary);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  v41[19] = *MEMORY[0x263EF8340];
  uint64_t v33 = a2;
  uint64_t v9 = *(void *)a2;
  __int16 v10 = *(void **)(*(void *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_28;
  }
  unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v14 = *(unsigned int *)(v9 + 16);
  if (!v14) {
    goto LABEL_14;
  }
  uint64_t v15 = *(void **)(v9 + 8);
  __int16 v16 = &v15[2 * v14];
  do
  {
    unint64_t v17 = v14 >> 1;
    unint64_t v18 = &v15[2 * (v14 >> 1)];
    unint64_t v20 = *v18;
    uint64_t v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13) {
      uint64_t v15 = v19;
    }
    else {
      unint64_t v14 = v17;
    }
  }
  while (v14);
  if (v15 != v16 && *v15 == v13) {
    uint64_t v21 = v15[1];
  }
  else {
LABEL_14:
  }
    uint64_t v21 = 0;
  uint64_t v36 = a2;
  v37[0] = v21;
  v31[0] = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isSignlessInteger((mlir::Type *)v31, 1)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 64)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 64)
    || mlir::Type::isF16((mlir::Type *)v31)
    || mlir::Type::isF32((mlir::Type *)v31)
    || mlir::Type::isBF16((mlir::Type *)v31)
    || *((_UNKNOWN **)*v31[0] + 17) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    return 1;
  }
LABEL_28:
  __int16 v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      int v34 = 5;
      uint64_t v35 = a5;
      uint64_t v22 = &v34;
      unint64_t v23 = v38;
      if (v39 >= v40)
      {
        unint64_t v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          uint64_t v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          unint64_t v23 = v38;
          uint64_t v22 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          uint64_t v22 = &v34;
          unint64_t v23 = v38;
        }
      }
      unint64_t v24 = v23 + 24 * v39;
      long long v25 = *(_OWORD *)v22;
      *(void *)(v24 + 16) = *((void *)v22 + 2);
      *(_OWORD *)unint64_t v24 = v25;
      ++v39;
      if (v36) {
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of mps native type values, but got ");
      }
    }
  }
  uint64_t v26 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v26);
  if (v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v27;
}

uint64_t mlir::mpsx::FPToIntClampedOp::verifyInvariantsImpl(mlir::mpsx::FPToIntClampedOp *this)
{
  v52[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    while (**(void **)(*(void *)(*(void *)this + 48) + 96) != MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*(void *)this, Value[1], (void **)"resultElementType", (void **)0x11)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
    {
      return 0;
    }
    if (*(_DWORD *)(*(void *)this + 36)) {
      uint64_t v8 = *(void *)this - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
    uint64_t v10 = *(void *)this;
    uint64_t v11 = (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v45 = v11;
    __int16 v12 = *v11;
    unint64_t v13 = (void *)*((void *)*v11 + 17);
    if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      unint64_t v15 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v16 = *((unsigned int *)v12 + 4);
      if (!v16) {
        goto LABEL_29;
      }
      unint64_t v17 = (void *)v12[1];
      unint64_t v18 = &v17[2 * v16];
      do
      {
        unint64_t v19 = v16 >> 1;
        unint64_t v20 = &v17[2 * (v16 >> 1)];
        unint64_t v22 = *v20;
        uint64_t v21 = v20 + 2;
        v16 += ~(v16 >> 1);
        if (v22 < v15) {
          unint64_t v17 = v21;
        }
        else {
          unint64_t v16 = v19;
        }
      }
      while (v16);
      if (v17 != v18 && *v17 == v15) {
        uint64_t v23 = v17[1];
      }
      else {
LABEL_29:
      }
        uint64_t v23 = 0;
      unint64_t AttrDictionary = (unint64_t)v11;
      v48[0] = v23;
      v46[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
      if (mlir::Type::isSignedInteger((mlir::Type *)v46, 8) || mlir::Type::isUnsignedInteger((mlir::Type *)v46, 8)) {
        return 1;
      }
      __int16 v12 = *v11;
      unint64_t v13 = (void *)*((void *)*v11 + 17);
    }
    if (v13 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      goto LABEL_64;
    }
    unint64_t v30 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v31 = *((unsigned int *)v12 + 4);
    if (!v31) {
      goto LABEL_51;
    }
    __int16 v32 = (void *)v12[1];
    uint64_t v33 = &v32[2 * v31];
    do
    {
      unint64_t v34 = v31 >> 1;
      uint64_t v35 = &v32[2 * (v31 >> 1)];
      unint64_t v37 = *v35;
      uint64_t v36 = v35 + 2;
      v31 += ~(v31 >> 1);
      if (v37 < v30) {
        __int16 v32 = v36;
      }
      else {
        unint64_t v31 = v34;
      }
    }
    while (v31);
    if (v32 != v33 && *v32 == v30) {
      uint64_t v38 = v32[1];
    }
    else {
LABEL_51:
    }
      uint64_t v38 = 0;
    unint64_t v42 = v11;
    uint64_t v43 = v38;
    v46[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v42);
    if (!mlir::Type::isSignedInteger((mlir::Type *)v46, 8) && !mlir::Type::isUnsignedInteger((mlir::Type *)v46, 8))
    {
LABEL_64:
      __int16 v44 = 261;
      unint64_t v42 = (void **)"result";
      uint64_t v43 = 6;
      mlir::Operation::emitOpError(v10, &v42, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v48, " #");
        if (AttrDictionary)
        {
          LODWORD(v46[0]) = 5;
          v46[1] = 0;
          unint64_t v24 = (char *)v46;
          unint64_t v25 = v49;
          if (v50 >= v51)
          {
            unint64_t v40 = v50 + 1;
            if (v49 <= (unint64_t)v46 && v49 + 24 * v50 > (unint64_t)v46)
            {
              uint64_t v41 = (char *)v46 - v49;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v40, 24);
              unint64_t v25 = v49;
              unint64_t v24 = &v41[v49];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v40, 24);
              unint64_t v24 = (char *)v46;
              unint64_t v25 = v49;
            }
          }
          unint64_t v26 = v25 + 24 * v50;
          long long v27 = *(_OWORD *)v24;
          *(void *)(v26 + 16) = *((void *)v24 + 2);
          *(_OWORD *)unint64_t v26 = v27;
          ++v50;
          if (AttrDictionary) {
            mlir::Diagnostic::operator<<((uint64_t)v48, " must be tensor of int8 values or memref of int8 values, but got ");
          }
        }
      }
      uint64_t v28 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v45);
      char v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v28);
      if (AttrDictionary) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v48);
      if (!v29) {
        return 0;
      }
    }
    return 1;
  }
LABEL_8:
  unint64_t v42 = (void **)"requires attribute 'resultElementType'";
  __int16 v44 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v42, (uint64_t)&AttrDictionary);
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v48);
  return v7;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  v41[19] = *MEMORY[0x263EF8340];
  uint64_t v33 = a2;
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = *(void **)(*(void *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_19;
  }
  unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v14 = *(unsigned int *)(v9 + 16);
  if (!v14) {
    goto LABEL_14;
  }
  unint64_t v15 = *(void **)(v9 + 8);
  unint64_t v16 = &v15[2 * v14];
  do
  {
    unint64_t v17 = v14 >> 1;
    unint64_t v18 = &v15[2 * (v14 >> 1)];
    unint64_t v20 = *v18;
    unint64_t v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13) {
      unint64_t v15 = v19;
    }
    else {
      unint64_t v14 = v17;
    }
  }
  while (v14);
  if (v15 != v16 && *v15 == v13) {
    uint64_t v21 = v15[1];
  }
  else {
LABEL_14:
  }
    uint64_t v21 = 0;
  uint64_t v36 = a2;
  v37[0] = v21;
  v31[0] = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isF16((mlir::Type *)v31)
    || mlir::Type::isF32((mlir::Type *)v31)
    || mlir::Type::isBF16((mlir::Type *)v31))
  {
    return 1;
  }
LABEL_19:
  __int16 v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      int v34 = 5;
      uint64_t v35 = a5;
      uint64_t v23 = &v34;
      unint64_t v24 = v38;
      if (v39 >= v40)
      {
        unint64_t v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          unint64_t v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          unint64_t v24 = v38;
          uint64_t v23 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          uint64_t v23 = &v34;
          unint64_t v24 = v38;
        }
      }
      unint64_t v25 = v24 + 24 * v39;
      long long v26 = *(_OWORD *)v23;
      *(void *)(v25 + 16) = *((void *)v23 + 2);
      *(_OWORD *)unint64_t v25 = v26;
      ++v39;
      if (v36) {
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of floating point values, but got ");
      }
    }
  }
  uint64_t v27 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v27);
  if (v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v22;
}

uint64_t mlir::mpsx::InterleaveOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v13[23] = *MEMORY[0x263EF8340];
  uint64_t v11 = *a1;
  for (uint64_t i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        ;
        uint64_t i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11))
    {
      unint64_t v5 = "'mpsx.interleave' op requires attribute 'interleave_factor'";
      goto LABEL_6;
    }
    if (**(void **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i)) {
      break;
    }
  }
  uint64_t v8 = *((void *)i + 1);
  if (!v8) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = *((void *)i + 1);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)) {
      return 1;
    }
  }
  unint64_t v5 = "'mpsx.interleave' op attribute 'interleave_factor' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_6:
  v9[0] = v5;
  __int16 v10 = 259;
  mlir::emitError(a2, (uint64_t)v9, (uint64_t)&Value);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v6;
}

BOOL mlir::mpsx::ListPopBackOp::verifyInvariantsImpl(mlir::mpsx::ListPopBackOp *this)
{
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  uint64_t v2 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v4 = *(void *)this - 16;
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  uint64_t v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps4(*(void *)this, *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 1u) != 0;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  v29[19] = *MEMORY[0x263EF8340];
  uint64_t v21 = a2;
  uint64_t v9 = *(void *)(*(void *)a2 + 136);
  if (v9 == mlir::TypeID::get<mlir::mpsx::ListType>()) {
    return 1;
  }
  __int16 v20 = 261;
  v19[0] = a3;
  v19[1] = a4;
  mlir::Operation::emitOpError(a1, v19, (uint64_t)&v24);
  if (v24)
  {
    mlir::Diagnostic::operator<<((uint64_t)v25, " #");
    if (v24)
    {
      int v22 = 5;
      uint64_t v23 = a5;
      __int16 v10 = &v22;
      unint64_t v11 = v26;
      if (v27 >= v28)
      {
        unint64_t v17 = v27 + 1;
        if (v26 <= (unint64_t)&v22 && v26 + 24 * v27 > (unint64_t)&v22)
        {
          unint64_t v18 = (char *)&v22 - v26;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v17, 24);
          unint64_t v11 = v26;
          __int16 v10 = (int *)&v18[v26];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v17, 24);
          __int16 v10 = &v22;
          unint64_t v11 = v26;
        }
      }
      unint64_t v12 = v11 + 24 * v27;
      long long v13 = *(_OWORD *)v10;
      *(void *)(v12 + 16) = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      ++v27;
      if (v24) {
        mlir::Diagnostic::operator<<((uint64_t)v25, " must be MPSX list type, but got ");
      }
    }
  }
  uint64_t v14 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v24, &v21);
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
  if (v24) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v25);
  return v15;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps4(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  v28[19] = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  if (mlir::mpsx::isMPSXListElementType(a2)) {
    return 1;
  }
  __int16 v19 = 261;
  v18[0] = a3;
  v18[1] = a4;
  mlir::Operation::emitOpError(a1, v18, (uint64_t)&v23);
  if (v23)
  {
    mlir::Diagnostic::operator<<((uint64_t)v24, " #");
    if (v23)
    {
      int v21 = 5;
      uint64_t v22 = a5;
      __int16 v10 = &v21;
      unint64_t v11 = v25;
      if (v26 >= v27)
      {
        unint64_t v16 = v26 + 1;
        if (v25 <= (unint64_t)&v21 && v25 + 24 * v26 > (unint64_t)&v21)
        {
          unint64_t v17 = (char *)&v21 - v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v16, 24);
          unint64_t v11 = v25;
          __int16 v10 = (int *)&v17[v25];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v16, 24);
          __int16 v10 = &v21;
          unint64_t v11 = v25;
        }
      }
      unint64_t v12 = v11 + 24 * v26;
      long long v13 = *(_OWORD *)v10;
      *(void *)(v12 + 16) = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      ++v26;
      if (v23) {
        mlir::Diagnostic::operator<<((uint64_t)v24, " must be MPSX list element type, but got ");
      }
    }
  }
  uint64_t v14 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v23, &v20);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
  if (v23) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
  return v9;
}

BOOL mlir::mpsx::ListPushBackOp::verifyInvariantsImpl(mlir::mpsx::ListPushBackOp *this)
{
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps4(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u))
  {
    return 0;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v2 = *(void *)this - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::mpsx::MakeListOp::verifyInvariantsImpl(mlir::mpsx::MakeListOp *this)
{
  void v21[23] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    while (1)
    {
      uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      uint64_t v8 = *(void *)this;
      if (**(void **)(*(void *)(*(void *)this + 48) + 96) == NumNeededNEs) {
        break;
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v6 -= 16;
      if (!v6) {
        goto LABEL_8;
      }
    }
    unint64_t v11 = (void **)*((void *)Value + 1);
    for (uint64_t i = 0; v6; v6 -= 16)
    {
      uint64_t v17 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      uint64_t v8 = *(void *)this;
      if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8) == v17) {
        uint64_t i = (void **)*((void *)Value + 1);
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    if (v11)
    {
      if (*((_UNKNOWN **)*v11 + 17) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
        || (unint64_t AttrDictionary = (unint64_t)v11,
            mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&AttrDictionary),
            v18[0] = v11,
            uint64_t v13 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v18),
            !mlir::mpsx::isMPSXListElementType(v13)))
      {
        __int16 v19 = 257;
        mlir::Operation::emitOpError(v8, v18, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v21, "attribute '");
          if (AttrDictionary)
          {
            __int16 v19 = 261;
            v18[0] = (void **)"element_type";
            v18[1] = (void **)12;
            mlir::Diagnostic::operator<<((uint64_t)v21, v18);
            if (AttrDictionary) {
              mlir::Diagnostic::operator<<((uint64_t)v21, "' failed to satisfy constraint: any type attribute MPSX list element type attribute");
            }
          }
        }
        char v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
        if (!v14) {
          return 0;
        }
      }
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*(void *)this, i, (void **)"max_size", (void **)8))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v15 = *(void *)this - 16;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
      return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v18[0] = (void **)"requires attribute 'element_type'";
    __int16 v19 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v18, (uint64_t)&AttrDictionary);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
  }
  return v9;
}

unint64_t mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(mlir::Operation **this, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = *this;
  if (*((unsigned char *)v4 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v4 + 56);
  }
  uint64_t v6 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  uint64_t v7 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v7);
    uint64_t v8 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v8 = (mlir::Operation *)((char *)v7 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v8);
  unint64_t v11 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v6, (MirInfoChannelAssignment *)(Value + 16 * v10), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 24));
  if ((v12 & 1) == 0)
  {
    unint64_t AttrDictionary = 0;
    if (v2) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v2 = 0;
    uint64_t v14 = 0;
    return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                    + 4 * v2) << 32);
  }
  unint64_t AttrDictionary = *((void *)v11 + 1);
  if (!v2) {
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v13 = 0;
  LODWORD(v14) = 0;
  uint64_t v2 = v2;
  do
  {
    uint64_t v14 = (*(_DWORD *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                   + v13)
                       + v14);
    v13 += 4;
  }
  while (4 * v2 != v13);
  return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                  + 4 * v2) << 32);
}

uint64_t mlir::mpsx::QuantizedGatherOp::getODSOperands(mlir::Operation **this, int a2)
{
  unsigned int ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, a2);
  if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
    uint64_t v4 = *((void *)*this + 9);
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 + 32 * ODSOperandIndexAndLength;
}

BOOL mlir::mpsx::QuantizedGatherOp::verifyInvariantsImpl(mlir::mpsx::QuantizedGatherOp *this)
{
  uint64_t v211 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    uint64_t v8 = "requires attribute 'batch_dims'";
LABEL_21:
    v194 = (void **)v8;
    __int16 v196 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v194, (uint64_t)&AttrDictionary);
LABEL_22:
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
    return v14;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 16 * v4;
  while (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(void **)(*(void *)(*(void *)this + 48) + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value)) {
      uint64_t v6 = *((void *)Value + 1);
    }
    uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    v7 -= 16;
    if (!v7) {
      goto LABEL_10;
    }
  }
  if (!v7)
  {
LABEL_15:
    uint64_t v8 = "requires attribute 'dtype'";
    goto LABEL_21;
  }
  uint64_t v9 = 0;
  uint64_t v10 = (void **)*((void *)Value + 1);
  while (1)
  {
    unint64_t v11 = (MirInfoChannelAssignment *)((char *)Value + v9);
    if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)((char *)Value + v9))) {
      break;
    }
    v9 += 16;
    if (v7 == v9) {
      goto LABEL_15;
    }
  }
  uint64_t v12 = v7 - v9;
  if (!v12)
  {
LABEL_20:
    uint64_t v8 = "requires attribute 'operandSegmentSizes'";
    goto LABEL_21;
  }
  uint64_t v13 = *((void *)v11 + 1);
  while (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 24) != MirInfoChannelAssignment::GetNumNeededNEs(v11))
  {
    unint64_t v11 = (MirInfoChannelAssignment *)((char *)v11 + 16);
    v12 -= 16;
    if (!v12) {
      goto LABEL_20;
    }
  }
  v199[0] = *((void *)v11 + 1);
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)v199);
  if (v16 != 6)
  {
    uint64_t v22 = v16;
    v194 = (void **)"'operandSegmentSizes' attribute for specifying operand segments must have 6 elements, but got ";
    __int16 v196 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v194, (uint64_t)&AttrDictionary);
    if (AttrDictionary)
    {
      LODWORD(OperandRange) = 5;
      uint64_t v203 = v22;
      uint64_t v23 = &OperandRange;
      unint64_t v24 = v206;
      if (v207 >= v208)
      {
        unint64_t v190 = v207 + 1;
        if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
        {
          v191 = (char *)&OperandRange - v206;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v190, 24);
          unint64_t v24 = v206;
          uint64_t v23 = (uint64_t *)&v191[v206];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v190, 24);
          uint64_t v23 = &OperandRange;
          unint64_t v24 = v206;
        }
      }
      unint64_t v25 = v24 + 24 * v207;
      long long v26 = *(_OWORD *)v23;
      *(void *)(v25 + 16) = v23[2];
      *(_OWORD *)unint64_t v25 = v26;
      ++v207;
    }
    goto LABEL_22;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*(void *)this, v13, (void **)"dtype", (void **)5)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*(void *)this, v10, (void **)"batch_dims", (void **)0xA)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps9(*(void *)this, v6, (void **)"allow_negative_indices", (void **)0x16))
  {
    return 0;
  }
  unsigned int v193 = 0;
  uint64_t ODSOperands = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 0);
  if (v18)
  {
    uint64_t v19 = ODSOperands;
    uint64_t v20 = v18;
    uint64_t v21 = 0;
    while (1)
    {
      uint64_t v27 = *(void *)this;
      unsigned int v28 = (void **)(*(void *)(*(void *)(v19 + 32 * v21 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v29 = v21 + 1;
      unsigned int v193 = v21 + 1;
      v199[0] = (uint64_t)v28;
      unint64_t v30 = *v28;
      unint64_t v31 = (void *)*((void *)*v28 + 17);
      if (v31 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v31 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        unint64_t v33 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v34 = *((unsigned int *)v30 + 4);
        if (!v34) {
          goto LABEL_51;
        }
        uint64_t v35 = (void *)v30[1];
        uint64_t v36 = &v35[2 * v34];
        do
        {
          unint64_t v37 = v34 >> 1;
          unint64_t v38 = &v35[2 * (v34 >> 1)];
          unint64_t v40 = *v38;
          unsigned int v39 = v38 + 2;
          v34 += ~(v34 >> 1);
          if (v40 < v33) {
            uint64_t v35 = v39;
          }
          else {
            unint64_t v34 = v37;
          }
        }
        while (v34);
        if (v35 != v36 && *v35 == v33) {
          uint64_t v41 = v35[1];
        }
        else {
LABEL_51:
        }
          uint64_t v41 = 0;
        unint64_t AttrDictionary = (unint64_t)v28;
        v205[0] = v41;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
        if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
          || mlir::Type::isF16((mlir::Type *)&OperandRange)
          || mlir::Type::isF32((mlir::Type *)&OperandRange)
          || mlir::Type::isBF16((mlir::Type *)&OperandRange)
          || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        {
          goto LABEL_37;
        }
        unint64_t v30 = *v28;
        unint64_t v31 = (void *)*((void *)*v28 + 17);
      }
      if (v31 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v31 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_267;
      }
      unint64_t v43 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v44 = *((unsigned int *)v30 + 4);
      if (!v44) {
        goto LABEL_79;
      }
      unint64_t v45 = (void *)v30[1];
      __int16 v46 = &v45[2 * v44];
      do
      {
        unint64_t v47 = v44 >> 1;
        unint64_t v48 = &v45[2 * (v44 >> 1)];
        unint64_t v50 = *v48;
        unint64_t v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43) {
          unint64_t v45 = v49;
        }
        else {
          unint64_t v44 = v47;
        }
      }
      while (v44);
      if (v45 != v46 && *v45 == v43) {
        uint64_t v51 = v45[1];
      }
      else {
LABEL_79:
      }
        uint64_t v51 = 0;
      v194 = v28;
      uint64_t v195 = v51;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v194);
      if (!mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
        && *(_UNKNOWN **)(*(void *)OperandRange + 136) != &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
      {
LABEL_267:
        __int16 v196 = 261;
        v194 = (void **)"operand";
        uint64_t v195 = 7;
        mlir::Operation::emitOpError(v27, &v194, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v205, " #");
          if (AttrDictionary)
          {
            LODWORD(OperandRange) = 5;
            uint64_t v203 = v21;
            unint64_t v52 = v206;
            if (v207 >= v208)
            {
              unint64_t v58 = v207 + 1;
              if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
              {
                uint64_t v59 = (char *)&OperandRange - v206;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v58, 24);
                unint64_t v52 = v206;
                p_uint64_t OperandRange = (uint64_t *)&v59[v206];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v58, 24);
                p_uint64_t OperandRange = &OperandRange;
                unint64_t v52 = v206;
              }
            }
            else
            {
              p_uint64_t OperandRange = &OperandRange;
            }
            unint64_t v54 = v52 + 24 * v207;
            long long v55 = *(_OWORD *)p_OperandRange;
            *(void *)(v54 + 16) = p_OperandRange[2];
            *(_OWORD *)unint64_t v54 = v55;
            ++v207;
            if (AttrDictionary) {
              mlir::Diagnostic::operator<<((uint64_t)v205, " must be tensor of mps native type values or tensor of quantized values, but got ");
            }
          }
        }
        uint64_t v56 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, v199);
        char v57 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v56);
        if (AttrDictionary) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
        if (!v57) {
          return 0;
        }
      }
LABEL_37:
      ++v21;
      if (v29 == v20) {
        goto LABEL_107;
      }
    }
  }
  LODWORD(v29) = 0;
LABEL_107:
  uint64_t v60 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 1);
  if (v61)
  {
    uint64_t v62 = v60;
    uint64_t v63 = v61;
    uint64_t v64 = 0;
    while (1)
    {
      uint64_t v65 = *(void *)this;
      unint64_t v66 = *(void *)(*(void *)(v62 + 32 * v64 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v67 = v29 + 1;
      unsigned int v193 = v29 + 1;
      v199[0] = v66;
      uint64_t v68 = *(void *)v66;
      uint64_t v69 = *(void **)(*(void *)v66 + 136);
      if (v69 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v69 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_268;
      }
      unint64_t v71 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v72 = *(unsigned int *)(v68 + 16);
      if (!v72) {
        goto LABEL_124;
      }
      unint64_t v73 = *(void **)(v68 + 8);
      unsigned __int8 v74 = &v73[2 * v72];
      do
      {
        unint64_t v75 = v72 >> 1;
        uint64_t v76 = &v73[2 * (v72 >> 1)];
        unint64_t v78 = *v76;
        uint64_t v77 = v76 + 2;
        v72 += ~(v72 >> 1);
        if (v78 < v71) {
          unint64_t v73 = v77;
        }
        else {
          unint64_t v72 = v75;
        }
      }
      while (v72);
      if (v73 != v74 && *v73 == v71) {
        uint64_t v79 = v73[1];
      }
      else {
LABEL_124:
      }
        uint64_t v79 = 0;
      unint64_t AttrDictionary = v66;
      v205[0] = v79;
      v194 = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
      if (!mlir::Type::isSignedInteger((mlir::Type *)&v194, 8)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v194, 16)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v194, 32)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v194, 64)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 8)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 16)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 32)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 64))
      {
LABEL_268:
        __int16 v196 = 261;
        v194 = (void **)"operand";
        uint64_t v195 = 7;
        mlir::Operation::emitOpError(v65, &v194, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v205, " #");
          if (AttrDictionary)
          {
            LODWORD(OperandRange) = 5;
            uint64_t v203 = v29;
            unint64_t v80 = v206;
            if (v207 >= v208)
            {
              unint64_t v86 = v207 + 1;
              if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
              {
                int v87 = (char *)&OperandRange - v206;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v86, 24);
                unint64_t v80 = v206;
                uint64_t v81 = (uint64_t *)&v87[v206];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v86, 24);
                uint64_t v81 = &OperandRange;
                unint64_t v80 = v206;
              }
            }
            else
            {
              uint64_t v81 = &OperandRange;
            }
            unint64_t v82 = v80 + 24 * v207;
            long long v83 = *(_OWORD *)v81;
            *(void *)(v82 + 16) = v81[2];
            *(_OWORD *)unint64_t v82 = v83;
            ++v207;
            if (AttrDictionary) {
              mlir::Diagnostic::operator<<((uint64_t)v205, " must be tensor of int values, but got ");
            }
          }
        }
        uint64_t v84 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, v199);
        char v85 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v84);
        if (AttrDictionary) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
        if (!v85) {
          return 0;
        }
      }
      ++v64;
      LODWORD(v29) = v29 + 1;
      if (v64 == v63) {
        goto LABEL_147;
      }
    }
  }
  unsigned int v67 = v29;
LABEL_147:
  uint64_t v88 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 2);
  *(void *)v192 = v89;
  if (v89)
  {
    uint64_t v90 = v88;
    uint64_t v91 = 0;
    while (1)
    {
      uint64_t v92 = *(void *)this;
      uint64_t v93 = (void **)(*(void *)(*(void *)(v90 + 32 * v91 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v94 = v67 + 1;
      unsigned int v193 = v67 + 1;
      v200 = v93;
      char v95 = *v93;
      if (*((_UNKNOWN **)*v93 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      {
        unint64_t v96 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v97 = *((unsigned int *)v95 + 4);
        if (!v97) {
          goto LABEL_160;
        }
        uint64_t v98 = (void *)v95[1];
        uint64_t v99 = &v98[2 * v97];
        do
        {
          unint64_t v100 = v97 >> 1;
          uint64_t v101 = &v98[2 * (v97 >> 1)];
          unint64_t v103 = *v101;
          uint64_t v102 = v101 + 2;
          v97 += ~(v97 >> 1);
          if (v103 < v96) {
            uint64_t v98 = v102;
          }
          else {
            unint64_t v97 = v100;
          }
        }
        while (v97);
        if (v98 != v99 && *v98 == v96) {
          uint64_t v104 = v98[1];
        }
        else {
LABEL_160:
        }
          uint64_t v104 = 0;
        unint64_t AttrDictionary = (unint64_t)v93;
        v205[0] = v104;
        int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&AttrDictionary);
        char v95 = *v93;
        if (ArgOperands)
        {
          unint64_t v106 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v107 = *((unsigned int *)v95 + 4);
          if (!v107) {
            goto LABEL_170;
          }
          uint64_t v108 = (void *)v95[1];
          unint64_t v109 = &v108[2 * v107];
          do
          {
            unint64_t v110 = v107 >> 1;
            uint64_t v111 = &v108[2 * (v107 >> 1)];
            unint64_t v113 = *v111;
            uint64_t v112 = v111 + 2;
            v107 += ~(v107 >> 1);
            if (v113 < v106) {
              uint64_t v108 = v112;
            }
            else {
              unint64_t v107 = v110;
            }
          }
          while (v107);
          if (v108 != v109 && *v108 == v106) {
            uint64_t v114 = v108[1];
          }
          else {
LABEL_170:
          }
            uint64_t v114 = 0;
          v194 = v93;
          uint64_t v195 = v114;
          mlir::ShapedType::getShape((mlir::ShapedType *)&v194);
          char v95 = *v93;
          if (!v115)
          {
            unint64_t v155 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v156 = *((unsigned int *)v95 + 4);
            if (!v156) {
              goto LABEL_228;
            }
            uint64_t v157 = (void *)v95[1];
            uint64_t v158 = &v157[2 * v156];
            do
            {
              unint64_t v159 = v156 >> 1;
              uint64_t v160 = &v157[2 * (v156 >> 1)];
              unint64_t v162 = *v160;
              long long v161 = v160 + 2;
              v156 += ~(v156 >> 1);
              if (v162 < v155) {
                uint64_t v157 = v161;
              }
              else {
                unint64_t v156 = v159;
              }
            }
            while (v156);
            if (v157 != v158 && *v157 == v155) {
              uint64_t v163 = v157[1];
            }
            else {
LABEL_228:
            }
              uint64_t v163 = 0;
            uint64_t OperandRange = (uint64_t)v93;
            uint64_t v203 = v163;
            uint64_t v201 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange);
            if (mlir::Type::isSignedInteger((mlir::Type *)&v201, 32)
              || mlir::Type::isSignedInteger((mlir::Type *)&v201, 64))
            {
              goto LABEL_150;
            }
            char v95 = *v93;
          }
        }
      }
      uint64_t v116 = (void *)v95[17];
      if (v116 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v116 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_218;
      }
      unint64_t v118 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v119 = *((unsigned int *)v95 + 4);
      if (!v119) {
        goto LABEL_185;
      }
      uint64_t v120 = (void *)v95[1];
      uint64_t v121 = &v120[2 * v119];
      do
      {
        unint64_t v122 = v119 >> 1;
        uint64_t v123 = &v120[2 * (v119 >> 1)];
        unint64_t v125 = *v123;
        uint64_t v124 = v123 + 2;
        v119 += ~(v119 >> 1);
        if (v125 < v118) {
          uint64_t v120 = v124;
        }
        else {
          unint64_t v119 = v122;
        }
      }
      while (v119);
      if (v120 != v121 && *v120 == v118) {
        uint64_t v126 = v120[1];
      }
      else {
LABEL_185:
      }
        uint64_t v126 = 0;
      v199[0] = (uint64_t)v93;
      v199[1] = v126;
      uint64_t v201 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v199);
      if (!mlir::Type::isSignedInteger((mlir::Type *)&v201, 32)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v201, 64))
      {
        goto LABEL_218;
      }
      uint64_t v127 = *v93;
      unint64_t v128 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v129 = *((unsigned int *)v127 + 4);
      if (!v129) {
        goto LABEL_196;
      }
      v130 = (void *)v127[1];
      uint64_t v131 = &v130[2 * v129];
      do
      {
        unint64_t v132 = v129 >> 1;
        uint64_t v133 = &v130[2 * (v129 >> 1)];
        unint64_t v135 = *v133;
        uint64_t v134 = v133 + 2;
        v129 += ~(v129 >> 1);
        if (v135 < v128) {
          v130 = v134;
        }
        else {
          unint64_t v129 = v132;
        }
      }
      while (v129);
      if (v130 != v131 && *v130 == v128) {
        uint64_t v136 = v130[1];
      }
      else {
LABEL_196:
      }
        uint64_t v136 = 0;
      v198[0] = v93;
      v198[1] = v136;
      uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v198);
      uint64_t v210 = 1;
      if (v138 != 1 || *Shape != v210)
      {
LABEL_218:
        unint64_t v139 = *v93;
        if (*((_UNKNOWN **)*v93 + 17) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
          goto LABEL_200;
        }
        unint64_t v146 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v147 = *((unsigned int *)v139 + 4);
        if (!v147) {
          goto LABEL_216;
        }
        unint64_t v148 = (void *)v139[1];
        unint64_t v149 = &v148[2 * v147];
        do
        {
          unint64_t v150 = v147 >> 1;
          uint64_t v151 = &v148[2 * (v147 >> 1)];
          unint64_t v153 = *v151;
          unint64_t v152 = v151 + 2;
          v147 += ~(v147 >> 1);
          if (v153 < v146) {
            unint64_t v148 = v152;
          }
          else {
            unint64_t v147 = v150;
          }
        }
        while (v147);
        if (v148 != v149 && *v148 == v146) {
          uint64_t v154 = v148[1];
        }
        else {
LABEL_216:
        }
          uint64_t v154 = 0;
        v197[0] = v93;
        v197[1] = v154;
        uint64_t v201 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v197);
        if (!mlir::Type::isSignedInteger((mlir::Type *)&v201, 32)
          && !mlir::Type::isSignedInteger((mlir::Type *)&v201, 64))
        {
LABEL_200:
          __int16 v196 = 261;
          v194 = (void **)"operand";
          uint64_t v195 = 7;
          mlir::Operation::emitOpError(v92, &v194, (uint64_t)&AttrDictionary);
          if (AttrDictionary)
          {
            mlir::Diagnostic::operator<<((uint64_t)v205, " #");
            if (AttrDictionary)
            {
              LODWORD(OperandRange) = 5;
              uint64_t v203 = v67;
              unint64_t v140 = v206;
              if (v207 >= v208)
              {
                unint64_t v164 = v207 + 1;
                if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
                {
                  unint64_t v165 = (char *)&OperandRange - v206;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v164, 24);
                  unint64_t v140 = v206;
                  uint64_t v141 = (uint64_t *)&v165[v206];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v164, 24);
                  uint64_t v141 = &OperandRange;
                  unint64_t v140 = v206;
                }
              }
              else
              {
                uint64_t v141 = &OperandRange;
              }
              unint64_t v142 = v140 + 24 * v207;
              long long v143 = *(_OWORD *)v141;
              *(void *)(v142 + 16) = v141[2];
              *(_OWORD *)unint64_t v142 = v143;
              ++v207;
              if (AttrDictionary) {
                mlir::Diagnostic::operator<<((uint64_t)v205, " must be 0D tensor of mps index type values or static-shape defined tensor with shape equal to [1] or unranked tensor of mps index type values, but got ");
              }
            }
          }
          uint64_t v144 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v200);
          char v145 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v144);
          if (AttrDictionary) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
          }
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
          if (!v145) {
            return 0;
          }
        }
      }
LABEL_150:
      ++v91;
      ++v67;
      if (v91 == *(void *)v192) {
        goto LABEL_243;
      }
    }
  }
  unsigned int v94 = v67;
LABEL_243:
  uint64_t v166 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 3);
  if (v167)
  {
    uint64_t v168 = v167;
    uint64_t v169 = v166 + 24;
    do
    {
      uint64_t v170 = *(void *)this;
      unint64_t v171 = *(void *)(*(void *)v169 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v193 = v94 + 1;
      if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(v170, v171, (void **)"operand", (void **)7, v94))return 0; {
      v169 += 32;
      }
      ++v94;
    }
    while (--v168);
  }
  uint64_t v172 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 4);
  uint64_t v174 = v173;
  if (v173 >= 2) {
    goto LABEL_251;
  }
  if (v173)
  {
    uint64_t v175 = *(void *)(v172 + 24);
    uint64_t v176 = *(void *)this;
    unint64_t v177 = *(void *)(v175 + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v178 = v193++;
    if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps8(v176, v177, (void **)"operand", (void **)7, v178))return 0; {
  }
    }
  uint64_t v179 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 5);
  uint64_t v174 = v180;
  if (v180 < 2)
  {
    if (!v180
      || (uint64_t v184 = *(void *)(v179 + 24),
          uint64_t v185 = *(void *)this,
          unint64_t v186 = *(void *)(v184 + 8) & 0xFFFFFFFFFFFFFFF8,
          unsigned int v187 = v193,
          ++v193,
          mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(v185, v186, (void **)"operand", (void **)7, v187)))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v188 = *(void *)this - 16;
      }
      else {
        uint64_t v188 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v188, 0);
      return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    return 0;
  }
LABEL_251:
  v194 = (void **)"operand group starting at #";
  __int16 v196 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v194, (uint64_t)&AttrDictionary);
  v181 = (void *)mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&AttrDictionary, &v193);
  uint64_t v182 = (uint64_t)v181;
  if (*v181) {
    mlir::Diagnostic::operator<<((uint64_t)(v181 + 1), " requires 0 or 1 element, but found ");
  }
  uint64_t OperandRange = v174;
  uint64_t v183 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v182, &OperandRange);
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v183);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&AttrDictionary);
  return v14;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps8(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  v41[19] = *MEMORY[0x263EF8340];
  uint64_t v33 = a2;
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = *(void **)(*(void *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_27;
  }
  unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v14 = *(unsigned int *)(v9 + 16);
  if (!v14) {
    goto LABEL_14;
  }
  uint64_t v15 = *(void **)(v9 + 8);
  uint64_t v16 = &v15[2 * v14];
  do
  {
    unint64_t v17 = v14 >> 1;
    uint64_t v18 = &v15[2 * (v14 >> 1)];
    unint64_t v20 = *v18;
    uint64_t v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13) {
      uint64_t v15 = v19;
    }
    else {
      unint64_t v14 = v17;
    }
  }
  while (v14);
  if (v15 != v16 && *v15 == v13) {
    uint64_t v21 = v15[1];
  }
  else {
LABEL_14:
  }
    uint64_t v21 = 0;
  uint64_t v36 = a2;
  v37[0] = v21;
  v31[0] = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isSignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 32)
    || *((_UNKNOWN **)*v31[0] + 17) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_27:
  __int16 v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      int v34 = 5;
      uint64_t v35 = a5;
      uint64_t v22 = &v34;
      unint64_t v23 = v38;
      if (v39 >= v40)
      {
        unint64_t v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          unint64_t v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          unint64_t v23 = v38;
          uint64_t v22 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          uint64_t v22 = &v34;
          unint64_t v23 = v38;
        }
      }
      unint64_t v24 = v23 + 24 * v39;
      long long v25 = *(_OWORD *)v22;
      *(void *)(v24 + 16) = *((void *)v22 + 2);
      *(_OWORD *)unint64_t v24 = v25;
      ++v39;
      if (v36) {
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of quantized values, but got ");
      }
    }
  }
  uint64_t v26 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v26);
  if (v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v27;
}

unint64_t mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *this, int a2)
{
  LODWORD(v2) = a2;
  uint64_t Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue(this);
  uint64_t v5 = mlir::DictionaryAttr::end(this);
  uint64_t v6 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v5 - 16), *(void *)(*(void *)(*((void *)this + 1) + 96) + 8));
  if ((v7 & 1) == 0)
  {
    uint64_t v11 = 0;
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    uint64_t v9 = 0;
    return v9 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11)
                                                   + 4 * v2) << 32);
  }
  uint64_t v11 = *((void *)v6 + 1);
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v8 = 0;
  LODWORD(v9) = 0;
  uint64_t v2 = v2;
  do
  {
    uint64_t v9 = (*(_DWORD *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11)
                                  + v8)
                      + v9);
    v8 += 4;
  }
  while (4 * v2 != v8);
  return v9 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11)
                                                 + 4 * v2) << 32);
}

uint64_t mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getWeightsQuantParamsAxis(mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *this)
{
  uint64_t v2 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue(this) + 32);
  uint64_t v3 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end(this);
  uint64_t v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v2, v3, *(void *)(*(void *)(*((void *)this + 1) + 96) + 40));
  if ((v5 & 1) != 0 && (uint64_t v6 = *((void *)v4 + 1)) != 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *(void **)(*(void *)v6 + 136);
    if (v10 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      uint64_t v6 = 0;
    }
    uint64_t v15 = v6;
    if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      mlir::IntegerAttr::getValue((uint64_t)&v15, (llvm::APInt *)&v13);
      if (v14 > 0x40)
      {
        uint64_t v11 = *v13;
        MEMORY[0x21667D390]();
      }
      else
      {
        uint64_t v11 = (uint64_t)((void)v13 << -(uint64_t)v14) >> -(uint64_t)v14;
      }
      uint64_t v7 = v11 & 0xFFFFFF00;
      uint64_t v9 = v11;
      uint64_t v8 = 0x100000000;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  return v8 | v7 | v9;
}

unint64_t mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(mlir::Operation **this, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = *this;
  if (*((unsigned char *)v4 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v4 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  uint64_t v7 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v7);
    uint64_t v8 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v8 = (mlir::Operation *)((char *)v7 + 56);
  }
  uint64_t v9 = mlir::ArrayAttr::getValue(v8);
  uint64_t v11 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v9 + 16 * v10 - 16), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 8));
  if ((v12 & 1) == 0)
  {
    unint64_t AttrDictionary = 0;
    if (v2) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v2 = 0;
    uint64_t v14 = 0;
    return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                    + 4 * v2) << 32);
  }
  unint64_t AttrDictionary = *((void *)v11 + 1);
  if (!v2) {
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v13 = 0;
  LODWORD(v14) = 0;
  uint64_t v2 = v2;
  do
  {
    uint64_t v14 = (*(_DWORD *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                   + v13)
                       + v14);
    v13 += 4;
  }
  while (4 * v2 != v13);
  return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                  + 4 * v2) << 32);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getODSOperands(mlir::Operation **this, int a2)
{
  unsigned int ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, a2);
  if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
    uint64_t v4 = *((void *)*this + 9);
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 + 32 * ODSOperandIndexAndLength;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxisAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  char v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t v7 = mlir::ArrayAttr::getValue(v6);
  uint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8 - 32), **(void **)(*((void *)*this + 6) + 96));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  char v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v6);
  uint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 40));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getOutputTypeAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  char v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v6);
  uint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 16));
  if (v10) {
    return *((void *)v9 + 1);
  }
  else {
    return 0;
  }
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getTransposeLhsAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  char v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v6);
  uint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (mlir::BoolAttr::classof(*((void **)v9 + 1))) {
    return v11;
  }
  return 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getTransposeRhsAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  char v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v6);
  uint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 32));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (mlir::BoolAttr::classof(*((void **)v9 + 1))) {
    return v11;
  }
  return 0;
}

void mlir::mpsx::QuantizedMatMulOp::populateDefaultAttrs(mlir::mpsx::QuantizedMatMulOp *this, const mlir::OperationName *a2, mlir::NamedAttrList *a3)
{
  uint64_t v4 = *(uint64_t **)(*(void *)this + 96);
  uint64_t Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)v4);
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[3]))
  {
    uint64_t v5 = v4[3];
    uint64_t BoolAttr = mlir::Builder::getBoolAttr(&Context, 0);
    ZinMirCacheTensors::ZinMirCacheTensors(&v10, v5, BoolAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[4]))
  {
    uint64_t v7 = v4[4];
    uint64_t v8 = mlir::Builder::getBoolAttr(&Context, 0);
    ZinMirCacheTensors::ZinMirCacheTensors(&v10, v7, v8);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
}

BOOL mlir::mpsx::QuantizedMatMulOp::verifyInvariantsImpl(mlir::mpsx::QuantizedMatMulOp *this)
{
  v110[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    uint64_t v8 = "requires attribute 'operandSegmentSizes'";
LABEL_16:
    v102[0] = (void **)v8;
    __int16 v103 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v102, (uint64_t)&AttrDictionary);
LABEL_17:
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v106);
    return v12;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 16 * v4;
  while (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(void **)(*(void *)(*(void *)this + 48) + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value)) {
      uint64_t v6 = (void **)*((void *)Value + 1);
    }
    uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    v7 -= 16;
    if (!v7) {
      goto LABEL_10;
    }
  }
  if (!v7)
  {
LABEL_15:
    uint64_t v8 = "requires attribute 'output_type'";
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *((void *)Value + 1);
  while (1)
  {
    uint64_t v11 = (MirInfoChannelAssignment *)((char *)Value + v9);
    if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)((char *)Value + v9))) {
      break;
    }
    v9 += 16;
    if (v7 == v9) {
      goto LABEL_15;
    }
  }
  uint64_t v14 = *((void *)v11 + 1);
  uint64_t v15 = v7 - v9;
  if (v7 == v9)
  {
    uint64_t v18 = 0;
    unint64_t v17 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    do
    {
      if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 24) == MirInfoChannelAssignment::GetNumNeededNEs(v11))
      {
        uint64_t v16 = (void *)*((void *)v11 + 1);
      }
      else if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 32) == MirInfoChannelAssignment::GetNumNeededNEs(v11))
      {
        unint64_t v17 = (void *)*((void *)v11 + 1);
      }
      else if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 40) == MirInfoChannelAssignment::GetNumNeededNEs(v11))
      {
        uint64_t v18 = (void **)*((void *)v11 + 1);
      }
      uint64_t v11 = (MirInfoChannelAssignment *)((char *)v11 + 16);
      v15 -= 16;
    }
    while (v15);
  }
  uint64_t v101 = v10;
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v101);
  if (v19 != 11)
  {
    uint64_t v88 = v19;
    v102[0] = (void **)"'operandSegmentSizes' attribute for specifying operand segments must have 11 elements, but got ";
    __int16 v103 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v102, (uint64_t)&AttrDictionary);
    if (AttrDictionary)
    {
      LODWORD(v104[0]) = 5;
      v104[1] = v88;
      uint64_t v89 = v104;
      unint64_t v90 = v107;
      if (v108 >= v109)
      {
        unint64_t v93 = v108 + 1;
        if (v107 <= (unint64_t)v104 && v107 + 24 * v108 > (unint64_t)v104)
        {
          unint64_t v100 = (char *)v104 - v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
          unint64_t v90 = v107;
          uint64_t v89 = (uint64_t *)&v100[v107];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
          uint64_t v89 = v104;
          unint64_t v90 = v107;
        }
      }
      unint64_t v91 = v90 + 24 * v108;
      long long v92 = *(_OWORD *)v89;
      *(void *)(v91 + 16) = v89[2];
      *(_OWORD *)unint64_t v91 = v92;
      ++v108;
    }
    goto LABEL_17;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps22(*(void *)this, v6, (void **)"input_quant_params_axis", (void **)0x17)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps22(*(void *)this, v18, (void **)"weights_quant_params_axis", (void **)0x19)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*(void *)this, v14, (void **)"output_type", (void **)0xB)|| !mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps7(*(void *)this, v16, (void **)"transpose_lhs", (void **)0xD)
    || !mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps7(*(void *)this, v17, (void **)"transpose_rhs", (void **)0xD))
  {
    return 0;
  }
  LODWORD(v101) = 0;
  uint64_t ODSOperands = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 0);
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = ODSOperands + 24;
    do
    {
      uint64_t v24 = *(void *)this;
      unint64_t v25 = *(void *)(*(void *)v23 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v26 = v101;
      LODWORD(v101) = v101 + 1;
      if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps10(v24, v25, (void **)"operand", (void **)7, v26))return 0; {
      v23 += 32;
      }
    }
    while (--v22);
  }
  uint64_t v27 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 1);
  uint64_t v29 = v28;
  if (v28 >= 2) {
    goto LABEL_70;
  }
  if (v28)
  {
    uint64_t v30 = *(void *)(v27 + 24);
    uint64_t v31 = *(void *)this;
    __int16 v32 = (void **)(*(void *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v33 = v101;
    LODWORD(v101) = v101 + 1;
    if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v31, v32, (void **)"operand", 7, v33))return 0; {
  }
    }
  uint64_t v34 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 2);
  uint64_t v29 = v35;
  if (v35 < 2)
  {
    if (v35)
    {
      uint64_t v36 = *(void *)(v34 + 24);
      uint64_t v37 = *(void *)this;
      unint64_t v38 = (void **)(*(void *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v39 = v101;
      LODWORD(v101) = v101 + 1;
      if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(v37, v38, (void **)"operand", 7, v39))return 0; {
    }
      }
    uint64_t v40 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 3);
    uint64_t v29 = v41;
    if (v41 < 2)
    {
      if (v41)
      {
        uint64_t v42 = *(void *)(v40 + 24);
        uint64_t v43 = *(void *)this;
        unint64_t v44 = (void **)(*(void *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8);
        unsigned int v45 = v101;
        LODWORD(v101) = v101 + 1;
        if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v43, v44, (void **)"operand", 7, v45))return 0; {
      }
        }
      uint64_t v46 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 4);
      if (v47)
      {
        uint64_t v48 = v47;
        uint64_t v49 = v46 + 24;
        do
        {
          uint64_t v50 = *(void *)this;
          unint64_t v51 = *(void *)(*(void *)v49 + 8) & 0xFFFFFFFFFFFFFFF8;
          unsigned int v52 = v101;
          LODWORD(v101) = v101 + 1;
          if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps10(v50, v51, (void **)"operand", (void **)7, v52))return 0; {
          v49 += 32;
          }
        }
        while (--v48);
      }
      uint64_t v53 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 5);
      uint64_t v29 = v54;
      if (v54 >= 2) {
        goto LABEL_70;
      }
      if (v54)
      {
        uint64_t v55 = *(void *)(v53 + 24);
        uint64_t v56 = *(void *)this;
        char v57 = (void **)(*(void *)(v55 + 8) & 0xFFFFFFFFFFFFFFF8);
        unsigned int v58 = v101;
        LODWORD(v101) = v101 + 1;
        if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps13(v56, v57, (void **)"operand", 7, v58))return 0; {
      }
        }
      uint64_t v59 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 6);
      uint64_t v29 = v60;
      if (v60 < 2)
      {
        if (v60)
        {
          uint64_t v61 = *(void *)(v59 + 24);
          uint64_t v62 = *(void *)this;
          uint64_t v63 = (void **)(*(void *)(v61 + 8) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v64 = v101;
          LODWORD(v101) = v101 + 1;
          if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(v62, v63, (void **)"operand", 7, v64))return 0; {
        }
          }
        uint64_t v65 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 7);
        uint64_t v29 = v66;
        if (v66 < 2)
        {
          if (v66)
          {
            uint64_t v67 = *(void *)(v65 + 24);
            uint64_t v68 = *(void *)this;
            uint64_t v69 = (void **)(*(void *)(v67 + 8) & 0xFFFFFFFFFFFFFFF8);
            unsigned int v70 = v101;
            LODWORD(v101) = v101 + 1;
            if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v68, v69, (void **)"operand", 7, v70))return 0; {
          }
            }
          uint64_t v71 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 8);
          uint64_t v29 = v72;
          if (v72 < 2)
          {
            if (v72)
            {
              uint64_t v73 = *(void *)(v71 + 24);
              uint64_t v74 = *(void *)this;
              unint64_t v75 = *(void *)(v73 + 8) & 0xFFFFFFFFFFFFFFF8;
              unsigned int v76 = v101;
              LODWORD(v101) = v101 + 1;
              if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(v74, v75, (void **)"operand", (void **)7, v76))return 0; {
            }
              }
            uint64_t v77 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 9);
            uint64_t v29 = v78;
            if (v78 < 2)
            {
              if (!v78
                || (uint64_t v79 = *(void *)(v77 + 24),
                    uint64_t v80 = *(void *)this,
                    uint64_t v81 = (void **)(*(void *)(v79 + 8) & 0xFFFFFFFFFFFFFFF8),
                    unsigned int v82 = v101,
                    LODWORD(v101) = v101 + 1,
                    mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v80, v81, (void **)"operand", 7, v82)))
              {
                uint64_t v83 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 10);
                uint64_t v29 = v84;
                if (v84 >= 2) {
                  goto LABEL_70;
                }
                if (!v84
                  || (uint64_t v94 = *(void *)(v83 + 24),
                      uint64_t v95 = *(void *)this,
                      unint64_t v96 = (void **)(*(void *)(v94 + 8) & 0xFFFFFFFFFFFFFFF8),
                      unsigned int v97 = v101,
                      LODWORD(v101) = v101 + 1,
                      mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(v95, v96, (void **)"operand", 7, v97)))
                {
                  if (*(_DWORD *)(*(void *)this + 36)) {
                    uint64_t v98 = *(void *)this - 16;
                  }
                  else {
                    uint64_t v98 = 0;
                  }
                  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v98, 0);
                  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
                }
              }
              return 0;
            }
          }
        }
      }
    }
  }
LABEL_70:
  v102[0] = (void **)"operand group starting at #";
  __int16 v103 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v102, (uint64_t)&AttrDictionary);
  char v85 = (void *)mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&AttrDictionary, (unsigned int *)&v101);
  uint64_t v86 = (uint64_t)v85;
  if (*v85) {
    mlir::Diagnostic::operator<<((uint64_t)(v85 + 1), " requires 0 or 1 element, but found ");
  }
  v104[0] = v29;
  uint64_t v87 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v86, v104);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v87);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&AttrDictionary);
  return v12;
}

uint64_t mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps7(uint64_t a1, void *a2, void **a3, void **a4)
{
  v12[23] = *MEMORY[0x263EF8340];
  if (!a2 || mlir::BoolAttr::classof(a2)) {
    return 1;
  }
  __int16 v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (v11)
    {
      __int16 v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (v11) {
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: BOOL attribute");
      }
    }
  }
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps10(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  v41[19] = *MEMORY[0x263EF8340];
  uint64_t v33 = a2;
  uint64_t v9 = *(void *)a2;
  __int16 v10 = *(void **)(*(void *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_30;
  }
  unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v14 = *(unsigned int *)(v9 + 16);
  if (!v14) {
    goto LABEL_14;
  }
  uint64_t v15 = *(void **)(v9 + 8);
  uint64_t v16 = &v15[2 * v14];
  do
  {
    unint64_t v17 = v14 >> 1;
    uint64_t v18 = &v15[2 * (v14 >> 1)];
    unint64_t v20 = *v18;
    uint64_t v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13) {
      uint64_t v15 = v19;
    }
    else {
      unint64_t v14 = v17;
    }
  }
  while (v14);
  if (v15 != v16 && *v15 == v13) {
    uint64_t v21 = v15[1];
  }
  else {
LABEL_14:
  }
    uint64_t v21 = 0;
  uint64_t v36 = a2;
  v37[0] = v21;
  v31[0] = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isF16((mlir::Type *)v31)
    || mlir::Type::isF32((mlir::Type *)v31)
    || mlir::Type::isBF16((mlir::Type *)v31)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 32)
    || *((_UNKNOWN **)*v31[0] + 17) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_30:
  __int16 v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      int v34 = 5;
      uint64_t v35 = a5;
      uint64_t v22 = &v34;
      unint64_t v23 = v38;
      if (v39 >= v40)
      {
        unint64_t v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          uint64_t v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          unint64_t v23 = v38;
          uint64_t v22 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          uint64_t v22 = &v34;
          unint64_t v23 = v38;
        }
      }
      unint64_t v24 = v23 + 24 * v39;
      long long v25 = *(_OWORD *)v22;
      *(void *)(v24 + 16) = *((void *)v22 + 2);
      *(_OWORD *)unint64_t v24 = v25;
      ++v39;
      if (v36) {
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of floating point or quantized values, but got ");
      }
    }
  }
  uint64_t v26 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v26);
  if (v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v27;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(uint64_t a1, void **a2, void **a3, uint64_t a4, unsigned int a5)
{
  v98[19] = *MEMORY[0x263EF8340];
  uint64_t v89 = a2;
  uint64_t v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    goto LABEL_65;
  }
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *((unsigned int *)v9 + 4);
  if (!v12) {
    goto LABEL_10;
  }
  unint64_t v13 = (void *)v9[1];
  unint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    unint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      unint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;
  unint64_t v93 = a2;
  v94[0] = v19;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v93)) {
    goto LABEL_65;
  }
  unint64_t v20 = *a2;
  unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v22 = *((unsigned int *)v20 + 4);
  if (!v22) {
    goto LABEL_20;
  }
  unint64_t v23 = (void *)v20[1];
  unint64_t v24 = &v23[2 * v22];
  do
  {
    unint64_t v25 = v22 >> 1;
    uint64_t v26 = &v23[2 * (v22 >> 1)];
    unint64_t v28 = *v26;
    uint64_t v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21) {
      unint64_t v23 = v27;
    }
    else {
      unint64_t v22 = v25;
    }
  }
  while (v22);
  if (v23 != v24 && *v23 == v21) {
    uint64_t v29 = v23[1];
  }
  else {
LABEL_20:
  }
    uint64_t v29 = 0;
  uint64_t v83 = a2;
  uint64_t v84 = v29;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v83);
  if (v30)
  {
    uint64_t v31 = *a2;
    unint64_t v32 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v33 = *((unsigned int *)v31 + 4);
    if (!v33) {
      goto LABEL_30;
    }
    int v34 = (void *)v31[1];
    uint64_t v35 = &v34[2 * v33];
    do
    {
      unint64_t v36 = v33 >> 1;
      uint64_t v37 = &v34[2 * (v33 >> 1)];
      unint64_t v39 = *v37;
      unint64_t v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32) {
        int v34 = v38;
      }
      else {
        unint64_t v33 = v36;
      }
    }
    while (v33);
    if (v34 != v35 && *v34 == v32) {
      uint64_t v40 = v34[1];
    }
    else {
LABEL_30:
    }
      uint64_t v40 = 0;
    unint64_t v91 = a2;
    uint64_t v92 = v40;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
    if (v41 != 1)
    {
      uint64_t v42 = *a2;
      unint64_t v43 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v44 = *((unsigned int *)v42 + 4);
      if (!v44) {
        goto LABEL_40;
      }
      unsigned int v45 = (void *)v42[1];
      uint64_t v46 = &v45[2 * v44];
      do
      {
        unint64_t v47 = v44 >> 1;
        uint64_t v48 = &v45[2 * (v44 >> 1)];
        unint64_t v50 = *v48;
        uint64_t v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43) {
          unsigned int v45 = v49;
        }
        else {
          unint64_t v44 = v47;
        }
      }
      while (v44);
      if (v45 != v46 && *v45 == v43) {
        uint64_t v51 = v45[1];
      }
      else {
LABEL_40:
      }
        uint64_t v51 = 0;
      v88[0] = a2;
      v88[1] = v51;
      mlir::ShapedType::getShape((mlir::ShapedType *)v88);
      if (v52 != 2)
      {
        uint64_t v53 = *a2;
        unint64_t v54 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v55 = *((unsigned int *)v53 + 4);
        if (!v55) {
          goto LABEL_50;
        }
        uint64_t v56 = (void *)v53[1];
        char v57 = &v56[2 * v55];
        do
        {
          unint64_t v58 = v55 >> 1;
          uint64_t v59 = &v56[2 * (v55 >> 1)];
          unint64_t v61 = *v59;
          unint64_t v60 = v59 + 2;
          v55 += ~(v55 >> 1);
          if (v61 < v54) {
            uint64_t v56 = v60;
          }
          else {
            unint64_t v55 = v58;
          }
        }
        while (v55);
        if (v56 != v57 && *v56 == v54) {
          uint64_t v62 = v56[1];
        }
        else {
LABEL_50:
        }
          uint64_t v62 = 0;
        v87[0] = a2;
        v87[1] = v62;
        mlir::ShapedType::getShape((mlir::ShapedType *)v87);
        if (v63 != 3) {
          goto LABEL_65;
        }
      }
    }
  }
  unsigned int v64 = *a2;
  unint64_t v65 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v66 = *((unsigned int *)v64 + 4);
  if (!v66) {
    goto LABEL_60;
  }
  uint64_t v67 = (void *)v64[1];
  uint64_t v68 = &v67[2 * v66];
  do
  {
    unint64_t v69 = v66 >> 1;
    unsigned int v70 = &v67[2 * (v66 >> 1)];
    unint64_t v72 = *v70;
    uint64_t v71 = v70 + 2;
    v66 += ~(v66 >> 1);
    if (v72 < v65) {
      uint64_t v67 = v71;
    }
    else {
      unint64_t v66 = v69;
    }
  }
  while (v66);
  if (v67 != v68 && *v67 == v65) {
    uint64_t v73 = v67[1];
  }
  else {
LABEL_60:
  }
    uint64_t v73 = 0;
  v86[0] = a2;
  v86[1] = v73;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    return 1;
  }
LABEL_65:
  __int16 v85 = 261;
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  mlir::Operation::emitOpError(a1, &v83, (uint64_t)&v93);
  if (v93)
  {
    mlir::Diagnostic::operator<<((uint64_t)v94, " #");
    if (v93)
    {
      LODWORD(v91) = 5;
      uint64_t v92 = a5;
      unint64_t v75 = (char *)&v91;
      unint64_t v76 = v95;
      if (v96 >= v97)
      {
        unint64_t v81 = v96 + 1;
        if (v95 <= (unint64_t)&v91 && v95 + 24 * v96 > (unint64_t)&v91)
        {
          unsigned int v82 = (char *)&v91 - v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          unint64_t v76 = v95;
          unint64_t v75 = &v82[v95];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          unint64_t v75 = (char *)&v91;
          unint64_t v76 = v95;
        }
      }
      unint64_t v77 = v76 + 24 * v96;
      long long v78 = *(_OWORD *)v75;
      *(void *)(v77 + 16) = *((void *)v75 + 2);
      *(_OWORD *)unint64_t v77 = v78;
      ++v96;
      if (v93) {
        mlir::Diagnostic::operator<<((uint64_t)v94, " must be 0D/1D/2D/3D tensor of floating point values, but got ");
      }
    }
  }
  uint64_t v79 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v93, (uint64_t *)&v89);
  uint64_t v74 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v79);
  if (v93) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
  return v74;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(uint64_t a1, void **a2, void **a3, uint64_t a4, unsigned int a5)
{
  v98[19] = *MEMORY[0x263EF8340];
  uint64_t v89 = a2;
  uint64_t v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    goto LABEL_73;
  }
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *((unsigned int *)v9 + 4);
  if (!v12) {
    goto LABEL_10;
  }
  unint64_t v13 = (void *)v9[1];
  unint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    unint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      unint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;
  unint64_t v93 = a2;
  v94[0] = v19;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v93)) {
    goto LABEL_73;
  }
  unint64_t v20 = *a2;
  unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v22 = *((unsigned int *)v20 + 4);
  if (!v22) {
    goto LABEL_20;
  }
  unint64_t v23 = (void *)v20[1];
  unint64_t v24 = &v23[2 * v22];
  do
  {
    unint64_t v25 = v22 >> 1;
    uint64_t v26 = &v23[2 * (v22 >> 1)];
    unint64_t v28 = *v26;
    uint64_t v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21) {
      unint64_t v23 = v27;
    }
    else {
      unint64_t v22 = v25;
    }
  }
  while (v22);
  if (v23 != v24 && *v23 == v21) {
    uint64_t v29 = v23[1];
  }
  else {
LABEL_20:
  }
    uint64_t v29 = 0;
  uint64_t v83 = a2;
  uint64_t v84 = v29;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v83);
  if (v30)
  {
    uint64_t v31 = *a2;
    unint64_t v32 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v33 = *((unsigned int *)v31 + 4);
    if (!v33) {
      goto LABEL_30;
    }
    int v34 = (void *)v31[1];
    uint64_t v35 = &v34[2 * v33];
    do
    {
      unint64_t v36 = v33 >> 1;
      uint64_t v37 = &v34[2 * (v33 >> 1)];
      unint64_t v39 = *v37;
      unint64_t v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32) {
        int v34 = v38;
      }
      else {
        unint64_t v33 = v36;
      }
    }
    while (v33);
    if (v34 != v35 && *v34 == v32) {
      uint64_t v40 = v34[1];
    }
    else {
LABEL_30:
    }
      uint64_t v40 = 0;
    unint64_t v91 = a2;
    uint64_t v92 = v40;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
    if (v41 != 1)
    {
      uint64_t v42 = *a2;
      unint64_t v43 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v44 = *((unsigned int *)v42 + 4);
      if (!v44) {
        goto LABEL_40;
      }
      unsigned int v45 = (void *)v42[1];
      uint64_t v46 = &v45[2 * v44];
      do
      {
        unint64_t v47 = v44 >> 1;
        uint64_t v48 = &v45[2 * (v44 >> 1)];
        unint64_t v50 = *v48;
        uint64_t v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43) {
          unsigned int v45 = v49;
        }
        else {
          unint64_t v44 = v47;
        }
      }
      while (v44);
      if (v45 != v46 && *v45 == v43) {
        uint64_t v51 = v45[1];
      }
      else {
LABEL_40:
      }
        uint64_t v51 = 0;
      v88[0] = a2;
      v88[1] = v51;
      mlir::ShapedType::getShape((mlir::ShapedType *)v88);
      if (v52 != 2)
      {
        uint64_t v53 = *a2;
        unint64_t v54 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v55 = *((unsigned int *)v53 + 4);
        if (!v55) {
          goto LABEL_50;
        }
        uint64_t v56 = (void *)v53[1];
        char v57 = &v56[2 * v55];
        do
        {
          unint64_t v58 = v55 >> 1;
          uint64_t v59 = &v56[2 * (v55 >> 1)];
          unint64_t v61 = *v59;
          unint64_t v60 = v59 + 2;
          v55 += ~(v55 >> 1);
          if (v61 < v54) {
            uint64_t v56 = v60;
          }
          else {
            unint64_t v55 = v58;
          }
        }
        while (v55);
        if (v56 != v57 && *v56 == v54) {
          uint64_t v62 = v56[1];
        }
        else {
LABEL_50:
        }
          uint64_t v62 = 0;
        v87[0] = a2;
        v87[1] = v62;
        mlir::ShapedType::getShape((mlir::ShapedType *)v87);
        if (v63 != 3) {
          goto LABEL_73;
        }
      }
    }
  }
  unsigned int v64 = *a2;
  unint64_t v65 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v66 = *((unsigned int *)v64 + 4);
  if (!v66) {
    goto LABEL_60;
  }
  uint64_t v67 = (void *)v64[1];
  uint64_t v68 = &v67[2 * v66];
  do
  {
    unint64_t v69 = v66 >> 1;
    unsigned int v70 = &v67[2 * (v66 >> 1)];
    unint64_t v72 = *v70;
    uint64_t v71 = v70 + 2;
    v66 += ~(v66 >> 1);
    if (v72 < v65) {
      uint64_t v67 = v71;
    }
    else {
      unint64_t v66 = v69;
    }
  }
  while (v66);
  if (v67 != v68 && *v67 == v65) {
    uint64_t v73 = v67[1];
  }
  else {
LABEL_60:
  }
    uint64_t v73 = 0;
  v86[0] = a2;
  v86[1] = v73;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
    || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_73:
  __int16 v85 = 261;
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  mlir::Operation::emitOpError(a1, &v83, (uint64_t)&v93);
  if (v93)
  {
    mlir::Diagnostic::operator<<((uint64_t)v94, " #");
    if (v93)
    {
      LODWORD(v91) = 5;
      uint64_t v92 = a5;
      uint64_t v74 = (char *)&v91;
      unint64_t v75 = v95;
      if (v96 >= v97)
      {
        unint64_t v81 = v96 + 1;
        if (v95 <= (unint64_t)&v91 && v95 + 24 * v96 > (unint64_t)&v91)
        {
          unsigned int v82 = (char *)&v91 - v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          unint64_t v75 = v95;
          uint64_t v74 = &v82[v95];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          uint64_t v74 = (char *)&v91;
          unint64_t v75 = v95;
        }
      }
      unint64_t v76 = v75 + 24 * v96;
      long long v77 = *(_OWORD *)v74;
      *(void *)(v76 + 16) = *((void *)v74 + 2);
      *(_OWORD *)unint64_t v76 = v77;
      ++v96;
      if (v93) {
        mlir::Diagnostic::operator<<((uint64_t)v94, " must be 0D/1D/2D/3D tensor of quantized values, but got ");
      }
    }
  }
  uint64_t v78 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v93, (uint64_t *)&v89);
  uint64_t v79 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v78);
  if (v93) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
  return v79;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps13(uint64_t a1, void **a2, void **a3, uint64_t a4, unsigned int a5)
{
  v98[19] = *MEMORY[0x263EF8340];
  uint64_t v89 = a2;
  uint64_t v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    goto LABEL_76;
  }
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *((unsigned int *)v9 + 4);
  if (!v12) {
    goto LABEL_10;
  }
  unint64_t v13 = (void *)v9[1];
  unint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    unint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      unint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;
  unint64_t v93 = a2;
  v94[0] = v19;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v93)) {
    goto LABEL_76;
  }
  unint64_t v20 = *a2;
  unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v22 = *((unsigned int *)v20 + 4);
  if (!v22) {
    goto LABEL_20;
  }
  unint64_t v23 = (void *)v20[1];
  unint64_t v24 = &v23[2 * v22];
  do
  {
    unint64_t v25 = v22 >> 1;
    uint64_t v26 = &v23[2 * (v22 >> 1)];
    unint64_t v28 = *v26;
    uint64_t v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21) {
      unint64_t v23 = v27;
    }
    else {
      unint64_t v22 = v25;
    }
  }
  while (v22);
  if (v23 != v24 && *v23 == v21) {
    uint64_t v29 = v23[1];
  }
  else {
LABEL_20:
  }
    uint64_t v29 = 0;
  uint64_t v83 = a2;
  uint64_t v84 = v29;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v83);
  if (v30)
  {
    uint64_t v31 = *a2;
    unint64_t v32 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v33 = *((unsigned int *)v31 + 4);
    if (!v33) {
      goto LABEL_30;
    }
    int v34 = (void *)v31[1];
    uint64_t v35 = &v34[2 * v33];
    do
    {
      unint64_t v36 = v33 >> 1;
      uint64_t v37 = &v34[2 * (v33 >> 1)];
      unint64_t v39 = *v37;
      unint64_t v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32) {
        int v34 = v38;
      }
      else {
        unint64_t v33 = v36;
      }
    }
    while (v33);
    if (v34 != v35 && *v34 == v32) {
      uint64_t v40 = v34[1];
    }
    else {
LABEL_30:
    }
      uint64_t v40 = 0;
    unint64_t v91 = a2;
    uint64_t v92 = v40;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
    if (v41 != 1)
    {
      uint64_t v42 = *a2;
      unint64_t v43 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v44 = *((unsigned int *)v42 + 4);
      if (!v44) {
        goto LABEL_40;
      }
      unsigned int v45 = (void *)v42[1];
      uint64_t v46 = &v45[2 * v44];
      do
      {
        unint64_t v47 = v44 >> 1;
        uint64_t v48 = &v45[2 * (v44 >> 1)];
        unint64_t v50 = *v48;
        uint64_t v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43) {
          unsigned int v45 = v49;
        }
        else {
          unint64_t v44 = v47;
        }
      }
      while (v44);
      if (v45 != v46 && *v45 == v43) {
        uint64_t v51 = v45[1];
      }
      else {
LABEL_40:
      }
        uint64_t v51 = 0;
      v88[0] = a2;
      v88[1] = v51;
      mlir::ShapedType::getShape((mlir::ShapedType *)v88);
      if (v52 != 2)
      {
        uint64_t v53 = *a2;
        unint64_t v54 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v55 = *((unsigned int *)v53 + 4);
        if (!v55) {
          goto LABEL_50;
        }
        uint64_t v56 = (void *)v53[1];
        char v57 = &v56[2 * v55];
        do
        {
          unint64_t v58 = v55 >> 1;
          uint64_t v59 = &v56[2 * (v55 >> 1)];
          unint64_t v61 = *v59;
          unint64_t v60 = v59 + 2;
          v55 += ~(v55 >> 1);
          if (v61 < v54) {
            uint64_t v56 = v60;
          }
          else {
            unint64_t v55 = v58;
          }
        }
        while (v55);
        if (v56 != v57 && *v56 == v54) {
          uint64_t v62 = v56[1];
        }
        else {
LABEL_50:
        }
          uint64_t v62 = 0;
        v87[0] = a2;
        v87[1] = v62;
        mlir::ShapedType::getShape((mlir::ShapedType *)v87);
        if (v63 != 3) {
          goto LABEL_76;
        }
      }
    }
  }
  unsigned int v64 = *a2;
  unint64_t v65 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v66 = *((unsigned int *)v64 + 4);
  if (!v66) {
    goto LABEL_60;
  }
  uint64_t v67 = (void *)v64[1];
  uint64_t v68 = &v67[2 * v66];
  do
  {
    unint64_t v69 = v66 >> 1;
    unsigned int v70 = &v67[2 * (v66 >> 1)];
    unint64_t v72 = *v70;
    uint64_t v71 = v70 + 2;
    v66 += ~(v66 >> 1);
    if (v72 < v65) {
      uint64_t v67 = v71;
    }
    else {
      unint64_t v66 = v69;
    }
  }
  while (v66);
  if (v67 != v68 && *v67 == v65) {
    uint64_t v73 = v67[1];
  }
  else {
LABEL_60:
  }
    uint64_t v73 = 0;
  v86[0] = a2;
  v86[1] = v73;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
    || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_76:
  __int16 v85 = 261;
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  mlir::Operation::emitOpError(a1, &v83, (uint64_t)&v93);
  if (v93)
  {
    mlir::Diagnostic::operator<<((uint64_t)v94, " #");
    if (v93)
    {
      LODWORD(v91) = 5;
      uint64_t v92 = a5;
      uint64_t v74 = (char *)&v91;
      unint64_t v75 = v95;
      if (v96 >= v97)
      {
        unint64_t v81 = v96 + 1;
        if (v95 <= (unint64_t)&v91 && v95 + 24 * v96 > (unint64_t)&v91)
        {
          unsigned int v82 = (char *)&v91 - v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          unint64_t v75 = v95;
          uint64_t v74 = &v82[v95];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          uint64_t v74 = (char *)&v91;
          unint64_t v75 = v95;
        }
      }
      unint64_t v76 = v75 + 24 * v96;
      long long v77 = *(_OWORD *)v74;
      *(void *)(v76 + 16) = *((void *)v74 + 2);
      *(_OWORD *)unint64_t v76 = v77;
      ++v96;
      if (v93) {
        mlir::Diagnostic::operator<<((uint64_t)v94, " must be 0D/1D/2D/3D tensor of floating point or quantized values, but got ");
      }
    }
  }
  uint64_t v78 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v93, (uint64_t *)&v89);
  uint64_t v79 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v78);
  if (v93) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
  return v79;
}

uint64_t mlir::mpsx::RMSNormOp::verifyInvariantsImpl(mlir::mpsx::RMSNormOp *this)
{
  v136[19] = *MEMORY[0x263EF8340];
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u))
  {
    return 0;
  }
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v124 = v3;
  uint64_t v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *((unsigned int *)v4 + 4);
    if (!v6) {
      goto LABEL_12;
    }
    uint64_t v7 = (void *)v4[1];
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      __int16 v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      unint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        uint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_12:
    }
      uint64_t v13 = 0;
    uint64_t v131 = v3;
    v132[0] = v13;
    int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v131);
    uint64_t v4 = *v3;
    if (ArgOperands)
    {
      unint64_t v15 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v16 = *((unsigned int *)v4 + 4);
      if (!v16) {
        goto LABEL_22;
      }
      unint64_t v17 = (void *)v4[1];
      unint64_t v18 = &v17[2 * v16];
      do
      {
        unint64_t v19 = v16 >> 1;
        unint64_t v20 = &v17[2 * (v16 >> 1)];
        unint64_t v22 = *v20;
        unint64_t v21 = v20 + 2;
        v16 += ~(v16 >> 1);
        if (v22 < v15) {
          unint64_t v17 = v21;
        }
        else {
          unint64_t v16 = v19;
        }
      }
      while (v16);
      if (v17 != v18 && *v17 == v15) {
        uint64_t v23 = v17[1];
      }
      else {
LABEL_22:
      }
        uint64_t v23 = 0;
      uint64_t v126 = v3;
      uint64_t v127 = v23;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v126);
      uint64_t v4 = *v3;
      if (!v24)
      {
        unint64_t v69 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v70 = *((unsigned int *)v4 + 4);
        if (!v70) {
          goto LABEL_87;
        }
        uint64_t v71 = (void *)v4[1];
        unint64_t v72 = &v71[2 * v70];
        do
        {
          unint64_t v73 = v70 >> 1;
          uint64_t v74 = &v71[2 * (v70 >> 1)];
          unint64_t v76 = *v74;
          unint64_t v75 = v74 + 2;
          v70 += ~(v70 >> 1);
          if (v76 < v69) {
            uint64_t v71 = v75;
          }
          else {
            unint64_t v70 = v73;
          }
        }
        while (v70);
        if (v71 != v72 && *v71 == v69) {
          uint64_t v77 = v71[1];
        }
        else {
LABEL_87:
        }
          uint64_t v77 = 0;
        uint64_t Value = (uint64_t)v3;
        uint64_t v130 = v77;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
        if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
        {
          goto LABEL_90;
        }
        uint64_t v4 = *v3;
      }
    }
  }
  if ((_UNKNOWN *)v4[17] == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v25 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v26 = *((unsigned int *)v4 + 4);
    if (!v26) {
      goto LABEL_33;
    }
    uint64_t v27 = (void *)v4[1];
    unint64_t v28 = &v27[2 * v26];
    do
    {
      unint64_t v29 = v26 >> 1;
      uint64_t v30 = &v27[2 * (v26 >> 1)];
      unint64_t v32 = *v30;
      uint64_t v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25) {
        uint64_t v27 = v31;
      }
      else {
        unint64_t v26 = v29;
      }
    }
    while (v26);
    if (v27 != v28 && *v27 == v25) {
      uint64_t v33 = v27[1];
    }
    else {
LABEL_33:
    }
      uint64_t v33 = 0;
    v123[0] = v3;
    v123[1] = v33;
    int v34 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v123);
    uint64_t v4 = *v3;
    if (v34)
    {
      unint64_t v35 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v36 = *((unsigned int *)v4 + 4);
      if (!v36) {
        goto LABEL_43;
      }
      uint64_t v37 = (void *)v4[1];
      unint64_t v38 = &v37[2 * v36];
      do
      {
        unint64_t v39 = v36 >> 1;
        uint64_t v40 = &v37[2 * (v36 >> 1)];
        unint64_t v42 = *v40;
        uint64_t v41 = v40 + 2;
        v36 += ~(v36 >> 1);
        if (v42 < v35) {
          uint64_t v37 = v41;
        }
        else {
          unint64_t v36 = v39;
        }
      }
      while (v36);
      if (v37 != v38 && *v37 == v35) {
        uint64_t v43 = v37[1];
      }
      else {
LABEL_43:
      }
        uint64_t v43 = 0;
      v122[0] = v3;
      v122[1] = v43;
      mlir::ShapedType::getShape((mlir::ShapedType *)v122);
      uint64_t v4 = *v3;
      if (v44 == 1)
      {
        unint64_t v45 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v46 = *((unsigned int *)v4 + 4);
        if (!v46) {
          goto LABEL_53;
        }
        unint64_t v47 = (void *)v4[1];
        uint64_t v48 = &v47[2 * v46];
        do
        {
          unint64_t v49 = v46 >> 1;
          unint64_t v50 = &v47[2 * (v46 >> 1)];
          unint64_t v52 = *v50;
          uint64_t v51 = v50 + 2;
          v46 += ~(v46 >> 1);
          if (v52 < v45) {
            unint64_t v47 = v51;
          }
          else {
            unint64_t v46 = v49;
          }
        }
        while (v46);
        if (v47 != v48 && *v47 == v45) {
          uint64_t v53 = v47[1];
        }
        else {
LABEL_53:
        }
          uint64_t v53 = 0;
        v121[0] = v3;
        v121[1] = v53;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v121);
        if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
        {
          goto LABEL_90;
        }
        uint64_t v4 = *v3;
      }
    }
  }
  if ((_UNKNOWN *)v4[17] != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    goto LABEL_175;
  }
  unint64_t v60 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v61 = *((unsigned int *)v4 + 4);
  if (!v61) {
    goto LABEL_75;
  }
  uint64_t v62 = (void *)v4[1];
  uint64_t v63 = &v62[2 * v61];
  do
  {
    unint64_t v64 = v61 >> 1;
    unint64_t v65 = &v62[2 * (v61 >> 1)];
    unint64_t v67 = *v65;
    unint64_t v66 = v65 + 2;
    v61 += ~(v61 >> 1);
    if (v67 < v60) {
      uint64_t v62 = v66;
    }
    else {
      unint64_t v61 = v64;
    }
  }
  while (v61);
  if (v62 != v63 && *v62 == v60) {
    uint64_t v68 = v62[1];
  }
  else {
LABEL_75:
  }
    uint64_t v68 = 0;
  v120[0] = (uint64_t)v3;
  v120[1] = v68;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v120);
  if (!mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
  {
LABEL_175:
    __int16 v128 = 261;
    uint64_t v126 = (void **)"operand";
    uint64_t v127 = 7;
    mlir::Operation::emitOpError(v2, &v126, (uint64_t)&v131);
    if (v131)
    {
      mlir::Diagnostic::operator<<((uint64_t)v132, " #");
      if (v131)
      {
        LODWORD(Value) = 5;
        uint64_t v130 = 2;
        unint64_t v54 = &Value;
        unint64_t v55 = v133;
        if (v134 >= v135)
        {
          unint64_t v116 = v134 + 1;
          if (v133 <= (unint64_t)&Value && v133 + 24 * v134 > (unint64_t)&Value)
          {
            unint64_t v118 = (char *)&Value - v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v116, 24);
            unint64_t v55 = v133;
            unint64_t v54 = (uint64_t *)&v118[v133];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v116, 24);
            unint64_t v54 = &Value;
            unint64_t v55 = v133;
          }
        }
        unint64_t v56 = v55 + 24 * v134;
        long long v57 = *(_OWORD *)v54;
        *(void *)(v56 + 16) = v54[2];
        *(_OWORD *)unint64_t v56 = v57;
        ++v134;
        if (v131) {
          mlir::Diagnostic::operator<<((uint64_t)v132, " must be 0D tensor of mps index type values or 1D tensor of mps index type values or unranked tensor of mps index type values, but got ");
        }
      }
    }
    uint64_t v58 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v131, (uint64_t *)&v124);
    char v59 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v58);
    if (v131) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v132);
    if (!v59) {
      return 0;
    }
  }
LABEL_90:
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v78 = *(void *)this - 16;
  }
  else {
    uint64_t v78 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v78, 0);
  uint64_t v80 = *(void *)this;
  unint64_t v81 = (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  v120[0] = (uint64_t)v81;
  unsigned int v82 = *v81;
  uint64_t v83 = (void *)*((void *)*v81 + 17);
  if (v83 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v83 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
LABEL_121:
    if (v83 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v83 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      unint64_t v95 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v96 = *((unsigned int *)v82 + 4);
      if (!v96) {
        goto LABEL_134;
      }
      unsigned int v97 = (void *)v82[1];
      uint64_t v98 = &v97[2 * v96];
      do
      {
        unint64_t v99 = v96 >> 1;
        unint64_t v100 = &v97[2 * (v96 >> 1)];
        unint64_t v102 = *v100;
        uint64_t v101 = v100 + 2;
        v96 += ~(v96 >> 1);
        if (v102 < v95) {
          unsigned int v97 = v101;
        }
        else {
          unint64_t v96 = v99;
        }
      }
      while (v96);
      if (v97 != v98 && *v97 == v95) {
        uint64_t v103 = v97[1];
      }
      else {
LABEL_134:
      }
        uint64_t v103 = 0;
      uint64_t v126 = v81;
      uint64_t v127 = v103;
      uint64_t v104 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v126);
      if (*(_UNKNOWN **)(*(void *)v104 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v115 = v104;
        v123[0] = v104;
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v123);
        if (mlir::Type::isF16((mlir::Type *)&Value)) {
          goto LABEL_144;
        }
        v121[0] = v115;
        v122[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v121);
        if (mlir::Type::isF32((mlir::Type *)v122)) {
          goto LABEL_144;
        }
      }
    }
    __int16 v128 = 261;
    uint64_t v126 = (void **)"result";
    uint64_t v127 = 6;
    mlir::Operation::emitOpError(v80, &v126, (uint64_t)&v131);
    if (v131)
    {
      mlir::Diagnostic::operator<<((uint64_t)v132, " #");
      if (v131)
      {
        LODWORD(Value) = 5;
        uint64_t v130 = 0;
        p_uint64_t Value = &Value;
        unint64_t v106 = v133;
        if (v134 >= v135)
        {
          unint64_t v117 = v134 + 1;
          if (v133 <= (unint64_t)&Value && v133 + 24 * v134 > (unint64_t)&Value)
          {
            unint64_t v119 = (char *)&Value - v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v117, 24);
            unint64_t v106 = v133;
            p_uint64_t Value = (uint64_t *)&v119[v133];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v117, 24);
            p_uint64_t Value = &Value;
            unint64_t v106 = v133;
          }
        }
        unint64_t v107 = v106 + 24 * v134;
        long long v108 = *(_OWORD *)p_Value;
        *(void *)(v107 + 16) = p_Value[2];
        *(_OWORD *)unint64_t v107 = v108;
        ++v134;
        if (v131) {
          mlir::Diagnostic::operator<<((uint64_t)v132, " must be tensor of mps native type values or tensor of complex values, but got ");
        }
      }
    }
    uint64_t v109 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v131, v120);
    char v110 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v109);
    if (v131) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v132);
    if (v110) {
      goto LABEL_144;
    }
    return 0;
  }
  unint64_t v85 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v86 = *((unsigned int *)v82 + 4);
  if (!v86) {
    goto LABEL_106;
  }
  uint64_t v87 = (void *)v82[1];
  uint64_t v88 = &v87[2 * v86];
  do
  {
    unint64_t v89 = v86 >> 1;
    unint64_t v90 = &v87[2 * (v86 >> 1)];
    unint64_t v92 = *v90;
    unint64_t v91 = v90 + 2;
    v86 += ~(v86 >> 1);
    if (v92 < v85) {
      uint64_t v87 = v91;
    }
    else {
      unint64_t v86 = v89;
    }
  }
  while (v86);
  if (v87 != v88 && *v87 == v85) {
    uint64_t v93 = v87[1];
  }
  else {
LABEL_106:
  }
    uint64_t v93 = 0;
  uint64_t v131 = v81;
  v132[0] = v93;
  uint64_t Value = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v131);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&Value, 1)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 8)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 16)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 32)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 64)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 8)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 16)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64)
    && !mlir::Type::isF16((mlir::Type *)&Value)
    && !mlir::Type::isF32((mlir::Type *)&Value)
    && !mlir::Type::isBF16((mlir::Type *)&Value)
    && *(_UNKNOWN **)(*(void *)Value + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    unsigned int v82 = *v81;
    uint64_t v83 = (void *)*((void *)*v81 + 17);
    goto LABEL_121;
  }
LABEL_144:
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(*(void *)(*(void *)(*(void *)this + 72) + 24));
  if (ElementTypeOrSelf == mlir::getElementTypeOrSelf(*(void *)(*(void *)(*(void *)this + 72) + 56)))
  {
    uint64_t v112 = mlir::getElementTypeOrSelf(*(void *)(*(void *)(*(void *)this + 72) + 56));
    if (v112 == mlir::getElementTypeOrSelf(*(void *)(*(void *)(*(void *)this + 72) + 24))) {
      return 1;
    }
  }
  uint64_t v126 = (void **)"failed to verify that all of {input, epsilon} have same element type";
  __int16 v128 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v126, (uint64_t)&v131);
  uint64_t v113 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
  if (v131) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v132);
  return v113;
}

uint64_t mlir::mpsx::RegionReturnOp::verifyInvariantsImpl(mlir::mpsx::RegionReturnOp *this)
{
  v48[19] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
  {
    uint64_t v2 = *(unsigned int *)(v1 + 68);
    if (v2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(v1 + 72);
      while (1)
      {
        uint64_t v8 = *(void *)this;
        unint64_t v9 = (void **)(*(void *)(*(void *)(v5 + 32 * v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v40 = v9;
        __int16 v10 = *v9;
        unint64_t v11 = (void *)*((void *)*v9 + 17);
        if (v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          break;
        }
        if (v11 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        {
          unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v28 = *((unsigned int *)v10 + 4);
          if (!v28) {
            goto LABEL_42;
          }
          unint64_t v29 = (void *)v10[1];
          uint64_t v30 = &v29[2 * v28];
          do
          {
            unint64_t v31 = v28 >> 1;
            unint64_t v32 = &v29[2 * (v28 >> 1)];
            unint64_t v34 = *v32;
            uint64_t v33 = v32 + 2;
            v28 += ~(v28 >> 1);
            if (v34 < v27) {
              unint64_t v29 = v33;
            }
            else {
              unint64_t v28 = v31;
            }
          }
          while (v28);
          if (v29 != v30 && *v29 == v27) {
            unint64_t v6 = (void **)v29[1];
          }
          else {
LABEL_42:
          }
            unint64_t v6 = 0;
          v38[0] = v9;
          uint64_t v7 = v38;
LABEL_6:
          v7[1] = v6;
          mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v7);
          goto LABEL_7;
        }
        if (v11 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        {
          __int16 v39 = 261;
          v38[0] = (void **)"operand";
          v38[1] = (void **)7;
          mlir::Operation::emitOpError(v8, v38, (uint64_t)&v43);
          if (v43)
          {
            mlir::Diagnostic::operator<<((uint64_t)v44, " #");
            if (v43)
            {
              int v41 = 5;
              uint64_t v42 = v4;
              unint64_t v21 = v45;
              if (v46 >= v47)
              {
                unint64_t v35 = v46 + 1;
                if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
                {
                  unint64_t v36 = (char *)&v41 - v45;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v35, 24);
                  unint64_t v21 = v45;
                  unint64_t v22 = (int *)&v36[v45];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v35, 24);
                  unint64_t v22 = &v41;
                  unint64_t v21 = v45;
                }
              }
              else
              {
                unint64_t v22 = &v41;
              }
              unint64_t v23 = v21 + 24 * v46;
              long long v24 = *(_OWORD *)v22;
              *(void *)(v23 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v23 = v24;
              ++v46;
              if (v43) {
                mlir::Diagnostic::operator<<((uint64_t)v44, " must be variadic of tensor of any type values or memref of any type values or index, but got ");
              }
            }
          }
          uint64_t v25 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v43, (uint64_t *)&v40);
          char v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
          if (v43) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
          }
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
          if (!v26) {
            return 0;
          }
        }
LABEL_7:
        if (++v4 == v2) {
          return 1;
        }
      }
      unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v14 = *((unsigned int *)v10 + 4);
      if (!v14) {
        goto LABEL_4;
      }
      unint64_t v15 = (void *)v10[1];
      unint64_t v16 = &v15[2 * v14];
      do
      {
        unint64_t v17 = v14 >> 1;
        unint64_t v18 = &v15[2 * (v14 >> 1)];
        unint64_t v20 = *v18;
        unint64_t v19 = v18 + 2;
        v14 += ~(v14 >> 1);
        if (v20 < v13) {
          unint64_t v15 = v19;
        }
        else {
          unint64_t v14 = v17;
        }
      }
      while (v14);
      if (v15 != v16 && *v15 == v13) {
        unint64_t v6 = (void **)v15[1];
      }
      else {
LABEL_4:
      }
        unint64_t v6 = 0;
      uint64_t v43 = v9;
      uint64_t v7 = &v43;
      goto LABEL_6;
    }
  }
  return 1;
}

BOOL mlir::mpsx::ScaledDotProductAttentionOp::verifyInvariantsImpl(mlir::mpsx::ScaledDotProductAttentionOp *this)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 2u)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*(void *)this,
                           *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 120) + 8) & 0xFFFFFFFFFFFFFFF8,
                           (void **)"operand",
                           (void **)7,
                           3u))
  {
    return 0;
  }
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v84 = v3;
  uint64_t v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *((unsigned int *)v4 + 4);
    if (!v6) {
      goto LABEL_14;
    }
    uint64_t v7 = (void *)v4[1];
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      __int16 v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      unint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        uint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_14:
    }
      uint64_t v13 = 0;
    uint64_t v88 = v3;
    v89[0] = v13;
    int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v88);
    uint64_t v4 = *v3;
    if (ArgOperands)
    {
      unint64_t v15 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v16 = *((unsigned int *)v4 + 4);
      if (!v16) {
        goto LABEL_24;
      }
      unint64_t v17 = (void *)v4[1];
      unint64_t v18 = &v17[2 * v16];
      do
      {
        unint64_t v19 = v16 >> 1;
        unint64_t v20 = &v17[2 * (v16 >> 1)];
        unint64_t v22 = *v20;
        unint64_t v21 = v20 + 2;
        v16 += ~(v16 >> 1);
        if (v22 < v15) {
          unint64_t v17 = v21;
        }
        else {
          unint64_t v16 = v19;
        }
      }
      while (v16);
      if (v17 != v18 && *v17 == v15) {
        uint64_t v23 = v17[1];
      }
      else {
LABEL_24:
      }
        uint64_t v23 = 0;
      uint64_t v78 = v3;
      uint64_t v79 = v23;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v78);
      uint64_t v4 = *v3;
      if (!v24)
      {
        unint64_t v65 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v66 = *((unsigned int *)v4 + 4);
        if (!v66) {
          goto LABEL_86;
        }
        unint64_t v67 = (void *)v4[1];
        uint64_t v68 = &v67[2 * v66];
        do
        {
          unint64_t v69 = v66 >> 1;
          unint64_t v70 = &v67[2 * (v66 >> 1)];
          unint64_t v72 = *v70;
          uint64_t v71 = v70 + 2;
          v66 += ~(v66 >> 1);
          if (v72 < v65) {
            unint64_t v67 = v71;
          }
          else {
            unint64_t v66 = v69;
          }
        }
        while (v66);
        if (v67 != v68 && *v67 == v65) {
          uint64_t v73 = v67[1];
        }
        else {
LABEL_86:
        }
          uint64_t v73 = 0;
        unint64_t v86 = v3;
        uint64_t v87 = v73;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v86);
        if (mlir::Type::isF16((mlir::Type *)&OperandRange)
          || mlir::Type::isF32((mlir::Type *)&OperandRange)
          || mlir::Type::isBF16((mlir::Type *)&OperandRange))
        {
          goto LABEL_90;
        }
        uint64_t v4 = *v3;
      }
    }
  }
  uint64_t v25 = (void *)v4[17];
  if (v25 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v25 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_76;
  }
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *((unsigned int *)v4 + 4);
  if (!v28) {
    goto LABEL_39;
  }
  unint64_t v29 = (void *)v4[1];
  uint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    unint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    uint64_t v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      unint64_t v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_39:
  }
    uint64_t v35 = 0;
  v83[0] = v3;
  v83[1] = v35;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v83);
  if (!mlir::Type::isF16((mlir::Type *)&OperandRange)
    && !mlir::Type::isF32((mlir::Type *)&OperandRange)
    && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    goto LABEL_76;
  }
  unint64_t v36 = *v3;
  unint64_t v37 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v38 = *((unsigned int *)v36 + 4);
  if (!v38) {
    goto LABEL_51;
  }
  __int16 v39 = (void *)v36[1];
  uint64_t v40 = &v39[2 * v38];
  do
  {
    unint64_t v41 = v38 >> 1;
    uint64_t v42 = &v39[2 * (v38 >> 1)];
    unint64_t v44 = *v42;
    uint64_t v43 = v42 + 2;
    v38 += ~(v38 >> 1);
    if (v44 < v37) {
      __int16 v39 = v43;
    }
    else {
      unint64_t v38 = v41;
    }
  }
  while (v38);
  if (v39 != v40 && *v39 == v37) {
    uint64_t v45 = v39[1];
  }
  else {
LABEL_51:
  }
    uint64_t v45 = 0;
  v82[0] = v3;
  v82[1] = v45;
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v82);
  uint64_t v94 = 1;
  if (v47 != 1 || *Shape != v94)
  {
LABEL_76:
    uint64_t v48 = *v3;
    if (*((_UNKNOWN **)*v3 + 17) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
      goto LABEL_55;
    }
    unint64_t v56 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v57 = *((unsigned int *)v48 + 4);
    if (!v57) {
      goto LABEL_73;
    }
    uint64_t v58 = (void *)v48[1];
    char v59 = &v58[2 * v57];
    do
    {
      unint64_t v60 = v57 >> 1;
      unint64_t v61 = &v58[2 * (v57 >> 1)];
      unint64_t v63 = *v61;
      uint64_t v62 = v61 + 2;
      v57 += ~(v57 >> 1);
      if (v63 < v56) {
        uint64_t v58 = v62;
      }
      else {
        unint64_t v57 = v60;
      }
    }
    while (v57);
    if (v58 != v59 && *v58 == v56) {
      uint64_t v64 = v58[1];
    }
    else {
LABEL_73:
    }
      uint64_t v64 = 0;
    v81[0] = v3;
    v81[1] = v64;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v81);
    if (!mlir::Type::isF16((mlir::Type *)&OperandRange)
      && !mlir::Type::isF32((mlir::Type *)&OperandRange)
      && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
LABEL_55:
      __int16 v80 = 261;
      uint64_t v78 = (void **)"operand";
      uint64_t v79 = 7;
      mlir::Operation::emitOpError(v2, &v78, (uint64_t)&v88);
      if (v88)
      {
        mlir::Diagnostic::operator<<((uint64_t)v89, " #");
        if (v88)
        {
          LODWORD(v86) = 5;
          uint64_t v87 = 4;
          unint64_t v49 = (char *)&v86;
          unint64_t v50 = v90;
          if (v91 >= v92)
          {
            unint64_t v76 = v91 + 1;
            if (v90 <= (unint64_t)&v86 && v90 + 24 * v91 > (unint64_t)&v86)
            {
              uint64_t v77 = (char *)&v86 - v90;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v93, v76, 24);
              unint64_t v50 = v90;
              unint64_t v49 = &v77[v90];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v93, v76, 24);
              unint64_t v49 = (char *)&v86;
              unint64_t v50 = v90;
            }
          }
          unint64_t v51 = v50 + 24 * v91;
          long long v52 = *(_OWORD *)v49;
          *(void *)(v51 + 16) = *((void *)v49 + 2);
          *(_OWORD *)unint64_t v51 = v52;
          ++v91;
          if (v88) {
            mlir::Diagnostic::operator<<((uint64_t)v89, " must be 0D tensor of floating point values or static-shape defined tensor with shape equal to [1] or unranked tensor of floating point values, but got ");
          }
        }
      }
      uint64_t v53 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v88, (uint64_t *)&v84);
      char v54 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v53);
      if (v88) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v88);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v89);
      if (!v54) {
        return 0;
      }
    }
  }
LABEL_90:
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v74 = *(void *)this - 16;
  }
  else {
    uint64_t v74 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v74, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

void mlir::mpsx::SparseDenseMatMulOp::populateDefaultAttrs(mlir::mpsx::SparseDenseMatMulOp *this, const mlir::OperationName *a2, mlir::NamedAttrList *a3)
{
  uint64_t v4 = *(uint64_t **)(*(void *)this + 96);
  uint64_t Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)v4);
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[1]))
  {
    uint64_t v5 = v4[1];
    uint64_t BoolAttr = mlir::Builder::getBoolAttr(&Context, 0);
    ZinMirCacheTensors::ZinMirCacheTensors(&v10, v5, BoolAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[2]))
  {
    uint64_t v7 = v4[2];
    uint64_t v8 = mlir::Builder::getBoolAttr(&Context, 0);
    ZinMirCacheTensors::ZinMirCacheTensors(&v10, v7, v8);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
}

BOOL mlir::mpsx::SparseDenseMatMulOp::verifyInvariantsImpl(mlir::mpsx::SparseDenseMatMulOp *this)
{
  v157[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    while (1)
    {
      uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      uint64_t v8 = *(void *)this;
      if (**(void **)(*(void *)(*(void *)this + 48) + 96) == NumNeededNEs) {
        break;
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v6 -= 16;
      if (!v6) {
        goto LABEL_8;
      }
    }
    uint64_t v10 = *((void *)Value + 1);
    if (v6)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        uint64_t v13 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
        uint64_t v8 = *(void *)this;
        if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8) == v13)
        {
          uint64_t v11 = (void *)*((void *)Value + 1);
        }
        else
        {
          uint64_t v14 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
          uint64_t v8 = *(void *)this;
          if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16) == v14) {
            unint64_t v12 = (void *)*((void *)Value + 1);
          }
        }
        uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
        v6 -= 16;
      }
      while (v6);
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v11 = 0;
    }
    if (!mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps7(v8, v11, (void **)"transpose_lhs", (void **)0xD)|| !mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps7(*(void *)this, v12, (void **)"transpose_rhs", (void **)0xD))
    {
      return 0;
    }
    uint64_t v15 = *(void *)this;
    if (v10
      && *(_UNKNOWN **)(*(void *)v10 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
    {
      __int16 v145 = 257;
      mlir::Operation::emitOpError(v15, &v143, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v153, "attribute '");
        if (AttrDictionary)
        {
          __int16 v145 = 261;
          long long v143 = (void **)"storage_type";
          uint64_t v144 = 12;
          mlir::Diagnostic::operator<<((uint64_t)v153, &v143);
          if (AttrDictionary) {
            mlir::Diagnostic::operator<<((uint64_t)v153, "' failed to satisfy constraint: valid SparseTensorStorage");
          }
        }
      }
      char v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
      if (!v16) {
        return 0;
      }
      uint64_t v15 = *(void *)this;
    }
    unint64_t v17 = (void **)(*(void *)(*(void *)(*(void *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v148 = v17;
    unint64_t v18 = *v17;
    unint64_t v19 = (void *)*((void *)*v17 + 17);
    if (v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      unint64_t v50 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v51 = *((unsigned int *)v18 + 4);
      if (!v51) {
        goto LABEL_72;
      }
      long long v52 = (void *)v18[1];
      uint64_t v53 = &v52[2 * v51];
      do
      {
        unint64_t v54 = v51 >> 1;
        unint64_t v55 = &v52[2 * (v51 >> 1)];
        unint64_t v57 = *v55;
        unint64_t v56 = v55 + 2;
        v51 += ~(v51 >> 1);
        if (v57 < v50) {
          long long v52 = v56;
        }
        else {
          unint64_t v51 = v54;
        }
      }
      while (v51);
      if (v52 != v53 && *v52 == v50) {
        uint64_t v58 = v52[1];
      }
      else {
LABEL_72:
      }
        uint64_t v58 = 0;
      unint64_t AttrDictionary = (unint64_t)v17;
      v153[0] = v58;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
      if (mlir::Type::isF32((mlir::Type *)&OperandRange)) {
        goto LABEL_83;
      }
      unint64_t v18 = *v17;
      if (*((_UNKNOWN **)*v17 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
        goto LABEL_75;
      }
    }
    else if (v19 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      goto LABEL_75;
    }
    unint64_t v20 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v21 = *((unsigned int *)v18 + 4);
    if (!v21) {
      goto LABEL_41;
    }
    unint64_t v22 = (void *)v18[1];
    uint64_t v23 = &v22[2 * v21];
    do
    {
      unint64_t v24 = v21 >> 1;
      uint64_t v25 = &v22[2 * (v21 >> 1)];
      unint64_t v27 = *v25;
      char v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20) {
        unint64_t v22 = v26;
      }
      else {
        unint64_t v21 = v24;
      }
    }
    while (v21);
    if (v22 != v23 && *v22 == v20) {
      uint64_t v28 = v22[1];
    }
    else {
LABEL_41:
    }
      uint64_t v28 = 0;
    long long v143 = v17;
    uint64_t v144 = v28;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v143)) {
      goto LABEL_75;
    }
    unint64_t v29 = *v17;
    unint64_t v30 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v31 = *((unsigned int *)v29 + 4);
    if (!v31) {
      goto LABEL_51;
    }
    unint64_t v32 = (void *)v29[1];
    uint64_t v33 = &v32[2 * v31];
    do
    {
      unint64_t v34 = v31 >> 1;
      uint64_t v35 = &v32[2 * (v31 >> 1)];
      unint64_t v37 = *v35;
      unint64_t v36 = v35 + 2;
      v31 += ~(v31 >> 1);
      if (v37 < v30) {
        unint64_t v32 = v36;
      }
      else {
        unint64_t v31 = v34;
      }
    }
    while (v31);
    if (v32 != v33 && *v32 == v30) {
      uint64_t v38 = v32[1];
    }
    else {
LABEL_51:
    }
      uint64_t v38 = 0;
    unint64_t v150 = v17;
    uint64_t v151 = v38;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v150);
    if (v39 != 1) {
      goto LABEL_75;
    }
    uint64_t v40 = *v17;
    unint64_t v41 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v42 = *((unsigned int *)v40 + 4);
    if (!v42) {
      goto LABEL_61;
    }
    uint64_t v43 = (void *)v40[1];
    unint64_t v44 = &v43[2 * v42];
    do
    {
      unint64_t v45 = v42 >> 1;
      unsigned int v46 = &v43[2 * (v42 >> 1)];
      unint64_t v48 = *v46;
      uint64_t v47 = v46 + 2;
      v42 += ~(v42 >> 1);
      if (v48 < v41) {
        uint64_t v43 = v47;
      }
      else {
        unint64_t v42 = v45;
      }
    }
    while (v42);
    if (v43 != v44 && *v43 == v41) {
      uint64_t v49 = v43[1];
    }
    else {
LABEL_61:
    }
      uint64_t v49 = 0;
    unint64_t v146 = (unint64_t)v17;
    uint64_t v147 = v49;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v146);
    if (!mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
LABEL_75:
      __int16 v145 = 261;
      long long v143 = (void **)"operand";
      uint64_t v144 = 7;
      mlir::Operation::emitOpError(v15, &v143, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v153, " #");
        if (AttrDictionary)
        {
          LODWORD(v150) = 5;
          uint64_t v151 = 0;
          char v59 = (char *)&v150;
          unint64_t v60 = v154;
          if (v155 >= v156)
          {
            unint64_t v137 = v155 + 1;
            if (v154 <= (unint64_t)&v150 && v154 + 24 * v155 > (unint64_t)&v150)
            {
              unint64_t v140 = (char *)&v150 - v154;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v137, 24);
              unint64_t v60 = v154;
              char v59 = &v140[v154];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v137, 24);
              char v59 = (char *)&v150;
              unint64_t v60 = v154;
            }
          }
          unint64_t v61 = v60 + 24 * v155;
          long long v62 = *(_OWORD *)v59;
          *(void *)(v61 + 16) = *((void *)v59 + 2);
          *(_OWORD *)unint64_t v61 = v62;
          ++v155;
          if (AttrDictionary) {
            mlir::Diagnostic::operator<<((uint64_t)v153, " must be unranked tensor of 32-bit float values or 1D tensor of 32-bit float values, but got ");
          }
        }
      }
      uint64_t v63 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v148);
      char v64 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v63);
      if (AttrDictionary) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
      if (!v64) {
        return 0;
      }
    }
LABEL_83:
    if (mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps20(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 1u)&& mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps20(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 2u))
    {
      uint64_t v65 = *(void *)this;
      unint64_t v66 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 120) + 8) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v146 = v66;
      uint64_t v67 = *(void *)v66;
      uint64_t v68 = *(void **)(*(void *)v66 + 136);
      if (v68 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v68 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        unint64_t v70 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v71 = *(unsigned int *)(v67 + 16);
        if (!v71) {
          goto LABEL_98;
        }
        unint64_t v72 = *(void **)(v67 + 8);
        uint64_t v73 = &v72[2 * v71];
        do
        {
          unint64_t v74 = v71 >> 1;
          unint64_t v75 = &v72[2 * (v71 >> 1)];
          unint64_t v77 = *v75;
          unint64_t v76 = v75 + 2;
          v71 += ~(v71 >> 1);
          if (v77 < v70) {
            unint64_t v72 = v76;
          }
          else {
            unint64_t v71 = v74;
          }
        }
        while (v71);
        if (v72 != v73 && *v72 == v70) {
          uint64_t v78 = v72[1];
        }
        else {
LABEL_98:
        }
          uint64_t v78 = 0;
        unint64_t AttrDictionary = v66;
        v153[0] = v78;
        long long v143 = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
        if (mlir::Type::isSignedInteger((mlir::Type *)&v143, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&v143, 64))
        {
          goto LABEL_109;
        }
      }
      __int16 v145 = 261;
      long long v143 = (void **)"operand";
      uint64_t v144 = 7;
      mlir::Operation::emitOpError(v65, &v143, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v153, " #");
        if (AttrDictionary)
        {
          LODWORD(v150) = 5;
          uint64_t v151 = 3;
          uint64_t v79 = (char *)&v150;
          unint64_t v80 = v154;
          if (v155 >= v156)
          {
            unint64_t v138 = v155 + 1;
            if (v154 <= (unint64_t)&v150 && v154 + 24 * v155 > (unint64_t)&v150)
            {
              uint64_t v141 = (char *)&v150 - v154;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v138, 24);
              unint64_t v80 = v154;
              uint64_t v79 = &v141[v154];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v138, 24);
              uint64_t v79 = (char *)&v150;
              unint64_t v80 = v154;
            }
          }
          unint64_t v81 = v80 + 24 * v155;
          long long v82 = *(_OWORD *)v79;
          *(void *)(v81 + 16) = *((void *)v79 + 2);
          *(_OWORD *)unint64_t v81 = v82;
          ++v155;
          if (AttrDictionary) {
            mlir::Diagnostic::operator<<((uint64_t)v153, " must be tensor of mps index type values, but got ");
          }
        }
      }
      uint64_t v83 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v146);
      char v84 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v83);
      if (AttrDictionary) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
      if (v84)
      {
LABEL_109:
        uint64_t v85 = *(void *)this;
        unint64_t v86 = (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v148 = v86;
        uint64_t v87 = *v86;
        uint64_t v88 = (void *)*((void *)*v86 + 17);
        if (v88 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          unint64_t v89 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v90 = *((unsigned int *)v87 + 4);
          if (!v90) {
            goto LABEL_118;
          }
          unsigned int v91 = (void *)v87[1];
          unsigned int v92 = &v91[2 * v90];
          do
          {
            unint64_t v93 = v90 >> 1;
            uint64_t v94 = &v91[2 * (v90 >> 1)];
            unint64_t v96 = *v94;
            uint64_t v95 = v94 + 2;
            v90 += ~(v90 >> 1);
            if (v96 < v89) {
              unsigned int v91 = v95;
            }
            else {
              unint64_t v90 = v93;
            }
          }
          while (v90);
          if (v91 != v92 && *v91 == v89) {
            uint64_t v97 = v91[1];
          }
          else {
LABEL_118:
          }
            uint64_t v97 = 0;
          unint64_t AttrDictionary = (unint64_t)v86;
          v153[0] = v97;
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
          if (mlir::Type::isF32((mlir::Type *)&OperandRange))
          {
LABEL_160:
            if (*(_DWORD *)(*(void *)this + 36)) {
              uint64_t v134 = *(void *)this - 16;
            }
            else {
              uint64_t v134 = 0;
            }
            uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v134, 0);
            return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
          }
          uint64_t v87 = *v86;
          uint64_t v88 = (void *)*((void *)*v86 + 17);
        }
        if (v88 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v98 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v99 = *((unsigned int *)v87 + 4);
          if (!v99) {
            goto LABEL_130;
          }
          unint64_t v100 = (void *)v87[1];
          uint64_t v101 = &v100[2 * v99];
          do
          {
            unint64_t v102 = v99 >> 1;
            uint64_t v103 = &v100[2 * (v99 >> 1)];
            unint64_t v105 = *v103;
            uint64_t v104 = v103 + 2;
            v99 += ~(v99 >> 1);
            if (v105 < v98) {
              unint64_t v100 = v104;
            }
            else {
              unint64_t v99 = v102;
            }
          }
          while (v99);
          if (v100 != v101 && *v100 == v98) {
            uint64_t v106 = v100[1];
          }
          else {
LABEL_130:
          }
            uint64_t v106 = 0;
          long long v143 = v86;
          uint64_t v144 = v106;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v143))
          {
            unint64_t v107 = *v86;
            unint64_t v108 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v109 = *((unsigned int *)v107 + 4);
            if (!v109) {
              goto LABEL_140;
            }
            char v110 = (void *)v107[1];
            uint64_t v111 = &v110[2 * v109];
            do
            {
              unint64_t v112 = v109 >> 1;
              uint64_t v113 = &v110[2 * (v109 >> 1)];
              unint64_t v115 = *v113;
              uint64_t v114 = v113 + 2;
              v109 += ~(v109 >> 1);
              if (v115 < v108) {
                char v110 = v114;
              }
              else {
                unint64_t v109 = v112;
              }
            }
            while (v109);
            if (v110 != v111 && *v110 == v108) {
              uint64_t v116 = v110[1];
            }
            else {
LABEL_140:
            }
              uint64_t v116 = 0;
            unint64_t v150 = v86;
            uint64_t v151 = v116;
            mlir::ShapedType::getShape((mlir::ShapedType *)&v150);
            if (v117 == 2)
            {
              unint64_t v118 = *v86;
              unint64_t v119 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v120 = *((unsigned int *)v118 + 4);
              if (!v120) {
                goto LABEL_150;
              }
              uint64_t v121 = (void *)v118[1];
              unint64_t v122 = &v121[2 * v120];
              do
              {
                unint64_t v123 = v120 >> 1;
                uint64_t v124 = &v121[2 * (v120 >> 1)];
                unint64_t v126 = *v124;
                unint64_t v125 = v124 + 2;
                v120 += ~(v120 >> 1);
                if (v126 < v119) {
                  uint64_t v121 = v125;
                }
                else {
                  unint64_t v120 = v123;
                }
              }
              while (v120);
              if (v121 != v122 && *v121 == v119) {
                uint64_t v127 = v121[1];
              }
              else {
LABEL_150:
              }
                uint64_t v127 = 0;
              unint64_t v146 = (unint64_t)v86;
              uint64_t v147 = v127;
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v146);
              if (mlir::Type::isF32((mlir::Type *)&OperandRange)) {
                goto LABEL_160;
              }
            }
          }
        }
        __int16 v145 = 261;
        long long v143 = (void **)"operand";
        uint64_t v144 = 7;
        mlir::Operation::emitOpError(v85, &v143, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v153, " #");
          if (AttrDictionary)
          {
            LODWORD(v150) = 5;
            uint64_t v151 = 4;
            __int16 v128 = (char *)&v150;
            unint64_t v129 = v154;
            if (v155 >= v156)
            {
              unint64_t v139 = v155 + 1;
              if (v154 <= (unint64_t)&v150 && v154 + 24 * v155 > (unint64_t)&v150)
              {
                unint64_t v142 = (char *)&v150 - v154;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v139, 24);
                unint64_t v129 = v154;
                __int16 v128 = &v142[v154];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v139, 24);
                __int16 v128 = (char *)&v150;
                unint64_t v129 = v154;
              }
            }
            unint64_t v130 = v129 + 24 * v155;
            long long v131 = *(_OWORD *)v128;
            *(void *)(v130 + 16) = *((void *)v128 + 2);
            *(_OWORD *)unint64_t v130 = v131;
            ++v155;
            if (AttrDictionary) {
              mlir::Diagnostic::operator<<((uint64_t)v153, " must be unranked tensor of 32-bit float values or 2D tensor of 32-bit float values, but got ");
            }
          }
        }
        uint64_t v132 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v148);
        char v133 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v132);
        if (AttrDictionary) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
        if (v133) {
          goto LABEL_160;
        }
      }
    }
    return 0;
  }
LABEL_8:
  long long v143 = (void **)"requires attribute 'storage_type'";
  __int16 v145 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v143, (uint64_t)&AttrDictionary);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
  return v9;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps20(uint64_t a1, void **a2, void **a3, uint64_t a4, unsigned int a5)
{
  v73[19] = *MEMORY[0x263EF8340];
  char v64 = a2;
  uint64_t v10 = *a2;
  uint64_t v11 = (void *)*((void *)*a2 + 17);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unint64_t v48 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v49 = *((unsigned int *)v10 + 4);
    if (!v49) {
      goto LABEL_50;
    }
    unint64_t v50 = (void *)v10[1];
    unint64_t v51 = &v50[2 * v49];
    do
    {
      unint64_t v52 = v49 >> 1;
      uint64_t v53 = &v50[2 * (v49 >> 1)];
      unint64_t v55 = *v53;
      unint64_t v54 = v53 + 2;
      v49 += ~(v49 >> 1);
      if (v55 < v48) {
        unint64_t v50 = v54;
      }
      else {
        unint64_t v49 = v52;
      }
    }
    while (v49);
    if (v50 != v51 && *v50 == v48) {
      uint64_t v56 = v50[1];
    }
    else {
LABEL_50:
    }
      uint64_t v56 = 0;
    uint64_t v68 = a2;
    v69[0] = v56;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68);
    if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
    {
      return 1;
    }
    uint64_t v10 = *a2;
    uint64_t v11 = (void *)*((void *)*a2 + 17);
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *((unsigned int *)v10 + 4);
    if (!v13) {
      goto LABEL_11;
    }
    uint64_t v14 = (void *)v10[1];
    uint64_t v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      unint64_t v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      unint64_t v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        uint64_t v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_11:
    }
      uint64_t v20 = 0;
    unint64_t v60 = a2;
    uint64_t v61 = v20;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v60))
    {
      unint64_t v21 = *a2;
      unint64_t v22 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v23 = *((unsigned int *)v21 + 4);
      if (!v23) {
        goto LABEL_21;
      }
      unint64_t v24 = (void *)v21[1];
      uint64_t v25 = &v24[2 * v23];
      do
      {
        unint64_t v26 = v23 >> 1;
        unint64_t v27 = &v24[2 * (v23 >> 1)];
        unint64_t v29 = *v27;
        uint64_t v28 = v27 + 2;
        v23 += ~(v23 >> 1);
        if (v29 < v22) {
          unint64_t v24 = v28;
        }
        else {
          unint64_t v23 = v26;
        }
      }
      while (v23);
      if (v24 != v25 && *v24 == v22) {
        uint64_t v30 = v24[1];
      }
      else {
LABEL_21:
      }
        uint64_t v30 = 0;
      unint64_t v66 = a2;
      uint64_t v67 = v30;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v66);
      if (v31 == 1)
      {
        unint64_t v32 = *a2;
        unint64_t v33 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v34 = *((unsigned int *)v32 + 4);
        if (!v34) {
          goto LABEL_31;
        }
        uint64_t v35 = (void *)v32[1];
        unint64_t v36 = &v35[2 * v34];
        do
        {
          unint64_t v37 = v34 >> 1;
          uint64_t v38 = &v35[2 * (v34 >> 1)];
          unint64_t v40 = *v38;
          uint64_t v39 = v38 + 2;
          v34 += ~(v34 >> 1);
          if (v40 < v33) {
            uint64_t v35 = v39;
          }
          else {
            unint64_t v34 = v37;
          }
        }
        while (v34);
        if (v35 != v36 && *v35 == v33) {
          uint64_t v41 = v35[1];
        }
        else {
LABEL_31:
        }
          uint64_t v41 = 0;
        v63[0] = a2;
        v63[1] = v41;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
        if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
        {
          return 1;
        }
      }
    }
  }
  __int16 v62 = 261;
  unint64_t v60 = a3;
  uint64_t v61 = a4;
  mlir::Operation::emitOpError(a1, &v60, (uint64_t)&v68);
  if (v68)
  {
    mlir::Diagnostic::operator<<((uint64_t)v69, " #");
    if (v68)
    {
      LODWORD(v66) = 5;
      uint64_t v67 = a5;
      unint64_t v42 = (char *)&v66;
      unint64_t v43 = v70;
      if (v71 >= v72)
      {
        unint64_t v58 = v71 + 1;
        if (v70 <= (unint64_t)&v66 && v70 + 24 * v71 > (unint64_t)&v66)
        {
          char v59 = (char *)&v66 - v70;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
          unint64_t v43 = v70;
          unint64_t v42 = &v59[v70];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
          unint64_t v42 = (char *)&v66;
          unint64_t v43 = v70;
        }
      }
      unint64_t v44 = v43 + 24 * v71;
      long long v45 = *(_OWORD *)v42;
      *(void *)(v44 + 16) = *((void *)v42 + 2);
      *(_OWORD *)unint64_t v44 = v45;
      ++v71;
      if (v68) {
        mlir::Diagnostic::operator<<((uint64_t)v69, " must be unranked tensor of 32/64-bit signed integer values or 1D tensor of 32/64-bit signed integer values, but got ");
      }
    }
  }
  uint64_t v46 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v68, (uint64_t *)&v64);
  uint64_t v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v46);
  if (v68) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v68);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v69);
  return v47;
}

BOOL mlir::mpsx::VarHandleOp::verifyInvariantsImpl(mlir::mpsx::VarHandleOp *this)
{
  v18[23] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    while (1)
    {
      uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      uint64_t v8 = *(void *)this;
      if (**(void **)(*(void *)(*(void *)this + 48) + 96) == NumNeededNEs) {
        break;
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v6 -= 16;
      if (!v6) {
        goto LABEL_8;
      }
    }
    uint64_t v10 = *((void *)Value + 1);
    if (v10 && *(_UNKNOWN **)(*(void *)v10 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      __int16 v16 = 257;
      mlir::Operation::emitOpError(v8, v15, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v18, "attribute '");
        if (AttrDictionary)
        {
          __int16 v16 = 261;
          v15[0] = (void **)"identifier";
          v15[1] = (void **)10;
          mlir::Diagnostic::operator<<((uint64_t)v18, v15);
          if (AttrDictionary) {
            mlir::Diagnostic::operator<<((uint64_t)v18, "' failed to satisfy constraint: string attribute");
          }
        }
      }
      char v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
      if (!v11) {
        return 0;
      }
      uint64_t v8 = *(void *)this;
    }
    if (*(_DWORD *)(v8 + 36)) {
      uint64_t v12 = v8 - 16;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
    return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
  }
  else
  {
LABEL_8:
    v15[0] = (void **)"requires attribute 'identifier'";
    __int16 v16 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v15, (uint64_t)&AttrDictionary);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
  }
  return v9;
}

uint64_t mlir::emitOptionalError<char const(&)[22],mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6)
{
  v13[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v12);
  if (v12)
  {
    mlir::Diagnostic::operator<<((uint64_t)v13, a3);
    mlir::Diagnostic::append<mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>((uint64_t)v13, a4, a5, a6);
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v12);
  if (v12) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v12);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v10;
}

uint64_t mlir::Diagnostic::append<mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  uint64_t v7 = v17;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v17, *a2);
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v14 = v10 + 1;
    BOOL v15 = v9 + 24 * v10 > (unint64_t)v17;
    if (v9 <= (unint64_t)v17 && v15)
    {
      __int16 v16 = &v17[-v9];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      unint64_t v9 = *(void *)(a1 + 16);
      uint64_t v7 = &v16[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      unint64_t v9 = *(void *)(a1 + 16);
      uint64_t v7 = v17;
    }
  }
  unint64_t v11 = v9 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v7;
  *(void *)(v11 + 16) = *((void *)v7 + 2);
  *(_OWORD *)unint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[3],mlir::ShapedType &>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[3],mlir::ShapedType &>(uint64_t a1, char *a2, uint64_t *a3)
{
  mlir::Diagnostic::operator<<(a1, a2);
  uint64_t v5 = *a3;
  uint64_t v6 = v16;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v16, v5);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v13 = v9 + 1;
    BOOL v14 = v8 + 24 * v9 > (unint64_t)v16;
    if (v8 <= (unint64_t)v16 && v14)
    {
      BOOL v15 = &v16[-v8];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v13, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      uint64_t v6 = &v15[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v13, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      uint64_t v6 = v16;
    }
  }
  unint64_t v10 = v8 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v6;
  *(void *)(v10 + 16) = *((void *)v6 + 2);
  *(_OWORD *)unint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>(uint64_t a1, char a2, char *a3, unsigned int *a4, char *a5)
{
  v11[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, a3);
    mlir::Diagnostic::append<unsigned int &,char const(&)[47]>((uint64_t)v11, a4, a5);
  }
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v8;
}

uint64_t mlir::emitOptionalError<char const(&)[39],char const(&)[19],long long &,char const(&)[4],unsigned int &>(uint64_t a1, char a2, char *a3, char *a4, uint64_t *a5, char *a6, unsigned int *a7)
{
  v15[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v14);
  if (v14)
  {
    mlir::Diagnostic::operator<<((uint64_t)v15, a3);
    mlir::Diagnostic::operator<<((uint64_t)v15, a4);
    mlir::Diagnostic::append<long long &,char const(&)[4],unsigned int &>((uint64_t)v15, a5, a6, a7);
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
  if (v14) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v12;
}

uint64_t mlir::emitOptionalError<char const(&)[57],char const(&)[5]>(uint64_t a1, char a2, char *a3, char *a4)
{
  v9[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v8);
  if (v8)
  {
    mlir::Diagnostic::operator<<((uint64_t)v9, a3);
    mlir::Diagnostic::operator<<((uint64_t)v9, a4);
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v8);
  if (v8) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v8);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v9);
  return v6;
}

uint64_t mlir::Diagnostic::append<unsigned int &,char const(&)[47]>(uint64_t a1, unsigned int *a2, char *__s)
{
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 16;
  unint64_t v6 = v7;
  uint64_t v8 = *a2;
  int v17 = 5;
  uint64_t v18 = v8;
  uint64_t v9 = *(unsigned int *)(v5 + 8);
  uint64_t v10 = &v17;
  if (v9 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v14 = v9 + 1;
    BOOL v15 = v6 + 24 * v9 > (unint64_t)&v17;
    if (v6 <= (unint64_t)&v17 && v15)
    {
      __int16 v16 = (char *)&v17 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      uint64_t v10 = (int *)&v16[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      uint64_t v10 = &v17;
    }
  }
  uint64_t v11 = v6 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = *((void *)v10 + 2);
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return a1;
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[4],unsigned int &>(uint64_t a1, uint64_t *a2, char *a3, unsigned int *a4)
{
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  uint64_t v10 = *a2;
  int v19 = 2;
  uint64_t v20 = v10;
  uint64_t v11 = *(unsigned int *)(v7 + 8);
  long long v12 = &v19;
  if (v11 >= *(_DWORD *)(v7 + 12))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v8 + 24 * v11 > (unint64_t)&v19;
    if (v8 <= (unint64_t)&v19 && v17)
    {
      uint64_t v18 = (char *)&v19 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v16, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      long long v12 = (int *)&v18[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v16, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      long long v12 = &v19;
    }
  }
  uint64_t v13 = v8 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[4],unsigned int &>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[4],unsigned int &>(uint64_t a1, char *a2, unsigned int *a3)
{
  mlir::Diagnostic::operator<<(a1, a2);
  uint64_t v5 = a1 + 16;
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *a3;
  int v16 = 5;
  uint64_t v17 = v7;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unint64_t v9 = &v16;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v13 = v8 + 1;
    BOOL v14 = v6 + 24 * v8 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v14)
    {
      BOOL v15 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      unint64_t v9 = (int *)&v15[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      unint64_t v9 = &v16;
    }
  }
  uint64_t v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

void std::__function::__func<mlir::mpsx::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::~__func()
{
}

__n128 std::__function::__func<mlir::mpsx::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C387A48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlir::mpsx::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C387A48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlir::mpsx::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(**a2 + 136);
  if (v6 == mlir::TypeID::get<mlir::mpsx::ListType>())
  {
    uint64_t v7 = *(void *)(*v5 + 136);
    if (v7 == mlir::TypeID::get<mlir::mpsx::ListType>())
    {
      uint64_t v21 = *(void *)(a1 + 8);
      uint64_t v22 = *(void *)(*v4 + 136);
      if (v22 == mlir::TypeID::get<mlir::mpsx::ListType>()) {
        unint64_t v23 = v4;
      }
      else {
        unint64_t v23 = 0;
      }
      uint64_t v24 = v23[1];
      uint64_t v25 = *(void *)(*v5 + 136);
      if (v25 == mlir::TypeID::get<mlir::mpsx::ListType>()) {
        unint64_t v26 = v5;
      }
      else {
        unint64_t v26 = 0;
      }
      uint64_t v27 = v26[1];
      v30[0] = v24;
      v29[0] = v27;
      uint64_t v28 = *(void *)(v21 + 24);
      if (v28) {
        return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v28 + 48))(v28, v30, v29);
      }
      goto LABEL_24;
    }
  }
  v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v4);
  v30[1] = v8;
  unint64_t v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v5);
  v29[0] = v9;
  v29[1] = v10;
  if (v30[0]) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v30);
  uint64_t v31 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v29);
  uint64_t v32 = OperandRange;
  uint64_t v15 = *(void *)(v13 + 24);
  if (!v15)
  {
LABEL_24:
    std::__throw_bad_function_call[abi:nn180100]();
    return mlir::TypeID::get<mlir::mpsx::ListType>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v32, &v31);
  if (result)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
    {
      uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30);
      if (result)
      {
        uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
        uint64_t v18 = v17;
        int v19 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
        return mlir::mps::isMoreSpecializedShape(Shape, v18, v19, v20);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::TypeID::get<mlir::mpsx::ListType>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mpsx::ListType]";
      unint64_t v11 = 70;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::mpsx::ListType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[348];
}

void llvm::detail::provider_format_adapter<long long>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<long long>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<long long,void>::format((unint64_t *)(a1 + 8), a2, a3, a4);
}

void mlir::copyElementsAttrData<long long>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v102[5] = *MEMORY[0x263EF8340];
  uint64_t v99 = a1;
  uint64_t v100 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v99);
  uint64_t v7 = Type;
  if (!Type) {
    goto LABEL_10;
  }
  uint64_t v8 = *Type;
  unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v10 = *(unsigned int *)(v8 + 16);
  if (!v10) {
    goto LABEL_10;
  }
  unint64_t v11 = *(void **)(v8 + 8);
  long long v12 = &v11[2 * v10];
  do
  {
    unint64_t v13 = v10 >> 1;
    BOOL v14 = &v11[2 * (v10 >> 1)];
    unint64_t v16 = *v14;
    uint64_t v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9) {
      unint64_t v11 = v15;
    }
    else {
      unint64_t v10 = v13;
    }
  }
  while (v10);
  if (v11 != v12 && *v11 == v9) {
    uint64_t v17 = v11[1];
  }
  else {
LABEL_10:
  }
    uint64_t v17 = 0;
  v98[0] = v7;
  v98[1] = v17;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v98);
  int v18 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v99);
  ElementsAttrRawData = (unsigned __int8 *)mlir::getElementsAttrRawData(v99);
  uint64_t v21 = v20;
  if (!v18 || a4)
  {
    int64_t NumElements = mlir::ElementsAttr::getNumElements(v99, v100);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_17;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_28;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return;
      }
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v28 = 0;
        unint64_t v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = v28;
          }
          if (v18) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v28 + 1;
          }
          uint64_t v31 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v30];
          uint64_t v32 = (void *)(a3 + 8 * v28);
          *uint64_t v32 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v29];
          v32[1] = v31;
          v28 += 2;
        }
        while (v28 != v27);
        goto LABEL_204;
      }
      goto LABEL_37;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_55;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_62;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_78;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_94;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_114;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_125;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_132;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_148;
    }
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
LABEL_163:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v78 = 0;
        unint64_t v69 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v79 = (int64x2_t *)a3;
        do
        {
          if (v18) {
            uint64_t v80 = 0;
          }
          else {
            uint64_t v80 = v78;
          }
          if (v18) {
            uint64_t v81 = 0;
          }
          else {
            uint64_t v81 = v78 + 1;
          }
          v68.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v80];
          v68.i16[2] = *(_WORD *)&ElementsAttrRawData[2 * v81];
          int64x2_t v68 = vcvtq_s64_f64(vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)v68.i8, 0x10uLL)));
          *v79++ = v68;
          v78 += 2;
        }
        while (v78 != v69);
        goto LABEL_246;
      }
      unint64_t v69 = 0;
      do
      {
        if (v18) {
          unint64_t v95 = 0;
        }
        else {
          unint64_t v95 = v69;
        }
        *(void *)(a3 + 8 * v69++) = (uint64_t)COERCE_FLOAT(*(unsigned __int16 *)&ElementsAttrRawData[2 * v95] << 16);
LABEL_246:
        ;
      }
      while (NumElements != v69);
      return;
    }
  }
  else
  {
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_17:
      for (uint64_t i = 0; i != NumElements; ++i)
      {
        if (v18) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = i;
        }
        *(void *)(a3 + 8 * i) = ElementsAttrRawData[v24];
      }
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_28:
      for (uint64_t j = 0; j != NumElements; ++j)
      {
        if (v18) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = j;
        }
        *(void *)(a3 + 8 * j) = (char)ElementsAttrRawData[v26];
      }
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_37:
      unint64_t v27 = 0;
      do
      {
        if (v18) {
          unint64_t v88 = 0;
        }
        else {
          unint64_t v88 = v27;
        }
        *(void *)(a3 + 8 * v27++) = *(unsigned __int16 *)&ElementsAttrRawData[2 * v88];
LABEL_204:
        ;
      }
      while (NumElements != v27);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_55:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v35 = 0;
        unint64_t v33 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v35;
          }
          if (v18) {
            uint64_t v37 = 0;
          }
          else {
            uint64_t v37 = v35 + 1;
          }
          uint64_t v38 = *(__int16 *)&ElementsAttrRawData[2 * v37];
          uint64_t v39 = (void *)(a3 + 8 * v35);
          *uint64_t v39 = *(__int16 *)&ElementsAttrRawData[2 * v36];
          v39[1] = v38;
          v35 += 2;
        }
        while (v35 != v33);
        goto LABEL_210;
      }
      unint64_t v33 = 0;
      do
      {
        if (v18) {
          unint64_t v89 = 0;
        }
        else {
          unint64_t v89 = v33;
        }
        *(void *)(a3 + 8 * v33++) = *(__int16 *)&ElementsAttrRawData[2 * v89];
LABEL_210:
        ;
      }
      while (NumElements != v33);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_62:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v41 = 0;
        unint64_t v34 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = v41;
          }
          if (v18) {
            uint64_t v43 = 0;
          }
          else {
            uint64_t v43 = v41 + 1;
          }
          uint64_t v44 = *(unsigned int *)&ElementsAttrRawData[4 * v43];
          long long v45 = (void *)(a3 + 8 * v41);
          *long long v45 = *(unsigned int *)&ElementsAttrRawData[4 * v42];
          v45[1] = v44;
          v41 += 2;
        }
        while (v41 != v34);
        goto LABEL_216;
      }
      unint64_t v34 = 0;
      do
      {
        if (v18) {
          unint64_t v90 = 0;
        }
        else {
          unint64_t v90 = v34;
        }
        *(void *)(a3 + 8 * v34++) = *(unsigned int *)&ElementsAttrRawData[4 * v90];
LABEL_216:
        ;
      }
      while (NumElements != v34);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_78:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v48 = 0;
        unint64_t v40 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18) {
            uint64_t v49 = 0;
          }
          else {
            uint64_t v49 = v48;
          }
          if (v18) {
            uint64_t v50 = 0;
          }
          else {
            uint64_t v50 = v48 + 1;
          }
          uint64_t v51 = *(int *)&ElementsAttrRawData[4 * v50];
          unint64_t v52 = (void *)(a3 + 8 * v48);
          *unint64_t v52 = *(int *)&ElementsAttrRawData[4 * v49];
          v52[1] = v51;
          v48 += 2;
        }
        while (v48 != v40);
        goto LABEL_222;
      }
      unint64_t v40 = 0;
      do
      {
        if (v18) {
          unint64_t v91 = 0;
        }
        else {
          unint64_t v91 = v40;
        }
        *(void *)(a3 + 8 * v40++) = *(int *)&ElementsAttrRawData[4 * v91];
LABEL_222:
        ;
      }
      while (NumElements != v40);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      int64_t NumElements = 1;
LABEL_94:
      for (uint64_t k = 0; k != NumElements; ++k)
      {
        if (v18) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = k;
        }
        *(void *)(a3 + 8 * k) = *(void *)&ElementsAttrRawData[8 * v47];
      }
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      int64_t NumElements = 1;
LABEL_114:
      for (uint64_t m = 0; m != NumElements; ++m)
      {
        if (v18) {
          uint64_t v54 = 0;
        }
        else {
          uint64_t v54 = m;
        }
        *(void *)(a3 + 8 * m) = *(void *)&ElementsAttrRawData[8 * v54];
      }
      return;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_125:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v57 = 0;
        unint64_t v55 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18) {
            uint64_t v58 = 0;
          }
          else {
            uint64_t v58 = v57;
          }
          if (v18) {
            uint64_t v59 = 0;
          }
          else {
            uint64_t v59 = v57 + 1;
          }
          uint64_t v60 = (uint64_t)*(short float *)&ElementsAttrRawData[2 * v59];
          uint64_t v61 = (void *)(a3 + 8 * v57);
          *uint64_t v61 = (uint64_t)*(short float *)&ElementsAttrRawData[2 * v58];
          v61[1] = v60;
          v57 += 2;
        }
        while (v57 != v55);
        goto LABEL_228;
      }
      unint64_t v55 = 0;
      do
      {
        if (v18) {
          unint64_t v92 = 0;
        }
        else {
          unint64_t v92 = v55;
        }
        *(void *)(a3 + 8 * v55++) = (uint64_t)*(short float *)&ElementsAttrRawData[2 * v92];
LABEL_228:
        ;
      }
      while (NumElements != v55);
      return;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_132:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v63 = 0;
        unint64_t v56 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18) {
            uint64_t v64 = 0;
          }
          else {
            uint64_t v64 = v63;
          }
          if (v18) {
            uint64_t v65 = 0;
          }
          else {
            uint64_t v65 = v63 + 1;
          }
          uint64_t v66 = (uint64_t)*(float *)&ElementsAttrRawData[4 * v65];
          uint64_t v67 = (void *)(a3 + 8 * v63);
          *uint64_t v67 = (uint64_t)*(float *)&ElementsAttrRawData[4 * v64];
          v67[1] = v66;
          v63 += 2;
        }
        while (v63 != v56);
        goto LABEL_234;
      }
      unint64_t v56 = 0;
      do
      {
        if (v18) {
          unint64_t v93 = 0;
        }
        else {
          unint64_t v93 = v56;
        }
        *(void *)(a3 + 8 * v56++) = (uint64_t)*(float *)&ElementsAttrRawData[4 * v93];
LABEL_234:
        ;
      }
      while (NumElements != v56);
      return;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_148:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v72 = 0;
        unint64_t v62 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18) {
            uint64_t v73 = 0;
          }
          else {
            uint64_t v73 = v72;
          }
          if (v18) {
            uint64_t v74 = 0;
          }
          else {
            uint64_t v74 = v72 + 1;
          }
          uint64_t v75 = (uint64_t)*(double *)&ElementsAttrRawData[8 * v74];
          unint64_t v76 = (void *)(a3 + 8 * v72);
          *unint64_t v76 = (uint64_t)*(double *)&ElementsAttrRawData[8 * v73];
          v76[1] = v75;
          v72 += 2;
        }
        while (v72 != v62);
        goto LABEL_240;
      }
      unint64_t v62 = 0;
      do
      {
        if (v18) {
          unint64_t v94 = 0;
        }
        else {
          unint64_t v94 = v62;
        }
        *(void *)(a3 + 8 * v62++) = (uint64_t)*(double *)&ElementsAttrRawData[8 * v94];
LABEL_240:
        ;
      }
      while (NumElements != v62);
      return;
    }
    int64_t NumElements = 1;
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
      goto LABEL_163;
    }
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    if (v18) {
      unint64_t v70 = 1;
    }
    else {
      unint64_t v70 = NumElements;
    }
    llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v101, v70);
    mlir::detail::unpackBooleanData(ElementsAttrRawData, v21, (uint64_t)v101[0], (unint64_t)v101[1]);
    unsigned int v71 = (unsigned __int8 *)v101[0];
    if (NumElements >= 1)
    {
      if (NumElements == 1)
      {
        unint64_t v83 = 0;
        goto LABEL_248;
      }
      uint64_t v82 = 0;
      unint64_t v83 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18) {
          uint64_t v84 = 0;
        }
        else {
          uint64_t v84 = v82;
        }
        if (v18) {
          uint64_t v85 = 0;
        }
        else {
          uint64_t v85 = v82 + 1;
        }
        uint64_t v86 = v71[v85];
        uint64_t v87 = (void *)(a3 + 8 * v82);
        void *v87 = v71[v84];
        v87[1] = v86;
        v82 += 2;
      }
      while (v82 != v83);
      while (NumElements != v83)
      {
LABEL_248:
        if (v18) {
          unint64_t v96 = 0;
        }
        else {
          unint64_t v96 = v83;
        }
        *(void *)(a3 + 8 * v83++) = v71[v96];
      }
    }
    if (v71 != (unsigned __int8 *)v102) {
      free(v71);
    }
  }
  else
  {
    mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    mlir::detail::unpackQuantizedData<long long>(ElementsAttrRawData, v21, a3, NumElements, IntOrFloatBitWidth);
  }
}

unsigned __int8 *mlir::detail::unpackQuantizedData<long long>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (!v10) {
        goto LABEL_3;
      }
      unsigned int v11 = *result;
      if (v7 >= v8) {
        unint64_t v12 = 8 / a5;
      }
      else {
        unint64_t v12 = v7;
      }
      uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_211ED5A80));
      if (v14.i8[0]) {
        *(void *)(a3 + 8 * v9) = v6 & v11;
      }
      if (v14.i8[4]) {
        *(void *)(a3 + 8 * v9 + 8) = (v11 >> a5) & v6;
      }
      uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2) {
        goto LABEL_3;
      }
      int32x2_t v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_211ED4670));
      if (v16.i8[0])
      {
        *(void *)(a3 + 8 * v9 + 16) = (v11 >> (2 * a5)) & v6;
        if (v16.i8[4])
        {
LABEL_20:
          *(void *)(a3 + 8 * v9 + 24) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4) {
            goto LABEL_3;
          }
          goto LABEL_21;
        }
      }
      else if (v16.i8[4])
      {
        goto LABEL_20;
      }
      if (v15 == 4) {
        goto LABEL_3;
      }
LABEL_21:
      int32x2_t v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_211F09590));
      if (v17.i8[0])
      {
        *(void *)(a3 + 8 * v9 + 32) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_23:
          if (v15 != 6) {
            goto LABEL_27;
          }
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_23;
      }
      *(void *)(a3 + 8 * v9 + 40) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_27:
        int32x2_t v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_211F095A0));
        if (v18.i8[0]) {
          *(void *)(a3 + 8 * v9 + 48) = (v11 >> (6 * a5)) & v6;
        }
        if (v18.i8[4]) {
          *(void *)(a3 + 8 * v9 + 56) = (v11 >> (7 * a5)) & v6;
        }
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::ANEOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::CPUOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::DeinterleaveOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::FPToIntClampedOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::GPUOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::InterleaveOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::ListPopBackOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::ListPushBackOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::MakeListOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::QuantizedGatherOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::QuantizedMatMulOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::RMSNormOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::RegionReturnOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::ReturnStitchedOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::ScaledDotProductAttentionOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::SparseDenseMatMulOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::StitchedOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::mpsx::VarHandleOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::foldHook()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unint64_t v5 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v1 = (*(uint64_t (__cdecl **)())(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0) {
        int v2 = v4;
      }
      else {
        int v2 = (llvm **)v4[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v2, v0);
    }
    if (((&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = (uint64_t **)v7;
      }
      else {
        unint64_t v5 = (uint64_t **)v7[0];
      }
      (*(void (**)(uint64_t **, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))(v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::mpsx::ANEOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unint64_t v10 = v11;
      }
      else {
        unint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  void *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isDeclaration;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  *char v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeResAttrsAttr;
  unint64_t v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>>((uint64_t)a1);
  unint64_t v6 = malloc_type_malloc(0x30uLL, 0x800407D3415B1uLL);
  *unint64_t v6 = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeBody;
  v6[1] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeRegionBody;
  v6[2] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType;
  v6[3] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionType;
  v6[4] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBody;
  v6[5] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBodyBlock;
  unint64_t v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  uint64_t v8 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v8 = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isRegionProfitable;
  v8[1] = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::build;
  unint64_t v9 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setNested(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPrivate(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPublic(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(a2 + 40);
  else {
    return 0;
  }
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::mpsx::ANEOp::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::mpsx::ANEOp::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(void **)(*(void *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 16));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>>(uint64_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  void *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)a1 + 16 * v4;
  do
  {
    unint64_t v7 = v4 >> 1;
    __int16 v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    unint64_t v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      unint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 != (void *)v6 && *v5 == v3) {
    uint64_t v11 = v5[1];
  }
  else {
LABEL_9:
  }
    uint64_t v11 = 0;
  v2[5] = v11;
  unint64_t v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  unint64_t v13 = *(unsigned int *)(a1 + 8);
  if (!v13) {
    goto LABEL_18;
  }
  int32x2_t v14 = *(void **)a1;
  uint64_t v15 = *(void *)a1 + 16 * v13;
  do
  {
    unint64_t v16 = v13 >> 1;
    int32x2_t v17 = &v14[2 * (v13 >> 1)];
    unint64_t v19 = *v17;
    int32x2_t v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12) {
      int32x2_t v14 = v18;
    }
    else {
      unint64_t v13 = v16;
    }
  }
  while (v13);
  if (v14 != (void *)v15 && *v14 == v12) {
    uint64_t v20 = v14[1];
  }
  else {
LABEL_18:
  }
    uint64_t v20 = 0;
  v2[6] = v20;
  unint64_t v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();

  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v11);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyType()
{
  return 1;
}

uint64_t mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(mlir::Operation **this)
{
  v41[19] = *MEMORY[0x263EF8340];
  unint64_t v2 = *((unsigned int *)*this + 11);
  if ((v2 & 0x7FFFFF) != 0) {
    unint64_t v3 = (void *)((((unint64_t)*this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
                  + 32 * *((unsigned int *)*this + 10));
  else {
    unint64_t v3 = 0;
  }
  if ((void *)*v3 != v3)
  {
    uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(this);
    uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    uint64_t Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    unsigned int v6 = v5;
    uint64_t v7 = *(void *)((((unint64_t)*this
                     + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                     + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)*this + 10)
                   + 8);
    if (v7) {
      uint64_t v8 = v7 - 8;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v10 = v8 + 48;
    uint64_t v9 = *(void *)(v8 + 48);
    if (((unint64_t)(*(void *)(v10 + 8) - v9) >> 3) != v5)
    {
      v32[0] = (void **)"entry block must have ";
      __int16 v33 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v32, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
      {
        int v34 = 5;
        uint64_t v35 = v6;
        int32x2_t v14 = &v34;
        unint64_t v15 = v38;
        if (v39 >= v40)
        {
          unint64_t v27 = v39 + 1;
          if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
          {
            uint64_t v29 = (char *)&v34 - v38;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
            unint64_t v15 = v38;
            int32x2_t v14 = (int *)&v29[v38];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
            int32x2_t v14 = &v34;
            unint64_t v15 = v38;
          }
        }
        unint64_t v16 = v15 + 24 * v39;
        long long v17 = *(_OWORD *)v14;
        *(void *)(v16 + 16) = *((void *)v14 + 2);
        *(_OWORD *)unint64_t v16 = v17;
        ++v39;
        if (FunctionTypeAttr) {
          mlir::Diagnostic::operator<<((uint64_t)v37, " arguments to match function signature");
        }
      }
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
      }
LABEL_32:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
      return v13;
    }
    if (v5)
    {
      uint64_t v11 = (uint64_t *)Inputs;
      uint64_t v12 = 0;
      while (1)
      {
        unint64_t v31 = *(void *)(*(void *)(v9 + 8 * v12) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (*v11 != v31) {
          break;
        }
        ++v12;
        ++v11;
        if (v5 == v12) {
          return 1;
        }
      }
      v32[0] = (void **)"type of entry block argument #";
      __int16 v33 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v32, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
      {
        int v34 = 5;
        uint64_t v35 = v12;
        int32x2_t v18 = &v34;
        unint64_t v19 = v38;
        if (v39 >= v40)
        {
          unint64_t v28 = v39 + 1;
          if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
          {
            uint64_t v30 = (char *)&v34 - v38;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v28, 24);
            unint64_t v19 = v38;
            int32x2_t v18 = (int *)&v30[v38];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v28, 24);
            int32x2_t v18 = &v34;
            unint64_t v19 = v38;
          }
        }
        unint64_t v20 = v19 + 24 * v39;
        long long v21 = *(_OWORD *)v18;
        *(void *)(v20 + 16) = *((void *)v18 + 2);
        *(_OWORD *)unint64_t v20 = v21;
        ++v39;
        if (FunctionTypeAttr) {
          mlir::Diagnostic::operator<<((uint64_t)v37, 40);
        }
      }
      uint64_t v22 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v31);
      unint64_t v23 = v22;
      if (*v22)
      {
        mlir::Diagnostic::operator<<((uint64_t)(v22 + 1), ") must match the type of the corresponding argument in ");
        if (*v23) {
          mlir::Diagnostic::operator<<((uint64_t)(v23 + 1), "function signature(");
        }
      }
      uint64_t v24 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)v23, v11);
      uint64_t v25 = (uint64_t)v24;
      if (*v24) {
        mlir::Diagnostic::operator<<((uint64_t)(v24 + 1), 41);
      }
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
      if (FunctionTypeAttr) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
      }
      goto LABEL_32;
    }
  }
  return 1;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeBody(uint64_t a1, mlir::SymbolRefAttr *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  return mlir::legalizeA12(a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeRegionBody(uint64_t a1, mlir::SymbolRefAttr *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return mlir::legalizeA12(a2, a3, a4, a5, a6, a7);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 8);
  uint64_t v5 = mlir::TypeAttr::get(a3);

  mlir::Operation::setAttr(a2, v4, v5);
}

unint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBody(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(a2 + 40);
  else {
    return 0;
  }
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBodyBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    return v2 - 8;
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isRegionProfitable()
{
  return 1;
}

void mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::build(mlir::StringAttr **a1, uint64_t a2, void *a3, void *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__src, uint64_t a18)
{
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  uint64_t v25 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait>(void)::Empty>>();
  return v26 == a2
      || v25 == a2
      || v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, a3, a4, a5);
  uint64_t InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(void **)(*(void *)(a2 + 48) + 96), *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants(mlir::Operation *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(mlir::Operation *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
    && (uint64_t v8 = a1, mlir::mpsx::ANEOp::verifyInvariantsImpl((mlir::mpsx::ANEOp *)&v8))
    && mlir::detail::verifySymbol(a1, v6))
  {
    return mlir::function_interface_impl::verifyTrait<mlir::mpsx::ANEOp>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::function_interface_impl::verifyTrait<mlir::mpsx::ANEOp>(mlir::Operation *a1)
{
  v58[19] = *MEMORY[0x263EF8340];
  uint64_t v51 = a1;
  uint64_t ArgAttrsAttr = mlir::mpsx::ANEOp::getArgAttrsAttr(&v51);
  if (ArgAttrsAttr)
  {
    uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v51);
    uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    unsigned int v2 = v1;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    uint64_t v3 = v2;
    if (v4 != v2)
    {
      __int16 v49 = 257;
      mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr) {
        mlir::Diagnostic::operator<<((uint64_t)v54, "expects argument attribute array to have the same number of elements as the number of function arguments, got ");
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
      if (!FunctionTypeAttr) {
        goto LABEL_59;
      }
      LODWORD(v52) = 5;
      *((void *)&v52 + 1) = v28;
      uint64_t v29 = (char *)&v52;
      unint64_t v30 = v55;
      if (v56 < v57) {
        goto LABEL_50;
      }
      unint64_t v31 = v56 + 1;
      if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52) {
        goto LABEL_81;
      }
      goto LABEL_82;
    }
    if (v2)
    {
      LODWORD(v5) = 0;
      while (1)
      {
        uint64_t v6 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
        uint64_t v5 = v5;
        if (!v6) {
          break;
        }
        if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
          uint64_t v6 = 0;
        }
        uint64_t v47 = v6;
        if (!v6) {
          goto LABEL_65;
        }
        uint64_t Value = (long long *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
        uint64_t v8 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
        if (Value != (long long *)v8)
        {
          uint64_t v9 = (long long *)v8;
          do
          {
            long long v52 = *Value;
            uint64_t FunctionTypeAttr = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v52);
            uint64_t AttrData = (unsigned char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
            if (!v11 || (uint64_t v12 = AttrData, (v13 = (char *)memchr(AttrData, 46, v11)) == 0) || v13 - v12 == -1)
            {
              unsigned int v39 = "arguments may only have dialect attributes";
              goto LABEL_58;
            }
            uint64_t NameDialect = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
            if (NameDialect)
            {
              if (!(*(unsigned __int8 (**)(uint64_t, mlir::Operation *, void, void, void, void))(*(void *)NameDialect + 80))(NameDialect, v51, 0, v5, v52, *((void *)&v52 + 1)))return 0; {
            }
              }
            ++Value;
          }
          while (Value != v9);
        }
        LODWORD(v5) = v5 + 1;
        if (v5 == v2) {
          goto LABEL_19;
        }
      }
      uint64_t v47 = 0;
LABEL_65:
      __int16 v49 = 257;
      mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (!FunctionTypeAttr) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
  }
LABEL_19:
  uint64_t ArgAttrsAttr = mlir::mpsx::ANEOp::getResAttrsAttr(&v51);
  if (!ArgAttrsAttr) {
    goto LABEL_37;
  }
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v51);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
  unsigned int v16 = v15;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
  uint64_t v3 = v16;
  if (v17 != v16)
  {
    __int16 v49 = 257;
    mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (FunctionTypeAttr) {
      mlir::Diagnostic::operator<<((uint64_t)v54, "expects result attribute array to have the same number of elements as the number of function results, got ");
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    if (!FunctionTypeAttr) {
      goto LABEL_59;
    }
    LODWORD(v52) = 5;
    *((void *)&v52 + 1) = v32;
    uint64_t v29 = (char *)&v52;
    unint64_t v30 = v55;
    if (v56 < v57)
    {
LABEL_50:
      unint64_t v33 = v30 + 24 * v56;
      long long v34 = *(_OWORD *)v29;
      *(void *)(v33 + 16) = *((void *)v29 + 2);
      *(_OWORD *)unint64_t v33 = v34;
      ++v56;
      if (FunctionTypeAttr)
      {
        mlir::Diagnostic::operator<<((uint64_t)v54, ", but expected ");
        if (FunctionTypeAttr)
        {
          LODWORD(v52) = 5;
          *((void *)&v52 + 1) = v3;
          uint64_t v35 = (char *)&v52;
          unint64_t v36 = v55;
          if (v56 >= v57)
          {
            unint64_t v44 = v56 + 1;
            if (v55 <= (unint64_t)&v52 && v55 + 24 * v56 > (unint64_t)&v52)
            {
              uint64_t v46 = (char *)&v52 - v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              unint64_t v36 = v55;
              uint64_t v35 = &v46[v55];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              uint64_t v35 = (char *)&v52;
              unint64_t v36 = v55;
            }
          }
          unint64_t v37 = v36 + 24 * v56;
          long long v38 = *(_OWORD *)v35;
          *(void *)(v37 + 16) = *((void *)v35 + 2);
          *(_OWORD *)unint64_t v37 = v38;
          ++v56;
        }
      }
LABEL_59:
      uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
      }
LABEL_61:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v54);
      return v27;
    }
    unint64_t v31 = v56 + 1;
    if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
    {
LABEL_81:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
      uint64_t v29 = (char *)&v52;
      unint64_t v30 = v55;
      goto LABEL_50;
    }
LABEL_82:
    long long v45 = (char *)&v52 - v30;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
    unint64_t v30 = v55;
    uint64_t v29 = &v45[v55];
    goto LABEL_50;
  }
  if (v16)
  {
    LODWORD(v5) = 0;
    while (1)
    {
      uint64_t v18 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
      uint64_t v5 = v5;
      if (!v18) {
        break;
      }
      if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
        uint64_t v18 = 0;
      }
      uint64_t v47 = v18;
      if (!v18) {
        goto LABEL_68;
      }
      unint64_t v19 = (long long *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
      uint64_t v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
      if (v19 != (long long *)v20)
      {
        long long v21 = (long long *)v20;
        while (1)
        {
          long long v52 = *v19;
          uint64_t FunctionTypeAttr = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v52);
          uint64_t v22 = (unsigned char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
          if (!v23) {
            break;
          }
          uint64_t v24 = v22;
          uint64_t v25 = (char *)memchr(v22, 46, v23);
          if (!v25 || v25 - v24 == -1) {
            break;
          }
          uint64_t v26 = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
          if (v26
            && !(*(unsigned __int8 (**)(uint64_t, mlir::Operation *, void, void, void, void))(*(void *)v26 + 88))(v26, v51, 0, v5, v52, *((void *)&v52 + 1)))
          {
            return 0;
          }
          if (++v19 == v21) {
            goto LABEL_36;
          }
        }
        unsigned int v39 = "results may only have dialect attributes";
        goto LABEL_58;
      }
LABEL_36:
      LODWORD(v5) = v5 + 1;
      if (v5 == v16) {
        goto LABEL_37;
      }
    }
    uint64_t v47 = 0;
LABEL_68:
    __int16 v49 = 257;
    mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (!FunctionTypeAttr) {
      goto LABEL_71;
    }
LABEL_70:
    mlir::Diagnostic::operator<<((uint64_t)v54, v41);
LABEL_71:
    *(void *)&long long v52 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
    uint64_t v42 = (void *)mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v52);
    uint64_t v43 = (uint64_t)v42;
    if (*v42) {
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v43);
    }
    if (FunctionTypeAttr) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
    }
    goto LABEL_61;
  }
LABEL_37:
  if ((*((_DWORD *)v51 + 11) & 0x7FFFFF) != 1)
  {
    unsigned int v39 = "expects one region";
LABEL_58:
    v48[0] = (void **)v39;
    __int16 v49 = 259;
    mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
    goto LABEL_59;
  }
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v51);
}

BOOL mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  unsigned int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unsigned int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  unsigned int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unsigned int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::mpsx::CPUOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::CPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::CPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::CPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::CPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::CPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::CPUOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  void *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isDeclaration;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  *char v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeResAttrsAttr;
  unint64_t v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>>((uint64_t)a1);
  unint64_t v6 = malloc_type_malloc(0x30uLL, 0x800407D3415B1uLL);
  *unint64_t v6 = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeBody;
  v6[1] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeRegionBody;
  v6[2] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType;
  v6[3] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionType;
  v6[4] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBody;
  v6[5] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBodyBlock;
  unint64_t v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  uint64_t v8 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v8 = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isRegionProfitable;
  v8[1] = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::build;
  unint64_t v9 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setNested(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPrivate(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPublic(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(a2 + 40);
  else {
    return 0;
  }
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::mpsx::ANEOp::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::mpsx::ANEOp::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(void **)(*(void *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 16));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>>(uint64_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  void *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)a1 + 16 * v4;
  do
  {
    unint64_t v7 = v4 >> 1;
    __int16 v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    unint64_t v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      unint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 != (void *)v6 && *v5 == v3) {
    uint64_t v11 = v5[1];
  }
  else {
LABEL_9:
  }
    uint64_t v11 = 0;
  v2[5] = v11;
  unint64_t v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  unint64_t v13 = *(unsigned int *)(a1 + 8);
  if (!v13) {
    goto LABEL_18;
  }
  int32x2_t v14 = *(void **)a1;
  uint64_t v15 = *(void *)a1 + 16 * v13;
  do
  {
    unint64_t v16 = v13 >> 1;
    uint64_t v17 = &v14[2 * (v13 >> 1)];
    unint64_t v19 = *v17;
    uint64_t v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12) {
      int32x2_t v14 = v18;
    }
    else {
      unint64_t v13 = v16;
    }
  }
  while (v13);
  if (v14 != (void *)v15 && *v14 == v12) {
    uint64_t v20 = v14[1];
  }
  else {
LABEL_18:
  }
    uint64_t v20 = 0;
  v2[6] = v20;
  unint64_t v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();

  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v11);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyType()
{
  return 1;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return mlir::minimalLegalize(a2, a3, a4, a6);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeRegionBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return mlir::minimalLegalize(a2, a4, a5, a7);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 8);
  uint64_t v5 = mlir::TypeAttr::get(a3);

  mlir::Operation::setAttr(a2, v4, v5);
}

unint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBody(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(a2 + 40);
  else {
    return 0;
  }
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBodyBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    return v2 - 8;
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isRegionProfitable()
{
  return 1;
}

void mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::build(mlir::StringAttr **a1, uint64_t a2, void *a3, void *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__src, uint64_t a18)
{
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  uint64_t v25 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait>(void)::Empty>>();
  return v26 == a2
      || v25 == a2
      || v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, a3, a4, a5);
  uint64_t InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(void **)(*(void *)(a2 + 48) + 96), *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants(mlir::Operation *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OneResult<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OneOperand<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::DeinterleaveOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::DeinterleaveOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::DeinterleaveOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::DeinterleaveOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *char v4 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *unint64_t v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::DeinterleaveOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::DeinterleaveOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::DeinterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::mpsx::DeinterleaveOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))goto LABEL_12; {
  mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
  }
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  size_t v23 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v25 = (void **)&v23;
  if (v25 == (void **)&v23)
  {
    v23[4]((void **)&v23);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_6:
      uint64_t v14 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v25) {
      (*((void (**)(void))*v25 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_6;
    }
  }
  v17[0] = "mpsx.deinterleave";
  v17[1] = (char *)17;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v23);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v23, "'", v17, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v23) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v24);
  }
  else
  {
LABEL_12:
    uint64_t v14 = 0;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return v14;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::mpsx::DeinterleaveOp::verifyInvariantsImpl((mlir::mpsx::DeinterleaveOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::mpsx::DeinterleaveOp::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::foldHook()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unint64_t v5 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v1 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0) {
        uint64_t v2 = v4;
      }
      else {
        uint64_t v2 = (llvm **)v4[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v2, v0);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  BOOL v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  char v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0) {
        uint64_t v8 = v10;
      }
      else {
        uint64_t v8 = (llvm **)v10[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0) {
      llvm::deallocate_buffer(v10[0], v10[1]);
    }
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
     + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
    {
      if ((v9 & 2) != 0) {
        char v7 = v8;
      }
      else {
        char v7 = (llvm **)v8[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7);
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneResult<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::FPToIntClampedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::Stitchable<mlir::mpsx::FPToIntClampedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::FPToIntClampedOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  uint64_t v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::FPToIntClampedOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::mpsx::FPToIntClampedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))goto LABEL_12; {
  mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
  }
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  size_t v23 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v25 = (void **)&v23;
  if (v25 == (void **)&v23)
  {
    v23[4]((void **)&v23);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_6:
      uint64_t v14 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v25) {
      (*((void (**)(void))*v25 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_6;
    }
  }
  v17[0] = "mpsx.fp_to_int_clamped";
  v17[1] = (char *)22;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v23);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v23, "'", v17, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v23) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v24);
  }
  else
  {
LABEL_12:
    uint64_t v14 = 0;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return v14;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v24 == a2
      || v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Stitchable<Empty>]";
      unint64_t v11 = 82;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[364];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneResult<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::FPToIntClampedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::Stitchable<mlir::mpsx::FPToIntClampedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::FPToIntClampedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneResult<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::FPToIntClampedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::Stitchable<mlir::mpsx::FPToIntClampedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::FPToIntClampedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (unint64_t v8 = a1, mlir::mpsx::FPToIntClampedOp::verifyInvariantsImpl((mlir::mpsx::FPToIntClampedOp *)&v8)))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::mpsx::GPUOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::GPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::GPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::GPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::GPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::GPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::GPUOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  void *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isDeclaration;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  *char v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeResAttrsAttr;
  unint64_t v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>>((uint64_t)a1);
  unint64_t v6 = malloc_type_malloc(0x30uLL, 0x800407D3415B1uLL);
  *unint64_t v6 = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeBody;
  v6[1] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeRegionBody;
  v6[2] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType;
  void v6[3] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionType;
  v6[4] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBody;
  v6[5] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBodyBlock;
  unint64_t v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  uint64_t v8 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v8 = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isRegionProfitable;
  v8[1] = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::build;
  unint64_t v9 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setNested(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPrivate(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPublic(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(a2 + 40);
  else {
    return 0;
  }
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::mpsx::ANEOp::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::mpsx::ANEOp::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(void **)(*(void *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 16));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>>(uint64_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  void *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)a1 + 16 * v4;
  do
  {
    unint64_t v7 = v4 >> 1;
    __int16 v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    unint64_t v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      unint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 != (void *)v6 && *v5 == v3) {
    uint64_t v11 = v5[1];
  }
  else {
LABEL_9:
  }
    uint64_t v11 = 0;
  v2[5] = v11;
  unint64_t v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  unint64_t v13 = *(unsigned int *)(a1 + 8);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = *(void *)a1 + 16 * v13;
  do
  {
    unint64_t v16 = v13 >> 1;
    uint64_t v17 = &v14[2 * (v13 >> 1)];
    unint64_t v19 = *v17;
    uint64_t v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12) {
      uint64_t v14 = v18;
    }
    else {
      unint64_t v13 = v16;
    }
  }
  while (v13);
  if (v14 != (void *)v15 && *v14 == v12) {
    uint64_t v20 = v14[1];
  }
  else {
LABEL_18:
  }
    uint64_t v20 = 0;
  v2[6] = v20;
  unint64_t v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();

  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v11);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyType()
{
  return 1;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return mlir::minimalLegalize(a2, a3, a4, a6);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeRegionBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return mlir::minimalLegalize(a2, a4, a5, a7);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 8);
  uint64_t v5 = mlir::TypeAttr::get(a3);

  mlir::Operation::setAttr(a2, v4, v5);
}

unint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBody(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(a2 + 40);
  else {
    return 0;
  }
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBodyBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    return v2 - 8;
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isRegionProfitable()
{
  return 1;
}

void mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::build(mlir::StringAttr **a1, uint64_t a2, void *a3, void *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__src, uint64_t a18)
{
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  uint64_t v25 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait>(void)::Empty>>();
  return v26 == a2
      || v25 == a2
      || v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, a3, a4, a5);
  uint64_t InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(void **)(*(void *)(a2 + 48) + 96), *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants(mlir::Operation *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OneResult<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::InterleaveOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OneOperand<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::InterleaveOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::InterleaveOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::InterleaveOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::InterleaveOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *char v4 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *unint64_t v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::InterleaveOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::InterleaveOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::InterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::mpsx::InterleaveOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))goto LABEL_12; {
  mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
  }
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  size_t v23 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v25 = (void **)&v23;
  if (v25 == (void **)&v23)
  {
    v23[4]((void **)&v23);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_6:
      uint64_t v14 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v25) {
      (*((void (**)(void))*v25 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_6;
    }
  }
  v17[0] = "mpsx.interleave";
  v17[1] = (char *)15;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v23);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v23, "'", v17, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v23) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v24);
  }
  else
  {
LABEL_12:
    uint64_t v14 = 0;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return v14;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::mpsx::DeinterleaveOp::verifyInvariantsImpl((mlir::mpsx::DeinterleaveOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::mpsx::InterleaveOp::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ListPopBackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::OpAsmOpInterface::Trait<mlir::mpsx::ListPopBackOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *char v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  uint64_t v8 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *uint64_t v8 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmResultNames;
  v8[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmBlockArgumentNames;
  v8[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmBlockNames;
  v8[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getDefaultDialect;
  unint64_t v9 = mlir::TypeID::get<mlir::OpAsmOpInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v17[2] = *MEMORY[0x263EF8340];
  v17[0] = a4;
  v17[1] = a5;
  unint64_t v11 = *(void *)(mlir::ValueRange::dereference_iterator(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(unsigned int *)(a11 + 8);
  if (v12 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v12) = v11;
  unsigned int v13 = *(_DWORD *)(a11 + 12);
  uint64_t v14 = (*(_DWORD *)(a11 + 8) + 1);
  *(_DWORD *)(a11 + 8) = v14;
  uint64_t v15 = *(void *)(v11 + 8);
  if (v14 >= v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v14) = v15;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, void (**a4)(void **), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPopBackOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPopBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, void (**a4)(void **), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  size_t v23 = a4;
  uint64_t v24 = a5;
  v22[0] = *(void *)(mlir::ValueRange::dereference_iterator(&v23, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v21) = 1;
  v22[1] = *(void *)(v22[0] + 8);
  LODWORD(v21) = 2;
  mlir::ValueRange::ValueRange(v19, (uint64_t)v22, 2uLL);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  size_t v23 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v25 = (void **)&v23;
  if (v25 == (void **)&v23)
  {
    v23[4]((void **)&v23);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_5:
      uint64_t v14 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    if (v25) {
      (*((void (**)(void))*v25 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_5;
    }
  }
  v17[0] = "mpsx.list_pop_back";
  v17[1] = (char *)18;
  if (a3)
  {
    mlir::emitError(a2, (uint64_t)&v23);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v23, "'", v17, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v23) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v24);
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_12:
  if (v20 != v22) {
    free(v20);
  }
  return v14;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v6 = a2 - 16;
  if (*(_DWORD *)(a2 + 36)) {
    uint64_t v7 = a2 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  a3(a4, NextResultAtOffset, "output_list", 11);
  if (*(_DWORD *)(a2 + 36)) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 1);
  uint64_t v11 = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);

  return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a3)(a4, v11, "element", 7);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

uint64_t mlir::TypeID::get<mlir::OpAsmOpInterface>()
{
  uint64_t v0 = &unk_267771000;
  {
    uint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v11 = 72;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      unint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[346];
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>>()
{
  uint64_t v0 = &unk_267771000;
  {
    uint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NResults<2>::Impl<Empty>]";
      unint64_t v11 = 89;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[348];
}

uint64_t mlir::TypeID::get<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>>()
{
  uint64_t v0 = &unk_267771000;
  {
    uint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v11 = 86;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[350];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyNResults(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v4))
  {
    return 0;
  }
  unint64_t v6 = a1;
  return mlir::mpsx::ListPopBackOp::verifyInvariantsImpl((mlir::mpsx::ListPopBackOp *)&v6);
}

BOOL mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::OneResult<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ListPushBackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ListPushBackOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ListPushBackOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ListPushBackOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *char v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::inferReturnTypesEqualToFirstArgumentType(a1, a2, a3, a4, a5, a6, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPushBackOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPushBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::inferReturnTypesEqualToFirstArgumentType(a1, a2, a3, a4, a5, a6, a9, a10, (uint64_t)&v20)) {
    goto LABEL_12;
  }
  mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  size_t v23 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v25 = (void **)&v23;
  if (v25 == (void **)&v23)
  {
    v23[4]((void **)&v23);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_6:
      uint64_t v14 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v25) {
      (*((void (**)(void))*v25 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_6;
    }
  }
  v17[0] = "mpsx.list_push_back";
  v17[1] = (char *)19;
  if (a3)
  {
    mlir::emitError(a2, (uint64_t)&v23);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v23, "'", v17, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v23) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v24);
  }
  else
  {
LABEL_12:
    uint64_t v14 = 0;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return v14;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::mpsx::ListPushBackOp::verifyInvariantsImpl((mlir::mpsx::ListPushBackOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::mpsx::ListPushBackOp::verify((mlir::mpsx::ListPushBackOp *)&v6) != 0;
}

BOOL mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::MakeListOp>,mlir::OpTrait::OneResult<mlir::mpsx::MakeListOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::MakeListOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::MakeListOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::MakeListOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::MakeListOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::MakeListOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::MakeListOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::MakeListOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *char v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::MakeListOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::MakeListOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::MakeListOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::mpsx::MakeListOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))goto LABEL_12; {
  mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
  }
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  size_t v23 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v25 = (void **)&v23;
  if (v25 == (void **)&v23)
  {
    v23[4]((void **)&v23);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_6:
      uint64_t v14 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v25) {
      (*((void (**)(void))*v25 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_6;
    }
  }
  v17[0] = "mpsx.make_list";
  v17[1] = (char *)14;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v23);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v23, "'", v17, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v23) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v24);
  }
  else
  {
LABEL_12:
    uint64_t v14 = 0;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return v14;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::mpsx::MakeListOp::verifyInvariantsImpl((mlir::mpsx::MakeListOp *)&v7);
}

BOOL mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedGatherOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedGatherOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *char v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::QuantizedGatherOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::mpsx::QuantizedGatherOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))goto LABEL_12; {
  mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
  }
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  size_t v23 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v25 = (void **)&v23;
  if (v25 == (void **)&v23)
  {
    v23[4]((void **)&v23);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_6:
      uint64_t v14 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v25) {
      (*((void (**)(void))*v25 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_6;
    }
  }
  v17[0] = "mpsx.quantized_gather";
  v17[1] = (char *)21;
  if (a3)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v23);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v23, "'", v17, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v23) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v24);
  }
  else
  {
LABEL_12:
    uint64_t v14 = 0;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return v14;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl>(void)::Empty>>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<4>::Impl<Empty>]";
      unint64_t v11 = 97;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[380];
}

uint64_t mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>>()
{
  uint64_t v0 = &unk_267772000;
  {
    uint64_t v0 = (void *)&unk_267772000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v11 = 96;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267772000;
    }
  }
  return v0[47];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedGatherOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedGatherOp>>(a1, a2))return 0; {
  unint64_t v4 = a1;
  }
  return mlir::mpsx::QuantizedGatherOp::verify(&v4);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedGatherOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedGatherOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)4)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
  {
    return 0;
  }
  unint64_t v6 = a1;
  return mlir::mpsx::QuantizedGatherOp::verifyInvariantsImpl((mlir::mpsx::QuantizedGatherOp *)&v6);
}

BOOL mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::populateDefaultAttrs(int a1, mlir::mpsx::QuantizedMatMulOp *this, mlir::OperationName *a3)
{
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedMatMulOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *char v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))goto LABEL_12; {
  mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
  }
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  size_t v23 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v25 = (void **)&v23;
  if (v25 == (void **)&v23)
  {
    v23[4]((void **)&v23);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_6:
      uint64_t v14 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v25) {
      (*((void (**)(void))*v25 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_6;
    }
  }
  v17[0] = "mpsx.quantized_matmul";
  v17[1] = (char *)21;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v23);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v23, "'", v17, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v23) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v24);
  }
  else
  {
LABEL_12:
    uint64_t v14 = 0;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return v14;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>>()
{
  uint64_t v0 = &unk_267771000;
  {
    uint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      unint64_t v11 = 97;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[441];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedMatMulOp>>(a1, a2))return 0; {
  unint64_t v4 = a1;
  }
  return mlir::mpsx::QuantizedMatMulOp::verify(&v4);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedMatMulOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
  {
    return 0;
  }
  unint64_t v6 = a1;
  return mlir::mpsx::QuantizedMatMulOp::verifyInvariantsImpl((mlir::mpsx::QuantizedMatMulOp *)&v6);
}

BOOL mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::RMSNormOp>,mlir::OpTrait::OneResult<mlir::mpsx::RMSNormOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::RMSNormOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::RMSNormOp>,mlir::OpTrait::NOperands<3u>::Impl<mlir::mpsx::RMSNormOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::RMSNormOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::RMSNormOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::RMSNormOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::RMSNormOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *char v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::inferReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15[2] = *MEMORY[0x263EF8340];
  v15[0] = a4;
  v15[1] = a5;
  if (a5)
  {
    unint64_t v11 = *(void *)(mlir::ValueRange::dereference_iterator(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    uint64_t v12 = mlir::Float32Type::get(a1, a2);
    unint64_t v11 = mlir::UnrankedTensorType::get(v12);
  }
  uint64_t v13 = *(unsigned int *)(a11 + 8);
  if (v13 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v13) = v11;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, char a3, void (**a4)(void **), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::RMSNormOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::RMSNormOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, char a3, void (**a4)(void **), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v22 = v24;
  uint64_t v23 = 0x400000000;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  if (a5)
  {
    unint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(&v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    uint64_t v14 = mlir::Float32Type::get(a1, a2);
    unint64_t v13 = mlir::UnrankedTensorType::get(v14);
  }
  *((void *)v22 + v23) = v13;
  LODWORD(v23) = v23 + 1;
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(void *)a11, *(unsigned int *)(a11 + 8));
  uint64_t v25 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v27 = (void **)&v25;
  if (v27 == (void **)&v25)
  {
    v25[4]((void **)&v25);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_8:
      uint64_t v16 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    if (v27) {
      (*((void (**)(void))*v27 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_8;
    }
  }
  v19[0] = "mpsx.rms_norm";
  v19[1] = (char *)13;
  if (a3)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v25);
    uint64_t v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
    if (v25) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
  }
  else
  {
    uint64_t v16 = 0;
  }
LABEL_15:
  if (v22 != v24) {
    free(v22);
  }
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)3)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::mpsx::RMSNormOp::verifyInvariantsImpl((mlir::mpsx::RMSNormOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::mpsx::RMSNormOp::verify((mlir::mpsx::RMSNormOp *)&v6) != 0;
}

BOOL mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && (uint64_t v7 = a1, mlir::mpsx::RegionReturnOp::verifyInvariantsImpl((mlir::mpsx::RegionReturnOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl>(void)::Empty>>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      char v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<Empty>]";
      unint64_t v11 = 111;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[402];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::IsTerminator<mlir::mpsx::ReturnStitchedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::IsTerminator<mlir::mpsx::ReturnStitchedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>::verifyTrait((uint64_t)a1)
      && mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3((uint64_t)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>::verifyTrait(uint64_t a1)
{
  v11[23] = *MEMORY[0x263EF8340];
  int v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v7 = 257;
  mlir::Operation::emitOpError(a1, &v6, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, "expects parent op ");
    if (v10)
    {
      mlir::Diagnostic::operator<<((uint64_t)v11, "'");
      if (v10)
      {
        __int16 v9 = 262;
        v8[0] = (void **)"mpsx.stitched";
        v8[1] = (void **)13;
        mlir::Diagnostic::operator<<((uint64_t)v11, v8);
        if (v10) {
          mlir::Diagnostic::operator<<((uint64_t)v11, "'");
        }
      }
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v4;
}

uint64_t mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneResult<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::SameOperandsElementType<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *char v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::inferReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v22 = v24;
  uint64_t v23 = 0x400000000;
  if (!mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, v17, v18, (uint64_t)&v22))goto LABEL_12; {
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  }
  mlir::ValueRange::ValueRange(v20, *(void *)a11, *(unsigned int *)(a11 + 8));
  uint64_t v25 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v27 = (void **)&v25;
  if (v27 == (void **)&v25)
  {
    v25[4]((void **)&v25);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_6:
      uint64_t v14 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v27) {
      (*((void (**)(void))*v27 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_6;
    }
  }
  v19[0] = "mpsx.sdpa";
  v19[1] = (char *)9;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v25);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v25) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
  }
  else
  {
LABEL_12:
    uint64_t v14 = 0;
  }
LABEL_13:
  if (v22 != v24) {
    free(v22);
  }
  return v14;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<5>::Impl<Empty>]";
      unint64_t v11 = 90;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[404];
}

uint64_t mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>>()
{
  uint64_t v0 = &unk_267772000;
  {
    uint64_t v0 = (void *)&unk_267772000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsElementType<Empty>]";
      unint64_t v11 = 95;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267772000;
    }
  }
  return v0[193];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneResult<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::SameOperandsElementType<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>>(a1, a2))return 0; {
  unint64_t v4 = a1;
  }
  return mlir::mpsx::ScaledDotProductAttentionOp::verify((mlir::mpsx::ScaledDotProductAttentionOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneResult<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::SameOperandsElementType<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)5)
    && (uint64_t v7 = a1,
        mlir::mpsx::ScaledDotProductAttentionOp::verifyInvariantsImpl((mlir::mpsx::ScaledDotProductAttentionOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifySameOperandsElementType(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::populateDefaultAttrs(int a1, mlir::mpsx::SparseDenseMatMulOp *this, mlir::OperationName *a3)
{
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::SparseDenseMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::SparseDenseMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::SparseDenseMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::SparseDenseMatMulOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *char v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))goto LABEL_12; {
  mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
  }
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  uint64_t v23 = (void (**)(void **))&unk_26C380EB8;
  uint64_t v25 = (void **)&v23;
  if (v25 == (void **)&v23)
  {
    v23[4]((void **)&v23);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_6:
      uint64_t v14 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v25) {
      (*((void (**)(void))*v25 + 5))();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_6;
    }
  }
  v17[0] = "mpsx.sparse_dense_matmul";
  v17[1] = (char *)24;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v23);
    uint64_t v15 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v23, "'", v17, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v23) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v24);
  }
  else
  {
LABEL_12:
    uint64_t v14 = 0;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return v14;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)5)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::mpsx::SparseDenseMatMulOp::verifyInvariantsImpl((mlir::mpsx::SparseDenseMatMulOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::mpsx::SparseDenseMatMulOp::verify(&v6) != 0;
}

BOOL mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneResult<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::StitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::StitchedOp>,mlir::OpTrait::RegionOp<mlir::mpsx::StitchedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::StitchedOp>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *char v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *unint64_t v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v20[2] = *MEMORY[0x263EF8340];
  v20[0] = a9;
  v20[1] = 0;
  unint64_t v11 = mlir::RegionRange::dereference_iterator(v20, 0);
  v20[0] = a11;
  uint64_t v12 = *(void *)(v11 + 8);
  if (v12 != v11)
  {
    unint64_t v13 = v11;
    do
    {
      uint64_t v14 = v12 - 8;
      if (!v12) {
        uint64_t v14 = 0;
      }
      uint64_t v15 = (ZinIrHalH13g *)(v14 + 32);
      uint64_t v16 = *(ZinIrHalH13g **)(v14 + 40);
      if (v16 != (ZinIrHalH13g *)(v14 + 32))
      {
        do
        {
          uint64_t v17 = (ZinIrHalH13g *)*((void *)v16 + 1);
          ZinIrHalH13g::~ZinIrHalH13g(v16);
          mlir::detail::walk<mlir::ForwardIterator>(v18, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::StitchedOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v20, 1);
          uint64_t v16 = v17;
        }
        while (v17 != v15);
      }
      uint64_t v12 = *(void *)(v12 + 8);
    }
    while (v12 != v13);
  }
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::StitchedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::StitchedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v28 = v30;
  uint64_t v29 = 0x400000000;
  unint64_t v31 = a9;
  uint64_t v32 = 0;
  unint64_t v13 = mlir::RegionRange::dereference_iterator(&v31, 0);
  unint64_t v31 = &v28;
  uint64_t v14 = *(void *)(v13 + 8);
  if (v14 != v13)
  {
    unint64_t v15 = v13;
    do
    {
      uint64_t v16 = v14 - 8;
      if (!v14) {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (ZinIrHalH13g *)(v16 + 32);
      uint64_t v18 = *(ZinIrHalH13g **)(v16 + 40);
      if (v18 != (ZinIrHalH13g *)(v16 + 32))
      {
        do
        {
          unint64_t v19 = (ZinIrHalH13g *)*((void *)v18 + 1);
          ZinIrHalH13g::~ZinIrHalH13g(v18);
          mlir::detail::walk<mlir::ForwardIterator>(v20, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::StitchedOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)&v31, 1);
          uint64_t v18 = v19;
        }
        while (v19 != v17);
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14 != v15);
  }
  mlir::ValueRange::ValueRange(v27, (uint64_t)v28, v29);
  mlir::ValueRange::ValueRange(v26, *(void *)a11, *(unsigned int *)(a11 + 8));
  unint64_t v31 = (void **)&unk_26C380EB8;
  unint64_t v33 = &v31;
  if (v33 == &v31)
  {
    ((void (*)(void ***))v31[4])(&v31);
    if (isCompatibleReturnTypesDefaultImpl)
    {
LABEL_13:
      uint64_t v22 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    if (v33) {
      ((void (*)(void))(*v33)[5])();
    }
    if (isCompatibleReturnTypesDefaultImpl) {
      goto LABEL_13;
    }
  }
  v25[0] = "mpsx.stitched";
  v25[1] = (char *)13;
  if (a3)
  {
    mlir::emitError(a2, (uint64_t)&v31);
    uint64_t v23 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v31, "'", v25, "' op inferred type(s) ", (uint64_t)&v28, " are incompatible with return type(s) of operation ", a11);
    uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
    if (v31) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v31);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v32);
  }
  else
  {
    uint64_t v22 = 0;
  }
LABEL_20:
  if (v28 != v30) {
    free(v28);
  }
  return v22;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C380EB8;
  unint64_t v7 = v6;
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneResult<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::StitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::StitchedOp>,mlir::OpTrait::RegionOp<mlir::mpsx::StitchedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::StitchedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneResult<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::StitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::StitchedOp>,mlir::OpTrait::RegionOp<mlir::mpsx::StitchedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::StitchedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 9)) {
    uint64_t v6 = (uint64_t)a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3((uint64_t)a1, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::mpsx::VarHandleOp::verifyInvariantsImpl((mlir::mpsx::VarHandleOp *)&v7);
}

uint64_t mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

void mlir::mpsx::MPSXOpFolderDialectInterface::~MPSXOpFolderDialectInterface(mlir::mpsx::MPSXOpFolderDialectInterface *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::DialectFoldInterface::fold()
{
  return 0;
}

BOOL mlir::mpsx::MPSXOpFolderDialectInterface::shouldMaterializeInto(mlir::mpsx::MPSXOpFolderDialectInterface *this, mlir::Region *a2)
{
  return *(void *)(*(void *)(*((void *)a2 + 2) + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id;
}

uint64_t mlir::TypeID::get<mlir::DialectFoldInterface>()
{
  uint64_t v0 = &unk_267772000;
  {
    uint64_t v0 = (void *)&unk_267772000;
    if (v2)
    {
      char v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
      unint64_t v11 = 76;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267772000;
    }
  }
  return v0[179];
}

void mlir::Dialect::addType<mlir::mpsx::ListType>(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = mlir::TypeID::get<mlir::mpsx::ListType>();
  mlir::AbstractType::get<mlir::mpsx::ListType>(a1, (uint64_t)v10);
  mlir::Dialect::addType(a1, v2, (uint64_t)v10);
  char v3 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 4) != 0)
    {
      if ((v15 & 2) != 0) {
        unint64_t v4 = v14;
      }
      else {
        unint64_t v4 = (llvm **)v14[0];
      }
      (*(void (**)(llvm **))((v15 & 0xFFFFFFFFFFFFFFF8) + 16))(v4);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v14[0], v14[1]);
    }
  }
  uint64_t v5 = (uint64_t *)v11;
  if (v12)
  {
    uint64_t v6 = 16 * v12;
    uint64_t v7 = (void **)((char *)v11 + 8);
    do
    {
      unint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = (uint64_t *)v11;
  }
  if (v5 != &v13) {
    free(v5);
  }
  uint64_t v9 = *(mlir::MLIRContext **)(a1 + 32);
  mlir::TypeID::get<mlir::mpsx::ListType>();
  mlir::MLIRContext::getTypeUniquer(v9);
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::AbstractType::get<mlir::mpsx::ListType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  memset(v14, 0, sizeof(v14));
  unsigned int v12 = v14;
  uint64_t v13 = 0x300000000;
  uint64_t v4 = mlir::TypeID::get<mlir::mpsx::ListType>();
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v13) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v12);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::mpsx::ListType,mlir::Type,mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v11;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_4mpsx8ListTypeES2_NSD_6detail29TypeWithStaticSubtypesStorageILj1EEENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(void *)(a2 + 112) = &v10;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_4mpsx8ListTypeES2_NSC_6detail29TypeWithStaticSubtypesStorageILj1EEENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(void *)(a2 + 128) = &v9;
  *(void *)(a2 + 136) = v4;
  uint64_t v5 = v12;
  if (v13)
  {
    uint64_t v6 = 16 * v13;
    uint64_t v7 = (void **)((char *)v12 + 8);
    do
    {
      unint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v12;
  }
  if (v5 != v14) {
    free(v5);
  }
}

uint64_t mlir::detail::StorageUserBase<mlir::mpsx::ListType,mlir::Type,mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_4mpsx8ListTypeES2_NSC_6detail29TypeWithStaticSubtypesStorageILj1EEENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = a2 + 16;
    unint64_t v4 = *(void *)a2;
    if (*(void *)a2 != a2 + 16)
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        unint64_t v4 = *(void *)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_38;
    }
    uint64_t v7 = (_DWORD *)(a2 + 8);
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8)
      {
        long long v11 = *(void **)a1;
        unint64_t v12 = (v8 - 1) & 0xFFFFFFFFFFFFFFFLL;
        if (v12 >= 9)
        {
          BOOL v17 = (unint64_t)v11 >= v4 + 16 * v8 || v4 >= (unint64_t)&v11[2 * v8];
          uint64_t v13 = *(void **)a2;
          if (v17)
          {
            unint64_t v18 = v12 + 1;
            uint64_t v19 = 2 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
            uint64_t v20 = &v11[v19];
            uint64_t v13 = (void *)(v4 + v19 * 8);
            uint64_t v21 = (const double *)(v4 + 32);
            uint64_t v22 = (double *)(v11 + 4);
            uint64_t v23 = v18 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v24 = v21 - 4;
              float64x2x2_t v37 = vld2q_f64(v24);
              float64x2x2_t v39 = vld2q_f64(v21);
              uint64_t v25 = v22 - 4;
              vst2q_f64(v25, v37);
              vst2q_f64(v22, v39);
              v21 += 8;
              v22 += 8;
              v23 -= 4;
            }
            while (v23);
            long long v11 = v20;
            if (v18 == (v18 & 0x1FFFFFFFFFFFFFFCLL)) {
              goto LABEL_37;
            }
          }
        }
        else
        {
          uint64_t v13 = *(void **)a2;
        }
        uint64_t v26 = (void *)(v4 + 16 * v8);
        do
        {
          void *v11 = *v13;
          v11[1] = v13[1];
          v13 += 2;
          v11 += 2;
        }
        while (v13 != v26);
      }
      goto LABEL_37;
    }
    if (*(_DWORD *)(a1 + 12) < v8)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 16);
      uint64_t v9 = 0;
      unint64_t v10 = *v7;
      if (!*v7) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    if (!v9)
    {
      uint64_t v9 = 0;
      goto LABEL_35;
    }
    uint64_t v14 = *(void **)a1;
    unint64_t v15 = (v9 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v15 >= 9)
    {
      if ((unint64_t)v14 >= v4 + 16 * v9 || (uint64_t v16 = *(void **)a2, v4 >= (unint64_t)&v14[2 * v9]))
      {
        unint64_t v27 = v15 + 1;
        uint64_t v28 = 2 * (v27 & 0x1FFFFFFFFFFFFFFCLL);
        uint64_t v29 = &v14[v28];
        uint64_t v16 = (void *)(v4 + v28 * 8);
        unint64_t v30 = (const double *)(v4 + 32);
        unint64_t v31 = (double *)(v14 + 4);
        uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v33 = v30 - 4;
          float64x2x2_t v38 = vld2q_f64(v33);
          float64x2x2_t v40 = vld2q_f64(v30);
          uint64_t v34 = v31 - 4;
          vst2q_f64(v34, v38);
          vst2q_f64(v31, v40);
          v30 += 8;
          v31 += 8;
          v32 -= 4;
        }
        while (v32);
        uint64_t v14 = v29;
        if (v27 == (v27 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          unint64_t v10 = v8;
          if (v9 != v8) {
LABEL_36:
          }
            memcpy((void *)(*(void *)a1 + 16 * v9), (const void *)(*(void *)a2 + 16 * v9), *(void *)a2 + 16 * v10 - (*(void *)a2 + 16 * v9));
LABEL_37:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_38:
          *uint64_t v7 = 0;
          return a1;
        }
      }
    }
    else
    {
      uint64_t v16 = *(void **)a2;
    }
    uint64_t v35 = (void *)(v4 + 16 * v9);
    do
    {
      void *v14 = *v16;
      v14[1] = v16[1];
      v16 += 2;
      v14 += 2;
    }
    while (v16 != v35);
    goto LABEL_35;
  }
  return a1;
}

BOOL mlir::mpsx::anonymous namespace'::qimpl::verifyAffineQuant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v28[23] = *MEMORY[0x263EF8340];
  uint64_t v25 = a1;
  uint64_t v26 = a6;
  v24[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8));
  v24[1] = v11;
  if (!v24[0] || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v24)) {
    return 1;
  }
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v24[0]);
  if (ElementTypeOrSelf == mlir::getElementTypeOrSelf((void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8)))
  {
    uint64_t v21 = 0;
    if ((a6 & 0xFF00000000) != 0)
    {
      mlir::ShapedType::getShape((mlir::ShapedType *)v24);
      if ((int)a6 < 0) {
        int v15 = v14;
      }
      else {
        int v15 = 0;
      }
      unsigned int v16 = v15 + a6;
      if ((v16 & 0x80000000) != 0 || (uint64_t v17 = v16, mlir::ShapedType::getShape((mlir::ShapedType *)v24), v17 > v18))
      {
        goto LABEL_12;
      }
      uint64_t v21 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v24) + 8 * v17);
    }
    unint64_t v27 = &v26;
    v28[0] = &v25;
    v28[1] = &v21;
    v28[2] = v24;
  }
  uint64_t v13 = "input and zeroPoint types must match";
LABEL_12:
  uint64_t v22 = (void **)v13;
  __int16 v23 = 259;
  mlir::Operation::emitOpError(a1, &v22, (uint64_t)&v27);
  uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v27);
  if (v27) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v28);
  return v19;
}

BOOL mlir::mpsx::QuantizedMatMulOp::isWeightsQuantized(mlir::Operation **this)
{
  int v14 = *this;
  uint64_t v2 = v14;
  unint64_t ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 5);
  if ((*((unsigned char *)v2 + 46) & 0x80) != 0) {
    uint64_t v4 = *((void *)v2 + 9);
  }
  else {
    uint64_t v4 = 0;
  }
  if (HIDWORD(ODSOperandIndexAndLength) + ODSOperandIndexAndLength != (unint64_t)ODSOperandIndexAndLength
    && *(void *)(v4 + 32 * ODSOperandIndexAndLength + 24))
  {
    unint64_t v5 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 9);
    uint64_t v6 = (*((unsigned char *)v2 + 46) & 0x80) != 0 ? *((void *)v2 + 9) : 0;
    if (HIDWORD(v5) + v5 == (unint64_t)v5
      || !*(void *)(v6 + 32 * v5 + 24))
    {
      return 1;
    }
  }
  int v14 = *this;
  uint64_t v7 = v14;
  unint64_t v8 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 8);
  uint64_t v9 = (*((unsigned char *)v7 + 46) & 0x80) != 0 ? *((void *)v7 + 9) : 0;
  if (HIDWORD(v8) + v8 != (unint64_t)v8 && *(void *)(v9 + 32 * v8 + 24)) {
    return 1;
  }
  long long v11 = *this;
  int v14 = v11;
  unint64_t v12 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 9);
  if ((*((unsigned char *)v11 + 46) & 0x80) != 0) {
    uint64_t v13 = *((void *)v11 + 9);
  }
  else {
    uint64_t v13 = 0;
  }
  return HIDWORD(v12) + v12 != (unint64_t)v12
      && *(void *)(v13 + 32 * v12 + 24) != 0;
}

uint64_t mlir::mpsx::anonymous namespace'::qimpl::verifyAffineQuant(mlir::Operation *,mlir::Value,mlir::Value,mlir::Value,mlir::Value,std::optional<int>)::$_0::operator()(uint64_t a1, char *a2, uint64_t a3)
{
  v68[19] = *MEMORY[0x263EF8340];
  unint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v60[0] = v5;
  v60[1] = v6;
  if (!*(unsigned char *)(*(void *)a1 + 4))
  {
    if (v5 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60))
    {
      uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
      if (v21)
      {
        uint64_t v22 = 8 * v21;
        while (*Shape != 0x8000000000000000)
        {
          ++Shape;
          v22 -= 8;
          if (!v22) {
            goto LABEL_30;
          }
        }
        return 1;
      }
LABEL_30:
      mlir::ShapedType::getShape((mlir::ShapedType *)v60);
      if (v23 > 1)
      {
        if (mlir::CallOpInterface::getArgOperands(*(mlir::CallOpInterface **)(a1 + 24)))
        {
          mlir::ShapedType::getShape(*(mlir::ShapedType **)(a1 + 24));
          uint64_t v28 = v27;
          mlir::ShapedType::getShape((mlir::ShapedType *)v60);
          if (v28 != v29)
          {
            uint64_t v51 = **(void **)(a1 + 8);
            __int16 v59 = 257;
            mlir::Operation::emitOpError(v51, v58, (uint64_t)&v63);
            if (!v63) {
              goto LABEL_65;
            }
            mlir::Diagnostic::operator<<((uint64_t)v64, "ND ");
            if (!v63) {
              goto LABEL_65;
            }
            mlir::Diagnostic::operator<<((uint64_t)v64, a2);
            if (!v63) {
              goto LABEL_65;
            }
            uint64_t v19 = " rank differs from input rank";
            goto LABEL_64;
          }
        }
        mlir::ShapedType::getShape(*(mlir::ShapedType **)(a1 + 24));
        if (v30)
        {
          unint64_t v31 = 0;
          while (1)
          {
            uint64_t v34 = 8 * v31;
            uint64_t v35 = *(void *)(mlir::ShapedType::getShape(*(mlir::ShapedType **)(a1 + 24)) + v34);
            uint64_t v36 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v60) + v34);
            BOOL v37 = v35 == 0x8000000000000000 || v36 == 0x8000000000000000;
            if (!v37 && v35 % v36) {
              break;
            }
            ++v31;
            mlir::ShapedType::getShape(*(mlir::ShapedType **)(a1 + 24));
            uint64_t v10 = 1;
            if (v31 >= v33) {
              return v10;
            }
          }
          uint64_t v38 = **(void **)(a1 + 8);
          __int16 v59 = 257;
          mlir::Operation::emitOpError(v38, v58, (uint64_t)&v63);
          if (!v63) {
            goto LABEL_8;
          }
          mlir::Diagnostic::operator<<((uint64_t)v64, a2);
          if (!v63) {
            goto LABEL_8;
          }
          mlir::Diagnostic::operator<<((uint64_t)v64, " shape not compatible with input for axis ");
          if (!v63) {
            goto LABEL_8;
          }
          int v61 = 5;
          uint64_t v62 = v31;
          float64x2x2_t v39 = &v61;
          unint64_t v40 = v65;
          if (v66 >= v67)
          {
            unint64_t v52 = v66 + 1;
            if (v65 <= (unint64_t)&v61 && v65 + 24 * v66 > (unint64_t)&v61)
            {
              unint64_t v55 = (char *)&v61 - v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
              unint64_t v40 = v65;
              float64x2x2_t v39 = (int *)&v55[v65];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
              float64x2x2_t v39 = &v61;
              unint64_t v40 = v65;
            }
          }
          unint64_t v41 = v40 + 24 * v66;
          long long v42 = *(_OWORD *)v39;
          *(void *)(v41 + 16) = *((void *)v39 + 2);
          *(_OWORD *)unint64_t v41 = v42;
          ++v66;
          if (!v63) {
            goto LABEL_8;
          }
          mlir::Diagnostic::operator<<((uint64_t)v64, ": ");
          if (!v63) {
            goto LABEL_8;
          }
          int v61 = 2;
          uint64_t v62 = v35;
          uint64_t v43 = &v61;
          unint64_t v44 = v65;
          if (v66 >= v67)
          {
            unint64_t v53 = v66 + 1;
            if (v65 <= (unint64_t)&v61 && v65 + 24 * v66 > (unint64_t)&v61)
            {
              unsigned int v56 = (char *)&v61 - v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v53, 24);
              unint64_t v44 = v65;
              uint64_t v43 = (int *)&v56[v65];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v53, 24);
              uint64_t v43 = &v61;
              unint64_t v44 = v65;
            }
          }
          unint64_t v45 = v44 + 24 * v66;
          long long v46 = *(_OWORD *)v43;
          *(void *)(v45 + 16) = *((void *)v43 + 2);
          *(_OWORD *)unint64_t v45 = v46;
          ++v66;
          if (!v63) {
            goto LABEL_8;
          }
          mlir::Diagnostic::operator<<((uint64_t)v64, " % ");
          if (!v63) {
            goto LABEL_8;
          }
          int v61 = 2;
          uint64_t v62 = v36;
          uint64_t v47 = &v61;
          unint64_t v48 = v65;
          if (v66 >= v67)
          {
            unint64_t v54 = v66 + 1;
            if (v65 <= (unint64_t)&v61 && v65 + 24 * v66 > (unint64_t)&v61)
            {
              unsigned int v57 = (char *)&v61 - v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              unint64_t v48 = v65;
              uint64_t v47 = (int *)&v57[v65];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              uint64_t v47 = &v61;
              unint64_t v48 = v65;
            }
          }
          unint64_t v49 = v48 + 24 * v66;
          long long v50 = *(_OWORD *)v47;
          *(void *)(v49 + 16) = *((void *)v47 + 2);
          *(_OWORD *)unint64_t v49 = v50;
          ++v66;
          if (!v63) {
            goto LABEL_8;
          }
          uint64_t v9 = " != 0";
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v24 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
        if (mlir::ShapedType::getNumElements(v24, v25) != 1)
        {
          uint64_t v26 = **(void **)(a1 + 8);
          __int16 v59 = 257;
          mlir::Operation::emitOpError(v26, v58, (uint64_t)&v63);
          if (!v63) {
            goto LABEL_8;
          }
          if (!v63) {
            goto LABEL_8;
          }
          mlir::Diagnostic::operator<<((uint64_t)v64, a2);
          if (!v63) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
    }
    return 1;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60)
    || (mlir::ShapedType::getShape((mlir::ShapedType *)v60), v7 < 2))
  {
    if (v60[0]
      && **(void **)(a1 + 16) != 0x8000000000000000
      && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60))
    {
      long long v11 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
      if (v12)
      {
        uint64_t v13 = 8 * v12;
        while (*v11 != 0x8000000000000000)
        {
          ++v11;
          v13 -= 8;
          if (!v13) {
            goto LABEL_18;
          }
        }
        return 1;
      }
LABEL_18:
      int v14 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
      if (mlir::ShapedType::getNumElements(v14, v15) != **(void **)(a1 + 16))
      {
        unsigned int v16 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
        if (mlir::ShapedType::getNumElements(v16, v17) != 1)
        {
          uint64_t v18 = **(void **)(a1 + 8);
          __int16 v59 = 257;
          mlir::Operation::emitOpError(v18, v58, (uint64_t)&v63);
          if (!v63) {
            goto LABEL_65;
          }
          mlir::Diagnostic::operator<<((uint64_t)v64, "input and ");
          if (!v63) {
            goto LABEL_65;
          }
          mlir::Diagnostic::operator<<((uint64_t)v64, a2);
          if (!v63) {
            goto LABEL_65;
          }
LABEL_64:
          mlir::Diagnostic::operator<<((uint64_t)v64, v19);
LABEL_65:
          uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v63);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v63);
          return v10;
        }
      }
    }
    return 1;
  }
  uint64_t v8 = **(void **)(a1 + 8);
  __int16 v59 = 257;
  mlir::Operation::emitOpError(v8, v58, (uint64_t)&v63);
  if (!v63) {
    goto LABEL_8;
  }
  mlir::Diagnostic::operator<<((uint64_t)v64, a2);
  if (!v63) {
    goto LABEL_8;
  }
  uint64_t v9 = " rank must be 0 or 1";
LABEL_7:
  mlir::Diagnostic::operator<<((uint64_t)v64, v9);
LABEL_8:
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v63);
  if (v63) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v63);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v64);
  return v10;
}

void std::__function::__func<mlir::mpsx::anonymous namespace'::$_1,std::allocator<mlir::mpsx::anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::~__func()
{
}

void *std::__function::__func<mlir::mpsx::anonymous namespace'::$_1,std::allocator<mlir::mpsx::anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C380EB8;
  return result;
}

void std::__function::__func<mlir::mpsx::anonymous namespace'::$_1,std::allocator<mlir::mpsx::anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C380EB8;
}

BOOL std::__function::__func<mlir::mpsx::anonymous namespace'::$_1,std::allocator<mlir::mpsx::anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

void llvm::detail::stream_operator_format_adapter<mlir::Type &>::~stream_operator_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<mlir::Type &>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v3 = **(void **)(a1 + 8);
  return mlir::Type::print((llvm::raw_ostream *)&v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(llvm::Twine const&)>::callback_fn<mlir::mpsx::SparseDenseMatMulOp::verify(void)::$_0>(uint64_t **a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
}

unint64_t mlir::getSingleIntValue<long long>(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  v10[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v11);
  v10[1] = v2;
  uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v10);
  if (mlir::ShapedType::getNumElements(Shape, v4) == 1
    && (v9[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v11),
        v9[1] = v5,
        *(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v9) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
  {
    v9[0] = 0;
    mlir::copyElementsAttrData<long long>(v11, v12, (uint64_t)v9, 1);
    unint64_t v7 = v9[0] & 0xFFFFFFFFFFFFFF00;
    uint64_t v6 = LOBYTE(v9[0]);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  return v7 | v6;
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[47],char const(&)[9],long long &>(uint64_t a1, uint64_t *a2, char *__s, char *a4, uint64_t *a5)
{
  unint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = v11;
  uint64_t v12 = *a2;
  int v21 = 2;
  uint64_t v22 = v12;
  uint64_t v13 = *(unsigned int *)(v9 + 8);
  int v14 = &v21;
  if (v13 >= *(_DWORD *)(v9 + 12))
  {
    unint64_t v18 = v13 + 1;
    BOOL v19 = v10 + 24 * v13 > (unint64_t)&v21;
    if (v10 <= (unint64_t)&v21 && v19)
    {
      uint64_t v20 = (char *)&v21 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      int v14 = (int *)&v20[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      int v14 = &v21;
    }
  }
  uint64_t v15 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = *((void *)v14 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return mlir::Diagnostic::append<char const(&)[9],long long &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[9],long long &>(uint64_t a1, char *a2, uint64_t *a3)
{
  mlir::Diagnostic::operator<<(a1, a2);
  uint64_t v5 = a1 + 16;
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *a3;
  int v16 = 2;
  uint64_t v17 = v7;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v16;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v13 = v8 + 1;
    BOOL v14 = v6 + 24 * v8 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v14)
    {
      uint64_t v15 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v15[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      uint64_t v9 = &v16;
    }
  }
  uint64_t v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  uint64_t v17 = *a5;
  unint64_t v6 = &unk_267770000;
  {
    BOOL v14 = a1;
    unint64_t v6 = &unk_267770000;
    int v11 = v10;
    uint64_t v5 = a4;
    a1 = v14;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      unint64_t v6 = (void *)&unk_267770000;
      uint64_t v5 = a4;
      a1 = v14;
    }
  }
  uint64_t v7 = v6[385];
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (8 * ((v17 >> 4) ^ (v17 >> 9)) + 8));
  v15[0] = &v17;
  v15[1] = v18;
  int v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 32) >> 15) ^ (-348639895* (v7 ^ (v8 >> 47) ^ v8))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return **a1 == *(void *)(a2 + 8);
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>::construct(a2, *(void **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>::construct(uint64_t a1, void *a2)
{
  *(void *)(a1 + 80) += 16;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 16 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    uint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t result = (void *)((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a1 = result + 2;
  *uint64_t result = 0;
  result[1] = *a2;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir4mpsx6detail29TypeWithStaticSubtypesStorageILj1EEEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_8ListTypeEJRNSt3__15arrayINS1_4TypeELm1EEEEEENSE_9enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS6_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void std::__function::__func<mlir::mpsx::anonymous namespace'::$_4,std::allocator<mlir::mpsx::anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::~__func()
{
}

void *std::__function::__func<mlir::mpsx::anonymous namespace'::$_4,std::allocator<mlir::mpsx::anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C3282B0;
  return result;
}

void std::__function::__func<mlir::mpsx::anonymous namespace'::$_4,std::allocator<mlir::mpsx::anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3282B0;
}

BOOL std::__function::__func<mlir::mpsx::anonymous namespace'::$_4,std::allocator<mlir::mpsx::anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::ANEOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::GPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::CPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::StitchedOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t *a1, uint64_t a2)
{
  if (a2
    && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id)
  {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v3 = *a1;
    uint64_t v4 = *(unsigned int *)(*a1 + 8);
    if (v4 >= *(_DWORD *)(*a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, (void *)(v3 + 16), v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(v3 + 8);
    }
    *(void *)(*(void *)v3 + 8 * v4) = v2;
    ++*(_DWORD *)(v3 + 8);
  }
}

BOOL mlir::mpsx::isMPSXListElementType(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 136);
  if (v2 == mlir::TypeID::get<mlir::mpsx::ListType>()) {
    return 1;
  }
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void **)(*(void *)a1 + 136);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  uint64_t v5 = v4 ? a1 : 0;
  uint64_t v8 = v5;
  if (!v4) {
    return 0;
  }
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v8);
  return mlir::Type::isIntOrFloat((mlir::Type *)&ElementType);
}

uint64_t mlir::mpsx::MPSXDialect::parseType(uint64_t a1, mlir::AsmParser *this)
{
  v26[23] = *MEMORY[0x263EF8340];
  int v16 = 0;
  uint64_t v17 = 0;
  if (!mlir::AsmParser::parseKeyword(this, (llvm::StringRef *)&v16)) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)this + 16))(this);
  uint64_t v5 = (*(uint64_t (**)(mlir::AsmParser *, uint64_t))(*(void *)this + 48))(this, v4);
  if (v17 != 4)
  {
    uint64_t v6 = v16;
    goto LABEL_12;
  }
  uint64_t v6 = v16;
  if (*v16 != 1953720684)
  {
LABEL_12:
    __int16 v24 = 1283;
    int v21 = "unknown MPS type: ";
    v23[0] = v6;
    v23[1] = v17;
    mlir::emitError(v5, (uint64_t)&v21, (uint64_t)&v25);
    if (v25) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v26);
    return 0;
  }
  uint64_t v7 = *(mlir::MLIRContext **)(a1 + 32);
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)this + 160))(this)) {
    return 0;
  }
  int v21 = v23;
  uint64_t v22 = 0x100000000;
  do
  {
    v19[0] = 0;
    if (!mlir::AsmParser::parseType<mlir::Type>((uint64_t)this, v19)) {
      goto LABEL_21;
    }
    uint64_t v8 = v19[0];
    uint64_t v9 = v22;
    if (v22 >= (unint64_t)HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
      uint64_t v9 = v22;
    }
    *((void *)v21 + v9) = v8;
    LODWORD(v22) = v22 + 1;
  }
  while ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)this + 128))(this));
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)this + 168))(this)) {
    BOOL v13 = v22 == 1;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13)
  {
LABEL_21:
    uint64_t v10 = 0;
    goto LABEL_23;
  }
  uint64_t v18 = *(void *)v21;
  uint64_t v14 = mlir::TypeID::get<mlir::mpsx::ListType>();
  uint64_t v20 = v7;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(v7);
  v19[0] = v14;
  v19[1] = &v20;
  uint64_t v10 = mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir4mpsx6detail29TypeWithStaticSubtypesStorageILj1EEEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_8ListTypeEJRNSt3__15arrayINS1_4TypeELm1EEEEEENSE_9enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS6_, (uint64_t)v19, v14, &v18);
LABEL_23:
  if (v21 != v23) {
    free(v21);
  }
  return v10;
}

llvm::raw_ostream *mlir::mpsx::MPSXDialect::printType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v5 = *(void *)(*(void *)a2 + 136);
    if (v5 != mlir::TypeID::get<mlir::mpsx::ListType>()) {
      uint64_t v4 = 0;
    }
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  uint64_t v7 = (_DWORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 3uLL)
  {
    *uint64_t v7 = 1953720684;
    *((void *)v6 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v6, "list", 4uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if (*((unsigned char **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "<", 1uLL);
  }
  else
  {
    *uint64_t v9 = 60;
    ++*((void *)v8 + 4);
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 32))(a3, *(void *)(v4 + 8));
  uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  int v11 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v11)
  {
    return llvm::raw_ostream::write(result, ">", 1uLL);
  }
  else
  {
    unsigned char *v11 = 62;
    ++*((void *)result + 4);
  }
  return result;
}

uint64_t mlir::AsmParser::parseType<mlir::Type>(uint64_t a1, void *a2)
{
  v12[23] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v10 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v10)) {
    return 0;
  }
  uint64_t v5 = v10;
  *a2 = v10;
  if (v5) {
    return 1;
  }
  uint64_t v8 = "invalid kind of type specified";
  __int16 v9 = 259;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(&v11, a1, v4, &v8);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v6;
}

BOOL mlir::impl::foldCastInterfaceOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(a1 + 46) & 0x80) == 0) {
    return 0;
  }
  unint64_t v4 = *(unsigned int *)(a1 + 68);
  uint64_t v30 = *(void *)(a1 + 72);
  unint64_t v31 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 36);
  uint64_t v7 = a1 - 16;
  if (!v6) {
    uint64_t v7 = 0;
  }
  v29[0] = v7;
  v29[1] = v6;
  mlir::OperandRange::getTypes(&v30, v28);
  mlir::OperandRange::getTypes(v29, v27);
  BOOL result = mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(v28, v27);
  if (result)
  {
    uint64_t v10 = v30;
    unint64_t v9 = v31;
    uint64_t v11 = *(unsigned int *)(a4 + 8);
    if (v31 + v11 > *(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v31 + v11, 8);
      LODWORD(v11) = *(_DWORD *)(a4 + 8);
    }
    if (v9)
    {
      uint64_t v12 = *(void *)a4;
      BOOL v13 = (uint64_t *)(*(void *)a4 + 8 * v11);
      if (v9 >= 0xB
        && ((uint64_t v14 = v11, (unint64_t)v13 >= v10 + 32 * v9)
         || v10 + 24 >= v12 + 8 * (v9 + v11)))
      {
        uint64_t v16 = v9 & 3;
        if ((v9 & 3) == 0) {
          uint64_t v16 = 4;
        }
        unint64_t v15 = v9 - v16;
        v13 += v15;
        uint64_t v17 = (const double *)(v10 + 88);
        uint64_t v18 = (int8x16_t *)(v12 + 8 * v14 + 16);
        unint64_t v19 = v15;
        do
        {
          uint64_t v20 = v17 - 8;
          unsigned long long v21 = (unsigned __int128)vld4q_f64(v20);
          unsigned long long v22 = (unsigned __int128)vld4q_f64(v17);
          int8x16_t v23 = (int8x16_t)vdupq_n_s64(4uLL);
          v18[-1] = vorrq_s8((int8x16_t)v21, v23);
          *uint64_t v18 = vorrq_s8((int8x16_t)v22, v23);
          v17 += 16;
          v18 += 2;
          v19 -= 4;
        }
        while (v19);
      }
      else
      {
        unint64_t v15 = 0;
      }
      unint64_t v24 = v9 - v15;
      uint64_t v25 = (uint64_t *)(v10 + 32 * v15 + 24);
      do
      {
        uint64_t v26 = *v25;
        v25 += 4;
        *v13++ = v26 | 4;
        --v24;
      }
      while (v24);
      LODWORD(v11) = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(a4 + 8) = v11 + v9;
    return 1;
  }
  return result;
}

uint64_t mlir::impl::verifyCastInterfaceOp(mlir::impl *this, mlir::Operation *a2)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((unsigned int *)this + 9);
  unint64_t v4 = (char *)this - 16;
  if (!v3) {
    unint64_t v4 = 0;
  }
  uint64_t v97 = v4;
  v98[0] = v3;
  mlir::OperandRange::getTypes((uint64_t *)&v97, (uint64_t *)&v91);
  if (v91 != v93 || v92 != v94)
  {
    if ((*((unsigned char *)this + 46) & 0x80) != 0)
    {
      uint64_t v6 = *((void *)this + 9);
      unint64_t v7 = *((unsigned int *)this + 17);
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
    }
    uint64_t v97 = (char *)v6;
    v98[0] = v7;
    mlir::OperandRange::getTypes((uint64_t *)&v97, &v83);
    uint64_t v8 = *((void *)this + 6);
    unint64_t v9 = *(void **)(v8 + 16);
    BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
    if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *((void *)this + 6);
    }
    if (v10)
    {
      uint64_t v97 = *(char **)(v8 + 8);
      uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v97);
      if (!Values)
      {
        BOOL v13 = 0;
LABEL_36:
        mlir::ValueRange::ValueRange((unint64_t *)&v97, v83 + 32 * v84, v86 - v84);
        mlir::TypeRange::TypeRange(v96, (uint64_t)v97, v98[0]);
        uint64_t NextResultAtOffset = v91;
        uint64_t v30 = v92;
        uint64_t v31 = v94;
        if (v92) {
          uint64_t NextResultAtOffset = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v91, v92);
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v97, (uint64_t)NextResultAtOffset, v31 - v30);
        mlir::TypeRange::TypeRange(v95, (uint64_t)v97, v98[0]);
        if ((*v13)(v96[0], v96[1], v95[0], v95[1])) {
          return 1;
        }
        uint64_t v87 = (void **)"operand type";
        __int16 v90 = 259;
        mlir::Operation::emitOpError((uint64_t)this, &v87, (uint64_t)&v97);
        if (v83 == v85 && v86 == v84)
        {
          if (!v97) {
            goto LABEL_58;
          }
          LODWORD(v87) = 3;
          unint64_t v88 = "s []";
          uint64_t v89 = 4;
          uint64_t v32 = &v87;
          unint64_t v33 = (char *)v99;
          if (v100 >= v101)
          {
            unint64_t v71 = v100 + 1;
            if (v99 <= &v87 && (char *)v99 + 24 * v100 > (char *)&v87)
            {
              int64_t v78 = (char *)&v87 - (unsigned char *)v99;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v71, 24);
              unint64_t v33 = (char *)v99;
              uint64_t v32 = (void ***)((char *)v99 + v78);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v71, 24);
              uint64_t v32 = &v87;
              unint64_t v33 = (char *)v99;
            }
          }
          uint64_t v34 = &v33[24 * v100];
          long long v35 = *(_OWORD *)v32;
          uint64_t v36 = v32[2];
LABEL_51:
          *((void *)v34 + 2) = v36;
          *(_OWORD *)uint64_t v34 = v35;
          ++v100;
          if (!v97) {
            goto LABEL_58;
          }
          goto LABEL_52;
        }
        if (v86 - v84 == 1)
        {
          if (v97)
          {
            LODWORD(v87) = 3;
            unint64_t v88 = " ";
            uint64_t v89 = 1;
            BOOL v37 = &v87;
            uint64_t v38 = (char *)v99;
            if (v100 >= v101)
            {
              unint64_t v72 = v100 + 1;
              if (v99 <= &v87 && (char *)v99 + 24 * v100 > (char *)&v87)
              {
                int64_t v79 = (char *)&v87 - (unsigned char *)v99;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v72, 24);
                uint64_t v38 = (char *)v99;
                BOOL v37 = (void ***)((char *)v99 + v79);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v72, 24);
                BOOL v37 = &v87;
                uint64_t v38 = (char *)v99;
              }
            }
            float64x2x2_t v39 = &v38[24 * v100];
            long long v40 = *(_OWORD *)v37;
            *((void *)v39 + 2) = v37[2];
            *(_OWORD *)float64x2x2_t v39 = v40;
            ++v100;
            if (v97)
            {
              unint64_t v41 = &v87;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v87, *(void *)(*(void *)(v83 + 32 * v84 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
              long long v42 = (char *)v99;
              if (v100 >= v101)
              {
                unint64_t v74 = v100 + 1;
                if (v99 <= &v87 && (char *)v99 + 24 * v100 > (char *)&v87)
                {
                  int64_t v81 = (char *)&v87 - (unsigned char *)v99;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v74, 24);
                  long long v42 = (char *)v99;
                  unint64_t v41 = (void ***)((char *)v99 + v81);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v74, 24);
                  unint64_t v41 = &v87;
                  long long v42 = (char *)v99;
                }
              }
              uint64_t v34 = &v42[24 * v100];
              long long v35 = *(_OWORD *)v41;
              uint64_t v36 = v41[2];
              goto LABEL_51;
            }
          }
        }
        else if (v97)
        {
          LODWORD(v87) = 3;
          unint64_t v88 = "s ";
          uint64_t v89 = 2;
          uint64_t v47 = &v87;
          unint64_t v48 = (char *)v99;
          if (v100 >= v101)
          {
            unint64_t v73 = v100 + 1;
            if (v99 <= &v87 && (char *)v99 + 24 * v100 > (char *)&v87)
            {
              int64_t v80 = (char *)&v87 - (unsigned char *)v99;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v73, 24);
              unint64_t v48 = (char *)v99;
              uint64_t v47 = (void ***)((char *)v99 + v80);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v73, 24);
              uint64_t v47 = &v87;
              unint64_t v48 = (char *)v99;
            }
          }
          unint64_t v49 = &v48[24 * v100];
          long long v50 = *(_OWORD *)v47;
          *((void *)v49 + 2) = v47[2];
          *(_OWORD *)unint64_t v49 = v50;
          ++v100;
          if (v97)
          {
            uint64_t v87 = (void **)", ";
            llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::OperandRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(void)#1},void>(v83, v84, v85, v86, (uint64_t)v98, (uint64_t)v98, (const char **)&v87);
            if (v97)
            {
LABEL_52:
              LODWORD(v87) = 3;
              unint64_t v88 = " and result type";
              uint64_t v89 = 16;
              uint64_t v43 = &v87;
              unint64_t v44 = (char *)v99;
              if (v100 >= v101)
              {
                unint64_t v70 = v100 + 1;
                if (v99 <= &v87 && (char *)v99 + 24 * v100 > (char *)&v87)
                {
                  int64_t v77 = (char *)&v87 - (unsigned char *)v99;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v70, 24);
                  unint64_t v44 = (char *)v99;
                  uint64_t v43 = (void ***)((char *)v99 + v77);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v70, 24);
                  uint64_t v43 = &v87;
                  unint64_t v44 = (char *)v99;
                }
              }
              unint64_t v45 = &v44[24 * v100];
              long long v46 = *(_OWORD *)v43;
              *((void *)v45 + 2) = v43[2];
              *(_OWORD *)unint64_t v45 = v46;
              ++v100;
            }
          }
        }
LABEL_58:
        if (v94 - v92 == 1) {
          uint64_t v51 = " ";
        }
        else {
          uint64_t v51 = "s ";
        }
        uint64_t v82 = v51;
        unint64_t v52 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)&v97, &v82);
        uint64_t v53 = (uint64_t)v52;
        if (*v52)
        {
          uint64_t v87 = (void **)", ";
          llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::ResultRange>>(mlir::ValueTypeRange<mlir::ResultRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::ResultRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::ResultRange>>(mlir::ValueTypeRange<mlir::ResultRange> const&,char const*)::{lambda(void)#1},void>(v91, v92, v93, v94, (uint64_t)(v52 + 1), (uint64_t)(v52 + 1), (const char **)&v87);
          if (*(void *)v53)
          {
            uint64_t v54 = v53 + 24;
            unint64_t v55 = *(void *)(v53 + 24);
            LODWORD(v87) = 3;
            unint64_t v88 = " are cast incompatible";
            uint64_t v89 = 22;
            uint64_t v56 = *(unsigned int *)(v53 + 32);
            unsigned int v57 = &v87;
            if (v56 >= *(_DWORD *)(v53 + 36))
            {
              unint64_t v68 = v56 + 1;
              BOOL v69 = v55 + 24 * v56 > (unint64_t)&v87;
              if (v55 <= (unint64_t)&v87 && v69)
              {
                unint64_t v76 = (char *)&v87 - v55;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v54, (void *)(v53 + 40), v68, 24);
                unint64_t v55 = *(void *)(v53 + 24);
                unsigned int v57 = (void ***)&v76[v55];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v54, (void *)(v53 + 40), v68, 24);
                unint64_t v55 = *(void *)(v53 + 24);
                unsigned int v57 = &v87;
              }
            }
            uint64_t v58 = v55 + 24 * *(unsigned int *)(v53 + 32);
            long long v59 = *(_OWORD *)v57;
            *(void *)(v58 + 16) = v57[2];
            *(_OWORD *)uint64_t v58 = v59;
            ++*(_DWORD *)(v53 + 32);
          }
        }
        uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v53);
        if (v97) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v97);
        }
        if (v107)
        {
          uint64_t v60 = __p;
          if (__p)
          {
            int v61 = v106;
            uint64_t v62 = __p;
            if (v106 != __p)
            {
              do
                int v61 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v61 - 1);
              while (v61 != v60);
              uint64_t v62 = __p;
            }
            uint64_t v106 = v60;
            operator delete(v62);
          }
          unint64_t v24 = v103;
          if (!v103) {
            goto LABEL_81;
          }
          uint64_t v63 = v104;
          uint64_t v26 = v103;
          if (v104 == v103)
          {
LABEL_80:
            uint64_t v104 = v24;
            operator delete(v26);
LABEL_81:
            if (v99 != v102) {
              free(v99);
            }
            return v20;
          }
          do
          {
            uint64_t v65 = *--v63;
            uint64_t v64 = v65;
            *uint64_t v63 = 0;
            if (v65) {
              MEMORY[0x21667D390](v64, 0x1000C8077774924);
            }
          }
          while (v63 != v24);
LABEL_79:
          uint64_t v26 = v103;
          goto LABEL_80;
        }
        return v20;
      }
      uint64_t v15 = v8;
    }
    else
    {
      unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
      BOOL v13 = (uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t))mlir::detail::InterfaceMap::lookup<mlir::CastOpInterface>(v12 + 32);
      if (v13) {
        goto LABEL_36;
      }
      uint64_t Values = *(void *)(v12 + 24);
      uint64_t v15 = *((void *)this + 6);
    }
    BOOL v13 = (uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t))mlir::Dialect::getRegisteredInterfaceForOp<mlir::CastOpInterface>(Values, v15);
    goto LABEL_36;
  }
  __int16 v90 = 257;
  mlir::Operation::emitOpError((uint64_t)this, &v87, (uint64_t)&v97);
  if (v97)
  {
    LODWORD(v83) = 3;
    uint64_t v84 = (uint64_t)"expected at least one result for cast operation";
    uint64_t v85 = 47;
    uint64_t v16 = &v83;
    uint64_t v17 = (char *)v99;
    if (v100 >= v101)
    {
      unint64_t v67 = v100 + 1;
      if (v99 <= &v83 && (char *)v99 + 24 * v100 > (char *)&v83)
      {
        int64_t v75 = (char *)&v83 - (unsigned char *)v99;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v67, 24);
        uint64_t v17 = (char *)v99;
        uint64_t v16 = (uint64_t *)((char *)v99 + v75);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v67, 24);
        uint64_t v16 = &v83;
        uint64_t v17 = (char *)v99;
      }
    }
    uint64_t v18 = &v17[24 * v100];
    long long v19 = *(_OWORD *)v16;
    *((void *)v18 + 2) = v16[2];
    *(_OWORD *)uint64_t v18 = v19;
    ++v100;
  }
  uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v97);
  if (v97) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v97);
  }
  if (v107)
  {
    unsigned long long v21 = __p;
    if (__p)
    {
      unsigned long long v22 = v106;
      int8x16_t v23 = __p;
      if (v106 != __p)
      {
        do
          unsigned long long v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        int8x16_t v23 = __p;
      }
      uint64_t v106 = v21;
      operator delete(v23);
    }
    unint64_t v24 = v103;
    if (!v103) {
      goto LABEL_81;
    }
    uint64_t v25 = v104;
    uint64_t v26 = v103;
    if (v104 == v103) {
      goto LABEL_80;
    }
    do
    {
      uint64_t v28 = *--v25;
      uint64_t v27 = v28;
      *uint64_t v25 = 0;
      if (v28) {
        MEMORY[0x21667D390](v27, 0x1000C8077774924);
      }
    }
    while (v25 != v24);
    goto LABEL_79;
  }
  return v20;
}

double mlir::mps::detail::MPSAbstractCostModel::computeCost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap = 0;
    *(void *)&dword_267780F50 = 0;
    qword_267780F58 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::~StringMap, &mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, &dword_210C72000);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap, memory_order_acquire) != -1)
  {
    unsigned long long v22 = &v20;
    unsigned long long v21 = &v22;
    std::__call_once(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::$_0 &&>>);
  }
  unsigned long long v22 = *(char **)(*(void *)(a2 + 48) + 8);
  uint64_t AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v22);
  int Key = llvm::StringMapImpl::FindKey(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, AttrData, v7);
  uint64_t v9 = mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap;
  uint64_t v10 = Key;
  if (Key == -1) {
    uint64_t v10 = dword_267780F50;
  }
  {
    uint64_t v19 = v9;
    uint64_t v17 = v10;
    uint64_t v10 = v17;
    uint64_t v9 = v19;
    if (v18)
    {
      mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap = 0;
      *(void *)&dword_267780F50 = 0;
      qword_267780F58 = 0x1800000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::~StringMap, &mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, &dword_210C72000);
      uint64_t v10 = v17;
      uint64_t v9 = v19;
    }
  }
  uint64_t v11 = v9 + 8 * v10;
  if (atomic_load_explicit((atomic_ullong *volatile)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap, memory_order_acquire) != -1)
  {
    unsigned long long v22 = &v20;
    unsigned long long v21 = &v22;
    std::__call_once(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::$_0 &&>>);
  }
  if (v11 == mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap
            + 8 * dword_267780F50)
  {
    uint64_t v15 = *(void *)(a2 + 48);
    if (*(_UNKNOWN **)(v15 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      unsigned long long v22 = *(char **)(v15 + 8);
      mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v22);
    }
    return 0.0;
  }
  else
  {
    unint64_t v12 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 8);
    uint64_t v13 = *(void *)(*(void *)v11 + 16);
    uint64_t v14 = (void *)(a1 + (v13 >> 1));
    if (v13) {
      unint64_t v12 = *(void (**)(void *, uint64_t, uint64_t))(*v14 + v12);
    }
    v12(v14, a2, a3);
  }
  return result;
}

uint64_t llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      do
      {
        unint64_t v4 = *(llvm **)(*(void *)a1 + v3);
        if (v4 != (llvm *)-8 && v4 != 0) {
          llvm::deallocate_buffer(v4, (void *)(*(void *)v4 + 25));
        }
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

BOOL mlir::mps::executionCost(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  int v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v4);
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 68);
    if (v6)
    {
      int v7 = v5;
      uint64_t v8 = 0;
      uint64_t v9 = (uint64_t *)(*(void *)(a2 + 72) + 24);
      do
      {
        uint64_t v63 = *v9;
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v63);
        if (DefiningOp) {
          int v17 = v7;
        }
        else {
          int v17 = 0;
        }
        if (v17 != 1) {
          goto LABEL_4;
        }
        uint64_t v18 = DefiningOp;
        uint64_t v19 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v18 + 48) + 32))(*(void *)(v18 + 48), v19) & 1) == 0)
        {
          char v20 = *(void **)(*(void *)(v18 + 48) + 16);
          BOOL v21 = v20 == &mlir::detail::TypeIDResolver<mlir::mps::FastFourierTransformOp,void>::id
             || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id;
          BOOL v22 = v21 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::StencilOp,void>::id;
          BOOL v23 = v22 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id;
          BOOL v24 = v23 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id;
          BOOL v25 = v24 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id;
          BOOL v26 = v25 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id;
          BOOL v27 = v26 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id;
          BOOL v28 = v27 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id;
          BOOL v29 = v28 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id;
          if (!v29 && v20 != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id)
          {
LABEL_4:
            uint64_t v64 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v63 + 8) & 0xFFFFFFFFFFFFFFF8));
            uint64_t v65 = v10;
            uint64_t ElementBitWidth = mlir::getElementBitWidth(v64);
            uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v64);
            uint64_t NumElements = mlir::ShapedType::getNumElements(Shape, v13);
            if (ElementBitWidth) {
              uint64_t v15 = NumElements;
            }
            else {
              uint64_t v15 = 0;
            }
            v8 += v15;
          }
        }
        v9 += 4;
        --v6;
      }
      while (v6);
    }
  }
  uint64_t v31 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  char v32 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v31);
  uint64_t v33 = *(unsigned int *)(a2 + 36);
  if (v33) {
    uint64_t v34 = a2 - 16;
  }
  else {
    uint64_t v34 = 0;
  }
  if (v33)
  {
    char v35 = v32;
    uint64_t v36 = 0;
    for (uint64_t i = 0; i != v33; ++i)
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, i);
      float64x2x2_t v39 = *(void **)NextResultAtOffset;
      if (!*(void *)NextResultAtOffset) {
        goto LABEL_87;
      }
      if (*v39) {
        goto LABEL_87;
      }
      uint64_t v40 = v39[2];
      uint64_t v41 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
      if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v40 + 48) + 32))(*(void *)(v40 + 48), v41))goto LABEL_87; {
      if ((v35 & 1) == 0)
      }
      {
        long long v42 = *(void **)(*(void *)(a2 + 48) + 16);
        BOOL v43 = v42 == &mlir::detail::TypeIDResolver<mlir::mps::FastFourierTransformOp,void>::id
           || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id;
        BOOL v44 = v43 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::StencilOp,void>::id;
        BOOL v45 = v44 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id;
        BOOL v46 = v45 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id;
        BOOL v47 = v46 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id;
        BOOL v48 = v47 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id;
        BOOL v49 = v48 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id;
        BOOL v50 = v49 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id;
        BOOL v51 = v50 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id;
        if (!v51 && v42 != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id)
        {
LABEL_87:
          uint64_t v64 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v65 = v53;
          uint64_t v54 = mlir::getElementBitWidth(v64);
          unint64_t v55 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v64);
          uint64_t v57 = mlir::ShapedType::getNumElements(v55, v56);
          if (v54) {
            uint64_t v58 = v57;
          }
          else {
            uint64_t v58 = 0;
          }
          v36 += v58;
        }
      }
    }
  }
  uint64_t v64 = a3;
  do
  {
    long long v59 = *(mlir::Block **)(a2 + 16);
    if (!v59) {
      break;
    }
    uint64_t ParentOp = mlir::Block::getParentOp(v59);
    if (!ParentOp) {
      break;
    }
    a2 = ParentOp;
  }
  while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
  BOOL result = mlir::Type::isF16((mlir::Type *)&v64);
  if (!result) {
    return mlir::Type::isF32((mlir::Type *)&v64);
  }
  return result;
}

uint64_t *mlir::mps::getMathOpExecutionCost(uint64_t a1, uint64_t a2)
{
  BOOL result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    if (*(_UNKNOWN **)(*result + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v9);
      mlir::ShapedType::getNumElements(Shape, v7);
      uint64_t OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v9);
      return (uint64_t *)mlir::mps::executionCost(a1, a2, OperandRange);
    }
  }
  return result;
}

uint64_t mlir::mps::getCopyOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v5 = v4;
  v20[0] = v3;
  v20[1] = v4;
  uint64_t result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v19[0] = result;
  v19[1] = v7;
  uint64_t OperandRange = result;
  uint64_t v22 = v7;
  if (result)
  {
    uint64_t v8 = (void *)result;
    uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if (result)
    {
      uint64_t result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        while (*(void *)result != 0x8000000000000000)
        {
          result += 8;
          v10 -= 8;
          if (!v10) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        uint64_t OperandRange = (uint64_t)v3;
        uint64_t v22 = v5;
        if (v3)
        {
          uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if (result)
          {
            uint64_t result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
            if (v11)
            {
              uint64_t v12 = 8 * v11;
              while (*(void *)result != 0x8000000000000000)
              {
                result += 8;
                v12 -= 8;
                if (!v12) {
                  goto LABEL_13;
                }
              }
            }
            else
            {
LABEL_13:
              mlir::getElementBitWidth(v3);
              uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v20);
              mlir::ShapedType::getNumElements(Shape, v14);
              mlir::getElementBitWidth(v8);
              uint64_t v15 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v19);
              mlir::ShapedType::getNumElements(v15, v16);
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19);
              do
              {
                int v17 = *(mlir::Block **)(v2 + 16);
                if (!v17) {
                  break;
                }
                uint64_t ParentOp = mlir::Block::getParentOp(v17);
                if (!ParentOp) {
                  break;
                }
                uint64_t v2 = ParentOp;
              }
              while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              uint64_t result = mlir::Type::isF16((mlir::Type *)&OperandRange);
              if (!result) {
                return mlir::Type::isF32((mlir::Type *)&OperandRange);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostAbsoluteOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostAbsoluteSquareOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostACoshOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostACosOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostASinhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostASinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostATanhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostATanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostCeilOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostExponentBase10Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostExponentBase2Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostExponentOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLogarithmBase10Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLogarithmBase2Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLogarithmOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSquareOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSquareRootOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReciprocalSquareRootOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReciprocalOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNegativeOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSignbitOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSignOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostFloorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostRintOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostRoundOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostCoshOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostCosOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSinhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostTanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostTanhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNotOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIsInfiniteOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIsFiniteOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIsNaNOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostErfOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostEluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostRelu6Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReluGradOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLeakyReluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostGeluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSigmoidOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSwishOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftplusOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftsignOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostTruncateOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseNotOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwisePopcountOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIdentityOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostAddOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSubtractOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMultiplyOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostDivideOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMinimumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMaximumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostModuloOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostPowerOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostATan2Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostFloorDivideOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostAndOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostOrOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNandOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostXnorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostXorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseAndOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseOrOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseXorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseLeftShiftOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseRightShiftOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNotEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostGreaterThanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostGreaterThanOrEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLessThanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLessThanOrEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSelectOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostClampOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftplusParametricOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostConjugateOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMatMulOp(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v45 = a2;
  mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v45);
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v45);
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v45);
  uint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = v7;
  uint64_t v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = v10;
  v44[0] = v9;
  v44[1] = v10;
  uint64_t v12 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v45);
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  v43[0] = result;
  v43[1] = v14;
  BOOL v46 = v6;
  uint64_t v47 = v8;
  if (!v6) {
    return result;
  }
  uint64_t v15 = result;
  uint64_t v16 = v14;
  uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46);
  if (!result) {
    return result;
  }
  uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
  if (!v17)
  {
LABEL_7:
    BOOL v46 = v9;
    uint64_t v47 = v11;
    if (!v9) {
      return result;
    }
    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46);
    if (!result) {
      return result;
    }
    uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
    if (v19)
    {
      uint64_t v20 = 8 * v19;
      while (*result != 0x8000000000000000)
      {
        ++result;
        v20 -= 8;
        if (!v20) {
          goto LABEL_13;
        }
      }
      return result;
    }
LABEL_13:
    BOOL v46 = v15;
    uint64_t v47 = v16;
    if (!v15) {
      return result;
    }
    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46);
    if (!result) {
      return result;
    }
    uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
    if (v21)
    {
      uint64_t v22 = 8 * v21;
      while (*result != 0x8000000000000000)
      {
        ++result;
        v22 -= 8;
        if (!v22) {
          goto LABEL_19;
        }
      }
      return result;
    }
LABEL_19:
    mlir::ShapedType::getShape((mlir::ShapedType *)v44);
    uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v43);
    unint64_t v25 = v24 - 2;
    if (v24 < 2)
    {
      uint64_t v28 = 1;
      uint64_t v26 = 1;
      goto LABEL_31;
    }
    uint64_t v26 = *(void *)(Shape + 8 * v25);
    if (v24 == 2)
    {
      uint64_t v28 = 1;
      goto LABEL_31;
    }
    if (v24 == 3)
    {
      unint64_t v27 = 0;
      uint64_t v28 = 1;
    }
    else
    {
      unint64_t v27 = v25 & 0xFFFFFFFFFFFFFFFELL;
      BOOL v29 = (void *)(Shape + 8);
      uint64_t v30 = 1;
      unint64_t v31 = v25 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v32 = 1;
      do
      {
        v30 *= *(v29 - 1);
        v32 *= *v29;
        v29 += 2;
        v31 -= 2;
      }
      while (v31);
      uint64_t v28 = v32 * v30;
      if (v25 == v27)
      {
LABEL_31:
        uint64_t v36 = *(void *)(Shape + 8 * v24 - 8);
        uint64_t ParentOp = v45;
        float v38 = (float)v28;
        float v39 = (float)v26;
        float v40 = (float)v36;
        while (1)
        {
          uint64_t v41 = *(mlir::Block **)(ParentOp + 16);
          if (!v41) {
            break;
          }
          uint64_t ParentOp = mlir::Block::getParentOp(v41);
          if (!ParentOp) {
            break;
          }
          if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id) {
            goto LABEL_37;
          }
        }
        if (!*a3) {
          goto LABEL_38;
        }
LABEL_37:
        pow((double)(float)((float)(v40 + 2.0) * (float)((float)(v39 + 2.0) * v38)), 0.25);
LABEL_38:
        uint64_t OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v43);
        return (uint64_t *)mlir::mps::executionCost((uint64_t)a3, v45, OperandRange);
      }
    }
    uint64_t v33 = v24 - v27 - 2;
    uint64_t v34 = (uint64_t *)(Shape + 8 * v27);
    do
    {
      uint64_t v35 = *v34++;
      v28 *= v35;
      --v33;
    }
    while (v33);
    goto LABEL_31;
  }
  uint64_t v18 = 8 * v17;
  while (*result != 0x8000000000000000)
  {
    ++result;
    v18 -= 8;
    if (!v18) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostGatherNDOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostGatherOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostResizeOp(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v27);
  uint64_t v3 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v27);
  uint64_t v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = v5;
  v26[0] = v4;
  v26[1] = v5;
  uint64_t result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v25[0] = (void *)result;
  v25[1] = v8;
  uint64_t OperandRange = result;
  BOOL v29 = v8;
  if (result)
  {
    uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if (result)
    {
      uint64_t result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        while (*(void *)result != 0x8000000000000000)
        {
          result += 8;
          v10 -= 8;
          if (!v10) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        uint64_t OperandRange = (uint64_t)v4;
        BOOL v29 = v6;
        if (v4)
        {
          uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if (result)
          {
            uint64_t result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
            if (v11)
            {
              uint64_t v12 = 8 * v11;
              while (*(void *)result != 0x8000000000000000)
              {
                result += 8;
                v12 -= 8;
                if (!v12) {
                  goto LABEL_13;
                }
              }
            }
            else
            {
LABEL_13:
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
              uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(Shape, v14);
              mlir::getElementBitWidth(v25[0]);
              uint64_t v15 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(v15, v16);
              int InterpolationMode = mlir::mps::CropResizeOp::getInterpolationMode((mlir::mps::CropResizeOp *)&v27);
              uint64_t v18 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(v18, v19);
              if (InterpolationMode == 1)
              {
                mlir::getElementBitWidth(v26[0]);
                uint64_t v20 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
                mlir::ShapedType::getNumElements(v20, v21);
              }
              uint64_t v22 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v25);
              uint64_t ParentOp = v27;
              uint64_t OperandRange = v22;
              do
              {
                unint64_t v24 = *(mlir::Block **)(ParentOp + 16);
                if (!v24) {
                  break;
                }
                uint64_t ParentOp = mlir::Block::getParentOp(v24);
                if (!ParentOp) {
                  break;
                }
              }
              while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              uint64_t result = mlir::Type::isF16((mlir::Type *)&OperandRange);
              if (!result) {
                return mlir::Type::isF32((mlir::Type *)&OperandRange);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::getUnaryOpExecutionCost(uint64_t a1, uint64_t a2)
{
  if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    uint64_t v4 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  else {
    uint64_t v4 = 0;
  }
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_13:
  }
    uint64_t v14 = 0;
  v26[0] = v4;
  v26[1] = v14;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v27 = v4;
  uint64_t v28 = v14;
  if (v4)
  {
    uint64_t v17 = result;
    uint64_t v18 = v16;
    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
    if (result)
    {
      uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v27);
      if (v19)
      {
        uint64_t v20 = 8 * v19;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v20 -= 8;
          if (!v20) {
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        uint64_t v27 = v17;
        uint64_t v28 = v18;
        if (v17)
        {
          uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
          if (result)
          {
            uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v27);
            if (v21)
            {
              uint64_t v22 = 8 * v21;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v22 -= 8;
                if (!v22) {
                  goto LABEL_26;
                }
              }
            }
            else
            {
LABEL_26:
              uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
              mlir::ShapedType::getNumElements(Shape, v24);
              uint64_t OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              return (uint64_t *)mlir::mps::executionCost(a1, a2, OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostStridedSliceOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getUnaryOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLSTMOp(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v21 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v21);
  Masuint64_t k = mlir::mps::LSTMOp::getMask((mlir::mps::LSTMOp *)&v21);
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v20[0] = result;
  v20[1] = v7;
  v22[0] = result;
  v22[1] = v7;
  if (result)
  {
    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v22);
    if (result)
    {
      uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v22);
      if (v8)
      {
        uint64_t v9 = 8 * v8;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v9 -= 8;
          if (!v9) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v20);
        uint64_t v11 = *(void *)(Shape + 8);
        uint64_t v12 = *(void *)(Shape + 16) / 4;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v20);
        v22[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v20);
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v22);
        if (Mask)
        {
          uint64_t ParentOp = v21;
          v22[0] = OperandRange;
          do
          {
            uint64_t v15 = *(mlir::Block **)(ParentOp + 16);
            if (!v15) {
              break;
            }
            uint64_t ParentOp = mlir::Block::getParentOp(v15);
            if (!ParentOp) {
              break;
            }
          }
          while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
          if (!mlir::Type::isF16((mlir::Type *)v22)) {
            mlir::Type::isF32((mlir::Type *)v22);
          }
        }
        mlir::mps::LSTMOp::getTraining((mlir::mps::LSTMOp *)&v21);
        uint64_t v16 = v21;
        while (1)
        {
          uint64_t v17 = *(mlir::Block **)(v16 + 16);
          if (!v17) {
            break;
          }
          uint64_t v16 = mlir::Block::getParentOp(v17);
          if (!v16) {
            break;
          }
          if (*(_UNKNOWN **)(*(void *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id) {
            goto LABEL_24;
          }
        }
        if (!*a3) {
          goto LABEL_25;
        }
LABEL_24:
        pow((double)(float)((float)((float)((float)(4 * v12) + 2.0) * (float)v11) * 3.0), 0.25);
LABEL_25:
        uint64_t v18 = v21;
        v22[0] = OperandRange;
        do
        {
          uint64_t v19 = *(mlir::Block **)(v18 + 16);
          if (!v19) {
            break;
          }
          uint64_t v18 = mlir::Block::getParentOp(v19);
          if (!v18) {
            break;
          }
        }
        while (*(_UNKNOWN **)(*(void *)(v18 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
        uint64_t result = (uint64_t *)mlir::Type::isF16((mlir::Type *)v22);
        if (!result) {
          return (uint64_t *)mlir::Type::isF32((mlir::Type *)v22);
        }
      }
    }
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostConcatOp(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v32 = a2;
  uint64_t Values = mlir::mps::ConcatOp::getValues((mlir::mps::ConcatOp *)&v32);
  mlir::ValueRange::ValueRange(&v37, Values, v3);
  uint64_t v4 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v32);
  uint64_t result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v31[0] = result;
  v31[1] = v6;
  uint64_t v33 = (uint64_t *)result;
  uint64_t v34 = v6;
  if (result)
  {
    uint64_t v7 = (void *)result;
    uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v33);
    if (result)
    {
      uint64_t result = mlir::ShapedType::getShape((mlir::ShapedType *)&v33);
      if (v8)
      {
        uint64_t v9 = 8 * v8;
        while (*(void *)result != 0x8000000000000000)
        {
          result += 8;
          v9 -= 8;
          if (!v9) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        unint64_t v10 = v37;
        uint64_t v11 = v38;
        unint64_t v35 = v37;
        uint64_t v36 = 0;
        if (v38)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          while (1)
          {
            uint64_t v14 = mlir::ValueRange::dereference_iterator(&v35, v12);
            uint64_t result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8));
            v30[0] = (void *)result;
            v30[1] = v15;
            uint64_t v33 = (uint64_t *)result;
            uint64_t v34 = v15;
            if (!result) {
              break;
            }
            uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v33);
            if (!result) {
              break;
            }
            uint64_t result = mlir::ShapedType::getShape((mlir::ShapedType *)&v33);
            if (v16)
            {
              uint64_t v17 = 8 * v16;
              while (*(void *)result != 0x8000000000000000)
              {
                result += 8;
                v17 -= 8;
                if (!v17) {
                  goto LABEL_15;
                }
              }
              return result;
            }
LABEL_15:
            uint64_t ElementBitWidth = mlir::getElementBitWidth(v30[0]);
            uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
            uint64_t NumElements = mlir::ShapedType::getNumElements(Shape, v20);
            if (ElementBitWidth) {
              uint64_t v22 = NumElements;
            }
            else {
              uint64_t v22 = 0;
            }
            v13 += v22;
            uint64_t v12 = ++v36;
            if (v35 == v10 && v12 == v11) {
              goto LABEL_22;
            }
          }
        }
        else
        {
LABEL_22:
          mlir::getElementBitWidth(v7);
          BOOL v23 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v31);
          mlir::ShapedType::getNumElements(v23, v24);
          unint64_t v25 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v31);
          mlir::ShapedType::getNumElements(v25, v26);
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v31);
          uint64_t ParentOp = v32;
          uint64_t v33 = (uint64_t *)OperandRange;
          do
          {
            BOOL v29 = *(mlir::Block **)(ParentOp + 16);
            if (!v29) {
              break;
            }
            uint64_t ParentOp = mlir::Block::getParentOp(v29);
            if (!ParentOp) {
              break;
            }
          }
          while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
          uint64_t result = mlir::Type::isF16((mlir::Type *)&v33);
          if (!result) {
            return mlir::Type::isF32((mlir::Type *)&v33);
          }
        }
      }
    }
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostDepthToSpace2DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostSpaceToDepth2DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostBatchToSpaceOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostSpaceToBatchOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostPadOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSampleGridOp(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v38);
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v38);
  uint64_t v4 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v38);
  uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = v6;
  v37[0] = v5;
  v37[1] = v6;
  uint64_t v8 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = v9;
  v36[0] = v8;
  v36[1] = v9;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v35[0] = result;
  v35[1] = v12;
  uint64_t OperandRange = (uint64_t)v8;
  float v40 = v10;
  if (v8)
  {
    uint64_t v13 = result;
    uint64_t v14 = v12;
    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if (result)
    {
      uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
      if (v15)
      {
        uint64_t v16 = 8 * v15;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v16 -= 8;
          if (!v16) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        uint64_t OperandRange = (uint64_t)v5;
        float v40 = v7;
        if (v5)
        {
          uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if (result)
          {
            uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
            if (v17)
            {
              uint64_t v18 = 8 * v17;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v18 -= 8;
                if (!v18) {
                  goto LABEL_13;
                }
              }
            }
            else
            {
LABEL_13:
              uint64_t OperandRange = (uint64_t)v13;
              float v40 = v14;
              if (v13)
              {
                uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
                if (result)
                {
                  uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
                  if (v19)
                  {
                    uint64_t v20 = 8 * v19;
                    while (*result != 0x8000000000000000)
                    {
                      ++result;
                      v20 -= 8;
                      if (!v20) {
                        goto LABEL_19;
                      }
                    }
                  }
                  else
                  {
LABEL_19:
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v37);
                    mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
                    uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
                    mlir::ShapedType::getNumElements(Shape, v22);
                    mlir::getElementBitWidth(v36[0]);
                    BOOL v23 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
                    mlir::ShapedType::getNumElements(v23, v24);
                    int WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v38);
                    uint64_t v26 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
                    mlir::ShapedType::getNumElements(v26, v27);
                    if (WeightsLayout == 1)
                    {
                      mlir::getElementBitWidth(v37[0]);
                      uint64_t v28 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v37);
                      mlir::ShapedType::getNumElements(v28, v29);
                    }
                    mlir::getElementBitWidth(v13);
                    uint64_t v30 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v35);
                    mlir::ShapedType::getNumElements(v30, v31);
                    uint64_t v32 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
                    uint64_t ParentOp = v38;
                    uint64_t OperandRange = v32;
                    do
                    {
                      uint64_t v34 = *(mlir::Block **)(ParentOp + 16);
                      if (!v34) {
                        break;
                      }
                      uint64_t ParentOp = mlir::Block::getParentOp(v34);
                      if (!ParentOp) {
                        break;
                      }
                    }
                    while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
                    uint64_t result = (uint64_t *)mlir::Type::isF16((mlir::Type *)&OperandRange);
                    if (!result) {
                      return (uint64_t *)mlir::Type::isF32((mlir::Type *)&OperandRange);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::getReductionOpExecutionCost(uint64_t a1, uint64_t a2)
{
  if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    uint64_t v4 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  else {
    uint64_t v4 = 0;
  }
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_13:
  }
    uint64_t v14 = 0;
  v26[0] = v4;
  v26[1] = v14;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v27 = v4;
  uint64_t v28 = v14;
  if (v4)
  {
    uint64_t v17 = result;
    uint64_t v18 = v16;
    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
    if (result)
    {
      uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v27);
      if (v19)
      {
        uint64_t v20 = 8 * v19;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v20 -= 8;
          if (!v20) {
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        uint64_t v27 = v17;
        uint64_t v28 = v18;
        if (v17)
        {
          uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
          if (result)
          {
            uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v27);
            if (v21)
            {
              uint64_t v22 = 8 * v21;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v22 -= 8;
                if (!v22) {
                  goto LABEL_26;
                }
              }
            }
            else
            {
LABEL_26:
              uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
              mlir::ShapedType::getNumElements(Shape, v24);
              uint64_t OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              return (uint64_t *)mlir::mps::executionCost(a1, a2, OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionAndOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionArgMaxOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionArgMinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionLogSumExpOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionMaxOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionMeanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionMinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionOrOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionSumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionVarianceOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionProdOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeSumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeProductOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeMaximumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeMinimumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSortOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getUnaryOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftmaxOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNormalizationOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getUnaryOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostInstanceNormOp(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v42);
  uint64_t v3 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v42);
  if (*(_UNKNOWN **)(*(void *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    uint64_t v4 = (void *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = (void *)v8[1];
  }
  else {
LABEL_13:
  }
    uint64_t v14 = 0;
  v41[0] = v4;
  v41[1] = v14;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = result;
  v40[1] = v16;
  BOOL v43 = v4;
  BOOL v44 = v14;
  if (v4)
  {
    uint64_t v17 = result;
    uint64_t v18 = v16;
    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v43);
    if (result)
    {
      uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v43);
      if (v19)
      {
        uint64_t v20 = 8 * v19;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v20 -= 8;
          if (!v20) {
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        BOOL v43 = v17;
        BOOL v44 = v18;
        if (v17)
        {
          uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v43);
          if (result)
          {
            uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v43);
            if (v21)
            {
              uint64_t v22 = 8 * v21;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v22 -= 8;
                if (!v22) {
                  goto LABEL_26;
                }
              }
            }
            else
            {
LABEL_26:
              uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v40);
              mlir::ShapedType::getNumElements(Shape, v24);
              mlir::getElementBitWidth(v4);
              unint64_t v25 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v41);
              mlir::ShapedType::getNumElements(v25, v26);
              uint64_t v27 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v40);
              mlir::ShapedType::getNumElements(v27, v28);
              mlir::getElementBitWidth(v41[0]);
              uint64_t v29 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v41);
              mlir::ShapedType::getNumElements(v29, v30);
              uint64_t v31 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v40);
              mlir::ShapedType::getNumElements(v31, v32);
              mlir::getElementBitWidth(v41[0]);
              uint64_t v33 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v41);
              mlir::ShapedType::getNumElements(v33, v34);
              mlir::getElementBitWidth(v40[0]);
              unint64_t v35 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v40);
              mlir::ShapedType::getNumElements(v35, v36);
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v41);
              uint64_t ParentOp = v42;
              BOOL v43 = (void *)OperandRange;
              do
              {
                uint64_t v39 = *(mlir::Block **)(ParentOp + 16);
                if (!v39) {
                  break;
                }
                uint64_t ParentOp = mlir::Block::getParentOp(v39);
                if (!ParentOp) {
                  break;
                }
              }
              while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              uint64_t result = (uint64_t *)mlir::Type::isF16((mlir::Type *)&v43);
              if (!result) {
                return (uint64_t *)mlir::Type::isF32((mlir::Type *)&v43);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

float mlir::mps::MPSCostModel::computeCostConv2DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v57[4] = *MEMORY[0x263EF8340];
  uint64_t v52 = a2;
  mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v52);
  mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v52);
  uint64_t v4 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v52);
  *(void *)&long long v51 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  *((void *)&v51 + 1) = v5;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v52);
  unint64_t v7 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = v8;
  v50[0] = v7;
  v50[1] = v8;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v52);
  *(void *)&long long v49 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  *((void *)&v49 + 1) = v11;
  v56[0] = v7;
  v56[1] = v9;
  if (!v7 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56)) {
    return 0.0;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v56);
  if (v13)
  {
    uint64_t v14 = 8 * v13;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v14 -= 8;
      if (!v14) {
        goto LABEL_7;
      }
    }
    return 0.0;
  }
LABEL_7:
  *(_OWORD *)uint64_t v56 = v49;
  if (!(void)v49 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56)) {
    return 0.0;
  }
  uint64_t v15 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v56);
  if (v16)
  {
    uint64_t v17 = 8 * v16;
    while (*v15 != 0x8000000000000000)
    {
      ++v15;
      v17 -= 8;
      if (!v17) {
        goto LABEL_13;
      }
    }
    return 0.0;
  }
LABEL_13:
  *(_OWORD *)uint64_t v56 = v51;
  if (!(void)v51 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56)) {
    return 0.0;
  }
  uint64_t v18 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v56);
  if (v19)
  {
    uint64_t v20 = 8 * v19;
    while (*v18 != 0x8000000000000000)
    {
      ++v18;
      v20 -= 8;
      if (!v20) {
        goto LABEL_19;
      }
    }
    return 0.0;
  }
LABEL_19:
  mlir::ShapedType::getShape((mlir::ShapedType *)v50);
  mlir::ShapedType::getShape((mlir::ShapedType *)&v49);
  mlir::ShapedType::getShape((mlir::ShapedType *)&v51);
  v56[0] = v57;
  v56[1] = (void *)0x400000000;
  v54[0] = v55;
  v54[1] = (void *)0x400000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v52);
  uint64_t v24 = (uint64_t)Strides;
  if (!Strides) {
    goto LABEL_31;
  }
  uint64_t v25 = *Strides;
  unint64_t v26 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v27 = *(unsigned int *)(v25 + 16);
  if (!v27) {
    goto LABEL_31;
  }
  uint64_t v28 = *(void **)(v25 + 8);
  uint64_t v29 = &v28[2 * v27];
  do
  {
    unint64_t v30 = v27 >> 1;
    uint64_t v31 = &v28[2 * (v27 >> 1)];
    unint64_t v33 = *v31;
    uint64_t v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26) {
      uint64_t v28 = v32;
    }
    else {
      unint64_t v27 = v30;
    }
  }
  while (v27);
  if (v28 != v29 && *v28 == v26) {
    uint64_t v34 = v28[1];
  }
  else {
LABEL_31:
  }
    uint64_t v34 = 0;
  mlir::getIntValues<long long>(v24, v34, (uint64_t)v56, 1);
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v52);
  uint64_t v36 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames) {
    goto LABEL_41;
  }
  uint64_t v37 = *InputAttributeNames;
  unint64_t v38 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v39 = *(unsigned int *)(v37 + 16);
  if (!v39) {
    goto LABEL_41;
  }
  float v40 = *(void **)(v37 + 8);
  uint64_t v41 = &v40[2 * v39];
  do
  {
    unint64_t v42 = v39 >> 1;
    BOOL v43 = &v40[2 * (v39 >> 1)];
    unint64_t v45 = *v43;
    BOOL v44 = v43 + 2;
    v39 += ~(v39 >> 1);
    if (v45 < v38) {
      float v40 = v44;
    }
    else {
      unint64_t v39 = v42;
    }
  }
  while (v39);
  if (v40 != v41 && *v40 == v38) {
    uint64_t v46 = v40[1];
  }
  else {
LABEL_41:
  }
    uint64_t v46 = 0;
  mlir::getIntValues<long long>(v36, v46, (uint64_t)v54, 1);
  uint64_t OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
  uint64_t v53 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v53);
  mlir::mps::executionCost(a3, v52, OperandRange);
  float v21 = v47;
  if (v54[0] != v55) {
    free(v54[0]);
  }
  if (v56[0] != v57) {
    free(v56[0]);
  }
  return v21;
}

float mlir::mps::MPSCostModel::computeCostConv2DDataGradientOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v48[4] = *MEMORY[0x263EF8340];
  uint64_t v45 = a2;
  mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v45);
  mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v45);
  uint64_t v4 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v45);
  uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = v6;
  v44[0] = v5;
  v44[1] = v6;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v45);
  uint64_t v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = v10;
  v43[0] = v9;
  v43[1] = v10;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v45);
  uint64_t v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v42[0] = v13;
  v42[1] = v14;
  uint64_t v46 = v9;
  uint64_t v47 = v11;
  if (!v9) {
    return 0.0;
  }
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46)) {
    return 0.0;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
  if (v18)
  {
    uint64_t v19 = 8 * v18;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v19 -= 8;
      if (!v19) {
        goto LABEL_7;
      }
    }
    return 0.0;
  }
LABEL_7:
  uint64_t v46 = v15;
  uint64_t v47 = v16;
  if (!v15 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46)) {
    return 0.0;
  }
  uint64_t v20 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
  if (v21)
  {
    uint64_t v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22) {
        goto LABEL_13;
      }
    }
    return 0.0;
  }
LABEL_13:
  uint64_t v46 = v5;
  uint64_t v47 = v7;
  if (!v5 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46)) {
    return 0.0;
  }
  BOOL v23 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
  if (v24)
  {
    uint64_t v25 = 8 * v24;
    while (*v23 != 0x8000000000000000)
    {
      ++v23;
      v25 -= 8;
      if (!v25) {
        goto LABEL_19;
      }
    }
    return 0.0;
  }
LABEL_19:
  uint64_t v46 = v48;
  uint64_t v47 = 0x400000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v45);
  uint64_t v27 = (uint64_t)Strides;
  if (!Strides) {
    goto LABEL_28;
  }
  uint64_t v28 = *Strides;
  unint64_t v29 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v30 = *(unsigned int *)(v28 + 16);
  if (!v30) {
    goto LABEL_28;
  }
  uint64_t v31 = *(void **)(v28 + 8);
  uint64_t v32 = &v31[2 * v30];
  do
  {
    unint64_t v33 = v30 >> 1;
    uint64_t v34 = &v31[2 * (v30 >> 1)];
    unint64_t v36 = *v34;
    unint64_t v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29) {
      uint64_t v31 = v35;
    }
    else {
      unint64_t v30 = v33;
    }
  }
  while (v30);
  if (v31 != v32 && *v31 == v29) {
    uint64_t v37 = v31[1];
  }
  else {
LABEL_28:
  }
    uint64_t v37 = 0;
  mlir::getIntValues<long long>(v27, v37, (uint64_t)&v46, 1);
  mlir::ShapedType::getShape((mlir::ShapedType *)v43);
  mlir::ShapedType::getShape((mlir::ShapedType *)v42);
  mlir::ShapedType::getShape((mlir::ShapedType *)v44);
  uint64_t OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v44);
  mlir::mps::executionCost(a3, v45, OperandRange);
  float v38 = v41;
  if (v46 != v48) {
    free(v46);
  }
  return v38;
}

float mlir::mps::MPSCostModel::computeCostDepthwiseConv3DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v101 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v101);
  uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = v6;
  v100[0] = v5;
  v100[1] = v6;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v101);
  uint64_t v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = v10;
  v99[0] = v9;
  v99[1] = v10;
  uint64_t v12 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v101);
  uint64_t v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  v98[0] = v13;
  v98[1] = v14;
  char v107 = v5;
  uint64_t v108 = (uint64_t)v7;
  if (!v5) {
    return 0.0;
  }
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v107)) {
    return 0.0;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v107);
  if (v18)
  {
    uint64_t v19 = 8 * v18;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v19 -= 8;
      if (!v19) {
        goto LABEL_7;
      }
    }
    return 0.0;
  }
LABEL_7:
  char v107 = v9;
  uint64_t v108 = (uint64_t)v11;
  if (!v9 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v107)) {
    return 0.0;
  }
  uint64_t v20 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v107);
  if (v21)
  {
    uint64_t v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22) {
        goto LABEL_13;
      }
    }
    return 0.0;
  }
LABEL_13:
  char v107 = v15;
  uint64_t v108 = (uint64_t)v16;
  if (!v15 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v107)) {
    return 0.0;
  }
  BOOL v23 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v107);
  if (v24)
  {
    uint64_t v25 = 8 * v24;
    while (*v23 != 0x8000000000000000)
    {
      ++v23;
      v25 -= 8;
      if (!v25) {
        goto LABEL_19;
      }
    }
    return 0.0;
  }
LABEL_19:
  mlir::ShapedType::getShape((mlir::ShapedType *)v100);
  uint64_t v27 = v26;
  uint64_t v28 = mlir::ShapedType::getShape((mlir::ShapedType *)v99);
  uint64_t v30 = v29;
  uint64_t v31 = mlir::ShapedType::getShape((mlir::ShapedType *)v98);
  uint64_t v33 = v32;
  char v107 = v109;
  memset(v109, 0, sizeof(v109));
  uint64_t v110 = 0;
  uint64_t v108 = 0x500000005;
  Channeluint64_t Axis = mlir::mps::DepthwiseConv3DOp::getChannelAxis((mlir::mps::DepthwiseConv3DOp *)&v101);
  Positiveuint64_t Axis = mlir::getPositiveAxis(ChannelAxis, v33);
  unint64_t v36 = (uint64_t *)v107;
  if (v33 > 4)
  {
    unsigned int v37 = 0;
  }
  else
  {
    *(void *)char v107 = 1;
    v36[1] = *(void *)(v31 + 8 * PositiveAxis);
    unint64_t v36 = (uint64_t *)v107;
    if (v33 < 1) {
      goto LABEL_32;
    }
    unsigned int v37 = 2;
  }
  uint64_t v40 = 0;
  do
  {
    if (PositiveAxis != v40)
    {
      v36[v37] = *(void *)(v31 + 8 * v40);
      if (v37) {
        ++v37;
      }
      else {
        unsigned int v37 = 2;
      }
    }
    ++v40;
  }
  while (v33 > v40);
  unint64_t v36 = (uint64_t *)v107;
LABEL_32:
  uint64_t v41 = 0;
  uint64_t v42 = *v36;
  uint64_t v43 = v36[2];
  uint64_t v44 = v36[3];
  uint64_t v45 = v36[4];
  unint64_t v46 = v30 - v27 + PositiveAxis;
  uint64_t v103 = &v105;
  long long v105 = 0u;
  long long v106 = 0u;
  uint64_t v104 = 0x400000004;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if (v46 <= 3 && v30 == 4)
  {
    uint64_t v49 = *(void *)(v28 + 8 * v46);
    *(void *)&long long v105 = v49;
    uint64_t v48 = *(void *)(v28 + 8 * (v46 == 0));
    *((void *)&v105 + 1) = v48;
    uint64_t v50 = 8;
    if (v46 <= 1) {
      uint64_t v50 = 16;
    }
    uint64_t v47 = *(void *)(v28 + v50);
    *(void *)&long long v106 = v47;
    BOOL v60 = v46 > 2;
    uint64_t v51 = 24;
    if (v60) {
      uint64_t v51 = 16;
    }
    uint64_t v41 = *(void *)(v28 + v51);
    *((void *)&v106 + 1) = v41;
  }
  uint64_t v52 = v43 * v42 * v44 * v45 * v49;
  uint64_t v53 = v47 * v48 * v41;
  uint64_t v54 = v53 * v52;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v98);
  float v56 = sqrtf((float)v52) + (float)(sqrtf((float)v49) * -0.75);
  float v57 = 2.0 - (float)(1.0 / (float)((float)((float)(v53 - 1) * 0.15) + 1.0));
  BOOL v60 = v41 == 3 && v47 == 3 && v48 == 1 && v45 < 33;
  if (v60) {
    float v57 = v57 + v57;
  }
  float v61 = (float)*(int *)(a3 + 36);
  float v62 = v61 * 150.0;
  float v63 = (float)(v61 * 150.0) * 0.4;
  float v64 = (float)((float)((float)(v56 / v61) + -60.0) / 300.0) + (float)(v57 * 0.4);
  if (v64 >= 1.0) {
    float v65 = 0.1;
  }
  else {
    float v65 = v64 * 0.1;
  }
  float v66 = (float)((float)(v56 * v57) * 0.1) / v62;
  if (v56 < v63) {
    float v67 = v66;
  }
  else {
    float v67 = v65;
  }
  uint64_t ElementBitWidth = mlir::getElementBitWidth(v100[0]);
  BOOL v69 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v100);
  uint64_t NumElements = mlir::ShapedType::getNumElements(v69, v70);
  if (ElementBitWidth) {
    uint64_t v72 = NumElements;
  }
  else {
    uint64_t v72 = 0;
  }
  uint64_t v73 = mlir::getElementBitWidth(v99[0]);
  unint64_t v74 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v99);
  uint64_t v76 = mlir::ShapedType::getNumElements(v74, v75);
  if (v73) {
    uint64_t v77 = v76;
  }
  else {
    uint64_t v77 = 0;
  }
  uint64_t v78 = v77 + v72;
  uint64_t v79 = mlir::getElementBitWidth(v98[0]);
  int64_t v80 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v98);
  uint64_t v82 = mlir::ShapedType::getNumElements(v80, v81);
  if (v79) {
    uint64_t v83 = v82;
  }
  else {
    uint64_t v83 = 0;
  }
  uint64_t ParentOp = v101;
  float v85 = (float)(2 * (v78 + v83));
  uint64_t v102 = OperandRange;
  while (1)
  {
    uint64_t v86 = *(mlir::Block **)(ParentOp + 16);
    if (!v86) {
      break;
    }
    uint64_t ParentOp = mlir::Block::getParentOp(v86);
    if (!ParentOp) {
      break;
    }
    if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
    {
      int v87 = 1;
      goto LABEL_71;
    }
  }
  int v87 = 0;
LABEL_71:
  if (*(unsigned char *)a3) {
    int v88 = 1;
  }
  else {
    int v88 = v87;
  }
  if (mlir::Type::isF16((mlir::Type *)&v102))
  {
    uint64_t v89 = 8;
    if (v88) {
      uint64_t v89 = 24;
    }
    __int16 v90 = (float *)(a3 + v89);
  }
  else
  {
    BOOL isF32 = mlir::Type::isF32((mlir::Type *)&v102);
    uint64_t v92 = 12;
    if (v88) {
      uint64_t v92 = 28;
    }
    __int16 v90 = (float *)(a3 + v92);
    uint64_t v93 = 4;
    if (v88) {
      uint64_t v93 = 20;
    }
    uint64_t v94 = (float *)(a3 + v93);
    if (isF32) {
      __int16 v90 = v94;
    }
  }
  float v95 = (float)(*v90 * 1.0e12) * 0.5;
  uint64_t v96 = 16;
  if (v88) {
    uint64_t v96 = 32;
  }
  float v97 = (float)v54 / (float)(v67 * v95);
  if ((float)(v85 / (float)(*(float *)(a3 + v96) * 1000000000.0)) >= v97) {
    float v38 = v85 / (float)(*(float *)(a3 + v96) * 1000000000.0);
  }
  else {
    float v38 = v97;
  }
  if (v103 != &v105) {
    free(v103);
  }
  if (v107 != v109) {
    free(v107);
  }
  return v38;
}

uint64_t *mlir::mps::MPSCostModel::computeCostPoolAvgOp(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  return mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolAvgOp>(a3, a2);
}

uint64_t *mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolAvgOp>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t v50 = a2;
  uint64_t v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(*(void *)(*((void *)a2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v5 = v4;
  v49[0] = v3;
  v49[1] = v4;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8));
  v48[0] = result;
  v48[1] = v7;
  uint64_t v44 = (uint64_t)v3;
  uint64_t v45 = v5;
  if (!v3) {
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = v7;
  uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
  if (!result) {
    return result;
  }
  uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v44);
  if (!v10)
  {
LABEL_7:
    uint64_t v44 = (uint64_t)v8;
    uint64_t v45 = v9;
    if (!v8) {
      return result;
    }
    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
    if (!result) {
      return result;
    }
    uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v44);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      while (*result != 0x8000000000000000)
      {
        ++result;
        v13 -= 8;
        if (!v13) {
          goto LABEL_13;
        }
      }
      return result;
    }
LABEL_13:
    mlir::Operation::getAttrDictionary(a2);
    uint64_t WindowSizes = mlir::mps::PoolAvgOp::getWindowSizes((mlir::mps::PoolAvgOp *)&v50);
    uint64_t v15 = WindowSizes;
    if (WindowSizes && !mlir::DenseIntElementsAttr::classof(WindowSizes)) {
      uint64_t v15 = 0;
    }
    uint64_t v47 = v15;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v44, v15, 0);
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v47);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v41, v15, NumElements);
    uint64_t v17 = 1;
    while (1)
    {
      BOOL v19 = v44 == v41 && v45 == v42;
      if (v19 && v46 == v43) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v44, (llvm::APInt *)&v39);
      if (v40 > 0x40)
      {
        uint64_t v18 = *v39;
        MEMORY[0x21667D390]();
      }
      else
      {
        uint64_t v18 = (uint64_t)((void)v39 << -(uint64_t)v40) >> -(uint64_t)v40;
      }
      v17 *= v18;
      ++v46;
    }
    uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v48);
    uint64_t v22 = v21;
    mlir::getElementBitWidth(v3);
    BOOL v23 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v49);
    mlir::ShapedType::getNumElements(v23, v24);
    mlir::getElementBitWidth(v48[0]);
    uint64_t v25 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v48);
    mlir::ShapedType::getNumElements(v25, v26);
    uint64_t v27 = v22 != 0;
    if (v22)
    {
      uint64_t v28 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v28)
      {
        uint64_t v29 = v28 + 1;
        uint64_t v30 = (v28 + 1) & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v31 = (uint64_t *)(Shape + 8 * v30);
        uint64_t v32 = (void *)(Shape + 8);
        uint64_t v33 = 1;
        uint64_t v34 = v30;
        do
        {
          v27 *= *(v32 - 1);
          v33 *= *v32;
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        v27 *= v33;
        if (v29 == v30) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v31 = (uint64_t *)Shape;
      }
      do
      {
        uint64_t v35 = *v31++;
        v27 *= v35;
      }
      while (v31 != (uint64_t *)(Shape + 8 * v22));
    }
LABEL_36:
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v48);
    uint64_t ParentOp = (uint64_t)v50;
    uint64_t v44 = OperandRange;
    do
    {
      float v38 = *(mlir::Block **)(ParentOp + 16);
      if (!v38) {
        break;
      }
      uint64_t ParentOp = mlir::Block::getParentOp(v38);
      if (!ParentOp) {
        break;
      }
    }
    while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
    uint64_t result = (uint64_t *)mlir::Type::isF16((mlir::Type *)&v44);
    if (!result) {
      return (uint64_t *)mlir::Type::isF32((mlir::Type *)&v44);
    }
    return result;
  }
  uint64_t v11 = 8 * v10;
  while (*result != 0x8000000000000000)
  {
    ++result;
    v11 -= 8;
    if (!v11) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostPoolL2NormOp(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  return mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolAvgOp>(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostPoolMaxOp(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  return mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolMaxOp>(a3, a2);
}

uint64_t *mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolMaxOp>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t v50 = a2;
  uint64_t v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(*(void *)(*((void *)a2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v5 = v4;
  v49[0] = v3;
  v49[1] = v4;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8));
  v48[0] = result;
  v48[1] = v7;
  uint64_t v44 = (uint64_t)v3;
  uint64_t v45 = v5;
  if (!v3) {
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = v7;
  uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
  if (!result) {
    return result;
  }
  uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v44);
  if (!v10)
  {
LABEL_7:
    uint64_t v44 = (uint64_t)v8;
    uint64_t v45 = v9;
    if (!v8) {
      return result;
    }
    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
    if (!result) {
      return result;
    }
    uint64_t result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v44);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      while (*result != 0x8000000000000000)
      {
        ++result;
        v13 -= 8;
        if (!v13) {
          goto LABEL_13;
        }
      }
      return result;
    }
LABEL_13:
    mlir::Operation::getAttrDictionary(a2);
    uint64_t WindowSizes = mlir::mps::PoolMaxOp::getWindowSizes((mlir::mps::PoolMaxOp *)&v50);
    uint64_t v15 = WindowSizes;
    if (WindowSizes && !mlir::DenseIntElementsAttr::classof(WindowSizes)) {
      uint64_t v15 = 0;
    }
    uint64_t v47 = v15;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v44, v15, 0);
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v47);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v41, v15, NumElements);
    uint64_t v17 = 1;
    while (1)
    {
      BOOL v19 = v44 == v41 && v45 == v42;
      if (v19 && v46 == v43) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v44, (llvm::APInt *)&v39);
      if (v40 > 0x40)
      {
        uint64_t v18 = *v39;
        MEMORY[0x21667D390]();
      }
      else
      {
        uint64_t v18 = (uint64_t)((void)v39 << -(uint64_t)v40) >> -(uint64_t)v40;
      }
      v17 *= v18;
      ++v46;
    }
    uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v48);
    uint64_t v22 = v21;
    mlir::getElementBitWidth(v3);
    BOOL v23 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v49);
    mlir::ShapedType::getNumElements(v23, v24);
    mlir::getElementBitWidth(v48[0]);
    uint64_t v25 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v48);
    mlir::ShapedType::getNumElements(v25, v26);
    uint64_t v27 = v22 != 0;
    if (v22)
    {
      uint64_t v28 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v28)
      {
        uint64_t v29 = v28 + 1;
        uint64_t v30 = (v28 + 1) & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v31 = (uint64_t *)(Shape + 8 * v30);
        uint64_t v32 = (void *)(Shape + 8);
        uint64_t v33 = 1;
        uint64_t v34 = v30;
        do
        {
          v27 *= *(v32 - 1);
          v33 *= *v32;
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        v27 *= v33;
        if (v29 == v30) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v31 = (uint64_t *)Shape;
      }
      do
      {
        uint64_t v35 = *v31++;
        v27 *= v35;
      }
      while (v31 != (uint64_t *)(Shape + 8 * v22));
    }
LABEL_36:
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v48);
    uint64_t ParentOp = (uint64_t)v50;
    uint64_t v44 = OperandRange;
    do
    {
      float v38 = *(mlir::Block **)(ParentOp + 16);
      if (!v38) {
        break;
      }
      uint64_t ParentOp = mlir::Block::getParentOp(v38);
      if (!ParentOp) {
        break;
      }
    }
    while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
    uint64_t result = (uint64_t *)mlir::Type::isF16((mlir::Type *)&v44);
    if (!result) {
      return (uint64_t *)mlir::Type::isF32((mlir::Type *)&v44);
    }
    return result;
  }
  uint64_t v11 = 8 * v10;
  while (*result != 0x8000000000000000)
  {
    ++result;
    v11 -= 8;
    if (!v11) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostBiasAddOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCropResizeOp(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v27);
  uint64_t v3 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v27);
  uint64_t v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = v5;
  v26[0] = v4;
  v26[1] = v5;
  uint64_t result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v25[0] = (void *)result;
  v25[1] = v8;
  uint64_t OperandRange = result;
  uint64_t v29 = v8;
  if (result)
  {
    uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if (result)
    {
      uint64_t result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        while (*(void *)result != 0x8000000000000000)
        {
          result += 8;
          v10 -= 8;
          if (!v10) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        uint64_t OperandRange = (uint64_t)v4;
        uint64_t v29 = v6;
        if (v4)
        {
          uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if (result)
          {
            uint64_t result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
            if (v11)
            {
              uint64_t v12 = 8 * v11;
              while (*(void *)result != 0x8000000000000000)
              {
                result += 8;
                v12 -= 8;
                if (!v12) {
                  goto LABEL_13;
                }
              }
            }
            else
            {
LABEL_13:
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
              uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(Shape, v14);
              mlir::getElementBitWidth(v25[0]);
              uint64_t v15 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(v15, v16);
              int InterpolationMode = mlir::mps::CropResizeOp::getInterpolationMode((mlir::mps::CropResizeOp *)&v27);
              uint64_t v18 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(v18, v19);
              if (InterpolationMode == 1)
              {
                mlir::getElementBitWidth(v26[0]);
                uint64_t v20 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
                mlir::ShapedType::getNumElements(v20, v21);
              }
              uint64_t v22 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v25);
              uint64_t ParentOp = v27;
              uint64_t OperandRange = v22;
              do
              {
                uint64_t v24 = *(mlir::Block **)(ParentOp + 16);
                if (!v24) {
                  break;
                }
                uint64_t ParentOp = mlir::Block::getParentOp(v24);
                if (!ParentOp) {
                  break;
                }
              }
              while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              uint64_t result = mlir::Type::isF16((mlir::Type *)&OperandRange);
              if (!result) {
                return mlir::Type::isF32((mlir::Type *)&OperandRange);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void mlir::mps::MPSCostModel::~MPSCostModel(mlir::mps::MPSCostModel *this)
{
}

double mlir::mps::detail::MPSCostModelWithDefault::defaultComputeCost()
{
  return 0.0;
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostAssignVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBandPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBiasAddGradOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBroadcastGradientArgsOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBroadcastToOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCallOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostColToImOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConstantOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv3DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCostVolumeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCreateComplexOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCreateTextureTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCropOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDegammaOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv2DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDequantizeLUTOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDequantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDimensionSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDiracOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDynamicShapeCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostExpandDimsOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostFastFourierTransformOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostFlatten2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGRUGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGRUOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGatherAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGetCoordOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostHammingDistanceOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostHermiteanToRealFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostImToColOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostImaginaryPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostInitRandomPhiloxStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLPNormOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLSTMGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLocalConvolutionDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLocalConvolutionOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLocalConvolutionWeightGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMaterializeSparseTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMatrixDecompositionLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMatrixInverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMatrixSolverLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostNReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostNonMaximumSuppressionOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostNonZeroOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostOneHotOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPadGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPermuteOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPlaceholderOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPoolAvgGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPoolL2NormGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPoolMaxGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPruningGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPruningOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostQuantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRandomNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRandomTruncatedNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRandomUniformOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRankOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReadDataFromFileOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReadVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRealPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRealToHermiteanFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReinterpretCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReshapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostResizeGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSampleGridDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostScatterAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostScatterNDOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostScatterOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostShapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSigmoidGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSigmoidGradientWithSigmoidOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSigmoidHardOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSingleGateRNNGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSingleGateRNNOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSliceOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSplitOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSqueezeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostStencilOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostStridedSliceGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostStridedSliceUpdateOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTileGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTileOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTopKGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTopKOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTransposeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTypeConstraintOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostUnrealizedFoldOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostUpdateRandomStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostVariableFromTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

const unsigned __int8 ***std::__call_once_proxy[abi:nn180100]<std::tuple<mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::$_0 &&>>()
{
  uint64_t v0 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.acos", (const unsigned __int8 *)8);
  v0[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostACosOp;
  v0[2] = 0;
  uint64_t v1 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.acosh", (const unsigned __int8 *)9);
  v1[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostACoshOp;
  v1[2] = 0;
  uint64_t v2 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.asin", (const unsigned __int8 *)8);
  v2[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostASinOp;
  v2[2] = 0;
  uint64_t v3 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.asinh", (const unsigned __int8 *)9);
  v3[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostASinhOp;
  v3[2] = 0;
  uint64_t v4 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.atan2", (const unsigned __int8 *)9);
  v4[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostATan2Op;
  v4[2] = 0;
  uint64_t v5 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.atan", (const unsigned __int8 *)8);
  v5[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostATanOp;
  v5[2] = 0;
  uint64_t v6 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.atanh", (const unsigned __int8 *)9);
  v6[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostATanhOp;
  v6[2] = 0;
  uint64_t v7 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.absolute", (const unsigned __int8 *)0xC);
  v7[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteOp;
  v7[2] = 0;
  uint64_t v8 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.absolute_square", (const unsigned __int8 *)0x13);
  v8[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteSquareOp;
  v8[2] = 0;
  uint64_t v9 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.add", (const unsigned __int8 *)7);
  v9[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAddOp;
  void v9[2] = 0;
  uint64_t v10 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.and", (const unsigned __int8 *)7);
  v10[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAndOp;
  unint64_t v10[2] = 0;
  uint64_t v11 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.assign_variable", (const unsigned __int8 *)0x13);
  v11[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAssignVariableOp;
  v11[2] = 0;
  uint64_t v12 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.band_part", (const unsigned __int8 *)0xD);
  v12[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBandPartOp;
  void v12[2] = 0;
  uint64_t v13 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.batch_to_space", (const unsigned __int8 *)0x12);
  v13[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBatchToSpaceOp;
  unint64_t v13[2] = 0;
  uint64_t v14 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bias_add_grad", (const unsigned __int8 *)0x11);
  v14[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddGradOp;
  void v14[2] = 0;
  uint64_t v15 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bias_add", (const unsigned __int8 *)0xC);
  v15[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddOp;
  void v15[2] = 0;
  uint64_t v16 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_and", (const unsigned __int8 *)0xF);
  v16[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseAndOp;
  v16[2] = 0;
  uint64_t v17 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_left_shift", (const unsigned __int8 *)0x16);
  v17[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseLeftShiftOp;
  unint64_t v17[2] = 0;
  uint64_t v18 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_not", (const unsigned __int8 *)0xF);
  v18[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseNotOp;
  void v18[2] = 0;
  uint64_t v19 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_or", (const unsigned __int8 *)0xE);
  v19[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseOrOp;
  void v19[2] = 0;
  uint64_t v20 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_popcount", (const unsigned __int8 *)0x14);
  v20[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwisePopcountOp;
  void v20[2] = 0;
  uint64_t v21 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_right_shift", (const unsigned __int8 *)0x17);
  v21[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseRightShiftOp;
  unint64_t v21[2] = 0;
  uint64_t v22 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_xor", (const unsigned __int8 *)0xF);
  v22[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseXorOp;
  void v22[2] = 0;
  BOOL v23 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.broadcast_gradient_args", (const unsigned __int8 *)0x1B);
  v23[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastGradientArgsOp;
  void v23[2] = 0;
  uint64_t v24 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.broadcast_to", (const unsigned __int8 *)0x10);
  v24[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastToOp;
  v24[2] = 0;
  uint64_t v25 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.call", (const unsigned __int8 *)8);
  v25[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCallOp;
  void v25[2] = 0;
  uint64_t v26 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cast", (const unsigned __int8 *)8);
  v26[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCastOp;
  void v26[2] = 0;
  uint64_t v27 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.ceil", (const unsigned __int8 *)8);
  v27[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCeilOp;
  unint64_t v27[2] = 0;
  uint64_t v28 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.clamp", (const unsigned __int8 *)9);
  v28[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostClampOp;
  v28[2] = 0;
  uint64_t v29 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.col_to_im", (const unsigned __int8 *)0xD);
  v29[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostColToImOp;
  uint64_t v29[2] = 0;
  uint64_t v30 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.concat", (const unsigned __int8 *)0xA);
  v30[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConcatOp;
  void v30[2] = 0;
  uint64_t v31 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conjugate", (const unsigned __int8 *)0xD);
  v31[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConjugateOp;
  void v31[2] = 0;
  uint64_t v32 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.constant", (const unsigned __int8 *)0xC);
  v32[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConstantOp;
  v32[2] = 0;
  uint64_t v33 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_2d_data_gradient", (const unsigned __int8 *)0x19);
  v33[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DDataGradientOp;
  unint64_t v33[2] = 0;
  uint64_t v34 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_2d", (const unsigned __int8 *)0xB);
  v34[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DOp;
  void v34[2] = 0;
  uint64_t v35 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_2d_weights_gradient", (const unsigned __int8 *)0x1C);
  v35[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DWeightsGradientOp;
  void v35[2] = 0;
  unint64_t v36 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_3d_data_gradient", (const unsigned __int8 *)0x19);
  v36[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DDataGradientOp;
  void v36[2] = 0;
  unsigned int v37 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_3d", (const unsigned __int8 *)0xB);
  v37[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DOp;
  void v37[2] = 0;
  float v38 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_3d_weights_gradient", (const unsigned __int8 *)0x1C);
  v38[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DWeightsGradientOp;
  void v38[2] = 0;
  unint64_t v39 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cos", (const unsigned __int8 *)7);
  v39[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCosOp;
  void v39[2] = 0;
  unsigned int v40 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cosh", (const unsigned __int8 *)8);
  v40[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCoshOp;
  void v40[2] = 0;
  uint64_t v41 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cost_volume", (const unsigned __int8 *)0xF);
  v41[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCostVolumeOp;
  v41[2] = 0;
  unsigned __int8 v42 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.create_complex", (const unsigned __int8 *)0x12);
  v42[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCreateComplexOp;
  void v42[2] = 0;
  uint64_t v43 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.create_texture_tensor", (const unsigned __int8 *)0x19);
  v43[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCreateTextureTensorOp;
  void v43[2] = 0;
  uint64_t v44 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.crop", (const unsigned __int8 *)8);
  v44[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCropOp;
  void v44[2] = 0;
  uint64_t v45 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.crop_resize", (const unsigned __int8 *)0xF);
  v45[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCropResizeOp;
  v45[2] = 0;
  uint64_t v46 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_maximum", (const unsigned __int8 *)0x16);
  v46[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMaximumOp;
  v46[2] = 0;
  uint64_t v47 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_minimum", (const unsigned __int8 *)0x16);
  v47[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMinimumOp;
  v47[2] = 0;
  uint64_t v48 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_product", (const unsigned __int8 *)0x16);
  v48[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeProductOp;
  void v48[2] = 0;
  uint64_t v49 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_sum", (const unsigned __int8 *)0x12);
  v49[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeSumOp;
  void v49[2] = 0;
  uint64_t v50 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.degamma", (const unsigned __int8 *)0xB);
  v50[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDegammaOp;
  void v50[2] = 0;
  uint64_t v51 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depth_to_space_2d", (const unsigned __int8 *)0x15);
  v51[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthToSpace2DOp;
  void v51[2] = 0;
  uint64_t v52 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_2d_data_gradient", (const unsigned __int8 *)0x23);
  v52[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DDataGradientOp;
  v52[2] = 0;
  uint64_t v53 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_2d", (const unsigned __int8 *)0x15);
  v53[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DOp;
  v53[2] = 0;
  uint64_t v54 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_2d_weights_gradient", (const unsigned __int8 *)0x26);
  v54[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DWeightsGradientOp;
  void v54[2] = 0;
  unint64_t v55 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_3d_data_gradient", (const unsigned __int8 *)0x23);
  v55[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DDataGradientOp;
  void v55[2] = 0;
  float v56 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_3d", (const unsigned __int8 *)0x15);
  v56[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DOp;
  v56[2] = 0;
  float v57 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_3d_weights_gradient", (const unsigned __int8 *)0x26);
  v57[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DWeightsGradientOp;
  v57[2] = 0;
  uint64_t v58 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dequantize_lut", (const unsigned __int8 *)0x12);
  v58[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeLUTOp;
  v58[2] = 0;
  long long v59 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE);
  v59[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeOp;
  v59[2] = 0;
  BOOL v60 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dimension_size", (const unsigned __int8 *)0x12);
  v60[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDimensionSizeOp;
  void v60[2] = 0;
  float v61 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dirac", (const unsigned __int8 *)9);
  v61[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDiracOp;
  v61[2] = 0;
  float v62 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.divide", (const unsigned __int8 *)0xA);
  v62[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDivideOp;
  v62[2] = 0;
  float v63 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dynamic_shape_cast", (const unsigned __int8 *)0x16);
  v63[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDynamicShapeCastOp;
  void v63[2] = 0;
  float v64 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.elu", (const unsigned __int8 *)7);
  v64[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostEluOp;
  v64[2] = 0;
  float v65 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.equal", (const unsigned __int8 *)9);
  v65[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostEqualToOp;
  v65[2] = 0;
  float v66 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.erf", (const unsigned __int8 *)7);
  v66[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostErfOp;
  v66[2] = 0;
  float v67 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.expand_dims", (const unsigned __int8 *)0xF);
  v67[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExpandDimsOp;
  v67[2] = 0;
  unint64_t v68 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.exponent_base_10", (const unsigned __int8 *)0x14);
  v68[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase10Op;
  v68[2] = 0;
  BOOL v69 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.exponent_base_2", (const unsigned __int8 *)0x13);
  v69[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase2Op;
  void v69[2] = 0;
  uint64_t v70 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.exponent", (const unsigned __int8 *)0xC);
  v70[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExponentOp;
  v70[2] = 0;
  unint64_t v71 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.fast_fourier_transform", (const unsigned __int8 *)0x1A);
  v71[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFastFourierTransformOp;
  v71[2] = 0;
  uint64_t v72 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.flatten_2d", (const unsigned __int8 *)0xE);
  v72[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFlatten2DOp;
  void v72[2] = 0;
  uint64_t v73 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.floor_divide", (const unsigned __int8 *)0x10);
  v73[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFloorDivideOp;
  v73[2] = 0;
  unint64_t v74 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.floor", (const unsigned __int8 *)9);
  v74[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFloorOp;
  v74[2] = 0;
  uint64_t v75 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gru_gradient", (const unsigned __int8 *)0x10);
  v75[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGRUGradientOp;
  v75[2] = 0;
  uint64_t v76 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gru", (const unsigned __int8 *)7);
  v76[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGRUOp;
  v76[2] = 0;
  uint64_t v77 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gather_along_axis", (const unsigned __int8 *)0x15);
  v77[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGatherAlongAxisOp;
  v77[2] = 0;
  uint64_t v78 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gather_nd", (const unsigned __int8 *)0xD);
  v78[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGatherNDOp;
  v78[2] = 0;
  uint64_t v79 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gather", (const unsigned __int8 *)0xA);
  v79[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGatherOp;
  v79[2] = 0;
  int64_t v80 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gelu", (const unsigned __int8 *)8);
  v80[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGeluOp;
  v80[2] = 0;
  uint64_t v81 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.get_coordinates", (const unsigned __int8 *)0x13);
  v81[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGetCoordOp;
  void v81[2] = 0;
  uint64_t v82 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.greater", (const unsigned __int8 *)0xB);
  v82[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOp;
  void v82[2] = 0;
  uint64_t v83 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.greater_equal", (const unsigned __int8 *)0x11);
  v83[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOrEqualToOp;
  void v83[2] = 0;
  uint64_t v84 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.hamming_distance", (const unsigned __int8 *)0x14);
  v84[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostHammingDistanceOp;
  v84[2] = 0;
  float v85 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.hermitean_to_real_fft", (const unsigned __int8 *)0x19);
  v85[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostHermiteanToRealFFTOp;
  v85[2] = 0;
  uint64_t v86 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.identity", (const unsigned __int8 *)0xC);
  v86[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIdentityOp;
  void v86[2] = 0;
  int v87 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.im_to_col", (const unsigned __int8 *)0xD);
  v87[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostImToColOp;
  void v87[2] = 0;
  int v88 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.imaginary_part", (const unsigned __int8 *)0x12);
  v88[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostImaginaryPartOp;
  void v88[2] = 0;
  uint64_t v89 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.init_random_philox_state", (const unsigned __int8 *)0x1C);
  v89[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostInitRandomPhiloxStateOp;
  void v89[2] = 0;
  __int16 v90 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.instance_norm", (const unsigned __int8 *)0x11);
  v90[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostInstanceNormOp;
  v90[2] = 0;
  unint64_t v91 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.is_finite", (const unsigned __int8 *)0xD);
  v91[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIsFiniteOp;
  v91[2] = 0;
  uint64_t v92 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.is_infinite", (const unsigned __int8 *)0xF);
  v92[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIsInfiniteOp;
  v92[2] = 0;
  uint64_t v93 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.is_nan", (const unsigned __int8 *)0xA);
  v93[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIsNaNOp;
  v93[2] = 0;
  uint64_t v94 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.lp_norm", (const unsigned __int8 *)0xB);
  v94[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLPNormOp;
  void v94[2] = 0;
  float v95 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.lstm_gradient", (const unsigned __int8 *)0x11);
  v95[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMGradientOp;
  unint64_t v95[2] = 0;
  uint64_t v96 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.lstm", (const unsigned __int8 *)8);
  v96[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMOp;
  unint64_t v96[2] = 0;
  float v97 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.leaky_relu", (const unsigned __int8 *)0xE);
  v97[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLeakyReluOp;
  v97[2] = 0;
  unint64_t v98 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.less", (const unsigned __int8 *)8);
  v98[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOp;
  unint64_t v98[2] = 0;
  uint64_t v99 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.less_equal", (const unsigned __int8 *)0xE);
  v99[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOrEqualToOp;
  v99[2] = 0;
  unsigned int v100 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.local_convolution_data_gradient", (const unsigned __int8 *)0x23);
  v100[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionDataGradientOp;
  v100[2] = 0;
  uint64_t v101 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.local_convolution", (const unsigned __int8 *)0x15);
  v101[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionOp;
  v101[2] = 0;
  uint64_t v102 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.local_convolution_weight_gradient", (const unsigned __int8 *)0x25);
  v102[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionWeightGradientOp;
  v102[2] = 0;
  uint64_t v103 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.logarithm_base_10", (const unsigned __int8 *)0x15);
  v103[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase10Op;
  v103[2] = 0;
  uint64_t v104 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.logarithm_base_2", (const unsigned __int8 *)0x14);
  v104[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase2Op;
  v104[2] = 0;
  long long v105 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.logarithm", (const unsigned __int8 *)0xD);
  v105[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmOp;
  v105[2] = 0;
  long long v106 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matmul", (const unsigned __int8 *)0xA);
  v106[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatMulOp;
  v106[2] = 0;
  char v107 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.materialize_sparse_tensor", (const unsigned __int8 *)0x1D);
  v107[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMaterializeSparseTensorOp;
  v107[2] = 0;
  uint64_t v108 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matrix_decomposition_lu", (const unsigned __int8 *)0x1B);
  v108[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixDecompositionLUOp;
  v108[2] = 0;
  unint64_t v109 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matrix_inverse", (const unsigned __int8 *)0x12);
  v109[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixInverseOp;
  _OWORD v109[2] = 0;
  uint64_t v110 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matrix_solver_lu", (const unsigned __int8 *)0x14);
  v110[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixSolverLUOp;
  v110[2] = 0;
  uint64_t v111 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.maximum", (const unsigned __int8 *)0xB);
  v111[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMaximumOp;
  v111[2] = 0;
  unint64_t v112 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.minimum", (const unsigned __int8 *)0xB);
  v112[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMinimumOp;
  v112[2] = 0;
  uint64_t v113 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.modulo", (const unsigned __int8 *)0xA);
  v113[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostModuloOp;
  v113[2] = 0;
  uint64_t v114 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.multiply", (const unsigned __int8 *)0xC);
  v114[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMultiplyOp;
  v114[2] = 0;
  unint64_t v115 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.n_relu", (const unsigned __int8 *)0xA);
  v115[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNReluOp;
  void v115[2] = 0;
  uint64_t v116 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.nand", (const unsigned __int8 *)8);
  v116[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNandOp;
  void v116[2] = 0;
  uint64_t v117 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.negative", (const unsigned __int8 *)0xC);
  v117[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNegativeOp;
  v117[2] = 0;
  unint64_t v118 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.non_maximum_suppression", (const unsigned __int8 *)0x1B);
  v118[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNonMaximumSuppressionOp;
  v118[2] = 0;
  unint64_t v119 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.non_zero", (const unsigned __int8 *)0xC);
  v119[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNonZeroOp;
  v119[2] = 0;
  unint64_t v120 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.nor", (const unsigned __int8 *)7);
  v120[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNorOp;
  uint64_t v120[2] = 0;
  uint64_t v121 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.normalization", (const unsigned __int8 *)0x11);
  v121[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNormalizationOp;
  void v121[2] = 0;
  unint64_t v122 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.not_equal", (const unsigned __int8 *)0xD);
  v122[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNotEqualToOp;
  void v122[2] = 0;
  unint64_t v123 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.not", (const unsigned __int8 *)7);
  v123[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNotOp;
  void v123[2] = 0;
  uint64_t v124 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.one_hot", (const unsigned __int8 *)0xB);
  v124[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostOneHotOp;
  void v124[2] = 0;
  unint64_t v125 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.or", (const unsigned __int8 *)6);
  v125[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostOrOp;
  v125[2] = 0;
  unint64_t v126 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.prelu", (const unsigned __int8 *)9);
  v126[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPReluOp;
  v126[2] = 0;
  uint64_t v127 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pad_gradient", (const unsigned __int8 *)0x10);
  v127[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPadGradientOp;
  v127[2] = 0;
  __int16 v128 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pad", (const unsigned __int8 *)7);
  v128[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPadOp;
  v128[2] = 0;
  unint64_t v129 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.permute", (const unsigned __int8 *)0xB);
  v129[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPermuteOp;
  v129[2] = 0;
  unint64_t v130 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.placeholder", (const unsigned __int8 *)0xF);
  v130[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPlaceholderOp;
  v130[2] = 0;
  long long v131 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_average_gradient", (const unsigned __int8 *)0x1C);
  v131[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgGradientOp;
  v131[2] = 0;
  uint64_t v132 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_average", (const unsigned __int8 *)0x13);
  v132[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgOp;
  void v132[2] = 0;
  char v133 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_l2_norm_gradient", (const unsigned __int8 *)0x1C);
  v133[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormGradientOp;
  v133[2] = 0;
  uint64_t v134 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_l2_norm", (const unsigned __int8 *)0x13);
  v134[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormOp;
  v134[2] = 0;
  unsigned int v135 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_max_gradient", (const unsigned __int8 *)0x18);
  v135[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxGradientOp;
  v135[2] = 0;
  uint64_t v136 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_max", (const unsigned __int8 *)0xF);
  v136[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxOp;
  v136[2] = 0;
  unint64_t v137 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.power", (const unsigned __int8 *)9);
  v137[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPowerOp;
  v137[2] = 0;
  unint64_t v138 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.prune_gradient", (const unsigned __int8 *)0x12);
  v138[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPruningGradientOp;
  v138[2] = 0;
  unint64_t v139 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.prune", (const unsigned __int8 *)9);
  v139[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPruningOp;
  v139[2] = 0;
  unint64_t v140 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.quantize", (const unsigned __int8 *)0xC);
  v140[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostQuantizeOp;
  v140[2] = 0;
  uint64_t v141 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.random_normal", (const unsigned __int8 *)0x11);
  v141[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRandomNormalOp;
  v141[2] = 0;
  unint64_t v142 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.random_truncated_normal", (const unsigned __int8 *)0x1B);
  v142[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRandomTruncatedNormalOp;
  v142[2] = 0;
  long long v143 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.random_uniform", (const unsigned __int8 *)0x12);
  v143[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRandomUniformOp;
  v143[2] = 0;
  uint64_t v144 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.rank", (const unsigned __int8 *)8);
  v144[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRankOp;
  v144[2] = 0;
  __int16 v145 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.read_data_from_file", (const unsigned __int8 *)0x17);
  v145[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReadDataFromFileOp;
  v145[2] = 0;
  unint64_t v146 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.read_variable", (const unsigned __int8 *)0x11);
  v146[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReadVariableOp;
  v146[2] = 0;
  uint64_t v147 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.real_part", (const unsigned __int8 *)0xD);
  v147[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRealPartOp;
  v147[2] = 0;
  unint64_t v148 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.real_to_hermitean_fft", (const unsigned __int8 *)0x19);
  v148[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRealToHermiteanFFTOp;
  v148[2] = 0;
  unint64_t v149 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reciprocal", (const unsigned __int8 *)0xE);
  v149[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalOp;
  v149[2] = 0;
  unint64_t v150 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reciprocal_square_root", (const unsigned __int8 *)0x1A);
  v150[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalSquareRootOp;
  v150[2] = 0;
  uint64_t v151 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_and", (const unsigned __int8 *)0x11);
  v151[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionAndOp;
  v151[2] = 0;
  unint64_t v152 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_argmax", (const unsigned __int8 *)0x14);
  v152[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMaxOp;
  v152[2] = 0;
  unint64_t v153 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_argmin", (const unsigned __int8 *)0x14);
  v153[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMinOp;
  void v153[2] = 0;
  unint64_t v154 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_logsumexp", (const unsigned __int8 *)0x17);
  v154[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionLogSumExpOp;
  v154[2] = 0;
  unsigned int v155 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_max", (const unsigned __int8 *)0x11);
  v155[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMaxOp;
  v155[2] = 0;
  unsigned int v156 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_mean", (const unsigned __int8 *)0x12);
  v156[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMeanOp;
  v156[2] = 0;
  uint64_t v157 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_min", (const unsigned __int8 *)0x11);
  v157[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMinOp;
  v157[2] = 0;
  uint64_t v158 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_or", (const unsigned __int8 *)0x10);
  v158[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionOrOp;
  v158[2] = 0;
  unint64_t v159 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_prod", (const unsigned __int8 *)0x12);
  v159[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionProdOp;
  v159[2] = 0;
  uint64_t v160 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_sum", (const unsigned __int8 *)0x11);
  v160[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionSumOp;
  v160[2] = 0;
  long long v161 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_variance", (const unsigned __int8 *)0x16);
  v161[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionVarianceOp;
  v161[2] = 0;
  unint64_t v162 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reinterpret_cast", (const unsigned __int8 *)0x14);
  v162[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReinterpretCastOp;
  v162[2] = 0;
  uint64_t v163 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.relu6", (const unsigned __int8 *)9);
  v163[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRelu6Op;
  v163[2] = 0;
  unint64_t v164 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.relu_grad", (const unsigned __int8 *)0xD);
  v164[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReluGradOp;
  v164[2] = 0;
  unint64_t v165 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.relu", (const unsigned __int8 *)8);
  v165[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReluOp;
  _OWORD v165[2] = 0;
  uint64_t v166 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB);
  v166[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReshapeOp;
  v166[2] = 0;
  uint64_t v167 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.resize_gradient", (const unsigned __int8 *)0x13);
  v167[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostResizeGradientOp;
  v167[2] = 0;
  uint64_t v168 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.resize", (const unsigned __int8 *)0xA);
  v168[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostResizeOp;
  v168[2] = 0;
  uint64_t v169 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reverse", (const unsigned __int8 *)0xB);
  v169[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReverseOp;
  v169[2] = 0;
  uint64_t v170 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.rint", (const unsigned __int8 *)8);
  v170[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRintOp;
  v170[2] = 0;
  unint64_t v171 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.round", (const unsigned __int8 *)9);
  v171[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRoundOp;
  v171[2] = 0;
  uint64_t v172 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sample_grid_data_gradient", (const unsigned __int8 *)0x1D);
  v172[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridDataGradientOp;
  v172[2] = 0;
  unint64_t v173 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sample_grid", (const unsigned __int8 *)0xF);
  v173[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridOp;
  v173[2] = 0;
  uint64_t v174 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.scatter_along_axis", (const unsigned __int8 *)0x16);
  v174[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostScatterAlongAxisOp;
  v174[2] = 0;
  uint64_t v175 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.scatter_nd", (const unsigned __int8 *)0xE);
  v175[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostScatterNDOp;
  v175[2] = 0;
  uint64_t v176 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.scatter", (const unsigned __int8 *)0xB);
  v176[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostScatterOp;
  v176[2] = 0;
  unint64_t v177 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.select", (const unsigned __int8 *)0xA);
  v177[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSelectOp;
  v177[2] = 0;
  unsigned int v178 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.shape", (const unsigned __int8 *)9);
  v178[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostShapeOp;
  v178[2] = 0;
  uint64_t v179 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid_gradient", (const unsigned __int8 *)0x14);
  v179[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientOp;
  v179[2] = 0;
  unint64_t v180 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid_gradient_with_sigmoid", (const unsigned __int8 *)0x21);
  v180[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientWithSigmoidOp;
  void v180[2] = 0;
  v181 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid_hard", (const unsigned __int8 *)0x10);
  v181[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidHardOp;
  void v181[2] = 0;
  uint64_t v182 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid", (const unsigned __int8 *)0xB);
  v182[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidOp;
  v182[2] = 0;
  uint64_t v183 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sign", (const unsigned __int8 *)8);
  v183[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSignOp;
  v183[2] = 0;
  uint64_t v184 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.signbit", (const unsigned __int8 *)0xB);
  v184[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSignbitOp;
  v184[2] = 0;
  uint64_t v185 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sin", (const unsigned __int8 *)7);
  v185[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSinOp;
  v185[2] = 0;
  unint64_t v186 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.singlegate_rnn_gradient", (const unsigned __int8 *)0x1B);
  v186[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNGradientOp;
  v186[2] = 0;
  unsigned int v187 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.singlegate_rnn", (const unsigned __int8 *)0x12);
  v187[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNOp;
  v187[2] = 0;
  uint64_t v188 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sinh", (const unsigned __int8 *)8);
  v188[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSinhOp;
  v188[2] = 0;
  unsigned int v189 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.size", (const unsigned __int8 *)8);
  v189[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSizeOp;
  v189[2] = 0;
  unint64_t v190 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.slice", (const unsigned __int8 *)9);
  v190[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSliceOp;
  v190[2] = 0;
  v191 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softmax", (const unsigned __int8 *)0xB);
  v191[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftmaxOp;
  v191[2] = 0;
  v192 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softplus", (const unsigned __int8 *)0xC);
  v192[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusOp;
  int v192[2] = 0;
  unsigned int v193 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softplus_parametric", (const unsigned __int8 *)0x17);
  v193[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusParametricOp;
  v193[2] = 0;
  v194 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softsign", (const unsigned __int8 *)0xC);
  v194[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftsignOp;
  v194[2] = 0;
  uint64_t v195 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sort", (const unsigned __int8 *)8);
  v195[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSortOp;
  v195[2] = 0;
  __int16 v196 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.space_to_batch", (const unsigned __int8 *)0x12);
  v196[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToBatchOp;
  v196[2] = 0;
  v197 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.space_to_depth_2d", (const unsigned __int8 *)0x15);
  v197[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToDepth2DOp;
  void v197[2] = 0;
  v198 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.split", (const unsigned __int8 *)9);
  v198[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSplitOp;
  void v198[2] = 0;
  v199 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.square", (const unsigned __int8 *)0xA);
  v199[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSquareOp;
  uint64_t v199[2] = 0;
  v200 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.square_root", (const unsigned __int8 *)0xF);
  v200[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSquareRootOp;
  v200[2] = 0;
  uint64_t v201 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.squeeze", (const unsigned __int8 *)0xB);
  v201[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSqueezeOp;
  v201[2] = 0;
  v202 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.stencil", (const unsigned __int8 *)0xB);
  v202[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStencilOp;
  v202[2] = 0;
  uint64_t v203 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.strided_slice_gradient", (const unsigned __int8 *)0x1A);
  v203[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceGradientOp;
  v203[2] = 0;
  v204 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.strided_slice", (const unsigned __int8 *)0x11);
  v204[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceOp;
  v204[2] = 0;
  v205 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.strided_slice_update", (const unsigned __int8 *)0x18);
  v205[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceUpdateOp;
  void v205[2] = 0;
  unint64_t v206 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.subtract", (const unsigned __int8 *)0xC);
  v206[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSubtractOp;
  v206[2] = 0;
  unsigned int v207 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.swish", (const unsigned __int8 *)9);
  v207[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSwishOp;
  v207[2] = 0;
  unsigned int v208 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tan", (const unsigned __int8 *)7);
  v208[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTanOp;
  v208[2] = 0;
  v209 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tanh", (const unsigned __int8 *)8);
  v209[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTanhOp;
  v209[2] = 0;
  uint64_t v210 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tile_gradient", (const unsigned __int8 *)0x11);
  v210[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTileGradientOp;
  v210[2] = 0;
  uint64_t v211 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tile", (const unsigned __int8 *)8);
  v211[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTileOp;
  v211[2] = 0;
  v212 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.top_k_grad", (const unsigned __int8 *)0xE);
  v212[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTopKGradientOp;
  v212[2] = 0;
  v213 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.top_k", (const unsigned __int8 *)9);
  v213[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTopKOp;
  v213[2] = 0;
  v214 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.transpose", (const unsigned __int8 *)0xD);
  v214[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTransposeOp;
  v214[2] = 0;
  v215 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.truncate", (const unsigned __int8 *)0xC);
  v215[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTruncateOp;
  v215[2] = 0;
  v216 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.type_constraint", (const unsigned __int8 *)0x13);
  v216[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTypeConstraintOp;
  v216[2] = 0;
  v217 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.unrealized_fold", (const unsigned __int8 *)0x13);
  v217[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostUnrealizedFoldOp;
  v217[2] = 0;
  v218 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.update_random_state", (const unsigned __int8 *)0x17);
  v218[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostUpdateRandomStateOp;
  v218[2] = 0;
  v219 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.variable_from_tensor", (const unsigned __int8 *)0x18);
  v219[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostVariableFromTensorOp;
  v219[2] = 0;
  v220 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.xnor", (const unsigned __int8 *)8);
  v220[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostXnorOp;
  v220[2] = 0;
  uint64_t result = llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.xor", (const unsigned __int8 *)7);
  v222 = *result;
  v222[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostXorOp;
  v222[2] = 0;
  return result;
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostACosOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostACoshOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostASinOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostASinhOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostATan2Op(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostATanOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostATanhOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteSquareOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAddOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAndOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAssignVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBandPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBatchToSpaceOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddGradOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseAndOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseLeftShiftOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseNotOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseOrOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwisePopcountOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseRightShiftOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseXorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastGradientArgsOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastToOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 216))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCallOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 224))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 232))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCeilOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 240))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostClampOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 248))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostColToImOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 256))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConcatOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 264))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConjugateOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 272))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConstantOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 280))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 288))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 296))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 304))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 312))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 320))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 328))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCosOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 336))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCoshOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 344))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCostVolumeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 352))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCreateComplexOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 360))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCreateTextureTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 368))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCropOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCropResizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 384))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMaximumOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 392))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMinimumOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 400))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeProductOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 408))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeSumOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 416))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDegammaOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 424))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthToSpace2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 432))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 440))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 448))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 456))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 464))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 472))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 480))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeLUTOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 488))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 496))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDimensionSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 504))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDiracOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 512))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDivideOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 520))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDynamicShapeCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 528))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostEluOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 536))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 544))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostErfOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 552))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExpandDimsOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 560))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase10Op(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 568))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase2Op(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 576))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExponentOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 584))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFastFourierTransformOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 592))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFlatten2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 600))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFloorDivideOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 608))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFloorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 616))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGRUGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 624))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGRUOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 632))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGatherAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 640))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGatherNDOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 648))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGatherOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 656))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGeluOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 664))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGetCoordOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 672))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 680))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOrEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 688))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostHammingDistanceOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 696))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostHermiteanToRealFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 704))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIdentityOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 712))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostImToColOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 720))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostImaginaryPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 728))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostInitRandomPhiloxStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 736))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostInstanceNormOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 744))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIsFiniteOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 752))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIsInfiniteOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 760))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIsNaNOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 768))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLPNormOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 776))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 784))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 792))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLeakyReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 800))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 808))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOrEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 816))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 824))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 832))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionWeightGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 840))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase10Op(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 848))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase2Op(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 856))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 864))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatMulOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 872))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMaterializeSparseTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 880))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixDecompositionLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 888))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixInverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 896))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixSolverLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 904))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMaximumOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 912))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMinimumOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 920))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostModuloOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 928))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMultiplyOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 936))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 944))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNandOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 952))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNegativeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 960))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNonMaximumSuppressionOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 968))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNonZeroOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 976))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 984))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNormalizationOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 992))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNotEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1000))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNotOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1008))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostOneHotOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1016))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostOrOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1024))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1032))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPadGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1040))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPadOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1048))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPermuteOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1056))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPlaceholderOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1064))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1072))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1080))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1088))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1096))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1104))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1112))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPowerOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1120))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPruningGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1128))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPruningOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1136))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostQuantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1144))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRandomNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1152))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRandomTruncatedNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1160))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRandomUniformOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1168))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRankOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1176))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReadDataFromFileOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1184))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReadVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1192))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRealPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1200))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRealToHermiteanFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1208))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1216))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalSquareRootOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1224))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionAndOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1232))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1240))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMinOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1248))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionLogSumExpOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1256))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1264))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMeanOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1272))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMinOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1280))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionOrOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1288))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionProdOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1296))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionSumOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1304))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionVarianceOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1312))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReinterpretCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1320))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRelu6Op(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1328))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReluGradOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1336))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1344))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReshapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1352))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostResizeGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1360))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostResizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1368))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1376))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRintOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1384))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRoundOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1392))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1400))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1408))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostScatterAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1416))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostScatterNDOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1424))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostScatterOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1432))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSelectOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1440))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostShapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1448))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1456))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientWithSigmoidOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1464))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidHardOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1472))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1480))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSignOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1488))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSignbitOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1496))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSinOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1504))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1512))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1520))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSinhOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1528))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1536))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSliceOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1544))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftmaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1552))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1560))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusParametricOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1568))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftsignOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1576))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSortOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1584))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToBatchOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1592))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToDepth2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1600))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSplitOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1608))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSquareOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1616))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSquareRootOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1624))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSqueezeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1632))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStencilOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1640))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1648))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1656))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceUpdateOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1664))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSubtractOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1672))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSwishOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1680))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTanOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1688))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTanhOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1696))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTileGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1704))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTileOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1712))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTopKGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1720))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTopKOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1728))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTransposeOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1736))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTruncateOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1744))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTypeConstraintOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1752))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostUnrealizedFoldOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1760))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostUpdateRandomStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1768))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostVariableFromTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1776))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostXnorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1784))();
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostXorOp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1792))();
}

const unsigned __int8 ***llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t i = (const unsigned __int8 ***)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == (const unsigned __int8 **)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (const unsigned __int8 **)-8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  buffer = llvm::allocate_buffer((size_t)(a3 + 25), (std::align_val_t)8uLL);
  uint64_t v11 = (const unsigned __int8 **)buffer;
  uint64_t v12 = (char *)(buffer + 3);
  if (a3) {
    memcpy(buffer + 3, a2, (size_t)a3);
  }
  a3[(void)v12] = 0;
  v11[1] = 0;
  v11[2] = 0;
  void *v11 = a3;
  MirInfoChannelAssignment *i = v11;
  ++*(_DWORD *)(a1 + 12);
  for (uint64_t i = (const unsigned __int8 ***)(*(void *)a1
                                      + 8
                                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t mlir::mps::foldCastOp(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v206 = a3;
  uint64_t v207 = a1;
  uint64_t v205 = a2;
  uint64_t v5 = (uint64_t *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v207) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    uint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  v204[0] = v5;
  v204[1] = v15;
  uint64_t OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v204);
  Type = (uint64_t *)mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v207);
  v202 = Type;
  if (OperandRange == Type) {
    return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v207) | 4;
  }
  if (!v205) {
    return 0;
  }
  uint64_t v17 = (char *)Type;
  uint64_t v18 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v205);
  uint64_t ElementTypeOrSelf = (char *)mlir::getElementTypeOrSelf(v18);
  uint64_t v211 = (llvm::APInt *)v17;
  v197 = ElementTypeOrSelf;
  if (v17 == ElementTypeOrSelf) {
    return v205 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v20 = ElementTypeOrSelf;
  if (mlir::Type::isF16((mlir::Type *)&v211) || mlir::Type::isBF16((mlir::Type *)&v211))
  {
    if (mlir::Type::isF32((mlir::Type *)&v197)) {
      return v205 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else if (*(_UNKNOWN **)(*(void *)v211 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id {
         && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  }
  {
    v194 = (char *)v211;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v194);
    if (mlir::Type::isF16((mlir::Type *)&Value))
    {
      uint64_t v188 = (llvm::APFloatBase *)v20;
      uint64_t v191 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v188);
      if (mlir::Type::isF32((mlir::Type *)&v191)) {
        return v205 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
  }
  if (a4)
  {
    if (mlir::ElementsAttr::getNumElements(v205, v206) >= 1025)
    {
      unint64_t ElementBitWidth = mlir::getElementBitWidth(OperandRange);
      if (ElementBitWidth < mlir::getElementBitWidth(v202)
        && !mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v205))
      {
        return 0;
      }
    }
  }
  BOOL v23 = (char *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v205);
  uint64_t v24 = v23;
  if (!v23) {
    goto LABEL_37;
  }
  uint64_t v25 = *(void *)v23;
  unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v27 = *(unsigned int *)(v25 + 16);
  if (!v27) {
    goto LABEL_37;
  }
  uint64_t v28 = *(void **)(v25 + 8);
  uint64_t v29 = &v28[2 * v27];
  do
  {
    unint64_t v30 = v27 >> 1;
    uint64_t v31 = &v28[2 * (v27 >> 1)];
    unint64_t v33 = *v31;
    uint64_t v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26) {
      uint64_t v28 = v32;
    }
    else {
      unint64_t v27 = v30;
    }
  }
  while (v27);
  if (v28 != v29 && *v28 == v26) {
    uint64_t v34 = v28[1];
  }
  else {
LABEL_37:
  }
    uint64_t v34 = 0;
  uint64_t v211 = (llvm::APInt *)v24;
  uint64_t v212 = v34;
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v211);
  uint64_t v37 = v36;
  float v38 = *(void **)(*OperandRange + 136);
  uint64_t v21 = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  if (v38 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v38 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v38 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return 0;
    }
    uint64_t v50 = *(void **)(*v202 + 136);
    if (v50 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v50 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      if ((mlir::Type::isF16((mlir::Type *)&v202) || mlir::Type::isBF16((mlir::Type *)&v202))
        && mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        uint64_t v53 = (uint64_t *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
        if (mlir::Type::isF16((mlir::Type *)&v202)) {
        else
        }
      }
    }
    else if (v50 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      uint64_t v211 = (llvm::APInt *)&v213;
      uint64_t v212 = 0x400000000;
      BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v202);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v202);
      mlir::ElementsAttr::getValues<llvm::APFloat>(&v205, (uint64_t)&v197);
      LOWORD(v194) = (_WORD)v197;
      if ((_BYTE)v197) {
        uint64_t v195 = (llvm::APFloatBase *)v198;
      }
      else {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v198 + 16))(&v195);
      }
      uint64_t v164 = *((void *)&v198 + 1);
      uint64_t j = *((void *)&v198 + 1);
      LOWORD(v191) = v199;
      if ((_BYTE)v199)
      {
        v192 = v200;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v200 + 16))(&v192);
        uint64_t v164 = j;
      }
      uint64_t i = v201;
      if (v164 != v201)
      {
        BOOL v168 = !isSignedInteger;
        while (1)
        {
          if (BYTE1(v194)) {
            uint64_t v169 = 0;
          }
          else {
            uint64_t v169 = v164;
          }
          if ((_BYTE)v194)
          {
            uint64_t v170 = (char *)v195 + 32 * v169;
            uint64_t v172 = (void *)*((void *)v170 + 1);
            unint64_t v171 = (const llvm::detail::DoubleAPFloat *)(v170 + 8);
            if (llvm::APFloatBase::PPCDoubleDouble(v195) == v172) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v209, v171);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v209, v171);
            }
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v195 + 24))(&Value);
          }
          unsigned int v189 = IntOrFloatBitWidth;
          if (IntOrFloatBitWidth > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v188);
          }
          uint64_t v188 = 0;
          BOOL v190 = v168;
          char v186 = 0;
          if (llvm::APFloat::convertToInteger((uint64_t)&Value, (uint64_t)&v188, 0, &v186))
          {
            uint64_t v21 = 0;
            goto LABEL_407;
          }
          uint64_t v174 = (char *)v211;
          if (v212 >= HIDWORD(v212))
          {
            unint64_t v180 = v212 + 1;
            if (v211 <= (llvm::APInt *)&v188 && (char *)v211 + 16 * v212 > (char *)&v188)
            {
              int64_t v181 = (char *)&v188 - (char *)v211;
              llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v211, v180);
              uint64_t v174 = (char *)v211;
              uint64_t v175 = (char *)v211 + v181;
            }
            else
            {
              llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v211, v180);
              uint64_t v175 = (char *)&v188;
              uint64_t v174 = (char *)v211;
            }
          }
          else
          {
            uint64_t v175 = (char *)&v188;
          }
          uint64_t v176 = (llvm::APInt *)&v174[16 * v212];
          unsigned int v177 = *((_DWORD *)v175 + 2);
          *((_DWORD *)v176 + 2) = v177;
          if (v177 > 0x40) {
            llvm::APInt::initSlowCase(v176, (const llvm::APInt *)v175);
          }
          *(void *)uint64_t v176 = *(void *)v175;
          LODWORD(v212) = v212 + 1;
          unsigned int v178 = (llvm::APFloatBase *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v205);
          if (v178) {
            break;
          }
          if (v189 >= 0x41)
          {
            unsigned int v178 = v188;
            if (v188) {
              unsigned int v178 = (llvm::APFloatBase *)MEMORY[0x21667D390](v188, 0x1000C8000313F17);
            }
          }
          uint64_t v179 = v209;
          if (llvm::APFloatBase::PPCDoubleDouble(v178) == v179) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v209);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v209);
          }
          uint64_t v164 = j + 1;
          uint64_t j = v164;
          if (v164 == i) {
            goto LABEL_366;
          }
        }
        unsigned int v187 = (uint64_t *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
        uint64_t v182 = mlir::Type::cast<mlir::ShapedType>(&v187);
        uint64_t v21 = (void *)(mlir::DenseElementsAttr::get((uint64_t)v182, v183, v211, 1) & 0xFFFFFFFFFFFFFFFBLL);
LABEL_407:
        if (v189 >= 0x41 && v188) {
          MEMORY[0x21667D390](v188, 0x1000C8000313F17);
        }
        llvm::APFloat::~APFloat((llvm::APFloat *)&Value);
        if (!(_BYTE)v191)
        {
          uint64_t v184 = v192;
          v192 = 0;
          if (v184) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v184 + 8))(v184);
          }
        }
        if (!(_BYTE)v194)
        {
          uint64_t v185 = v195;
          uint64_t v195 = 0;
          if (v185) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v185 + 8))(v185);
          }
        }
        mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v197);
        goto LABEL_374;
      }
LABEL_366:
      if (!(_BYTE)v191)
      {
        unint64_t v165 = v192;
        v192 = 0;
        if (v165) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v165 + 8))(v165);
        }
      }
      if (!(_BYTE)v194)
      {
        uint64_t v166 = v195;
        uint64_t v195 = 0;
        if (v166) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v166 + 8))(v166);
        }
      }
      mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v197);
      goto LABEL_373;
    }
    return 0;
  }
  BOOL isF32 = mlir::Type::isF32((mlir::Type *)&v202);
  if (!isF32)
  {
    BOOL isF16 = mlir::Type::isF16((mlir::Type *)&v202);
    if (isF16)
    {
      uint64_t v211 = (llvm::APInt *)&v213;
      uint64_t v212 = 0x400000000;
      float v57 = (char *)llvm::APFloatBase::IEEEhalf((llvm::APFloatBase *)isF16);
      mlir::ElementsAttr::getValues<llvm::APInt>(&v205, (uint64_t)&v197);
      LOWORD(v194) = (_WORD)v197;
      if ((_BYTE)v197) {
        uint64_t v195 = (llvm::APFloatBase *)v198;
      }
      else {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v198 + 16))(&v195);
      }
      uint64_t v74 = *((void *)&v198 + 1);
      uint64_t j = *((void *)&v198 + 1);
      LOWORD(v191) = v199;
      if ((_BYTE)v199)
      {
        v192 = v200;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v200 + 16))(&v192);
        uint64_t v74 = j;
      }
      uint64_t i = v201;
      if (v74 != v201)
      {
        while (1)
        {
          uint64_t v75 = BYTE1(v194) ? 0 : v74;
          uint64_t v76 = v195;
          if ((_BYTE)v194)
          {
            uint64_t v77 = (llvm::APFloatBase *)((char *)v195 + 16 * v75);
            unsigned int v189 = *((_DWORD *)v77 + 2);
            if (v189 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v188, v77);
            }
            uint64_t v188 = *(llvm::APFloatBase **)v77;
          }
          else
          {
            uint64_t v76 = (llvm::APFloatBase *)(*(void *(**)(llvm::APFloatBase **__return_ptr))(*(void *)v195 + 24))(&v188);
          }
          uint64_t v78 = (char *)llvm::APFloatBase::PPCDoubleDouble(v76);
          if (v78 == v57) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v209, (uint64_t)v78);
          }
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v209, (uint64_t)v57);
          unsigned int v187 = OperandRange;
          int Signedness = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v187);
          if (v78 == v209) {
            llvm::detail::DoubleAPFloat::convertFromAPInt();
          }
          llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)&v209, (unsigned int *)&v188, Signedness == 1, 1);
          int v80 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v205);
          char v81 = v80;
          if (v80)
          {
            uint64_t v82 = (llvm::APFloatBase *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
            uint64_t v83 = v82;
            if (!v82) {
              goto LABEL_176;
            }
            uint64_t v84 = *(void *)v82;
            unint64_t v85 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v86 = *(unsigned int *)(v84 + 16);
            if (!v86) {
              goto LABEL_176;
            }
            int v87 = *(void **)(v84 + 8);
            int v88 = &v87[2 * v86];
            do
            {
              unint64_t v89 = v86 >> 1;
              __int16 v90 = &v87[2 * (v86 >> 1)];
              unint64_t v92 = *v90;
              unint64_t v91 = v90 + 2;
              v86 += ~(v86 >> 1);
              if (v92 < v85) {
                int v87 = v91;
              }
              else {
                unint64_t v86 = v89;
              }
            }
            while (v86);
            if (v87 != v88 && *v87 == v85) {
              uint64_t v93 = v87[1];
            }
            else {
LABEL_176:
            }
              uint64_t v93 = 0;
            uint64_t v21 = (void *)(mlir::DenseElementsAttr::get(v83, v93, (uint64_t)&Value, 1) & 0xFFFFFFFFFFFFFFFBLL);
          }
          else
          {
            Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v211, (unint64_t)&Value, 1);
            float v95 = (char *)v211 + 32 * v212 + 8;
            float v97 = (char *)*((void *)Address + 1);
            uint64_t v96 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
            if (v78 == v97) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(v95, v96);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v96);
            }
            LODWORD(v212) = v212 + 1;
          }
          if (v78 == v209) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v209);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v209);
          }
          if (v189 >= 0x41 && v188) {
            MEMORY[0x21667D390](v188, 0x1000C8000313F17);
          }
          if (v81) {
            break;
          }
          uint64_t v74 = j + 1;
          uint64_t j = v74;
          if (v74 == i) {
            goto LABEL_219;
          }
        }
LABEL_266:
        if (!(_BYTE)v191)
        {
          uint64_t v136 = v192;
          v192 = 0;
          if (v136) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v136 + 8))(v136);
          }
        }
        if (!(_BYTE)v194)
        {
          unint64_t v137 = v195;
          uint64_t v195 = 0;
          if (v137) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v137 + 8))(v137);
          }
        }
        mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v197);
        goto LABEL_273;
      }
      goto LABEL_219;
    }
    BOOL isBF16 = mlir::Type::isBF16((mlir::Type *)&v202);
    if (isBF16)
    {
      uint64_t v211 = (llvm::APInt *)&v213;
      uint64_t v212 = 0x400000000;
      long long v59 = (char *)llvm::APFloatBase::BFloat((llvm::APFloatBase *)isBF16);
      mlir::ElementsAttr::getValues<llvm::APInt>(&v205, (uint64_t)&v197);
      LOWORD(v194) = (_WORD)v197;
      if ((_BYTE)v197) {
        uint64_t v195 = (llvm::APFloatBase *)v198;
      }
      else {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v198 + 16))(&v195);
      }
      uint64_t v109 = *((void *)&v198 + 1);
      uint64_t j = *((void *)&v198 + 1);
      LOWORD(v191) = v199;
      if ((_BYTE)v199)
      {
        v192 = v200;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v200 + 16))(&v192);
        uint64_t v109 = j;
      }
      for (uint64_t i = v201; v109 != i; j = v109)
      {
        uint64_t v113 = BYTE1(v194) ? 0 : v109;
        uint64_t v114 = v195;
        if ((_BYTE)v194)
        {
          unint64_t v115 = (llvm::APFloatBase *)((char *)v195 + 16 * v113);
          unsigned int v189 = *((_DWORD *)v115 + 2);
          if (v189 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v188, v115);
          }
          uint64_t v188 = *(llvm::APFloatBase **)v115;
        }
        else
        {
          uint64_t v114 = (llvm::APFloatBase *)(*(void *(**)(llvm::APFloatBase **__return_ptr))(*(void *)v195
                                                                                                  + 24))(&v188);
        }
        uint64_t v116 = (char *)llvm::APFloatBase::PPCDoubleDouble(v114);
        if (v116 == v59) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v209, (uint64_t)v116);
        }
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v209, (uint64_t)v59);
        unsigned int v187 = OperandRange;
        int v117 = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v187);
        if (v116 == v209) {
          llvm::detail::DoubleAPFloat::convertFromAPInt();
        }
        llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)&v209, (unsigned int *)&v188, v117 == 1, 1);
        int v118 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v205);
        char v119 = v118;
        if (v118)
        {
          unint64_t v120 = (llvm::APFloatBase *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
          uint64_t v121 = v120;
          if (!v120) {
            goto LABEL_250;
          }
          uint64_t v122 = *(void *)v120;
          unint64_t v123 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v124 = *(unsigned int *)(v122 + 16);
          if (!v124) {
            goto LABEL_250;
          }
          unint64_t v125 = *(void **)(v122 + 8);
          unint64_t v126 = &v125[2 * v124];
          do
          {
            unint64_t v127 = v124 >> 1;
            __int16 v128 = &v125[2 * (v124 >> 1)];
            unint64_t v130 = *v128;
            unint64_t v129 = v128 + 2;
            v124 += ~(v124 >> 1);
            if (v130 < v123) {
              unint64_t v125 = v129;
            }
            else {
              unint64_t v124 = v127;
            }
          }
          while (v124);
          if (v125 != v126 && *v125 == v123) {
            uint64_t v131 = v125[1];
          }
          else {
LABEL_250:
          }
            uint64_t v131 = 0;
          uint64_t v21 = (void *)(mlir::DenseElementsAttr::get(v121, v131, (uint64_t)&Value, 1) & 0xFFFFFFFFFFFFFFFBLL);
        }
        else
        {
          uint64_t v132 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v211, (unint64_t)&Value, 1);
          char v133 = (char *)v211 + 32 * v212 + 8;
          unsigned int v135 = (char *)*((void *)v132 + 1);
          uint64_t v134 = (const llvm::detail::DoubleAPFloat *)(v132 + 8);
          if (v116 == v135) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v133, v134);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v133, v134);
          }
          LODWORD(v212) = v212 + 1;
        }
        if (v116 == v209) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v209);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v209);
        }
        if (v189 >= 0x41 && v188) {
          MEMORY[0x21667D390](v188, 0x1000C8000313F17);
        }
        if (v119) {
          goto LABEL_266;
        }
        uint64_t v109 = j + 1;
      }
LABEL_219:
      if (!(_BYTE)v191)
      {
        uint64_t v110 = v192;
        v192 = 0;
        if (v110) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v110 + 8))(v110);
        }
      }
      if (!(_BYTE)v194)
      {
        uint64_t v111 = v195;
        uint64_t v195 = 0;
        if (v111) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v111 + 8))(v111);
        }
      }
      mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v197);
      unint64_t v112 = (void *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
      uint64_t v21 = (void *)((unint64_t)mlir::createElementsAttr(v112, (uint64_t)v211, v212) & 0xFFFFFFFFFFFFFFFBLL);
LABEL_273:
      llvm::SmallVector<llvm::APFloat,4u>::~SmallVector((unsigned int *)&v211);
      return (uint64_t)v21;
    }
    if (mlir::Type::isInteger((mlir::Type *)&v202, 1))
    {
      v197 = &v199;
      long long v198 = xmmword_211ED5570;
      mlir::ElementsAttr::getValues<llvm::APInt>(&v205, (uint64_t)&v211);
      LOWORD(Value) = (_WORD)v211;
      if ((_BYTE)v211) {
        v209 = (char *)v212;
      }
      else {
        (*(void (**)(char **__return_ptr))(*(void *)v212 + 16))(&v209);
      }
      uint64_t v138 = v213;
      uint64_t v210 = v213;
      LOWORD(v194) = v214;
      if ((_BYTE)v214)
      {
        uint64_t v195 = v215;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v215 + 16))(&v195);
        uint64_t v138 = v210;
      }
      uint64_t v139 = v216;
      for (j = v216; ; uint64_t v139 = j)
      {
        if (v138 == v139)
        {
          if (!(_BYTE)v194)
          {
            unint64_t v146 = v195;
            uint64_t v195 = 0;
            if (v146) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v146 + 8))(v146);
            }
          }
          if (!(_BYTE)Value)
          {
            uint64_t v147 = v209;
            v209 = 0;
            if (v147) {
              (*(void (**)(char *))(*(void *)v147 + 8))(v147);
            }
          }
          mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v211);
          unint64_t v148 = (void *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
          uint64_t v21 = (void *)((unint64_t)mlir::createElementsAttr<BOOL>(v148, v197, v198) & 0xFFFFFFFFFFFFFFFBLL);
          if (v197 != &v199) {
            free(v197);
          }
          return (uint64_t)v21;
        }
        uint64_t v140 = BYTE1(Value) ? 0 : v138;
        if ((_BYTE)Value) {
          break;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v209 + 24))(&v191);
        int v142 = (int)v192;
        if (v192 <= 0x40) {
          goto LABEL_292;
        }
        BOOL v143 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v191) == v142;
LABEL_294:
        char v144 = v143;
        uint64_t v145 = v198;
        if ((unint64_t)(v198 + 1) > *((void *)&v198 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v197, &v199, v198 + 1, 1);
          uint64_t v145 = v198;
        }
        *((unsigned char *)v197 + v145) = v144 ^ 1;
        *(void *)&long long v198 = v198 + 1;
        if (v192 >= 0x41 && v191) {
          MEMORY[0x21667D390](v191, 0x1000C8000313F17);
        }
        uint64_t v138 = ++v210;
      }
      uint64_t v141 = (const llvm::APInt *)&v209[16 * v140];
      LODWORD(v192) = *((_DWORD *)v141 + 2);
      if (v192 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v191, v141);
      }
      uint64_t v191 = *(void *)v141;
LABEL_292:
      BOOL v143 = v191 == 0;
      goto LABEL_294;
    }
    if (*(_UNKNOWN **)(*v202 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
      return 0;
    }
    uint64_t v211 = (llvm::APInt *)&v213;
    uint64_t v212 = 0x400000000;
    mlir::ElementsAttr::getValues<llvm::APInt>(&v205, (uint64_t)&v197);
    LOWORD(Value) = (_WORD)v197;
    if ((_BYTE)v197) {
      v209 = (char *)v198;
    }
    else {
      (*(void (**)(char **__return_ptr))(*(void *)v198 + 16))(&v209);
    }
    uint64_t v149 = *((void *)&v198 + 1);
    uint64_t v210 = *((void *)&v198 + 1);
    LOWORD(v194) = v199;
    if ((_BYTE)v199)
    {
      uint64_t v195 = v200;
    }
    else
    {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v200 + 16))(&v195);
      uint64_t v149 = v210;
    }
    uint64_t j = v201;
    if (v149 == v201)
    {
LABEL_347:
      if (!(_BYTE)v194)
      {
        uint64_t v160 = v195;
        uint64_t v195 = 0;
        if (v160) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v160 + 8))(v160);
        }
      }
      if (!(_BYTE)Value)
      {
        long long v161 = v209;
        v209 = 0;
        if (v161) {
          (*(void (**)(char *))(*(void *)v161 + 8))(v161);
        }
      }
      mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v197);
LABEL_373:
      uint64_t v167 = (void *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
      uint64_t v21 = (void *)((unint64_t)mlir::createElementsAttr(v167, v211, v212) & 0xFFFFFFFFFFFFFFFBLL);
LABEL_374:
      llvm::SmallVector<llvm::APInt,4u>::~SmallVector((char **)&v211);
      return (uint64_t)v21;
    }
    while (1)
    {
      if (BYTE1(Value)) {
        uint64_t v150 = 0;
      }
      else {
        uint64_t v150 = v149;
      }
      if ((_BYTE)Value)
      {
        uint64_t v151 = (const llvm::APInt *)&v209[16 * v150];
        LODWORD(v192) = *((_DWORD *)v151 + 2);
        if (v192 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v191, v151);
        }
        uint64_t v191 = *(void *)v151;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v209 + 24))(&v191);
      }
      if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange))
      {
        if (v192 <= 0x40)
        {
          uint64_t v152 = v191 << -(uint64_t)v192 >> -(uint64_t)v192;
          goto LABEL_331;
        }
        unint64_t v153 = (uint64_t *)v191;
      }
      else if (v192 >= 0x41)
      {
        unint64_t v153 = (uint64_t *)v191;
      }
      else
      {
        unint64_t v153 = &v191;
      }
      uint64_t v152 = *v153;
LABEL_331:
      unsigned int v154 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v202);
      mlir::Type::isSignedInteger((mlir::Type *)&v202);
      unsigned int v189 = v154;
      if (v154 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v188);
      }
      unint64_t v155 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v154;
      if (!v154) {
        unint64_t v155 = 0;
      }
      uint64_t v188 = (llvm::APFloatBase *)(v155 & v152);
      int v156 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v205);
      char v157 = v156;
      if (v156)
      {
        unsigned int v187 = (uint64_t *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
        uint64_t v158 = mlir::Type::cast<mlir::ShapedType>(&v187);
        uint64_t v21 = (void *)(mlir::DenseElementsAttr::get((uint64_t)v158, v159, (llvm::APInt *)&v188, 1) & 0xFFFFFFFFFFFFFFFBLL);
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::push_back((uint64_t)&v211, (unint64_t)&v188);
      }
      if (v189 >= 0x41 && v188) {
        MEMORY[0x21667D390](v188, 0x1000C8000313F17);
      }
      if (v192 >= 0x41 && v191) {
        MEMORY[0x21667D390](v191, 0x1000C8000313F17);
      }
      if (v157)
      {
        if (!(_BYTE)v194)
        {
          unint64_t v162 = v195;
          uint64_t v195 = 0;
          if (v162) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v162 + 8))(v162);
          }
        }
        if (!(_BYTE)Value)
        {
          uint64_t v163 = v209;
          v209 = 0;
          if (v163) {
            (*(void (**)(char *))(*(void *)v163 + 8))(v163);
          }
        }
        mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v197);
        goto LABEL_374;
      }
      uint64_t v149 = v210 + 1;
      uint64_t v210 = v149;
      if (v149 == j) {
        goto LABEL_347;
      }
    }
  }
  uint64_t v211 = (llvm::APInt *)&v213;
  uint64_t v212 = 0x400000000;
  unint64_t v55 = (char *)llvm::APFloatBase::IEEEsingle((llvm::APFloatBase *)isF32);
  mlir::ElementsAttr::getValues<llvm::APInt>(&v205, (uint64_t)&v197);
  LOWORD(v194) = (_WORD)v197;
  if ((_BYTE)v197) {
    uint64_t v195 = (llvm::APFloatBase *)v198;
  }
  else {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v198 + 16))(&v195);
  }
  uint64_t v60 = *((void *)&v198 + 1);
  uint64_t j = *((void *)&v198 + 1);
  LOWORD(v191) = v199;
  if ((_BYTE)v199)
  {
    v192 = v200;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v200 + 16))(&v192);
    uint64_t v60 = j;
  }
  uint64_t i = v201;
  if (v60 == v201)
  {
LABEL_110:
    if (!(_BYTE)v191)
    {
      float v61 = v192;
      v192 = 0;
      if (v61) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v61 + 8))(v61);
      }
    }
    if (!(_BYTE)v194)
    {
      float v62 = v195;
      uint64_t v195 = 0;
      if (v62) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v62 + 8))(v62);
      }
    }
    mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v197);
    float v63 = (void *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
    uint64_t ElementsAttr = (uint64_t)mlir::createElementsAttr(v63, (uint64_t)v211, v212);
    uint64_t v21 = (void *)(ElementsAttr & 0xFFFFFFFFFFFFFFFBLL);
  }
  else
  {
    while (1)
    {
      if (BYTE1(v194)) {
        uint64_t v65 = 0;
      }
      else {
        uint64_t v65 = v60;
      }
      float v66 = v195;
      if ((_BYTE)v194)
      {
        float v67 = (llvm::APFloatBase *)((char *)v195 + 16 * v65);
        unsigned int v189 = *((_DWORD *)v67 + 2);
        if (v189 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v188, v67);
        }
        uint64_t v188 = *(llvm::APFloatBase **)v67;
      }
      else
      {
        float v66 = (llvm::APFloatBase *)(*(void *(**)(llvm::APFloatBase **__return_ptr))(*(void *)v195 + 24))(&v188);
      }
      unint64_t v68 = (char *)llvm::APFloatBase::PPCDoubleDouble(v66);
      if (v68 == v55) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v209, (uint64_t)v68);
      }
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v209, (uint64_t)v55);
      unsigned int v187 = OperandRange;
      int v69 = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v187);
      if (v68 == v209) {
        llvm::detail::DoubleAPFloat::convertFromAPInt();
      }
      if (llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)&v209, (unsigned int *)&v188, v69 == 1, 0))
      {
        uint64_t v21 = 0;
        goto LABEL_193;
      }
      if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v205)) {
        break;
      }
      uint64_t v70 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v211, (unint64_t)&Value, 1);
      unint64_t v71 = (char *)v211 + 32 * v212 + 8;
      uint64_t v73 = (char *)*((void *)v70 + 1);
      uint64_t v72 = (const llvm::detail::DoubleAPFloat *)(v70 + 8);
      if (v68 == v73) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v71, v72);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v71, v72);
      }
      LODWORD(v212) = v212 + 1;
      if (v68 == v209) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v209);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v209);
      }
      if (v189 >= 0x41 && v188) {
        MEMORY[0x21667D390](v188, 0x1000C8000313F17);
      }
      uint64_t v60 = j + 1;
      uint64_t j = v60;
      if (v60 == i) {
        goto LABEL_110;
      }
    }
    unsigned int v187 = (uint64_t *)mlir::RankedTensorType::get(Shape, v37, (uint64_t)v202, 0);
    unint64_t v98 = mlir::Type::cast<mlir::ShapedType>(&v187);
    uint64_t v21 = (void *)(mlir::DenseElementsAttr::get((llvm::APFloatBase *)v98, v99, (uint64_t)&Value, 1) & 0xFFFFFFFFFFFFFFFBLL);
LABEL_193:
    llvm::APFloat::~APFloat((llvm::APFloat *)&Value);
    if (v189 >= 0x41 && v188) {
      MEMORY[0x21667D390](v188, 0x1000C8000313F17);
    }
    if (!(_BYTE)v191)
    {
      unsigned int v100 = v192;
      v192 = 0;
      if (v100) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v100 + 8))(v100);
      }
    }
    if (!(_BYTE)v194)
    {
      uint64_t v101 = v195;
      uint64_t v195 = 0;
      if (v101) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v101 + 8))(v101);
      }
    }
    uint64_t ElementsAttr = mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v197);
  }
  uint64_t v102 = (char *)v211;
  uint64_t v103 = v212;
  if (v212)
  {
    uint64_t v104 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)ElementsAttr);
    long long v105 = v102 - 24;
    uint64_t v106 = 32 * v103;
    do
    {
      while (1)
      {
        char v107 = (llvm::detail::DoubleAPFloat *)&v105[v106];
        if (v104 != *(void **)&v105[v106]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v107);
        v106 -= 32;
        if (!v106) {
          goto LABEL_208;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v107);
      v106 -= 32;
    }
    while (v106);
LABEL_208:
    uint64_t v102 = (char *)v211;
  }
  if (v102 != (char *)&v213) {
    free(v102);
  }
  return (uint64_t)v21;
}

uint64_t mlir::ElementsAttr::getValues<llvm::APInt>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)a1);
  uint64_t v6 = v5;
  mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)a1, (uint64_t)v12);
  uint64_t NumElements = mlir::ElementsAttr::getNumElements(*a1, a1[1]);
  __int16 v9 = 257;
  uint64_t v10 = 0;
  uint64_t v11 = NumElements;
  uint64_t result = mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>::ElementsAttrRange(a2, ArgOperands, v6, v12, (char *)&v9);
  if (!(_BYTE)v9)
  {
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v12[0])
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  if (!*(unsigned char *)a1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return a1;
}

unsigned int *llvm::SmallVector<llvm::APFloat,4u>::~SmallVector(unsigned int *a1)
{
  uint64_t v2 = *(unsigned int **)a1;
  uint64_t v3 = a1[2];
  if (v3)
  {
    uint64_t v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    uint64_t v5 = v2 - 6;
    uint64_t v6 = 8 * v3;
    do
    {
      while (1)
      {
        unint64_t v7 = (llvm::detail::DoubleAPFloat *)&v5[v6];
        if (v4 != *(void **)&v5[v6]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v7);
        v6 -= 8;
        if (!(v6 * 4)) {
          goto LABEL_6;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v7);
      v6 -= 8;
    }
    while (v6 * 4);
LABEL_6:
    uint64_t v2 = *(unsigned int **)a1;
  }
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void *mlir::createElementsAttr<BOOL>(void *a1, unsigned char *a2, unint64_t a3)
{
  v20[5] = *MEMORY[0x263EF8340];
  unint64_t v4 = a3 + 7;
  uint64_t v18 = v20;
  long long v19 = xmmword_211F09580;
  if (a3 + 7 < 8) {
    goto LABEL_9;
  }
  unint64_t v5 = a3;
  size_t v7 = v4 >> 3;
  if (v4 < 0x148)
  {
    uint64_t v9 = 0;
    unint64_t v8 = v20;
    size_t v10 = v7;
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v18, v20, v4 >> 3, 1);
  unint64_t v8 = v18;
  uint64_t v9 = v19;
  size_t v10 = v7 - v19;
  if (v7 != (void)v19)
  {
LABEL_6:
    bzero(&v8[v9], v10);
    unint64_t v8 = v18;
  }
LABEL_7:
  *(void *)&long long v19 = v7;
  if (v5 == 1)
  {
    *unint64_t v8 = -*a2;
  }
  else
  {
    uint64_t v13 = a2 + 3;
    do
    {
      unint64_t v15 = v5;
      BOOL v16 = v5 >= 8;
      v5 -= 8;
      if (v16) {
        uint64_t v17 = 8;
      }
      else {
        uint64_t v17 = v15;
      }
      if (v17)
      {
        char v14 = *(v13 - 3);
        if (v17 != 1)
        {
          v14 |= 2 * *(v13 - 2);
          if (v17 != 2)
          {
            v14 |= 4 * *(v13 - 1);
            if (v17 != 3)
            {
              v14 |= 8 * *v13;
              if (v17 != 4)
              {
                v14 |= 16 * v13[1];
                if (v17 != 5)
                {
                  v14 |= 32 * v13[2];
                  if (v17 != 6)
                  {
                    v14 |= v13[3] << 6;
                    if (v17 != 7) {
                      v14 |= v13[4] << 7;
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        char v14 = 0;
      }
      *v8++ = v14;
      v13 += 8;
      --v7;
    }
    while (v7);
  }
LABEL_9:
  Rawuint64_t ElementsAttr = mlir::createRawElementsAttr(a1, v18, (const void *)v19);
  if (v18 != v20) {
    free(v18);
  }
  return RawElementsAttr;
}

void *mlir::mps::anonymous namespace'::convertFP32ToT<half>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  mlir::mps::CPUNDArray::CPUNDArray(v49);
  if (v51)
  {
    _S0 = mlir::mps::CPUNDArray::getSplatFloatValue((mlir::mps::CPUNDArray *)v49);
    __asm { FCVT            H0, S0 }
    v47[0] = LOWORD(_S0);
    if (!a3) {
      goto LABEL_11;
    }
    uint64_t v12 = *a3;
    unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v14 = *(unsigned int *)(v12 + 16);
    if (!v14) {
      goto LABEL_11;
    }
    unint64_t v15 = *(void **)(v12 + 8);
    BOOL v16 = &v15[2 * v14];
    do
    {
      unint64_t v17 = v14 >> 1;
      uint64_t v18 = &v15[2 * (v14 >> 1)];
      unint64_t v20 = *v18;
      long long v19 = v18 + 2;
      v14 += ~(v14 >> 1);
      if (v20 < v13) {
        unint64_t v15 = v19;
      }
      else {
        unint64_t v14 = v17;
      }
    }
    while (v14);
    if (v15 != v16 && *v15 == v13) {
      uint64_t v21 = v15[1];
    }
    else {
LABEL_11:
    }
      uint64_t v21 = 0;
    uint64_t v22 = (void *)mlir::DenseElementsAttr::getFromRawBuffer(a3, v21, v47, 2, v4, v5, v6);
    uint64_t ElementsAttr = v22;
    if (v22)
    {
      uint64_t v24 = *v22;
      unint64_t v25 = mlir::TypeID::get<mlir::ElementsAttr>();
      unint64_t v26 = *(unsigned int *)(v24 + 16);
      if (v26)
      {
        unint64_t v27 = *(void **)(v24 + 8);
        do
        {
          unint64_t v28 = v26 >> 1;
          uint64_t v29 = &v27[2 * (v26 >> 1)];
          unint64_t v31 = *v29;
          unint64_t v30 = v29 + 2;
          v26 += ~(v26 >> 1);
          if (v31 < v25) {
            unint64_t v27 = v30;
          }
          else {
            unint64_t v26 = v28;
          }
        }
        while (v26);
      }
    }
  }
  else
  {
    if (!a3) {
      goto LABEL_29;
    }
    uint64_t v32 = *a3;
    unint64_t v33 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v34 = *(unsigned int *)(v32 + 16);
    if (!v34) {
      goto LABEL_29;
    }
    uint64_t v35 = *(void **)(v32 + 8);
    uint64_t v36 = &v35[2 * v34];
    do
    {
      unint64_t v37 = v34 >> 1;
      float v38 = &v35[2 * (v34 >> 1)];
      unint64_t v40 = *v38;
      unint64_t v39 = v38 + 2;
      v34 += ~(v34 >> 1);
      if (v40 < v33) {
        uint64_t v35 = v39;
      }
      else {
        unint64_t v34 = v37;
      }
    }
    while (v34);
    if (v35 != v36 && *v35 == v33) {
      uint64_t v41 = v35[1];
    }
    else {
LABEL_29:
    }
      uint64_t v41 = 0;
    mlir::mps::CPUNDArray::CPUNDArray(v47, a3, v41, 0);
    uint64_t v42 = v50;
    uint64_t v43 = v48;
    if (mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v49) >= 1)
    {
      uint64_t v44 = 0;
      do
      {
        _S0 = *(_DWORD *)(v42 + 4 * v44);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(v43 + 2 * v44++) = _S0;
      }
      while (v44 < mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v49));
    }
    uint64_t ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v47, 0, 0);
    mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v47);
  }
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v49);
  return ElementsAttr;
}

void *mlir::mps::anonymous namespace'::convertFP32ToT<__emulated_bf16>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  mlir::mps::CPUNDArray::CPUNDArray(v45);
  if (v47)
  {
    SplatFloatuint64_t Value = mlir::mps::CPUNDArray::getSplatFloatValue((mlir::mps::CPUNDArray *)v45);
    float v8 = SplatFloatValue + (float)(COERCE_FLOAT(LODWORD(SplatFloatValue) & 0xFF800000) * 0.0039062);
    v43[0] = HIWORD(v8);
    if (!a3) {
      goto LABEL_11;
    }
    uint64_t v9 = *a3;
    unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v11 = *(unsigned int *)(v9 + 16);
    if (!v11) {
      goto LABEL_11;
    }
    uint64_t v12 = *(void **)(v9 + 8);
    unint64_t v13 = &v12[2 * v11];
    do
    {
      unint64_t v14 = v11 >> 1;
      unint64_t v15 = &v12[2 * (v11 >> 1)];
      unint64_t v17 = *v15;
      BOOL v16 = v15 + 2;
      v11 += ~(v11 >> 1);
      if (v17 < v10) {
        uint64_t v12 = v16;
      }
      else {
        unint64_t v11 = v14;
      }
    }
    while (v11);
    if (v12 != v13 && *v12 == v10) {
      uint64_t v18 = v12[1];
    }
    else {
LABEL_11:
    }
      uint64_t v18 = 0;
    long long v19 = (void *)mlir::DenseElementsAttr::getFromRawBuffer(a3, v18, v43, 2, v4, v5, v6);
    uint64_t ElementsAttr = v19;
    if (v19)
    {
      uint64_t v21 = *v19;
      unint64_t v22 = mlir::TypeID::get<mlir::ElementsAttr>();
      unint64_t v23 = *(unsigned int *)(v21 + 16);
      if (v23)
      {
        uint64_t v24 = *(void **)(v21 + 8);
        do
        {
          unint64_t v25 = v23 >> 1;
          unint64_t v26 = &v24[2 * (v23 >> 1)];
          unint64_t v28 = *v26;
          unint64_t v27 = v26 + 2;
          v23 += ~(v23 >> 1);
          if (v28 < v22) {
            uint64_t v24 = v27;
          }
          else {
            unint64_t v23 = v25;
          }
        }
        while (v23);
      }
    }
  }
  else
  {
    if (!a3) {
      goto LABEL_29;
    }
    uint64_t v29 = *a3;
    unint64_t v30 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v31 = *(unsigned int *)(v29 + 16);
    if (!v31) {
      goto LABEL_29;
    }
    uint64_t v32 = *(void **)(v29 + 8);
    unint64_t v33 = &v32[2 * v31];
    do
    {
      unint64_t v34 = v31 >> 1;
      uint64_t v35 = &v32[2 * (v31 >> 1)];
      unint64_t v37 = *v35;
      uint64_t v36 = v35 + 2;
      v31 += ~(v31 >> 1);
      if (v37 < v30) {
        uint64_t v32 = v36;
      }
      else {
        unint64_t v31 = v34;
      }
    }
    while (v31);
    if (v32 != v33 && *v32 == v30) {
      uint64_t v38 = v32[1];
    }
    else {
LABEL_29:
    }
      uint64_t v38 = 0;
    mlir::mps::CPUNDArray::CPUNDArray(v43, a3, v38, 0);
    uint64_t v39 = v46;
    uint64_t v40 = v44;
    if (mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v45) >= 1)
    {
      uint64_t v41 = 0;
      do
      {
        *(_WORD *)(v40 + 2 * v41) = HIWORD(COERCE_UNSIGNED_INT(*(float *)(v39 + 4 * v41)+ (float)(COERCE_FLOAT(*(_DWORD *)(v39 + 4 * v41) & 0xFF800000) * 0.0039062)));
        ++v41;
      }
      while (v41 < mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v45));
    }
    uint64_t ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v43, 0, 0);
    mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v43);
  }
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v45);
  return ElementsAttr;
}

uint64_t mlir::ElementsAttr::getValues<llvm::APFloat>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)a1);
  uint64_t v6 = v5;
  mlir::ElementsAttr::value_begin<llvm::APFloat>((mlir::BranchOpInterface *)a1, (uint64_t)v12);
  uint64_t NumElements = mlir::ElementsAttr::getNumElements(*a1, a1[1]);
  __int16 v9 = 257;
  uint64_t v10 = 0;
  uint64_t v11 = NumElements;
  uint64_t result = mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>::ElementsAttrRange(a2, ArgOperands, v6, v12, (char *)&v9);
  if (!(_BYTE)v9)
  {
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v12[0])
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unint64_t mlir::mps::foldTransposeOp(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v80[1] = *MEMORY[0x263EF8340];
  uint64_t v75 = a3;
  uint64_t v76 = a1;
  uint64_t v74 = a2;
  if (!a2) {
    return 0;
  }
  uint64_t v5 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v76);
  v73[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8));
  v73[1] = v6;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v73)) {
    return 0;
  }
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v74);
  float v8 = Type;
  if (!Type) {
    goto LABEL_12;
  }
  uint64_t v9 = *Type;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    unint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    BOOL v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  uint64_t ArgOperands = (uint64_t)v8;
  uint64_t v72 = v18;
  mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
  uint64_t v20 = v19;
  v79[0] = v80;
  v79[1] = (void *)0x100000000;
  v77[0] = &v78;
  v77[1] = (void *)0x100000000;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v76);
  if (mlir::getPositiveAxes(Filter, v20, (uint64_t)v79, 0, 0, 0)
    && (uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v76),
        mlir::getPositiveAxes(Bias, v20, (uint64_t)v77, 0, 0, 0)))
  {
    if ((a4 & 1) != 0
      || v20 < 2
      || (*(void *)v77[0] >= *(void *)v79[0] ? (uint64_t v23 = *(void *)v79[0]) : (uint64_t v23 = *(void *)v77[0]),
          v23 != v20 - 2
       || (*(void *)v79[0] <= *(void *)v77[0] ? (uint64_t v24 = *(void *)v77[0]) : (uint64_t v24 = *(void *)v79[0]),
           v24 != v20 - 1
        || (uint64_t ArgOperands = *(void *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v76),
            uint64_t v72 = 0,
            unint64_t v25 = 0,
            (llvm::any_of<llvm::iterator_range<mlir::ValueUserIterator<mlir::ValueUseIterator<mlir::OpOperand>,mlir::OpOperand>>,mlir::mps::foldTransposeOp(mlir::mps::TransposeOp,mlir::ElementsAttr,BOOL)::$_0>(&ArgOperands, (mlir::anec::Convolution *)&v76) & 1) == 0))))
    {
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v73);
      uint64_t v28 = v27;
      uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
      uint64_t v72 = v29;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
      unint64_t v31 = (uint64_t *)mlir::RankedTensorType::get(Shape, v28, OperandRange, 0);
      if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v74))
      {
        uint64_t v32 = v74;
        uint64_t v33 = v75;
        if (!v31) {
          goto LABEL_36;
        }
        uint64_t v34 = *v31;
        unint64_t v35 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v36 = *(unsigned int *)(v34 + 16);
        if (!v36) {
          goto LABEL_36;
        }
        unint64_t v37 = *(void **)(v34 + 8);
        uint64_t v38 = &v37[2 * v36];
        do
        {
          unint64_t v39 = v36 >> 1;
          uint64_t v40 = &v37[2 * (v36 >> 1)];
          unint64_t v42 = *v40;
          uint64_t v41 = v40 + 2;
          v36 += ~(v36 >> 1);
          if (v42 < v35) {
            unint64_t v37 = v41;
          }
          else {
            unint64_t v36 = v39;
          }
        }
        while (v36);
        if (v37 != v38 && *v37 == v35) {
          uint64_t v43 = v37[1];
        }
        else {
LABEL_36:
        }
          uint64_t v43 = 0;
        unint64_t v25 = (unint64_t)mlir::reshapeElementsAttr(v32, v33, (uint64_t)v31, v43) & 0xFFFFFFFFFFFFFFFBLL;
      }
      else
      {
        mlir::mps::CPUNDArray::CPUNDArray(&ArgOperands);
        v70[0] = 0;
        v70[1] = 0;
        if (!v31) {
          goto LABEL_49;
        }
        uint64_t v44 = *v31;
        unint64_t v45 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v46 = *(unsigned int *)(v44 + 16);
        if (!v46) {
          goto LABEL_49;
        }
        char v47 = *(void **)(v44 + 8);
        uint64_t v48 = &v47[2 * v46];
        do
        {
          unint64_t v49 = v46 >> 1;
          uint64_t v50 = &v47[2 * (v46 >> 1)];
          unint64_t v52 = *v50;
          char v51 = v50 + 2;
          v46 += ~(v46 >> 1);
          if (v52 < v45) {
            char v47 = v51;
          }
          else {
            unint64_t v46 = v49;
          }
        }
        while (v46);
        if (v47 != v48 && *v47 == v45) {
          uint64_t v53 = v47[1];
        }
        else {
LABEL_49:
        }
          uint64_t v53 = 0;
        mlir::mps::CPUNDArray::tryMakeAliasedArray((uint64_t)v31, v53, (uint64_t)v70, (uint64_t)v69);
        __p = 0;
        float v67 = 0;
        uint64_t v68 = 0;
        if (v20)
        {
          std::vector<long long>::__append((uint64_t)&__p, v20);
          uint64_t v54 = __p;
          if (v20 >= 1)
          {
            if ((unint64_t)v20 >= 4)
            {
              uint64_t v55 = v20 & 0x7FFFFFFFFFFFFFFCLL;
              int64x2_t v56 = (int64x2_t)xmmword_211ED5A80;
              float v57 = (int64x2_t *)((char *)__p + 16);
              int64x2_t v58 = vdupq_n_s64(2uLL);
              int64x2_t v59 = vdupq_n_s64(4uLL);
              unint64_t v60 = v20 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v57[-1] = v56;
                *float v57 = vaddq_s64(v56, v58);
                int64x2_t v56 = vaddq_s64(v56, v59);
                v57 += 2;
                v60 -= 4;
              }
              while (v60);
              goto LABEL_62;
            }
            uint64_t v55 = 0;
            do
            {
              v54[v55] = v55;
              ++v55;
LABEL_62:
              ;
            }
            while (v20 != v55);
          }
        }
        else
        {
          uint64_t v54 = 0;
        }
        uint64_t v61 = *(void *)v79[0];
        uint64_t v62 = *(void *)v77[0];
        uint64_t v63 = v54[v61];
        v54[v61] = v54[v62];
        v54[v62] = v63;
        mlir::mps::transpose((mlir::AffineBinaryOpExpr *)&ArgOperands, (uint64_t)v69, (uint64_t)v54, (v67 - (unsigned char *)v54) >> 3);
        unint64_t ElementsAttr = v70[0];
        if (!v70[0]) {
          unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v69, 0, 0);
        }
        unint64_t v25 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
        if (__p)
        {
          float v67 = __p;
          operator delete(__p);
        }
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v69);
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)&ArgOperands);
      }
    }
  }
  else
  {
    unint64_t v25 = 0;
  }
  if (v77[0] != &v78) {
    free(v77[0]);
  }
  if (v79[0] != v80) {
    free(v79[0]);
  }
  return v25;
}

uint64_t llvm::any_of<llvm::iterator_range<mlir::ValueUserIterator<mlir::ValueUseIterator<mlir::OpOperand>,mlir::OpOperand>>,mlir::mps::foldTransposeOp(mlir::mps::TransposeOp,mlir::ElementsAttr,BOOL)::$_0>(void *a1, mlir::anec::Convolution *this)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (void *)a1[1];
  if ((void *)*a1 != v3)
  {
    do
    {
      uint64_t v5 = *(void **)(*(void *)(v2[2] + 48) + 16);
      if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id) {
        uint64_t v6 = v2[2];
      }
      else {
        uint64_t v6 = 0;
      }
      if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
        uint64_t v7 = v2[2];
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v13 = v7;
      uint64_t v14 = v6;
      uint64_t v8 = mlir::anec::Convolution::getResult(this);
      if (v7 && (uint64_t v9 = *(void **)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v13)) != 0 && !*v9)
      {
        uint64_t v10 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v13);
        if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)v10 + 16) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id) {
          uint64_t v11 = *(void *)(*(void *)v10 + 16);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v14 = v11;
        uint64_t v8 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v13);
        if (!v11) {
          goto LABEL_3;
        }
      }
      else if (!v6)
      {
        goto LABEL_3;
      }
      if (!mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v14)
        && mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v14) == v8)
      {
        return 1;
      }
LABEL_3:
      uint64_t v2 = (void *)*v2;
    }
    while (v2 != v3);
  }
  return 0;
}

void mlir::mps::registerExternalCanonicalizeExternalModels()
{
  v0[4] = *MEMORY[0x263EF8340];
  v0[0] = &unk_26C38CB20;
  v0[1] = mlir::mps::registerExternalCanonicalizeExternalModels(mlir::DialectRegistry &)::$_0::__invoke;
  v0[3] = v0;
  mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>();
}

void mlir::mps::registerExternalFoldExternalModels()
{
  v0[4] = *MEMORY[0x263EF8340];
  v0[0] = &unk_26C38CB20;
  v0[1] = mlir::mps::registerExternalFoldExternalModels(mlir::DialectRegistry &)::$_0::__invoke;
  v0[3] = v0;
  mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>();
}

void mlir::mps::registerExternalCanonicalizeExternalModels(mlir::DialectRegistry &)::$_0::__invoke(uint64_t *a1)
{
  uint64_t v2 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.squeeze", (const unsigned __int8 *)0xB, a1);
  if (!v3)
  {
    __int16 v81 = 1283;
    uint64_t v78 = "Attempting to attach an interface to an unregistered operation ";
    uint64_t v79 = "mps.squeeze";
LABEL_46:
    uint64_t v75 = 11;
LABEL_47:
    uint64_t v80 = v75;
    uint64_t v76 = ".";
    __int16 v77 = 259;
    llvm::operator+((uint64_t *)&v78, (uint64_t *)&v76, (uint64_t)v82);
    llvm::report_fatal_error((llvm::Twine *)v82, 1);
  }
  uint64_t v4 = v2;
  uint64_t v5 = (void *)v2[2];
  if (v5 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v2[1];
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    uint64_t v5 = (void *)v4[2];
  }
  else
  {
    uint64_t Values = v2[3];
  }
  uint64_t v7 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(Values, (uint64_t)v5, v7);
  uint64_t v8 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  unint64_t v9 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v4 + 4), v9, v8);
  uint64_t v10 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.expand_dims", (const unsigned __int8 *)0xF, a1);
  if (!v11)
  {
    __int16 v81 = 1283;
    uint64_t v78 = "Attempting to attach an interface to an unregistered operation ";
    uint64_t v79 = "mps.expand_dims";
    uint64_t v75 = 15;
    goto LABEL_47;
  }
  uint64_t v12 = v10;
  uint64_t v13 = (void *)v10[2];
  if (v13 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v10[1];
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    uint64_t v13 = (void *)v12[2];
  }
  else
  {
    uint64_t v14 = v10[3];
  }
  uint64_t v15 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v14, (uint64_t)v13, v15);
  BOOL v16 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  unint64_t v17 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v12 + 4), v17, v16);
  uint64_t v18 = "mps.flatten_2d";
  uint64_t v19 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.flatten_2d", (const unsigned __int8 *)0xE, a1);
  if (!v20) {
    goto LABEL_38;
  }
  uint64_t v21 = v19;
  unint64_t v22 = (void *)v19[2];
  if (v22 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v19[1];
    uint64_t v23 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    unint64_t v22 = (void *)v21[2];
  }
  else
  {
    uint64_t v23 = v19[3];
  }
  uint64_t v24 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v23, (uint64_t)v22, v24);
  unint64_t v25 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  unint64_t v26 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v21 + 4), v26, v25);
  uint64_t v18 = "mps.dequantize";
  uint64_t v27 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE, a1);
  if (!v28)
  {
LABEL_38:
    __int16 v81 = 1283;
    uint64_t v78 = "Attempting to attach an interface to an unregistered operation ";
    uint64_t v79 = v18;
    uint64_t v75 = 14;
    goto LABEL_47;
  }
  uint64_t v29 = v27;
  unint64_t v30 = (void *)v27[2];
  if (v30 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v27[1];
    uint64_t v31 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    unint64_t v30 = (void *)v29[2];
  }
  else
  {
    uint64_t v31 = v27[3];
  }
  uint64_t v32 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v31, (uint64_t)v30, v32);
  uint64_t v33 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  unint64_t v34 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v29 + 4), v34, v33);
  unint64_t v35 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.quantize", (const unsigned __int8 *)0xC, a1);
  if (!v36)
  {
    __int16 v81 = 1283;
    uint64_t v78 = "Attempting to attach an interface to an unregistered operation ";
    uint64_t v79 = "mps.quantize";
    uint64_t v75 = 12;
    goto LABEL_47;
  }
  unint64_t v37 = v35;
  uint64_t v38 = (void *)v35[2];
  if (v38 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v35[1];
    uint64_t v39 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    uint64_t v38 = (void *)v37[2];
  }
  else
  {
    uint64_t v39 = v35[3];
  }
  uint64_t v40 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v39, (uint64_t)v38, v40);
  uint64_t v41 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  unint64_t v42 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v37 + 4), v42, v41);
  uint64_t v43 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.cast", (const unsigned __int8 *)8, a1);
  if (!v44)
  {
    __int16 v81 = 1283;
    uint64_t v78 = "Attempting to attach an interface to an unregistered operation ";
    uint64_t v79 = "mps.cast";
    uint64_t v75 = 8;
    goto LABEL_47;
  }
  unint64_t v45 = v43;
  unint64_t v46 = (void *)v43[2];
  if (v46 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v43[1];
    uint64_t v47 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    unint64_t v46 = (void *)v45[2];
  }
  else
  {
    uint64_t v47 = v43[3];
  }
  uint64_t v48 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v47, (uint64_t)v46, v48);
  unint64_t v49 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  unint64_t v50 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v45 + 4), v50, v49);
  char v51 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.concat", (const unsigned __int8 *)0xA, a1);
  if (!v52)
  {
    __int16 v81 = 1283;
    uint64_t v78 = "Attempting to attach an interface to an unregistered operation ";
    uint64_t v79 = "mps.concat";
    uint64_t v75 = 10;
    goto LABEL_47;
  }
  uint64_t v53 = v51;
  uint64_t v54 = (void *)v51[2];
  if (v54 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v51[1];
    uint64_t v55 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    uint64_t v54 = (void *)v53[2];
  }
  else
  {
    uint64_t v55 = v51[3];
  }
  uint64_t v56 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v55, (uint64_t)v54, v56);
  float v57 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  unint64_t v58 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v53 + 4), v58, v57);
  int64x2_t v59 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.strided_slice", (const unsigned __int8 *)0x11, a1);
  if (!v60)
  {
    __int16 v81 = 1283;
    uint64_t v78 = "Attempting to attach an interface to an unregistered operation ";
    uint64_t v79 = "mps.strided_slice";
    uint64_t v75 = 17;
    goto LABEL_47;
  }
  uint64_t v61 = v59;
  uint64_t v62 = (void *)v59[2];
  if (v62 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v59[1];
    uint64_t v63 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    uint64_t v62 = (void *)v61[2];
  }
  else
  {
    uint64_t v63 = v59[3];
  }
  uint64_t v64 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v63, (uint64_t)v62, v64);
  uint64_t v65 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  unint64_t v66 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v61 + 4), v66, v65);
  float v67 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, a1);
  if (!v68)
  {
    __int16 v81 = 1283;
    uint64_t v78 = "Attempting to attach an interface to an unregistered operation ";
    uint64_t v79 = "mps.reshape";
    goto LABEL_46;
  }
  int v69 = v67;
  uint64_t v70 = (void *)v67[2];
  if (v70 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v67[1];
    uint64_t v71 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    uint64_t v70 = (void *)v69[2];
  }
  else
  {
    uint64_t v71 = v67[3];
  }
  uint64_t v72 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v71, (uint64_t)v70, v72);
  uint64_t v73 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  unint64_t v74 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v69 + 4), v74, v73);
}

uint64_t mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ExternalCanonicalizeInterface]";
      unint64_t v11 = 85;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::ExternalCanonicalizeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[414];
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::CanonicalizeSqueezeExpandFlatten<mlir::mps::SqueezeOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v52[4] = *MEMORY[0x263EF8340];
  uint64_t v49 = a2;
  unint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v49) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  unint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    unint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      unint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v48[0] = v4;
  v48[1] = v14;
  uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v48);
  if (!result) {
    return result;
  }
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v48);
  if (v17)
  {
    unint64_t v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v18 >= 3)
    {
      unint64_t v21 = v18 + 1;
      uint64_t v22 = (v18 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      char v20 = (uint64_t *)(Shape + 8 * v22);
      uint64_t v23 = (int64x2_t *)(Shape + 16);
      int64x2_t v24 = 0uLL;
      int64x2_t v25 = vdupq_n_s64(0x8000000000000000);
      uint64_t v26 = v22;
      int64x2_t v27 = 0uLL;
      do
      {
        int64x2_t v24 = vsubq_s64(v24, vceqq_s64(v23[-1], v25));
        int64x2_t v27 = vsubq_s64(v27, vceqq_s64(*v23, v25));
        v23 += 2;
        v26 -= 4;
      }
      while (v26);
      unint64_t v19 = vaddvq_s64(vaddq_s64(v27, v24));
      if (v21 == v22) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v19 = 0;
      char v20 = (uint64_t *)Shape;
    }
    do
    {
      uint64_t v28 = *v20++;
      if (v28 == 0x8000000000000000) {
        ++v19;
      }
    }
    while (v20 != (uint64_t *)(Shape + 8 * v17));
LABEL_21:
    if (v19 > 1) {
      return 0;
    }
  }
  unint64_t v30 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v48);
  uint64_t v31 = v29;
  unint64_t v50 = v52;
  uint64_t v51 = *(void *)"";
  size_t v32 = 8 * v29;
  if ((unint64_t)(8 * v29) < 0x21)
  {
    unsigned int v33 = 0;
    unint64_t v34 = (int64x2_t *)v52;
    if (!v29) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, (8 * v29) >> 3, 8);
  unsigned int v33 = v51;
  unint64_t v34 = (int64x2_t *)v50;
  if (v31)
  {
LABEL_27:
    memcpy((char *)v34 + 8 * v33, v30, v32);
    unsigned int v33 = v51;
    unint64_t v34 = (int64x2_t *)v50;
  }
LABEL_28:
  uint64_t v35 = v33 + (v32 >> 3);
  LODWORD(v51) = v33 + (v32 >> 3);
  if (v51)
  {
    unint64_t v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v37 = (uint64_t *)v34;
    if (v36 < 3) {
      goto LABEL_45;
    }
    unint64_t v38 = v36 + 1;
    unint64_t v37 = &v34->i64[v38 & 0x3FFFFFFFFFFFFFFCLL];
    uint64_t v39 = v34 + 1;
    int64x2_t v40 = vdupq_n_s64(0x8000000000000000);
    uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int32x2_t v42 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if (v42.i8[0]) {
        v39[-1].i64[0] = -1;
      }
      if (v42.i8[4]) {
        v39[-1].i64[1] = -1;
      }
      int32x2_t v43 = vmovn_s64(vceqq_s64(*v39, v40));
      if (v43.i8[0]) {
        v39->i64[0] = -1;
      }
      if (v43.i8[4]) {
        v39->i64[1] = -1;
      }
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      unint64_t v46 = &v34->i64[v35];
      do
      {
        if (*v37 == 0x8000000000000000) {
          *unint64_t v37 = -1;
        }
        ++v37;
      }
      while (v37 != v46);
    }
  }
  uint64_t v44 = v49;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v49);
  unint64_t v45 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::SmallVector<long long,4u> &>((mlir::Builder *)(a3 + 8), *(void *)(v44 + 24), &Input, (uint64_t)&v50);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v44, v45);
  if (v50 != v52) {
    free(v50);
  }
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::SmallVector<long long,4u> &>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"mps.reshape";
    void v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ReshapeOp::build(a1, v19, *a3, *(void *)a4, (void *)*(unsigned int *)(a4 + 8));
  unint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::CanonicalizeSqueezeExpandFlatten<mlir::mps::ExpandDimsOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v52[4] = *MEMORY[0x263EF8340];
  uint64_t v49 = a2;
  unint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v49) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  unint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    unint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      unint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v48[0] = v4;
  v48[1] = v14;
  uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v48);
  if (!result) {
    return result;
  }
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v48);
  if (v17)
  {
    unint64_t v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v18 >= 3)
    {
      unint64_t v21 = v18 + 1;
      uint64_t v22 = (v18 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      char v20 = (uint64_t *)(Shape + 8 * v22);
      uint64_t v23 = (int64x2_t *)(Shape + 16);
      int64x2_t v24 = 0uLL;
      int64x2_t v25 = vdupq_n_s64(0x8000000000000000);
      uint64_t v26 = v22;
      int64x2_t v27 = 0uLL;
      do
      {
        int64x2_t v24 = vsubq_s64(v24, vceqq_s64(v23[-1], v25));
        int64x2_t v27 = vsubq_s64(v27, vceqq_s64(*v23, v25));
        v23 += 2;
        v26 -= 4;
      }
      while (v26);
      unint64_t v19 = vaddvq_s64(vaddq_s64(v27, v24));
      if (v21 == v22) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v19 = 0;
      char v20 = (uint64_t *)Shape;
    }
    do
    {
      uint64_t v28 = *v20++;
      if (v28 == 0x8000000000000000) {
        ++v19;
      }
    }
    while (v20 != (uint64_t *)(Shape + 8 * v17));
LABEL_21:
    if (v19 > 1) {
      return 0;
    }
  }
  unint64_t v30 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v48);
  uint64_t v31 = v29;
  unint64_t v50 = v52;
  uint64_t v51 = *(void *)"";
  size_t v32 = 8 * v29;
  if ((unint64_t)(8 * v29) < 0x21)
  {
    unsigned int v33 = 0;
    unint64_t v34 = (int64x2_t *)v52;
    if (!v29) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, (8 * v29) >> 3, 8);
  unsigned int v33 = v51;
  unint64_t v34 = (int64x2_t *)v50;
  if (v31)
  {
LABEL_27:
    memcpy((char *)v34 + 8 * v33, v30, v32);
    unsigned int v33 = v51;
    unint64_t v34 = (int64x2_t *)v50;
  }
LABEL_28:
  uint64_t v35 = v33 + (v32 >> 3);
  LODWORD(v51) = v33 + (v32 >> 3);
  if (v51)
  {
    unint64_t v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v37 = (uint64_t *)v34;
    if (v36 < 3) {
      goto LABEL_45;
    }
    unint64_t v38 = v36 + 1;
    unint64_t v37 = &v34->i64[v38 & 0x3FFFFFFFFFFFFFFCLL];
    uint64_t v39 = v34 + 1;
    int64x2_t v40 = vdupq_n_s64(0x8000000000000000);
    uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int32x2_t v42 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if (v42.i8[0]) {
        v39[-1].i64[0] = -1;
      }
      if (v42.i8[4]) {
        v39[-1].i64[1] = -1;
      }
      int32x2_t v43 = vmovn_s64(vceqq_s64(*v39, v40));
      if (v43.i8[0]) {
        v39->i64[0] = -1;
      }
      if (v43.i8[4]) {
        v39->i64[1] = -1;
      }
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      unint64_t v46 = &v34->i64[v35];
      do
      {
        if (*v37 == 0x8000000000000000) {
          *unint64_t v37 = -1;
        }
        ++v37;
      }
      while (v37 != v46);
    }
  }
  uint64_t v44 = v49;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v49);
  unint64_t v45 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::SmallVector<long long,4u> &>((mlir::Builder *)(a3 + 8), *(void *)(v44 + 24), &Input, (uint64_t)&v50);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v44, v45);
  if (v50 != v52) {
    free(v50);
  }
  return 1;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::CanonicalizeSqueezeExpandFlatten<mlir::mps::Flatten2DOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v52[4] = *MEMORY[0x263EF8340];
  uint64_t v49 = a2;
  unint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v49) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  unint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    unint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      unint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v48[0] = v4;
  v48[1] = v14;
  uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v48);
  if (!result) {
    return result;
  }
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v48);
  if (v17)
  {
    unint64_t v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v18 >= 3)
    {
      unint64_t v21 = v18 + 1;
      uint64_t v22 = (v18 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      char v20 = (uint64_t *)(Shape + 8 * v22);
      uint64_t v23 = (int64x2_t *)(Shape + 16);
      int64x2_t v24 = 0uLL;
      int64x2_t v25 = vdupq_n_s64(0x8000000000000000);
      uint64_t v26 = v22;
      int64x2_t v27 = 0uLL;
      do
      {
        int64x2_t v24 = vsubq_s64(v24, vceqq_s64(v23[-1], v25));
        int64x2_t v27 = vsubq_s64(v27, vceqq_s64(*v23, v25));
        v23 += 2;
        v26 -= 4;
      }
      while (v26);
      unint64_t v19 = vaddvq_s64(vaddq_s64(v27, v24));
      if (v21 == v22) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v19 = 0;
      char v20 = (uint64_t *)Shape;
    }
    do
    {
      uint64_t v28 = *v20++;
      if (v28 == 0x8000000000000000) {
        ++v19;
      }
    }
    while (v20 != (uint64_t *)(Shape + 8 * v17));
LABEL_21:
    if (v19 > 1) {
      return 0;
    }
  }
  unint64_t v30 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v48);
  uint64_t v31 = v29;
  unint64_t v50 = v52;
  uint64_t v51 = *(void *)"";
  size_t v32 = 8 * v29;
  if ((unint64_t)(8 * v29) < 0x21)
  {
    unsigned int v33 = 0;
    unint64_t v34 = (int64x2_t *)v52;
    if (!v29) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, (8 * v29) >> 3, 8);
  unsigned int v33 = v51;
  unint64_t v34 = (int64x2_t *)v50;
  if (v31)
  {
LABEL_27:
    memcpy((char *)v34 + 8 * v33, v30, v32);
    unsigned int v33 = v51;
    unint64_t v34 = (int64x2_t *)v50;
  }
LABEL_28:
  uint64_t v35 = v33 + (v32 >> 3);
  LODWORD(v51) = v33 + (v32 >> 3);
  if (v51)
  {
    unint64_t v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v37 = (uint64_t *)v34;
    if (v36 < 3) {
      goto LABEL_45;
    }
    unint64_t v38 = v36 + 1;
    unint64_t v37 = &v34->i64[v38 & 0x3FFFFFFFFFFFFFFCLL];
    uint64_t v39 = v34 + 1;
    int64x2_t v40 = vdupq_n_s64(0x8000000000000000);
    uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int32x2_t v42 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if (v42.i8[0]) {
        v39[-1].i64[0] = -1;
      }
      if (v42.i8[4]) {
        v39[-1].i64[1] = -1;
      }
      int32x2_t v43 = vmovn_s64(vceqq_s64(*v39, v40));
      if (v43.i8[0]) {
        v39->i64[0] = -1;
      }
      if (v43.i8[4]) {
        v39->i64[1] = -1;
      }
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      unint64_t v46 = &v34->i64[v35];
      do
      {
        if (*v37 == 0x8000000000000000) {
          *unint64_t v37 = -1;
        }
        ++v37;
      }
      while (v37 != v46);
    }
  }
  uint64_t v44 = v49;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v49);
  unint64_t v45 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::SmallVector<long long,4u> &>((mlir::Builder *)(a3 + 8), *(void *)(v44 + 24), &Input, (uint64_t)&v50);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v44, v45);
  if (v50 != v52) {
    free(v50);
  }
  return 1;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::CanonicalizeQuantizeOp<mlir::mps::DequantizeOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  uint64_t v23 = a2;
  v22[0] = a3;
  v22[1] = &v23;
  __int16 v21 = 0;
  char v20 = 1;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v23);
  uint64_t v19 = v5;
  uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v23);
  uint64_t v18 = v7;
  uint64_t Length = mlir::mps::SliceOp::getLength((mlir::mps::SliceOp *)&v23);
  uint64_t v17 = v9;
  if (HIBYTE(v21) && (_BYTE)v21 && v20) {
    uint64_t FastmathAttr = 0;
  }
  else {
    uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v23);
  }
  uint64_t v16 = FastmathAttr;
  if (v5 == mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v23)
    && v7 == mlir::anec::GOC::getBias((mlir::anec::GOC *)&v23)
    && v9 == Length
    && FastmathAttr == mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v23))
  {
    return 0;
  }
  uint64_t v11 = v23;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v23);
  uint64_t InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v23);
  uint64_t v12 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::Value&,mlir::TypeAttr,mlir::IntegerAttr &>(a3 + 1, *(void *)(v11 + 24), &Input, &v19, &v18, &v17, &InputAttributeNames, &v16);
  (*((void (**)(mlir::UnknownLoc **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, v11, v12);
  return 1;
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizeOp<mlir::mps::DequantizeOp>::externalCanonicalize(mlir::Operation *,mlir::PatternRewriter &)const::{lambda(mlir::Value,BOOL &)#1}::operator()(void *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = (uint64_t *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = *v6;
  unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v9 = *(unsigned int *)(v7 + 16);
  if (!v9) {
    goto LABEL_10;
  }
  unint64_t v10 = *(void **)(v7 + 8);
  uint64_t v11 = &v10[2 * v9];
  do
  {
    unint64_t v12 = v9 >> 1;
    unint64_t v13 = &v10[2 * (v9 >> 1)];
    unint64_t v15 = *v13;
    uint64_t v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8) {
      unint64_t v10 = v14;
    }
    else {
      unint64_t v9 = v12;
    }
  }
  while (v9);
  if (v10 != v11 && *v10 == v8) {
    uint64_t v16 = v10[1];
  }
  else {
LABEL_10:
  }
    uint64_t v16 = 0;
  v51[0] = v6;
  v51[1] = v16;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51))
  {
    uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v51);
    if (v18)
    {
      uint64_t v19 = 8 * v18;
      while (*Shape != 0x8000000000000000)
      {
        ++Shape;
        v19 -= 8;
        if (!v19) {
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      char v20 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v51);
      if (mlir::ShapedType::getNumElements(v20, v21) == 1)
      {
        *a3 = 1;
        return v4;
      }
    }
  }
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v49 = v50;
  uint64_t v52 = v4;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v52);
  if (DefiningOp
    && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v49, DefiningOp)
    && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50) & 1) != 0)
  {
    *a3 = 1;
    mlir::ElementsAttr::value_begin<mlir::TypedAttr,void>((mlir::CallOpInterface *)v50, (uint64_t)&v52);
    if (BYTE1(v52)) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v54;
    }
    if ((_BYTE)v52) {
      uint64_t v24 = *(void *)(v53 + 8 * v23);
    }
    else {
      uint64_t v24 = (*(uint64_t (**)(void))(*(void *)v53 + 24))();
    }
    uint64_t v26 = v55(v24);
    uint64_t v28 = v27;
    if (!(_BYTE)v52)
    {
      uint64_t v29 = v53;
      uint64_t v53 = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
    }
    uint64_t v52 = v26;
    uint64_t v53 = v28;
    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v52);
    uint64_t v31 = (uint64_t *)mlir::RankedTensorType::get(0, 0, canMapOperands, 0);
    uint64_t v32 = (uint64_t)v31;
    if (!v31) {
      goto LABEL_42;
    }
    uint64_t v33 = *v31;
    unint64_t v34 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v35 = *(unsigned int *)(v33 + 16);
    if (!v35) {
      goto LABEL_42;
    }
    unint64_t v36 = *(void **)(v33 + 8);
    unint64_t v37 = &v36[2 * v35];
    do
    {
      unint64_t v38 = v35 >> 1;
      uint64_t v39 = &v36[2 * (v35 >> 1)];
      unint64_t v41 = *v39;
      int64x2_t v40 = v39 + 2;
      v35 += ~(v35 >> 1);
      if (v41 < v34) {
        unint64_t v36 = v40;
      }
      else {
        unint64_t v35 = v38;
      }
    }
    while (v35);
    if (v36 != v37 && *v36 == v34) {
      uint64_t v42 = v36[1];
    }
    else {
LABEL_42:
    }
      uint64_t v42 = 0;
    uint64_t v49 = (uint64_t *)mlir::DenseElementsAttr::get(v32, v42, &v52, 1uLL);
    uint64_t v43 = a1[1];
    uint64_t v44 = (mlir::OpBuilder *)(*a1 + 8);
    uint64_t v45 = *(void *)(*(void *)v43 + 24);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v51);
    uint64_t v47 = mlir::RankedTensorType::get(0, 0, OperandRange, 0);
    uint64_t v48 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>(v44, v45, &v47, &v49);
    return mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v48);
  }
  else
  {
    *a3 = 0;
  }
  return v4;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::Value&,mlir::TypeAttr,mlir::IntegerAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  v27[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE, Context);
  if (!v18)
  {
    __int16 v26 = 1283;
    void v25[2] = (uint64_t)"mps.dequantize";
    v25[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v17);
  mlir::mps::DequantizeOp::build(a1, (uint64_t)v27, *a3, *a4, *a5, *a6, *a7, *a8);
  uint64_t v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
    char v20 = v19;
  }
  else {
    char v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v20;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::CanonicalizeQuantizeOp<mlir::mps::QuantizeOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  uint64_t v19 = a2;
  v18[0] = a3;
  v18[1] = &v19;
  __int16 v17 = 0;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v19);
  uint64_t v16 = v5;
  uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v19);
  uint64_t v15 = v7;
  if (HIBYTE(v17) && (_BYTE)v17) {
    uint64_t FastmathAttr = 0;
  }
  else {
    uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v19);
  }
  uint64_t v14 = FastmathAttr;
  if (v5 == mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v19)
    && v7 == mlir::anec::GOC::getBias((mlir::anec::GOC *)&v19)
    && FastmathAttr == mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v19))
  {
    return 0;
  }
  uint64_t v9 = v19;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v19);
  uint64_t InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v19);
  unint64_t v10 = mlir::OpBuilder::create<mlir::mps::QuantizeOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::TypeAttr,mlir::IntegerAttr &>(a3 + 1, *(void *)(v9 + 24), &Input, &v16, &v15, &InputAttributeNames, &v14);
  (*((void (**)(mlir::UnknownLoc **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, v9, v10);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mps::QuantizeOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::TypeAttr,mlir::IntegerAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  v25[38] = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.quantize", (const unsigned __int8 *)0xC, Context);
  if (!v16)
  {
    __int16 v24 = 1283;
    void v23[2] = (uint64_t)"mps.quantize";
    v23[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::mps::QuantizeOp::build(a1, (uint64_t)v25, *a3, *a4, *a5, *a6, *a7);
  __int16 v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::QuantizeOp,void>::id) {
    char v18 = v17;
  }
  else {
    char v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::CanonicalizeCastOp>::externalCanonicalize(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  uint64_t v42 = a2;
  uint64_t Input = (void **)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v42);
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v42) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  unint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    unint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      unint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v40[0] = v4;
  v40[1] = v14;
  uint64_t OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40);
  Type = (void *)mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v42);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (DefiningOp)
  {
    __int16 v17 = *(void **)(*(void *)(DefiningOp + 48) + 16);
    BOOL v18 = v17 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id;
    uint64_t v19 = v17 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id ? DefiningOp : 0;
    uint64_t v38 = v19;
    if (v18)
    {
      unint64_t v37 = (ZinIrHalH13g *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v38);
      uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((uint64_t)v37);
      {
        {
          unint64_t ElementBitWidth = mlir::getElementBitWidth(ElementTypeOrSelf);
          if (ElementBitWidth <= mlir::getElementBitWidth(OperandRange))
          {
            uint64_t v32 = v42;
            uint64_t v33 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a3 + 1, *(void *)(v42 + 24), (uint64_t *)&v37, (uint64_t *)&Type);
            (*((void (**)(mlir::UnknownLoc **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, v32, v33);
            return 1;
          }
        }
      }
    }
  }
  uint64_t v22 = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (v22)
  {
    uint64_t v23 = *(void **)(*(void *)(v22 + 48) + 16);
    BOOL v24 = v23 == &mlir::detail::TypeIDResolver<mlir::mps::PadOp,void>::id;
    uint64_t v25 = v23 == &mlir::detail::TypeIDResolver<mlir::mps::PadOp,void>::id ? v22 : 0;
    uint64_t v38 = v25;
    if (v24)
    {
      if (*Input)
      {
        if (!**Input)
        {
          {
            unint64_t v27 = mlir::getElementBitWidth(Type);
            if (v27 < mlir::getElementBitWidth(OperandRange))
            {
              uint64_t v28 = *(void *)(v42 + 24);
              uint64_t Bias = (ZinIrHalH13g *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v38);
              unint64_t v37 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a3 + 1, v28, (uint64_t *)&Bias, (uint64_t *)&Type);
              uint64_t v29 = *(void *)(v42 + 24);
              uint64_t Filter = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v38);
              uint64_t Bias = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a3 + 1, v29, &Filter, (uint64_t *)&Type);
              uint64_t v30 = v42;
              uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v38);
              unsigned int PaddingMode = mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v38);
              uint64_t v31 = mlir::OpBuilder::create<mlir::mps::PadOp,mlir::mps::CastOp &,mlir::Value,mlir::mps::CastOp &,mlir::mps::PaddingMode>(a3 + 1, *(void *)(v30 + 24), &Bias, &Filter, &v37, &PaddingMode);
              (*((void (**)(mlir::UnknownLoc **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, v30, v31);
              return 1;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeCastOp::externalCanonicalize(mlir::Operation *,mlir::PatternRewriter &)const::{lambda(mlir::Type,mlir::Type)#1}::operator()(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(*(void *)a1 + 136);
  if ((v2 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) != (*(void *)(*(void *)a2 + 136) == (void)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t Value = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v21 = v6;
  if (v6)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v21);
    uint64_t v23 = Value;
    uint64_t v20 = v4;
    uint64_t v4 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v20);
    uint64_t v22 = v4;
  }
  unint64_t v7 = *(void **)(*(void *)Value + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
        && *(_UNKNOWN **)(*(void *)v4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  }
  uint64_t v19 = *(void **)(*(void *)v4 + 136);
  if (v19 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
        && *(_UNKNOWN **)(*(void *)v4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  }
  if (mlir::Type::isF16((mlir::Type *)&v23) && mlir::Type::isBF16((mlir::Type *)&v22)) {
    return 0;
  }
  if (mlir::Type::isBF16((mlir::Type *)&v23)) {
    return !mlir::Type::isF16((mlir::Type *)&v22);
  }
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mps::PadOp,mlir::mps::CastOp &,mlir::Value,mlir::mps::CastOp &,mlir::mps::PaddingMode>(mlir::MLIRContext **a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, unsigned int *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.pad", (const unsigned __int8 *)7, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    unint64_t v21[2] = (uint64_t)"mps.pad";
    void v21[3] = 7;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::mps::PadOp::build(a1, (uint64_t)v23, *a3 - 16, *a4, *a5 - 16, *a6);
  uint64_t v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::PadOp,void>::id) {
    char v16 = v15;
  }
  else {
    char v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::CanonicalizeConcatOp>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[1] = *MEMORY[0x263EF8340];
  uint64_t v23 = a2;
  uint64_t Values = mlir::mps::ConcatOp::getValues((mlir::mps::ConcatOp *)&v23);
  if (v5 != 1) {
    return 0;
  }
  uint64_t v22 = *(void *)(Values + 24);
  uint64_t v6 = (uint64_t *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    goto LABEL_11;
  }
  uint64_t v7 = *v6;
  unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v9 = *(unsigned int *)(v7 + 16);
  if (!v9) {
    goto LABEL_11;
  }
  unint64_t v10 = *(void **)(v7 + 8);
  uint64_t v11 = &v10[2 * v9];
  do
  {
    unint64_t v12 = v9 >> 1;
    uint64_t v13 = &v10[2 * (v9 >> 1)];
    unint64_t v15 = *v13;
    char v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8) {
      unint64_t v10 = v14;
    }
    else {
      unint64_t v9 = v12;
    }
  }
  while (v9);
  if (v10 != v11 && *v10 == v8) {
    uint64_t v16 = v10[1];
  }
  else {
LABEL_11:
  }
    uint64_t v16 = 0;
  v21[0] = v6;
  v21[1] = v16;
  uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v21);
  if (result)
  {
    mlir::ShapedType::getShape((mlir::ShapedType *)v21);
    if (v18) {
      return 0;
    }
    uint64_t v19 = v23;
    v24[0] = v25;
    v25[0] = 1;
    v24[1] = (void *)0x100000001;
    __int16 v20 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::SmallVector<long long,4u> &>((mlir::Builder *)(a3 + 8), *(void *)(v23 + 24), &v22, (uint64_t)v24);
    (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v19, v20);
    if (v24[0] != v25) {
      free(v24[0]);
    }
    return 1;
  }
  return result;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::CanonicalizeStridedSliceOp>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v61[2] = *MEMORY[0x263EF8340];
  uint64_t v51 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  unint64_t v8 = *(void **)(v5 + 8);
  unint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    unint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      unint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v50[0] = v4;
  v50[1] = v14;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v50)) {
    return 0;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v50);
  if (v16)
  {
    uint64_t v17 = 8 * v16;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v17 -= 8;
      if (!v17) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t Bias = (int *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v51);
  uint64_t v56 = (uint64_t **)&v48;
  int64x2_t v59 = Bias;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!DefiningOp) {
    return 0;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v56, DefiningOp)) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t Length = (int *)mlir::mps::SliceOp::getLength((mlir::mps::SliceOp *)&v51);
  uint64_t v56 = (uint64_t **)&v46;
  int64x2_t v59 = Length;
  uint64_t v21 = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!v21 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v56, v21)) {
    return 0;
  }
  int64x2_t v59 = (int *)v61;
  uint64_t v60 = *(void *)"";
  mlir::getIntValues<int>(v48, v49, (uint64_t)&v59, 1);
  uint64_t v56 = (uint64_t **)v58;
  uint64_t v57 = *(void *)"";
  mlir::getIntValues<int>(v46, v47, (uint64_t)&v56, 1);
  uint64_t v22 = v60;
  uint64_t v53 = v55;
  uint64_t v54 = *(void *)"";
  if (v60 < 5)
  {
    if (!v60) {
      goto LABEL_28;
    }
    size_t v24 = 4 * v60;
    uint64_t v23 = v55;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, v60, 4);
    uint64_t v23 = v53;
    size_t v24 = 4 * v22;
  }
  bzero(v23, v24);
LABEL_28:
  LODWORD(v54) = v22;
  if (mlir::mps::StridedSliceOp::getEndIsSize((mlir::mps::StridedSliceOp *)&v51))
  {
    uint64_t Input = 0;
    uint64_t v45 = 0;
    uint64_t v43 = (uint64_t **)&Input;
    uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v51);
    uint64_t v27 = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
    if (!v27 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v43, v27)) {
      goto LABEL_45;
    }
    LODWORD(v54) = 0;
    mlir::getIntValues<int>(Input, v45, (uint64_t)&v53, 1);
  }
  uint64_t v28 = mlir::ShapedType::getShape((mlir::ShapedType *)v50);
  EndMasuint64_t k = mlir::mps::StridedSliceOp::getEndMask((mlir::mps::StridedSliceOp *)&v51);
  unsigned int v42 = EndMask;
  if (v60)
  {
    unsigned int v30 = EndMask;
    unint64_t v31 = 0;
    unsigned int v32 = EndMask;
    do
    {
      uint64_t v33 = v59[v31];
      if ((mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v51) & (1 << v31)) == 0) {
        v33 += mlir::getPositiveAxis(*((int *)v53 + v31), *(void *)(v28 + 8 * v31));
      }
      if (v31 >= v57) {
        int v34 = 1;
      }
      else {
        int v34 = *((_DWORD *)v56 + v31);
      }
      if (v33 > *(void *)(v28 + 8 * v31) && v34 >= 1)
      {
        v32 |= 1 << v31;
        unsigned int v42 = v32;
      }
      ++v31;
    }
    while (v31 < v60);
    if (v30 == v32)
    {
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v36 = v51;
      uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v51);
      uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v51);
      uint64_t v43 = (uint64_t **)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v51);
      uint64_t v41 = mlir::mps::SliceOp::getLength((mlir::mps::SliceOp *)&v51);
      unsigned int Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v51);
      unsigned int Groups = mlir::mps::Conv2DDataGradientOp::getGroups((mlir::mps::Conv2DDataGradientOp *)&v51);
      BOOL IsSize = mlir::mps::StridedSliceOp::getEndIsSize((mlir::mps::StridedSliceOp *)&v51);
      unint64_t v37 = mlir::OpBuilder::create<mlir::mps::StridedSliceOp,mlir::Value,mlir::Value,mlir::Value,mlir::Value,unsigned int,unsigned int &,unsigned int,BOOL>((mlir::Builder *)(a3 + 8), *(void *)(v36 + 24), &Input, &Filter, (uint64_t *)&v43, &v41, &Index, &v42, &Groups, (char *)&IsSize);
      (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v36, v37);
      uint64_t v25 = 1;
    }
    goto LABEL_49;
  }
LABEL_45:
  uint64_t v25 = 0;
LABEL_49:
  if (v53 != v55) {
    free(v53);
  }
  if (v56 != (uint64_t **)v58) {
    free(v56);
  }
  if (v59 != (int *)v61) {
    free(v59);
  }
  return v25;
}

void mlir::getIntValues<int>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v8) || a4) {
    unint64_t NumElements = mlir::ElementsAttr::getNumElements(v8, v9);
  }
  else {
    unint64_t NumElements = 1;
  }
  unint64_t v7 = *(unsigned int *)(a3 + 8);
  if (NumElements != v7)
  {
    if (NumElements >= v7)
    {
      if (NumElements > *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), NumElements, 4);
        unint64_t v7 = *(unsigned int *)(a3 + 8);
      }
      if (NumElements != v7) {
        bzero((void *)(*(void *)a3 + 4 * v7), 4 * (NumElements - v7));
      }
    }
    *(_DWORD *)(a3 + 8) = NumElements;
  }
  mlir::copyElementsAttrData<int>(v8, v9, *(void *)a3, a4);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mps::StridedSliceOp,mlir::Value,mlir::Value,mlir::Value,mlir::Value,unsigned int,unsigned int &,unsigned int,BOOL>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, char *a10)
{
  v29[38] = *MEMORY[0x263EF8340];
  uint64_t v24 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.strided_slice", (const unsigned __int8 *)0x11, Context);
  if (!v20)
  {
    __int16 v28 = 1283;
    unint64_t v27[2] = (uint64_t)"mps.strided_slice";
    v27[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::mps::StridedSliceOp::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10);
  uint64_t v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::StridedSliceOp,void>::id) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::CanonicalizeReshapeOp>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD v46[4] = *MEMORY[0x263EF8340];
  uint64_t v43 = a2;
  uint64_t Input = (void *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v43);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v5 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id;
  uint64_t v7 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id ? DefiningOp : 0;
  uint64_t v42 = v7;
  if (!v6
    || mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v43)
    || mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v42))
  {
    return 0;
  }
  uint64_t v9 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v43) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v10 = *v9;
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *(unsigned int *)(v10 + 16);
  if (!v12) {
    goto LABEL_20;
  }
  unint64_t v13 = *(void **)(v10 + 8);
  uint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      unint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_20:
  }
    uint64_t v19 = 0;
  v41[0] = v9;
  v41[1] = v19;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v41))
  {
    uint64_t Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v41);
    uint64_t v22 = v20;
    uint64_t Input = v46;
    uint64_t v45 = *(void *)"";
    size_t v23 = 8 * v20;
    if ((unint64_t)(8 * v20) < 0x21)
    {
      unsigned int v24 = 0;
      uint64_t v25 = (int64x2_t *)v46;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Input, v46, (8 * v20) >> 3, 8);
      unsigned int v24 = v45;
      uint64_t v25 = (int64x2_t *)Input;
    }
    if (v22)
    {
      memcpy((char *)v25 + 8 * v24, Shape, v23);
      unsigned int v24 = v45;
      uint64_t v25 = (int64x2_t *)Input;
    }
    uint64_t v28 = v24 + (v23 >> 3);
    LODWORD(v45) = v24 + (v23 >> 3);
    if (v45)
    {
      unint64_t v29 = (v28 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      unsigned int v30 = (uint64_t *)v25;
      if (v29 < 3) {
        goto LABEL_44;
      }
      unint64_t v31 = v29 + 1;
      unsigned int v30 = &v25->i64[v31 & 0x3FFFFFFFFFFFFFFCLL];
      unsigned int v32 = v25 + 1;
      int64x2_t v33 = vdupq_n_s64(0x8000000000000000);
      uint64_t v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int32x2_t v35 = vmovn_s64(vceqq_s64(v32[-1], v33));
        if (v35.i8[0]) {
          v32[-1].i64[0] = -1;
        }
        if (v35.i8[4]) {
          v32[-1].i64[1] = -1;
        }
        int32x2_t v36 = vmovn_s64(vceqq_s64(*v32, v33));
        if (v36.i8[0]) {
          v32->i64[0] = -1;
        }
        if (v36.i8[4]) {
          v32->i64[1] = -1;
        }
        v32 += 2;
        v34 -= 4;
      }
      while (v34);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        uint64_t v39 = &v25->i64[v28];
        do
        {
          if (*v30 == 0x8000000000000000) {
            *unsigned int v30 = -1;
          }
          ++v30;
        }
        while (v30 != v39);
      }
    }
    uint64_t v37 = v43;
    uint64_t Filter = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v42);
    uint64_t v38 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::SmallVector<long long,4u> &>((mlir::Builder *)(a3 + 8), *(void *)(v37 + 24), &Filter, (uint64_t)&Input);
    (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v37, v38);
    if (Input != v46) {
      free(Input);
    }
  }
  else
  {
    uint64_t v26 = v43;
    uint64_t Input = (void *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v42);
    uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v43);
    uint64_t v27 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,mlir::Value>((mlir::UnitAttr **)(a3 + 8), *(void *)(v26 + 24), (uint64_t *)&Input, &Filter);
    (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v26, v27);
  }
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,mlir::Value>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"mps.reshape";
    void v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ReshapeOp::build(a1, (uint64_t)v19, *a3, *a4, 0);
  unint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::mps::registerExternalFoldExternalModels(mlir::DialectRegistry &)::$_0::operator()(uint64_t *a1)
{
  int v2 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reciprocal_square_root", (const unsigned __int8 *)0x1A, a1);
  if (!v3)
  {
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.reciprocal_square_root";
    uint64_t v496 = 26;
    goto LABEL_262;
  }
  uint64_t v4 = v2;
  uint64_t v5 = (void *)v2[2];
  if (v5 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v2[1];
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v5 = (void *)v4[2];
  }
  else
  {
    uint64_t Values = v2[3];
  }
  uint64_t v7 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(Values, (uint64_t)v5, v7);
  uint64_t v8 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v9 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v4 + 4), v9, v8);
  char v10 = "mps.reciprocal";
  unint64_t v11 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reciprocal", (const unsigned __int8 *)0xE, a1);
  if (!v12) {
    goto LABEL_252;
  }
  unint64_t v13 = v11;
  uint64_t v14 = (void *)v11[2];
  if (v14 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v11[1];
    uint64_t v15 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v14 = (void *)v13[2];
  }
  else
  {
    uint64_t v15 = v11[3];
  }
  uint64_t v16 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v15, (uint64_t)v14, v16);
  uint64_t v17 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v18 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v13 + 4), v18, v17);
  uint64_t v19 = "mps.negative";
  uint64_t v20 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.negative", (const unsigned __int8 *)0xC, a1);
  if (!v21) {
    goto LABEL_249;
  }
  uint64_t v22 = v20;
  size_t v23 = (void *)v20[2];
  if (v23 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v20[1];
    uint64_t v24 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    size_t v23 = (void *)v22[2];
  }
  else
  {
    uint64_t v24 = v20[3];
  }
  uint64_t v25 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v24, (uint64_t)v23, v25);
  uint64_t v26 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v27 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v22 + 4), v27, v26);
  uint64_t v28 = "mps.not";
  unint64_t v29 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.not", (const unsigned __int8 *)7, a1);
  if (!v30) {
    goto LABEL_250;
  }
  unint64_t v31 = v29;
  unsigned int v32 = (void *)v29[2];
  if (v32 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v29[1];
    uint64_t v33 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    unsigned int v32 = (void *)v31[2];
  }
  else
  {
    uint64_t v33 = v29[3];
  }
  uint64_t v34 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v33, (uint64_t)v32, v34);
  int32x2_t v35 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v36 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v31 + 4), v36, v35);
  uint64_t v37 = "mps.ceil";
  uint64_t v38 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.ceil", (const unsigned __int8 *)8, a1);
  if (!v39) {
    goto LABEL_245;
  }
  int64x2_t v40 = v38;
  uint64_t v41 = (void *)v38[2];
  if (v41 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v38[1];
    uint64_t v42 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v41 = (void *)v40[2];
  }
  else
  {
    uint64_t v42 = v38[3];
  }
  uint64_t v43 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v42, (uint64_t)v41, v43);
  uint64_t v44 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v45 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v40 + 4), v45, v44);
  uint64_t v46 = "mps.floor";
  uint64_t v47 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.floor", (const unsigned __int8 *)9, a1);
  if (!v48) {
    goto LABEL_244;
  }
  uint64_t v49 = v47;
  unint64_t v50 = (void *)v47[2];
  if (v50 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v47[1];
    uint64_t v51 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    unint64_t v50 = (void *)v49[2];
  }
  else
  {
    uint64_t v51 = v47[3];
  }
  uint64_t v52 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v51, (uint64_t)v50, v52);
  uint64_t v53 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v54 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v49 + 4), v54, v53);
  uint64_t v46 = "mps.round";
  uint64_t v55 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.round", (const unsigned __int8 *)9, a1);
  if (!v56) {
    goto LABEL_244;
  }
  uint64_t v57 = v55;
  unint64_t v58 = (void *)v55[2];
  if (v58 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v55[1];
    uint64_t v59 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    unint64_t v58 = (void *)v57[2];
  }
  else
  {
    uint64_t v59 = v55[3];
  }
  uint64_t v60 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v59, (uint64_t)v58, v60);
  uint64_t v61 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v62 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v57 + 4), v62, v61);
  uint64_t v28 = "mps.add";
  uint64_t v63 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.add", (const unsigned __int8 *)7, a1);
  if (!v64) {
    goto LABEL_250;
  }
  uint64_t v65 = v63;
  unint64_t v66 = (void *)v63[2];
  if (v66 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v63[1];
    uint64_t v67 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    unint64_t v66 = (void *)v65[2];
  }
  else
  {
    uint64_t v67 = v63[3];
  }
  uint64_t v68 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v67, (uint64_t)v66, v68);
  int v69 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v70 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v65 + 4), v70, v69);
  uint64_t v19 = "mps.subtract";
  uint64_t v71 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.subtract", (const unsigned __int8 *)0xC, a1);
  if (!v72) {
    goto LABEL_249;
  }
  uint64_t v73 = v71;
  unint64_t v74 = (void *)v71[2];
  if (v74 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v71[1];
    uint64_t v75 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    unint64_t v74 = (void *)v73[2];
  }
  else
  {
    uint64_t v75 = v71[3];
  }
  uint64_t v76 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v75, (uint64_t)v74, v76);
  __int16 v77 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v78 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v73 + 4), v78, v77);
  uint64_t v19 = "mps.multiply";
  uint64_t v79 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.multiply", (const unsigned __int8 *)0xC, a1);
  if (!v80)
  {
LABEL_249:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v19;
LABEL_261:
    uint64_t v496 = 12;
LABEL_262:
    uint64_t v501 = v496;
    v497 = ".";
    __int16 v498 = 259;
    llvm::operator+((uint64_t *)&v499, (uint64_t *)&v497, (uint64_t)v503);
    llvm::report_fatal_error((llvm::Twine *)v503, 1);
  }
  __int16 v81 = v79;
  uint64_t v82 = (void *)v79[2];
  if (v82 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v79[1];
    uint64_t v83 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v82 = (void *)v81[2];
  }
  else
  {
    uint64_t v83 = v79[3];
  }
  uint64_t v84 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v83, (uint64_t)v82, v84);
  unint64_t v85 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v86 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v81 + 4), v86, v85);
  int v87 = "mps.divide";
  int v88 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.divide", (const unsigned __int8 *)0xA, a1);
  if (!v89) {
    goto LABEL_246;
  }
  __int16 v90 = v88;
  unint64_t v91 = (void *)v88[2];
  if (v91 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v88[1];
    uint64_t v92 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    unint64_t v91 = (void *)v90[2];
  }
  else
  {
    uint64_t v92 = v88[3];
  }
  uint64_t v93 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v92, (uint64_t)v91, v93);
  uint64_t v94 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v95 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v90 + 4), v95, v94);
  int v87 = "mps.modulo";
  uint64_t v96 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.modulo", (const unsigned __int8 *)0xA, a1);
  if (!v97) {
    goto LABEL_246;
  }
  unint64_t v98 = v96;
  uint64_t v99 = (void *)v96[2];
  if (v99 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v96[1];
    uint64_t v100 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v99 = (void *)v98[2];
  }
  else
  {
    uint64_t v100 = v96[3];
  }
  uint64_t v101 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v100, (uint64_t)v99, v101);
  uint64_t v102 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v103 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v98 + 4), v103, v102);
  uint64_t v104 = "mps.minimum";
  long long v105 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.minimum", (const unsigned __int8 *)0xB, a1);
  if (!v106) {
    goto LABEL_242;
  }
  char v107 = v105;
  uint64_t v108 = (void *)v105[2];
  if (v108 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v105[1];
    uint64_t v109 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v108 = (void *)v107[2];
  }
  else
  {
    uint64_t v109 = v105[3];
  }
  uint64_t v110 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v109, (uint64_t)v108, v110);
  uint64_t v111 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v112 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v107 + 4), v112, v111);
  uint64_t v104 = "mps.maximum";
  uint64_t v113 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.maximum", (const unsigned __int8 *)0xB, a1);
  if (!v114) {
    goto LABEL_242;
  }
  unint64_t v115 = v113;
  uint64_t v116 = (void *)v113[2];
  if (v116 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v113[1];
    uint64_t v117 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v116 = (void *)v115[2];
  }
  else
  {
    uint64_t v117 = v113[3];
  }
  uint64_t v118 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v117, (uint64_t)v116, v118);
  char v119 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v120 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v115 + 4), v120, v119);
  uint64_t v46 = "mps.equal";
  uint64_t v121 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.equal", (const unsigned __int8 *)9, a1);
  if (!v122)
  {
LABEL_244:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v46;
    uint64_t v496 = 9;
    goto LABEL_262;
  }
  unint64_t v123 = v121;
  unint64_t v124 = (void *)v121[2];
  if (v124 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v121[1];
    uint64_t v125 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    unint64_t v124 = (void *)v123[2];
  }
  else
  {
    uint64_t v125 = v121[3];
  }
  uint64_t v126 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v125, (uint64_t)v124, v126);
  unint64_t v127 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v128 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v123 + 4), v128, v127);
  unint64_t v129 = "mps.not_equal";
  unint64_t v130 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.not_equal", (const unsigned __int8 *)0xD, a1);
  if (!v131) {
    goto LABEL_248;
  }
  uint64_t v132 = v130;
  char v133 = (void *)v130[2];
  if (v133 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v130[1];
    uint64_t v134 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    char v133 = (void *)v132[2];
  }
  else
  {
    uint64_t v134 = v130[3];
  }
  uint64_t v135 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v134, (uint64_t)v133, v135);
  uint64_t v136 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v137 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v132 + 4), v137, v136);
  uint64_t v104 = "mps.greater";
  uint64_t v138 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.greater", (const unsigned __int8 *)0xB, a1);
  if (!v139) {
    goto LABEL_242;
  }
  uint64_t v140 = v138;
  uint64_t v141 = (void *)v138[2];
  if (v141 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v138[1];
    uint64_t v142 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v141 = (void *)v140[2];
  }
  else
  {
    uint64_t v142 = v138[3];
  }
  uint64_t v143 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v142, (uint64_t)v141, v143);
  char v144 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v145 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v140 + 4), v145, v144);
  unint64_t v146 = "mps.greater_equal";
  uint64_t v147 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.greater_equal", (const unsigned __int8 *)0x11, a1);
  if (!v148) {
    goto LABEL_243;
  }
  uint64_t v149 = v147;
  uint64_t v150 = (void *)v147[2];
  if (v150 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v147[1];
    uint64_t v151 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v150 = (void *)v149[2];
  }
  else
  {
    uint64_t v151 = v147[3];
  }
  uint64_t v152 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v151, (uint64_t)v150, v152);
  unint64_t v153 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v154 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v149 + 4), v154, v153);
  uint64_t v37 = "mps.less";
  unint64_t v155 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.less", (const unsigned __int8 *)8, a1);
  if (!v156) {
    goto LABEL_245;
  }
  char v157 = v155;
  uint64_t v158 = (void *)v155[2];
  if (v158 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v155[1];
    uint64_t v159 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v158 = (void *)v157[2];
  }
  else
  {
    uint64_t v159 = v155[3];
  }
  uint64_t v160 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v159, (uint64_t)v158, v160);
  long long v161 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v162 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v157 + 4), v162, v161);
  char v10 = "mps.less_equal";
  uint64_t v163 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.less_equal", (const unsigned __int8 *)0xE, a1);
  if (!v164)
  {
LABEL_252:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v10;
    uint64_t v496 = 14;
    goto LABEL_262;
  }
  unint64_t v165 = v163;
  uint64_t v166 = (void *)v163[2];
  if (v166 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v163[1];
    uint64_t v167 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v166 = (void *)v165[2];
  }
  else
  {
    uint64_t v167 = v163[3];
  }
  uint64_t v168 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v167, (uint64_t)v166, v168);
  uint64_t v169 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v170 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v165 + 4), v170, v169);
  unint64_t v146 = "mps.reduction_and";
  unint64_t v171 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_and", (const unsigned __int8 *)0x11, a1);
  if (!v172) {
    goto LABEL_243;
  }
  unint64_t v173 = v171;
  uint64_t v174 = (void *)v171[2];
  if (v174 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v171[1];
    uint64_t v175 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v174 = (void *)v173[2];
  }
  else
  {
    uint64_t v175 = v171[3];
  }
  uint64_t v176 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v175, (uint64_t)v174, v176);
  unsigned int v177 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v178 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v173 + 4), v178, v177);
  uint64_t v179 = "mps.reduction_argmax";
  unint64_t v180 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_argmax", (const unsigned __int8 *)0x14, a1);
  if (!v181) {
    goto LABEL_251;
  }
  uint64_t v182 = v180;
  uint64_t v183 = (void *)v180[2];
  if (v183 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v180[1];
    uint64_t v184 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v183 = (void *)v182[2];
  }
  else
  {
    uint64_t v184 = v180[3];
  }
  uint64_t v185 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v184, (uint64_t)v183, v185);
  char v186 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v187 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v182 + 4), v187, v186);
  uint64_t v179 = "mps.reduction_argmin";
  uint64_t v188 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_argmin", (const unsigned __int8 *)0x14, a1);
  if (!v189) {
    goto LABEL_251;
  }
  BOOL v190 = v188;
  uint64_t v191 = (void *)v188[2];
  if (v191 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v188[1];
    uint64_t v192 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v191 = (void *)v190[2];
  }
  else
  {
    uint64_t v192 = v188[3];
  }
  uint64_t v193 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v192, (uint64_t)v191, v193);
  v194 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v195 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v190 + 4), v195, v194);
  __int16 v196 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_logsumexp", (const unsigned __int8 *)0x17, a1);
  if (!v197)
  {
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.reduction_logsumexp";
    uint64_t v496 = 23;
    goto LABEL_262;
  }
  long long v198 = v196;
  __int16 v199 = (void *)v196[2];
  if (v199 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v196[1];
    uint64_t v200 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    __int16 v199 = (void *)v198[2];
  }
  else
  {
    uint64_t v200 = v196[3];
  }
  uint64_t v201 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v200, (uint64_t)v199, v201);
  v202 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v203 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v198 + 4), v203, v202);
  unint64_t v146 = "mps.reduction_max";
  v204 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_max", (const unsigned __int8 *)0x11, a1);
  if (!v205) {
    goto LABEL_243;
  }
  uint64_t v206 = v204;
  uint64_t v207 = (void *)v204[2];
  if (v207 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v204[1];
    uint64_t v208 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v207 = (void *)v206[2];
  }
  else
  {
    uint64_t v208 = v204[3];
  }
  uint64_t v209 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v208, (uint64_t)v207, v209);
  uint64_t v210 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v211 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v206 + 4), v211, v210);
  uint64_t v212 = "mps.reduction_mean";
  uint64_t v213 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_mean", (const unsigned __int8 *)0x12, a1);
  if (!v214) {
    goto LABEL_247;
  }
  v215 = v213;
  uint64_t v216 = (void *)v213[2];
  if (v216 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v213[1];
    uint64_t v217 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    uint64_t v216 = (void *)v215[2];
  }
  else
  {
    uint64_t v217 = v213[3];
  }
  uint64_t v218 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v217, (uint64_t)v216, v218);
  v219 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v220 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v215 + 4), v220, v219);
  unint64_t v146 = "mps.reduction_min";
  v221 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_min", (const unsigned __int8 *)0x11, a1);
  if (!v222) {
    goto LABEL_243;
  }
  v223 = v221;
  v224 = (void *)v221[2];
  if (v224 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v221[1];
    uint64_t v225 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v224 = (void *)v223[2];
  }
  else
  {
    uint64_t v225 = v221[3];
  }
  uint64_t v226 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v225, (uint64_t)v224, v226);
  v227 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v228 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v223 + 4), v228, v227);
  v229 = "mps.reduction_or";
  v230 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_or", (const unsigned __int8 *)0x10, a1);
  if (!v231) {
    goto LABEL_254;
  }
  v232 = v230;
  v233 = (void *)v230[2];
  if (v233 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v230[1];
    uint64_t v234 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v233 = (void *)v232[2];
  }
  else
  {
    uint64_t v234 = v230[3];
  }
  uint64_t v235 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v234, (uint64_t)v233, v235);
  v236 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v237 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v232 + 4), v237, v236);
  unint64_t v146 = "mps.reduction_sum";
  v238 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_sum", (const unsigned __int8 *)0x11, a1);
  if (!v239) {
    goto LABEL_243;
  }
  v240 = v238;
  v241 = (void *)v238[2];
  if (v241 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v238[1];
    uint64_t v242 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v241 = (void *)v240[2];
  }
  else
  {
    uint64_t v242 = v238[3];
  }
  uint64_t v243 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v242, (uint64_t)v241, v243);
  v244 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v245 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v240 + 4), v245, v244);
  v246 = "mps.reduction_variance";
  v247 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_variance", (const unsigned __int8 *)0x16, a1);
  if (!v248) {
    goto LABEL_253;
  }
  v249 = v247;
  v250 = (void *)v247[2];
  if (v250 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v247[1];
    uint64_t v251 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v250 = (void *)v249[2];
  }
  else
  {
    uint64_t v251 = v247[3];
  }
  uint64_t v252 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v251, (uint64_t)v250, v252);
  v253 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v254 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v249 + 4), v254, v253);
  int v87 = "mps.select";
  v255 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.select", (const unsigned __int8 *)0xA, a1);
  if (!v256) {
    goto LABEL_246;
  }
  v257 = v255;
  v258 = (void *)v255[2];
  if (v258 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v255[1];
    uint64_t v259 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v258 = (void *)v257[2];
  }
  else
  {
    uint64_t v259 = v255[3];
  }
  uint64_t v260 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v259, (uint64_t)v258, v260);
  v261 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v262 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v257 + 4), v262, v261);
  uint64_t v46 = "mps.power";
  v263 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.power", (const unsigned __int8 *)9, a1);
  if (!v264) {
    goto LABEL_244;
  }
  v265 = v263;
  v266 = (void *)v263[2];
  if (v266 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v263[1];
    uint64_t v267 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v266 = (void *)v265[2];
  }
  else
  {
    uint64_t v267 = v263[3];
  }
  uint64_t v268 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v267, (uint64_t)v266, v268);
  v269 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v270 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v265 + 4), v270, v269);
  unint64_t v129 = "mps.transpose";
  v271 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.transpose", (const unsigned __int8 *)0xD, a1);
  if (!v272) {
    goto LABEL_248;
  }
  v273 = v271;
  v274 = (void *)v271[2];
  if (v274 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v271[1];
    uint64_t v275 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v274 = (void *)v273[2];
  }
  else
  {
    uint64_t v275 = v271[3];
  }
  uint64_t v276 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v275, (uint64_t)v274, v276);
  v277 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v278 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v273 + 4), v278, v277);
  uint64_t v104 = "mps.permute";
  v279 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.permute", (const unsigned __int8 *)0xB, a1);
  if (!v280) {
    goto LABEL_242;
  }
  v281 = v279;
  v282 = (void *)v279[2];
  if (v282 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v279[1];
    uint64_t v283 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v282 = (void *)v281[2];
  }
  else
  {
    uint64_t v283 = v279[3];
  }
  uint64_t v284 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v283, (uint64_t)v282, v284);
  v285 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v286 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v281 + 4), v286, v285);
  uint64_t v104 = "mps.scatter";
  v287 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.scatter", (const unsigned __int8 *)0xB, a1);
  if (!v288) {
    goto LABEL_242;
  }
  v289 = v287;
  v290 = (void *)v287[2];
  if (v290 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v287[1];
    uint64_t v291 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v290 = (void *)v289[2];
  }
  else
  {
    uint64_t v291 = v287[3];
  }
  uint64_t v292 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v291, (uint64_t)v290, v292);
  v293 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v294 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v289 + 4), v294, v293);
  int v87 = "mps.gather";
  v295 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.gather", (const unsigned __int8 *)0xA, a1);
  if (!v296)
  {
LABEL_246:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v87;
    uint64_t v496 = 10;
    goto LABEL_262;
  }
  v297 = v295;
  v298 = (void *)v295[2];
  if (v298 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v295[1];
    uint64_t v299 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v298 = (void *)v297[2];
  }
  else
  {
    uint64_t v299 = v295[3];
  }
  uint64_t v300 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v299, (uint64_t)v298, v300);
  v301 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v302 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v297 + 4), v302, v301);
  uint64_t v46 = "mps.slice";
  v303 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.slice", (const unsigned __int8 *)9, a1);
  if (!v304) {
    goto LABEL_244;
  }
  v305 = v303;
  v306 = (void *)v303[2];
  if (v306 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v303[1];
    uint64_t v307 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v306 = (void *)v305[2];
  }
  else
  {
    uint64_t v307 = v303[3];
  }
  uint64_t v308 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v307, (uint64_t)v306, v308);
  v309 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v310 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v305 + 4), v310, v309);
  unint64_t v146 = "mps.strided_slice";
  v311 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.strided_slice", (const unsigned __int8 *)0x11, a1);
  if (!v312)
  {
LABEL_243:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v146;
    uint64_t v496 = 17;
    goto LABEL_262;
  }
  v313 = v311;
  v314 = (void *)v311[2];
  if (v314 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v311[1];
    uint64_t v315 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v314 = (void *)v313[2];
  }
  else
  {
    uint64_t v315 = v311[3];
  }
  uint64_t v316 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v315, (uint64_t)v314, v316);
  v317 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v318 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v313 + 4), v318, v317);
  uint64_t v37 = "mps.crop";
  v319 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.crop", (const unsigned __int8 *)8, a1);
  if (!v320) {
    goto LABEL_245;
  }
  v321 = v319;
  v322 = (void *)v319[2];
  if (v322 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v319[1];
    uint64_t v323 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v322 = (void *)v321[2];
  }
  else
  {
    uint64_t v323 = v319[3];
  }
  uint64_t v324 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v323, (uint64_t)v322, v324);
  v325 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v326 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v321 + 4), v326, v325);
  int v87 = "mps.concat";
  v327 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.concat", (const unsigned __int8 *)0xA, a1);
  if (!v328) {
    goto LABEL_246;
  }
  v329 = v327;
  v330 = (void *)v327[2];
  if (v330 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v327[1];
    uint64_t v331 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v330 = (void *)v329[2];
  }
  else
  {
    uint64_t v331 = v327[3];
  }
  uint64_t v332 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v331, (uint64_t)v330, v332);
  v333 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v334 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v329 + 4), v334, v333);
  uint64_t v104 = "mps.reshape";
  v335 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, a1);
  if (!v336) {
    goto LABEL_242;
  }
  v337 = v335;
  v338 = (void *)v335[2];
  if (v338 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v335[1];
    uint64_t v339 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v338 = (void *)v337[2];
  }
  else
  {
    uint64_t v339 = v335[3];
  }
  uint64_t v340 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v339, (uint64_t)v338, v340);
  v341 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v342 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v337 + 4), v342, v341);
  v343 = "mps.get_coordinates";
  v344 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.get_coordinates", (const unsigned __int8 *)0x13, a1);
  if (!v345) {
    goto LABEL_255;
  }
  v346 = v344;
  v347 = (void *)v344[2];
  if (v347 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v344[1];
    uint64_t v348 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v347 = (void *)v346[2];
  }
  else
  {
    uint64_t v348 = v344[3];
  }
  uint64_t v349 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v348, (uint64_t)v347, v349);
  v350 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v351 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v346 + 4), v351, v350);
  v352 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.init_random_philox_state", (const unsigned __int8 *)0x1C, a1);
  if (!v353)
  {
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.init_random_philox_state";
    uint64_t v496 = 28;
    goto LABEL_262;
  }
  v354 = v352;
  v355 = (void *)v352[2];
  if (v355 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v352[1];
    uint64_t v356 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v355 = (void *)v354[2];
  }
  else
  {
    uint64_t v356 = v352[3];
  }
  uint64_t v357 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v356, (uint64_t)v355, v357);
  v358 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v359 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v354 + 4), v359, v358);
  uint64_t v28 = "mps.pad";
  v360 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.pad", (const unsigned __int8 *)7, a1);
  if (!v361)
  {
LABEL_250:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v28;
    uint64_t v496 = 7;
    goto LABEL_262;
  }
  v362 = v360;
  v363 = (void *)v360[2];
  if (v363 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v360[1];
    uint64_t v364 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v363 = (void *)v362[2];
  }
  else
  {
    uint64_t v364 = v360[3];
  }
  uint64_t v365 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v364, (uint64_t)v363, v365);
  v366 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v367 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v362 + 4), v367, v366);
  uint64_t v37 = "mps.cast";
  v368 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.cast", (const unsigned __int8 *)8, a1);
  if (!v369) {
    goto LABEL_245;
  }
  v370 = v368;
  v371 = (void *)v368[2];
  if (v371 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v368[1];
    uint64_t v372 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v371 = (void *)v370[2];
  }
  else
  {
    uint64_t v372 = v368[3];
  }
  uint64_t v373 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v372, (uint64_t)v371, v373);
  v374 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v375 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v370 + 4), v375, v374);
  uint64_t v179 = "mps.reinterpret_cast";
  v376 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reinterpret_cast", (const unsigned __int8 *)0x14, a1);
  if (!v377)
  {
LABEL_251:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v179;
    uint64_t v496 = 20;
    goto LABEL_262;
  }
  v378 = v376;
  v379 = (void *)v376[2];
  if (v379 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v376[1];
    uint64_t v380 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v379 = (void *)v378[2];
  }
  else
  {
    uint64_t v380 = v376[3];
  }
  uint64_t v381 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v380, (uint64_t)v379, v381);
  v382 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v383 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v378 + 4), v383, v382);
  uint64_t v46 = "mps.shape";
  v384 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.shape", (const unsigned __int8 *)9, a1);
  if (!v385) {
    goto LABEL_244;
  }
  v386 = v384;
  v387 = (void *)v384[2];
  if (v387 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v384[1];
    uint64_t v388 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v387 = (void *)v386[2];
  }
  else
  {
    uint64_t v388 = v384[3];
  }
  uint64_t v389 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v388, (uint64_t)v387, v389);
  v390 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v391 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v386 + 4), v391, v390);
  uint64_t v37 = "mps.rank";
  v392 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.rank", (const unsigned __int8 *)8, a1);
  if (!v393) {
    goto LABEL_245;
  }
  v394 = v392;
  v395 = (void *)v392[2];
  if (v395 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v392[1];
    uint64_t v396 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v395 = (void *)v394[2];
  }
  else
  {
    uint64_t v396 = v392[3];
  }
  uint64_t v397 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v396, (uint64_t)v395, v397);
  v398 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v399 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v394 + 4), v399, v398);
  uint64_t v37 = "mps.size";
  v400 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.size", (const unsigned __int8 *)8, a1);
  if (!v401)
  {
LABEL_245:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v37;
    uint64_t v496 = 8;
    goto LABEL_262;
  }
  v402 = v400;
  v403 = (void *)v400[2];
  if (v403 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v400[1];
    uint64_t v404 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v403 = (void *)v402[2];
  }
  else
  {
    uint64_t v404 = v400[3];
  }
  uint64_t v405 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v404, (uint64_t)v403, v405);
  v406 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v407 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v402 + 4), v407, v406);
  uint64_t v212 = "mps.dimension_size";
  v408 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dimension_size", (const unsigned __int8 *)0x12, a1);
  if (!v409) {
    goto LABEL_247;
  }
  v410 = v408;
  v411 = (void *)v408[2];
  if (v411 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v408[1];
    uint64_t v412 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v411 = (void *)v410[2];
  }
  else
  {
    uint64_t v412 = v408[3];
  }
  uint64_t v413 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v412, (uint64_t)v411, v413);
  v414 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v415 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v410 + 4), v415, v414);
  v246 = "mps.dynamic_shape_cast";
  v416 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dynamic_shape_cast", (const unsigned __int8 *)0x16, a1);
  if (!v417)
  {
LABEL_253:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v246;
    uint64_t v496 = 22;
    goto LABEL_262;
  }
  v418 = v416;
  v419 = (void *)v416[2];
  if (v419 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v416[1];
    uint64_t v420 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v419 = (void *)v418[2];
  }
  else
  {
    uint64_t v420 = v416[3];
  }
  uint64_t v421 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v420, (uint64_t)v419, v421);
  v422 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v423 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v418 + 4), v423, v422);
  v229 = "mps.broadcast_to";
  v424 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.broadcast_to", (const unsigned __int8 *)0x10, a1);
  if (!v425)
  {
LABEL_254:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v229;
    uint64_t v496 = 16;
    goto LABEL_262;
  }
  v426 = v424;
  v427 = (void *)v424[2];
  if (v427 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v424[1];
    uint64_t v428 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v427 = (void *)v426[2];
  }
  else
  {
    uint64_t v428 = v424[3];
  }
  uint64_t v429 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v428, (uint64_t)v427, v429);
  v430 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v431 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v426 + 4), v431, v430);
  v432 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.broadcast_gradient_args", (const unsigned __int8 *)0x1B, a1);
  if (!v433)
  {
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.broadcast_gradient_args";
    uint64_t v496 = 27;
    goto LABEL_262;
  }
  v434 = v432;
  v435 = (void *)v432[2];
  if (v435 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v432[1];
    uint64_t v436 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v435 = (void *)v434[2];
  }
  else
  {
    uint64_t v436 = v432[3];
  }
  uint64_t v437 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v436, (uint64_t)v435, v437);
  v438 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v439 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v434 + 4), v439, v438);
  uint64_t v212 = "mps.reduction_prod";
  v440 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_prod", (const unsigned __int8 *)0x12, a1);
  if (!v441) {
    goto LABEL_247;
  }
  v442 = v440;
  v443 = (void *)v440[2];
  if (v443 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v440[1];
    uint64_t v444 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v443 = (void *)v442[2];
  }
  else
  {
    uint64_t v444 = v440[3];
  }
  uint64_t v445 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v444, (uint64_t)v443, v445);
  v446 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v447 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v442 + 4), v447, v446);
  uint64_t v104 = "mps.conv_2d";
  v448 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.conv_2d", (const unsigned __int8 *)0xB, a1);
  if (!v449)
  {
LABEL_242:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v104;
    uint64_t v496 = 11;
    goto LABEL_262;
  }
  v450 = v448;
  v451 = (void *)v448[2];
  if (v451 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v448[1];
    uint64_t v452 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v451 = (void *)v450[2];
  }
  else
  {
    uint64_t v452 = v448[3];
  }
  uint64_t v453 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v452, (uint64_t)v451, v453);
  v454 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v455 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v450 + 4), v455, v454);
  v343 = "mps.type_constraint";
  v456 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.type_constraint", (const unsigned __int8 *)0x13, a1);
  if (!v457)
  {
LABEL_255:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v343;
    uint64_t v496 = 19;
    goto LABEL_262;
  }
  v458 = v456;
  v459 = (void *)v456[2];
  if (v459 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v456[1];
    uint64_t v460 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v459 = (void *)v458[2];
  }
  else
  {
    uint64_t v460 = v456[3];
  }
  uint64_t v461 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v460, (uint64_t)v459, v461);
  v462 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v463 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v458 + 4), v463, v462);
  unint64_t v129 = "mps.real_part";
  v464 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.real_part", (const unsigned __int8 *)0xD, a1);
  if (!v465) {
    goto LABEL_248;
  }
  v466 = v464;
  v467 = (void *)v464[2];
  if (v467 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v464[1];
    uint64_t v468 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v467 = (void *)v466[2];
  }
  else
  {
    uint64_t v468 = v464[3];
  }
  uint64_t v469 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v468, (uint64_t)v467, v469);
  v470 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v471 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v466 + 4), v471, v470);
  uint64_t v212 = "mps.imaginary_part";
  v472 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.imaginary_part", (const unsigned __int8 *)0x12, a1);
  if (!v473)
  {
LABEL_247:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v212;
    uint64_t v496 = 18;
    goto LABEL_262;
  }
  v474 = v472;
  v475 = (void *)v472[2];
  if (v475 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v472[1];
    uint64_t v476 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v475 = (void *)v474[2];
  }
  else
  {
    uint64_t v476 = v472[3];
  }
  uint64_t v477 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v476, (uint64_t)v475, v477);
  v478 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v479 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v474 + 4), v479, v478);
  unint64_t v129 = "mps.conjugate";
  v480 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.conjugate", (const unsigned __int8 *)0xD, a1);
  if (!v481)
  {
LABEL_248:
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v129;
    uint64_t v496 = 13;
    goto LABEL_262;
  }
  v482 = v480;
  v483 = (void *)v480[2];
  if (v483 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v480[1];
    uint64_t v484 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v483 = (void *)v482[2];
  }
  else
  {
    uint64_t v484 = v480[3];
  }
  uint64_t v485 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v484, (uint64_t)v483, v485);
  v486 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v487 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v482 + 4), v487, v486);
  v488 = (void *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.non_zero", (const unsigned __int8 *)0xC, a1);
  if (!v489)
  {
    __int16 v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.non_zero";
    goto LABEL_261;
  }
  v490 = v488;
  v491 = (void *)v488[2];
  if (v491 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v488[1];
    uint64_t v492 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v491 = (void *)v490[2];
  }
  else
  {
    uint64_t v492 = v488[3];
  }
  uint64_t v493 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v492, (uint64_t)v491, v493);
  v494 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  unint64_t v495 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v490 + 4), v495, v494);
}

uint64_t mlir::TypeID::get<mlir::ExternalFoldInterface>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      char v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ExternalFoldInterface]";
      unint64_t v11 = 77;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::ExternalFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[416];
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::ReciprocalSquareRootOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (!*a3)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    return 0;
  }
  uint64_t v42 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v43 = v3;
  if (!v42) {
    return 0;
  }
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v42);
  uint64_t v5 = (uint64_t)Type;
  if (!Type) {
    goto LABEL_14;
  }
  uint64_t v6 = *Type;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  char v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    char v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_14:
  }
    uint64_t v15 = 0;
  uint64_t v40 = v5;
  uint64_t v41 = v15;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v40)) {
    return 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v38);
  v37[0] = 0;
  v37[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v41, (uint64_t)v37, (uint64_t)v36);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v35, 6, 0.0);
  uint64_t v16 = operator new(8uLL);
  unsigned int v32 = v16;
  *uint64_t v16 = v38;
  uint64_t v33 = v16 + 1;
  uint64_t v34 = v16 + 1;
  uint64_t v17 = operator new(8uLL);
  unint64_t v29 = v17;
  void *v17 = v36;
  char v30 = v17 + 1;
  unint64_t v31 = v17 + 1;
  unint64_t v18 = operator new(8uLL);
  uint64_t v26 = v18;
  *unint64_t v18 = 0;
  unint64_t v27 = v18 + 1;
  uint64_t v28 = v18 + 1;
  uint64_t v19 = operator new(8uLL);
  __p = v19;
  *uint64_t v19 = 0;
  uint64_t v24 = v19 + 1;
  uint64_t v25 = v19 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v35, (uint64_t *)&v32, (uint64_t **)&v29, (uint64_t)&v26, (uint64_t)&__p, 0, v39, (uint64_t)v35);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    char v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  unint64_t ElementsAttr = v37[0];
  if (!v37[0]) {
    unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v36, 0, 0);
  }
  unint64_t v21 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v36);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v38);
  return v21;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::ReciprocalSquareRootOp>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::ReciprocalOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (!*a3)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    return 0;
  }
  uint64_t v42 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v43 = v3;
  if (!v42) {
    return 0;
  }
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v42);
  uint64_t v5 = (uint64_t)Type;
  if (!Type) {
    goto LABEL_14;
  }
  uint64_t v6 = *Type;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  char v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    char v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_14:
  }
    uint64_t v15 = 0;
  uint64_t v40 = v5;
  uint64_t v41 = v15;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v40)) {
    return 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v38);
  v37[0] = 0;
  v37[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v41, (uint64_t)v37, (uint64_t)v36);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v35, 12, 0.0);
  uint64_t v16 = operator new(8uLL);
  unsigned int v32 = v16;
  *uint64_t v16 = v38;
  uint64_t v33 = v16 + 1;
  uint64_t v34 = v16 + 1;
  uint64_t v17 = operator new(8uLL);
  unint64_t v29 = v17;
  void *v17 = v36;
  char v30 = v17 + 1;
  unint64_t v31 = v17 + 1;
  unint64_t v18 = operator new(8uLL);
  uint64_t v26 = v18;
  *unint64_t v18 = 0;
  unint64_t v27 = v18 + 1;
  uint64_t v28 = v18 + 1;
  uint64_t v19 = operator new(8uLL);
  __p = v19;
  *uint64_t v19 = 0;
  uint64_t v24 = v19 + 1;
  uint64_t v25 = v19 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v35, (uint64_t *)&v32, (uint64_t **)&v29, (uint64_t)&v26, (uint64_t)&__p, 0, v39, (uint64_t)v35);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    char v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  unint64_t ElementsAttr = v37[0];
  if (!v37[0]) {
    unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v36, 0, 0);
  }
  unint64_t v21 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v36);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v38);
  return v21;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::ReciprocalOp>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::NegativeOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (!*a3)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    return 0;
  }
  uint64_t v42 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v43 = v3;
  if (!v42) {
    return 0;
  }
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v42);
  uint64_t v5 = (uint64_t)Type;
  if (!Type) {
    goto LABEL_14;
  }
  uint64_t v6 = *Type;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  char v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    char v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_14:
  }
    uint64_t v15 = 0;
  uint64_t v40 = v5;
  uint64_t v41 = v15;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v40)) {
    return 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v38);
  v37[0] = 0;
  v37[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v41, (uint64_t)v37, (uint64_t)v36);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v35, 9, 0.0);
  uint64_t v16 = operator new(8uLL);
  unsigned int v32 = v16;
  *uint64_t v16 = v38;
  uint64_t v33 = v16 + 1;
  uint64_t v34 = v16 + 1;
  uint64_t v17 = operator new(8uLL);
  unint64_t v29 = v17;
  void *v17 = v36;
  char v30 = v17 + 1;
  unint64_t v31 = v17 + 1;
  unint64_t v18 = operator new(8uLL);
  uint64_t v26 = v18;
  *unint64_t v18 = 0;
  unint64_t v27 = v18 + 1;
  uint64_t v28 = v18 + 1;
  uint64_t v19 = operator new(8uLL);
  __p = v19;
  *uint64_t v19 = 0;
  uint64_t v24 = v19 + 1;
  uint64_t v25 = v19 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v35, (uint64_t *)&v32, (uint64_t **)&v29, (uint64_t)&v26, (uint64_t)&__p, 0, v39, (uint64_t)v35);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    char v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  unint64_t ElementsAttr = v37[0];
  if (!v37[0]) {
    unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v36, 0, 0);
  }
  unint64_t v21 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v36);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v38);
  return v21;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::NegativeOp>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::NotOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (!*a3)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    return 0;
  }
  uint64_t v42 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v43 = v3;
  if (!v42) {
    return 0;
  }
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v42);
  uint64_t v5 = (uint64_t)Type;
  if (!Type) {
    goto LABEL_14;
  }
  uint64_t v6 = *Type;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  char v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    char v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_14:
  }
    uint64_t v15 = 0;
  uint64_t v40 = v5;
  uint64_t v41 = v15;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v40)) {
    return 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v38);
  v37[0] = 0;
  v37[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v41, (uint64_t)v37, (uint64_t)v36);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v35, 10, 0.0);
  uint64_t v16 = operator new(8uLL);
  unsigned int v32 = v16;
  *uint64_t v16 = v38;
  uint64_t v33 = v16 + 1;
  uint64_t v34 = v16 + 1;
  uint64_t v17 = operator new(8uLL);
  unint64_t v29 = v17;
  void *v17 = v36;
  char v30 = v17 + 1;
  unint64_t v31 = v17 + 1;
  unint64_t v18 = operator new(8uLL);
  uint64_t v26 = v18;
  *unint64_t v18 = 0;
  unint64_t v27 = v18 + 1;
  uint64_t v28 = v18 + 1;
  uint64_t v19 = operator new(8uLL);
  __p = v19;
  *uint64_t v19 = 0;
  uint64_t v24 = v19 + 1;
  uint64_t v25 = v19 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v35, (uint64_t *)&v32, (uint64_t **)&v29, (uint64_t)&v26, (uint64_t)&__p, 0, v39, (uint64_t)v35);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    char v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  unint64_t ElementsAttr = v37[0];
  if (!v37[0]) {
    unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v36, 0, 0);
  }
  unint64_t v21 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v36);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v38);
  return v21;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::NotOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::CeilOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v40[0] = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v40);
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v40) | 4;
  }
  if (!*a3)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    return 0;
  }
  uint64_t v43 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v44 = v5;
  if (!v43) {
    return 0;
  }
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v43);
  uint64_t v8 = (uint64_t)Type;
  if (!Type) {
    goto LABEL_16;
  }
  uint64_t v9 = *Type;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_16;
  }
  char v12 = *(void **)(v9 + 8);
  unint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      char v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_16:
  }
    uint64_t v18 = 0;
  uint64_t v41 = v8;
  uint64_t v42 = v18;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v41)) {
    return 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v40);
  v39[0] = 0;
  v39[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v41, v42, (uint64_t)v39, (uint64_t)v38);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v37, 7, 0.0);
  uint64_t v19 = operator new(8uLL);
  uint64_t v34 = v19;
  *uint64_t v19 = v40;
  int32x2_t v35 = v19 + 1;
  unint64_t v36 = v19 + 1;
  uint64_t v20 = operator new(8uLL);
  unint64_t v31 = v20;
  *uint64_t v20 = v38;
  unsigned int v32 = v20 + 1;
  uint64_t v33 = v20 + 1;
  unint64_t v21 = operator new(8uLL);
  uint64_t v28 = v21;
  *unint64_t v21 = 0;
  unint64_t v29 = v21 + 1;
  char v30 = v21 + 1;
  uint64_t v22 = operator new(8uLL);
  __p = v22;
  void *v22 = 0;
  uint64_t v26 = v22 + 1;
  unint64_t v27 = v22 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v37, (uint64_t *)&v34, (uint64_t **)&v31, (uint64_t)&v28, (uint64_t)&__p, 0, v40[2], (uint64_t)v37);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    unint64_t v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    unsigned int v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    int32x2_t v35 = v34;
    operator delete(v34);
  }
  unint64_t ElementsAttr = v39[0];
  if (!v39[0]) {
    unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v38, 0, 0);
  }
  unint64_t v6 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v38);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v40);
  return v6;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::CeilOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::FloorOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v40[0] = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v40);
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v40) | 4;
  }
  if (!*a3)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    return 0;
  }
  uint64_t v43 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v44 = v5;
  if (!v43) {
    return 0;
  }
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v43);
  uint64_t v8 = (uint64_t)Type;
  if (!Type) {
    goto LABEL_16;
  }
  uint64_t v9 = *Type;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_16;
  }
  char v12 = *(void **)(v9 + 8);
  unint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      char v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_16:
  }
    uint64_t v18 = 0;
  uint64_t v41 = v8;
  uint64_t v42 = v18;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v41)) {
    return 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v40);
  v39[0] = 0;
  v39[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v41, v42, (uint64_t)v39, (uint64_t)v38);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v37, 8, 0.0);
  uint64_t v19 = operator new(8uLL);
  uint64_t v34 = v19;
  *uint64_t v19 = v40;
  int32x2_t v35 = v19 + 1;
  unint64_t v36 = v19 + 1;
  uint64_t v20 = operator new(8uLL);
  unint64_t v31 = v20;
  *uint64_t v20 = v38;
  unsigned int v32 = v20 + 1;
  uint64_t v33 = v20 + 1;
  unint64_t v21 = operator new(8uLL);
  uint64_t v28 = v21;
  *unint64_t v21 = 0;
  unint64_t v29 = v21 + 1;
  char v30 = v21 + 1;
  uint64_t v22 = operator new(8uLL);
  __p = v22;
  void *v22 = 0;
  uint64_t v26 = v22 + 1;
  unint64_t v27 = v22 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v37, (uint64_t *)&v34, (uint64_t **)&v31, (uint64_t)&v28, (uint64_t)&__p, 0, v40[2], (uint64_t)v37);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    unint64_t v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    unsigned int v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    int32x2_t v35 = v34;
    operator delete(v34);
  }
  unint64_t ElementsAttr = v39[0];
  if (!v39[0]) {
    unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v38, 0, 0);
  }
  unint64_t v6 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v38);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v40);
  return v6;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::FloorOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::RoundOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v40[0] = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v40);
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v40) | 4;
  }
  if (!*a3)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    return 0;
  }
  uint64_t v43 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v44 = v5;
  if (!v43) {
    return 0;
  }
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v43);
  uint64_t v8 = (uint64_t)Type;
  if (!Type) {
    goto LABEL_16;
  }
  uint64_t v9 = *Type;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_16;
  }
  char v12 = *(void **)(v9 + 8);
  unint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      char v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_16:
  }
    uint64_t v18 = 0;
  uint64_t v41 = v8;
  uint64_t v42 = v18;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v41)) {
    return 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v40);
  v39[0] = 0;
  v39[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v41, v42, (uint64_t)v39, (uint64_t)v38);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v37, 11, 0.0);
  uint64_t v19 = operator new(8uLL);
  uint64_t v34 = v19;
  *uint64_t v19 = v40;
  int32x2_t v35 = v19 + 1;
  unint64_t v36 = v19 + 1;
  uint64_t v20 = operator new(8uLL);
  unint64_t v31 = v20;
  *uint64_t v20 = v38;
  unsigned int v32 = v20 + 1;
  uint64_t v33 = v20 + 1;
  unint64_t v21 = operator new(8uLL);
  uint64_t v28 = v21;
  *unint64_t v21 = 0;
  unint64_t v29 = v21 + 1;
  char v30 = v21 + 1;
  uint64_t v22 = operator new(8uLL);
  __p = v22;
  void *v22 = 0;
  uint64_t v26 = v22 + 1;
  unint64_t v27 = v22 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v37, (uint64_t *)&v34, (uint64_t **)&v31, (uint64_t)&v28, (uint64_t)&__p, 0, v40[2], (uint64_t)v37);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    unint64_t v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    unsigned int v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    int32x2_t v35 = v34;
    operator delete(v34);
  }
  unint64_t ElementsAttr = v39[0];
  if (!v39[0]) {
    unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v38, 0, 0);
  }
  unint64_t v6 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v38);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v40);
  return v6;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::RoundOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::AddOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v79 = a2;
  if (*a3)
  {
    uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  unint64_t v6 = a3[1];
  if (v6) {
    unint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    uint64_t v9 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v10 = *v9;
    unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v12 = *(unsigned int *)(v10 + 16);
    if (!v12) {
      goto LABEL_18;
    }
    unint64_t v13 = *(void **)(v10 + 8);
    unint64_t v14 = &v13[2 * v12];
    do
    {
      unint64_t v15 = v12 >> 1;
      uint64_t v16 = &v13[2 * (v12 >> 1)];
      unint64_t v18 = *v16;
      unint64_t v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v12 = v15;
      }
    }
    while (v12);
    if (v13 != v14 && *v13 == v11) {
      uint64_t v19 = v13[1];
    }
    else {
LABEL_18:
    }
      uint64_t v19 = 0;
    uint64_t v75 = v9;
    uint64_t v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    uint64_t ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision(v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80);
      mlir::mps::CPUNDArray::CPUNDArray(v73);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        if (!v21) {
          goto LABEL_37;
        }
        uint64_t v22 = 8 * v21;
        while (*Shape != 0x8000000000000000)
        {
          ++Shape;
          v22 -= 8;
          if (!v22) {
            goto LABEL_37;
          }
        }
      }
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      uint64_t v24 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        uint64_t ElementTypeWithLargestPrecision = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v73);
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v80);
        return ElementTypeWithLargestPrecision;
      }
      uint64_t v26 = BroadcastedType;
      uint64_t v27 = *BroadcastedType;
      unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v29 = *(unsigned int *)(v27 + 16);
      if (!v29) {
        goto LABEL_35;
      }
      char v30 = *(void **)(v27 + 8);
      unint64_t v31 = &v30[2 * v29];
      do
      {
        unint64_t v32 = v29 >> 1;
        uint64_t v33 = &v30[2 * (v29 >> 1)];
        unint64_t v35 = *v33;
        uint64_t v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28) {
          char v30 = v34;
        }
        else {
          unint64_t v29 = v32;
        }
      }
      while (v29);
      if (v30 != v31 && *v30 == v28) {
        uint64_t v36 = v30[1];
      }
      else {
LABEL_35:
      }
        uint64_t v36 = 0;
      uint64_t v75 = v26;
      uint64_t v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        uint64_t v40 = (uint64_t)v75;
        uint64_t v50 = v76;
      }
      else
      {
        uint64_t v37 = mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        uint64_t v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        uint64_t v40 = (uint64_t)v39;
        if (!v39) {
          goto LABEL_47;
        }
        uint64_t v41 = *v39;
        unint64_t v42 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v43 = *(unsigned int *)(v41 + 16);
        if (!v43) {
          goto LABEL_47;
        }
        uint64_t v44 = *(void **)(v41 + 8);
        unint64_t v45 = &v44[2 * v43];
        do
        {
          unint64_t v46 = v43 >> 1;
          uint64_t v47 = &v44[2 * (v43 >> 1)];
          unint64_t v49 = *v47;
          char v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42) {
            uint64_t v44 = v48;
          }
          else {
            unint64_t v43 = v46;
          }
        }
        while (v43);
        if (v44 != v45 && *v44 == v42) {
          uint64_t v50 = v44[1];
        }
        else {
LABEL_47:
        }
          uint64_t v50 = 0;
        uint64_t v75 = (void *)v40;
        uint64_t v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 0);
      if (v81 <= v74) {
        int v51 = v74;
      }
      else {
        int v51 = v81;
      }
      uint64_t v52 = operator new(0x10uLL);
      uint64_t v68 = v52 + 2;
      int v69 = v52 + 2;
      *uint64_t v52 = v80;
      v52[1] = v73;
      uint64_t v67 = v52;
      uint64_t v53 = operator new(8uLL);
      char v64 = v53;
      *uint64_t v53 = v71;
      uint64_t v65 = v53 + 1;
      unint64_t v66 = v53 + 1;
      unint64_t v54 = operator new(0x10uLL);
      unint64_t v62 = v54 + 2;
      uint64_t v63 = v54 + 2;
      *unint64_t v54 = 0;
      v54[1] = 0;
      uint64_t v61 = v54;
      uint64_t v55 = operator new(8uLL);
      __p = v55;
      *uint64_t v55 = 0;
      uint64_t v59 = v55 + 1;
      uint64_t v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        uint64_t v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        unint64_t v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        uint64_t v68 = v67;
        operator delete(v67);
      }
      unint64_t ElementsAttr = v72[0];
      if (!v72[0]) {
        unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      }
      uint64_t ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::AddOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::SubtractOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v79 = a2;
  if (*a3)
  {
    uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  unint64_t v6 = a3[1];
  if (v6) {
    unint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    uint64_t v9 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v10 = *v9;
    unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v12 = *(unsigned int *)(v10 + 16);
    if (!v12) {
      goto LABEL_18;
    }
    unint64_t v13 = *(void **)(v10 + 8);
    unint64_t v14 = &v13[2 * v12];
    do
    {
      unint64_t v15 = v12 >> 1;
      uint64_t v16 = &v13[2 * (v12 >> 1)];
      unint64_t v18 = *v16;
      unint64_t v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v12 = v15;
      }
    }
    while (v12);
    if (v13 != v14 && *v13 == v11) {
      uint64_t v19 = v13[1];
    }
    else {
LABEL_18:
    }
      uint64_t v19 = 0;
    uint64_t v75 = v9;
    uint64_t v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    uint64_t ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision(v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80);
      mlir::mps::CPUNDArray::CPUNDArray(v73);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        if (!v21) {
          goto LABEL_37;
        }
        uint64_t v22 = 8 * v21;
        while (*Shape != 0x8000000000000000)
        {
          ++Shape;
          v22 -= 8;
          if (!v22) {
            goto LABEL_37;
          }
        }
      }
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      uint64_t v24 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        uint64_t ElementTypeWithLargestPrecision = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v73);
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v80);
        return ElementTypeWithLargestPrecision;
      }
      uint64_t v26 = BroadcastedType;
      uint64_t v27 = *BroadcastedType;
      unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v29 = *(unsigned int *)(v27 + 16);
      if (!v29) {
        goto LABEL_35;
      }
      char v30 = *(void **)(v27 + 8);
      unint64_t v31 = &v30[2 * v29];
      do
      {
        unint64_t v32 = v29 >> 1;
        uint64_t v33 = &v30[2 * (v29 >> 1)];
        unint64_t v35 = *v33;
        uint64_t v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28) {
          char v30 = v34;
        }
        else {
          unint64_t v29 = v32;
        }
      }
      while (v29);
      if (v30 != v31 && *v30 == v28) {
        uint64_t v36 = v30[1];
      }
      else {
LABEL_35:
      }
        uint64_t v36 = 0;
      uint64_t v75 = v26;
      uint64_t v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        uint64_t v40 = (uint64_t)v75;
        uint64_t v50 = v76;
      }
      else
      {
        uint64_t v37 = mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        uint64_t v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        uint64_t v40 = (uint64_t)v39;
        if (!v39) {
          goto LABEL_47;
        }
        uint64_t v41 = *v39;
        unint64_t v42 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v43 = *(unsigned int *)(v41 + 16);
        if (!v43) {
          goto LABEL_47;
        }
        uint64_t v44 = *(void **)(v41 + 8);
        unint64_t v45 = &v44[2 * v43];
        do
        {
          unint64_t v46 = v43 >> 1;
          uint64_t v47 = &v44[2 * (v43 >> 1)];
          unint64_t v49 = *v47;
          char v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42) {
            uint64_t v44 = v48;
          }
          else {
            unint64_t v43 = v46;
          }
        }
        while (v43);
        if (v44 != v45 && *v44 == v42) {
          uint64_t v50 = v44[1];
        }
        else {
LABEL_47:
        }
          uint64_t v50 = 0;
        uint64_t v75 = (void *)v40;
        uint64_t v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 1);
      if (v81 <= v74) {
        int v51 = v74;
      }
      else {
        int v51 = v81;
      }
      uint64_t v52 = operator new(0x10uLL);
      uint64_t v68 = v52 + 2;
      int v69 = v52 + 2;
      *uint64_t v52 = v80;
      v52[1] = v73;
      uint64_t v67 = v52;
      uint64_t v53 = operator new(8uLL);
      char v64 = v53;
      *uint64_t v53 = v71;
      uint64_t v65 = v53 + 1;
      unint64_t v66 = v53 + 1;
      unint64_t v54 = operator new(0x10uLL);
      unint64_t v62 = v54 + 2;
      uint64_t v63 = v54 + 2;
      *unint64_t v54 = 0;
      v54[1] = 0;
      uint64_t v61 = v54;
      uint64_t v55 = operator new(8uLL);
      __p = v55;
      *uint64_t v55 = 0;
      uint64_t v59 = v55 + 1;
      uint64_t v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        uint64_t v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        unint64_t v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        uint64_t v68 = v67;
        operator delete(v67);
      }
      unint64_t ElementsAttr = v72[0];
      if (!v72[0]) {
        unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      }
      uint64_t ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::SubtractOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MultiplyOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v79 = a2;
  if (*a3)
  {
    uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  unint64_t v6 = a3[1];
  if (v6) {
    unint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    uint64_t v9 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v10 = *v9;
    unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v12 = *(unsigned int *)(v10 + 16);
    if (!v12) {
      goto LABEL_18;
    }
    unint64_t v13 = *(void **)(v10 + 8);
    unint64_t v14 = &v13[2 * v12];
    do
    {
      unint64_t v15 = v12 >> 1;
      uint64_t v16 = &v13[2 * (v12 >> 1)];
      unint64_t v18 = *v16;
      unint64_t v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v12 = v15;
      }
    }
    while (v12);
    if (v13 != v14 && *v13 == v11) {
      uint64_t v19 = v13[1];
    }
    else {
LABEL_18:
    }
      uint64_t v19 = 0;
    uint64_t v75 = v9;
    uint64_t v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    uint64_t ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision(v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80);
      mlir::mps::CPUNDArray::CPUNDArray(v73);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        if (!v21) {
          goto LABEL_37;
        }
        uint64_t v22 = 8 * v21;
        while (*Shape != 0x8000000000000000)
        {
          ++Shape;
          v22 -= 8;
          if (!v22) {
            goto LABEL_37;
          }
        }
      }
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      uint64_t v24 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        uint64_t ElementTypeWithLargestPrecision = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v73);
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v80);
        return ElementTypeWithLargestPrecision;
      }
      uint64_t v26 = BroadcastedType;
      uint64_t v27 = *BroadcastedType;
      unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v29 = *(unsigned int *)(v27 + 16);
      if (!v29) {
        goto LABEL_35;
      }
      char v30 = *(void **)(v27 + 8);
      unint64_t v31 = &v30[2 * v29];
      do
      {
        unint64_t v32 = v29 >> 1;
        uint64_t v33 = &v30[2 * (v29 >> 1)];
        unint64_t v35 = *v33;
        uint64_t v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28) {
          char v30 = v34;
        }
        else {
          unint64_t v29 = v32;
        }
      }
      while (v29);
      if (v30 != v31 && *v30 == v28) {
        uint64_t v36 = v30[1];
      }
      else {
LABEL_35:
      }
        uint64_t v36 = 0;
      uint64_t v75 = v26;
      uint64_t v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        uint64_t v40 = (uint64_t)v75;
        uint64_t v50 = v76;
      }
      else
      {
        uint64_t v37 = mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        uint64_t v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        uint64_t v40 = (uint64_t)v39;
        if (!v39) {
          goto LABEL_47;
        }
        uint64_t v41 = *v39;
        unint64_t v42 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v43 = *(unsigned int *)(v41 + 16);
        if (!v43) {
          goto LABEL_47;
        }
        uint64_t v44 = *(void **)(v41 + 8);
        unint64_t v45 = &v44[2 * v43];
        do
        {
          unint64_t v46 = v43 >> 1;
          uint64_t v47 = &v44[2 * (v43 >> 1)];
          unint64_t v49 = *v47;
          char v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42) {
            uint64_t v44 = v48;
          }
          else {
            unint64_t v43 = v46;
          }
        }
        while (v43);
        if (v44 != v45 && *v44 == v42) {
          uint64_t v50 = v44[1];
        }
        else {
LABEL_47:
        }
          uint64_t v50 = 0;
        uint64_t v75 = (void *)v40;
        uint64_t v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 2);
      if (v81 <= v74) {
        int v51 = v74;
      }
      else {
        int v51 = v81;
      }
      uint64_t v52 = operator new(0x10uLL);
      uint64_t v68 = v52 + 2;
      int v69 = v52 + 2;
      *uint64_t v52 = v80;
      v52[1] = v73;
      uint64_t v67 = v52;
      uint64_t v53 = operator new(8uLL);
      char v64 = v53;
      *uint64_t v53 = v71;
      uint64_t v65 = v53 + 1;
      unint64_t v66 = v53 + 1;
      unint64_t v54 = operator new(0x10uLL);
      unint64_t v62 = v54 + 2;
      uint64_t v63 = v54 + 2;
      *unint64_t v54 = 0;
      v54[1] = 0;
      uint64_t v61 = v54;
      uint64_t v55 = operator new(8uLL);
      __p = v55;
      *uint64_t v55 = 0;
      uint64_t v59 = v55 + 1;
      uint64_t v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        uint64_t v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        unint64_t v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        uint64_t v68 = v67;
        operator delete(v67);
      }
      unint64_t ElementsAttr = v72[0];
      if (!v72[0]) {
        unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      }
      uint64_t ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MultiplyOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::DivideOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v79 = a2;
  if (*a3)
  {
    uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  unint64_t v6 = a3[1];
  if (v6) {
    unint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    uint64_t v9 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v10 = *v9;
    unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v12 = *(unsigned int *)(v10 + 16);
    if (!v12) {
      goto LABEL_18;
    }
    unint64_t v13 = *(void **)(v10 + 8);
    unint64_t v14 = &v13[2 * v12];
    do
    {
      unint64_t v15 = v12 >> 1;
      uint64_t v16 = &v13[2 * (v12 >> 1)];
      unint64_t v18 = *v16;
      unint64_t v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v12 = v15;
      }
    }
    while (v12);
    if (v13 != v14 && *v13 == v11) {
      uint64_t v19 = v13[1];
    }
    else {
LABEL_18:
    }
      uint64_t v19 = 0;
    uint64_t v75 = v9;
    uint64_t v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    uint64_t ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision(v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80);
      mlir::mps::CPUNDArray::CPUNDArray(v73);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        if (!v21) {
          goto LABEL_37;
        }
        uint64_t v22 = 8 * v21;
        while (*Shape != 0x8000000000000000)
        {
          ++Shape;
          v22 -= 8;
          if (!v22) {
            goto LABEL_37;
          }
        }
      }
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      uint64_t v24 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        uint64_t ElementTypeWithLargestPrecision = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v73);
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v80);
        return ElementTypeWithLargestPrecision;
      }
      uint64_t v26 = BroadcastedType;
      uint64_t v27 = *BroadcastedType;
      unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v29 = *(unsigned int *)(v27 + 16);
      if (!v29) {
        goto LABEL_35;
      }
      char v30 = *(void **)(v27 + 8);
      unint64_t v31 = &v30[2 * v29];
      do
      {
        unint64_t v32 = v29 >> 1;
        uint64_t v33 = &v30[2 * (v29 >> 1)];
        unint64_t v35 = *v33;
        uint64_t v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28) {
          char v30 = v34;
        }
        else {
          unint64_t v29 = v32;
        }
      }
      while (v29);
      if (v30 != v31 && *v30 == v28) {
        uint64_t v36 = v30[1];
      }
      else {
LABEL_35:
      }
        uint64_t v36 = 0;
      uint64_t v75 = v26;
      uint64_t v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        uint64_t v40 = (uint64_t)v75;
        uint64_t v50 = v76;
      }
      else
      {
        uint64_t v37 = mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        uint64_t v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        uint64_t v40 = (uint64_t)v39;
        if (!v39) {
          goto LABEL_47;
        }
        uint64_t v41 = *v39;
        unint64_t v42 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v43 = *(unsigned int *)(v41 + 16);
        if (!v43) {
          goto LABEL_47;
        }
        uint64_t v44 = *(void **)(v41 + 8);
        unint64_t v45 = &v44[2 * v43];
        do
        {
          unint64_t v46 = v43 >> 1;
          uint64_t v47 = &v44[2 * (v43 >> 1)];
          unint64_t v49 = *v47;
          char v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42) {
            uint64_t v44 = v48;
          }
          else {
            unint64_t v43 = v46;
          }
        }
        while (v43);
        if (v44 != v45 && *v44 == v42) {
          uint64_t v50 = v44[1];
        }
        else {
LABEL_47:
        }
          uint64_t v50 = 0;
        uint64_t v75 = (void *)v40;
        uint64_t v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 3);
      if (v81 <= v74) {
        int v51 = v74;
      }
      else {
        int v51 = v81;
      }
      uint64_t v52 = operator new(0x10uLL);
      uint64_t v68 = v52 + 2;
      int v69 = v52 + 2;
      *uint64_t v52 = v80;
      v52[1] = v73;
      uint64_t v67 = v52;
      uint64_t v53 = operator new(8uLL);
      char v64 = v53;
      *uint64_t v53 = v71;
      uint64_t v65 = v53 + 1;
      unint64_t v66 = v53 + 1;
      unint64_t v54 = operator new(0x10uLL);
      unint64_t v62 = v54 + 2;
      uint64_t v63 = v54 + 2;
      *unint64_t v54 = 0;
      v54[1] = 0;
      uint64_t v61 = v54;
      uint64_t v55 = operator new(8uLL);
      __p = v55;
      *uint64_t v55 = 0;
      uint64_t v59 = v55 + 1;
      uint64_t v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        uint64_t v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        unint64_t v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        uint64_t v68 = v67;
        operator delete(v67);
      }
      unint64_t ElementsAttr = v72[0];
      if (!v72[0]) {
        unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      }
      uint64_t ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::DivideOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::ModuloOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v79 = a2;
  if (*a3)
  {
    uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  unint64_t v6 = a3[1];
  if (v6) {
    unint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    uint64_t v9 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v10 = *v9;
    unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v12 = *(unsigned int *)(v10 + 16);
    if (!v12) {
      goto LABEL_18;
    }
    unint64_t v13 = *(void **)(v10 + 8);
    unint64_t v14 = &v13[2 * v12];
    do
    {
      unint64_t v15 = v12 >> 1;
      uint64_t v16 = &v13[2 * (v12 >> 1)];
      unint64_t v18 = *v16;
      unint64_t v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v12 = v15;
      }
    }
    while (v12);
    if (v13 != v14 && *v13 == v11) {
      uint64_t v19 = v13[1];
    }
    else {
LABEL_18:
    }
      uint64_t v19 = 0;
    uint64_t v75 = v9;
    uint64_t v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    uint64_t ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision(v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80);
      mlir::mps::CPUNDArray::CPUNDArray(v73);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        if (!v21) {
          goto LABEL_37;
        }
        uint64_t v22 = 8 * v21;
        while (*Shape != 0x8000000000000000)
        {
          ++Shape;
          v22 -= 8;
          if (!v22) {
            goto LABEL_37;
          }
        }
      }
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      uint64_t v24 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        uint64_t ElementTypeWithLargestPrecision = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v73);
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v80);
        return ElementTypeWithLargestPrecision;
      }
      uint64_t v26 = BroadcastedType;
      uint64_t v27 = *BroadcastedType;
      unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v29 = *(unsigned int *)(v27 + 16);
      if (!v29) {
        goto LABEL_35;
      }
      char v30 = *(void **)(v27 + 8);
      unint64_t v31 = &v30[2 * v29];
      do
      {
        unint64_t v32 = v29 >> 1;
        uint64_t v33 = &v30[2 * (v29 >> 1)];
        unint64_t v35 = *v33;
        uint64_t v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28) {
          char v30 = v34;
        }
        else {
          unint64_t v29 = v32;
        }
      }
      while (v29);
      if (v30 != v31 && *v30 == v28) {
        uint64_t v36 = v30[1];
      }
      else {
LABEL_35:
      }
        uint64_t v36 = 0;
      uint64_t v75 = v26;
      uint64_t v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        uint64_t v40 = (uint64_t)v75;
        uint64_t v50 = v76;
      }
      else
      {
        uint64_t v37 = mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        uint64_t v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        uint64_t v40 = (uint64_t)v39;
        if (!v39) {
          goto LABEL_47;
        }
        uint64_t v41 = *v39;
        unint64_t v42 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v43 = *(unsigned int *)(v41 + 16);
        if (!v43) {
          goto LABEL_47;
        }
        uint64_t v44 = *(void **)(v41 + 8);
        unint64_t v45 = &v44[2 * v43];
        do
        {
          unint64_t v46 = v43 >> 1;
          uint64_t v47 = &v44[2 * (v43 >> 1)];
          unint64_t v49 = *v47;
          char v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42) {
            uint64_t v44 = v48;
          }
          else {
            unint64_t v43 = v46;
          }
        }
        while (v43);
        if (v44 != v45 && *v44 == v42) {
          uint64_t v50 = v44[1];
        }
        else {
LABEL_47:
        }
          uint64_t v50 = 0;
        uint64_t v75 = (void *)v40;
        uint64_t v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 5);
      if (v81 <= v74) {
        int v51 = v74;
      }
      else {
        int v51 = v81;
      }
      uint64_t v52 = operator new(0x10uLL);
      uint64_t v68 = v52 + 2;
      int v69 = v52 + 2;
      *uint64_t v52 = v80;
      v52[1] = v73;
      uint64_t v67 = v52;
      uint64_t v53 = operator new(8uLL);
      char v64 = v53;
      *uint64_t v53 = v71;
      uint64_t v65 = v53 + 1;
      unint64_t v66 = v53 + 1;
      unint64_t v54 = operator new(0x10uLL);
      unint64_t v62 = v54 + 2;
      uint64_t v63 = v54 + 2;
      *unint64_t v54 = 0;
      v54[1] = 0;
      uint64_t v61 = v54;
      uint64_t v55 = operator new(8uLL);
      __p = v55;
      *uint64_t v55 = 0;
      uint64_t v59 = v55 + 1;
      uint64_t v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        uint64_t v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        unint64_t v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        uint64_t v68 = v67;
        operator delete(v67);
      }
      unint64_t ElementsAttr = v72[0];
      if (!v72[0]) {
        unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      }
      uint64_t ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::ModuloOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MinimumOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v79 = a2;
  if (*a3)
  {
    uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  unint64_t v6 = a3[1];
  if (v6) {
    unint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    uint64_t v9 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v10 = *v9;
    unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v12 = *(unsigned int *)(v10 + 16);
    if (!v12) {
      goto LABEL_18;
    }
    unint64_t v13 = *(void **)(v10 + 8);
    unint64_t v14 = &v13[2 * v12];
    do
    {
      unint64_t v15 = v12 >> 1;
      uint64_t v16 = &v13[2 * (v12 >> 1)];
      unint64_t v18 = *v16;
      unint64_t v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v12 = v15;
      }
    }
    while (v12);
    if (v13 != v14 && *v13 == v11) {
      uint64_t v19 = v13[1];
    }
    else {
LABEL_18:
    }
      uint64_t v19 = 0;
    uint64_t v75 = v9;
    uint64_t v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    uint64_t ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision(v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80);
      mlir::mps::CPUNDArray::CPUNDArray(v73);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        if (!v21) {
          goto LABEL_37;
        }
        uint64_t v22 = 8 * v21;
        while (*Shape != 0x8000000000000000)
        {
          ++Shape;
          v22 -= 8;
          if (!v22) {
            goto LABEL_37;
          }
        }
      }
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      uint64_t v24 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        uint64_t ElementTypeWithLargestPrecision = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v73);
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v80);
        return ElementTypeWithLargestPrecision;
      }
      uint64_t v26 = BroadcastedType;
      uint64_t v27 = *BroadcastedType;
      unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v29 = *(unsigned int *)(v27 + 16);
      if (!v29) {
        goto LABEL_35;
      }
      char v30 = *(void **)(v27 + 8);
      unint64_t v31 = &v30[2 * v29];
      do
      {
        unint64_t v32 = v29 >> 1;
        uint64_t v33 = &v30[2 * (v29 >> 1)];
        unint64_t v35 = *v33;
        uint64_t v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28) {
          char v30 = v34;
        }
        else {
          unint64_t v29 = v32;
        }
      }
      while (v29);
      if (v30 != v31 && *v30 == v28) {
        uint64_t v36 = v30[1];
      }
      else {
LABEL_35:
      }
        uint64_t v36 = 0;
      uint64_t v75 = v26;
      uint64_t v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        uint64_t v40 = (uint64_t)v75;
        uint64_t v50 = v76;
      }
      else
      {
        uint64_t v37 = mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        uint64_t v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        uint64_t v40 = (uint64_t)v39;
        if (!v39) {
          goto LABEL_47;
        }
        uint64_t v41 = *v39;
        unint64_t v42 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v43 = *(unsigned int *)(v41 + 16);
        if (!v43) {
          goto LABEL_47;
        }
        uint64_t v44 = *(void **)(v41 + 8);
        unint64_t v45 = &v44[2 * v43];
        do
        {
          unint64_t v46 = v43 >> 1;
          uint64_t v47 = &v44[2 * (v43 >> 1)];
          unint64_t v49 = *v47;
          char v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42) {
            uint64_t v44 = v48;
          }
          else {
            unint64_t v43 = v46;
          }
        }
        while (v43);
        if (v44 != v45 && *v44 == v42) {
          uint64_t v50 = v44[1];
        }
        else {
LABEL_47:
        }
          uint64_t v50 = 0;
        uint64_t v75 = (void *)v40;
        uint64_t v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 15);
      if (v81 <= v74) {
        int v51 = v74;
      }
      else {
        int v51 = v81;
      }
      uint64_t v52 = operator new(0x10uLL);
      uint64_t v68 = v52 + 2;
      int v69 = v52 + 2;
      *uint64_t v52 = v80;
      v52[1] = v73;
      uint64_t v67 = v52;
      uint64_t v53 = operator new(8uLL);
      char v64 = v53;
      *uint64_t v53 = v71;
      uint64_t v65 = v53 + 1;
      unint64_t v66 = v53 + 1;
      unint64_t v54 = operator new(0x10uLL);
      unint64_t v62 = v54 + 2;
      uint64_t v63 = v54 + 2;
      *unint64_t v54 = 0;
      v54[1] = 0;
      uint64_t v61 = v54;
      uint64_t v55 = operator new(8uLL);
      __p = v55;
      *uint64_t v55 = 0;
      uint64_t v59 = v55 + 1;
      uint64_t v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        uint64_t v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        unint64_t v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        uint64_t v68 = v67;
        operator delete(v67);
      }
      unint64_t ElementsAttr = v72[0];
      if (!v72[0]) {
        unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      }
      uint64_t ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MinimumOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MaximumOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v79 = a2;
  if (*a3)
  {
    uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  unint64_t v6 = a3[1];
  if (v6) {
    unint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    uint64_t v9 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v10 = *v9;
    unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v12 = *(unsigned int *)(v10 + 16);
    if (!v12) {
      goto LABEL_18;
    }
    unint64_t v13 = *(void **)(v10 + 8);
    unint64_t v14 = &v13[2 * v12];
    do
    {
      unint64_t v15 = v12 >> 1;
      uint64_t v16 = &v13[2 * (v12 >> 1)];
      unint64_t v18 = *v16;
      unint64_t v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v12 = v15;
      }
    }
    while (v12);
    if (v13 != v14 && *v13 == v11) {
      uint64_t v19 = v13[1];
    }
    else {
LABEL_18:
    }
      uint64_t v19 = 0;
    uint64_t v75 = v9;
    uint64_t v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    uint64_t ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision(v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80);
      mlir::mps::CPUNDArray::CPUNDArray(v73);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        if (!v21) {
          goto LABEL_37;
        }
        uint64_t v22 = 8 * v21;
        while (*Shape != 0x8000000000000000)
        {
          ++Shape;
          v22 -= 8;
          if (!v22) {
            goto LABEL_37;
          }
        }
      }
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      uint64_t v24 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        uint64_t ElementTypeWithLargestPrecision = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v73);
        mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v80);
        return ElementTypeWithLargestPrecision;
      }
      uint64_t v26 = BroadcastedType;
      uint64_t v27 = *BroadcastedType;
      unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v29 = *(unsigned int *)(v27 + 16);
      if (!v29) {
        goto LABEL_35;
      }
      char v30 = *(void **)(v27 + 8);
      unint64_t v31 = &v30[2 * v29];
      do
      {
        unint64_t v32 = v29 >> 1;
        uint64_t v33 = &v30[2 * (v29 >> 1)];
        unint64_t v35 = *v33;
        uint64_t v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28) {
          char v30 = v34;
        }
        else {
          unint64_t v29 = v32;
        }
      }
      while (v29);
      if (v30 != v31 && *v30 == v28) {
        uint64_t v36 = v30[1];
      }
      else {
LABEL_35:
      }
        uint64_t v36 = 0;
      uint64_t v75 = v26;
      uint64_t v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        uint64_t v40 = (uint64_t)v75;
        uint64_t v50 = v76;
      }
      else
      {
        uint64_t v37 = mlir::ShapedType::getShape((mlir::ShapedType *)&v75);
        uint64_t v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        uint64_t v40 = (uint64_t)v39;
        if (!v39) {
          goto LABEL_47;
        }
        uint64_t v41 = *v39;
        unint64_t v42 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v43 = *(unsigned int *)(v41 + 16);
        if (!v43) {
          goto LABEL_47;
        }
        uint64_t v44 = *(void **)(v41 + 8);
        unint64_t v45 = &v44[2 * v43];
        do
        {
          unint64_t v46 = v43 >> 1;
          uint64_t v47 = &v44[2 * (v43 >> 1)];
          unint64_t v49 = *v47;
          char v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42) {
            uint64_t v44 = v48;
          }
          else {
            unint64_t v43 = v46;
          }
        }
        while (v43);
        if (v44 != v45 && *v44 == v42) {
          uint64_t v50 = v44[1];
        }
        else {
LABEL_47:
        }
          uint64_t v50 = 0;
        uint64_t v75 = (void *)v40;
        uint64_t v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 16);
      if (v81 <= v74) {
        int v51 = v74;
      }
      else {
        int v51 = v81;
      }
      uint64_t v52 = operator new(0x10uLL);
      uint64_t v68 = v52 + 2;
      int v69 = v52 + 2;
      *uint64_t v52 = v80;
      v52[1] = v73;
      uint64_t v67 = v52;
      uint64_t v53 = operator new(8uLL);
      char v64 = v53;
      *uint64_t v53 = v71;
      uint64_t v65 = v53 + 1;
      unint64_t v66 = v53 + 1;
      unint64_t v54 = operator new(0x10uLL);
      unint64_t v62 = v54 + 2;
      uint64_t v63 = v54 + 2;
      *unint64_t v54 = 0;
      v54[1] = 0;
      uint64_t v61 = v54;
      uint64_t v55 = operator new(8uLL);
      __p = v55;
      *uint64_t v55 = 0;
      uint64_t v59 = v55 + 1;
      uint64_t v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        uint64_t v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        unint64_t v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        uint64_t v68 = v67;
        operator delete(v67);
      }
      unint64_t ElementsAttr = v72[0];
      if (!v72[0]) {
        unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      }
      uint64_t ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MaximumOp>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::EqualToOp,std::equal_to<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v109[8] = *MEMORY[0x263EF8340];
  uint64_t v98 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    unint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    unint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  char v107 = (char *)v109;
  uint64_t v108 = 0x400000000;
  unint64_t v15 = *a3;
  if (*a3) {
    unint64_t v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v95 = v15;
  uint64_t v96 = v16;
  unint64_t v17 = a3[1];
  if (v17)
  {
    unint64_t v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    unint64_t v15 = v95;
  }
  else
  {
    uint64_t v18 = 0;
  }
  unint64_t ElementTypeWithLargestPrecision = 0;
  uint64_t v93 = v17;
  uint64_t v94 = v18;
  if (v15 && v17)
  {
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v21 = Type;
    if (!Type) {
      goto LABEL_28;
    }
    uint64_t v22 = *Type;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    uint64_t v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      unint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      unint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        uint64_t v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23) {
      uint64_t v31 = v25[1];
    }
    else {
LABEL_28:
    }
      uint64_t v31 = 0;
    unint64_t v103 = v21;
    uint64_t v104 = v31;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    unint64_t v103 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      uint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      uint64_t v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = NumElements;
      }
      uint64_t v36 = *(void **)(*(void *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          uint64_t v60 = 0;
          BOOL v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&v103, v60, (llvm::APInt *)&v86);
            LODWORD(v100[0]) = v87;
            uint64_t v99 = (const void *)v86;
            unsigned int v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)v88, v60, (llvm::APInt *)&v81);
            unsigned int v84 = v82;
            uint64_t v83 = v81;
            unsigned int v82 = 0;
            BOOL v85 = v61;
            if (LODWORD(v100[0]) > 0x40) {
              BOOL v62 = llvm::APInt::equalSlowCase(&v99, &v83);
            }
            else {
              BOOL v62 = v99 == v81;
            }
            LODWORD(v102[0]) = 1;
            unint64_t v101 = v62;
            uint64_t v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v66 = v108 + 1;
              if (v107 <= (char *)&v101 && &v107[16 * v108] > (char *)&v101)
              {
                int64_t v67 = (char *)&v101 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                uint64_t v63 = v107;
                char v64 = &v107[v67];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                char v64 = (char *)&v101;
                uint64_t v63 = v107;
              }
            }
            else
            {
              char v64 = (char *)&v101;
            }
            uint64_t v65 = &v63[16 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            *(void *)uint64_t v65 = *(void *)v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101) {
              MEMORY[0x21667D390](v101, 0x1000C8000313F17);
            }
            if (v84 >= 0x41 && v83) {
              MEMORY[0x21667D390](v83, 0x1000C8000313F17);
            }
            if (v82 >= 0x41 && v81) {
              MEMORY[0x21667D390](v81, 0x1000C8000313F17);
            }
            if (LODWORD(v100[0]) >= 0x41 && v99) {
              MEMORY[0x21667D390](v99, 0x1000C8000313F17);
            }
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          unint64_t ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        unint64_t v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          unint64_t v49 = FloatSemantics;
          for (uint64_t i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(v86) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &v86);
            LOBYTE(v86) = 0;
            int v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &v86);
            uint64_t v52 = (void *)v102[0];
            uint64_t v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52) {
              int v54 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              int v54 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            }
            unsigned int v87 = 1;
            BOOL v86 = v54 == 1;
            uint64_t v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v58 = v108 + 1;
              if (v107 <= (char *)&v86 && &v107[16 * v108] > (char *)&v86)
              {
                int64_t v59 = (char *)&v86 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                uint64_t v55 = v107;
                char v56 = (BOOL *)&v107[v59];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                char v56 = &v86;
                uint64_t v55 = v107;
              }
            }
            else
            {
              char v56 = &v86;
            }
            uint64_t v57 = &v55[16 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)v56 + 2);
            *(void *)uint64_t v57 = *v56;
            *((_DWORD *)v56 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            if (v53 == (void *)v100[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            }
            if (v53 == (void *)v102[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
            }
          }
        }
      }
      if (!v90)
      {
        uint64_t v68 = v91;
        uint64_t v91 = 0;
        if (v68) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
      if (!v88[0])
      {
        uint64_t v69 = v89;
        uint64_t v89 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
        }
      }
      if (!v105)
      {
        uint64_t v70 = v106;
        uint64_t v106 = 0;
        if (v70) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      if (!(_BYTE)v103)
      {
        uint64_t v71 = v104;
        uint64_t v104 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
        }
      }
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v97);
      uint64_t v74 = v73;
      uint64_t v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      uint64_t v76 = (void *)mlir::RankedTensorType::get(Shape, v74, v75, 0);
      unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
LABEL_130:
  __int16 v77 = v107;
  if (v108)
  {
    uint64_t v78 = 16 * v108;
    do
    {
      if (*(_DWORD *)&v77[v78 - 8] >= 0x41u)
      {
        uint64_t v79 = *(void *)&v77[v78 - 16];
        if (v79) {
          MEMORY[0x21667D390](v79, 0x1000C8000313F17);
        }
      }
      v78 -= 16;
    }
    while (v78);
    __int16 v77 = v107;
  }
  if (v77 != (char *)v109) {
    free(v77);
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::EqualToOp,std::equal_to<void>>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v4 = result;
  char v14 = *(unsigned char *)result;
  int v6 = *(unsigned __int8 *)(result + 1);
  char v15 = *(unsigned char *)(result + 1);
  if (!*(unsigned char *)result)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(result + 8) + 16))(&v16);
    uint64_t v8 = *(void *)(v4 + 16) + a2;
    uint64_t v17 = v8;
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    if (v15) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v8;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v13);
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
LABEL_15:
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return result;
  }
  uint64_t v7 = *(void *)(result + 16) + a2;
  uint64_t v16 = *(void *)(result + 8);
  uint64_t v17 = v7;
  if (v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v7;
  }
  unint64_t v10 = (const llvm::APInt *)(v16 + 16 * v9);
  unsigned int v11 = *((_DWORD *)v10 + 2);
  *((_DWORD *)a3 + 2) = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase(a3, v10);
  }
  *(void *)a3 = *(void *)v10;
  if (!v14) {
    goto LABEL_15;
  }
  return result;
}

void *mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v17 = *a1;
  int v6 = a1[1];
  char v18 = a1[1];
  if (*a1)
  {
    uint64_t v7 = *((void *)a1 + 2) + a2;
    uint64_t v19 = (void *)*((void *)a1 + 1);
    uint64_t v20 = v7;
    if (v6) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v7;
    }
    unint64_t v10 = (llvm::detail::IEEEFloat *)(a3 + 8);
    unsigned int v11 = &v19[4 * v9];
    uint64_t v13 = (void *)v11[1];
    uint64_t v12 = (const llvm::detail::DoubleAPFloat *)(v11 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v13)
    {
      uint64_t result = llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v12);
      if (v17) {
        return result;
      }
    }
    else
    {
      uint64_t result = (void *)llvm::detail::IEEEFloat::IEEEFloat(v10, v12);
      if (v17) {
        return result;
      }
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)a1 + 1) + 16))(&v19);
    uint64_t v8 = *((void *)a1 + 2) + a2;
    uint64_t v20 = v8;
    char v15 = v19;
    uint64_t v19 = 0;
    if (v18) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v8;
    }
    (*(void (**)(void *, uint64_t))(*v15 + 24))(v15, v16);
    (*(void (**)(void *))(*v15 + 8))(v15);
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v15 = 0;
  uint64_t v3 = (_DWORD *)(a1 + 16);
  uint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v15);
  uint64_t v5 = v4;
  int v6 = *(_DWORD **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = v4 + 8;
    uint64_t v9 = 16 * v7;
    unint64_t v10 = v6 + 2;
    do
    {
      *uint64_t v8 = *v10;
      *((void *)v8 - 1) = *((void *)v10 - 1);
      _DWORD *v10 = 0;
      v10 += 4;
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
    int v6 = *(_DWORD **)a1;
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = 4 * v11;
      do
      {
        if (v6[v12 - 2] >= 0x41u)
        {
          uint64_t v13 = *(void *)&v6[v12 - 4];
          if (v13) {
            MEMORY[0x21667D390](v13, 0x1000C8000313F17);
          }
        }
        v12 -= 4;
      }
      while (v12 * 4);
      int v6 = *(_DWORD **)a1;
    }
  }
  int v14 = v15;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v14;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::NotEqualToOp,std::not_equal_to<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v109[8] = *MEMORY[0x263EF8340];
  uint64_t v98 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  char v107 = (char *)v109;
  uint64_t v108 = 0x400000000;
  unint64_t v15 = *a3;
  if (*a3) {
    unint64_t v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v95 = v15;
  uint64_t v96 = v16;
  char v17 = a3[1];
  if (v17)
  {
    char v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    unint64_t v15 = v95;
  }
  else
  {
    uint64_t v18 = 0;
  }
  unint64_t ElementTypeWithLargestPrecision = 0;
  uint64_t v93 = v17;
  uint64_t v94 = v18;
  if (v15 && v17)
  {
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v21 = Type;
    if (!Type) {
      goto LABEL_28;
    }
    uint64_t v22 = *Type;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    uint64_t v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      unint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      unint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        uint64_t v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23) {
      uint64_t v31 = v25[1];
    }
    else {
LABEL_28:
    }
      uint64_t v31 = 0;
    unint64_t v103 = v21;
    uint64_t v104 = v31;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    unint64_t v103 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      uint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      uint64_t v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = NumElements;
      }
      uint64_t v36 = *(void **)(*(void *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          uint64_t v60 = 0;
          BOOL v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&v103, v60, (llvm::APInt *)&v86);
            LODWORD(v100[0]) = v87;
            uint64_t v99 = (const void *)v86;
            unsigned int v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)v88, v60, (llvm::APInt *)&v81);
            unsigned int v84 = v82;
            uint64_t v83 = v81;
            unsigned int v82 = 0;
            BOOL v85 = v61;
            if (LODWORD(v100[0]) > 0x40) {
              BOOL v62 = llvm::APInt::equalSlowCase(&v99, &v83);
            }
            else {
              BOOL v62 = v99 == v81;
            }
            LODWORD(v102[0]) = 1;
            unint64_t v101 = !v62;
            uint64_t v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v66 = v108 + 1;
              if (v107 <= (char *)&v101 && &v107[16 * v108] > (char *)&v101)
              {
                int64_t v67 = (char *)&v101 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                uint64_t v63 = v107;
                char v64 = &v107[v67];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                char v64 = (char *)&v101;
                uint64_t v63 = v107;
              }
            }
            else
            {
              char v64 = (char *)&v101;
            }
            uint64_t v65 = &v63[16 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            *(void *)uint64_t v65 = *(void *)v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101) {
              MEMORY[0x21667D390](v101, 0x1000C8000313F17);
            }
            if (v84 >= 0x41 && v83) {
              MEMORY[0x21667D390](v83, 0x1000C8000313F17);
            }
            if (v82 >= 0x41 && v81) {
              MEMORY[0x21667D390](v81, 0x1000C8000313F17);
            }
            if (LODWORD(v100[0]) >= 0x41 && v99) {
              MEMORY[0x21667D390](v99, 0x1000C8000313F17);
            }
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          unint64_t ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        unint64_t v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          unint64_t v49 = FloatSemantics;
          for (uint64_t i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(v86) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &v86);
            LOBYTE(v86) = 0;
            int v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &v86);
            uint64_t v52 = (void *)v102[0];
            uint64_t v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52) {
              int v54 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              int v54 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            }
            unsigned int v87 = 1;
            BOOL v86 = v54 != 1;
            uint64_t v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v58 = v108 + 1;
              if (v107 <= (char *)&v86 && &v107[16 * v108] > (char *)&v86)
              {
                int64_t v59 = (char *)&v86 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                uint64_t v55 = v107;
                char v56 = (BOOL *)&v107[v59];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                char v56 = &v86;
                uint64_t v55 = v107;
              }
            }
            else
            {
              char v56 = &v86;
            }
            uint64_t v57 = &v55[16 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)v56 + 2);
            *(void *)uint64_t v57 = *v56;
            *((_DWORD *)v56 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            if (v53 == (void *)v100[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            }
            if (v53 == (void *)v102[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
            }
          }
        }
      }
      if (!v90)
      {
        uint64_t v68 = v91;
        uint64_t v91 = 0;
        if (v68) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
      if (!v88[0])
      {
        uint64_t v69 = v89;
        uint64_t v89 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
        }
      }
      if (!v105)
      {
        uint64_t v70 = v106;
        uint64_t v106 = 0;
        if (v70) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      if (!(_BYTE)v103)
      {
        uint64_t v71 = v104;
        uint64_t v104 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
        }
      }
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v97);
      uint64_t v74 = v73;
      uint64_t v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      uint64_t v76 = (void *)mlir::RankedTensorType::get(Shape, v74, v75, 0);
      unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
LABEL_130:
  __int16 v77 = v107;
  if (v108)
  {
    uint64_t v78 = 16 * v108;
    do
    {
      if (*(_DWORD *)&v77[v78 - 8] >= 0x41u)
      {
        uint64_t v79 = *(void *)&v77[v78 - 16];
        if (v79) {
          MEMORY[0x21667D390](v79, 0x1000C8000313F17);
        }
      }
      v78 -= 16;
    }
    while (v78);
    __int16 v77 = v107;
  }
  if (v77 != (char *)v109) {
    free(v77);
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::NotEqualToOp,std::not_equal_to<void>>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::GreaterThanOp,std::greater<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v109[8] = *MEMORY[0x263EF8340];
  uint64_t v98 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  char v107 = v109;
  uint64_t v108 = 0x400000000;
  unint64_t v15 = *a3;
  if (*a3) {
    unint64_t v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v95 = v15;
  uint64_t v96 = v16;
  char v17 = a3[1];
  if (v17)
  {
    char v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    unint64_t v15 = v95;
  }
  else
  {
    uint64_t v18 = 0;
  }
  unint64_t ElementTypeWithLargestPrecision = 0;
  uint64_t v93 = v17;
  uint64_t v94 = v18;
  if (v15 && v17)
  {
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v21 = Type;
    if (!Type) {
      goto LABEL_28;
    }
    uint64_t v22 = *Type;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    uint64_t v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      unint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      unint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        uint64_t v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23) {
      uint64_t v31 = v25[1];
    }
    else {
LABEL_28:
    }
      uint64_t v31 = 0;
    unint64_t v103 = v21;
    uint64_t v104 = v31;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    unint64_t v103 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      uint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      uint64_t v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = NumElements;
      }
      uint64_t v36 = *(void **)(*(void *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          uint64_t v60 = 0;
          BOOL v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&v103, v60, (llvm::APInt *)&v86);
            LODWORD(v100[0]) = v87;
            BOOL v99 = v86;
            unsigned int v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)v88, v60, (llvm::APInt *)&v81);
            unsigned int v84 = v82;
            uint64_t v83 = v81;
            unsigned int v82 = 0;
            BOOL v85 = v61;
            if (BYTE4(v100[0])) {
              int v62 = llvm::APInt::compare((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            }
            else {
              int v62 = llvm::APInt::compareSigned((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            }
            LODWORD(v102[0]) = 1;
            BOOL v101 = v62 > 0;
            uint64_t v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v66 = v108 + 1;
              if (v107 <= &v101 && &v107[2 * v108] > &v101)
              {
                int64_t v67 = (char *)&v101 - (char *)v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                uint64_t v63 = v107;
                char v64 = (BOOL *)((char *)v107 + v67);
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                char v64 = &v101;
                uint64_t v63 = v107;
              }
            }
            else
            {
              char v64 = &v101;
            }
            uint64_t v65 = &v63[2 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            BOOL *v65 = *v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101) {
              MEMORY[0x21667D390](v101, 0x1000C8000313F17);
            }
            if (v84 >= 0x41 && v83) {
              MEMORY[0x21667D390](v83, 0x1000C8000313F17);
            }
            if (v82 >= 0x41 && v81) {
              MEMORY[0x21667D390](v81, 0x1000C8000313F17);
            }
            if (LODWORD(v100[0]) >= 0x41 && v99) {
              MEMORY[0x21667D390](v99, 0x1000C8000313F17);
            }
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          unint64_t ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        BOOL v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          unint64_t v49 = FloatSemantics;
          for (uint64_t i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(v86) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &v86);
            LOBYTE(v86) = 0;
            int v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &v86);
            uint64_t v52 = (void *)v102[0];
            uint64_t v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52) {
              int v54 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              int v54 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            }
            unsigned int v87 = 1;
            BOOL v86 = v54 == 2;
            uint64_t v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v58 = v108 + 1;
              if (v107 <= &v86 && &v107[2 * v108] > &v86)
              {
                int64_t v59 = (char *)&v86 - (char *)v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                uint64_t v55 = v107;
                char v56 = (BOOL *)((char *)v107 + v59);
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                char v56 = &v86;
                uint64_t v55 = v107;
              }
            }
            else
            {
              char v56 = &v86;
            }
            uint64_t v57 = &v55[2 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)v56 + 2);
            *uint64_t v57 = *v56;
            *((_DWORD *)v56 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            if (v53 == (void *)v100[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            }
            if (v53 == (void *)v102[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
            }
          }
        }
      }
      if (!v90)
      {
        uint64_t v68 = v91;
        uint64_t v91 = 0;
        if (v68) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
      if (!v88[0])
      {
        uint64_t v69 = v89;
        uint64_t v89 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
        }
      }
      if (!v105)
      {
        uint64_t v70 = v106;
        uint64_t v106 = 0;
        if (v70) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      if (!(_BYTE)v103)
      {
        uint64_t v71 = v104;
        uint64_t v104 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
        }
      }
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v97);
      uint64_t v74 = v73;
      uint64_t v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      uint64_t v76 = (void *)mlir::RankedTensorType::get(Shape, v74, v75, 0);
      unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
LABEL_130:
  __int16 v77 = v107;
  if (v108)
  {
    uint64_t v78 = 2 * v108;
    do
    {
      if (LODWORD(v77[v78 - 1]) >= 0x41)
      {
        BOOL v79 = v77[v78 - 2];
        if (v79) {
          MEMORY[0x21667D390](v79, 0x1000C8000313F17);
        }
      }
      v78 -= 2;
    }
    while (v78 * 8);
    __int16 v77 = v107;
  }
  if (v77 != v109) {
    free(v77);
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::GreaterThanOp,std::greater<void>>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::GreaterThanOrEqualToOp,std::greater_equal<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v109[8] = *MEMORY[0x263EF8340];
  uint64_t v98 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  char v107 = v109;
  uint64_t v108 = 0x400000000;
  unint64_t v15 = *a3;
  if (*a3) {
    unint64_t v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v95 = v15;
  uint64_t v96 = v16;
  char v17 = a3[1];
  if (v17)
  {
    char v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    unint64_t v15 = v95;
  }
  else
  {
    uint64_t v18 = 0;
  }
  unint64_t ElementTypeWithLargestPrecision = 0;
  uint64_t v93 = v17;
  uint64_t v94 = v18;
  if (v15 && v17)
  {
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v21 = Type;
    if (!Type) {
      goto LABEL_28;
    }
    uint64_t v22 = *Type;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    uint64_t v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      unint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      unint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        uint64_t v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23) {
      uint64_t v31 = v25[1];
    }
    else {
LABEL_28:
    }
      uint64_t v31 = 0;
    unint64_t v103 = v21;
    uint64_t v104 = v31;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    unint64_t v103 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      uint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      uint64_t v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = NumElements;
      }
      uint64_t v36 = *(void **)(*(void *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          uint64_t v60 = 0;
          BOOL v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&v103, v60, (llvm::APInt *)&v86);
            LODWORD(v100[0]) = v87;
            BOOL v99 = v86;
            unsigned int v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)v88, v60, (llvm::APInt *)&v81);
            unsigned int v84 = v82;
            uint64_t v83 = v81;
            unsigned int v82 = 0;
            BOOL v85 = v61;
            if (BYTE4(v100[0])) {
              int v62 = llvm::APInt::compare((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            }
            else {
              int v62 = llvm::APInt::compareSigned((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            }
            LODWORD(v102[0]) = 1;
            BOOL v101 = v62 >= 0;
            uint64_t v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v66 = v108 + 1;
              if (v107 <= &v101 && &v107[2 * v108] > &v101)
              {
                int64_t v67 = (char *)&v101 - (char *)v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                uint64_t v63 = v107;
                char v64 = (BOOL *)((char *)v107 + v67);
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                char v64 = &v101;
                uint64_t v63 = v107;
              }
            }
            else
            {
              char v64 = &v101;
            }
            uint64_t v65 = &v63[2 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            BOOL *v65 = *v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101) {
              MEMORY[0x21667D390](v101, 0x1000C8000313F17);
            }
            if (v84 >= 0x41 && v83) {
              MEMORY[0x21667D390](v83, 0x1000C8000313F17);
            }
            if (v82 >= 0x41 && v81) {
              MEMORY[0x21667D390](v81, 0x1000C8000313F17);
            }
            if (LODWORD(v100[0]) >= 0x41 && v99) {
              MEMORY[0x21667D390](v99, 0x1000C8000313F17);
            }
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          unint64_t ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        BOOL v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          unint64_t v49 = FloatSemantics;
          for (uint64_t i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(v86) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &v86);
            LOBYTE(v86) = 0;
            int v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &v86);
            uint64_t v52 = (void *)v102[0];
            uint64_t v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52) {
              int v54 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              int v54 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            }
            unsigned int v87 = 1;
            BOOL v86 = (v54 - 1) < 2;
            uint64_t v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v58 = v108 + 1;
              if (v107 <= &v86 && &v107[2 * v108] > &v86)
              {
                int64_t v59 = (char *)&v86 - (char *)v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                uint64_t v55 = v107;
                char v56 = (BOOL *)((char *)v107 + v59);
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                char v56 = &v86;
                uint64_t v55 = v107;
              }
            }
            else
            {
              char v56 = &v86;
            }
            uint64_t v57 = &v55[2 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)v56 + 2);
            *uint64_t v57 = *v56;
            *((_DWORD *)v56 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            if (v53 == (void *)v100[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            }
            if (v53 == (void *)v102[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
            }
          }
        }
      }
      if (!v90)
      {
        uint64_t v68 = v91;
        uint64_t v91 = 0;
        if (v68) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
      if (!v88[0])
      {
        uint64_t v69 = v89;
        uint64_t v89 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
        }
      }
      if (!v105)
      {
        uint64_t v70 = v106;
        uint64_t v106 = 0;
        if (v70) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      if (!(_BYTE)v103)
      {
        uint64_t v71 = v104;
        uint64_t v104 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
        }
      }
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v97);
      uint64_t v74 = v73;
      uint64_t v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      uint64_t v76 = (void *)mlir::RankedTensorType::get(Shape, v74, v75, 0);
      unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
LABEL_130:
  __int16 v77 = v107;
  if (v108)
  {
    uint64_t v78 = 2 * v108;
    do
    {
      if (LODWORD(v77[v78 - 1]) >= 0x41)
      {
        BOOL v79 = v77[v78 - 2];
        if (v79) {
          MEMORY[0x21667D390](v79, 0x1000C8000313F17);
        }
      }
      v78 -= 2;
    }
    while (v78 * 8);
    __int16 v77 = v107;
  }
  if (v77 != v109) {
    free(v77);
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::GreaterThanOrEqualToOp,std::greater_equal<void>>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::LessThanOp,std::less<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v109[8] = *MEMORY[0x263EF8340];
  uint64_t v98 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  char v107 = (char *)v109;
  uint64_t v108 = 0x400000000;
  unint64_t v15 = *a3;
  if (*a3) {
    unint64_t v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v95 = v15;
  uint64_t v96 = v16;
  char v17 = a3[1];
  if (v17)
  {
    char v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    unint64_t v15 = v95;
  }
  else
  {
    uint64_t v18 = 0;
  }
  unint64_t ElementTypeWithLargestPrecision = 0;
  uint64_t v93 = v17;
  uint64_t v94 = v18;
  if (v15 && v17)
  {
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v21 = Type;
    if (!Type) {
      goto LABEL_28;
    }
    uint64_t v22 = *Type;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    uint64_t v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      unint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      unint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        uint64_t v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23) {
      uint64_t v31 = v25[1];
    }
    else {
LABEL_28:
    }
      uint64_t v31 = 0;
    unint64_t v103 = v21;
    uint64_t v104 = v31;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    unint64_t v103 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      uint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      uint64_t v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = NumElements;
      }
      uint64_t v36 = *(void **)(*(void *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          uint64_t v60 = 0;
          BOOL v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&v103, v60, (llvm::APInt *)&v86);
            LODWORD(v100[0]) = v87;
            BOOL v99 = v86;
            unsigned int v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)v88, v60, (llvm::APInt *)&v81);
            unsigned int v84 = v82;
            uint64_t v83 = v81;
            unsigned int v82 = 0;
            BOOL v85 = v61;
            if (BYTE4(v100[0])) {
              unsigned int v62 = llvm::APInt::compare((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            }
            else {
              unsigned int v62 = llvm::APInt::compareSigned((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            }
            LODWORD(v102[0]) = 1;
            unint64_t v101 = v62 >> 31;
            uint64_t v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v66 = v108 + 1;
              if (v107 <= (char *)&v101 && &v107[16 * v108] > (char *)&v101)
              {
                int64_t v67 = (char *)&v101 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                uint64_t v63 = v107;
                char v64 = &v107[v67];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                char v64 = (char *)&v101;
                uint64_t v63 = v107;
              }
            }
            else
            {
              char v64 = (char *)&v101;
            }
            uint64_t v65 = &v63[16 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            *(void *)uint64_t v65 = *(void *)v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101) {
              MEMORY[0x21667D390](v101, 0x1000C8000313F17);
            }
            if (v84 >= 0x41 && v83) {
              MEMORY[0x21667D390](v83, 0x1000C8000313F17);
            }
            if (v82 >= 0x41 && v81) {
              MEMORY[0x21667D390](v81, 0x1000C8000313F17);
            }
            if (LODWORD(v100[0]) >= 0x41 && v99) {
              MEMORY[0x21667D390](v99, 0x1000C8000313F17);
            }
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          unint64_t ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        unint64_t v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          unint64_t v49 = FloatSemantics;
          for (uint64_t i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(v86) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &v86);
            LOBYTE(v86) = 0;
            int v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &v86);
            uint64_t v52 = (void *)v102[0];
            uint64_t v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52) {
              int v54 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              int v54 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            }
            unsigned int v87 = 1;
            BOOL v86 = v54 == 0;
            uint64_t v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v58 = v108 + 1;
              if (v107 <= (char *)&v86 && &v107[16 * v108] > (char *)&v86)
              {
                int64_t v59 = (char *)&v86 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                uint64_t v55 = v107;
                char v56 = (BOOL *)&v107[v59];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                char v56 = &v86;
                uint64_t v55 = v107;
              }
            }
            else
            {
              char v56 = &v86;
            }
            uint64_t v57 = &v55[16 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)v56 + 2);
            *(void *)uint64_t v57 = *v56;
            *((_DWORD *)v56 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            if (v53 == (void *)v100[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            }
            if (v53 == (void *)v102[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
            }
          }
        }
      }
      if (!v90)
      {
        uint64_t v68 = v91;
        uint64_t v91 = 0;
        if (v68) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
      if (!v88[0])
      {
        uint64_t v69 = v89;
        uint64_t v89 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
        }
      }
      if (!v105)
      {
        uint64_t v70 = v106;
        uint64_t v106 = 0;
        if (v70) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      if (!(_BYTE)v103)
      {
        uint64_t v71 = v104;
        uint64_t v104 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
        }
      }
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v97);
      uint64_t v74 = v73;
      uint64_t v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      uint64_t v76 = (void *)mlir::RankedTensorType::get(Shape, v74, v75, 0);
      unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
LABEL_130:
  __int16 v77 = v107;
  if (v108)
  {
    uint64_t v78 = 16 * v108;
    do
    {
      if (*(_DWORD *)&v77[v78 - 8] >= 0x41u)
      {
        uint64_t v79 = *(void *)&v77[v78 - 16];
        if (v79) {
          MEMORY[0x21667D390](v79, 0x1000C8000313F17);
        }
      }
      v78 -= 16;
    }
    while (v78);
    __int16 v77 = v107;
  }
  if (v77 != (char *)v109) {
    free(v77);
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::LessThanOp,std::less<void>>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::LessThanOrEqualToOp,std::less_equal<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v109[8] = *MEMORY[0x263EF8340];
  uint64_t v98 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  char v107 = v109;
  uint64_t v108 = 0x400000000;
  unint64_t v15 = *a3;
  if (*a3) {
    unint64_t v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v95 = v15;
  uint64_t v96 = v16;
  char v17 = a3[1];
  if (v17)
  {
    char v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    unint64_t v15 = v95;
  }
  else
  {
    uint64_t v18 = 0;
  }
  unint64_t ElementTypeWithLargestPrecision = 0;
  uint64_t v93 = v17;
  uint64_t v94 = v18;
  if (v15 && v17)
  {
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v21 = Type;
    if (!Type) {
      goto LABEL_28;
    }
    uint64_t v22 = *Type;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    uint64_t v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      unint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      unint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        uint64_t v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23) {
      uint64_t v31 = v25[1];
    }
    else {
LABEL_28:
    }
      uint64_t v31 = 0;
    unint64_t v103 = v21;
    uint64_t v104 = v31;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    unint64_t v103 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    uint64_t v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      uint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      uint64_t v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = NumElements;
      }
      uint64_t v36 = *(void **)(*(void *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          uint64_t v60 = 0;
          BOOL v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&v103, v60, (llvm::APInt *)&v86);
            LODWORD(v100[0]) = v87;
            BOOL v99 = v86;
            unsigned int v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)v88, v60, (llvm::APInt *)&v81);
            unsigned int v84 = v82;
            uint64_t v83 = v81;
            unsigned int v82 = 0;
            BOOL v85 = v61;
            if (BYTE4(v100[0])) {
              int v62 = llvm::APInt::compare((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            }
            else {
              int v62 = llvm::APInt::compareSigned((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            }
            LODWORD(v102[0]) = 1;
            BOOL v101 = v62 < 1;
            uint64_t v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v66 = v108 + 1;
              if (v107 <= &v101 && &v107[2 * v108] > &v101)
              {
                int64_t v67 = (char *)&v101 - (char *)v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                uint64_t v63 = v107;
                char v64 = (BOOL *)((char *)v107 + v67);
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                char v64 = &v101;
                uint64_t v63 = v107;
              }
            }
            else
            {
              char v64 = &v101;
            }
            uint64_t v65 = &v63[2 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            BOOL *v65 = *v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101) {
              MEMORY[0x21667D390](v101, 0x1000C8000313F17);
            }
            if (v84 >= 0x41 && v83) {
              MEMORY[0x21667D390](v83, 0x1000C8000313F17);
            }
            if (v82 >= 0x41 && v81) {
              MEMORY[0x21667D390](v81, 0x1000C8000313F17);
            }
            if (LODWORD(v100[0]) >= 0x41 && v99) {
              MEMORY[0x21667D390](v99, 0x1000C8000313F17);
            }
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          unint64_t ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        BOOL v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          unint64_t v49 = FloatSemantics;
          for (uint64_t i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(v86) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &v86);
            LOBYTE(v86) = 0;
            int v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &v86);
            uint64_t v52 = (void *)v102[0];
            uint64_t v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52) {
              unsigned int v54 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              unsigned int v54 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            }
            unsigned int v87 = 1;
            BOOL v86 = v54 < 2;
            uint64_t v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              unint64_t v58 = v108 + 1;
              if (v107 <= &v86 && &v107[2 * v108] > &v86)
              {
                int64_t v59 = (char *)&v86 - (char *)v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                uint64_t v55 = v107;
                char v56 = (BOOL *)((char *)v107 + v59);
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                char v56 = &v86;
                uint64_t v55 = v107;
              }
            }
            else
            {
              char v56 = &v86;
            }
            uint64_t v57 = &v55[2 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)v56 + 2);
            *uint64_t v57 = *v56;
            *((_DWORD *)v56 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && v86) {
              MEMORY[0x21667D390](v86, 0x1000C8000313F17);
            }
            if (v53 == (void *)v100[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            }
            if (v53 == (void *)v102[0]) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
            }
          }
        }
      }
      if (!v90)
      {
        uint64_t v68 = v91;
        uint64_t v91 = 0;
        if (v68) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
      if (!v88[0])
      {
        uint64_t v69 = v89;
        uint64_t v89 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
        }
      }
      if (!v105)
      {
        uint64_t v70 = v106;
        uint64_t v106 = 0;
        if (v70) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      if (!(_BYTE)v103)
      {
        uint64_t v71 = v104;
        uint64_t v104 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
        }
      }
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v97);
      uint64_t v74 = v73;
      uint64_t v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      uint64_t v76 = (void *)mlir::RankedTensorType::get(Shape, v74, v75, 0);
      unint64_t ElementTypeWithLargestPrecision = (unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
LABEL_130:
  __int16 v77 = v107;
  if (v108)
  {
    uint64_t v78 = 2 * v108;
    do
    {
      if (LODWORD(v77[v78 - 1]) >= 0x41)
      {
        BOOL v79 = v77[v78 - 2];
        if (v79) {
          MEMORY[0x21667D390](v79, 0x1000C8000313F17);
        }
      }
      v78 -= 2;
    }
    while (v78 * 8);
    __int16 v77 = v107;
  }
  if (v77 != v109) {
    free(v77);
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::LessThanOrEqualToOp,std::less_equal<void>>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionAndOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionAndOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionArgMaxOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionArgMaxOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionArgMinOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionArgMinOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionLogSumExpOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionLogSumExpOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionMaxOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionMaxOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionMeanOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionMeanOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionMinOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionMinOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionOrOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionOrOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionSumOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionSumOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionVarianceOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t result = mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18);
  if (result)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      uint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v17), v15))
    {
      uint64_t v16 = 8 * v15;
      while (*Shape)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReduction<mlir::mps::ReductionVarianceOp>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldSelectOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v246 = *MEMORY[0x263EF8340];
  uint64_t v222 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v222) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  unint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    unint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v221[0] = v4;
  v221[1] = v14;
  uint64_t v218 = &v220;
  long long v219 = xmmword_211ED5570;
  if (!*a3)
  {
    uint64_t v216 = 0;
    uint64_t v217 = 0;
    goto LABEL_199;
  }
  uint64_t v216 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v217 = v15;
  if (!v216) {
    goto LABEL_199;
  }
  uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v216);
  uint64_t Type = v16;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (!v216) {
      goto LABEL_199;
    }
    uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v216);
    uint64_t Type = v17;
    uint64_t v18 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                   + 136);
    if (v18 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      goto LABEL_199;
    }
    mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v216, (uint64_t)&ArgOperands);
    LOWORD(v230) = (_WORD)ArgOperands;
    if ((_BYTE)ArgOperands) {
      char v231 = (llvm::APFloatBase *)Type;
    }
    else {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)Type + 16))(&v231);
    }
    uint64_t v19 = v236;
    uint64_t j = v236;
    LOWORD(v226) = v237;
    if ((_BYTE)v237)
    {
      v227 = v238;
    }
    else
    {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v238 + 16))(&v227);
      uint64_t v19 = j;
    }
    uint64_t i = v239;
    if (v19 == v239)
    {
      BOOL v20 = 0;
      int v21 = 1;
      if (!(_BYTE)v226) {
        goto LABEL_142;
      }
      goto LABEL_144;
    }
    int v22 = 0;
    BOOL v20 = 0;
    while (1)
    {
      if (BYTE1(v230)) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = v19;
      }
      if ((_BYTE)v230)
      {
        unint64_t v27 = (char *)v231 + 32 * v26;
        unint64_t v29 = (llvm::APFloatBase *)*((void *)v27 + 1);
        unint64_t v28 = (const llvm::detail::DoubleAPFloat *)(v27 + 8);
        unint64_t v24 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v231);
        if (v24 == v29)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v241, v28);
          uint64_t v25 = v241;
          if (!v22)
          {
LABEL_57:
            unint64_t v30 = (uint64_t *)v242;
            if (v24 != v25) {
              unint64_t v30 = &v240;
            }
            BOOL v20 = (*((unsigned char *)v30 + 28) & 7) != 3;
            int v22 = 1;
            if (v24 == v25) {
              goto LABEL_60;
            }
            goto LABEL_45;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v241, v28);
          uint64_t v25 = v241;
          if (!v22) {
            goto LABEL_57;
          }
        }
      }
      else
      {
        unint64_t v23 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v231 + 24))(&v240);
        unint64_t v24 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v23);
        uint64_t v25 = v241;
        if (!v22) {
          goto LABEL_57;
        }
      }
      if (v24 == v25)
      {
        if (((*(unsigned char *)(v242 + 28) & 7) != 3) != v20)
        {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241);
          goto LABEL_140;
        }
LABEL_60:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241);
        goto LABEL_46;
      }
      if (((v244 & 7) != 3) != v20)
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v241);
LABEL_140:
        int v21 = 1;
LABEL_141:
        if (!(_BYTE)v226)
        {
LABEL_142:
          int v51 = v227;
          v227 = 0;
          if (v51) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v51 + 8))(v51);
          }
        }
LABEL_144:
        if (!(_BYTE)v230)
        {
          uint64_t v52 = v231;
          char v231 = 0;
          if (v52) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v52 + 8))(v52);
          }
        }
        if (!(_BYTE)v237)
        {
          uint64_t v53 = v238;
          v238 = 0;
          if (v53) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v53 + 8))(v53);
          }
        }
        if (!(_BYTE)ArgOperands)
        {
          uint64_t v54 = Type;
          uint64_t Type = 0;
          if (v54) {
            (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
          }
        }
        if (v21)
        {
          mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v216, (uint64_t)&ArgOperands);
          LOWORD(v230) = (_WORD)ArgOperands;
          if ((_BYTE)ArgOperands) {
            char v231 = (llvm::APFloatBase *)Type;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)Type + 16))(&v231);
          }
          uint64_t v57 = v236;
          uint64_t j = v236;
          LOWORD(v226) = v237;
          if ((_BYTE)v237)
          {
            v227 = v238;
          }
          else
          {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v238 + 16))(&v227);
            uint64_t v57 = j;
          }
          for (uint64_t i = v239; v57 != i; j = v57)
          {
            if (BYTE1(v230)) {
              uint64_t v69 = 0;
            }
            else {
              uint64_t v69 = v57;
            }
            if ((_BYTE)v230)
            {
              uint64_t v70 = (char *)v231 + 32 * v69;
              char v72 = (llvm::APFloatBase *)*((void *)v70 + 1);
              uint64_t v71 = (const llvm::detail::DoubleAPFloat *)(v70 + 8);
              uint64_t v73 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v231);
              if (v73 == v72) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v241, v71);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v241, v71);
              }
            }
            else
            {
              uint64_t v74 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v231 + 24))(&v240);
              uint64_t v73 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v74);
            }
            if (v73 == v241) {
              uint64_t v75 = (uint64_t *)v242;
            }
            else {
              uint64_t v75 = &v240;
            }
            char v76 = *((unsigned char *)v75 + 28);
            uint64_t v77 = v219;
            if ((unint64_t)(v219 + 1) > *((void *)&v219 + 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v218, &v220, v219 + 1, 1);
              uint64_t v77 = v219;
            }
            *((unsigned char *)v218 + v77) = (v76 & 7) != 3;
            *(void *)&long long v219 = v219 + 1;
            if (v73 == v241) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v241);
            }
            uint64_t v57 = j + 1;
          }
          if (!(_BYTE)v226)
          {
            unint64_t v58 = v227;
            v227 = 0;
            if (v58) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v58 + 8))(v58);
            }
          }
          if (!(_BYTE)v230)
          {
            unint64_t v45 = v231;
            char v231 = 0;
            if (v45) {
              goto LABEL_170;
            }
          }
          goto LABEL_171;
        }
LABEL_156:
        if (v20) {
          uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v222);
        }
        else {
          uint64_t Filter = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v222);
        }
        unint64_t v56 = Filter | 4;
        goto LABEL_200;
      }
LABEL_45:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v241);
LABEL_46:
      uint64_t v19 = j + 1;
      uint64_t j = v19;
      if (v19 == i)
      {
        int v21 = 0;
        goto LABEL_141;
      }
    }
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v216, (uint64_t)&ArgOperands);
  LOWORD(v240) = (_WORD)ArgOperands;
  if ((_BYTE)ArgOperands) {
    v241 = (llvm::APFloatBase *)Type;
  }
  else {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)Type + 16))(&v241);
  }
  uint64_t v31 = v236;
  uint64_t v242 = v236;
  LOWORD(v230) = v237;
  if ((_BYTE)v237)
  {
    char v231 = v238;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v238 + 16))(&v231);
    uint64_t v31 = v242;
  }
  uint64_t j = v239;
  if (v31 != v239)
  {
    int v33 = 0;
    BOOL v20 = 0;
    do
    {
      if (BYTE1(v240)) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v31;
      }
      if ((_BYTE)v240)
      {
        uint64_t v35 = (llvm::APFloatBase *)((char *)v241 + 16 * v34);
        LODWORD(v227) = *((_DWORD *)v35 + 2);
        if (v227 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v226, v35);
        }
        uint64_t v226 = *(void **)v35;
      }
      else
      {
        (*(void (**)(void **__return_ptr))(*(void *)v241 + 24))(&v226);
      }
      if (v227 >= 0x41) {
        uint64_t v36 = v226;
      }
      else {
        uint64_t v36 = &v226;
      }
      BOOL v37 = *v36 != 0;
      if (v33)
      {
        if (v37 != v20)
        {
          if (v227 >= 0x41 && v226) {
            MEMORY[0x21667D390]();
          }
          goto LABEL_67;
        }
      }
      else
      {
        int v33 = 1;
        BOOL v20 = v37;
      }
      if (v227 >= 0x41 && v226 != 0) {
        MEMORY[0x21667D390]();
      }
      uint64_t v31 = v242 + 1;
      uint64_t v242 = v31;
    }
    while (v31 != j);
    int v32 = 0;
    if ((_BYTE)v230) {
      goto LABEL_94;
    }
    goto LABEL_92;
  }
  BOOL v20 = 0;
LABEL_67:
  int v32 = 1;
  if (!(_BYTE)v230)
  {
LABEL_92:
    uint64_t v39 = v231;
    char v231 = 0;
    if (v39) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v39 + 8))(v39);
    }
  }
LABEL_94:
  if (!(_BYTE)v240)
  {
    uint64_t v40 = v241;
    v241 = 0;
    if (v40) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v40 + 8))(v40);
    }
  }
  if (!(_BYTE)v237)
  {
    uint64_t v41 = v238;
    v238 = 0;
    if (v41) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v41 + 8))(v41);
    }
  }
  if (!(_BYTE)ArgOperands)
  {
    uint64_t v42 = Type;
    uint64_t Type = 0;
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
    }
  }
  if (!v32) {
    goto LABEL_156;
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v216, (uint64_t)&ArgOperands);
  LOWORD(v240) = (_WORD)ArgOperands;
  if ((_BYTE)ArgOperands) {
    v241 = (llvm::APFloatBase *)Type;
  }
  else {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)Type + 16))(&v241);
  }
  uint64_t v43 = v236;
  uint64_t v242 = v236;
  LOWORD(v230) = v237;
  if ((_BYTE)v237)
  {
    char v231 = v238;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v238 + 16))(&v231);
    uint64_t v43 = v242;
  }
  for (uint64_t j = v239; v43 != j; v242 = v43)
  {
    if (BYTE1(v240)) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = v43;
    }
    if ((_BYTE)v240)
    {
      uint64_t v47 = (llvm::APFloatBase *)((char *)v241 + 16 * v46);
      LODWORD(v227) = *((_DWORD *)v47 + 2);
      if (v227 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v226, v47);
      }
      uint64_t v226 = *(void **)v47;
    }
    else
    {
      (*(void (**)(void **__return_ptr))(*(void *)v241 + 24))(&v226);
    }
    if (v227 >= 0x41) {
      char v48 = v226;
    }
    else {
      char v48 = (uint64_t *)&v226;
    }
    uint64_t v49 = *v48;
    uint64_t v50 = v219;
    if ((unint64_t)(v219 + 1) > *((void *)&v219 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v218, &v220, v219 + 1, 1);
      uint64_t v50 = v219;
    }
    *((unsigned char *)v218 + v50) = v49 != 0;
    *(void *)&long long v219 = v219 + 1;
    if (v227 >= 0x41 && v226) {
      MEMORY[0x21667D390](v226, 0x1000C8000313F17);
    }
    uint64_t v43 = v242 + 1;
  }
  if (!(_BYTE)v230)
  {
    uint64_t v44 = v231;
    char v231 = 0;
    if (v44) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v44 + 8))(v44);
    }
  }
  if (!(_BYTE)v240)
  {
    unint64_t v45 = v241;
    v241 = 0;
    if (v45) {
LABEL_170:
    }
      (*(void (**)(llvm::APFloatBase *))(*(void *)v45 + 8))(v45);
  }
LABEL_171:
  if (!(_BYTE)v237)
  {
    int64_t v59 = v238;
    v238 = 0;
    if (v59) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v59 + 8))(v59);
    }
  }
  if (!(_BYTE)ArgOperands)
  {
    uint64_t v60 = Type;
    uint64_t Type = 0;
    if (v60) {
      (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
    }
  }
  BOOL v61 = a3[1];
  if (v61) {
    BOOL v61 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v61);
  }
  else {
    uint64_t v62 = 0;
  }
  char v214 = v61;
  uint64_t v215 = v62;
  uint64_t v63 = a3[2];
  if (v63)
  {
    uint64_t v63 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[2]);
    BOOL v61 = v214;
  }
  else
  {
    uint64_t v64 = 0;
  }
  unint64_t v56 = 0;
  uint64_t v212 = v63;
  uint64_t v213 = v64;
  if (v61 && v63)
  {
    uint64_t ArgOperands = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v214);
    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v212);
    unint64_t ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision((void **)&ArgOperands, 2);
    if (ElementTypeWithLargestPrecision)
    {
      uint64_t v66 = (uint64_t)ElementTypeWithLargestPrecision;
      if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v221)
                        + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        int64_t v67 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v221)
                       + 136);
        if (v67 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          goto LABEL_199;
        }
        uint64_t ArgOperands = &v236;
        uint64_t Type = 0x400000000;
        LOBYTE(v230) = 0;
        char v233 = 0;
        LOBYTE(v226) = 0;
        char v229 = 0;
        if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v214))
        {
          mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v214, (uint64_t)&v240);
          LOWORD(v209) = v240;
          if ((_BYTE)v240)
          {
            uint64_t v210 = v241;
            uint64_t v211 = v242;
            if (BYTE1(v240)) {
              uint64_t v78 = 0;
            }
            else {
              uint64_t v78 = v242;
            }
            uint64_t v81 = (char *)v241 + 32 * v78;
            uint64_t v83 = (void *)*((void *)v81 + 1);
            unsigned int v82 = (const llvm::detail::DoubleAPFloat *)(v81 + 8);
            if (llvm::APFloatBase::PPCDoubleDouble(v241) == v83) {
              BOOL v85 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v224, v82);
            }
            else {
              BOOL v85 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v224, v82);
            }
          }
          else
          {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v241 + 16))(&v210);
            uint64_t v211 = v242;
            BOOL v85 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v210 + 24))(&v223);
          }
          if (v233)
          {
            BOOL v86 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v231, (llvm::APFloatBase *)&v224);
            unsigned int v87 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v86);
          }
          else
          {
            int v88 = v224;
            unsigned int v87 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v85);
            if (v87 == v88) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v231, &v224);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v231, (uint64_t)&v224);
            }
            char v233 = 1;
          }
          if (v87 == v224) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v224);
          }
          if (!(_BYTE)v209)
          {
            uint64_t v89 = v210;
            uint64_t v210 = 0;
            if (v89) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v89 + 8))(v89);
            }
          }
          if (!v243)
          {
            uint64_t v90 = v245;
            uint64_t v245 = 0;
            if (v90) {
              (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
            }
          }
          if (!(_BYTE)v240)
          {
            uint64_t v91 = v241;
            v241 = 0;
            if (v91) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v91 + 8))(v91);
            }
          }
        }
        if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v212))
        {
          mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v212, (uint64_t)&v240);
          LOWORD(v209) = v240;
          if ((_BYTE)v240)
          {
            uint64_t v210 = v241;
            uint64_t v211 = v242;
            if (BYTE1(v240)) {
              uint64_t v92 = 0;
            }
            else {
              uint64_t v92 = v242;
            }
            uint64_t v93 = (char *)v241 + 32 * v92;
            unint64_t v95 = (void *)*((void *)v93 + 1);
            uint64_t v94 = (const llvm::detail::DoubleAPFloat *)(v93 + 8);
            if (llvm::APFloatBase::PPCDoubleDouble(v241) == v95) {
              uint64_t v96 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v224, v94);
            }
            else {
              uint64_t v96 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v224, v94);
            }
          }
          else
          {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v241 + 16))(&v210);
            uint64_t v211 = v242;
            uint64_t v96 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v210 + 24))(&v223);
          }
          if (v229)
          {
            char v97 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v227, (llvm::APFloatBase *)&v224);
            uint64_t v98 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v97);
          }
          else
          {
            BOOL v99 = v224;
            uint64_t v98 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v96);
            if (v98 == v99) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v227, &v224);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v227, (uint64_t)&v224);
            }
            char v229 = 1;
          }
          if (v98 == v224) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v224);
          }
          if (!(_BYTE)v209)
          {
            uint64_t v100 = v210;
            uint64_t v210 = 0;
            if (v100) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v100 + 8))(v100);
            }
          }
          if (!v243)
          {
            uint64_t v101 = v245;
            uint64_t v245 = 0;
            if (v101) {
              (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
            }
          }
          if (!(_BYTE)v240)
          {
            uint64_t v102 = v241;
            v241 = 0;
            if (v102) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v102 + 8))(v102);
            }
          }
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v214, (uint64_t)&v240);
        LOWORD(v209) = v240;
        if ((_BYTE)v240) {
          uint64_t v210 = v241;
        }
        else {
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v241 + 16))(&v210);
        }
        uint64_t v211 = v242;
        if (!v243)
        {
          uint64_t v103 = v245;
          uint64_t v245 = 0;
          if (v103) {
            (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
          }
        }
        if (!(_BYTE)v240)
        {
          uint64_t v104 = v241;
          v241 = 0;
          if (v104) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v104 + 8))(v104);
          }
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v212, (uint64_t)&v240);
        LOWORD(v206) = v240;
        if ((_BYTE)v240) {
          uint64_t v207 = v241;
        }
        else {
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v241 + 16))(&v207);
        }
        uint64_t v208 = v242;
        if (!v243)
        {
          uint64_t v105 = v245;
          uint64_t v245 = 0;
          if (v105) {
            (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
          }
        }
        if (!(_BYTE)v240)
        {
          uint64_t v106 = v241;
          v241 = 0;
          if (v106) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v106 + 8))(v106);
          }
        }
        unint64_t v107 = v219;
        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v214, v215);
        unint64_t v109 = mlir::ElementsAttr::getNumElements((uint64_t)v212, v213);
        if (NumElements <= v109) {
          unint64_t v110 = v109;
        }
        else {
          unint64_t v110 = NumElements;
        }
        if (v107 <= v110) {
          unint64_t v111 = v110;
        }
        else {
          unint64_t v111 = v107;
        }
        uint64_t v202 = v66;
        uint64_t v240 = v66;
        FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v240);
        if (!v111)
        {
LABEL_364:
          uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v221);
          uint64_t v143 = (void *)mlir::RankedTensorType::get(Shape, v142, v202, 0);
          unint64_t ElementsAttr = (llvm::APFloatBase *)mlir::createElementsAttr(v143, (uint64_t)ArgOperands, Type);
          unint64_t v145 = ElementsAttr;
          if (!(_BYTE)v206)
          {
            unint64_t ElementsAttr = v207;
            uint64_t v207 = 0;
            if (ElementsAttr) {
              unint64_t ElementsAttr = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)ElementsAttr
            }
                                                                                                 + 8))(ElementsAttr);
          }
          if (!(_BYTE)v209)
          {
            unint64_t ElementsAttr = v210;
            uint64_t v210 = 0;
            if (ElementsAttr) {
              unint64_t ElementsAttr = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)ElementsAttr
            }
                                                                                                 + 8))(ElementsAttr);
          }
          if (v229)
          {
            unint64_t v146 = v227;
            if (llvm::APFloatBase::PPCDoubleDouble(ElementsAttr) == v146) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v227);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v227);
            }
          }
          if (v233)
          {
            uint64_t v147 = v231;
            if (llvm::APFloatBase::PPCDoubleDouble(ElementsAttr) == v147) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v231);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v231);
            }
          }
          char v148 = (char *)ArgOperands;
          uint64_t v149 = Type;
          if (Type)
          {
            uint64_t v150 = llvm::APFloatBase::PPCDoubleDouble(ElementsAttr);
            uint64_t v151 = v148 - 24;
            uint64_t v152 = 32 * v149;
            do
            {
              while (1)
              {
                unint64_t v153 = (llvm::detail::DoubleAPFloat *)&v151[v152];
                if (v150 != *(void **)&v151[v152]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v153);
                v152 -= 32;
                if (!v152) {
                  goto LABEL_383;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v153);
              v152 -= 32;
            }
            while (v152);
LABEL_383:
            char v148 = (char *)ArgOperands;
          }
          unint64_t v56 = (unint64_t)v145 & 0xFFFFFFFFFFFFFFFBLL;
          if (v148 != (char *)&v236) {
            free(v148);
          }
          goto LABEL_200;
        }
        uint64_t v113 = FloatSemantics;
        uint64_t v114 = 0;
        while (1)
        {
          if (v233)
          {
            unint64_t v115 = v231;
            if (llvm::APFloatBase::PPCDoubleDouble(FloatSemantics) == v115) {
              uint64_t v116 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v241, (const llvm::detail::DoubleAPFloat *)&v231);
            }
            else {
              uint64_t v116 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v241, (const llvm::detail::IEEEFloat *)&v231);
            }
          }
          else
          {
            LOWORD(v223) = (_WORD)v209;
            int v117 = BYTE1(v209);
            if ((_BYTE)v209)
            {
              uint64_t v118 = v210;
              v224 = v210;
              int v119 = 1;
            }
            else
            {
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v210 + 16))(&v224);
              int v117 = BYTE1(v223);
              int v119 = v223;
              uint64_t v118 = v224;
            }
            uint64_t v120 = v211;
            uint64_t v225 = v211++;
            if (v117) {
              uint64_t v121 = 0;
            }
            else {
              uint64_t v121 = v120;
            }
            if (v119)
            {
              char v122 = (char *)v118 + 32 * v121;
              unint64_t v124 = (void *)*((void *)v122 + 1);
              unint64_t v123 = (const llvm::detail::DoubleAPFloat *)(v122 + 8);
              if (llvm::APFloatBase::PPCDoubleDouble(v118) == v124)
              {
                uint64_t v116 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v241, v123);
                if ((_BYTE)v223) {
                  goto LABEL_334;
                }
              }
              else
              {
                uint64_t v116 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v241, v123);
                if ((_BYTE)v223) {
                  goto LABEL_334;
                }
              }
            }
            else
            {
              uint64_t v116 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v118 + 24))(&v240);
              if ((_BYTE)v223) {
                goto LABEL_334;
              }
            }
            uint64_t v116 = v224;
            v224 = 0;
            if (v116) {
              uint64_t v116 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)v116 + 8))(v116);
            }
          }
LABEL_334:
          if (v229)
          {
            uint64_t v125 = v227;
            if (llvm::APFloatBase::PPCDoubleDouble(v116) == v125) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v224, (const llvm::detail::DoubleAPFloat *)&v227);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v224, (const llvm::detail::IEEEFloat *)&v227);
            }
          }
          else
          {
            LOWORD(v203) = (_WORD)v206;
            int v126 = BYTE1(v206);
            if ((_BYTE)v206)
            {
              unint64_t v127 = v207;
              v204 = v207;
              int v128 = 1;
            }
            else
            {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v207 + 16))(v207);
              int v126 = BYTE1(v203);
              int v128 = v203;
              unint64_t v127 = v204;
            }
            uint64_t v129 = v208;
            uint64_t v205 = v208++;
            if (v126) {
              uint64_t v130 = 0;
            }
            else {
              uint64_t v130 = v129;
            }
            if (v128)
            {
              char v131 = (char *)v127 + 32 * v130;
              char v133 = (void *)*((void *)v131 + 1);
              uint64_t v132 = (const llvm::detail::DoubleAPFloat *)(v131 + 8);
              if (llvm::APFloatBase::PPCDoubleDouble(v127) == v133)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v224, v132);
                if (!(_BYTE)v203)
                {
LABEL_351:
                  uint64_t v134 = v204;
                  v204 = 0;
                  if (v134) {
                    (*(void (**)(llvm::APFloatBase *))(*(void *)v134 + 8))(v134);
                  }
                }
              }
              else
              {
                llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v224, v132);
                if (!(_BYTE)v203) {
                  goto LABEL_351;
                }
              }
            }
            else
            {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)v127 + 24))(&v223);
              if (!(_BYTE)v203) {
                goto LABEL_351;
              }
            }
          }
          LOBYTE(v203) = 0;
          llvm::APFloat::convert((uint64_t)&v240, v113, 1, &v203);
          LOBYTE(v203) = 0;
          llvm::APFloat::convert((uint64_t)&v223, v113, 1, &v203);
          if (*((unsigned char *)v218 + v114)) {
            uint64_t v135 = &v240;
          }
          else {
            uint64_t v135 = &v223;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&ArgOperands, (unint64_t)v135, 1);
          unint64_t v137 = (llvm::detail::IEEEFloat *)((char *)ArgOperands + 32 * Type + 8);
          char v139 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
          uint64_t v138 = (llvm::APFloatBase *)*((void *)Address + 1);
          uint64_t v140 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
          if (v140 == v138) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v137, v139);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat(v137, v139);
          }
          LODWORD(Type) = Type + 1;
          if (v140 == v224) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v224);
          }
          if (v140 == v241) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v241);
          }
          if (v111 == ++v114) {
            goto LABEL_364;
          }
        }
      }
      uint64_t ArgOperands = &v236;
      uint64_t Type = 0x400000000;
      LOBYTE(v230) = 0;
      LOBYTE(j) = 0;
      LOBYTE(v226) = 0;
      LOBYTE(i) = 0;
      if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v214))
      {
LABEL_402:
        if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v212))
        {
LABEL_430:
          mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v214, (uint64_t)&v240);
          LOWORD(v223) = v240;
          if ((_BYTE)v240) {
            v224 = v241;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v241 + 16))(&v224);
          }
          uint64_t v225 = v242;
          if (!v243)
          {
            uint64_t v163 = v245;
            uint64_t v245 = 0;
            if (v163) {
              (*(void (**)(uint64_t))(*(void *)v163 + 8))(v163);
            }
          }
          if (!(_BYTE)v240)
          {
            char v164 = v241;
            v241 = 0;
            if (v164) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v164 + 8))(v164);
            }
          }
          mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v212, (uint64_t)&v240);
          LOWORD(v209) = v240;
          if ((_BYTE)v240) {
            uint64_t v210 = v241;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v241 + 16))(&v210);
          }
          uint64_t v211 = v242;
          if (!v243)
          {
            uint64_t v165 = v245;
            uint64_t v245 = 0;
            if (v165) {
              (*(void (**)(uint64_t))(*(void *)v165 + 8))(v165);
            }
          }
          if (!(_BYTE)v240)
          {
            uint64_t v166 = v241;
            v241 = 0;
            if (v166) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v166 + 8))(v166);
            }
          }
          unint64_t v167 = v219;
          unint64_t v168 = mlir::ElementsAttr::getNumElements((uint64_t)v214, v215);
          unint64_t v169 = mlir::ElementsAttr::getNumElements((uint64_t)v212, v213);
          if (v168 <= v169) {
            unint64_t v170 = v169;
          }
          else {
            unint64_t v170 = v168;
          }
          if (v167 <= v170) {
            unint64_t v167 = v170;
          }
          if (!v167)
          {
LABEL_513:
            uint64_t v193 = mlir::ShapedType::getShape((mlir::ShapedType *)v221);
            unint64_t v195 = (void *)mlir::RankedTensorType::get(v193, v194, v66, 0);
            __int16 v196 = mlir::createElementsAttr(v195, ArgOperands, Type);
            if (!(_BYTE)v209)
            {
              char v197 = v210;
              uint64_t v210 = 0;
              if (v197) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v197 + 8))(v197);
              }
            }
            if (!(_BYTE)v223)
            {
              long long v198 = v224;
              v224 = 0;
              if (v198) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v198 + 8))(v198);
              }
            }
            if ((_BYTE)i && v227 >= 0x41 && v226) {
              MEMORY[0x21667D390](v226, 0x1000C8000313F17);
            }
            if ((_BYTE)j && v231 >= 0x41 && v230) {
              MEMORY[0x21667D390](v230, 0x1000C8000313F17);
            }
            __int16 v199 = (char *)ArgOperands;
            if (Type)
            {
              uint64_t v200 = 16 * Type;
              do
              {
                if (*(_DWORD *)&v199[v200 - 8] >= 0x41u)
                {
                  uint64_t v201 = *(void *)&v199[v200 - 16];
                  if (v201) {
                    MEMORY[0x21667D390](v201, 0x1000C8000313F17);
                  }
                }
                v200 -= 16;
              }
              while (v200);
              __int16 v199 = (char *)ArgOperands;
            }
            unint64_t v56 = (unint64_t)v196 & 0xFFFFFFFFFFFFFFFBLL;
            if (v199 != (char *)&v236) {
              free(v199);
            }
            goto LABEL_200;
          }
          uint64_t v171 = 0;
          while (1)
          {
            if ((_BYTE)j)
            {
              LODWORD(v207) = v231;
              if (v231 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v206, (const llvm::APInt *)&v230);
              }
              uint64_t v206 = v230;
              goto LABEL_475;
            }
            LOWORD(v240) = v223;
            int v172 = BYTE1(v223);
            if ((_BYTE)v223)
            {
              unint64_t v173 = v224;
              v241 = v224;
              int v174 = 1;
            }
            else
            {
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v224 + 16))(&v241);
              int v172 = BYTE1(v240);
              int v174 = v240;
              unint64_t v173 = v241;
            }
            uint64_t v175 = v225;
            uint64_t v242 = v225++;
            uint64_t v176 = v172 ? 0 : v175;
            if (!v174) {
              break;
            }
            unsigned int v177 = (llvm::APFloatBase *)((char *)v173 + 16 * v176);
            LODWORD(v207) = *((_DWORD *)v177 + 2);
            if (v207 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v206, v177);
            }
            uint64_t v206 = *(void **)v177;
            if (!(_BYTE)v240) {
              goto LABEL_473;
            }
LABEL_475:
            if ((_BYTE)i)
            {
              LODWORD(v204) = v227;
              if (v227 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v203, (const llvm::APInt *)&v226);
              }
              unint64_t v203 = v226;
            }
            else
            {
              LOWORD(v240) = (_WORD)v209;
              int v179 = BYTE1(v209);
              if ((_BYTE)v209)
              {
                unint64_t v180 = v210;
                v241 = v210;
                int v181 = 1;
              }
              else
              {
                (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v210 + 16))(&v241);
                int v179 = BYTE1(v240);
                int v181 = v240;
                unint64_t v180 = v241;
              }
              uint64_t v182 = v211;
              uint64_t v242 = v211++;
              if (v179) {
                uint64_t v183 = 0;
              }
              else {
                uint64_t v183 = v182;
              }
              if (v181)
              {
                uint64_t v184 = (llvm::APFloatBase *)((char *)v180 + 16 * v183);
                LODWORD(v204) = *((_DWORD *)v184 + 2);
                if (v204 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v203, v184);
                }
                unint64_t v203 = *(void **)v184;
                if ((_BYTE)v240) {
                  goto LABEL_494;
                }
LABEL_492:
                uint64_t v185 = v241;
                v241 = 0;
                if (v185) {
                  (*(void (**)(llvm::APFloatBase *))(*(void *)v185 + 8))(v185);
                }
                goto LABEL_494;
              }
              (*(void (**)(void **__return_ptr))(*(void *)v180 + 24))(&v203);
              if (!(_BYTE)v240) {
                goto LABEL_492;
              }
            }
LABEL_494:
            if (*((unsigned char *)v218 + v171)) {
              char v186 = &v206;
            }
            else {
              char v186 = &v203;
            }
            unint64_t v187 = (char *)ArgOperands;
            if (Type >= HIDWORD(Type))
            {
              unint64_t v190 = Type + 1;
              if (ArgOperands <= v186 && (char *)ArgOperands + 16 * Type > (char *)v186)
              {
                int64_t v192 = (char *)v186 - (unsigned char *)ArgOperands;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v190);
                unint64_t v187 = (char *)ArgOperands;
                char v186 = (char *)ArgOperands + v192;
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v190);
                unint64_t v187 = (char *)ArgOperands;
              }
            }
            uint64_t v188 = (llvm::APInt *)&v187[16 * Type];
            unsigned int v189 = *((_DWORD *)v186 + 2);
            *((_DWORD *)v188 + 2) = v189;
            if (v189 > 0x40) {
              llvm::APInt::initSlowCase(v188, (const llvm::APInt *)v186);
            }
            *(void *)uint64_t v188 = *v186;
            LODWORD(Type) = Type + 1;
            if (v204 >= 0x41 && v203) {
              MEMORY[0x21667D390](v203, 0x1000C8000313F17);
            }
            if (v207 >= 0x41 && v206) {
              MEMORY[0x21667D390](v206, 0x1000C8000313F17);
            }
            if (v167 == ++v171) {
              goto LABEL_513;
            }
          }
          (*(void (**)(void **__return_ptr))(*(void *)v173 + 24))(&v206);
          if ((_BYTE)v240) {
            goto LABEL_475;
          }
LABEL_473:
          unint64_t v178 = v241;
          v241 = 0;
          if (v178) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v178 + 8))(v178);
          }
          goto LABEL_475;
        }
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v212, (uint64_t)&v240);
        LOWORD(v223) = v240;
        if ((_BYTE)v240)
        {
          char v157 = v241;
          v224 = v241;
          uint64_t v225 = v242;
          if (BYTE1(v240)) {
            uint64_t v158 = 0;
          }
          else {
            uint64_t v158 = v242;
          }
        }
        else
        {
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v241 + 16))(&v224);
          char v157 = v224;
          uint64_t v225 = v242;
          if (BYTE1(v223)) {
            uint64_t v158 = 0;
          }
          else {
            uint64_t v158 = v242;
          }
          if (!(_BYTE)v223)
          {
            (*(void (**)(void **__return_ptr))(*(void *)v224 + 24))(&v209);
LABEL_415:
            if ((_BYTE)i)
            {
              if (v227 >= 0x41 && v226) {
                MEMORY[0x21667D390](v226, 0x1000C8000313F17);
              }
              uint64_t v226 = v209;
              LODWORD(v227) = v210;
              LODWORD(v210) = 0;
            }
            else
            {
              LODWORD(v227) = v210;
              uint64_t v226 = v209;
              LODWORD(v210) = 0;
              LOBYTE(i) = 1;
            }
            if (!(_BYTE)v223)
            {
              uint64_t v160 = v224;
              v224 = 0;
              if (v160) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v160 + 8))(v160);
              }
            }
            if (!v243)
            {
              uint64_t v161 = v245;
              uint64_t v245 = 0;
              if (v161) {
                (*(void (**)(uint64_t))(*(void *)v161 + 8))(v161);
              }
            }
            if (!(_BYTE)v240)
            {
              unint64_t v162 = v241;
              v241 = 0;
              if (v162) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v162 + 8))(v162);
              }
            }
            goto LABEL_430;
          }
        }
        uint64_t v159 = (llvm::APFloatBase *)((char *)v157 + 16 * v158);
        LODWORD(v210) = *((_DWORD *)v159 + 2);
        if (v210 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v209, v159);
        }
        uint64_t v209 = *(void **)v159;
        goto LABEL_415;
      }
      mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v214, (uint64_t)&v240);
      LOWORD(v223) = v240;
      if ((_BYTE)v240)
      {
        BOOL v79 = v241;
        v224 = v241;
        uint64_t v225 = v242;
        if (BYTE1(v240)) {
          uint64_t v80 = 0;
        }
        else {
          uint64_t v80 = v242;
        }
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v241 + 16))(&v224);
        BOOL v79 = v224;
        uint64_t v225 = v242;
        if (BYTE1(v223)) {
          uint64_t v80 = 0;
        }
        else {
          uint64_t v80 = v242;
        }
        if (!(_BYTE)v223)
        {
          (*(void (**)(void **__return_ptr))(*(void *)v224 + 24))(&v209);
LABEL_387:
          if ((_BYTE)j)
          {
            if (v231 >= 0x41 && v230) {
              MEMORY[0x21667D390](v230, 0x1000C8000313F17);
            }
            v230 = v209;
            LODWORD(v231) = v210;
            LODWORD(v210) = 0;
          }
          else
          {
            LODWORD(v231) = v210;
            v230 = v209;
            LODWORD(v210) = 0;
            LOBYTE(j) = 1;
          }
          if (!(_BYTE)v223)
          {
            unint64_t v154 = v224;
            v224 = 0;
            if (v154) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v154 + 8))(v154);
            }
          }
          if (!v243)
          {
            uint64_t v155 = v245;
            uint64_t v245 = 0;
            if (v155) {
              (*(void (**)(uint64_t))(*(void *)v155 + 8))(v155);
            }
          }
          if (!(_BYTE)v240)
          {
            char v156 = v241;
            v241 = 0;
            if (v156) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v156 + 8))(v156);
            }
          }
          goto LABEL_402;
        }
      }
      unsigned int v84 = (llvm::APFloatBase *)((char *)v79 + 16 * v80);
      LODWORD(v210) = *((_DWORD *)v84 + 2);
      if (v210 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v209, v84);
      }
      uint64_t v209 = *(void **)v84;
      goto LABEL_387;
    }
LABEL_199:
    unint64_t v56 = 0;
  }
LABEL_200:
  if (v218 != &v220) {
    free(v218);
  }
  return v56;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldSelectOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldPowerOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  uint64_t v103 = a2;
  uint64_t v5 = a3[1];
  if (!v5)
  {
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    return 0;
  }
  uint64_t v101 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v5);
  uint64_t v102 = v6;
  if (!v101) {
    return 0;
  }
  unint64_t v7 = *a3;
  if (*a3) {
    unint64_t v7 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v7);
  }
  if (!v7)
  {
    unint64_t v10 = (llvm::APFloatBase *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v103) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10) {
      goto LABEL_19;
    }
    uint64_t v11 = *(void *)v10;
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *(unsigned int *)(v11 + 16);
    if (!v13) {
      goto LABEL_19;
    }
    uint64_t v14 = *(void **)(v11 + 8);
    uint64_t v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      uint64_t v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      uint64_t v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        uint64_t v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_19:
    }
      uint64_t v20 = 0;
    uint64_t v116 = v10;
    uint64_t v117 = v20;
    if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v101)) {
      return 0;
    }
    uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf(v101);
    mlir::ElementsAttr::value_begin<mlir::Attribute>((mlir::BranchOpInterface *)&v101, (uint64_t)&Type);
    if (BYTE1(Type)) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v131;
    }
    if ((_BYTE)Type)
    {
      uint64_t v22 = v130[v21];
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t))(*v130 + 24))(v130, v21);
      if (!(_BYTE)Type)
      {
        uint64_t v70 = v130;
        uint64_t v130 = 0;
        if (v70) {
          (*(void (**)(void *))(*v70 + 8))(v70);
        }
      }
    }
    uint64_t v71 = *(void **)(*(void *)v22 + 136);
    if (v71 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      if (v71 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
        return 0;
      }
      BOOL v126 = v22;
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v126, (uint64_t)&Type);
      uint64_t v80 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v124, 1.0);
      uint64_t v81 = llvm::APFloatBase::IEEEsingle(v80);
      llvm::APFloat::Storage::Storage(&v127, &v124, v81);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v124);
      unsigned int v82 = v130;
      uint64_t v83 = v127;
      BOOL v85 = llvm::APFloatBase::PPCDoubleDouble(v84);
      if (v82 == v83)
      {
        if (v85 == v82) {
          int IsEqual = llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)&v130, (const llvm::detail::DoubleAPFloat *)&v127);
        }
        else {
          int IsEqual = llvm::detail::IEEEFloat::bitwiseIsEqual((llvm::detail::IEEEFloat *)&v130, (const llvm::detail::IEEEFloat *)&v127);
        }
        int v86 = IsEqual;
      }
      else
      {
        int v86 = 0;
      }
      if (v85 == v127) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v127);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v127);
      }
      if (v86)
      {
        unint64_t v25 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v103) | 4;
LABEL_131:
        if (v85 == v130) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v130);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v130);
        }
        return v25;
      }
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v124, 0.0);
      llvm::APFloat::Storage::Storage(&v127, &v124, v81);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v124);
      if (v130 != v127) {
        goto LABEL_134;
      }
      if (v85 == v130)
      {
        if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)&v130, (const llvm::detail::DoubleAPFloat *)&v127))goto LABEL_143; {
      }
        }
      else if (llvm::detail::IEEEFloat::bitwiseIsEqual((llvm::detail::IEEEFloat *)&v130, (const llvm::detail::IEEEFloat *)&v127))
      {
LABEL_143:
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v116))
        {
          uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v116);
          if (v94)
          {
            uint64_t v95 = 8 * v94 - 8;
            do
            {
              uint64_t v96 = *Shape++;
              BOOL v97 = v96 != 0x8000000000000000;
              BOOL v98 = v96 == 0x8000000000000000 || v95 == 0;
              v95 -= 8;
            }
            while (!v98);
          }
          else
          {
            BOOL v97 = 1;
          }
        }
        else
        {
          BOOL v97 = 0;
        }
        if (v85 == v127) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v127);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v127);
        }
        if (v97)
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v124, 1.0);
          llvm::APFloat::Storage::Storage(&v127, &v124, v81);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v124);
          LOBYTE(v124) = 0;
          llvm::APFloat::convert((uint64_t)&v126, v130, 1, &v124);
          if (v85 == v127) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v125, (const llvm::detail::DoubleAPFloat *)&v127);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v125, (const llvm::detail::IEEEFloat *)&v127);
          }
          uint64_t v100 = mlir::DenseElementsAttr::get(v116, v117, (uint64_t)&v124, 1);
          if (v85 == (void *)v125[0]) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v125);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v125);
          }
          unint64_t v25 = v100 & 0xFFFFFFFFFFFFFFFBLL;
          if (v85 == v127) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v127);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v127);
          }
          goto LABEL_131;
        }
LABEL_166:
        if (v85 == v130) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v130);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v130);
        }
        return 0;
      }
LABEL_134:
      if (v85 == v127) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v127);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v127);
      }
      goto LABEL_166;
    }
    BOOL v126 = v22;
    mlir::IntegerAttr::getValue((uint64_t)&v126, (llvm::APInt *)&Type);
    int v73 = (int)v130;
    if (v130 > 0x40)
    {
      int v87 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&Type);
      if (v87 == v73 - 1)
      {
LABEL_103:
        unint64_t v25 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v103) | 4;
LABEL_104:
        if (v130 >= 0x41 && Type) {
          MEMORY[0x21667D390](Type, 0x1000C8000313F17);
        }
        return v25;
      }
      if (v87 != v73)
      {
LABEL_120:
        if (Type)
        {
          MEMORY[0x21667D390](Type, 0x1000C8000313F17);
          return 0;
        }
        return 0;
      }
    }
    else if (Type)
    {
      if (Type != (void *)1) {
        return 0;
      }
      goto LABEL_103;
    }
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v116))
    {
      int v88 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v116);
      if (!v89)
      {
LABEL_115:
        unsigned int v91 = v130;
        mlir::Type::isSignedInteger((mlir::Type *)&ElementTypeOrSelf);
        LODWORD(v127) = v91;
        if (v91 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v126);
        }
        BOOL v126 = v91 != 0;
        LODWORD(v125[0]) = v91;
        BOOL v124 = v126;
        uint64_t v99 = mlir::DenseElementsAttr::get((uint64_t)v116, v117, (llvm::APInt *)&v124, 1);
        if (LODWORD(v125[0]) >= 0x41 && v124) {
          MEMORY[0x21667D390](v124, 0x1000C8000313F17);
        }
        unint64_t v25 = v99 & 0xFFFFFFFFFFFFFFFBLL;
        if (v127 >= 0x41 && v126) {
          MEMORY[0x21667D390](v126, 0x1000C8000313F17);
        }
        goto LABEL_104;
      }
      uint64_t v90 = 8 * v89;
      while (*v88 != 0x8000000000000000)
      {
        ++v88;
        v90 -= 8;
        if (!v90) {
          goto LABEL_115;
        }
      }
    }
    if (v130 < 0x41) {
      return 0;
    }
    goto LABEL_120;
  }
  mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v103);
  uint64_t v123 = a2;
  if (*a3)
  {
    unint64_t v9 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  v122[0] = v9;
  v122[1] = v8;
  unint64_t v23 = a3[1];
  if (v23) {
    unint64_t v23 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v23);
  }
  else {
    uint64_t v24 = 0;
  }
  unint64_t v25 = 0;
  v121[0] = v23;
  v121[1] = v24;
  if (v9 && v23)
  {
    uint64_t v26 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v123) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v26) {
      goto LABEL_41;
    }
    uint64_t v27 = *v26;
    unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v29 = *(unsigned int *)(v27 + 16);
    if (!v29) {
      goto LABEL_41;
    }
    unint64_t v30 = *(void **)(v27 + 8);
    uint64_t v31 = &v30[2 * v29];
    do
    {
      unint64_t v32 = v29 >> 1;
      int v33 = &v30[2 * (v29 >> 1)];
      unint64_t v35 = *v33;
      uint64_t v34 = v33 + 2;
      v29 += ~(v29 >> 1);
      if (v35 < v28) {
        unint64_t v30 = v34;
      }
      else {
        unint64_t v29 = v32;
      }
    }
    while (v29);
    if (v30 != v31 && *v30 == v28) {
      uint64_t v36 = v30[1];
    }
    else {
LABEL_41:
    }
      uint64_t v36 = 0;
    int v119 = v26;
    uint64_t v120 = v36;
    uint64_t Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v122);
    uint64_t v130 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v121);
    unint64_t ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision(&Type, 2);
    if (!ElementTypeWithLargestPrecision) {
      return 0;
    }
    uint64_t v38 = (uint64_t)ElementTypeWithLargestPrecision;
    mlir::mps::CPUNDArray::CPUNDArray(&Type);
    mlir::mps::CPUNDArray::CPUNDArray(&v126);
    v118[0] = 0;
    v118[1] = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v119))
    {
      uint64_t v39 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v119);
      if (!v40) {
        goto LABEL_60;
      }
      uint64_t v41 = 8 * v40;
      while (*v39 != 0x8000000000000000)
      {
        ++v39;
        v41 -= 8;
        if (!v41) {
          goto LABEL_60;
        }
      }
    }
    uint64_t v42 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v122);
    uint64_t v43 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v121);
    Broadcasteduint64_t Type = (void *)mlir::OpTrait::util::getBroadcastedType(v42, v43, 0);
    if (!BroadcastedType)
    {
      unint64_t v25 = 0;
      int v119 = 0;
      uint64_t v120 = 0;
LABEL_99:
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)&v126);
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)&Type);
      return v25;
    }
    unint64_t v45 = BroadcastedType;
    uint64_t v46 = *BroadcastedType;
    unint64_t v47 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v48 = *(unsigned int *)(v46 + 16);
    if (!v48) {
      goto LABEL_58;
    }
    uint64_t v49 = *(void **)(v46 + 8);
    uint64_t v50 = &v49[2 * v48];
    do
    {
      unint64_t v51 = v48 >> 1;
      uint64_t v52 = &v49[2 * (v48 >> 1)];
      unint64_t v54 = *v52;
      uint64_t v53 = v52 + 2;
      v48 += ~(v48 >> 1);
      if (v54 < v47) {
        uint64_t v49 = v53;
      }
      else {
        unint64_t v48 = v51;
      }
    }
    while (v48);
    if (v49 != v50 && *v49 == v47) {
      uint64_t v55 = v49[1];
    }
    else {
LABEL_58:
    }
      uint64_t v55 = 0;
    int v119 = v45;
    uint64_t v120 = v55;
LABEL_60:
    if (v38 == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v119))
    {
      uint64_t v59 = (uint64_t)v119;
      uint64_t v69 = v120;
    }
    else
    {
      uint64_t v56 = mlir::ShapedType::getShape((mlir::ShapedType *)&v119);
      unint64_t v58 = (uint64_t *)mlir::RankedTensorType::get(v56, v57, v38, 0);
      uint64_t v59 = (uint64_t)v58;
      if (!v58) {
        goto LABEL_70;
      }
      uint64_t v60 = *v58;
      unint64_t v61 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v62 = *(unsigned int *)(v60 + 16);
      if (!v62) {
        goto LABEL_70;
      }
      uint64_t v63 = *(void **)(v60 + 8);
      uint64_t v64 = &v63[2 * v62];
      do
      {
        unint64_t v65 = v62 >> 1;
        uint64_t v66 = &v63[2 * (v62 >> 1)];
        unint64_t v68 = *v66;
        int64_t v67 = v66 + 2;
        v62 += ~(v62 >> 1);
        if (v68 < v61) {
          uint64_t v63 = v67;
        }
        else {
          unint64_t v62 = v65;
        }
      }
      while (v62);
      if (v63 != v64 && *v63 == v61) {
        uint64_t v69 = v63[1];
      }
      else {
LABEL_70:
      }
        uint64_t v69 = 0;
      int v119 = (void *)v59;
      uint64_t v120 = v69;
    }
    mlir::mps::CPUNDArray::tryMakeAliasedArray(v59, v69, (uint64_t)v118, (uint64_t)&v124);
    mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)&v116, 4);
    if (v131 <= v128) {
      int v74 = v128;
    }
    else {
      int v74 = v131;
    }
    uint64_t v75 = operator new(0x10uLL);
    uint64_t v114 = v75 + 2;
    unint64_t v115 = v75 + 2;
    void *v75 = &Type;
    v75[1] = &v126;
    uint64_t ElementTypeOrSelf = v75;
    char v76 = operator new(8uLL);
    unint64_t v110 = v76;
    *char v76 = &v124;
    unint64_t v111 = v76 + 1;
    unint64_t v112 = v76 + 1;
    uint64_t v77 = operator new(0x10uLL);
    uint64_t v108 = v77 + 2;
    unint64_t v109 = v77 + 2;
    *uint64_t v77 = 0;
    v77[1] = 0;
    unint64_t v107 = v77;
    uint64_t v78 = operator new(8uLL);
    __p = v78;
    *uint64_t v78 = 0;
    uint64_t v105 = v78 + 1;
    uint64_t v106 = v78 + 1;
    mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)&v116, (uint64_t *)&ElementTypeOrSelf, (uint64_t **)&v110, (uint64_t)&v107, (uint64_t)&__p, 0, v74, (uint64_t)&v116);
    if (__p)
    {
      uint64_t v105 = __p;
      operator delete(__p);
    }
    if (v107)
    {
      uint64_t v108 = v107;
      operator delete(v107);
    }
    if (v110)
    {
      unint64_t v111 = v110;
      operator delete(v110);
    }
    if (ElementTypeOrSelf)
    {
      uint64_t v114 = ElementTypeOrSelf;
      operator delete(ElementTypeOrSelf);
    }
    unint64_t ElementsAttr = v118[0];
    if (!v118[0]) {
      unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)&v124, 0, 0);
    }
    unint64_t v25 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
    mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)&v124);
    goto LABEL_99;
  }
  return v25;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldPowerOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldTransposeOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (*a3)
  {
    uint64_t v4 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }

  return mlir::mps::foldTransposeOp(a2, (uint64_t)v4, v6, 0);
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldTransposeOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldPermuteOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v92[4] = *MEMORY[0x263EF8340];
  uint64_t v86 = a2;
  uint64_t v4 = a3[1];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v4);
  uint64_t v7 = v6;
  if (!v5) {
    return 0;
  }
  uint64_t v8 = (uint64_t *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v86) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_14;
  }
  unint64_t v12 = *(void **)(v9 + 8);
  unint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    unint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      unint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_14:
  }
    uint64_t v18 = 0;
  v85[0] = v8;
  v85[1] = v18;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85)) {
    return 0;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v85);
  unint64_t v20 = v19;
  uint64_t v90 = v92;
  uint64_t v91 = 0x400000000;
  mlir::getIntValues<long long>((uint64_t)v5, v7, (uint64_t)&v90, 1);
  if (v91)
  {
    uint64_t v21 = v90;
    uint64_t v22 = 8 * v91;
    do
    {
      *uint64_t v21 = mlir::getPositiveAxis(*v21, v20);
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  int v87 = (int64x2_t *)v89;
  uint64_t v88 = 0x400000000;
  if (!v20)
  {
    uint64_t v27 = 0;
    uint64_t v24 = (int64x2_t *)v89;
    goto LABEL_35;
  }
  if (v20 < 5)
  {
    uint64_t v23 = 0;
    uint64_t v24 = (int64x2_t *)v89;
    unint64_t v25 = v20;
    goto LABEL_26;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v20, 8);
  uint64_t v23 = v88;
  uint64_t v24 = v87;
  unint64_t v25 = v20 - v88;
  if (v20 != v88) {
LABEL_26:
  }
    bzero((char *)v24 + 8 * v23, 8 * v25);
  LODWORD(v88) = v20;
  if (!v20)
  {
    uint64_t v27 = 0;
    goto LABEL_35;
  }
  uint64_t v27 = v20;
  unint64_t v28 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v28 < 3)
  {
    uint64_t v29 = 0;
    unint64_t v30 = (uint64_t *)v24;
    do
LABEL_34:
      *v30++ = v29++;
    while (v30 != (uint64_t *)((char *)v24 + 8 * v20));
    goto LABEL_35;
  }
  unint64_t v31 = v28 + 1;
  uint64_t v29 = (v28 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  unint64_t v30 = &v24->i64[v29];
  int64x2_t v32 = (int64x2_t)xmmword_211ED5A80;
  int v33 = v24 + 1;
  int64x2_t v34 = vdupq_n_s64(2uLL);
  int64x2_t v35 = vdupq_n_s64(4uLL);
  uint64_t v36 = v29;
  do
  {
    v33[-1] = v32;
    *int v33 = vaddq_s64(v32, v34);
    int64x2_t v32 = vaddq_s64(v32, v35);
    v33 += 2;
    v36 -= 4;
  }
  while (v36);
  if (v31 != v29) {
    goto LABEL_34;
  }
LABEL_35:
  if (v91 == v20 && !memcmp(v90, v24, 8 * v27))
  {
    unint64_t v26 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v86) | 4;
  }
  else
  {
    BOOL v37 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v86) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v37) {
      goto LABEL_46;
    }
    uint64_t v38 = *v37;
    unint64_t v39 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v40 = *(unsigned int *)(v38 + 16);
    if (!v40) {
      goto LABEL_46;
    }
    uint64_t v41 = *(void **)(v38 + 8);
    uint64_t v42 = &v41[2 * v40];
    do
    {
      unint64_t v43 = v40 >> 1;
      uint64_t v44 = &v41[2 * (v40 >> 1)];
      unint64_t v46 = *v44;
      unint64_t v45 = v44 + 2;
      v40 += ~(v40 >> 1);
      if (v46 < v39) {
        uint64_t v41 = v45;
      }
      else {
        unint64_t v40 = v43;
      }
    }
    while (v40);
    if (v41 != v42 && *v41 == v39) {
      uint64_t v47 = v41[1];
    }
    else {
LABEL_46:
    }
      uint64_t v47 = 0;
    v84[0] = v37;
    v84[1] = v47;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v84))
    {
      if (*a3)
      {
        unsigned int v82 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
        uint64_t v83 = v48;
        if (v82)
        {
          uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v84);
          uint64_t v51 = v50;
          v81[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v82);
          v81[1] = v52;
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v81);
          unint64_t v54 = (uint64_t *)mlir::RankedTensorType::get(Shape, v51, OperandRange, 0);
          if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v82))
          {
            uint64_t v55 = (uint64_t)v82;
            uint64_t v56 = v83;
            if (!v54) {
              goto LABEL_60;
            }
            uint64_t v57 = *v54;
            unint64_t v58 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v59 = *(unsigned int *)(v57 + 16);
            if (!v59) {
              goto LABEL_60;
            }
            uint64_t v60 = *(void **)(v57 + 8);
            unint64_t v61 = &v60[2 * v59];
            do
            {
              unint64_t v62 = v59 >> 1;
              uint64_t v63 = &v60[2 * (v59 >> 1)];
              unint64_t v65 = *v63;
              uint64_t v64 = v63 + 2;
              v59 += ~(v59 >> 1);
              if (v65 < v58) {
                uint64_t v60 = v64;
              }
              else {
                unint64_t v59 = v62;
              }
            }
            while (v59);
            if (v60 != v61 && *v60 == v58) {
              uint64_t v66 = v60[1];
            }
            else {
LABEL_60:
            }
              uint64_t v66 = 0;
            unint64_t ElementsAttr = (unint64_t)mlir::reshapeElementsAttr(v55, v56, (uint64_t)v54, v66);
          }
          else
          {
            mlir::mps::CPUNDArray::CPUNDArray(v81);
            v80[0] = 0;
            v80[1] = 0;
            if (!v54) {
              goto LABEL_75;
            }
            uint64_t v68 = *v54;
            unint64_t v69 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v70 = *(unsigned int *)(v68 + 16);
            if (!v70) {
              goto LABEL_75;
            }
            uint64_t v71 = *(void **)(v68 + 8);
            char v72 = &v71[2 * v70];
            do
            {
              unint64_t v73 = v70 >> 1;
              int v74 = &v71[2 * (v70 >> 1)];
              unint64_t v76 = *v74;
              uint64_t v75 = v74 + 2;
              v70 += ~(v70 >> 1);
              if (v76 < v69) {
                uint64_t v71 = v75;
              }
              else {
                unint64_t v70 = v73;
              }
            }
            while (v70);
            if (v71 != v72 && *v71 == v69) {
              uint64_t v77 = v71[1];
            }
            else {
LABEL_75:
            }
              uint64_t v77 = 0;
            mlir::mps::CPUNDArray::tryMakeAliasedArray((uint64_t)v54, v77, (uint64_t)v80, (uint64_t)v79);
            mlir::mps::transpose((mlir::AffineBinaryOpExpr *)v81, (uint64_t)v79, (uint64_t)v90, v91);
            unint64_t ElementsAttr = v80[0];
            if (!v80[0]) {
              unint64_t ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v79, 0, 0);
            }
            mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v79);
            mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v81);
          }
          unint64_t v26 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
          goto LABEL_80;
        }
      }
      else
      {
        unsigned int v82 = 0;
        uint64_t v83 = 0;
      }
    }
    unint64_t v26 = 0;
  }
LABEL_80:
  if (v87 != (int64x2_t *)v89) {
    free(v87);
  }
  if (v90 != v92) {
    free(v90);
  }
  return v26;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldPermuteOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldScatterOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  v101[16] = *MEMORY[0x263EF8340];
  uint64_t v95 = a2;
    return 0;
  uint64_t v5 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v95);
  v94[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8));
  v94[1] = v6;
  if (!v94[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v94)
    || mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v95) != 6)
  {
    return 0;
  }
  uint64_t v7 = *a3;
  if (*a3) {
    uint64_t v7 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v92 = v7;
  uint64_t v93 = v8;
  uint64_t v9 = a3[1];
  if (v9) {
    uint64_t v9 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  v91[0] = v9;
  v91[1] = v10;
  unint64_t v11 = a3[2];
  if (v11)
  {
    unint64_t v11 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[2]);
    uint64_t v9 = (uint64_t *)v91[0];
  }
  else
  {
    uint64_t v12 = 0;
  }
  unint64_t v13 = 0;
  uint64_t v89 = v11;
  uint64_t v90 = v12;
  if (!v92 || !v9 || !v11) {
    return v13;
  }
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v92);
  BOOL v97 = v14;
  uint64_t OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  uint64_t v86 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v91);
  uint64_t v87 = v15;
  uint64_t v100 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v86);
  unint64_t ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision((void **)&OperandRange, 2);
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v94);
  unint64_t v19 = (void *)mlir::RankedTensorType::get(Shape, v18, (uint64_t)ElementTypeWithLargestPrecision, 0);
  uint64_t OperandRange = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v92);
  uint64_t v100 = v20;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v92, (uint64_t)&ArgOperands);
    uint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v92, v93);
    LOWORD(v86) = 257;
    uint64_t v87 = 0;
    uint64_t v88 = NumElements;
    llvm::SmallVector<llvm::APInt,4u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(&OperandRange, (uint64_t)&ArgOperands, (uint64_t)&v86);
    if (!(_BYTE)v86)
    {
      uint64_t v56 = v87;
      uint64_t v87 = 0;
      if (v56) {
        (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
      }
    }
    if (!(_BYTE)ArgOperands)
    {
      uint64_t v57 = (uint64_t)v97;
      BOOL v97 = 0;
      if (v57) {
        (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
      }
    }
    if (mlir::ElementsAttr::getNumElements((uint64_t)v89, v90) < 1)
    {
LABEL_154:
      unint64_t ElementsAttr = mlir::createElementsAttr(v19, OperandRange, v100);
      int v74 = (char *)OperandRange;
      if (v100)
      {
        uint64_t v75 = 16 * v100;
        do
        {
          if (*(_DWORD *)&v74[v75 - 8] >= 0x41u)
          {
            uint64_t v76 = *(void *)&v74[v75 - 16];
            if (v76) {
              MEMORY[0x21667D390](v76, 0x1000C8000313F17);
            }
          }
          v75 -= 16;
        }
        while (v75);
        int v74 = (char *)OperandRange;
      }
      unint64_t v13 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      if (v74 != (char *)v101) {
        free(v74);
      }
      return v13;
    }
    uint64_t v58 = 0;
    while (1)
    {
      mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v89, (uint64_t)&v80);
      __int16 v83 = v80;
      if ((_BYTE)v80) {
        break;
      }
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v81 + 16))(&v84);
      unint64_t v59 = v84;
      uint64_t v85 = v58 + v82;
      if (HIBYTE(v83)) {
        uint64_t v60 = 0;
      }
      else {
        uint64_t v60 = v58 + v82;
      }
      if ((_BYTE)v83) {
        goto LABEL_114;
      }
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v84 + 24))(&v77);
      LOBYTE(v62) = (_BYTE)v78;
      if (v78 <= 0x40)
      {
        uint64_t v63 = v77;
        goto LABEL_119;
      }
      uint64_t v64 = *v77;
      MEMORY[0x21667D390]();
      if ((_BYTE)v83) {
        goto LABEL_124;
      }
LABEL_122:
      unint64_t v65 = v84;
      unsigned int v84 = 0;
      if (v65) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v65 + 8))(v65);
      }
LABEL_124:
      if (!(_BYTE)v80)
      {
        uint64_t v66 = v81;
        uint64_t v81 = 0;
        if (v66) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v66 + 8))(v66);
        }
      }
      if (v64 < 0 || v64 >= mlir::ElementsAttr::getNumElements((uint64_t)v92, v93)) {
        goto LABEL_105;
      }
      mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)v91, (uint64_t)&v80);
      __int16 v83 = v80;
      if ((_BYTE)v80)
      {
        int64_t v67 = v81;
        unsigned int v84 = v81;
        uint64_t v85 = v58 + v82;
        if (HIBYTE(v80)) {
          uint64_t v68 = 0;
        }
        else {
          uint64_t v68 = v58 + v82;
        }
LABEL_137:
        unint64_t v69 = (llvm::APFloatBase *)((char *)v67 + 16 * v68);
        LODWORD(v78) = *((_DWORD *)v69 + 2);
        if (v78 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v77, v69);
        }
        uint64_t v77 = *(uint64_t **)v69;
        if ((_BYTE)v83) {
          goto LABEL_144;
        }
LABEL_142:
        unint64_t v70 = v84;
        unsigned int v84 = 0;
        if (v70) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v70 + 8))(v70);
        }
        goto LABEL_144;
      }
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v81 + 16))(&v84);
      int64_t v67 = v84;
      uint64_t v85 = v58 + v82;
      if (HIBYTE(v83)) {
        uint64_t v68 = 0;
      }
      else {
        uint64_t v68 = v58 + v82;
      }
      if ((_BYTE)v83) {
        goto LABEL_137;
      }
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v84 + 24))(&v77);
      if (!(_BYTE)v83) {
        goto LABEL_142;
      }
LABEL_144:
      if (!(_BYTE)v80)
      {
        uint64_t v71 = v81;
        uint64_t v81 = 0;
        if (v71) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v71 + 8))(v71);
        }
      }
      char v72 = (unsigned int *)((char *)OperandRange + 16 * v64);
      if (v72[2] > 0x40 || v78 > 0x40)
      {
        llvm::APInt::assignSlowCase(v72, (const llvm::APInt *)&v77);
      }
      else
      {
        *(void *)char v72 = v77;
        void v72[2] = v78;
      }
      if (v78 >= 0x41 && v77) {
        MEMORY[0x21667D390](v77, 0x1000C8000313F17);
      }
LABEL_105:
      if (++v58 >= mlir::ElementsAttr::getNumElements((uint64_t)v89, v90)) {
        goto LABEL_154;
      }
    }
    unint64_t v59 = v81;
    unsigned int v84 = v81;
    uint64_t v85 = v58 + v82;
    if (HIBYTE(v80)) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = v58 + v82;
    }
LABEL_114:
    unint64_t v61 = (llvm::APFloatBase *)((char *)v59 + 16 * v60);
    unsigned int v62 = *((_DWORD *)v61 + 2);
    LODWORD(v78) = v62;
    if (v62 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v77, v61);
    }
    uint64_t v63 = *(uint64_t **)v61;
    uint64_t v77 = *(uint64_t **)v61;
LABEL_119:
    uint64_t v64 = (uint64_t)((void)v63 << -(char)v62) >> -(char)v62;
    if ((_BYTE)v83) {
      goto LABEL_124;
    }
    goto LABEL_122;
  }
  uint64_t OperandRange = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v92);
  uint64_t v100 = v21;
  uint64_t v22 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange)
                 + 136);
  if (v22 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  uint64_t OperandRange = ElementTypeWithLargestPrecision;
  FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&OperandRange);
  mlir::ElementsAttr::value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v92, (uint64_t)&v86);
  __int16 v83 = 257;
  unsigned int v84 = 0;
  uint64_t v85 = mlir::ElementsAttr::getNumElements((uint64_t)v92, v93);
  llvm::SmallVector<llvm::APFloat,4u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>((uint64_t)&OperandRange, (uint64_t)&v86, (uint64_t)&v83);
  if (!(_BYTE)v83)
  {
    unint64_t v25 = v84;
    unsigned int v84 = 0;
    if (v25) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v25 + 8))(v25);
    }
  }
  if (!(_BYTE)v86)
  {
    uint64_t v26 = v87;
    uint64_t v87 = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
  }
  if (v100)
  {
    uint64_t v27 = (char *)OperandRange;
    uint64_t v28 = 32 * v100;
    do
    {
      LOBYTE(ArgOperands) = 0;
      llvm::APFloat::convert((uint64_t)v27, FloatSemantics, 1, &ArgOperands);
      v27 += 32;
      v28 -= 32;
    }
    while (v28);
  }
  if (mlir::ElementsAttr::getNumElements((uint64_t)v89, v90) >= 1)
  {
    uint64_t v29 = 0;
    while (1)
    {
      mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v89, (uint64_t)&v80);
      LOWORD(ArgOperands) = v80;
      if ((_BYTE)v80) {
        break;
      }
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v81 + 16))(&v97);
      unint64_t v30 = v97;
      uint64_t v98 = v29 + v82;
      if (BYTE1(ArgOperands)) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = v29 + v82;
      }
      if ((_BYTE)ArgOperands) {
        goto LABEL_53;
      }
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v97 + 24))(&v77);
      LOBYTE(v33) = (_BYTE)v78;
      if (v78 <= 0x40)
      {
        int64x2_t v34 = v77;
        goto LABEL_58;
      }
      uint64_t v35 = *v77;
      MEMORY[0x21667D390]();
      if ((_BYTE)ArgOperands) {
        goto LABEL_63;
      }
LABEL_61:
      uint64_t v36 = (uint64_t)v97;
      BOOL v97 = 0;
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
LABEL_63:
      if (!(_BYTE)v80)
      {
        BOOL v37 = v81;
        uint64_t v81 = 0;
        if (v37) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v37 + 8))(v37);
        }
      }
      if (v35 < 0 || v35 >= mlir::ElementsAttr::getNumElements((uint64_t)v92, v93)) {
        goto LABEL_44;
      }
      mlir::ElementsAttr::value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v91, (uint64_t)&v77);
      __int16 v80 = (__int16)v77;
      if ((_BYTE)v77)
      {
        uint64_t v38 = v78;
        uint64_t v81 = v78;
        uint64_t v82 = v29 + v79;
        if (BYTE1(v77)) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v29 + v79;
        }
LABEL_76:
        unint64_t v40 = (char *)v38 + 32 * v39;
        uint64_t v42 = (void *)*((void *)v40 + 1);
        uint64_t v41 = (const llvm::detail::DoubleAPFloat *)(v40 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v38) == v42)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v97, v41);
          if (!(_BYTE)v80) {
            goto LABEL_82;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v97, v41);
          if (!(_BYTE)v80) {
            goto LABEL_82;
          }
        }
        goto LABEL_84;
      }
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v78 + 16))(&v81);
      uint64_t v38 = v81;
      uint64_t v82 = v29 + v79;
      if (HIBYTE(v80)) {
        uint64_t v39 = 0;
      }
      else {
        uint64_t v39 = v29 + v79;
      }
      if ((_BYTE)v80) {
        goto LABEL_76;
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v81 + 24))(&ArgOperands);
      if (!(_BYTE)v80)
      {
LABEL_82:
        unint64_t v43 = v81;
        uint64_t v81 = 0;
        if (v43) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v43 + 8))(v43);
        }
      }
LABEL_84:
      if (!(_BYTE)v77)
      {
        uint64_t v44 = v78;
        uint64_t v78 = 0;
        if (v44) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v44 + 8))(v44);
        }
      }
      LOBYTE(v80) = 0;
      llvm::APFloat::convert((uint64_t)&ArgOperands, FloatSemantics, 1, &v80);
      unint64_t v45 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)((char *)OperandRange + 32 * v35 + 8), (uint64_t *)&v97);
      unint64_t v46 = v97;
      if (llvm::APFloatBase::PPCDoubleDouble(v45) == v46) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v97);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v97);
      }
LABEL_44:
      if (++v29 >= mlir::ElementsAttr::getNumElements((uint64_t)v89, v90)) {
        goto LABEL_89;
      }
    }
    unint64_t v30 = v81;
    BOOL v97 = v81;
    uint64_t v98 = v29 + v82;
    if (HIBYTE(v80)) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v29 + v82;
    }
LABEL_53:
    int64x2_t v32 = (llvm::APFloatBase *)((char *)v30 + 16 * v31);
    unsigned int v33 = *((_DWORD *)v32 + 2);
    LODWORD(v78) = v33;
    if (v33 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v77, v32);
    }
    int64x2_t v34 = *(uint64_t **)v32;
    uint64_t v77 = *(uint64_t **)v32;
LABEL_58:
    uint64_t v35 = (uint64_t)((void)v34 << -(char)v33) >> -(char)v33;
    if ((_BYTE)ArgOperands) {
      goto LABEL_63;
    }
    goto LABEL_61;
  }
LABEL_89:
  uint64_t v47 = (llvm::APFloatBase *)mlir::createElementsAttr(v19, (uint64_t)OperandRange, v100);
  uint64_t v48 = v47;
  uint64_t v49 = (char *)OperandRange;
  uint64_t v50 = v100;
  if (v100)
  {
    uint64_t v51 = llvm::APFloatBase::PPCDoubleDouble(v47);
    uint64_t v52 = v49 - 24;
    uint64_t v53 = 32 * v50;
    do
    {
      while (1)
      {
        unint64_t v54 = (llvm::detail::DoubleAPFloat *)&v52[v53];
        if (v51 != *(void **)&v52[v53]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v54);
        v53 -= 32;
        if (!v53) {
          goto LABEL_94;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v54);
      v53 -= 32;
    }
    while (v53);
LABEL_94:
    uint64_t v49 = (char *)OperandRange;
  }
  unint64_t v13 = (unint64_t)v48 & 0xFFFFFFFFFFFFFFFBLL;
  if (v49 != (char *)v101) {
    free(v49);
  }
  return v13;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldScatterOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::mps::anonymous namespace'::verifyTriviallyFoldable(uint64_t **a1, uint64_t a2)
{
  if (!a2) {
    return (uint64_t *)1;
  }
  int v2 = a1;
  uint64_t v3 = &a1[a2];
  while (1)
  {
    uint64_t result = *v2;
    if (!*v2)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      return result;
    }
    uint64_t result = llvm::DefaultDoCastIfPossible<mlir::TypedAttr,mlir::Attribute const,llvm::CastInfo<mlir::TypedAttr,mlir::Attribute const,void>>::doCastIfPossible(result);
    uint64_t v15 = result;
    uint64_t v16 = v5;
    if (!result) {
      return result;
    }
    uint64_t canMapOperands = (uint64_t *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v15);
    v14[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(canMapOperands);
    v14[1] = v7;
    if (!v14[0]) {
      return 0;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v14)) {
      return 0;
    }
    mlir::ShapedType::getShape((mlir::ShapedType *)v14);
    if (v8 > 1 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v14)) {
      return 0;
    }
    uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v14);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      while (*Shape != 0x8000000000000000)
      {
        ++Shape;
        v11 -= 8;
        if (!v11) {
          goto LABEL_15;
        }
      }
      return 0;
    }
LABEL_15:
    uint64_t v12 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v14);
    if (mlir::ShapedType::getNumElements(v12, v13) >= 1025) {
      return 0;
    }
    if (++v2 == v3) {
      return (uint64_t *)1;
    }
  }
}

uint64_t mlir::ElementsAttr::value_begin<llvm::APInt>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = mlir::TypeID::get<llvm::APInt>();
  uint64_t result = mlir::BranchOpInterface::getSuccessorOperands(a1, v4);
  if (!v11) {
    mlir::ElementsAttr::value_begin<llvm::APInt>((llvm *)v9, (uint64_t *)a1);
  }
  char v6 = v9[1];
  if (v9[0])
  {
    uint64_t v7 = v10;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    uint64_t v7 = v10;
  }
  *(unsigned char *)a2 = v8;
  *(unsigned char *)(a2 + 1) = v6;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = 0;
  return result;
}

uint64_t *llvm::DefaultDoCastIfPossible<mlir::TypedAttr,mlir::Attribute const,llvm::CastInfo<mlir::TypedAttr,mlir::Attribute const,void>>::doCastIfPossible(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *a1;
  unint64_t v3 = mlir::TypeID::get<mlir::TypedAttr>();
  unint64_t v4 = *(unsigned int *)(v2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void **)(v2 + 8);
  char v6 = &v5[2 * v4];
  do
  {
    unint64_t v7 = v4 >> 1;
    char v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    uint64_t v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      uint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 == v6 || *v5 != v3 || !v5[1]) {
    return 0;
  }
  if (v1)
  {
    uint64_t v12 = *v1;
    unint64_t v13 = mlir::TypeID::get<mlir::TypedAttr>();
    unint64_t v14 = *(unsigned int *)(v12 + 16);
    if (v14)
    {
      uint64_t v15 = *(void **)(v12 + 8);
      do
      {
        unint64_t v16 = v14 >> 1;
        unint64_t v17 = &v15[2 * (v14 >> 1)];
        unint64_t v19 = *v17;
        uint64_t v18 = v17 + 2;
        v14 += ~(v14 >> 1);
        if (v19 < v13) {
          uint64_t v15 = v18;
        }
        else {
          unint64_t v14 = v16;
        }
      }
      while (v14);
    }
  }
  return v1;
}

const char *llvm::getTypeName<llvm::APInt>()
{
  uint64_t v5 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
  unint64_t v6 = 61;
  unint64_t v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = v6;
  }
  uint64_t v2 = &v5[v1];
  if (v6 - v1 >= 0x12) {
    uint64_t v3 = 18;
  }
  else {
    uint64_t v3 = v6 - v1;
  }
  return &v2[v3];
}

uint64_t mlir::TypeID::get<llvm::APInt>()
{
  unint64_t v0 = &unk_267771000;
  {
    unint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      unint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      unint64_t v11 = 61;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[284];
}

void *llvm::SmallVector<llvm::APInt,4u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v11[0] = *(unsigned char *)a2;
  v11[1] = *(unsigned char *)(a2 + 1);
  if (v11[0]) {
    v12[0] = *(void *)(a2 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a2 + 8) + 16))(v12);
  }
  v12[1] = *(void *)(a2 + 16);
  v9[0] = *(unsigned char *)a3;
  v9[1] = *(unsigned char *)(a3 + 1);
  if (v9[0]) {
    v10[0] = *(void *)(a3 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a3 + 8) + 16))(v10);
  }
  v10[1] = *(void *)(a3 + 16);
  llvm::SmallVectorImpl<llvm::APInt>::append<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>((uint64_t)a1, v11, v9);
  if (!v9[0])
  {
    uint64_t v6 = v10[0];
    v10[0] = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (!v11[0])
  {
    uint64_t v7 = v12[0];
    v12[0] = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  return a1;
}

llvm::APInt *llvm::SmallVectorImpl<llvm::APInt>::append<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(uint64_t a1, char *a2, char *a3)
{
  char v33 = *a2;
  char v34 = a2[1];
  if (v33) {
    v35[0] = *((void *)a2 + 1);
  }
  else {
    (*(void (**)(void *__return_ptr))(**((void **)a2 + 1) + 16))(v35);
  }
  v35[1] = *((void *)a2 + 2);
  char v30 = *a3;
  char v31 = a3[1];
  if (v30)
  {
    uint64_t v6 = (uint64_t *)(a3 + 16);
    long long v32 = *(_OWORD *)(a3 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr))(**((void **)a3 + 1) + 16))(&v32);
    uint64_t v6 = (uint64_t *)(a3 + 16);
    *((void *)&v32 + 1) = *((void *)a3 + 2);
    uint64_t v7 = v32;
    *(void *)&long long v32 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  if (!v33)
  {
    uint64_t v8 = v35[0];
    v35[0] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  char v26 = *a2;
  char v27 = a2[1];
  if (v26) {
    uint64_t v28 = *((void *)a2 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a2 + 1) + 16))(&v28);
  }
  uint64_t v29 = *((void *)a2 + 2);
  char v22 = *a3;
  char v23 = a3[1];
  if (v22) {
    uint64_t v24 = *((void *)a3 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a3 + 1) + 16))(&v24);
  }
  uint64_t v25 = *v6;
  char v40 = v26;
  char v41 = v27;
  if (v26) {
    uint64_t v42 = v28;
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v28 + 16))(&v42);
  }
  uint64_t v9 = v29;
  uint64_t v43 = v29;
  char v36 = v22;
  char v37 = v23;
  if (v22)
  {
    uint64_t v10 = v25;
    uint64_t v38 = v24;
    uint64_t v39 = v25;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v24 + 16))(&v38);
    uint64_t v9 = v43;
    uint64_t v10 = v25;
    uint64_t v39 = v25;
    if (!v36)
    {
      uint64_t v11 = v38;
      uint64_t v38 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
  }
  if (!v40)
  {
    uint64_t v12 = v42;
    uint64_t v42 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  if (!v22)
  {
    uint64_t v13 = v24;
    uint64_t v24 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  uint64_t v14 = v10 - v9;
  if (!v26)
  {
    uint64_t v15 = v28;
    uint64_t v28 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  unint64_t v16 = v14 + *(unsigned int *)(a1 + 8);
  if (v16 > *(unsigned int *)(a1 + 12)) {
    llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow(a1, v16);
  }
  v20[0] = *a2;
  v20[1] = a2[1];
  if (v20[0]) {
    v21[0] = *((void *)a2 + 1);
  }
  else {
    (*(void (**)(void *__return_ptr))(**((void **)a2 + 1) + 16))(v21);
  }
  v21[1] = *((void *)a2 + 2);
  v18[0] = *a3;
  v18[1] = a3[1];
  if (v18[0]) {
    v19[0] = *((void *)a3 + 1);
  }
  else {
    (*(void (**)(void *__return_ptr))(**((void **)a3 + 1) + 16))(v19);
  }
  v19[1] = *v6;
  uint64_t result = llvm::SmallVectorTemplateBase<llvm::APInt,false>::uninitialized_copy<mlir::detail::ElementsAttrIterator<llvm::APInt>,llvm::APInt*>((uint64_t)v20, (uint64_t)v18, (llvm::APInt *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 8)));
  if (!v18[0])
  {
    uint64_t result = (llvm::APInt *)v19[0];
    v19[0] = 0;
    if (result) {
      uint64_t result = (llvm::APInt *)(*(uint64_t (**)(llvm::APInt *))(*(void *)result + 8))(result);
    }
  }
  if (!v20[0])
  {
    uint64_t result = (llvm::APInt *)v21[0];
    v21[0] = 0;
    if (result) {
      uint64_t result = (llvm::APInt *)(*(uint64_t (**)(llvm::APInt *))(*(void *)result + 8))(result);
    }
  }
  *(_DWORD *)(a1 + 8) += v14;
  return result;
}

llvm::APInt *llvm::SmallVectorTemplateBase<llvm::APInt,false>::uninitialized_copy<mlir::detail::ElementsAttrIterator<llvm::APInt>,llvm::APInt*>(uint64_t a1, uint64_t a2, llvm::APInt *this)
{
  v9[0] = *(unsigned char *)a1;
  v9[1] = *(unsigned char *)(a1 + 1);
  if (v9[0]) {
    v10[0] = *(void *)(a1 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(v10);
  }
  v10[1] = *(void *)(a1 + 16);
  v7[0] = *(unsigned char *)a2;
  v7[1] = *(unsigned char *)(a2 + 1);
  if (v7[0]) {
    v8[0] = *(void *)(a2 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a2 + 8) + 16))(v8);
  }
  v8[1] = *(void *)(a2 + 16);
  uint64_t result = std::uninitialized_copy[abi:nn180100]<mlir::detail::ElementsAttrIterator<llvm::APInt>,llvm::APInt*>(v9, v7, this);
  if (!v7[0])
  {
    uint64_t result = (llvm::APInt *)v8[0];
    v8[0] = 0;
    if (result) {
      uint64_t result = (llvm::APInt *)(*(uint64_t (**)(llvm::APInt *))(*(void *)result + 8))(result);
    }
  }
  if (!v9[0])
  {
    uint64_t result = (llvm::APInt *)v10[0];
    v10[0] = 0;
    if (result) {
      return (llvm::APInt *)(*(uint64_t (**)(llvm::APInt *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

llvm::APInt *std::uninitialized_copy[abi:nn180100]<mlir::detail::ElementsAttrIterator<llvm::APInt>,llvm::APInt*>(unsigned __int8 *a1, unsigned __int8 *a2, llvm::APInt *this)
{
  int v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  if (!*a1) {
    *((void *)a1 + 1) = 0;
  }
  int v6 = a1[1];
  uint64_t v7 = *((void *)a1 + 2);
  int v8 = *a2;
  uint64_t v9 = *((void *)a2 + 1);
  if (!*a2) {
    *((void *)a2 + 1) = 0;
  }
  for (uint64_t i = *((void *)a2 + 2); i != v7; this = (llvm::APInt *)((char *)this + 16))
  {
    if (v6) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v7;
    }
    if (v4)
    {
      uint64_t v13 = (const llvm::APInt *)(v5 + 16 * v12);
      unsigned int v14 = *((_DWORD *)v13 + 2);
      *((_DWORD *)this + 2) = v14;
      if (v14 > 0x40) {
        llvm::APInt::initSlowCase(this, v13);
      }
      *(void *)this = *(void *)v13;
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    ++v7;
  }
  if (!v8 && v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (!v4 && v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return this;
}

uint64_t llvm::SmallVector<llvm::APFloat,4u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  v11[0] = *(unsigned char *)a2;
  v11[1] = *(unsigned char *)(a2 + 1);
  if (v11[0]) {
    v12[0] = *(void *)(a2 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a2 + 8) + 16))(v12);
  }
  v12[1] = *(void *)(a2 + 16);
  v9[0] = *(unsigned char *)a3;
  v9[1] = *(unsigned char *)(a3 + 1);
  if (v9[0]) {
    v10[0] = *(void *)(a3 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a3 + 8) + 16))(v10);
  }
  v10[1] = *(void *)(a3 + 16);
  llvm::SmallVectorImpl<llvm::APFloat>::append<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>((unsigned int *)a1, v11, v9);
  if (!v9[0])
  {
    uint64_t v6 = v10[0];
    v10[0] = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (!v11[0])
  {
    uint64_t v7 = v12[0];
    v12[0] = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::APFloat>::append<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>(unsigned int *a1, char *a2, char *a3)
{
  char v34 = *a2;
  char v35 = a2[1];
  if (v34) {
    v36[0] = *((void *)a2 + 1);
  }
  else {
    (*(void (**)(void *__return_ptr))(**((void **)a2 + 1) + 16))(v36);
  }
  v36[1] = *((void *)a2 + 2);
  char v31 = *a3;
  char v32 = a3[1];
  if (v31)
  {
    uint64_t v6 = (uint64_t *)(a3 + 16);
    long long v33 = *(_OWORD *)(a3 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr))(**((void **)a3 + 1) + 16))(&v33);
    uint64_t v6 = (uint64_t *)(a3 + 16);
    *((void *)&v33 + 1) = *((void *)a3 + 2);
    uint64_t v7 = v33;
    *(void *)&long long v33 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  if (!v34)
  {
    uint64_t v8 = v36[0];
    v36[0] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  __int16 v28 = *(_WORD *)a2;
  if ((_BYTE)v28) {
    uint64_t v29 = *((void *)a2 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a2 + 1) + 16))(&v29);
  }
  uint64_t v30 = *((void *)a2 + 2);
  char v24 = *a3;
  char v25 = a3[1];
  if (v24) {
    uint64_t v26 = *((void *)a3 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a3 + 1) + 16))(&v26);
  }
  uint64_t v27 = *v6;
  LOWORD(v41) = v28;
  if ((_BYTE)v28) {
    uint64_t v42 = v29;
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v29 + 16))(&v42);
  }
  uint64_t v9 = v30;
  uint64_t v43 = v30;
  char v37 = v24;
  char v38 = v25;
  if (v24)
  {
    uint64_t v10 = v27;
    uint64_t v39 = v26;
    uint64_t v40 = v27;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v26 + 16))(&v39);
    uint64_t v9 = v43;
    uint64_t v10 = v27;
    uint64_t v40 = v27;
    if (!v37)
    {
      uint64_t v11 = v39;
      uint64_t v39 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
  }
  if (!(_BYTE)v41)
  {
    uint64_t v12 = v42;
    uint64_t v42 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  if (!v24)
  {
    uint64_t v13 = v26;
    uint64_t v26 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  uint64_t v14 = v10 - v9;
  if (!(_BYTE)v28)
  {
    uint64_t v15 = v29;
    uint64_t v29 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  unint64_t v16 = v14 + a1[2];
  if (v16 > a1[3])
  {
    unint64_t v41 = 0;
    unint64_t v17 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v16, 32, &v41);
    llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(a1, (uint64_t)v17);
    unsigned int v18 = v41;
    if (*(unsigned int **)a1 != a1 + 4) {
      free(*(void **)a1);
    }
    *(void *)a1 = v17;
    a1[3] = v18;
  }
  v22[0] = *a2;
  v22[1] = a2[1];
  if (v22[0]) {
    v23[0] = *((void *)a2 + 1);
  }
  else {
    (*(void (**)(void *__return_ptr))(**((void **)a2 + 1) + 16))(v23);
  }
  v23[1] = *((void *)a2 + 2);
  v20[0] = *a3;
  v20[1] = a3[1];
  if (v20[0]) {
    v21[0] = *((void *)a3 + 1);
  }
  else {
    (*(void (**)(void *__return_ptr))(**((void **)a3 + 1) + 16))(v21);
  }
  v21[1] = *v6;
  uint64_t result = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::uninitialized_copy<mlir::detail::ElementsAttrIterator<llvm::APFloat>,llvm::APFloat*>((uint64_t)v22, (uint64_t)v20, *(void *)a1 + 32 * a1[2]);
  if (!v20[0])
  {
    uint64_t result = v21[0];
    v21[0] = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v22[0])
  {
    uint64_t result = v23[0];
    v23[0] = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  a1[2] += v14;
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::APFloat,false>::uninitialized_copy<mlir::detail::ElementsAttrIterator<llvm::APFloat>,llvm::APFloat*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[0] = *(unsigned char *)a1;
  v9[1] = *(unsigned char *)(a1 + 1);
  if (v9[0]) {
    v10[0] = *(void *)(a1 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(v10);
  }
  v10[1] = *(void *)(a1 + 16);
  v7[0] = *(unsigned char *)a2;
  v7[1] = *(unsigned char *)(a2 + 1);
  if (v7[0]) {
    v8[0] = *(void *)(a2 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a2 + 8) + 16))(v8);
  }
  v8[1] = *(void *)(a2 + 16);
  uint64_t result = std::uninitialized_copy[abi:nn180100]<mlir::detail::ElementsAttrIterator<llvm::APFloat>,llvm::APFloat*>((llvm::APFloatBase *)v9, v7, a3);
  if (!v7[0])
  {
    uint64_t result = v8[0];
    v8[0] = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v9[0])
  {
    uint64_t result = v10[0];
    v10[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    uint64_t v7 = (void *)(a2 + 8);
    uint64_t v8 = 32 * v2;
    uint64_t v9 = (void **)(v5 + 8);
    do
    {
      if (v6 == *v9) {
        uint64_t v10 = (uint64_t)llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v9);
      }
      else {
        uint64_t v10 = llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v7, (uint64_t)v9);
      }
      uint64_t v7 = (void *)(v10 + 32);
      v9 += 4;
      v8 -= 32;
    }
    while (v8);
    uint64_t v11 = a1[2];
    if (v11)
    {
      uint64_t v12 = *(void *)a1 - 24;
      uint64_t v13 = 32 * v11;
      do
      {
        while (1)
        {
          uint64_t v14 = (llvm::detail::DoubleAPFloat *)(v12 + v13);
          if (v6 != *(void **)(v12 + v13)) {
            break;
          }
          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v14);
          v13 -= 32;
          if (!v13) {
            return;
          }
        }
        llvm::detail::IEEEFloat::~IEEEFloat(v14);
        v13 -= 32;
      }
      while (v13);
    }
  }
}

uint64_t std::uninitialized_copy[abi:nn180100]<mlir::detail::ElementsAttrIterator<llvm::APFloat>,llvm::APFloat*>(llvm::APFloatBase *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = *(unsigned __int8 *)a1;
  uint64_t v5 = *((void *)a1 + 1);
  if (!*(unsigned char *)a1) {
    *((void *)a1 + 1) = 0;
  }
  int v6 = *((unsigned __int8 *)a1 + 1);
  uint64_t v7 = *((void *)a1 + 2);
  int v15 = *a2;
  uint64_t v8 = *((void *)a2 + 1);
  if (!*a2) {
    *((void *)a2 + 1) = 0;
  }
  for (uint64_t i = *((void *)a2 + 2); i != v7; a3 += 32)
  {
    if (v6) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v7;
    }
    if (v4)
    {
      uint64_t v12 = v5 + 32 * v11;
      uint64_t v14 = *(void **)(v12 + 8);
      uint64_t v13 = (const llvm::detail::DoubleAPFloat *)(v12 + 8);
      if (llvm::APFloatBase::PPCDoubleDouble(a1) == v14) {
        a1 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)(a3 + 8), v13);
      }
      else {
        a1 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)(a3 + 8), v13);
      }
    }
    else
    {
      a1 = (llvm::APFloatBase *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    ++v7;
  }
  if (!v15 && v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (!v4 && v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a3;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldGatherOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  uint64_t v129 = a2;
  unint64_t v4 = *(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v129) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    unint64_t v4 = 0;
  }
  unint64_t v128 = v4;
  if (!v4 || !mlir::TensorType::hasRank((mlir::TensorType *)&v128)) {
    return 0;
  }
  uint64_t v5 = a3[1];
  if (v5) {
    uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v126 = v5;
  uint64_t v127 = v6;
  if (!*a3)
  {
    BOOL v124 = 0;
    uint64_t v125 = 0;
    return 0;
  }
  BOOL v124 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v125 = v7;
  if (!v124) {
    return 0;
  }
  uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  uint64_t v140 = v8;
  mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
  if (v9 > 1) {
    return 0;
  }
  if (!v126) {
    return 0;
  }
  uint64_t v118 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v126);
  int v119 = v10;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v118);
  if (v11 > 1 || mlir::ElementsAttr::getNumElements((uint64_t)v126, v127) > 64) {
    return 0;
  }
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
  uint64_t v14 = v13;
  uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  uint64_t v140 = v15;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  unint64_t v17 = (void *)mlir::RankedTensorType::get(Value, v14, OperandRange, 0);
  BOOL InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v129);
  uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  uint64_t v140 = v19;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
    uint64_t v140 = v26;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    if (v27 > 1) {
      return 0;
    }
    uint64_t ArgOperands = v141;
    uint64_t v140 = 0x400000000;
    mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v124, (uint64_t)&v118);
    LOWORD(v142) = v118;
    if ((_BYTE)v118)
    {
      uint64_t v30 = (uint64_t)v119;
      uint64_t v143 = v119;
      uint64_t v144 = v120;
      if (BYTE1(v118)) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = v120;
      }
    }
    else
    {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v119 + 16))(&v143);
      uint64_t v30 = (uint64_t)v143;
      uint64_t v144 = v120;
      if (BYTE1(v142)) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = v120;
      }
      if (!(_BYTE)v142)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v143 + 24))(&v136);
        goto LABEL_164;
      }
    }
    char v36 = (const llvm::APInt *)(v30 + 16 * v31);
    LODWORD(v137) = *((_DWORD *)v36 + 2);
    if (v137 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v136, v36);
    }
    uint64_t v136 = *(void *)v36;
LABEL_164:
    LODWORD(v111) = v137;
    if (v137 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v110);
    }
    unint64_t v110 = 0;
    if (!(_BYTE)v142)
    {
      uint64_t v70 = (uint64_t)v143;
      uint64_t v143 = 0;
      if (v70) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    if (!(_BYTE)v121)
    {
      uint64_t v71 = v122;
      char v122 = 0;
      if (v71) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v71 + 8))(v71);
      }
    }
    if (!(_BYTE)v118)
    {
      char v72 = v119;
      int v119 = 0;
      if (v72) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v72 + 8))(v72);
      }
    }
    mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v126, (uint64_t)&v118);
    LOWORD(v136) = v118;
    if ((_BYTE)v118) {
      unint64_t v137 = v119;
    }
    else {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v119 + 16))(&v137);
    }
    uint64_t v73 = v120;
    uint64_t v138 = v120;
    __int16 v133 = v121;
    if ((_BYTE)v121)
    {
      uint64_t v134 = v122;
    }
    else
    {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v122 + 16))(&v134);
      uint64_t v73 = v138;
    }
    uint64_t v135 = v123;
    if (v73 == v123)
    {
LABEL_183:
      if (!(_BYTE)v133)
      {
        int v74 = v134;
        uint64_t v134 = 0;
        if (v74) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
        }
      }
      if (!(_BYTE)v136)
      {
        uint64_t v75 = v137;
        unint64_t v137 = 0;
        if (v75) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
        }
      }
      if (!(_BYTE)v121)
      {
        uint64_t v76 = v122;
        char v122 = 0;
        if (v76) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v76 + 8))(v76);
        }
      }
      if (!(_BYTE)v118)
      {
        uint64_t v77 = v119;
        int v119 = 0;
        if (v77) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v77 + 8))(v77);
        }
      }
      unint64_t ElementsAttr = mlir::createElementsAttr(v17, ArgOperands, v140);
      if (v111 >= 0x41 && v110) {
        MEMORY[0x21667D390](v110, 0x1000C8000313F17);
      }
      uint64_t v79 = (char *)ArgOperands;
      if (v140)
      {
        uint64_t v80 = 16 * v140;
        do
        {
          if (*(_DWORD *)&v79[v80 - 8] >= 0x41u)
          {
            uint64_t v81 = *(void *)&v79[v80 - 16];
            if (v81) {
              MEMORY[0x21667D390](v81, 0x1000C8000313F17);
            }
          }
          v80 -= 16;
        }
        while (v80);
        uint64_t v79 = (char *)ArgOperands;
      }
      unint64_t v28 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      if (v79 != v141) {
        free(v79);
      }
      return v28;
    }
    while (1)
    {
      uint64_t v82 = BYTE1(v136) ? 0 : v73;
      if ((_BYTE)v136) {
        break;
      }
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v137 + 24))(&v107);
      LOBYTE(v84) = v108;
      if (v108 <= 0x40)
      {
        uint64_t v85 = v107;
LABEL_219:
        uint64_t v86 = (uint64_t)((void)v85 << -(char)v84) >> -(char)v84;
        goto LABEL_221;
      }
      uint64_t v86 = *v107;
LABEL_221:
      LODWORD(v105) = v111;
      if (v111 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v104, (const llvm::APInt *)&v110);
      }
      uint64_t v104 = v110;
      if (v86 < 0 && InferredResultTypes) {
        v86 += mlir::ElementsAttr::getNumElements((uint64_t)v124, v125);
      }
      if (v86 < 0 || v86 >= mlir::ElementsAttr::getNumElements((uint64_t)v124, v125)) {
        goto LABEL_256;
      }
      mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v124, (uint64_t)&v142);
      __int16 v113 = v142;
      int v88 = BYTE1(v142);
      if ((_BYTE)v142)
      {
        uint64_t v89 = (uint64_t)v143;
        uint64_t v90 = v144;
        uint64_t v114 = (uint64_t)v143;
        uint64_t v115 = v144;
        LOWORD(v130) = v142;
        goto LABEL_235;
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v143 + 16))(&v114);
      int v88 = HIBYTE(v113);
      uint64_t v90 = v144;
      uint64_t v115 = v144;
      LOWORD(v130) = v113;
      if ((_BYTE)v113)
      {
        uint64_t v89 = v114;
LABEL_235:
        uint64_t v91 = v90 + v86;
        uint64_t v131 = (llvm::APFloatBase *)v89;
        uint64_t v132 = v91;
        if (v88) {
          uint64_t v92 = 0;
        }
        else {
          uint64_t v92 = v91;
        }
LABEL_238:
        uint64_t v93 = (const llvm::APInt *)(v89 + 16 * v92);
        unsigned int v117 = *((_DWORD *)v93 + 2);
        if (v117 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v116, v93);
        }
        uint64_t v116 = *(uint64_t **)v93;
        goto LABEL_241;
      }
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v114 + 16))(&v131);
      uint64_t v89 = (uint64_t)v131;
      uint64_t v132 = v115 + v86;
      if (BYTE1(v130)) {
        uint64_t v92 = 0;
      }
      else {
        uint64_t v92 = v115 + v86;
      }
      if ((_BYTE)v130) {
        goto LABEL_238;
      }
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v131 + 24))(&v116);
LABEL_241:
      if (v105 >= 0x41 && v104) {
        MEMORY[0x21667D390](v104, 0x1000C8000313F17);
      }
      uint64_t v104 = v116;
      LODWORD(v105) = v117;
      unsigned int v117 = 0;
      if (!(_BYTE)v130)
      {
        uint64_t v94 = v131;
        uint64_t v131 = 0;
        if (v94) {
          (*(void (**)(llvm::APFloatBase *))(*(void *)v94 + 8))(v94);
        }
      }
      if (!(_BYTE)v113)
      {
        uint64_t v95 = v114;
        uint64_t v114 = 0;
        if (v95) {
          (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
        }
      }
      if (!v145)
      {
        uint64_t v96 = v146;
        uint64_t v146 = 0;
        if (v96) {
          (*(void (**)(uint64_t))(*(void *)v96 + 8))(v96);
        }
      }
      if (!(_BYTE)v142)
      {
        uint64_t v97 = (uint64_t)v143;
        uint64_t v143 = 0;
        if (v97) {
          (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
        }
      }
LABEL_256:
      uint64_t v98 = (char *)ArgOperands;
      if (v140 >= HIDWORD(v140))
      {
        unint64_t v102 = v140 + 1;
        if (ArgOperands <= &v104 && (char *)ArgOperands + 16 * v140 > (char *)&v104)
        {
          int64_t v103 = (char *)&v104 - (unsigned char *)ArgOperands;
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v102);
          uint64_t v98 = (char *)ArgOperands;
          uint64_t v99 = (const llvm::APInt *)((char *)ArgOperands + v103);
        }
        else
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v102);
          uint64_t v99 = (const llvm::APInt *)&v104;
          uint64_t v98 = (char *)ArgOperands;
        }
      }
      else
      {
        uint64_t v99 = (const llvm::APInt *)&v104;
      }
      uint64_t v100 = (llvm::APInt *)&v98[16 * v140];
      unsigned int v101 = *((_DWORD *)v99 + 2);
      *((_DWORD *)v100 + 2) = v101;
      if (v101 > 0x40) {
        llvm::APInt::initSlowCase(v100, v99);
      }
      *(void *)uint64_t v100 = *(void *)v99;
      LODWORD(v140) = v140 + 1;
      if (v105 >= 0x41 && v104) {
        MEMORY[0x21667D390](v104, 0x1000C8000313F17);
      }
      if (v108 >= 0x41 && v107) {
        MEMORY[0x21667D390](v107, 0x1000C8000313F17);
      }
      uint64_t v73 = v138 + 1;
      uint64_t v138 = v73;
      if (v73 == v135) {
        goto LABEL_183;
      }
    }
    __int16 v83 = (llvm::APFloatBase *)((char *)v137 + 16 * v82);
    unsigned int v84 = *((_DWORD *)v83 + 2);
    LODWORD(v108) = v84;
    if (v84 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v107, v83);
    }
    uint64_t v85 = *(uint64_t **)v83;
    unint64_t v107 = *(uint64_t **)v83;
    goto LABEL_219;
  }
  uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  uint64_t v140 = v20;
  uint64_t v21 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                 + 136);
  if (v21 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  uint64_t v140 = v22;
  mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
  if (v23 > 1) {
    return 0;
  }
  uint64_t ArgOperands = v141;
  uint64_t v140 = 0x400000000;
  mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v124, (uint64_t)&v118);
  __int16 v133 = v118;
  if ((_BYTE)v118)
  {
    char v24 = v119;
    uint64_t v134 = v119;
    uint64_t v135 = v120;
    if (BYTE1(v118)) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v120;
    }
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v119 + 16))(&v134);
    char v24 = v134;
    uint64_t v135 = v120;
    if (HIBYTE(v133)) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v120;
    }
    if (!(_BYTE)v133)
    {
      char v37 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v134 + 24))(&v142);
      char v35 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v37);
      goto LABEL_56;
    }
  }
  char v32 = (char *)v24 + 32 * v25;
  char v34 = (llvm::APFloatBase *)*((void *)v32 + 1);
  long long v33 = (const llvm::detail::DoubleAPFloat *)(v32 + 8);
  char v35 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v24);
  if (v35 == v34) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v143, v33);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v143, v33);
  }
LABEL_56:
  if (v35 == v143) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v137, (uint64_t)v35);
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v137, (uint64_t)v143, 0);
  if (v35 == v143) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v143);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v143);
  }
  if (!(_BYTE)v133)
  {
    char v38 = v134;
    uint64_t v134 = 0;
    if (v38) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v38 + 8))(v38);
    }
  }
  if (!(_BYTE)v121)
  {
    uint64_t v39 = v122;
    char v122 = 0;
    if (v39) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v39 + 8))(v39);
    }
  }
  if (!(_BYTE)v118)
  {
    uint64_t v40 = v119;
    int v119 = 0;
    if (v40) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v40 + 8))(v40);
    }
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v126, (uint64_t)&v118);
  __int16 v113 = v118;
  if ((_BYTE)v118) {
    uint64_t v114 = (uint64_t)v119;
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v119 + 16))(&v114);
  }
  uint64_t v41 = v120;
  uint64_t v115 = v120;
  LOWORD(v110) = v121;
  if ((_BYTE)v121)
  {
    unint64_t v111 = v122;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v122 + 16))(&v111);
    uint64_t v41 = v115;
  }
  uint64_t v112 = v123;
  if (v41 != v123)
  {
    while (1)
    {
      uint64_t v47 = HIBYTE(v113) ? 0 : v41;
      if ((_BYTE)v113) {
        break;
      }
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v114 + 24))(&v116);
      LOBYTE(v49) = v117;
      if (v117 <= 0x40)
      {
        uint64_t v50 = v116;
LABEL_104:
        uint64_t v51 = (uint64_t)((void)v50 << -(char)v49) >> -(char)v49;
        goto LABEL_106;
      }
      uint64_t v51 = *v116;
LABEL_106:
      if (v35 == v137) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v134, (const llvm::detail::DoubleAPFloat *)&v137);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v134, (const llvm::detail::IEEEFloat *)&v137);
      }
      if (v51 < 0 && InferredResultTypes) {
        v51 += mlir::ElementsAttr::getNumElements((uint64_t)v124, v125);
      }
      if (v51 < 0 || v51 >= mlir::ElementsAttr::getNumElements((uint64_t)v124, v125)) {
        goto LABEL_140;
      }
      mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v124, (uint64_t)&v142);
      LOWORD(v104) = v142;
      if ((_BYTE)v142)
      {
        uint64_t v53 = (uint64_t)v143;
        uint64_t v105 = (uint64_t)v143;
        uint64_t v106 = v144;
        LOWORD(v107) = v142;
        uint64_t v108 = (uint64_t)v143;
        uint64_t v109 = v144 + v51;
        if (BYTE1(v142)) {
          uint64_t v54 = 0;
        }
        else {
          uint64_t v54 = v144 + v51;
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v143 + 16))(&v105);
        uint64_t v106 = v144;
        LOWORD(v107) = (_WORD)v104;
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v105 + 16))(&v108);
        uint64_t v53 = v108;
        uint64_t v109 = v106 + v51;
        if (BYTE1(v107)) {
          uint64_t v54 = 0;
        }
        else {
          uint64_t v54 = v106 + v51;
        }
        if (!(_BYTE)v107)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v108 + 24))(&v130);
          goto LABEL_125;
        }
      }
      uint64_t v55 = v53 + 32 * v54;
      uint64_t v57 = *(llvm::APFloatBase **)(v55 + 8);
      uint64_t v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
      if (v35 == v57) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v131, v56);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v131, v56);
      }
LABEL_125:
      llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v134, (llvm::APFloatBase *)&v131);
      if (v35 == v131) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v131);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v131);
      }
      if (!(_BYTE)v107)
      {
        uint64_t v58 = v108;
        uint64_t v108 = 0;
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
      }
      if (!(_BYTE)v104)
      {
        uint64_t v59 = v105;
        uint64_t v105 = 0;
        if (v59) {
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
        }
      }
      if (!v145)
      {
        uint64_t v60 = v146;
        uint64_t v146 = 0;
        if (v60) {
          (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
        }
      }
      if (!(_BYTE)v142)
      {
        uint64_t v61 = (uint64_t)v143;
        uint64_t v143 = 0;
        if (v61) {
          (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
        }
      }
LABEL_140:
      Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&ArgOperands, (unint64_t)&v133, 1);
      uint64_t v63 = (llvm::detail::IEEEFloat *)((char *)ArgOperands + 32 * v140 + 8);
      unint64_t v65 = (llvm::APFloatBase *)*((void *)Address + 1);
      uint64_t v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
      if (v35 == v65) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
      }
      LODWORD(v140) = v140 + 1;
      if (v35 == v134) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v134);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v134);
      }
      if (v117 >= 0x41 && v116) {
        MEMORY[0x21667D390](v116, 0x1000C8000313F17);
      }
      uint64_t v41 = v115 + 1;
      uint64_t v115 = v41;
      if (v41 == v112) {
        goto LABEL_78;
      }
    }
    uint64_t v48 = (const llvm::APInt *)(v114 + 16 * v47);
    unsigned int v49 = *((_DWORD *)v48 + 2);
    unsigned int v117 = v49;
    if (v49 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v116, v48);
    }
    uint64_t v50 = *(uint64_t **)v48;
    uint64_t v116 = *(uint64_t **)v48;
    goto LABEL_104;
  }
LABEL_78:
  if (!(_BYTE)v110)
  {
    uint64_t v42 = v111;
    unint64_t v111 = 0;
    if (v42) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v42 + 8))(v42);
    }
  }
  if (!(_BYTE)v113)
  {
    uint64_t v43 = v114;
    uint64_t v114 = 0;
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
  }
  if (!(_BYTE)v121)
  {
    uint64_t v44 = v122;
    char v122 = 0;
    if (v44) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v44 + 8))(v44);
    }
  }
  if (!(_BYTE)v118)
  {
    unint64_t v45 = v119;
    int v119 = 0;
    if (v45) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v45 + 8))(v45);
    }
  }
  unint64_t v46 = mlir::createElementsAttr(v17, (uint64_t)ArgOperands, v140);
  if (v35 == v137) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v137);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v137);
  }
  uint64_t v66 = ArgOperands;
  if (v140)
  {
    int64_t v67 = (char *)ArgOperands - 24;
    uint64_t v68 = 32 * v140;
    do
    {
      while (1)
      {
        unint64_t v69 = (llvm::detail::DoubleAPFloat *)&v67[v68];
        if (v35 != *(llvm::APFloatBase **)&v67[v68]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v69);
        v68 -= 32;
        if (!v68) {
          goto LABEL_160;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v69);
      v68 -= 32;
    }
    while (v68);
LABEL_160:
    uint64_t v66 = ArgOperands;
  }
  unint64_t v28 = (unint64_t)v46 & 0xFFFFFFFFFFFFFFFBLL;
  if (v66 != v141) {
    free(v66);
  }
  return v28;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldGatherOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldSliceOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v66[1] = *MEMORY[0x263EF8340];
  uint64_t v62 = a2;
  uint64_t result = *a3;
  if (!*a3)
  {
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    return result;
  }
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(result);
  uint64_t v60 = result;
  uint64_t v61 = v4;
  if (result)
  {
    uint64_t Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v60);
    uint64_t v6 = Type;
    if (!Type) {
      goto LABEL_14;
    }
    uint64_t v7 = *Type;
    unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v9 = *(unsigned int *)(v7 + 16);
    if (!v9) {
      goto LABEL_14;
    }
    uint64_t v10 = *(void **)(v7 + 8);
    uint64_t v11 = &v10[2 * v9];
    do
    {
      unint64_t v12 = v9 >> 1;
      uint64_t v13 = &v10[2 * (v9 >> 1)];
      unint64_t v15 = *v13;
      uint64_t v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8) {
        uint64_t v10 = v14;
      }
      else {
        unint64_t v9 = v12;
      }
    }
    while (v9);
    if (v10 != v11 && *v10 == v8) {
      uint64_t v16 = v10[1];
    }
    else {
LABEL_14:
    }
      uint64_t v16 = 0;
    v59[0] = v6;
    v59[1] = v16;
    unint64_t v17 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = *v17;
    unint64_t v19 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v20 = *(unsigned int *)(v18 + 16);
    if (!v20) {
      goto LABEL_24;
    }
    uint64_t v21 = *(void **)(v18 + 8);
    uint64_t v22 = &v21[2 * v20];
    do
    {
      unint64_t v23 = v20 >> 1;
      char v24 = &v21[2 * (v20 >> 1)];
      unint64_t v26 = *v24;
      uint64_t v25 = v24 + 2;
      v20 += ~(v20 >> 1);
      if (v26 < v19) {
        uint64_t v21 = v25;
      }
      else {
        unint64_t v20 = v23;
      }
    }
    while (v20);
    if (v21 != v22 && *v21 == v19) {
      uint64_t v27 = v21[1];
    }
    else {
LABEL_24:
    }
      uint64_t v27 = 0;
    uint64_t v57 = v17;
    uint64_t v58 = v27;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v57)) {
      return 0;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v59)) {
      return 0;
    }
    mlir::ShapedType::getShape((mlir::ShapedType *)&v57);
    if (v28 != 1) {
      return 0;
    }
    mlir::ShapedType::getShape((mlir::ShapedType *)v59);
    if (v29 != 1) {
      return 0;
    }
    uint64_t v30 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)v59);
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v62);
    long long v63 = 0uLL;
    unint64_t v65 = (uint64_t **)&v63;
    v66[0] = Bias;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v66);
    if (!DefiningOp) {
      return 0;
    }
    if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v65, DefiningOp)) {
      return 0;
    }
    uint64_t SingleInt = mlir::getSingleIntValue<int>(v63, *((uint64_t *)&v63 + 1));
    if ((SingleInt & 0xFF00000000) == 0) {
      return 0;
    }
    Positiveuint64_t Axis = mlir::getPositiveAxis((int)SingleInt, v30);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v57))
    {
      uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v57);
      if (!v36)
      {
LABEL_37:
        unint64_t v38 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v57);
        goto LABEL_38;
      }
      uint64_t v37 = 8 * v36;
      while (*Shape != 0x8000000000000000)
      {
        ++Shape;
        v37 -= 8;
        if (!v37) {
          goto LABEL_37;
        }
      }
    }
    uint64_t Length = mlir::mps::SliceOp::getLength((mlir::mps::SliceOp *)&v62);
    long long v63 = 0uLL;
    unint64_t v65 = (uint64_t **)&v63;
    v66[0] = Length;
    uint64_t v53 = mlir::Value::getDefiningOp((mlir::Value *)v66);
    if (!v53 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v65, v53)) {
      return 0;
    }
    uint64_t v54 = mlir::getSingleIntValue<int>(v63, *((uint64_t *)&v63 + 1));
    uint64_t result = 0;
    if ((v54 & 0xFF00000000) == 0 || (v54 & 0x80000000) != 0) {
      return result;
    }
    unint64_t v38 = v54;
    if (v54 + PositiveAxis > v30) {
      return 0;
    }
    v66[0] = v54;
    *(void *)&long long v63 = v66;
    *((void *)&v63 + 1) = 1;
    char v64 = 1;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v57);
    uint64_t v57 = (void *)mlir::ShapedType::cloneWith((uint64_t *)&v57, &v63, OperandRange);
    uint64_t v58 = v56;
LABEL_38:
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
    }
    else
    {
      uint64_t v39 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59)
                     + 136);
      if (v39 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        && v39 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 0;
      }
    }
    return (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFFBLL);
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldSliceOp>::externalFoldMultipleResults()
{
  return 0;
}

__n128 *mlir::mps::anonymous namespace'::getFoldedSliceResult<llvm::APInt>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = a6;
  v51[8] = *MEMORY[0x263EF8340];
  v48[0] = a1;
  v48[1] = a2;
  v47[0] = a3;
  v47[1] = a4;
  unsigned int v49 = (char *)v51;
  uint64_t v50 = 0x400000000;
  if (a6 >= 5) {
    llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v49, a6);
  }
  mlir::ElementsAttr::getValues<llvm::APInt>(v48, (uint64_t)&ArgOperands);
  LOWORD(v41) = ArgOperands;
  if ((_BYTE)ArgOperands)
  {
    uint64_t v8 = v38;
    uint64_t v42 = v37;
    uint64_t v43 = v38;
    __int16 v44 = ArgOperands;
LABEL_6:
    uint64_t v45 = v42;
    uint64_t v46 = v8 + a5;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v37 + 16))(&v42);
  uint64_t v8 = v38;
  uint64_t v43 = v38;
  __int16 v44 = v41;
  if ((_BYTE)v41) {
    goto LABEL_6;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v42 + 16))(&v45);
  uint64_t v46 = v43 + a5;
  if (!(_BYTE)v41)
  {
    uint64_t v35 = v42;
    uint64_t v42 = 0;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
  }
LABEL_7:
  if (!v39)
  {
    uint64_t v9 = v40;
    uint64_t v40 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  if (!(_BYTE)ArgOperands)
  {
    uint64_t v10 = v37;
    uint64_t v37 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  if (v6 >= 1)
  {
    do
    {
      LOWORD(ArgOperands) = v44;
      int v11 = HIBYTE(v44);
      if ((_BYTE)v44)
      {
        uint64_t v12 = v45;
        uint64_t v37 = v45;
        int v13 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v45 + 16))(&v37);
        int v11 = BYTE1(ArgOperands);
        int v13 = ArgOperands;
        uint64_t v12 = v37;
      }
      uint64_t v15 = v46;
      uint64_t v38 = v46++;
      if (v11) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15;
      }
      if (v13)
      {
        unint64_t v17 = (const llvm::APInt *)(v12 + 16 * v16);
        LODWORD(v42) = *((_DWORD *)v17 + 2);
        if (v42 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v41, v17);
        }
        uint64_t v41 = *(void *)v17;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 24))(&v41);
      }
      uint64_t v18 = v49;
      if (v50 >= HIDWORD(v50))
      {
        unint64_t v21 = v50 + 1;
        if (v49 <= (char *)&v41 && &v49[16 * v50] > (char *)&v41)
        {
          int64_t v22 = (char *)&v41 - v49;
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v49, v21);
          uint64_t v18 = v49;
          unint64_t v19 = &v49[v22];
        }
        else
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v49, v21);
          unint64_t v19 = (char *)&v41;
          uint64_t v18 = v49;
        }
      }
      else
      {
        unint64_t v19 = (char *)&v41;
      }
      unint64_t v20 = &v18[16 * v50];
      *((_DWORD *)v20 + 2) = *((_DWORD *)v19 + 2);
      *(void *)unint64_t v20 = *(void *)v19;
      *((_DWORD *)v19 + 2) = 0;
      LODWORD(v50) = v50 + 1;
      if (v42 >= 0x41 && v41) {
        MEMORY[0x21667D390](v41, 0x1000C8000313F17);
      }
      if (!(_BYTE)ArgOperands)
      {
        uint64_t v14 = v37;
        uint64_t v37 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      --v6;
    }
    while (v6);
  }
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v47);
  uint64_t v25 = v24;
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v48);
  uint64_t v37 = v26;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  uint64_t v28 = (void *)mlir::RankedTensorType::get(Shape, v25, OperandRange, 0);
  unint64_t ElementsAttr = mlir::createElementsAttr(v28, v49, v50);
  if (!(_BYTE)v44)
  {
    uint64_t v30 = v45;
    uint64_t v45 = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
  }
  uint64_t v31 = v49;
  if (v50)
  {
    uint64_t v32 = 16 * v50;
    do
    {
      if (*(_DWORD *)&v31[v32 - 8] >= 0x41u)
      {
        uint64_t v33 = *(void *)&v31[v32 - 16];
        if (v33) {
          MEMORY[0x21667D390](v33, 0x1000C8000313F17);
        }
      }
      v32 -= 16;
    }
    while (v32);
    uint64_t v31 = v49;
  }
  if (v31 != (char *)v51) {
    free(v31);
  }
  return ElementsAttr;
}

llvm::APFloatBase *mlir::mps::anonymous namespace'::getFoldedSliceResult<llvm::APFloat>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = a6;
  unsigned char v58[16] = *MEMORY[0x263EF8340];
  v50[0] = a1;
  v50[1] = a2;
  v49[0] = a3;
  v49[1] = a4;
  uint64_t v56 = v58;
  uint64_t v57 = 0x400000000;
  if (a6 >= 5)
  {
    uint64_t ArgOperands = 0;
    uint64_t v8 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v56, v58, a6, 32, (unint64_t *)&ArgOperands);
    llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow((unsigned int *)&v56, (uint64_t)v8);
    int v9 = ArgOperands;
    if (v56 != v58) {
      free(v56);
    }
    uint64_t v56 = v8;
    HIDWORD(v57) = v9;
  }
  mlir::ElementsAttr::getValues<llvm::APFloat>(v50, (uint64_t)&ArgOperands);
  __int16 v42 = ArgOperands;
  if ((_BYTE)ArgOperands)
  {
    __int16 v44 = v52;
    uint64_t v45 = v53;
    __int16 v46 = ArgOperands;
    uint64_t v47 = v52;
    uint64_t v48 = v53 + a5;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v52 + 16))(&v44);
    uint64_t v45 = v53;
    __int16 v46 = v42;
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v44 + 16))(&v47);
    uint64_t v48 = v45 + a5;
    uint64_t v41 = v44;
    __int16 v44 = 0;
    if (v41) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v41 + 8))(v41);
    }
  }
  if (!v54)
  {
    uint64_t v10 = v55;
    uint64_t v55 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  if (!(_BYTE)ArgOperands)
  {
    int v11 = v52;
    uint64_t v52 = 0;
    if (v11) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v11 + 8))(v11);
    }
  }
  if (v6 >= 1)
  {
    do
    {
      __int16 v43 = v46;
      int v12 = HIBYTE(v46);
      if ((_BYTE)v46)
      {
        int v13 = v47;
        __int16 v44 = v47;
        int v14 = 1;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v47 + 16))(&v44);
        int v12 = HIBYTE(v43);
        int v14 = v43;
        int v13 = v44;
      }
      uint64_t v15 = v48;
      uint64_t v45 = v48++;
      if (v12) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15;
      }
      if (v14)
      {
        unint64_t v17 = (char *)v13 + 32 * v16;
        unint64_t v19 = (void *)*((void *)v17 + 1);
        uint64_t v18 = (const llvm::detail::DoubleAPFloat *)(v17 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v13) == v19) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v52, v18);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v52, v18);
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v13 + 24))(&ArgOperands);
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v56, (unint64_t)&ArgOperands, 1);
      unint64_t v21 = (char *)v56 + 32 * v57 + 8;
      int64_t v22 = Address + 8;
      unint64_t v23 = (llvm::APFloatBase *)*((void *)Address + 1);
      uint64_t v24 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
      if (v24 == v23) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v21, v22);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v21, (uint64_t)v22);
      }
      LODWORD(v57) = v57 + 1;
      if (v24 == v52)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v52);
        if (!(_BYTE)v43)
        {
LABEL_35:
          uint64_t v25 = v44;
          __int16 v44 = 0;
          if (v25) {
            (*(void (**)(llvm::APFloatBase *))(*(void *)v25 + 8))(v25);
          }
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v52);
        if (!(_BYTE)v43) {
          goto LABEL_35;
        }
      }
      --v6;
    }
    while (v6);
  }
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v49);
  uint64_t v28 = v27;
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v50);
  uint64_t v52 = v29;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  uint64_t v31 = (void *)mlir::RankedTensorType::get(Shape, v28, OperandRange, 0);
  unint64_t ElementsAttr = (llvm::APFloatBase *)mlir::createElementsAttr(v31, (uint64_t)v56, v57);
  uint64_t v33 = ElementsAttr;
  if (!(_BYTE)v46)
  {
    unint64_t ElementsAttr = v47;
    uint64_t v47 = 0;
    if (ElementsAttr) {
      unint64_t ElementsAttr = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)ElementsAttr + 8))(ElementsAttr);
    }
  }
  char v34 = (char *)v56;
  uint64_t v35 = v57;
  if (v57)
  {
    uint64_t v36 = llvm::APFloatBase::PPCDoubleDouble(ElementsAttr);
    uint64_t v37 = v34 - 24;
    uint64_t v38 = 32 * v35;
    do
    {
      while (1)
      {
        char v39 = (llvm::detail::DoubleAPFloat *)&v37[v38];
        if (v36 != *(void **)&v37[v38]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v39);
        v38 -= 32;
        if (!v38) {
          goto LABEL_45;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v39);
      v38 -= 32;
    }
    while (v38);
LABEL_45:
    char v34 = (char *)v56;
  }
  if (v34 != (char *)v58) {
    free(v34);
  }
  return v33;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldStridedSliceOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  uint64_t v125 = a2;
  if (*a3)
  {
    uint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  v124[0] = (uint64_t)v5;
  v124[1] = v4;
  uint64_t v6 = a3[1];
  if (v6)
  {
    uint64_t v8 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  v123[0] = (uint64_t)v8;
  v123[1] = v7;
  int v9 = a3[3];
  if (v9) {
    int v9 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = 0;
  v122[0] = (uint64_t)v9;
  v122[1] = v10;
  if (!v5 || !v8 || !v9) {
    return v11;
  }
  int v12 = *a3;
  if (!v12) {
    goto LABEL_22;
  }
  uint64_t v13 = *v12;
  unint64_t v14 = mlir::TypeID::get<mlir::TypedAttr>();
  unint64_t v15 = *(unsigned int *)(v13 + 16);
  if (!v15) {
    goto LABEL_22;
  }
  uint64_t v16 = *(void **)(v13 + 8);
  unint64_t v17 = &v16[2 * v15];
  do
  {
    unint64_t v18 = v15 >> 1;
    unint64_t v19 = &v16[2 * (v15 >> 1)];
    unint64_t v21 = *v19;
    unint64_t v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v15 = v18;
    }
  }
  while (v15);
  if (v16 != v17 && *v16 == v14) {
    uint64_t v22 = v16[1];
  }
  else {
LABEL_22:
  }
    uint64_t v22 = 0;
  BOOL v126 = v12;
  uint64_t v127 = v22;
  uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v126);
  uint64_t v24 = canMapOperands;
  if (!canMapOperands) {
    goto LABEL_32;
  }
  uint64_t v25 = *canMapOperands;
  unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v27 = *(unsigned int *)(v25 + 16);
  if (!v27) {
    goto LABEL_32;
  }
  uint64_t v28 = *(void **)(v25 + 8);
  uint64_t v29 = &v28[2 * v27];
  do
  {
    unint64_t v30 = v27 >> 1;
    uint64_t v31 = &v28[2 * (v27 >> 1)];
    unint64_t v33 = *v31;
    uint64_t v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26) {
      uint64_t v28 = v32;
    }
    else {
      unint64_t v27 = v30;
    }
  }
  while (v27);
  if (v28 != v29 && *v28 == v26) {
    uint64_t v34 = v28[1];
  }
  else {
LABEL_32:
  }
    uint64_t v34 = 0;
  v121[0] = v24;
  v121[1] = v34;
  uint64_t v35 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v125) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v35) {
    goto LABEL_42;
  }
  uint64_t v36 = *v35;
  unint64_t v37 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v38 = *(unsigned int *)(v36 + 16);
  if (!v38) {
    goto LABEL_42;
  }
  char v39 = *(void **)(v36 + 8);
  uint64_t v40 = &v39[2 * v38];
  do
  {
    unint64_t v41 = v38 >> 1;
    __int16 v42 = &v39[2 * (v38 >> 1)];
    unint64_t v44 = *v42;
    __int16 v43 = v42 + 2;
    v38 += ~(v38 >> 1);
    if (v44 < v37) {
      char v39 = v43;
    }
    else {
      unint64_t v38 = v41;
    }
  }
  while (v38);
  if (v39 != v40 && *v39 == v37) {
    uint64_t v45 = v39[1];
  }
  else {
LABEL_42:
  }
    uint64_t v45 = 0;
  v120[0] = v35;
  v120[1] = v45;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121)) {
    return 0;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v120)) {
    return 0;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v120);
  if (v46 > 1) {
    return 0;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v121);
  if (v47 > 1) {
    return 0;
  }
  unsigned __int8 Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v125);
  mlir::ShapedType::getShape((mlir::ShapedType *)v120);
  if (v50 == 1) {
    uint64_t v51 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)v120);
  }
  else {
    uint64_t v51 = 1;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v121);
  if (v52 == 1) {
    uint64_t v53 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)v121);
  }
  else {
    uint64_t v53 = 1;
  }
  mlir::ElementsAttr::getValues<llvm::APInt>(v123, (uint64_t)&v126);
  LOWORD(ArgOperands) = (_WORD)v126;
  if ((_BYTE)v126)
  {
    uint64_t v54 = v127;
    uint64_t v132 = (llvm::APFloatBase *)v127;
    uint64_t v133 = v128;
    if (BYTE1(v126)) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = v128;
    }
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v127 + 16))(&v132);
    uint64_t v54 = (uint64_t)v132;
    uint64_t v133 = v128;
    if (BYTE1(ArgOperands)) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = v128;
    }
    if (!(_BYTE)ArgOperands)
    {
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v132 + 24))(&v117);
      goto LABEL_70;
    }
  }
  uint64_t v56 = (const llvm::APInt *)(v54 + 16 * v55);
  LODWORD(v118) = *((_DWORD *)v56 + 2);
  if (v118 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v117, v56);
  }
  unsigned int v117 = *(uint64_t **)v56;
LABEL_70:
  if (v118 > 0x40)
  {
    uint64_t v57 = *v117;
    MEMORY[0x21667D390]();
  }
  else
  {
    uint64_t v57 = (uint64_t)((void)v117 << -(uint64_t)v118) >> -(uint64_t)v118;
  }
  if (!(_BYTE)ArgOperands)
  {
    uint64_t v58 = v132;
    uint64_t v132 = 0;
    if (v58) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v58 + 8))(v58);
    }
  }
  if (!v129)
  {
    uint64_t v59 = v130;
    uint64_t v130 = 0;
    if (v59) {
      (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
    }
  }
  if (!(_BYTE)v126)
  {
    uint64_t v60 = v127;
    uint64_t v127 = 0;
    if (v60) {
      (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
    }
  }
  mlir::ElementsAttr::getValues<llvm::APInt>(v122, (uint64_t)&v126);
  LOWORD(ArgOperands) = (_WORD)v126;
  if ((_BYTE)v126)
  {
    uint64_t v61 = v127;
    uint64_t v132 = (llvm::APFloatBase *)v127;
    uint64_t v133 = v128;
    if (BYTE1(v126)) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = v128;
    }
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v127 + 16))(&v132);
    uint64_t v61 = (uint64_t)v132;
    uint64_t v133 = v128;
    if (BYTE1(ArgOperands)) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = v128;
    }
    if (!(_BYTE)ArgOperands)
    {
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v132 + 24))(&v117);
      goto LABEL_94;
    }
  }
  long long v63 = (const llvm::APInt *)(v61 + 16 * v62);
  LODWORD(v118) = *((_DWORD *)v63 + 2);
  if (v118 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v117, v63);
  }
  unsigned int v117 = *(uint64_t **)v63;
LABEL_94:
  if (v118 > 0x40)
  {
    uint64_t v64 = *v117;
    MEMORY[0x21667D390]();
  }
  else
  {
    uint64_t v64 = (uint64_t)((void)v117 << -(uint64_t)v118) >> -(uint64_t)v118;
  }
  if (!(_BYTE)ArgOperands)
  {
    unint64_t v65 = v132;
    uint64_t v132 = 0;
    if (v65) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v65 + 8))(v65);
    }
  }
  if (!v129)
  {
    uint64_t v66 = v130;
    uint64_t v130 = 0;
    if (v66) {
      (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
    }
  }
  if (!(_BYTE)v126)
  {
    uint64_t v67 = v127;
    uint64_t v127 = 0;
    if (v67) {
      (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
    }
  }
  Positiveuint64_t Axis = mlir::getPositiveAxis(v57, v53);
  if (PositiveAxis >= v53 - 1) {
    uint64_t v69 = v53 - 1;
  }
  else {
    uint64_t v69 = PositiveAxis;
  }
  if (PositiveAxis < 0) {
    uint64_t v69 = 0;
  }
  if (Index) {
    uint64_t v70 = (v53 - 1) & (v64 >> 63);
  }
  else {
    uint64_t v70 = v69;
  }
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v121)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    BOOL v126 = &v128;
    uint64_t v127 = 0x400000000;
    mlir::ElementsAttr::getValues<llvm::APInt>(v124, (uint64_t)&ArgOperands);
    LOWORD(v117) = ArgOperands;
    if ((_BYTE)ArgOperands) {
      uint64_t v118 = v132;
    }
    else {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v132 + 16))(&v118);
    }
    uint64_t v119 = v133;
    if (!v134)
    {
      uint64_t v98 = v135;
      uint64_t v135 = 0;
      if (v98) {
        (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
      }
    }
    if (!(_BYTE)ArgOperands)
    {
      uint64_t v99 = v132;
      uint64_t v132 = 0;
      if (v99) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v99 + 8))(v99);
      }
    }
    uint64_t v100 = v119 + v70;
    v119 += v70;
    if (v51 >= 1)
    {
      do
      {
        if (BYTE1(v117)) {
          uint64_t v101 = 0;
        }
        else {
          uint64_t v101 = v100;
        }
        if ((_BYTE)v117)
        {
          unint64_t v102 = (llvm::APFloatBase *)((char *)v118 + 16 * v101);
          LODWORD(v132) = *((_DWORD *)v102 + 2);
          if (v132 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&ArgOperands, v102);
          }
          uint64_t ArgOperands = *(void *)v102;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v118 + 24))(&ArgOperands);
        }
        int64_t v103 = (char *)v126;
        if (v127 >= HIDWORD(v127))
        {
          unint64_t v106 = v127 + 1;
          if (v126 <= &ArgOperands && (char *)v126 + 16 * v127 > (char *)&ArgOperands)
          {
            int64_t v107 = (char *)&ArgOperands - (unsigned char *)v126;
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v126, v106);
            int64_t v103 = (char *)v126;
            uint64_t v104 = (uint64_t *)((char *)v126 + v107);
          }
          else
          {
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v126, v106);
            uint64_t v104 = &ArgOperands;
            int64_t v103 = (char *)v126;
          }
        }
        else
        {
          uint64_t v104 = &ArgOperands;
        }
        uint64_t v105 = &v103[16 * v127];
        *((_DWORD *)v105 + 2) = *((_DWORD *)v104 + 2);
        *(void *)uint64_t v105 = *v104;
        *((_DWORD *)v104 + 2) = 0;
        LODWORD(v127) = v127 + 1;
        if (v132 >= 0x41 && ArgOperands) {
          MEMORY[0x21667D390](ArgOperands, 0x1000C8000313F17);
        }
        uint64_t v100 = v119 + v64;
        v119 += v64;
        --v51;
      }
      while (v51);
    }
    uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v120);
    uint64_t v110 = v109;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v120);
    uint64_t v112 = (void *)mlir::RankedTensorType::get(Shape, v110, OperandRange, 0);
    unint64_t ElementsAttr = mlir::createElementsAttr(v112, v126, v127);
    if (!(_BYTE)v117)
    {
      uint64_t v114 = v118;
      uint64_t v118 = 0;
      if (v114) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v114 + 8))(v114);
      }
    }
    uint64_t v92 = (uint64_t *)v126;
    if (v127)
    {
      uint64_t v115 = 2 * v127;
      do
      {
        if (LODWORD(v92[v115 - 1]) >= 0x41)
        {
          uint64_t v116 = v92[v115 - 2];
          if (v116) {
            MEMORY[0x21667D390](v116, 0x1000C8000313F17);
          }
        }
        v115 -= 2;
      }
      while (v115 * 8);
      uint64_t v92 = (uint64_t *)v126;
    }
    unint64_t v11 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
    if (v92 == &v128) {
      return v11;
    }
LABEL_204:
    free(v92);
    return v11;
  }
  uint64_t v71 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v121) + 136);
  if (v71 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  BOOL v126 = &v128;
  uint64_t v127 = 0x400000000;
  mlir::ElementsAttr::getValues<llvm::APFloat>(v124, (uint64_t)&ArgOperands);
  LOWORD(v117) = ArgOperands;
  if ((_BYTE)ArgOperands) {
    uint64_t v118 = v132;
  }
  else {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v132 + 16))(&v118);
  }
  uint64_t v119 = v133;
  if (!v134)
  {
    uint64_t v72 = v135;
    uint64_t v135 = 0;
    if (v72) {
      (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
    }
  }
  if (!(_BYTE)ArgOperands)
  {
    uint64_t v73 = v132;
    uint64_t v132 = 0;
    if (v73) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
    }
  }
  uint64_t v74 = v119 + v70;
  v119 += v70;
  if (v51 >= 1)
  {
    do
    {
      if (BYTE1(v117)) {
        uint64_t v75 = 0;
      }
      else {
        uint64_t v75 = v74;
      }
      if ((_BYTE)v117)
      {
        uint64_t v76 = (char *)v118 + 32 * v75;
        uint64_t v78 = (void *)*((void *)v76 + 1);
        uint64_t v77 = (const llvm::detail::DoubleAPFloat *)(v76 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v118) == v78) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v132, v77);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v132, v77);
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v118 + 24))(&ArgOperands);
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v126, (unint64_t)&ArgOperands, 1);
      uint64_t v80 = (char *)v126 + 32 * v127 + 8;
      uint64_t v81 = Address + 8;
      uint64_t v82 = (llvm::APFloatBase *)*((void *)Address + 1);
      __int16 v83 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
      if (v83 == v82) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v80, v81);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v80, (uint64_t)v81);
      }
      LODWORD(v127) = v127 + 1;
      if (v83 == v132) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v132);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v132);
      }
      uint64_t v74 = v119 + v64;
      v119 += v64;
      --v51;
    }
    while (v51);
  }
  uint64_t v84 = mlir::ShapedType::getShape((mlir::ShapedType *)v120);
  uint64_t v86 = v85;
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v124);
  uint64_t v132 = v87;
  uint64_t v88 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  uint64_t v89 = (void *)mlir::RankedTensorType::get(v84, v86, v88, 0);
  uint64_t v90 = (llvm::APFloatBase *)mlir::createElementsAttr(v89, (uint64_t)v126, v127);
  uint64_t v91 = v90;
  if (!(_BYTE)v117)
  {
    uint64_t v90 = v118;
    uint64_t v118 = 0;
    if (v90) {
      uint64_t v90 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)v90 + 8))(v90);
    }
  }
  uint64_t v92 = (uint64_t *)v126;
  uint64_t v93 = v127;
  if (v127)
  {
    uint64_t v94 = llvm::APFloatBase::PPCDoubleDouble(v90);
    uint64_t v95 = v92 - 3;
    uint64_t v96 = 4 * v93;
    do
    {
      while (1)
      {
        uint64_t v97 = (llvm::detail::DoubleAPFloat *)&v95[v96];
        if (v94 != (void *)v95[v96]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v97);
        v96 -= 4;
        if (!(v96 * 8)) {
          goto LABEL_163;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v97);
      v96 -= 4;
    }
    while (v96 * 8);
LABEL_163:
    uint64_t v92 = (uint64_t *)v126;
  }
  unint64_t v11 = (unint64_t)v91 & 0xFFFFFFFFFFFFFFFBLL;
  if (v92 != &v128) {
    goto LABEL_204;
  }
  return v11;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldStridedSliceOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldCropOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v43 = a2;
    return 0;
  uint64_t result = *a3;
  if (!*a3)
  {
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    return result;
  }
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(result);
  unint64_t v41 = result;
  uint64_t v42 = v6;
  if (result)
  {
    uint64_t Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v41);
    uint64_t v8 = Type;
    if (!Type) {
      goto LABEL_15;
    }
    uint64_t v9 = *Type;
    unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v11 = *(unsigned int *)(v9 + 16);
    if (!v11) {
      goto LABEL_15;
    }
    int v12 = *(void **)(v9 + 8);
    uint64_t v13 = &v12[2 * v11];
    do
    {
      unint64_t v14 = v11 >> 1;
      unint64_t v15 = &v12[2 * (v11 >> 1)];
      unint64_t v17 = *v15;
      uint64_t v16 = v15 + 2;
      v11 += ~(v11 >> 1);
      if (v17 < v10) {
        int v12 = v16;
      }
      else {
        unint64_t v11 = v14;
      }
    }
    while (v11);
    if (v12 != v13 && *v12 == v10) {
      uint64_t v18 = v12[1];
    }
    else {
LABEL_15:
    }
      uint64_t v18 = 0;
    v40[0] = v8;
    v40[1] = v18;
    unint64_t v19 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v43) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v19) {
      goto LABEL_25;
    }
    uint64_t v20 = *v19;
    unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v22 = *(unsigned int *)(v20 + 16);
    if (!v22) {
      goto LABEL_25;
    }
    unint64_t v23 = *(void **)(v20 + 8);
    uint64_t v24 = &v23[2 * v22];
    do
    {
      unint64_t v25 = v22 >> 1;
      unint64_t v26 = &v23[2 * (v22 >> 1)];
      unint64_t v28 = *v26;
      unint64_t v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21) {
        unint64_t v23 = v27;
      }
      else {
        unint64_t v22 = v25;
      }
    }
    while (v22);
    if (v23 != v24 && *v23 == v21) {
      uint64_t v29 = v23[1];
    }
    else {
LABEL_25:
    }
      uint64_t v29 = 0;
    unint64_t v38 = v19;
    uint64_t v39 = v29;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v38)) {
      return 0;
    }
    mlir::ShapedType::getShape((mlir::ShapedType *)&v38);
    if (v30 != 1) {
      return 0;
    }
    unint64_t v31 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v38);
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v43);
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    unint64_t v44 = (uint64_t **)&v45;
    uint64_t v47 = Bias;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v47);
    if (!DefiningOp) {
      return 0;
    }
    if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v44, DefiningOp)) {
      return 0;
    }
    uint64_t SingleInt = mlir::getSingleIntValue<int>(v45, v46);
    if ((SingleInt & 0xFF00000000) == 0) {
      return 0;
    }
    int v35 = SingleInt;
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
    }
    else
    {
      uint64_t v36 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40)
                     + 136);
      if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 0;
      }
    }
    return (uint64_t *)(v37 & 0xFFFFFFFFFFFFFFFBLL);
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldCropOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldConcatOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  v147[4] = *(void **)MEMORY[0x263EF8340];
  uint64_t v137 = a2;
  uint64_t v5 = a4 - 1;
  if (a4 == 2)
  {
    uint64_t v6 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t v7 = (uint64_t *)(*(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v7) {
      goto LABEL_11;
    }
    uint64_t v8 = *v7;
    unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v10 = *(unsigned int *)(v8 + 16);
    if (!v10) {
      goto LABEL_11;
    }
    unint64_t v11 = *(void **)(v8 + 8);
    int v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      unint64_t v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      unint64_t v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        unint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9) {
      uint64_t v17 = v11[1];
    }
    else {
LABEL_11:
    }
      uint64_t v17 = 0;
    uint64_t v142 = v7;
    uint64_t v143 = v17;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v142))
    {
      mlir::ShapedType::getShape((mlir::ShapedType *)&v142);
      if (v18 >= 1) {
        return v6 | 4;
      }
    }
  }
  uint64_t v20 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v137) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v20) {
    uint64_t v20 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v20);
  }
  else {
    uint64_t v21 = 0;
  }
  v136[0] = v20;
  v136[1] = v21;
  unint64_t v19 = 0;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v137)
    && v136[0])
  {
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v136)) {
      return 0;
    }
    char v145 = v147;
    uint64_t v146 = 0x400000000;
    unint64_t v22 = &a3[v5];
    if (v5)
    {
      unint64_t v23 = a3;
      do
      {
        if (!*v23)
        {
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          goto LABEL_201;
        }
        uint64_t v142 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*v23);
        uint64_t v143 = v24;
        if (!v142) {
          goto LABEL_201;
        }
        uint64_t Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v142);
        uint64_t v130 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(Type);
        uint64_t v131 = v26;
        if (!v130) {
          goto LABEL_201;
        }
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130)) {
          goto LABEL_201;
        }
        mlir::ShapedType::getShape((mlir::ShapedType *)&v130);
        if (v27 > 1 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130)) {
          goto LABEL_201;
        }
        uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v130);
        if (v29)
        {
          uint64_t v30 = 8 * v29;
          while (*Shape != 0x8000000000000000)
          {
            ++Shape;
            v30 -= 8;
            if (!v30) {
              goto LABEL_35;
            }
          }
          goto LABEL_201;
        }
LABEL_35:
        unint64_t v31 = v130;
        uint64_t v32 = v146;
        if (v146 >= (unint64_t)HIDWORD(v146))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v147, v146 + 1, 8);
          uint64_t v32 = v146;
        }
        v145[v32] = v31;
        uint64_t v33 = (v146 + 1);
        LODWORD(v146) = v146 + 1;
        ++v23;
      }
      while (v23 != v22);
      unint64_t ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision((void **)v145, v33);
      if (ElementTypeWithLargestPrecision) {
        goto LABEL_41;
      }
      goto LABEL_201;
    }
    unint64_t ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision(v147, 0);
    if (ElementTypeWithLargestPrecision)
    {
LABEL_41:
      uint64_t v34 = (uint64_t)ElementTypeWithLargestPrecision;
      int v35 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v136)
                     + 136);
      if (v35 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        uint64_t v142 = v144;
        uint64_t v143 = 0x400000000;
        if (v5)
        {
          do
          {
            uint64_t v86 = *a3;
            if (!*a3) {
              goto LABEL_145;
            }
            uint64_t v87 = *v86;
            unint64_t v88 = mlir::TypeID::get<mlir::ElementsAttr>();
            unint64_t v89 = *(unsigned int *)(v87 + 16);
            if (!v89) {
              goto LABEL_145;
            }
            uint64_t v90 = *(void **)(v87 + 8);
            uint64_t v91 = &v90[2 * v89];
            do
            {
              unint64_t v92 = v89 >> 1;
              uint64_t v93 = &v90[2 * (v89 >> 1)];
              unint64_t v95 = *v93;
              uint64_t v94 = v93 + 2;
              v89 += ~(v89 >> 1);
              if (v95 < v88) {
                uint64_t v90 = v94;
              }
              else {
                unint64_t v89 = v92;
              }
            }
            while (v89);
            if (v90 != v91 && *v90 == v88) {
              uint64_t v96 = (llvm::APFloatBase *)v90[1];
            }
            else {
LABEL_145:
            }
              uint64_t v96 = 0;
            char v122 = v86;
            uint64_t v123 = v96;
            mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v122, (uint64_t)&v130);
            LOWORD(v139) = (_WORD)v130;
            if ((_BYTE)v130) {
              uint64_t v140 = v131;
            }
            else {
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v131 + 16))(&v140);
            }
            uint64_t v97 = v132;
            uint64_t v141 = v132;
            __int16 v127 = v133;
            if ((_BYTE)v133)
            {
              uint64_t v128 = v134;
            }
            else
            {
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v134 + 16))(&v128);
              uint64_t v97 = v141;
            }
            uint64_t v98 = v135;
            uint64_t v129 = v135;
            while (v97 != v98)
            {
              if (BYTE1(v139)) {
                uint64_t v99 = 0;
              }
              else {
                uint64_t v99 = v97;
              }
              if ((_BYTE)v139)
              {
                uint64_t v100 = (llvm::APFloatBase *)((char *)v140 + 16 * v99);
                LODWORD(v126) = *((_DWORD *)v100 + 2);
                if (v126 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v125, v100);
                }
                uint64_t v125 = *(uint64_t **)v100;
              }
              else
              {
                (*(void (**)(uint64_t **__return_ptr))(*(void *)v140 + 24))(&v125);
              }
              uint64_t v101 = (char *)v142;
              if (v143 >= HIDWORD(v143))
              {
                unint64_t v105 = v143 + 1;
                if (v142 <= &v125 && (char *)v142 + 16 * v143 > (char *)&v125)
                {
                  int64_t v106 = (char *)&v125 - (unsigned char *)v142;
                  llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v142, v105);
                  uint64_t v101 = (char *)v142;
                  unint64_t v102 = (uint64_t *)((char *)v142 + v106);
                }
                else
                {
                  llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v142, v105);
                  unint64_t v102 = (uint64_t *)&v125;
                  uint64_t v101 = (char *)v142;
                }
              }
              else
              {
                unint64_t v102 = (uint64_t *)&v125;
              }
              int64_t v103 = (llvm::APInt *)&v101[16 * v143];
              unsigned int v104 = *((_DWORD *)v102 + 2);
              *((_DWORD *)v103 + 2) = v104;
              if (v104 > 0x40) {
                llvm::APInt::initSlowCase(v103, (const llvm::APInt *)v102);
              }
              *(void *)int64_t v103 = *v102;
              LODWORD(v143) = v143 + 1;
              if (v126 >= 0x41 && v125) {
                MEMORY[0x21667D390](v125, 0x1000C8000313F17);
              }
              uint64_t v97 = ++v141;
              uint64_t v98 = v129;
            }
            if (!(_BYTE)v127)
            {
              int64_t v107 = v128;
              uint64_t v128 = 0;
              if (v107) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v107 + 8))(v107);
              }
            }
            if (!(_BYTE)v139)
            {
              uint64_t v108 = v140;
              uint64_t v140 = 0;
              if (v108) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v108 + 8))(v108);
              }
            }
            if (!(_BYTE)v133)
            {
              uint64_t v109 = v134;
              char v134 = 0;
              if (v109) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v109 + 8))(v109);
              }
            }
            if (!(_BYTE)v130)
            {
              uint64_t v110 = v131;
              uint64_t v131 = 0;
              if (v110) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v110 + 8))(v110);
              }
            }
            ++a3;
          }
          while (a3 != v22);
        }
        uint64_t v111 = mlir::ShapedType::getShape((mlir::ShapedType *)v136);
        __int16 v113 = (void *)mlir::RankedTensorType::get(v111, v112, v34, 0);
        unint64_t ElementsAttr = mlir::createElementsAttr(v113, v142, v143);
        uint64_t v115 = v142;
        if (v143)
        {
          uint64_t v116 = 16 * v143;
          do
          {
            if (*(_DWORD *)&v115[v116 - 8] >= 0x41u)
            {
              uint64_t v117 = *(void *)&v115[v116 - 16];
              if (v117) {
                MEMORY[0x21667D390](v117, 0x1000C8000313F17);
              }
            }
            v116 -= 16;
          }
          while (v116);
          uint64_t v115 = v142;
        }
        unint64_t v19 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
        if (v115 == v144) {
          goto LABEL_202;
        }
        uint64_t v118 = v115;
      }
      else
      {
        if (v35 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          goto LABEL_201;
        }
        uint64_t v142 = v144;
        uint64_t v143 = 0x400000000;
        uint64_t v121 = v34;
        uint64_t v130 = (uint64_t *)v34;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v130);
        if (v5)
        {
          uint64_t v48 = FloatSemantics;
          do
          {
            unsigned int v49 = *a3;
            if (!*a3) {
              goto LABEL_89;
            }
            uint64_t v50 = *v49;
            unint64_t v51 = mlir::TypeID::get<mlir::ElementsAttr>();
            unint64_t v52 = *(unsigned int *)(v50 + 16);
            if (!v52) {
              goto LABEL_89;
            }
            uint64_t v53 = *(void **)(v50 + 8);
            uint64_t v54 = &v53[2 * v52];
            do
            {
              unint64_t v55 = v52 >> 1;
              uint64_t v56 = &v53[2 * (v52 >> 1)];
              unint64_t v58 = *v56;
              uint64_t v57 = v56 + 2;
              v52 += ~(v52 >> 1);
              if (v58 < v51) {
                uint64_t v53 = v57;
              }
              else {
                unint64_t v52 = v55;
              }
            }
            while (v52);
            if (v53 != v54 && *v53 == v51) {
              uint64_t v59 = v53[1];
            }
            else {
LABEL_89:
            }
              uint64_t v59 = 0;
            uint64_t v125 = v49;
            uint64_t v126 = v59;
            mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v125, (uint64_t)&v130);
            __int16 v127 = (__int16)v130;
            if ((_BYTE)v130) {
              uint64_t v128 = v131;
            }
            else {
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v131 + 16))(&v128);
            }
            uint64_t v60 = v132;
            uint64_t v129 = v132;
            LOWORD(v122) = v133;
            if ((_BYTE)v133)
            {
              uint64_t v123 = v134;
            }
            else
            {
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v134 + 16))(&v123);
              uint64_t v60 = v129;
            }
            uint64_t v61 = v135;
            uint64_t v124 = v135;
            while (v60 != v61)
            {
              if (HIBYTE(v127)) {
                uint64_t v62 = 0;
              }
              else {
                uint64_t v62 = v60;
              }
              if ((_BYTE)v127)
              {
                long long v63 = (char *)v128 + 32 * v62;
                unint64_t v65 = (void *)*((void *)v63 + 1);
                uint64_t v64 = (const llvm::detail::DoubleAPFloat *)(v63 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v128) == v65) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v140, v64);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v140, v64);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v128 + 24))(&v139);
              }
              char v138 = 0;
              llvm::APFloat::convert((uint64_t)&v139, v48, 1, &v138);
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v142, (unint64_t)&v139, 1);
              uint64_t v67 = (llvm::detail::IEEEFloat *)((char *)v142 + 32 * v143 + 8);
              uint64_t v69 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              uint64_t v68 = (llvm::APFloatBase *)*((void *)Address + 1);
              uint64_t v70 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
              if (v70 == v68) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v67, v69);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v67, v69);
              }
              LODWORD(v143) = v143 + 1;
              if (v70 == v140) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v140);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v140);
              }
              uint64_t v60 = ++v129;
              uint64_t v61 = v124;
            }
            if (!(_BYTE)v122)
            {
              uint64_t v71 = v123;
              uint64_t v123 = 0;
              if (v71) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v71 + 8))(v71);
              }
            }
            if (!(_BYTE)v127)
            {
              uint64_t v72 = v128;
              uint64_t v128 = 0;
              if (v72) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v72 + 8))(v72);
              }
            }
            if (!(_BYTE)v133)
            {
              uint64_t v73 = v134;
              char v134 = 0;
              if (v73) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
              }
            }
            if (!(_BYTE)v130)
            {
              uint64_t v74 = v131;
              uint64_t v131 = 0;
              if (v74) {
                (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
              }
            }
            ++a3;
          }
          while (a3 != v22);
        }
        uint64_t v75 = mlir::ShapedType::getShape((mlir::ShapedType *)v136);
        uint64_t v77 = (void *)mlir::RankedTensorType::get(v75, v76, v121, 0);
        uint64_t v78 = (llvm::APFloatBase *)mlir::createElementsAttr(v77, (uint64_t)v142, v143);
        uint64_t v79 = v78;
        uint64_t v80 = v142;
        uint64_t v81 = v143;
        if (v143)
        {
          uint64_t v82 = llvm::APFloatBase::PPCDoubleDouble(v78);
          __int16 v83 = v80 - 24;
          uint64_t v84 = 32 * v81;
          do
          {
            while (1)
            {
              uint64_t v85 = (llvm::detail::DoubleAPFloat *)&v83[v84];
              if (v82 != *(void **)&v83[v84]) {
                break;
              }
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v85);
              v84 -= 32;
              if (!v84) {
                goto LABEL_132;
              }
            }
            llvm::detail::IEEEFloat::~IEEEFloat(v85);
            v84 -= 32;
          }
          while (v84);
LABEL_132:
          uint64_t v80 = v142;
        }
        unint64_t v19 = (unint64_t)v79 & 0xFFFFFFFFFFFFFFFBLL;
        if (v80 == v144) {
          goto LABEL_202;
        }
        uint64_t v118 = v80;
      }
      free(v118);
      goto LABEL_202;
    }
LABEL_201:
    unint64_t v19 = 0;
LABEL_202:
    if (v145 != v147) {
      free(v145);
    }
  }
  return v19;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldConcatOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReshapeOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v59 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v59) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  unint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    unint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    int v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v58[0] = v4;
  v58[1] = v14;
  unint64_t v15 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v59) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15) {
    goto LABEL_20;
  }
  uint64_t v16 = *v15;
  unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v18 = *(unsigned int *)(v16 + 16);
  if (!v18) {
    goto LABEL_20;
  }
  unint64_t v19 = *(void **)(v16 + 8);
  uint64_t v20 = &v19[2 * v18];
  do
  {
    unint64_t v21 = v18 >> 1;
    unint64_t v22 = &v19[2 * (v18 >> 1)];
    unint64_t v24 = *v22;
    unint64_t v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17) {
      unint64_t v19 = v23;
    }
    else {
      unint64_t v18 = v21;
    }
  }
  while (v18);
  if (v19 != v20 && *v19 == v17) {
    uint64_t v25 = v19[1];
  }
  else {
LABEL_20:
  }
    uint64_t v25 = 0;
  v57[0] = (uint64_t)v15;
  v57[1] = v25;
  if (*a3)
  {
    unint64_t v26 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
    uint64_t v28 = v27;
    unint64_t v55 = v26;
    uint64_t v56 = v27;
    if (v26 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v57))
    {
      uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v57);
      if (!v30)
      {
LABEL_30:
        uint64_t Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(Type);
        LOBYTE(v60) = 0;
        char v61 = 0;
        uint64_t v34 = mlir::ShapedType::cloneWith(v57, &v60, ElementTypeOrSelf);
        return (unint64_t)mlir::reshapeElementsAttr((uint64_t)v26, v28, v34, v35) & 0xFFFFFFFFFFFFFFFBLL;
      }
      uint64_t v31 = 8 * v30;
      while (*Shape != 0x8000000000000000)
      {
        ++Shape;
        v31 -= 8;
        if (!v31) {
          goto LABEL_30;
        }
      }
    }
  }
  else
  {
    unint64_t v55 = 0;
    uint64_t v56 = 0;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v58)) {
    return 0;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v57)) {
    return 0;
  }
  unint64_t v37 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v58);
  uint64_t v39 = v38;
  uint64_t v40 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v57);
  if (v39 != v41 || memcmp(v37, v40, 8 * v39)) {
    return 0;
  }
  uint64_t v42 = mlir::ShapedType::getShape((mlir::ShapedType *)v57);
  if (v43)
  {
    unint64_t v44 = (v43 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v44 >= 3)
    {
      unint64_t v47 = v44 + 1;
      uint64_t v48 = (v44 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v46 = (uint64_t *)(v42 + 8 * v48);
      unsigned int v49 = (int64x2_t *)(v42 + 16);
      int64x2_t v50 = 0uLL;
      int64x2_t v51 = vdupq_n_s64(0x8000000000000000);
      uint64_t v52 = v48;
      int64x2_t v53 = 0uLL;
      do
      {
        int64x2_t v50 = vsubq_s64(v50, vceqq_s64(v49[-1], v51));
        int64x2_t v53 = vsubq_s64(v53, vceqq_s64(*v49, v51));
        v49 += 2;
        v52 -= 4;
      }
      while (v52);
      unint64_t v45 = vaddvq_s64(vaddq_s64(v53, v50));
      if (v47 == v48) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v45 = 0;
      uint64_t v46 = (uint64_t *)v42;
    }
    do
    {
      uint64_t v54 = *v46++;
      if (v54 == 0x8000000000000000) {
        ++v45;
      }
    }
    while (v46 != (uint64_t *)(v42 + 8 * v43));
LABEL_47:
    if (v45 > 1) {
      return 0;
    }
  }
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v59) | 4;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReshapeOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldGetCoordOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
    return 0;
  unint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v8 = (uint64_t)v7;
  v36[0] = v6;
  v36[1] = v7;
  unint64_t v9 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
  v35[0] = (uint64_t)v9;
  v35[1] = v10;
  if (!v6 || v9 == 0) {
    return 0;
  }
  uint64_t v12 = (uint64_t)v9;
  uint64_t v13 = v10;
  if (mlir::ElementsAttr::getNumElements((uint64_t)v6, v8) != 1 || mlir::ElementsAttr::getNumElements(v12, v13) != 1) {
    return 0;
  }
  mlir::ElementsAttr::getValues<llvm::APInt>(v35, (uint64_t)&v38);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&v38, 0, (llvm::APInt *)&ElementTypeOrSelf);
  if (v34 > 0x40)
  {
    uint64_t v14 = *(void *)ElementTypeOrSelf;
    MEMORY[0x21667D390]();
    if (v41) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = ElementTypeOrSelf << -(uint64_t)v34 >> -(uint64_t)v34;
    if (v41) {
      goto LABEL_14;
    }
  }
  uint64_t v15 = v42;
  uint64_t v42 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
LABEL_14:
  if (!(_BYTE)v38)
  {
    uint64_t v16 = v39;
    uint64_t v39 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  if (v14) {
    return 0;
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)v36, (uint64_t)&v38);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&v38, 0, (llvm::APInt *)&ElementTypeOrSelf);
  if (v34 > 0x40)
  {
    uint64_t v18 = *(void *)ElementTypeOrSelf;
    MEMORY[0x21667D390]();
  }
  else
  {
    uint64_t v18 = ElementTypeOrSelf << -(uint64_t)v34 >> -(uint64_t)v34;
  }
  if (!v41)
  {
    uint64_t v19 = v42;
    uint64_t v42 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  if (!(_BYTE)v38)
  {
    uint64_t v20 = v39;
    uint64_t v39 = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v36[0]);
  if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf) == 32)
  {
    uint64_t v38 = &v40;
    uint64_t v39 = 0xC00000000;
    if (v18 < 1)
    {
      uint64_t v21 = 0;
    }
    else
    {
      LODWORD(v21) = 0;
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (v21 >= HIDWORD(v39))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, &v40, v21 + 1, 4);
          LODWORD(v21) = v39;
        }
        *((_DWORD *)v38 + v21) = i;
        uint64_t v21 = (v39 + 1);
        LODWORD(v39) = v39 + 1;
      }
    }
    uint64_t v37 = v21;
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v26 = mlir::IntegerType::get(Context, 0x20u, 1u);
    uint64_t v27 = (void *)mlir::RankedTensorType::get((uint64_t)&v37, 1, v26, 0);
    uint64_t v28 = v38;
    uint64_t v29 = (const void *)(4 * v39);
  }
  else
  {
    uint64_t v38 = &v40;
    uint64_t v39 = 0x600000000;
    if (v18 < 1)
    {
      uint64_t v23 = 0;
    }
    else
    {
      LODWORD(v23) = 0;
      for (uint64_t j = 0; j != v18; ++j)
      {
        if (v23 >= HIDWORD(v39))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, &v40, v23 + 1, 8);
          LODWORD(v23) = v39;
        }
        *((void *)v38 + v23) = j;
        uint64_t v23 = (v39 + 1);
        LODWORD(v39) = v39 + 1;
      }
    }
    uint64_t v37 = v23;
    uint64_t v30 = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v31 = mlir::IntegerType::get(v30, 0x40u, 1u);
    uint64_t v27 = (void *)mlir::RankedTensorType::get((uint64_t)&v37, 1, v31, 0);
    uint64_t v28 = v38;
    uint64_t v29 = (const void *)(8 * v39);
  }
  Rawunint64_t ElementsAttr = (unint64_t)mlir::createRawElementsAttr(v27, v28, v29);
  if (v38 != &v40) {
    free(v38);
  }
  return RawElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldGetCoordOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldInitRandomPhiloxStateOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  v71[1] = *MEMORY[0x263EF8340];
  uint64_t v61 = a2;
  if (!a4)
  {
LABEL_5:
    unint64_t v7 = *a3;
    if (!*a3) {
      goto LABEL_14;
    }
    uint64_t v8 = *v7;
    unint64_t v9 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v10 = *(unsigned int *)(v8 + 16);
    if (!v10) {
      goto LABEL_14;
    }
    unint64_t v11 = *(void **)(v8 + 8);
    uint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      uint64_t v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      uint64_t v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        unint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
    {
      uint64_t v17 = v11[1];
      uint64_t v18 = a3[1];
      if (!v18) {
        goto LABEL_23;
      }
    }
    else
    {
LABEL_14:
      uint64_t v17 = 0;
      uint64_t v18 = a3[1];
      if (!v18) {
        goto LABEL_23;
      }
    }
    uint64_t v19 = *v18;
    unint64_t v20 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v21 = *(unsigned int *)(v19 + 16);
    if (v21)
    {
      unint64_t v22 = *(void **)(v19 + 8);
      uint64_t v23 = &v22[2 * v21];
      do
      {
        unint64_t v24 = v21 >> 1;
        uint64_t v25 = &v22[2 * (v21 >> 1)];
        unint64_t v27 = *v25;
        uint64_t v26 = v25 + 2;
        v21 += ~(v21 >> 1);
        if (v27 < v20) {
          unint64_t v22 = v26;
        }
        else {
          unint64_t v21 = v24;
        }
      }
      while (v21);
      if (v22 != v23 && *v22 == v20)
      {
        uint64_t v28 = v22[1];
        uint64_t v29 = a3[2];
        if (!v29) {
          goto LABEL_32;
        }
LABEL_24:
        uint64_t v30 = *v29;
        unint64_t v31 = mlir::TypeID::get<mlir::ElementsAttr>();
        unint64_t v32 = *(unsigned int *)(v30 + 16);
        if (v32)
        {
          uint64_t v33 = *(void **)(v30 + 8);
          unsigned int v34 = &v33[2 * v32];
          do
          {
            unint64_t v35 = v32 >> 1;
            uint64_t v36 = &v33[2 * (v32 >> 1)];
            unint64_t v38 = *v36;
            uint64_t v37 = v36 + 2;
            v32 += ~(v32 >> 1);
            if (v38 < v31) {
              uint64_t v33 = v37;
            }
            else {
              unint64_t v32 = v35;
            }
          }
          while (v32);
          if (v33 != v34 && *v33 == v31)
          {
            uint64_t v39 = v33[1];
            goto LABEL_33;
          }
        }
LABEL_32:
        uint64_t v39 = 0;
LABEL_33:
        v70[0] = v71;
        v70[1] = (void *)0x100000000;
        v68[0] = &v69;
        v68[1] = (void *)0x100000000;
        v66[0] = &v67;
        v66[1] = (void *)0x100000000;
        mlir::getIntValues<long long>((uint64_t)v7, v17, (uint64_t)v70, 1);
        mlir::getIntValues<long long>((uint64_t)v18, v28, (uint64_t)v68, 1);
        mlir::getIntValues<long long>((uint64_t)v29, v39, (uint64_t)v66, 1);
        int v62 = 1;
        uint64_t v40 = *(void *)v68[0];
        uint64_t v41 = *(void *)v66[0];
        uint64_t v63 = *(void *)v70[0];
        uint64_t v64 = v40;
        uint64_t v65 = v41;
        uint64_t v42 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v61) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v42) {
          goto LABEL_42;
        }
        uint64_t v43 = *v42;
        unint64_t v44 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v45 = *(unsigned int *)(v43 + 16);
        if (!v45) {
          goto LABEL_42;
        }
        uint64_t v46 = *(void **)(v43 + 8);
        unint64_t v47 = &v46[2 * v45];
        do
        {
          unint64_t v48 = v45 >> 1;
          unsigned int v49 = &v46[2 * (v45 >> 1)];
          unint64_t v51 = *v49;
          int64x2_t v50 = v49 + 2;
          v45 += ~(v45 >> 1);
          if (v51 < v44) {
            uint64_t v46 = v50;
          }
          else {
            unint64_t v45 = v48;
          }
        }
        while (v45);
        if (v46 != v47 && *v46 == v44) {
          uint64_t v52 = (void *)v46[1];
        }
        else {
LABEL_42:
        }
          uint64_t v52 = 0;
        v60[0] = v42;
        v60[1] = v52;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60))
        {
          uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v60);
          uint64_t v55 = v54;
          uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v60[0]);
          uint64_t v57 = (void *)mlir::RankedTensorType::get(Shape, v55, ElementTypeOrSelf, 0);
          unint64_t v58 = (unint64_t)mlir::createRawElementsAttr(v57, &v62, (const void *)0x1C) & 0xFFFFFFFFFFFFFFFBLL;
        }
        else
        {
          unint64_t v58 = 0;
        }
        if (v66[0] != &v67) {
          free(v66[0]);
        }
        if (v68[0] != &v69) {
          free(v68[0]);
        }
        if (v70[0] != v71) {
          free(v70[0]);
        }
        return v58;
      }
    }
LABEL_23:
    uint64_t v28 = 0;
    uint64_t v29 = a3[2];
    if (!v29) {
      goto LABEL_32;
    }
    goto LABEL_24;
  }
  uint64_t v5 = 8 * a4;
  unint64_t v6 = a3;
  while (*v6)
  {
    ++v6;
    v5 -= 8;
    if (!v5) {
      goto LABEL_5;
    }
  }
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldInitRandomPhiloxStateOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldPadOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v251 = *MEMORY[0x263EF8340];
  uint64_t v226 = a2;
  uint64_t v4 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v226);
  v225[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v225[1] = v5;
  if (!v225[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v225)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v225))
  {
    return 0;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v225);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v8 -= 8;
      if (!v8) {
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  unint64_t v9 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v225);
  if (mlir::ShapedType::getNumElements(v9, v10) > 64) {
    return 0;
  }
  unint64_t v11 = *a3;
  if (*a3) {
    unint64_t v11 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v11);
  }
  else {
    uint64_t v12 = 0;
  }
  v224[0] = v11;
  v224[1] = v12;
  if (!a3[1])
  {
    uint64_t v222 = 0;
    uint64_t v223 = 0;
    if (v11) {
      goto LABEL_16;
    }
    return 0;
  }
  uint64_t v222 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
  uint64_t v223 = v13;
  if (!v224[0]) {
    return 0;
  }
LABEL_16:
  unint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v224);
  uint64_t v247 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&ArgOperands)) {
    return 0;
  }
  uint64_t v240 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v224);
  v241 = v15;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v240);
  if (v16 > 1 || !v222) {
    return 0;
  }
  int PaddingMode = mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v226);
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v222, (uint64_t)&ArgOperands);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&ArgOperands, 0, (llvm::APInt *)&v240);
  if (v241 > 0x40)
  {
    unint64_t v18 = *(void *)v240;
    MEMORY[0x21667D390]();
  }
  else
  {
    unint64_t v18 = v240 << -(char)v241 >> -(char)v241;
  }
  if (!v249)
  {
    uint64_t v19 = v250;
    v250 = 0;
    if (v19) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v19 + 8))(v19);
    }
  }
  if (!(_BYTE)ArgOperands)
  {
    uint64_t v20 = v247;
    uint64_t v247 = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v222, (uint64_t)&ArgOperands);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&ArgOperands, 1, (llvm::APInt *)&v240);
  if (v241 > 0x40)
  {
    uint64_t v21 = *(void *)v240;
    MEMORY[0x21667D390]();
  }
  else
  {
    uint64_t v21 = v240 << -(char)v241 >> -(char)v241;
  }
  if (!v249)
  {
    unint64_t v22 = v250;
    v250 = 0;
    if (v22) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v22 + 8))(v22);
    }
  }
  if (!(_BYTE)ArgOperands)
  {
    uint64_t v23 = v247;
    uint64_t v247 = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
  unint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v224);
  uint64_t v247 = v24;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    unint64_t ArgOperands = (unint64_t)&v248;
    uint64_t v247 = 0x300000000;
    mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)v224, (uint64_t)&v235);
    LOWORD(v227) = (_WORD)v235;
    if ((_BYTE)v235) {
      v228[0] = v236;
    }
    else {
      (*(void (**)(void *__return_ptr))(*(void *)v236 + 16))(v228);
    }
    v228[1] = v237;
    mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)v224, (uint64_t)&v229);
    __int16 v219 = v232;
    if ((_BYTE)v232) {
      uint64_t v220 = v233;
    }
    else {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v233 + 16))(&v220);
    }
    uint64_t v221 = v234;
    llvm::SmallVector<llvm::APInt,3u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(&v240, (uint64_t)&v227, (uint64_t)&v219);
    if (!(_BYTE)v219)
    {
      unint64_t v32 = v220;
      uint64_t v220 = 0;
      if (v32) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v32 + 8))(v32);
      }
    }
    if (!(_BYTE)v232)
    {
      uint64_t v33 = v233;
      char v233 = 0;
      if (v33) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v33 + 8))(v33);
      }
    }
    if (!(_BYTE)v229)
    {
      uint64_t v34 = v230;
      uint64_t v230 = 0;
      if (v34) {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
    }
    if (!(_BYTE)v227)
    {
      uint64_t v35 = v228[0];
      v228[0] = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
    if (!v238)
    {
      uint64_t v36 = v239;
      uint64_t v239 = 0;
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
    }
    if (!(_BYTE)v235)
    {
      uint64_t v37 = v236;
      uint64_t v236 = 0;
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
    }
    switch(PaddingMode)
    {
      case 0:
        unint64_t v38 = a3[2];
        if (v38) {
          unint64_t v38 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v38);
        }
        else {
          uint64_t v39 = 0;
        }
        char v229 = v38;
        uint64_t v230 = v39;
        if (v38 && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v229) & 1) != 0)
        {
          mlir::ElementsAttr::getSplatValue<llvm::APInt>((mlir::BranchOpInterface *)&v229, (llvm::APInt *)&v217);
          uint64_t v235 = &v237;
          uint64_t v236 = 0x300000000;
          llvm::SmallVectorImpl<llvm::APInt>::assign((uint64_t)&v235, v18, (llvm::APInt *)&v217);
          llvm::SmallVectorImpl<llvm::APInt>::operator=((uint64_t)&ArgOperands, (uint64_t *)&v235);
          int v174 = (char *)v235;
          if (v236)
          {
            uint64_t v175 = 16 * v236;
            do
            {
              if (*(_DWORD *)&v174[v175 - 8] >= 0x41u)
              {
                uint64_t v176 = *(void *)&v174[v175 - 16];
                if (v176) {
                  MEMORY[0x21667D390](v176, 0x1000C8000313F17);
                }
              }
              v175 -= 16;
            }
            while (v175);
            int v174 = (char *)v235;
          }
          if (v174 != (char *)&v237) {
            free(v174);
          }
          unsigned int v177 = (const llvm::APInt *)v240;
          uint64_t v178 = v241;
          uint64_t v179 = v247;
          if (v247 + (unint64_t)v241 > HIDWORD(v247))
          {
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v247 + (unint64_t)v241);
            uint64_t v179 = v247;
          }
          if (v178)
          {
            unint64_t v180 = (llvm::APInt *)(ArgOperands + 16 * v179);
            uint64_t v181 = 16 * v178;
            do
            {
              unsigned int v182 = *((_DWORD *)v177 + 2);
              *((_DWORD *)v180 + 2) = v182;
              if (v182 > 0x40) {
                llvm::APInt::initSlowCase(v180, v177);
              }
              *(void *)unint64_t v180 = *(void *)v177;
              unsigned int v177 = (const llvm::APInt *)((char *)v177 + 16);
              unint64_t v180 = (llvm::APInt *)((char *)v180 + 16);
              v181 -= 16;
            }
            while (v181);
            LODWORD(v179) = v247;
          }
          uint64_t v183 = (v179 + v178);
          LODWORD(v247) = v183;
          unint64_t v184 = v21 + v183;
          uint64_t v185 = (const llvm::APInt *)&v217;
          if (v21 + v183 > (unint64_t)HIDWORD(v247))
          {
            BOOL v214 = ArgOperands + 16 * v183 > (unint64_t)&v217;
            if (ArgOperands <= (unint64_t)&v217 && v214)
            {
              int64_t v216 = (int64_t)&v218[-1] - ArgOperands;
              llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v184);
              uint64_t v185 = (const llvm::APInt *)(ArgOperands + v216);
            }
            else
            {
              llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v184);
              uint64_t v185 = (const llvm::APInt *)&v217;
            }
          }
          int v186 = v247;
          if (v21)
          {
            unint64_t v187 = (llvm::APInt *)(ArgOperands + 16 * v247);
            uint64_t v188 = v21;
            do
            {
              unsigned int v189 = *((_DWORD *)v185 + 2);
              *((_DWORD *)v187 + 2) = v189;
              if (v189 > 0x40) {
                llvm::APInt::initSlowCase(v187, v185);
              }
              *(void *)unint64_t v187 = *(void *)v185;
              unint64_t v187 = (llvm::APInt *)((char *)v187 + 16);
              --v188;
            }
            while (v188);
            int v186 = v247;
          }
          LODWORD(v247) = v186 + v21;
          if (LODWORD(v218[0]) < 0x41) {
            goto LABEL_318;
          }
          unint64_t v173 = v217;
          if (!v217) {
            goto LABEL_318;
          }
          goto LABEL_317;
        }
        unint64_t v27 = 0;
        goto LABEL_319;
      case 1:
        uint64_t v68 = (const llvm::APInt *)v240;
        unsigned int v69 = v247;
        if (v18)
        {
          uint64_t v70 = (char *)(v240 + 16 * v18);
          unint64_t v71 = (unint64_t)v70;
          do
          {
            unint64_t v72 = ArgOperands;
            uint64_t v73 = (const llvm::APInt *)v71;
            if (v69 >= HIDWORD(v247))
            {
              unint64_t v76 = v69 + 1;
              uint64_t v77 = (_DWORD *)(ArgOperands + 16 * v69);
              if (ArgOperands <= v71 && (unint64_t)v77 > v71)
              {
                uint64_t v79 = &v70[-ArgOperands];
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v76);
                unint64_t v72 = ArgOperands;
                uint64_t v73 = (const llvm::APInt *)&v79[ArgOperands];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v76);
                unint64_t v72 = ArgOperands;
                uint64_t v73 = (const llvm::APInt *)v71;
              }
            }
            uint64_t v74 = (llvm::APInt *)(v72 + 16 * v247);
            unsigned int v75 = *((_DWORD *)v73 + 2);
            *((_DWORD *)v74 + 2) = v75;
            if (v75 > 0x40) {
              llvm::APInt::initSlowCase(v74, v73);
            }
            *(void *)uint64_t v74 = *(void *)v73;
            unsigned int v69 = v247 + 1;
            LODWORD(v247) = v247 + 1;
            v71 -= 16;
            v70 -= 16;
            --v18;
          }
          while (v18);
          uint64_t v68 = (const llvm::APInt *)v240;
        }
        uint64_t v92 = v241;
        uint64_t v93 = v69;
        unint64_t v94 = v69 + (unint64_t)v241;
        if (v94 > HIDWORD(v247))
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v94);
          uint64_t v93 = v247;
          unsigned int v69 = v247;
        }
        if (v92)
        {
          unint64_t v95 = (llvm::APInt *)(ArgOperands + 16 * v93);
          uint64_t v96 = 16 * v92;
          do
          {
            unsigned int v97 = *((_DWORD *)v68 + 2);
            *((_DWORD *)v95 + 2) = v97;
            if (v97 > 0x40) {
              llvm::APInt::initSlowCase(v95, v68);
            }
            *(void *)unint64_t v95 = *(void *)v68;
            uint64_t v68 = (const llvm::APInt *)((char *)v68 + 16);
            unint64_t v95 = (llvm::APInt *)((char *)v95 + 16);
            v96 -= 16;
          }
          while (v96);
          unsigned int v69 = v247;
        }
        unsigned int v104 = v69 + v92;
        LODWORD(v247) = v104;
        if (v21)
        {
          unint64_t v105 = (char *)(v240 + 16 * v241 - 32);
          uint64_t v106 = -16 * v21;
          unint64_t v107 = (unint64_t)v105;
          do
          {
            unint64_t v108 = ArgOperands;
            uint64_t v109 = (const llvm::APInt *)v107;
            if (v104 >= HIDWORD(v247))
            {
              unint64_t v112 = v104 + 1;
              __int16 v113 = (_DWORD *)(ArgOperands + 16 * v104);
              if (ArgOperands <= v107 && (unint64_t)v113 > v107)
              {
                uint64_t v115 = &v105[-ArgOperands];
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v112);
                unint64_t v108 = ArgOperands;
                uint64_t v109 = (const llvm::APInt *)&v115[ArgOperands];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v112);
                unint64_t v108 = ArgOperands;
                uint64_t v109 = (const llvm::APInt *)v107;
              }
            }
            uint64_t v110 = (llvm::APInt *)(v108 + 16 * v247);
            unsigned int v111 = *((_DWORD *)v109 + 2);
            *((_DWORD *)v110 + 2) = v111;
            if (v111 > 0x40) {
              llvm::APInt::initSlowCase(v110, v109);
            }
            *(void *)uint64_t v110 = *(void *)v109;
            unsigned int v104 = v247 + 1;
            LODWORD(v247) = v247 + 1;
            v107 -= 16;
            v105 -= 16;
            v106 += 16;
          }
          while (v106);
        }
        goto LABEL_318;
      case 2:
        uint64_t v80 = (const llvm::APInt *)v240;
        unsigned int v81 = v247;
        if (v18)
        {
          uint64_t v82 = (char *)(v240 - 16);
          uint64_t v83 = 16 * v18;
          do
          {
            uint64_t v84 = (const llvm::APInt *)&v82[v83];
            unint64_t v85 = ArgOperands;
            if (v81 >= HIDWORD(v247))
            {
              unint64_t v88 = v81 + 1;
              unint64_t v89 = (const llvm::APInt *)(ArgOperands + 16 * v81);
              if (ArgOperands <= (unint64_t)v84 && v89 > v84)
              {
                uint64_t v91 = &v82[v83 - ArgOperands];
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v88);
                unint64_t v85 = ArgOperands;
                uint64_t v84 = (const llvm::APInt *)&v91[ArgOperands];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v88);
                unint64_t v85 = ArgOperands;
              }
            }
            uint64_t v86 = (llvm::APInt *)(v85 + 16 * v247);
            unsigned int v87 = *((_DWORD *)v84 + 2);
            *((_DWORD *)v86 + 2) = v87;
            if (v87 > 0x40) {
              llvm::APInt::initSlowCase(v86, v84);
            }
            *(void *)uint64_t v86 = *(void *)v84;
            unsigned int v81 = v247 + 1;
            LODWORD(v247) = v247 + 1;
            v83 -= 16;
          }
          while (v83);
          uint64_t v80 = (const llvm::APInt *)v240;
        }
        uint64_t v98 = v241;
        uint64_t v99 = v81;
        unint64_t v100 = v81 + (unint64_t)v241;
        if (v100 > HIDWORD(v247))
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v100);
          uint64_t v99 = v247;
          unsigned int v81 = v247;
        }
        if (v98)
        {
          uint64_t v101 = (llvm::APInt *)(ArgOperands + 16 * v99);
          uint64_t v102 = 16 * v98;
          do
          {
            unsigned int v103 = *((_DWORD *)v80 + 2);
            *((_DWORD *)v101 + 2) = v103;
            if (v103 > 0x40) {
              llvm::APInt::initSlowCase(v101, v80);
            }
            *(void *)uint64_t v101 = *(void *)v80;
            uint64_t v80 = (const llvm::APInt *)((char *)v80 + 16);
            uint64_t v101 = (llvm::APInt *)((char *)v101 + 16);
            v102 -= 16;
          }
          while (v102);
          unsigned int v81 = v247;
        }
        unsigned int v116 = v81 + v98;
        LODWORD(v247) = v116;
        if (v21)
        {
          uint64_t v117 = (char *)(v240 + 16 * v241 - 16);
          uint64_t v118 = -16 * v21;
          unint64_t v119 = (unint64_t)v117;
          do
          {
            unint64_t v120 = ArgOperands;
            uint64_t v121 = (const llvm::APInt *)v119;
            if (v116 >= HIDWORD(v247))
            {
              unint64_t v124 = v116 + 1;
              uint64_t v125 = (_DWORD *)(ArgOperands + 16 * v116);
              if (ArgOperands <= v119 && (unint64_t)v125 > v119)
              {
                __int16 v127 = &v117[-ArgOperands];
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v124);
                unint64_t v120 = ArgOperands;
                uint64_t v121 = (const llvm::APInt *)&v127[ArgOperands];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v124);
                unint64_t v120 = ArgOperands;
                uint64_t v121 = (const llvm::APInt *)v119;
              }
            }
            char v122 = (llvm::APInt *)(v120 + 16 * v247);
            unsigned int v123 = *((_DWORD *)v121 + 2);
            *((_DWORD *)v122 + 2) = v123;
            if (v123 > 0x40) {
              llvm::APInt::initSlowCase(v122, v121);
            }
            *(void *)char v122 = *(void *)v121;
            unsigned int v116 = v247 + 1;
            LODWORD(v247) = v247 + 1;
            v119 -= 16;
            v117 -= 16;
            v118 += 16;
          }
          while (v118);
        }
        goto LABEL_318;
      case 3:
        LODWORD(v230) = *(_DWORD *)(v240 + 8);
        if (v230 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v229, (const llvm::APInt *)v240);
        }
        char v229 = *(void **)v240;
        uint64_t v155 = (char *)(v240 + 16 * v241);
        char v156 = (const llvm::APInt *)(v155 - 16);
        LODWORD(v218[0]) = *((_DWORD *)v155 - 2);
        if (LODWORD(v218[0]) > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v217, v156);
        }
        uint64_t v217 = *(void **)v156;
        uint64_t v235 = &v237;
        uint64_t v236 = 0x300000000;
        llvm::SmallVectorImpl<llvm::APInt>::assign((uint64_t)&v235, v18, (llvm::APInt *)&v229);
        llvm::SmallVectorImpl<llvm::APInt>::operator=((uint64_t)&ArgOperands, (uint64_t *)&v235);
        char v157 = (char *)v235;
        if (v236)
        {
          uint64_t v158 = 16 * v236;
          do
          {
            if (*(_DWORD *)&v157[v158 - 8] >= 0x41u)
            {
              uint64_t v159 = *(void *)&v157[v158 - 16];
              if (v159) {
                MEMORY[0x21667D390](v159, 0x1000C8000313F17);
              }
            }
            v158 -= 16;
          }
          while (v158);
          char v157 = (char *)v235;
        }
        if (v157 != (char *)&v237) {
          free(v157);
        }
        uint64_t v160 = (const llvm::APInt *)v240;
        uint64_t v161 = v241;
        uint64_t v162 = v247;
        if (v247 + (unint64_t)v241 > HIDWORD(v247))
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v247 + (unint64_t)v241);
          uint64_t v162 = v247;
        }
        if (v161)
        {
          uint64_t v163 = (llvm::APInt *)(ArgOperands + 16 * v162);
          uint64_t v164 = 16 * v161;
          do
          {
            unsigned int v165 = *((_DWORD *)v160 + 2);
            *((_DWORD *)v163 + 2) = v165;
            if (v165 > 0x40) {
              llvm::APInt::initSlowCase(v163, v160);
            }
            *(void *)uint64_t v163 = *(void *)v160;
            uint64_t v160 = (const llvm::APInt *)((char *)v160 + 16);
            uint64_t v163 = (llvm::APInt *)((char *)v163 + 16);
            v164 -= 16;
          }
          while (v164);
          LODWORD(v162) = v247;
        }
        uint64_t v166 = (v162 + v161);
        LODWORD(v247) = v166;
        unint64_t v167 = v21 + v166;
        unint64_t v168 = (const llvm::APInt *)&v217;
        if (v21 + v166 > (unint64_t)HIDWORD(v247))
        {
          BOOL v213 = ArgOperands + 16 * v166 > (unint64_t)&v217;
          if (ArgOperands <= (unint64_t)&v217 && v213)
          {
            int64_t v215 = (int64_t)&v218[-1] - ArgOperands;
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v167);
            unint64_t v168 = (const llvm::APInt *)(ArgOperands + v215);
          }
          else
          {
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v167);
            unint64_t v168 = (const llvm::APInt *)&v217;
          }
        }
        int v169 = v247;
        if (v21)
        {
          unint64_t v170 = (llvm::APInt *)(ArgOperands + 16 * v247);
          uint64_t v171 = v21;
          do
          {
            unsigned int v172 = *((_DWORD *)v168 + 2);
            *((_DWORD *)v170 + 2) = v172;
            if (v172 > 0x40) {
              llvm::APInt::initSlowCase(v170, v168);
            }
            *(void *)unint64_t v170 = *(void *)v168;
            unint64_t v170 = (llvm::APInt *)((char *)v170 + 16);
            --v171;
          }
          while (v171);
          int v169 = v247;
        }
        LODWORD(v247) = v169 + v21;
        if (LODWORD(v218[0]) >= 0x41 && v217) {
          MEMORY[0x21667D390](v217, 0x1000C8000313F17);
        }
        if (v230 >= 0x41)
        {
          unint64_t v173 = v229;
          if (v229) {
LABEL_317:
          }
            MEMORY[0x21667D390](v173, 0x1000C8000313F17);
        }
        goto LABEL_318;
      default:
LABEL_318:
        uint64_t v235 = (void *)v247;
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v224[0]);
        uint64_t v191 = (void *)mlir::RankedTensorType::get((uint64_t)&v235, 1, ElementTypeOrSelf, 0);
        unint64_t v27 = (unint64_t)mlir::createElementsAttr(v191, (_DWORD *)ArgOperands, v247) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_319:
        int64_t v192 = (const llvm::APInt *)v240;
        if (v241)
        {
          uint64_t v193 = 16 * v241;
          do
          {
            if (*(_DWORD *)((char *)v192 + v193 - 8) >= 0x41u)
            {
              uint64_t v194 = *(void *)((char *)v192 + v193 - 16);
              if (v194) {
                MEMORY[0x21667D390](v194, 0x1000C8000313F17);
              }
            }
            v193 -= 16;
          }
          while (v193);
          int64_t v192 = (const llvm::APInt *)v240;
        }
        if (v192 != (const llvm::APInt *)&v242) {
          free(v192);
        }
        unint64_t v195 = (uint64_t *)ArgOperands;
        if (v247)
        {
          uint64_t v196 = 2 * v247;
          do
          {
            if (LODWORD(v195[v196 - 1]) >= 0x41)
            {
              uint64_t v197 = v195[v196 - 2];
              if (v197) {
                MEMORY[0x21667D390](v197, 0x1000C8000313F17);
              }
            }
            v196 -= 2;
          }
          while (v196 * 8);
          unint64_t v195 = (uint64_t *)ArgOperands;
        }
        if (v195 == &v248) {
          return v27;
        }
        long long v198 = v195;
        break;
    }
    goto LABEL_357;
  }
  unint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v224);
  uint64_t v247 = v25;
  uint64_t v26 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                 + 136);
  if (v26 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  uint64_t v235 = &v237;
  uint64_t v236 = 0x100000000;
  mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)v224, (uint64_t)&ArgOperands);
  __int16 v219 = ArgOperands;
  if ((_BYTE)ArgOperands) {
    uint64_t v220 = (llvm::APFloatBase *)v247;
  }
  else {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v247 + 16))(&v220);
  }
  uint64_t v221 = v248;
  mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)v224, (uint64_t)&v240);
  LOWORD(v217) = v243;
  if ((_BYTE)v243) {
    v218[0] = v244;
  }
  else {
    (*(void (**)(void *__return_ptr))(*(void *)v244 + 16))(v218);
  }
  v218[1] = v245;
  uint64_t v29 = (llvm::APFloatBase *)llvm::SmallVector<llvm::APFloat,1u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>((uint64_t)&v229, (uint64_t)&v219, (uint64_t)&v217);
  if (!(_BYTE)v217)
  {
    uint64_t v29 = (llvm::APFloatBase *)v218[0];
    v218[0] = 0;
    if (v29) {
      uint64_t v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)v29 + 8))(v29);
    }
  }
  if (!(_BYTE)v243)
  {
    uint64_t v29 = v244;
    char v244 = 0;
    if (v29) {
      uint64_t v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)v29 + 8))(v29);
    }
  }
  if (!(_BYTE)v240)
  {
    uint64_t v29 = v241;
    v241 = 0;
    if (v29) {
      uint64_t v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)v29 + 8))(v29);
    }
  }
  if (!(_BYTE)v219)
  {
    uint64_t v29 = v220;
    uint64_t v220 = 0;
    if (v29) {
      uint64_t v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)v29 + 8))(v29);
    }
  }
  if (!v249)
  {
    uint64_t v29 = v250;
    v250 = 0;
    if (v29) {
      uint64_t v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)v29 + 8))(v29);
    }
  }
  if (!(_BYTE)ArgOperands)
  {
    uint64_t v29 = (llvm::APFloatBase *)v247;
    uint64_t v247 = 0;
    if (v29) {
      uint64_t v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)v29 + 8))(v29);
    }
  }
  switch(PaddingMode)
  {
    case 0:
      uint64_t OperandRange = (__n128 *)a3[2];
      if (OperandRange) {
        uint64_t OperandRange = (__n128 *)llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)OperandRange);
      }
      else {
        uint64_t v31 = 0;
      }
      v227 = OperandRange;
      v228[0] = v31;
      if (OperandRange)
      {
        uint64_t OperandRange = (__n128 *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v227);
        if (OperandRange)
        {
          mlir::ElementsAttr::getSplatValue<llvm::APFloat>((mlir::BranchOpInterface *)&v227, (uint64_t)&v240);
          unint64_t ArgOperands = (unint64_t)&v248;
          uint64_t v247 = 0x100000000;
          llvm::SmallVectorImpl<llvm::APFloat>::assign((unsigned int *)&ArgOperands, v18, (uint64_t)&v240);
          uint64_t v128 = llvm::SmallVectorImpl<llvm::APFloat>::operator=((llvm::APFloatBase *)&v235, (unsigned int *)&ArgOperands);
          uint64_t v129 = (uint64_t *)ArgOperands;
          uint64_t v130 = v247;
          if (v247)
          {
            uint64_t v131 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v128);
            uint64_t v132 = v129 - 3;
            uint64_t v133 = 4 * v130;
            do
            {
              while (1)
              {
                char v134 = (llvm::detail::DoubleAPFloat *)&v132[v133];
                if (v131 != (void *)v132[v133]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v134);
                v133 -= 4;
                if (!(v133 * 8)) {
                  goto LABEL_216;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v134);
              v133 -= 4;
            }
            while (v133 * 8);
LABEL_216:
            uint64_t v129 = (uint64_t *)ArgOperands;
          }
          if (v129 != &v248) {
            free(v129);
          }
          llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>((unsigned int *)&v235, (char *)v229, (char *)v229 + 32 * v230);
          Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v235, (unint64_t)&v240, v21);
          if (v21)
          {
            uint64_t v136 = (char *)v235;
            uint64_t v137 = v236;
            char v138 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
            uint64_t v139 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
            uint64_t v140 = (llvm::detail::IEEEFloat *)&v136[32 * v137 + 8];
            uint64_t v141 = v21;
            do
            {
              if (v139 == *(llvm::APFloatBase **)v138) {
                uint64_t v142 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v140, v138);
              }
              else {
                uint64_t v142 = (void *)llvm::detail::IEEEFloat::IEEEFloat(v140, v138);
              }
              uint64_t v140 = (llvm::detail::IEEEFloat *)(v142 + 4);
              --v141;
            }
            while (v141);
          }
          else
          {
            uint64_t v139 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
          }
          LODWORD(v236) = v236 + v21;
          if (v139 != v241) {
            goto LABEL_248;
          }
          goto LABEL_339;
        }
      }
      unint64_t v27 = 0;
      goto LABEL_341;
    case 1:
      uint64_t v40 = (char *)v229;
      if (v18)
      {
        uint64_t v41 = (char *)v229 + 32 * v18;
        do
        {
          uint64_t v42 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v235, (unint64_t)v41, 1);
          uint64_t v43 = (llvm::detail::IEEEFloat *)((char *)v235 + 32 * v236 + 8);
          unint64_t v44 = (const llvm::detail::DoubleAPFloat *)(v42 + 8);
          unint64_t v45 = (void *)*((void *)v42 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v42) == v45) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v43, v44);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat(v43, v44);
          }
          LODWORD(v236) = v236 + 1;
          v41 -= 32;
          --v18;
        }
        while (v18);
        uint64_t v40 = (char *)v229;
      }
      llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>((unsigned int *)&v235, v40, &v40[32 * v230]);
      if (v21)
      {
        uint64_t v56 = -32 * v21;
        uint64_t v57 = (char *)v229 + 32 * v230 - 64;
        do
        {
          unint64_t v58 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v235, (unint64_t)v57, 1);
          uint64_t v59 = (llvm::detail::IEEEFloat *)((char *)v235 + 32 * v236 + 8);
          long long v60 = (const llvm::detail::DoubleAPFloat *)(v58 + 8);
          uint64_t v61 = (void *)*((void *)v58 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v58) == v61) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v59, v60);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat(v59, v60);
          }
          LODWORD(v236) = v236 + 1;
          v57 -= 32;
          v56 += 32;
        }
        while (v56);
      }
      goto LABEL_340;
    case 2:
      uint64_t v46 = (char *)v229;
      if (v18)
      {
        uint64_t v47 = 32 * v18;
        unint64_t v48 = (char *)v229 - 32;
        do
        {
          unsigned int v49 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v235, (unint64_t)&v48[v47], 1);
          int64x2_t v50 = (llvm::detail::IEEEFloat *)((char *)v235 + 32 * v236 + 8);
          unint64_t v51 = (const llvm::detail::DoubleAPFloat *)(v49 + 8);
          uint64_t v52 = (void *)*((void *)v49 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v49) == v52) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v50, v51);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat(v50, v51);
          }
          LODWORD(v236) = v236 + 1;
          v47 -= 32;
        }
        while (v47);
        uint64_t v46 = (char *)v229;
      }
      llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>((unsigned int *)&v235, v46, &v46[32 * v230]);
      if (v21)
      {
        uint64_t v62 = -32 * v21;
        uint64_t v63 = (char *)v229 + 32 * v230 - 32;
        do
        {
          uint64_t v64 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v235, (unint64_t)v63, 1);
          uint64_t v65 = (llvm::detail::IEEEFloat *)((char *)v235 + 32 * v236 + 8);
          uint64_t v66 = (const llvm::detail::DoubleAPFloat *)(v64 + 8);
          uint64_t v67 = (void *)*((void *)v64 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v64) == v67) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v65, v66);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat(v65, v66);
          }
          LODWORD(v236) = v236 + 1;
          v63 -= 32;
          v62 += 32;
        }
        while (v62);
      }
      goto LABEL_340;
    case 3:
      int64x2_t v53 = (const llvm::detail::DoubleAPFloat *)((char *)v229 + 8);
      uint64_t v54 = (llvm::APFloatBase *)*((void *)v229 + 1);
      uint64_t v55 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v29);
      if (v55 == v54) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v241, v53);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v241, v53);
      }
      uint64_t v143 = (char *)v229 + 32 * v230;
      char v145 = (llvm::APFloatBase *)*((void *)v143 - 3);
      uint64_t v144 = (const llvm::detail::DoubleAPFloat *)(v143 - 24);
      if (v55 == v145) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v228, v144);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v228, v144);
      }
      unint64_t ArgOperands = (unint64_t)&v248;
      uint64_t v247 = 0x100000000;
      llvm::SmallVectorImpl<llvm::APFloat>::assign((unsigned int *)&ArgOperands, v18, (uint64_t)&v240);
      llvm::SmallVectorImpl<llvm::APFloat>::operator=((llvm::APFloatBase *)&v235, (unsigned int *)&ArgOperands);
      uint64_t v146 = (uint64_t *)ArgOperands;
      if (!v247) {
        goto LABEL_236;
      }
      uint64_t v147 = (_DWORD *)(ArgOperands - 24);
      uint64_t v148 = 8 * v247;
      break;
    default:
      goto LABEL_340;
  }
  do
  {
    while (1)
    {
      uint64_t v149 = (llvm::detail::DoubleAPFloat *)&v147[v148];
      if (v55 != *(llvm::APFloatBase **)&v147[v148]) {
        break;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v149);
      v148 -= 8;
      if (!(v148 * 4)) {
        goto LABEL_235;
      }
    }
    llvm::detail::IEEEFloat::~IEEEFloat(v149);
    v148 -= 8;
  }
  while (v148 * 4);
LABEL_235:
  uint64_t v146 = (uint64_t *)ArgOperands;
LABEL_236:
  if (v146 != &v248) {
    free(v146);
  }
  llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>((unsigned int *)&v235, (char *)v229, (char *)v229 + 32 * v230);
  uint64_t v150 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v235, (unint64_t)&v227, v21);
  if (v21)
  {
    uint64_t v151 = (const llvm::detail::DoubleAPFloat *)(v150 + 8);
    uint64_t v152 = (llvm::detail::IEEEFloat *)((char *)v235 + 32 * v236 + 8);
    uint64_t v153 = v21;
    do
    {
      if (v55 == *(llvm::APFloatBase **)v151) {
        unint64_t v154 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v152, v151);
      }
      else {
        unint64_t v154 = (void *)llvm::detail::IEEEFloat::IEEEFloat(v152, v151);
      }
      uint64_t v152 = (llvm::detail::IEEEFloat *)(v154 + 4);
      --v153;
    }
    while (v153);
  }
  LODWORD(v236) = v236 + v21;
  if (v55 == (llvm::APFloatBase *)v228[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v228);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v228);
  }
  if (v55 == v241) {
LABEL_339:
  }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241);
  else {
LABEL_248:
  }
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v241);
LABEL_340:
  unint64_t ArgOperands = v236;
  uint64_t v199 = mlir::getElementTypeOrSelf(v224[0]);
  uint64_t v200 = (void *)mlir::RankedTensorType::get((uint64_t)&ArgOperands, 1, v199, 0);
  uint64_t OperandRange = mlir::createElementsAttr(v200, (uint64_t)v235, v236);
  unint64_t v27 = (unint64_t)OperandRange & 0xFFFFFFFFFFFFFFFBLL;
LABEL_341:
  uint64_t v201 = (char *)v229;
  uint64_t v202 = v230;
  if (v230)
  {
    unint64_t v203 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)OperandRange);
    v204 = v201 - 24;
    uint64_t v205 = 32 * v202;
    do
    {
      while (1)
      {
        uint64_t v206 = (llvm::detail::DoubleAPFloat *)&v204[v205];
        if (v203 != *(void **)&v204[v205]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v206);
        v205 -= 32;
        if (!v205) {
          goto LABEL_346;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v206);
      v205 -= 32;
    }
    while (v205);
LABEL_346:
    uint64_t v201 = (char *)v229;
  }
  if (v201 != (char *)&v231) {
    free(v201);
  }
  uint64_t v207 = (uint64_t *)v235;
  uint64_t v208 = v236;
  if (v236)
  {
    uint64_t v209 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)OperandRange);
    uint64_t v210 = v207 - 3;
    uint64_t v211 = 4 * v208;
    do
    {
      while (1)
      {
        uint64_t v212 = (llvm::detail::DoubleAPFloat *)&v210[v211];
        if (v209 != (void *)v210[v211]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v212);
        v211 -= 4;
        if (!(v211 * 8)) {
          goto LABEL_354;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v212);
      v211 -= 4;
    }
    while (v211 * 8);
LABEL_354:
    uint64_t v207 = (uint64_t *)v235;
  }
  if (v207 != &v237)
  {
    long long v198 = v207;
LABEL_357:
    free(v198);
  }
  return v27;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldPadOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::ElementsAttr::getSplatValue<llvm::APInt>@<X0>(mlir::BranchOpInterface *a1@<X0>, llvm::APInt *a2@<X8>)
{
  mlir::ElementsAttr::value_begin<llvm::APInt>(a1, (uint64_t)v7);
  uint64_t result = v8;
  if (v7[1]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v9;
  }
  if (!v7[0])
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v8 + 24))();
    if (v7[0]) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v5 = (const llvm::APInt *)(v8 + 16 * v4);
  unsigned int v6 = *((_DWORD *)v5 + 2);
  *((_DWORD *)a2 + 2) = v6;
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase(a2, v5);
  }
  *(void *)a2 = *(void *)v5;
  if (!v7[0])
  {
LABEL_11:
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *llvm::SmallVector<llvm::APInt,3u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v11[0] = *(unsigned char *)a2;
  v11[1] = *(unsigned char *)(a2 + 1);
  if (v11[0]) {
    v12[0] = *(void *)(a2 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a2 + 8) + 16))(v12);
  }
  v12[1] = *(void *)(a2 + 16);
  v9[0] = *(unsigned char *)a3;
  v9[1] = *(unsigned char *)(a3 + 1);
  if (v9[0]) {
    v10[0] = *(void *)(a3 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a3 + 8) + 16))(v10);
  }
  v10[1] = *(void *)(a3 + 16);
  llvm::SmallVectorImpl<llvm::APInt>::append<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>((uint64_t)a1, v11, v9);
  if (!v9[0])
  {
    uint64_t v6 = v10[0];
    v10[0] = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (!v11[0])
  {
    uint64_t v7 = v12[0];
    v12[0] = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  return a1;
}

void llvm::SmallVectorImpl<llvm::APInt>::assign(uint64_t a1, unint64_t a2, llvm::APInt *a3)
{
  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = *(unsigned int *)(a1 + 8);
    }
    if (v7)
    {
      uint64_t v8 = *(unsigned int **)a1;
      do
      {
        if (v8[2] > 0x40 || *((_DWORD *)a3 + 2) > 0x40u)
        {
          llvm::APInt::assignSlowCase(v8, a3);
        }
        else
        {
          *(void *)uint64_t v8 = *(void *)a3;
          void v8[2] = *((_DWORD *)a3 + 2);
        }
        v8 += 4;
        --v7;
      }
      while (v7);
      unint64_t v6 = *(unsigned int *)(a1 + 8);
    }
    unint64_t v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        uint64_t v13 = 16 * v6;
        uint64_t v14 = 16 * v6 + *(void *)a1 - 8;
        unint64_t v15 = 16 * a2 - v13;
        uint64_t v16 = (unsigned int *)v14;
        do
        {
          unsigned int v17 = *v16;
          v16 -= 4;
          if (v17 >= 0x41)
          {
            uint64_t v18 = *(void *)(v14 - 8);
            if (v18) {
              MEMORY[0x21667D390](v18, 0x1000C8000313F17);
            }
          }
          uint64_t v14 = (uint64_t)v16;
          v15 += 16;
        }
        while (v15);
      }
    }
    else
    {
      uint64_t v10 = (llvm::APInt *)(*(void *)a1 + 16 * v6);
      do
      {
        unsigned int v12 = *((_DWORD *)a3 + 2);
        *((_DWORD *)v10 + 2) = v12;
        if (v12 > 0x40) {
          llvm::APInt::initSlowCase(v10, a3);
        }
        *(void *)uint64_t v10 = *(void *)a3;
        uint64_t v10 = (llvm::APInt *)((char *)v10 + 16);
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::APInt,false>::growAndAssign(a1, a2, a3);
  }
}

void llvm::SmallVectorTemplateBase<llvm::APInt,false>::growAndAssign(uint64_t a1, unint64_t a2, const llvm::APInt *a3)
{
  unint64_t v17 = 0;
  unint64_t v6 = (char *)(a1 + 16);
  unint64_t v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v17);
  uint64_t v8 = v7;
  if (a2)
  {
    unint64_t v9 = (llvm::APInt *)v7;
    unint64_t v10 = a2;
    do
    {
      unsigned int v11 = *((_DWORD *)a3 + 2);
      *((_DWORD *)v9 + 2) = v11;
      if (v11 > 0x40) {
        llvm::APInt::initSlowCase(v9, a3);
      }
      *(void *)unint64_t v9 = *(void *)a3;
      unint64_t v9 = (llvm::APInt *)((char *)v9 + 16);
      --v10;
    }
    while (v10);
  }
  unsigned int v12 = *(char **)a1;
  uint64_t v13 = *(unsigned int *)(a1 + 8);
  if (v13)
  {
    uint64_t v14 = 16 * v13;
    do
    {
      if (*(_DWORD *)&v12[v14 - 8] >= 0x41u)
      {
        uint64_t v15 = *(void *)&v12[v14 - 16];
        if (v15) {
          MEMORY[0x21667D390](v15, 0x1000C8000313F17);
        }
      }
      v14 -= 16;
    }
    while (v14);
    unsigned int v12 = *(char **)a1;
  }
  int v16 = v17;
  if (v12 != v6) {
    free(v12);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v16;
}

uint64_t llvm::SmallVectorImpl<llvm::APInt>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v5 = a2 + 2;
    uint64_t v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      unint64_t v6 = *(char **)a1;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7)
      {
        uint64_t v8 = 16 * v7;
        do
        {
          if (*(_DWORD *)&v6[v8 - 8] >= 0x41u)
          {
            uint64_t v9 = *(void *)&v6[v8 - 16];
            if (v9) {
              MEMORY[0x21667D390](v9, 0x1000C8000313F17);
            }
          }
          v8 -= 16;
        }
        while (v8);
        unint64_t v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16)) {
        free(v6);
      }
      *(void *)a1 = *a2;
      unint64_t v10 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
LABEL_13:
      _DWORD *v10 = 0;
      return a1;
    }
    unint64_t v10 = a2 + 1;
    unint64_t v12 = *((unsigned int *)a2 + 2);
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      unint64_t v17 = *(char **)a1;
      if (v12)
      {
        uint64_t v18 = 0;
        do
        {
          uint64_t v20 = &v17[v18];
          if (*(_DWORD *)&v17[v18 + 8] >= 0x41u && *(void *)v20) {
            MEMORY[0x21667D390](*(void *)v20, 0x1000C8000313F17);
          }
          uint64_t v19 = v4 + v18;
          *(void *)uint64_t v20 = *(void *)(v4 + v18);
          *((_DWORD *)v20 + 2) = *(_DWORD *)(v4 + v18 + 8);
          *(_DWORD *)(v19 + 8) = 0;
          v18 += 16;
        }
        while (v19 + 16 != v4 + 16 * v12);
        uint64_t v21 = &v17[v18];
        unint64_t v17 = *(char **)a1;
        uint64_t v13 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        uint64_t v21 = *(char **)a1;
      }
      for (uint64_t i = &v17[16 * v13]; i != v21; i -= 16)
      {
        if (*((_DWORD *)i - 2) >= 0x41u)
        {
          uint64_t v35 = *((void *)i - 2);
          if (v35) {
            MEMORY[0x21667D390](v35, 0x1000C8000313F17);
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v12;
      uint64_t v36 = *((unsigned int *)a2 + 2);
      if (v36)
      {
        uint64_t v37 = *a2;
        uint64_t v38 = 16 * v36;
        do
        {
          if (*(_DWORD *)(v37 + v38 - 8) >= 0x41u)
          {
            uint64_t v39 = *(void *)(v37 + v38 - 16);
            if (v39) {
              MEMORY[0x21667D390](v39, 0x1000C8000313F17);
            }
          }
          v38 -= 16;
        }
        while (v38);
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if (v13)
      {
        uint64_t v22 = v4 + 16 * v13;
        uint64_t v23 = (_DWORD *)(*(void *)a1 + 8);
        do
        {
          if (*v23 >= 0x41u)
          {
            uint64_t v24 = *((void *)v23 - 1);
            if (v24) {
              MEMORY[0x21667D390](v24, 0x1000C8000313F17);
            }
          }
          *((void *)v23 - 1) = *(void *)v4;
          *uint64_t v23 = *(_DWORD *)(v4 + 8);
          v23 += 4;
          *(_DWORD *)(v4 + 8) = 0;
          v4 += 16;
        }
        while (v4 != v22);
        goto LABEL_38;
      }
    }
    else
    {
      if (v13)
      {
        uint64_t v14 = *(char **)a1;
        uint64_t v15 = 16 * v13;
        do
        {
          if (*(_DWORD *)&v14[v15 - 8] >= 0x41u)
          {
            uint64_t v16 = *(void *)&v14[v15 - 16];
            if (v16) {
              MEMORY[0x21667D390](v16, 0x1000C8000313F17);
            }
          }
          v15 -= 16;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow(a1, v12);
    }
    uint64_t v13 = 0;
LABEL_38:
    uint64_t v25 = *a2;
    uint64_t v26 = *((unsigned int *)a2 + 2);
    if (v13 != v26)
    {
      uint64_t v27 = (16 * v13) | 8;
      uint64_t v28 = (_DWORD *)(*(void *)a1 + v27);
      uint64_t v29 = 16 * v26 - 16 * v13;
      uint64_t v30 = (_DWORD *)(v25 + v27);
      do
      {
        *uint64_t v28 = *v30;
        *((void *)v28 - 1) = *((void *)v30 - 1);
        *uint64_t v30 = 0;
        v30 += 4;
        v28 += 4;
        v29 -= 16;
      }
      while (v29);
      uint64_t v25 = *a2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    uint64_t v31 = *v10;
    if (v31)
    {
      uint64_t v32 = 16 * v31;
      do
      {
        if (*(_DWORD *)(v25 + v32 - 8) >= 0x41u)
        {
          uint64_t v33 = *(void *)(v25 + v32 - 16);
          if (v33) {
            MEMORY[0x21667D390](v33, 0x1000C8000313F17);
          }
        }
        v32 -= 16;
      }
      while (v32);
    }
    goto LABEL_13;
  }
  return a1;
}

uint64_t llvm::SmallVector<llvm::APFloat,1u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x100000000;
  v11[0] = *(unsigned char *)a2;
  v11[1] = *(unsigned char *)(a2 + 1);
  if (v11[0]) {
    v12[0] = *(void *)(a2 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a2 + 8) + 16))(v12);
  }
  v12[1] = *(void *)(a2 + 16);
  v9[0] = *(unsigned char *)a3;
  v9[1] = *(unsigned char *)(a3 + 1);
  if (v9[0]) {
    v10[0] = *(void *)(a3 + 8);
  }
  else {
    (*(void (**)(void *__return_ptr))(**(void **)(a3 + 8) + 16))(v10);
  }
  v10[1] = *(void *)(a3 + 16);
  llvm::SmallVectorImpl<llvm::APFloat>::append<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>((unsigned int *)a1, v11, v9);
  if (!v9[0])
  {
    uint64_t v6 = v10[0];
    v10[0] = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (!v11[0])
  {
    uint64_t v7 = v12[0];
    v12[0] = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  return a1;
}

unsigned int *llvm::SmallVectorImpl<llvm::APFloat>::operator=(llvm::APFloatBase *this, unsigned int *a2)
{
  uint64_t v2 = (unsigned int *)this;
  if (this != (llvm::APFloatBase *)a2)
  {
    uint64_t v5 = a2 + 4;
    uint64_t v4 = *(void *)a2;
    if (*(unsigned int **)a2 == a2 + 4)
    {
      unint64_t v12 = a2 + 2;
      unint64_t v14 = a2[2];
      uint64_t v15 = *((unsigned int *)this + 2);
      if (v15 >= v14)
      {
        uint64_t v23 = *(unsigned int **)this;
        if (v14)
        {
          uint64_t v24 = 0;
          uint64_t v25 = v4 + 8;
          do
          {
            this = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v23[v24 + 2], (llvm::APFloatBase *)(v25 + v24 * 4));
            v24 += 8;
          }
          while (8 * v14 != v24);
          uint64_t v26 = &v23[v24];
          uint64_t v23 = *(unsigned int **)v2;
          uint64_t v15 = v2[2];
        }
        else
        {
          uint64_t v26 = *(unsigned int **)this;
        }
        uint64_t v30 = &v23[8 * v15];
        if (v30 != v26)
        {
          uint64_t v31 = llvm::APFloatBase::PPCDoubleDouble(this);
          this = (llvm::APFloatBase *)(v30 - 6);
          do
          {
            if (v31 == *(void **)this) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(this);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat(this);
            }
            uint64_t v33 = (unsigned int *)(v32 - 8);
            this = (llvm::APFloatBase *)(v32 - 32);
          }
          while (v33 != v26);
        }
        v2[2] = v14;
        uint64_t v34 = a2[2];
        if (v34)
        {
          uint64_t v35 = *(void *)a2;
          uint64_t v36 = llvm::APFloatBase::PPCDoubleDouble(this);
          uint64_t v37 = v35 - 24;
          uint64_t v38 = 32 * v34;
          do
          {
            uint64_t v39 = (llvm::detail::DoubleAPFloat *)(v37 + v38);
            if (v36 == *(void **)(v37 + v38)) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v39);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat(v39);
            }
            v38 -= 32;
          }
          while (v38);
        }
      }
      else
      {
        if (*((_DWORD *)this + 3) >= v14)
        {
          if (v15)
          {
            uint64_t v27 = (llvm::APFloatBase *)(*(void *)this + 8);
            uint64_t v28 = 32 * v15;
            uint64_t v29 = (llvm::APFloatBase *)(v4 + 8);
            do
            {
              this = llvm::APFloat::Storage::operator=(v27, v29);
              uint64_t v27 = (llvm::APFloatBase *)((char *)v27 + 32);
              uint64_t v29 = (llvm::APFloatBase *)((char *)v29 + 32);
              v28 -= 32;
            }
            while (v28);
          }
          else
          {
            uint64_t v15 = 0;
          }
        }
        else
        {
          if (v15)
          {
            uint64_t v16 = *(void *)this;
            unint64_t v17 = llvm::APFloatBase::PPCDoubleDouble(this);
            uint64_t v18 = v16 - 24;
            uint64_t v19 = 32 * v15;
            do
            {
              while (1)
              {
                uint64_t v20 = (llvm::detail::DoubleAPFloat *)(v18 + v19);
                if (v17 != *(void **)(v18 + v19)) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v20);
                v19 -= 32;
                if (!v19) {
                  goto LABEL_21;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v20);
              v19 -= 32;
            }
            while (v19);
          }
LABEL_21:
          v2[2] = 0;
          unint64_t v53 = 0;
          uint64_t v21 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v2, v2 + 4, v14, 32, &v53);
          llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(v2, (uint64_t)v21);
          unsigned int v22 = v53;
          this = *(llvm::APFloatBase **)v2;
          if (*(unsigned int **)v2 != v2 + 4) {
            free(this);
          }
          uint64_t v15 = 0;
          *(void *)uint64_t v2 = v21;
          v2[3] = v22;
        }
        uint64_t v40 = *(void *)a2;
        uint64_t v41 = a2[2];
        if (v15 != v41)
        {
          uint64_t v42 = *(unsigned int **)v2;
          uint64_t v43 = llvm::APFloatBase::PPCDoubleDouble(this);
          uint64_t v44 = (32 * v15) | 8;
          this = (llvm::APFloatBase *)((char *)v42 + v44);
          uint64_t v45 = 32 * v41 - 32 * v15;
          uint64_t v46 = (void **)(v40 + v44);
          do
          {
            if (v43 == *v46) {
              uint64_t v47 = (uint64_t)llvm::detail::DoubleAPFloat::DoubleAPFloat(this, v46);
            }
            else {
              uint64_t v47 = llvm::detail::IEEEFloat::IEEEFloat((uint64_t)this, (uint64_t)v46);
            }
            this = (llvm::APFloatBase *)(v47 + 32);
            v46 += 4;
            v45 -= 32;
          }
          while (v45);
          uint64_t v40 = *(void *)a2;
        }
        v2[2] = v14;
        uint64_t v48 = *v12;
        if (v48)
        {
          unsigned int v49 = llvm::APFloatBase::PPCDoubleDouble(this);
          uint64_t v50 = v40 - 24;
          uint64_t v51 = 32 * v48;
          do
          {
            while (1)
            {
              uint64_t v52 = (llvm::detail::DoubleAPFloat *)(v50 + v51);
              if (v49 != *(void **)(v50 + v51)) {
                break;
              }
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v52);
              v51 -= 32;
              if (!v51) {
                goto LABEL_12;
              }
            }
            llvm::detail::IEEEFloat::~IEEEFloat(v52);
            v51 -= 32;
          }
          while (v51);
        }
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int **)this;
      uint64_t v7 = *((unsigned int *)this + 2);
      if (v7)
      {
        uint64_t v8 = llvm::APFloatBase::PPCDoubleDouble(this);
        uint64_t v9 = v6 - 6;
        uint64_t v10 = 8 * v7;
        do
        {
          while (1)
          {
            unsigned int v11 = (llvm::detail::DoubleAPFloat *)&v9[v10];
            if (v8 != *(void **)&v9[v10]) {
              break;
            }
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v11);
            v10 -= 8;
            if (!(v10 * 4)) {
              goto LABEL_8;
            }
          }
          llvm::detail::IEEEFloat::~IEEEFloat(v11);
          v10 -= 8;
        }
        while (v10 * 4);
LABEL_8:
        uint64_t v6 = *(unsigned int **)v2;
      }
      if (v6 != v2 + 4) {
        free(v6);
      }
      *(void *)uint64_t v2 = *(void *)a2;
      unint64_t v12 = a2 + 2;
      *((void *)v2 + 1) = *((void *)a2 + 1);
      *(void *)a2 = v5;
      a2[3] = 0;
    }
LABEL_12:
    *unint64_t v12 = 0;
  }
  return v2;
}

void llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>(unsigned int *a1, char *a2, char *a3)
{
  uint64_t v5 = a1;
  unint64_t v6 = a3 - a2;
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 + ((a3 - a2) >> 5);
  if (v8 > a1[3])
  {
    unint64_t v19 = 0;
    uint64_t v9 = a1 + 4;
    uint64_t v10 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v8, 32, &v19);
    llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(v5, (uint64_t)v10);
    unsigned int v11 = v19;
    a1 = *(unsigned int **)v5;
    if (*(unsigned int **)v5 != v9) {
      free(a1);
    }
    *(void *)uint64_t v5 = v10;
    v5[3] = v11;
    LODWORD(v7) = v5[2];
  }
  if (a2 != a3)
  {
    unint64_t v12 = *(unsigned int **)v5;
    uint64_t v13 = v7;
    unint64_t v14 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    uint64_t v15 = (llvm::detail::IEEEFloat *)&v12[8 * v13 + 2];
    uint64_t v16 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
    do
    {
      if (v14 == *(void **)v16) {
        unint64_t v17 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, v16);
      }
      else {
        unint64_t v17 = (void *)llvm::detail::IEEEFloat::IEEEFloat(v15, v16);
      }
      uint64_t v15 = (llvm::detail::IEEEFloat *)(v17 + 4);
      uint64_t v18 = (char *)v16 + 24;
      uint64_t v16 = (const llvm::detail::DoubleAPFloat *)((char *)v16 + 32);
    }
    while (v18 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 5);
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldCastOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (*a3)
  {
    uint64_t v4 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }

  return mlir::mps::foldCastOp(a2, (uint64_t)v4, v6, 1);
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldCastOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReinterpretCastOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v99 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v99);
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf(Input);
  if (ElementTypeOrSelf == (void *)mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v99)) {
    return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v99) | 4;
  }
  unint64_t ElementBitWidth = mlir::getElementBitWidth(ElementTypeOrSelf);
  uint64_t Type = (void *)mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v99);
  uint64_t v8 = mlir::getElementBitWidth(Type);
  uint64_t v9 = *a3;
  if (!*a3) {
    return 0;
  }
  unint64_t v10 = v8;
  BOOL v11 = mlir::DenseElementsAttr::classof(*a3);
  unint64_t v12 = 0;
  if (v11) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v98 = v13;
  if (v11)
  {
    if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v98))
    {
      size_t v14 = ElementBitWidth >> 3;
      unint64_t v15 = v10 >> 3;
      if (ElementBitWidth >= 8 && ElementBitWidth > v10)
      {
        RawStringData = (unsigned char *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v98);
        uint64_t v102 = &v103[16];
        *(_OWORD *)unsigned int v103 = xmmword_211ED5570;
        if (v15 < 5)
        {
          uint64_t v20 = 0;
          if (v10 >= 8) {
            goto LABEL_12;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v103[16], v10 >> 3, 1);
          uint64_t v20 = *(void *)v103;
          if (v10 >= 8)
          {
LABEL_12:
            memcpy(&v102[v20], RawStringData, v10 >> 3);
            goto LABEL_26;
          }
        }
        unint64_t v23 = v20 + v15;
        *(void *)unsigned int v103 = v23;
        if (v10 != 1 || (int v24 = *RawStringData, v24 != 255) && *RawStringData)
        {
LABEL_27:
          if (!v23) {
            goto LABEL_44;
          }
          uint64_t v25 = 0;
          do
          {
            uint64_t v26 = RawStringData;
            uint64_t v27 = v102;
            unint64_t v28 = v23 - 1;
            do
            {
              int v30 = *v26++;
              int v29 = v30;
              int v32 = *v27++;
              int v31 = v32;
              BOOL v33 = v28-- != 0;
            }
            while (v33 && v29 == v31);
            v25 += v23;
            if (v25 == v14) {
              break;
            }
            RawStringData += v23;
          }
          while (v29 == v31);
          if (v29 != v31)
          {
LABEL_44:
            if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v98) <= 1023)
            {
              unint64_t v47 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v98) * v14;
              unint64_t v100 = &v101[16];
              *(_OWORD *)uint64_t v101 = xmmword_211ED5570;
              if (v47)
              {
                if (v47 < 5)
                {
                  uint64_t v48 = 0;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v100, &v101[16], v47, 1);
                  uint64_t v48 = *(void *)v101;
                }
                if (v47 != v48) {
                  bzero((char *)v100 + v48, v47 - v48);
                }
                uint64_t v74 = 0;
                *(void *)uint64_t v101 = v47;
                do
                {
                  unsigned int v75 = (char *)v100 + v74;
                  unint64_t v76 = (const void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v98);
                  memcpy(v75, v76, v14);
                  v74 += v14;
                }
                while (v47 != v74);
              }
              uint64_t v77 = (uint64_t *)(*(void *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
              if (!v77) {
                goto LABEL_95;
              }
              uint64_t v78 = *v77;
              unint64_t v79 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v80 = *(unsigned int *)(v78 + 16);
              if (!v80) {
                goto LABEL_95;
              }
              unsigned int v81 = *(void **)(v78 + 8);
              uint64_t v82 = &v81[2 * v80];
              do
              {
                unint64_t v83 = v80 >> 1;
                uint64_t v84 = &v81[2 * (v80 >> 1)];
                unint64_t v86 = *v84;
                unint64_t v85 = v84 + 2;
                v80 += ~(v80 >> 1);
                if (v86 < v79) {
                  unsigned int v81 = v85;
                }
                else {
                  unint64_t v80 = v83;
                }
              }
              while (v80);
              if (v81 != v82 && *v81 == v79) {
                uint64_t v87 = v81[1];
              }
              else {
LABEL_95:
              }
                uint64_t v87 = 0;
              unint64_t v12 = mlir::DenseElementsAttr::getFromRawBuffer(v77, v87, v100, *(void *)v101, v44, v45, v46) & 0xFFFFFFFFFFFFFFFBLL;
              if (v100 != &v101[16]) {
                free(v100);
              }
            }
            else
            {
              unint64_t v12 = 0;
            }
            goto LABEL_114;
          }
          uint64_t v34 = (uint64_t *)(*(void *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v34) {
            goto LABEL_112;
          }
          uint64_t v35 = *v34;
          unint64_t v36 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v37 = *(unsigned int *)(v35 + 16);
          if (!v37) {
            goto LABEL_112;
          }
          uint64_t v38 = *(void **)(v35 + 8);
          uint64_t v39 = &v38[2 * v37];
          do
          {
            unint64_t v40 = v37 >> 1;
            uint64_t v41 = &v38[2 * (v37 >> 1)];
            unint64_t v43 = *v41;
            uint64_t v42 = v41 + 2;
            v37 += ~(v37 >> 1);
            if (v43 < v36) {
              uint64_t v38 = v42;
            }
            else {
              unint64_t v37 = v40;
            }
          }
          while (v37);
          goto LABEL_110;
        }
        if (v23 + 1 > *(void *)&v103[8])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v103[16], v23 + 1, 1);
          unint64_t v23 = *(void *)v103;
        }
        v102[v23] = v24;
        unint64_t v15 = 1;
LABEL_26:
        unint64_t v23 = *(void *)v103 + v15;
        *(void *)v103 += v15;
        goto LABEL_27;
      }
      if (ElementBitWidth < v10 && v10 >= 8)
      {
        if (ElementBitWidth == 1)
        {
          mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)&v98, (uint64_t)&v102);
          *(_OWORD *)&v101[8] = *(_OWORD *)&v103[8];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v102, (llvm::APInt *)&v100);
          int v21 = *(_DWORD *)v101;
          if (*(_DWORD *)v101 > 0x40u)
          {
            int v22 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v100) == v21 - 1;
            if (v100) {
              MEMORY[0x21667D390](v100, 0x1000C8000313F17);
            }
          }
          else
          {
            int v22 = v100 == (void *)1;
          }
          uint64_t v102 = &v103[16];
          *(_OWORD *)unsigned int v103 = xmmword_211ED5580;
          if (v10 < 0x18)
          {
            uint64_t v67 = &v103[16];
          }
          else
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v103[16], v10 >> 3, 1);
            uint64_t v67 = v102;
          }
          memset(v67, v22 << 31 >> 31, v10 >> 3);
          *(void *)unsigned int v103 = v10 >> 3;
          uint64_t v34 = (uint64_t *)(*(void *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v34) {
            goto LABEL_112;
          }
          uint64_t v68 = *v34;
          unint64_t v36 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v69 = *(unsigned int *)(v68 + 16);
          if (!v69) {
            goto LABEL_112;
          }
          uint64_t v38 = *(void **)(v68 + 8);
          uint64_t v39 = &v38[2 * v69];
          do
          {
            unint64_t v70 = v69 >> 1;
            unint64_t v71 = &v38[2 * (v69 >> 1)];
            unint64_t v73 = *v71;
            unint64_t v72 = v71 + 2;
            v69 += ~(v69 >> 1);
            if (v73 < v36) {
              uint64_t v38 = v72;
            }
            else {
              unint64_t v69 = v70;
            }
          }
          while (v69);
LABEL_110:
          if (v38 != v39 && *v38 == v36)
          {
            uint64_t v97 = v38[1];
            goto LABEL_113;
          }
LABEL_112:
          uint64_t v97 = 0;
LABEL_113:
          unint64_t v12 = mlir::DenseElementsAttr::getFromRawBuffer(v34, v97, v102, *(void *)v103, v16, v17, v18) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_114:
          if (v102 != &v103[16]) {
            free(v102);
          }
          return v12;
        }
        if (ElementBitWidth >= 8)
        {
          uint64_t v102 = &v103[16];
          *(_OWORD *)unsigned int v103 = xmmword_211ED5580;
          if (v10 < 0x18)
          {
            uint64_t v49 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v103[16], v10 >> 3, 1);
            uint64_t v49 = *(void *)v103;
          }
          if (v15 != v49) {
            bzero(&v102[v49], v15 - v49);
          }
          uint64_t v88 = 0;
          *(void *)unsigned int v103 = v10 >> 3;
          do
          {
            unint64_t v89 = (char *)&v102[v88];
            uint64_t v90 = (const void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v98);
            memcpy(v89, v90, v14);
            v88 += v14;
          }
          while (v15 != v88);
          uint64_t v34 = (uint64_t *)(*(void *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v34) {
            goto LABEL_112;
          }
          uint64_t v91 = *v34;
          unint64_t v36 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v92 = *(unsigned int *)(v91 + 16);
          if (!v92) {
            goto LABEL_112;
          }
          uint64_t v38 = *(void **)(v91 + 8);
          uint64_t v39 = &v38[2 * v92];
          do
          {
            unint64_t v93 = v92 >> 1;
            unint64_t v94 = &v38[2 * (v92 >> 1)];
            unint64_t v96 = *v94;
            unint64_t v95 = v94 + 2;
            v92 += ~(v92 >> 1);
            if (v96 < v36) {
              uint64_t v38 = v95;
            }
            else {
              unint64_t v92 = v93;
            }
          }
          while (v92);
          goto LABEL_110;
        }
      }
    }
    if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v98) && ElementBitWidth != v10) {
      return 0;
    }
    uint64_t v51 = (uint64_t *)(*(void *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v51) {
      goto LABEL_65;
    }
    uint64_t v52 = *v51;
    unint64_t v53 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v54 = *(unsigned int *)(v52 + 16);
    if (!v54) {
      goto LABEL_65;
    }
    uint64_t v55 = *(void **)(v52 + 8);
    uint64_t v56 = &v55[2 * v54];
    do
    {
      unint64_t v57 = v54 >> 1;
      unint64_t v58 = &v55[2 * (v54 >> 1)];
      unint64_t v60 = *v58;
      uint64_t v59 = v58 + 2;
      v54 += ~(v54 >> 1);
      if (v60 < v53) {
        uint64_t v55 = v59;
      }
      else {
        unint64_t v54 = v57;
      }
    }
    while (v54);
    if (v55 != v56 && *v55 == v53) {
      uint64_t v61 = v55[1];
    }
    else {
LABEL_65:
    }
      uint64_t v61 = 0;
    uint64_t v62 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v98);
    return mlir::DenseElementsAttr::getFromRawBuffer(v51, v61, v62, v63, v64, v65, v66) & 0xFFFFFFFFFFFFFFFBLL;
  }
  return v12;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReinterpretCastOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldShapeOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v13);
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v12[0] = result;
  v12[1] = v4;
  if (result)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v12)
      && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v12))
    {
      uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v12);
      if (!v6)
      {
LABEL_8:
        mlir::Attribute::getContext((mlir::Attribute *)(v13 + 24));
        uint64_t v8 = (int32x4_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v12);
        uint64_t v10 = v9;
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v13 - 8) & 0xFFFFFFFFFFFFFFF8));
      }
      uint64_t v7 = 8 * v6;
      while (*Shape != 0x8000000000000000)
      {
        ++Shape;
        v7 -= 8;
        if (!v7) {
          goto LABEL_8;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldShapeOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::mps::anonymous namespace'::getIntegerTensorAttr(int32x4_t *a1, uint64_t a2, uint64_t a3)
{
  v58[4] = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a3 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v4 = a3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v55 = v4;
  if (!v4) {
    return v3;
  }
  if (mlir::IntegerType::getWidth((mlir::IntegerType *)&v55) != 32)
  {
    uint64_t v54 = a2;
    int v22 = (void *)mlir::RankedTensorType::get((uint64_t)&v54, 1, v55, 0);
    unint64_t v23 = v22;
    if (!v22) {
      goto LABEL_29;
    }
    uint64_t v24 = *v22;
    unint64_t v25 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v26 = *(unsigned int *)(v24 + 16);
    if (!v26) {
      goto LABEL_29;
    }
    uint64_t v27 = *(void **)(v24 + 8);
    unint64_t v28 = &v27[2 * v26];
    do
    {
      unint64_t v29 = v26 >> 1;
      int v30 = &v27[2 * (v26 >> 1)];
      unint64_t v32 = *v30;
      int v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25) {
        uint64_t v27 = v31;
      }
      else {
        unint64_t v26 = v29;
      }
    }
    while (v26);
    if (v27 != v28 && *v27 == v25) {
      uint64_t v33 = v27[1];
    }
    else {
LABEL_29:
    }
      uint64_t v33 = 0;
    uint64_t v56 = v58;
    uint64_t v57 = 0x400000000;
    if ((unint64_t)(8 * a2) < 0x21)
    {
      int v34 = 0;
      uint64_t v20 = v58;
      if (!a2)
      {
LABEL_38:
        LODWORD(v57) = v34 + a2;
        uint64_t v39 = 8 * (v34 + a2);
        unint64_t v40 = v23;
        uint64_t v41 = v33;
        uint64_t v42 = 8;
        goto LABEL_45;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, (8 * a2) >> 3, 8);
      int v34 = v57;
      uint64_t v20 = v56;
      if (!a2) {
        goto LABEL_38;
      }
    }
    memcpy(&v20[v34], a1, 8 * a2);
    int v34 = v57;
    uint64_t v20 = v56;
    goto LABEL_38;
  }
  uint64_t v54 = a2;
  uint64_t v7 = (void *)mlir::RankedTensorType::get((uint64_t)&v54, 1, v55, 0);
  uint64_t v8 = v7;
  if (!v7) {
    goto LABEL_15;
  }
  uint64_t v9 = *v7;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_15;
  }
  unint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    unint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      unint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_15:
  }
    uint64_t v18 = 0;
  uint64_t v56 = v58;
  uint64_t v57 = 0x400000000;
  if ((unint64_t)(8 * a2) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, (8 * a2) >> 3, 4);
    uint64_t v19 = v57;
    uint64_t v20 = v56;
    int v21 = v57;
    if (!a2) {
      goto LABEL_44;
    }
LABEL_34:
    uint64_t v35 = (int32x4_t *)((char *)v20 + 4 * v19);
    unint64_t v36 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v36 >= 7)
    {
      unint64_t v43 = v36 + 1;
      uint64_t v44 = (v36 + 1) & 0x3FFFFFFFFFFFFFF8;
      unint64_t v37 = (int32x4_t *)((char *)v35 + 4 * v44);
      uint64_t v38 = &a1->i64[v44];
      uint64_t v45 = a1 + 2;
      uint64_t v46 = v35 + 1;
      uint64_t v47 = v44;
      do
      {
        int32x4_t v49 = v45[-2];
        int32x4_t v48 = v45[-1];
        int32x4_t v51 = *v45;
        int32x4_t v50 = v45[1];
        v45 += 4;
        v46[-1] = vuzp1q_s32(v49, v48);
        int32x4_t *v46 = vuzp1q_s32(v51, v50);
        v46 += 2;
        v47 -= 8;
      }
      while (v47);
      if (v43 == v44) {
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v37 = v35;
      uint64_t v38 = (uint64_t *)a1;
    }
    do
    {
      uint64_t v52 = *v38++;
      v37->i32[0] = v52;
      unint64_t v37 = (int32x4_t *)((char *)v37 + 4);
    }
    while (v38 != (uint64_t *)((char *)a1 + 8 * a2));
LABEL_43:
    int v21 = v57;
    goto LABEL_44;
  }
  uint64_t v19 = 0;
  int v21 = 0;
  uint64_t v20 = v58;
  if (a2) {
    goto LABEL_34;
  }
LABEL_44:
  LODWORD(v57) = v21 + a2;
  uint64_t v39 = 4 * (v21 + a2);
  unint64_t v40 = v8;
  uint64_t v41 = v18;
  uint64_t v42 = 4;
LABEL_45:
  uint64_t v3 = mlir::DenseElementsAttr::getFromRawBuffer(v40, v41, v20, v39, v42, 1, 1);
  if (v56 != v58) {
    free(v56);
  }
  return v3;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldRankOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v9);
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v7.i64[1] = (uint64_t)result;
  uint64_t v8 = v4;
  if (result)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v7.u64[1]))
    {
      mlir::Attribute::getContext((mlir::Attribute *)(v9 + 24));
      mlir::ShapedType::getShape((mlir::ShapedType *)&v7.u64[1]);
      v7.i64[0] = v5;
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v9 - 8) & 0xFFFFFFFFFFFFFFF8));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldRankOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldSizeOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v13);
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v11.i64[1] = (uint64_t)result;
  uint64_t v12 = v4;
  if (result)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v11.u64[1]))
    {
      uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v11.u64[1]);
      if (!v6)
      {
LABEL_7:
        mlir::Attribute::getContext((mlir::Attribute *)(v13 + 24));
        uint64_t v8 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v11.u64[1]);
        v11.i64[0] = mlir::ShapedType::getNumElements(v8, v9);
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v13 - 8) & 0xFFFFFFFFFFFFFFF8));
      }
      uint64_t v7 = 8 * v6;
      while (*Shape != 0x8000000000000000)
      {
        ++Shape;
        v7 -= 8;
        if (!v7) {
          goto LABEL_7;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldSizeOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldDimensionSizeOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v37[6] = *MEMORY[0x263EF8340];
  uint64_t v31 = a2;
  uint64_t v3 = *(uint64_t **)(a3 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v3);
  if (!v4) {
    return 0;
  }
  uint64_t v35 = v37;
  uint64_t v36 = 0x600000000;
  mlir::getIntValues<long long>((uint64_t)v4, v5, (uint64_t)&v35, 1);
  uint64_t v6 = (uint64_t *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v31) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = *v6;
  unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v9 = *(unsigned int *)(v7 + 16);
  if (!v9) {
    goto LABEL_12;
  }
  unint64_t v10 = *(void **)(v7 + 8);
  int32x4_t v11 = &v10[2 * v9];
  do
  {
    unint64_t v12 = v9 >> 1;
    uint64_t v13 = &v10[2 * (v9 >> 1)];
    unint64_t v15 = *v13;
    unint64_t v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8) {
      unint64_t v10 = v14;
    }
    else {
      unint64_t v9 = v12;
    }
  }
  while (v9);
  if (v10 != v11 && *v10 == v8) {
    uint64_t v16 = v10[1];
  }
  else {
LABEL_12:
  }
    uint64_t v16 = 0;
  v30[0] = v6;
  v30[1] = v16;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
  {
    uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v30);
    unint64_t v32 = v34;
    uint64_t v33 = 0x400000000;
    if (v36)
    {
      uint64_t v19 = Shape;
      uint64_t v20 = v18;
      unsigned int v21 = 0;
      int v22 = v35;
      uint64_t v23 = 8 * v36;
      while (1)
      {
        uint64_t v24 = *(void *)(v19 + 8 * ((*v22 + v20) % v20));
        if (v24 == 0x8000000000000000) {
          break;
        }
        if (v21 >= HIDWORD(v33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v21 + 1, 8);
          unsigned int v21 = v33;
        }
        *((void *)v32 + v21) = v24;
        unsigned int v21 = v33 + 1;
        LODWORD(v33) = v33 + 1;
        ++v22;
        v23 -= 8;
        if (!v23) {
          goto LABEL_23;
        }
      }
      unint64_t v25 = 0;
    }
    else
    {
LABEL_23:
      mlir::Attribute::getContext((mlir::Attribute *)(v31 + 24));
      unint64_t v26 = (int32x4_t *)v32;
      uint64_t v27 = v33;
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v31 - 8) & 0xFFFFFFFFFFFFFFF8));
    }
    if (v32 != v34) {
      free(v32);
    }
  }
  else
  {
    unint64_t v25 = 0;
  }
  if (v35 != v37) {
    free(v35);
  }
  return v25;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldDimensionSizeOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldDynamicShapeCastOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v6);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v3 + 48) + 32))(*(void *)(v3 + 48), v4)
      && (unint64_t v5 = *(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v6) + 8) & 0xFFFFFFFFFFFFFFF8,
          v5 == (*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v6) + 8) & 0xFFFFFFFFFFFFFFF8)))
    {
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v6) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldDynamicShapeCastOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldBroadcastToOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
    return 0;
  unint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  uint64_t v7 = (uint64_t)v6;
  v39[0] = v5;
  v39[1] = v6;
  unint64_t v8 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
  if (!v5 || v8 == 0) {
    return 0;
  }
  uint64_t v11 = (uint64_t)v8;
  uint64_t v12 = v9;
  if (mlir::ElementsAttr::getNumElements((uint64_t)v5, v7) != 1 || mlir::ElementsAttr::getNumElements(v11, v12) != 1) {
    return 0;
  }
  unint64_t SingleInt = mlir::getSingleIntValue<long long>(v11, v12);
  unint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39);
  uint64_t v47 = v14;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    unint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39);
    uint64_t v47 = v15;
    uint64_t v16 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                   + 136);
    if (v16 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return 0;
    }
    mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)v39, (uint64_t)&ArgOperands);
    mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&ArgOperands, 0, (uint64_t)&v40);
    uint64_t v42 = v44;
    uint64_t v43 = 0x100000000;
    llvm::SmallVectorImpl<llvm::APFloat>::assign((unsigned int *)&v42, SingleInt, (uint64_t)&v40);
    uint64_t v19 = (void *)v41[0];
    unsigned int v21 = llvm::APFloatBase::PPCDoubleDouble(v20);
    if (v21 == v19)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v41);
      if (v49) {
        goto LABEL_47;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v41);
      if (v49) {
        goto LABEL_47;
      }
    }
    uint64_t v31 = v50;
    uint64_t v50 = 0;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
LABEL_47:
    if (!(_BYTE)ArgOperands)
    {
      uint64_t v32 = v47;
      uint64_t v47 = 0;
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      }
    }
    unint64_t ArgOperands = v43;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v39[0]);
    int v34 = (void *)mlir::RankedTensorType::get((uint64_t)&ArgOperands, 1, ElementTypeOrSelf, 0);
    unint64_t ElementsAttr = mlir::createElementsAttr(v34, (uint64_t)v42, v43);
    int v30 = v42;
    if (v43)
    {
      uint64_t v36 = (char *)v42 - 24;
      uint64_t v37 = 32 * v43;
      do
      {
        while (1)
        {
          uint64_t v38 = (llvm::detail::DoubleAPFloat *)&v36[v37];
          if (v21 != *(void **)&v36[v37]) {
            break;
          }
          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v38);
          v37 -= 32;
          if (!v37) {
            goto LABEL_55;
          }
        }
        llvm::detail::IEEEFloat::~IEEEFloat(v38);
        v37 -= 32;
      }
      while (v37);
LABEL_55:
      int v30 = v42;
    }
    unint64_t v17 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
    if (v30 != v44) {
      goto LABEL_57;
    }
    return v17;
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)v39, (uint64_t)&v42);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((uint64_t)&v42, 0, (llvm::APInt *)&v40);
  unint64_t ArgOperands = (unint64_t)&v48;
  uint64_t v47 = 0x300000000;
  llvm::SmallVectorImpl<llvm::APInt>::assign((uint64_t)&ArgOperands, SingleInt, (llvm::APInt *)&v40);
  if (LODWORD(v41[0]) >= 0x41 && v40) {
    MEMORY[0x21667D390](v40, 0x1000C8000313F17);
  }
  if (!v44[8])
  {
    uint64_t v22 = v45;
    uint64_t v45 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  if (!(_BYTE)v42)
  {
    uint64_t v23 = v43;
    uint64_t v43 = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
  uint64_t v42 = (void *)v47;
  uint64_t v24 = mlir::getElementTypeOrSelf(v39[0]);
  unint64_t v25 = (void *)mlir::RankedTensorType::get((uint64_t)&v42, 1, v24, 0);
  unint64_t v26 = mlir::createElementsAttr(v25, (_DWORD *)ArgOperands, v47);
  uint64_t v27 = (uint64_t *)ArgOperands;
  if (v47)
  {
    uint64_t v28 = 2 * v47;
    do
    {
      if (LODWORD(v27[v28 - 1]) >= 0x41)
      {
        uint64_t v29 = v27[v28 - 2];
        if (v29) {
          MEMORY[0x21667D390](v29, 0x1000C8000313F17);
        }
      }
      v28 -= 2;
    }
    while (v28 * 8);
    uint64_t v27 = (uint64_t *)ArgOperands;
  }
  unint64_t v17 = (unint64_t)v26 & 0xFFFFFFFFFFFFFFFBLL;
  if (v27 != &v48)
  {
    int v30 = v27;
LABEL_57:
    free(v30);
  }
  return v17;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldBroadcastToOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldBroadcastGradientArgsOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v24);
  uint64_t v22 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v23 = v3;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v24);
  unint64_t v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!v22) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v5;
  uint64_t v8 = v6;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v22)) {
    return 0;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v22);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v11 -= 8;
      if (!v11) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  if (!v22 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v22)) {
    return 0;
  }
  uint64_t v12 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v22);
  if (v13)
  {
    uint64_t v14 = 8 * v13;
    while (*v12 != 0x8000000000000000)
    {
      ++v12;
      v14 -= 8;
      if (!v14) {
        goto LABEL_13;
      }
    }
    return 0;
  }
LABEL_13:
  mlir::Attribute::getContext((mlir::Attribute *)(v24 + 24));
  mlir::mps::getBroadcastGradientArgs((uint64_t)v22, v23, v7, v8, (char **)&__p);
  uint64_t v15 = (int32x4_t *)__p;
  uint64_t v16 = (v21 - (unsigned char *)__p) >> 3;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v24 - 8) & 0xFFFFFFFFFFFFFFF8));
  if (__p)
  {
    unsigned int v21 = __p;
    operator delete(__p);
  }
  return v18;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldBroadcastGradientArgsOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReductionProdOp>::externalFold(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v102 = a2;
  unint64_t v96 = (void *)a2;
  if (!mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v96)) {
    goto LABEL_19;
  }
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v96) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_11:
  }
    uint64_t v14 = 0;
  __b = v4;
  uint64_t v104 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__b)) {
    goto LABEL_19;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&__b);
  if (!v16) {
    goto LABEL_19;
  }
  uint64_t v17 = 8 * v16;
  while (*Shape)
  {
    ++Shape;
    v17 -= 8;
    if (!v17) {
      goto LABEL_19;
    }
  }
  unint64_t v18 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v96) | 4;
  if (v18 <= 7)
  {
LABEL_19:
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v102 - 8) & 0xFFFFFFFFFFFFFFF8));
    if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
      uint64_t v20 = ElementTypeOrSelf;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v101 = v20;
    unint64_t v18 = 0;
    if (mlir::mps::ReductionAndOp::getAxes((mlir::mps::ReductionAndOp *)&v102) || !v101) {
      return v18;
    }
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v101);
    unsigned int v100 = Width;
    if (Width > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v99);
    }
    BOOL v99 = Width != 0;
    uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v102);
    uint64_t v23 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
    __b = v23;
    uint64_t v104 = v24;
    if (v23)
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__b))
      {
        unint64_t v18 = 0;
LABEL_127:
        if (v100 >= 0x41 && v99) {
          MEMORY[0x21667D390](v99, 0x1000C8000313F17);
        }
        return v18;
      }
      unint64_t v25 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&__b);
      if (v26)
      {
        uint64_t v27 = 8 * v26;
        while (*v25)
        {
          ++v25;
          v27 -= 8;
          if (!v27) {
            goto LABEL_33;
          }
        }
        unsigned int v75 = (uint64_t *)mlir::RankedTensorType::get(0, 0, v101, 0);
        uint64_t v76 = (uint64_t)v75;
        if (!v75) {
          goto LABEL_114;
        }
        uint64_t v77 = *v75;
        unint64_t v78 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v79 = *(unsigned int *)(v77 + 16);
        if (!v79) {
          goto LABEL_114;
        }
        unint64_t v80 = *(void **)(v77 + 8);
        unsigned int v81 = &v80[2 * v79];
        do
        {
          unint64_t v82 = v79 >> 1;
          unint64_t v83 = &v80[2 * (v79 >> 1)];
          unint64_t v85 = *v83;
          uint64_t v84 = v83 + 2;
          v79 += ~(v79 >> 1);
          if (v85 < v78) {
            unint64_t v80 = v84;
          }
          else {
            unint64_t v79 = v82;
          }
        }
        while (v79);
        if (v80 != v81 && *v80 == v78) {
          uint64_t v86 = v80[1];
        }
        else {
LABEL_114:
        }
          uint64_t v86 = 0;
        unint64_t v18 = mlir::DenseElementsAttr::get(v76, v86, (llvm::APInt *)&v99, 1) & 0xFFFFFFFFFFFFFFFBLL;
        goto LABEL_127;
      }
    }
LABEL_33:
    uint64_t v28 = *a3;
    if (*a3)
    {
      uint64_t v29 = *v28;
      unint64_t v30 = mlir::TypeID::get<mlir::ElementsAttr>();
      unint64_t v31 = *(unsigned int *)(v29 + 16);
      if (!v31) {
        goto LABEL_42;
      }
      uint64_t v32 = *(void **)(v29 + 8);
      uint64_t v33 = &v32[2 * v31];
      do
      {
        unint64_t v34 = v31 >> 1;
        uint64_t v35 = &v32[2 * (v31 >> 1)];
        unint64_t v37 = *v35;
        uint64_t v36 = v35 + 2;
        v31 += ~(v31 >> 1);
        if (v37 < v30) {
          uint64_t v32 = v36;
        }
        else {
          unint64_t v31 = v34;
        }
      }
      while (v31);
      if (v32 != v33 && *v32 == v30) {
        uint64_t v38 = v32[1];
      }
      else {
LABEL_42:
      }
        uint64_t v38 = 0;
      unint64_t v96 = v28;
      uint64_t v97 = v38;
      mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v96, (uint64_t)&__b);
      LOWORD(v96) = (_WORD)__b;
      if ((_BYTE)__b) {
        uint64_t v97 = v104;
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v104 + 16))(&v97);
      }
      uint64_t v39 = v105;
      uint64_t v98 = v105;
      LOWORD(v93) = v106;
      if ((_BYTE)v106)
      {
        uint64_t v94 = v107;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v107 + 16))(&v94);
        uint64_t v39 = v98;
      }
      uint64_t v40 = v108;
      uint64_t v95 = v108;
      while (v39 != v40)
      {
        if (BYTE1(v96)) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v39;
        }
        if ((_BYTE)v96)
        {
          uint64_t v42 = (const llvm::APInt *)(v97 + 16 * v41);
          unsigned int v92 = *((_DWORD *)v42 + 2);
          if (v92 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v91, v42);
          }
          uint64_t v91 = *(void *)v42;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v97 + 24))(&v91);
        }
        llvm::APInt::operator*=((uint64_t)&v99, &v91);
        if (v92 >= 0x41)
        {
          if (v91) {
            MEMORY[0x21667D390](v91, 0x1000C8000313F17);
          }
        }
        uint64_t v39 = ++v98;
        uint64_t v40 = v95;
      }
      if (!(_BYTE)v93)
      {
        uint64_t v43 = v94;
        uint64_t v94 = 0;
        if (v43) {
          (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
        }
      }
      if (!(_BYTE)v96)
      {
        uint64_t v44 = v97;
        uint64_t v97 = 0;
        if (v44) {
          (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
        }
      }
      if (!(_BYTE)v106)
      {
        uint64_t v45 = v107;
        uint64_t v107 = 0;
        if (v45) {
          (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
        }
      }
      if (!(_BYTE)__b)
      {
        uint64_t v46 = v104;
        uint64_t v104 = 0;
        if (v46) {
          (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
        }
      }
      __b = &v105;
      uint64_t v104 = 0x400000000;
      if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v102))
      {
        uint64_t v74 = (char *)__b;
        LODWORD(v71) = v104;
        goto LABEL_125;
      }
      uint64_t v47 = *a3;
      if (!v47) {
        goto LABEL_90;
      }
      uint64_t v48 = *v47;
      unint64_t v49 = mlir::TypeID::get<mlir::ElementsAttr>();
      unint64_t v50 = *(unsigned int *)(v48 + 16);
      if (!v50) {
        goto LABEL_90;
      }
      uint64_t v51 = *(void **)(v48 + 8);
      uint64_t v52 = &v51[2 * v50];
      do
      {
        unint64_t v53 = v50 >> 1;
        uint64_t v54 = &v51[2 * (v50 >> 1)];
        unint64_t v56 = *v54;
        uint64_t v55 = v54 + 2;
        v50 += ~(v50 >> 1);
        if (v56 < v49) {
          uint64_t v51 = v55;
        }
        else {
          unint64_t v50 = v53;
        }
      }
      while (v50);
      if (v51 != v52 && *v51 == v49) {
        uint64_t v57 = v51[1];
      }
      else {
LABEL_90:
      }
        uint64_t v57 = 0;
      unint64_t v93 = v47;
      uint64_t v94 = v57;
      uint64_t Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
      uint64_t v59 = (uint64_t)Type;
      if (!Type) {
        goto LABEL_100;
      }
      uint64_t v60 = *Type;
      unint64_t v61 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v62 = *(unsigned int *)(v60 + 16);
      if (!v62) {
        goto LABEL_100;
      }
      uint64_t v63 = *(void **)(v60 + 8);
      uint64_t v64 = &v63[2 * v62];
      do
      {
        unint64_t v65 = v62 >> 1;
        uint64_t v66 = &v63[2 * (v62 >> 1)];
        unint64_t v68 = *v66;
        uint64_t v67 = v66 + 2;
        v62 += ~(v62 >> 1);
        if (v68 < v61) {
          uint64_t v63 = v67;
        }
        else {
          unint64_t v62 = v65;
        }
      }
      while (v62);
      if (v63 != v64 && *v63 == v61) {
        uint64_t v69 = v63[1];
      }
      else {
LABEL_100:
      }
        uint64_t v69 = 0;
      unint64_t v96 = (void *)v59;
      uint64_t v97 = v69;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v96);
      unint64_t v71 = v70;
      if (v70 <= HIDWORD(v104))
      {
        uint64_t v74 = (char *)__b;
        unint64_t v87 = v104;
        if (v104 >= v70) {
          unint64_t v88 = v70;
        }
        else {
          unint64_t v88 = v104;
        }
        if (v88) {
          memset_pattern16(__b, &unk_211ED5510, 8 * v88);
        }
        unint64_t v73 = v71 - v87;
        if (v71 <= v87) {
          goto LABEL_124;
        }
        unint64_t v72 = &v74[8 * v87];
      }
      else
      {
        LODWORD(v104) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, &v105, v70, 8);
        unint64_t v72 = (char *)__b;
        unint64_t v73 = v71;
        uint64_t v74 = (char *)__b;
      }
      memset_pattern16(v72, &unk_211ED5510, 8 * v73);
LABEL_124:
      LODWORD(v104) = v71;
LABEL_125:
      unint64_t v89 = (void *)mlir::RankedTensorType::get((uint64_t)v74, v71, v101, 0);
      unint64_t v18 = (unint64_t)mlir::createElementsAttr(v89, &v99, 1) & 0xFFFFFFFFFFFFFFFBLL;
      if (__b != &v105) {
        free(__b);
      }
      goto LABEL_127;
    }
    if (v100 >= 0x41 && v99) {
      MEMORY[0x21667D390](v99, 0x1000C8000313F17);
    }
    return 0;
  }
  return v18;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldReductionProdOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldConv2DOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v130[4] = *MEMORY[0x263EF8340];
  uint64_t v122 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v122) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v121[0] = (uint64_t)v4;
  v121[1] = v14;
  uint64_t v15 = (void *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v122) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15) {
    goto LABEL_20;
  }
  uint64_t v16 = *v15;
  unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v18 = *(unsigned int *)(v16 + 16);
  if (!v18) {
    goto LABEL_20;
  }
  uint64_t v19 = *(void **)(v16 + 8);
  uint64_t v20 = &v19[2 * v18];
  do
  {
    unint64_t v21 = v18 >> 1;
    uint64_t v22 = &v19[2 * (v18 >> 1)];
    unint64_t v24 = *v22;
    uint64_t v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17) {
      uint64_t v19 = v23;
    }
    else {
      unint64_t v18 = v21;
    }
  }
  while (v18);
  if (v19 != v20 && *v19 == v17) {
    unint64_t v25 = (void *)v19[1];
  }
  else {
LABEL_20:
  }
    unint64_t v25 = 0;
  v120[0] = v15;
  v120[1] = v25;
  uint64_t v26 = (void *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v122) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v26) {
    goto LABEL_30;
  }
  uint64_t v27 = *v26;
  unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v29 = *(unsigned int *)(v27 + 16);
  if (!v29) {
    goto LABEL_30;
  }
  unint64_t v30 = *(void **)(v27 + 8);
  unint64_t v31 = &v30[2 * v29];
  do
  {
    unint64_t v32 = v29 >> 1;
    uint64_t v33 = &v30[2 * (v29 >> 1)];
    unint64_t v35 = *v33;
    unint64_t v34 = v33 + 2;
    v29 += ~(v29 >> 1);
    if (v35 < v28) {
      unint64_t v30 = v34;
    }
    else {
      unint64_t v29 = v32;
    }
  }
  while (v29);
  if (v30 != v31 && *v30 == v28) {
    uint64_t v36 = (void *)v30[1];
  }
  else {
LABEL_30:
  }
    uint64_t v36 = 0;
  v119[0] = v26;
  v119[1] = v36;
  int PaddingMode = mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v122);
  int WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v122);
  unint64_t v39 = 0;
  if (PaddingMode || WeightsLayout != 2) {
    return v39;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v120)) {
    return 0;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v120);
  if (v41)
  {
    uint64_t v42 = 8 * v41;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v42 -= 8;
      if (!v42) {
        goto LABEL_38;
      }
    }
    return 0;
  }
LABEL_38:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v119)) {
    return 0;
  }
  uint64_t v43 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v119);
  if (v44)
  {
    uint64_t v45 = 8 * v44;
    while (*v43 != 0x8000000000000000)
    {
      ++v43;
      v45 -= 8;
      if (!v45) {
        goto LABEL_43;
      }
    }
    return 0;
  }
LABEL_43:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121)) {
    return 0;
  }
  uint64_t v46 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v121);
  if (v47)
  {
    uint64_t v48 = 8 * v47;
    while (*v46 != 0x8000000000000000)
    {
      ++v46;
      v48 -= 8;
      if (!v48) {
        goto LABEL_48;
      }
    }
    return 0;
  }
LABEL_48:
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v121);
  if (!mlir::Type::isF32((mlir::Type *)&OperandRange)
    && !mlir::Type::isF16((mlir::Type *)&OperandRange)
    && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    return 0;
  }
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v120[0]);
  uint64_t v50 = mlir::getElementTypeOrSelf(v119[0]);
  BOOL v117 = ElementTypeOrSelf != v50;
  {
    return 0;
  }
  uint64_t v51 = mlir::ShapedType::getShape((mlir::ShapedType *)v120);
  uint64_t v53 = v52;
  LOBYTE(v115) = 0;
  char v116 = 0;
  uint64_t v109 = (uint64_t *)v51;
  if (ElementTypeOrSelf == v50)
  {
    uint64_t v56 = OperandRange;
  }
  else
  {
    uint64_t Context = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)v121);
    uint64_t v56 = mlir::Float32Type::get(Context, v55);
  }
  uint64_t v58 = mlir::ShapedType::cloneWith(v121, &v115, v56);
  uint64_t v60 = v59;
  mlir::mps::CPUNDArray::CPUNDArray(v114);
  mlir::mps::CPUNDArray::CPUNDArray(v113);
  mlir::mps::CPUNDArray::CPUNDArray(v112, v58, v60, 0);
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v122);
  uint64_t InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v122);
  Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v122);
  unsigned int Groups = mlir::mps::Conv2DDataGradientOp::getGroups((mlir::mps::Conv2DDataGradientOp *)&v122);
  int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v122);
  v129[0] = v130;
  v129[1] = (void *)0x400000000;
  v127[0] = v128;
  v127[1] = (void *)0x400000000;
  v125[0] = v126;
  v125[1] = (void *)0x200000000;
  v123[0] = v124;
  v123[1] = (void *)0x200000000;
  uint64_t v64 = *(void *)(v122 + 24);
  if (!Strides) {
    goto LABEL_70;
  }
  uint64_t v65 = *Strides;
  unint64_t v66 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v67 = *(unsigned int *)(v65 + 16);
  if (!v67) {
    goto LABEL_70;
  }
  unint64_t v68 = *(void **)(v65 + 8);
  uint64_t v69 = &v68[2 * v67];
  do
  {
    unint64_t v70 = v67 >> 1;
    unint64_t v71 = &v68[2 * (v67 >> 1)];
    unint64_t v73 = *v71;
    unint64_t v72 = v71 + 2;
    v67 += ~(v67 >> 1);
    if (v73 < v66) {
      unint64_t v68 = v72;
    }
    else {
      unint64_t v67 = v70;
    }
  }
  while (v67);
  if (v68 != v69 && *v68 == v66)
  {
    uint64_t v74 = v68[1];
    if (!InputAttributeNames) {
      goto LABEL_79;
    }
  }
  else
  {
LABEL_70:
    uint64_t v74 = 0;
    if (!InputAttributeNames) {
      goto LABEL_79;
    }
  }
  uint64_t v75 = *InputAttributeNames;
  unint64_t v76 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v77 = *(unsigned int *)(v75 + 16);
  if (!v77) {
    goto LABEL_79;
  }
  unint64_t v78 = *(void **)(v75 + 8);
  unint64_t v79 = &v78[2 * v77];
  do
  {
    unint64_t v80 = v77 >> 1;
    unsigned int v81 = &v78[2 * (v77 >> 1)];
    unint64_t v83 = *v81;
    unint64_t v82 = v81 + 2;
    v77 += ~(v77 >> 1);
    if (v83 < v76) {
      unint64_t v78 = v82;
    }
    else {
      unint64_t v77 = v80;
    }
  }
  while (v77);
  if (v78 == v79 || *v78 != v76)
  {
LABEL_79:
    uint64_t v84 = 0;
    if (Rewriter) {
      goto LABEL_80;
    }
    goto LABEL_94;
  }
  uint64_t v84 = v78[1];
  if (Rewriter)
  {
LABEL_80:
    uint64_t v85 = (uint64_t)Rewriter;
    uint64_t v86 = *Rewriter;
    unint64_t v87 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v88 = *(unsigned int *)(v86 + 16);
    if (v88)
    {
      unint64_t v89 = *(void **)(v86 + 8);
      uint64_t v90 = &v89[2 * v88];
      do
      {
        unint64_t v91 = v88 >> 1;
        unsigned int v92 = &v89[2 * (v88 >> 1)];
        unint64_t v94 = *v92;
        unint64_t v93 = v92 + 2;
        v88 += ~(v88 >> 1);
        if (v94 < v87) {
          unint64_t v89 = v93;
        }
        else {
          unint64_t v88 = v91;
        }
      }
      while (v88);
      uint64_t v95 = v109;
      if (v89 == v90)
      {
        uint64_t v96 = 0;
      }
      else if (*v89 == v87)
      {
        uint64_t v96 = v89[1];
      }
      else
      {
        uint64_t v96 = 0;
      }
    }
    else
    {
      uint64_t v96 = 0;
      uint64_t v95 = v109;
    }
    goto LABEL_96;
  }
LABEL_94:
  uint64_t v85 = 0;
  uint64_t v96 = 0;
  uint64_t v95 = v109;
  if (!mlir::mps::inferConv2DParams(v64, 1, v95, v53, (uint64_t)Strides, v74, (uint64_t)InputAttributeNames, v84, v85, v96, 0, (uint64_t)v129, (unsigned int *)v127, (uint64_t)v125, (uint64_t)v123))goto LABEL_99; {
LABEL_96:
  }
  unint64_t v97 = *((void *)v127[0] + 2);
  unint64_t v98 = *((void *)v127[0] + 3);
  unint64_t v100 = *(void *)v127[0];
  unint64_t v99 = *((void *)v127[0] + 1);
  unint64_t v102 = *(void *)v125[0];
  unint64_t v101 = *((void *)v125[0] + 1);
  uint64_t v104 = *(void *)v123[0];
  uint64_t v103 = *((void *)v123[0] + 1);
  uint64_t v111 = 0;
  memset(v110, 0, sizeof(v110));
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v122);
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v122);
  mlir::mps::buildConv2DDescriptor(Input, Filter, (uint64_t)Groups, v101, v102, v103, v104, v97, (uint64_t)v110, v98, v100, v99, PaddingStyle, 0, 2, 0, 0, 0, 0);
  if (Layer2TDMapper::SourceLayer::IsGraphInitialization((Layer2TDMapper::SourceLayer *)v114)) {
    unint64_t v39 = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v112, 0, 0) & 0xFFFFFFFFFFFFFFFBLL;
  }
  else {
LABEL_99:
  }
    unint64_t v39 = 0;
  if (v123[0] != v124) {
    free(v123[0]);
  }
  if (v125[0] != v126) {
    free(v125[0]);
  }
  if (v127[0] != v128) {
    free(v127[0]);
  }
  if (v129[0] != v130) {
    free(v129[0]);
  }
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v112);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v113);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v114);
  return v39;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldConv2DOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::mps::anonymous namespace'::FoldConv2DOp::externalFold(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>)const::{lambda(mlir::Attribute)#1}::operator()(unsigned char *a1, uint64_t *a2)
{
  if (!a2)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    return 0;
  }
  uint64_t v48 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a2);
  uint64_t v49 = v3;
  if (!v48) {
    return 0;
  }
  uint64_t Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v48);
  uint64_t v5 = (uint64_t)Type;
  if (!Type) {
    goto LABEL_14;
  }
  uint64_t v6 = *Type;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  unint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_14:
  }
    uint64_t v15 = 0;
  v47[0] = v5;
  v47[1] = v15;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47);
  if (mlir::Type::isF32((mlir::Type *)&OperandRange) || !*a1) {
    return v48;
  }
  if (!mlir::Type::isF16((mlir::Type *)&OperandRange) && !mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
    return 0;
  }
  LOBYTE(v44) = 0;
  char v45 = 0;
  uint64_t Context = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)v47);
  uint64_t v18 = mlir::Float32Type::get(Context, v17);
  uint64_t v19 = mlir::ShapedType::cloneWith(v47, &v44, v18);
  uint64_t v21 = v20;
  mlir::mps::CPUNDArray::CPUNDArray(v42);
  mlir::mps::CPUNDArray::CPUNDArray(v41, v19, v21, 0);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v40, 13, 0.0);
  uint64_t v22 = operator new(8uLL);
  unint64_t v37 = v22;
  void *v22 = v42;
  uint64_t v38 = v22 + 1;
  unint64_t v39 = v22 + 1;
  uint64_t v23 = operator new(8uLL);
  unint64_t v34 = v23;
  *uint64_t v23 = v41;
  unint64_t v35 = v23 + 1;
  uint64_t v36 = v23 + 1;
  unint64_t v24 = operator new(8uLL);
  unint64_t v31 = v24;
  void *v24 = 0;
  unint64_t v32 = v24 + 1;
  uint64_t v33 = v24 + 1;
  unint64_t v25 = operator new(8uLL);
  __p = v25;
  *unint64_t v25 = 0;
  unint64_t v29 = v25 + 1;
  unint64_t v30 = v25 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v40, (uint64_t *)&v37, (uint64_t **)&v34, (uint64_t)&v31, (uint64_t)&__p, 0, v43, (uint64_t)v40);
  if (__p)
  {
    unint64_t v29 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    unint64_t v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    unint64_t v35 = v34;
    operator delete(v34);
  }
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  unint64_t ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v41, 0, 0);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v41);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v42);
  return ElementsAttr;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldTypeConstraintOp>::externalFold(uint64_t a1, uint64_t a2)
{
  void v10[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = a2;
  unint64_t v5 = *(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v6) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v10, (uint64_t)&v5, 1uLL);
  uint64_t Type = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v6);
  mlir::ValueRange::ValueRange(v9, (uint64_t)&Type, 1uLL);
  v7[0] = &unk_26C38CAA0;
  unint64_t v8 = v7;
  int v2 = mlir::mps::areMoreSpecializedTypes(v10[0], v10[1], v9[0], v9[1], (uint64_t)v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
    if (v2) {
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v6) | 4;
    }
  }
  else
  {
    if (v8) {
      (*(void (**)(void))(*v8 + 40))();
    }
    if (v2) {
      return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v6) | 4;
    }
  }
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldTypeConstraintOp>::externalFoldMultipleResults()
{
  return 0;
}

void std::__function::__func<mlir::mps::$_3,std::allocator<mlir::mps::$_3>,BOOL ()(mlir::Type,mlir::Type)>::~__func()
{
}

void *std::__function::__func<mlir::mps::$_3,std::allocator<mlir::mps::$_3>,BOOL ()(mlir::Type,mlir::Type)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C38CAA0;
  return result;
}

void std::__function::__func<mlir::mps::$_3,std::allocator<mlir::mps::$_3>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C38CAA0;
}

BOOL std::__function::__func<mlir::mps::$_3,std::allocator<mlir::mps::$_3>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldRealPartOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v4);
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    return 0;
  }
  else {
    return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v4) | 4;
  }
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldRealPartOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldImaginaryPartOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v20);
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(Input) + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v20) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = *v3;
    unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v6 = *(unsigned int *)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
    unint64_t v7 = *(void **)(v4 + 8);
    unint64_t v8 = &v7[2 * v6];
    do
    {
      unint64_t v9 = v6 >> 1;
      unint64_t v10 = &v7[2 * (v6 >> 1)];
      unint64_t v12 = *v10;
      unint64_t v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
    if (v7 != v8 && *v7 == v5) {
      uint64_t v13 = v7[1];
    }
    else {
LABEL_11:
    }
      uint64_t v13 = 0;
    v19[0] = v3;
    v19[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v19))
    {
      uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v19);
      if (!v15)
      {
LABEL_17:
        uint64_t v17 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v20);
        return mlir::mps::getConstantAttr<int>((uint64_t *)(*(void *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8), 0) & 0xFFFFFFFFFFFFFFFBLL;
      }
      uint64_t v16 = 8 * v15;
      while (*Shape != 0x8000000000000000)
      {
        ++Shape;
        v16 -= 8;
        if (!v16) {
          goto LABEL_17;
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldImaginaryPartOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::mps::getConstantAttr<int>(uint64_t *a1, int a2)
{
  int v31 = a2;
  uint64_t v32 = 0;
  if (!a1) {
    goto LABEL_10;
  }
  uint64_t v3 = *a1;
  unint64_t v4 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v5 = *(unsigned int *)(v3 + 16);
  if (!v5) {
    goto LABEL_10;
  }
  unint64_t v6 = *(void **)(v3 + 8);
  unint64_t v7 = &v6[2 * v5];
  do
  {
    unint64_t v8 = v5 >> 1;
    unint64_t v9 = &v6[2 * (v5 >> 1)];
    unint64_t v11 = *v9;
    unint64_t v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4) {
      unint64_t v6 = v10;
    }
    else {
      unint64_t v5 = v8;
    }
  }
  while (v5);
  if (v6 != v7 && *v6 == v4) {
    uint64_t v12 = v6[1];
  }
  else {
LABEL_10:
  }
    uint64_t v12 = 0;
  v30[0] = a1;
  v30[1] = v12;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  v29[0] = &v32;
  v29[1] = v30;
  uint64_t v29[2] = &v31;
  unint64_t v14 = *(void **)(*(void *)ElementTypeOrSelf + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    mlir::mps::getConstantAttr<int>(mlir::Type,int)::{lambda(mlir::Type)#1}::operator()((uint64_t)v29, ElementTypeOrSelf);
  }
  else
  {
    v28[0] = &v32;
    v28[1] = v30;
    v28[2] = &v31;
    if (v14 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      mlir::mps::getConstantAttr<int>(mlir::Type,int)::{lambda(mlir::Type)#2}::operator()((uint64_t)v28, ElementTypeOrSelf);
    }
    else
    {
      v27[0] = &v32;
      v27[1] = v30;
      unint64_t v27[2] = &v31;
      if (v14 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
        mlir::mps::getConstantAttr<int>(mlir::Type,int)::{lambda(mlir::ComplexType)#1}::operator()((uint64_t)v27, ElementTypeOrSelf);
      }
    }
  }
  return v32;
}

void mlir::mps::getConstantAttr<int>(mlir::Type,int)::{lambda(mlir::Type)#1}::operator()(uint64_t a1, uint64_t a2)
{
  v24[3] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  BOOL isF16 = mlir::Type::isF16((mlir::Type *)&v22);
  if (isF16)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = *(llvm::APFloatBase **)v4;
    uint64_t v6 = *(void *)(v4 + 8);
    unint64_t v7 = llvm::APFloatBase::IEEEhalf((llvm::APFloatBase *)isF16);
  }
  else
  {
    BOOL isBF16 = mlir::Type::isBF16((mlir::Type *)&v22);
    if (!isBF16)
    {
      if (mlir::Type::isF32((mlir::Type *)&v22))
      {
        uint64_t v15 = *(uint64_t **)(a1 + 8);
        *(float *)&double v23 = (float)**(int **)(a1 + 16);
        uint64_t v16 = *v15;
        uint64_t v17 = v15[1];
        uint64_t v18 = 4;
        uint64_t v19 = 4;
      }
      else
      {
        mlir::Type::isF64((mlir::Type *)&v22);
        uint64_t v20 = *(uint64_t **)(a1 + 8);
        double v23 = (double)**(int **)(a1 + 16);
        uint64_t v16 = *v20;
        uint64_t v17 = v20[1];
        uint64_t v18 = 8;
        uint64_t v19 = 8;
      }
      **(void **)a1 = mlir::DenseElementsAttr::getFromRawBuffer(v16, v17, &v23, v18, v19, 0, 1);
      return;
    }
    uint64_t v9 = *(void *)(a1 + 8);
    unint64_t v5 = *(llvm::APFloatBase **)v9;
    uint64_t v6 = *(void *)(v9 + 8);
    unint64_t v7 = llvm::APFloatBase::BFloat((llvm::APFloatBase *)isBF16);
  }
  unint64_t v10 = v7;
  std::to_string(&v21, **(_DWORD **)(a1 + 16));
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v11 = &v21;
  }
  else {
    unint64_t v11 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  llvm::APFloat::APFloat((llvm::APFloatBase *)&v23, v10, (unsigned __int8 *)v11, size);
  uint64_t v13 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get(v5, v6, (uint64_t)&v23, 1);
  **(void **)a1 = v13;
  unint64_t v14 = (void *)v24[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v13) == v14)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v24);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v24);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
  }
  operator delete(v21.__r_.__value_.__l.__data_);
}

uint64_t mlir::mps::getConstantAttr<int>(mlir::Type,int)::{lambda(mlir::Type)#2}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2;
  BOOL isInteger = mlir::Type::isInteger((mlir::Type *)&v11, 1);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (isInteger)
  {
    LOBYTE(v9) = **(_DWORD **)(a1 + 16) != 0;
    uint64_t result = mlir::DenseElementsAttr::get(*v4, v4[1], &v9, 1);
    **(void **)a1 = result;
  }
  else
  {
    unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v11);
    uint64_t v7 = **(int **)(a1 + 16);
    mlir::Type::isSignedInteger((mlir::Type *)&v11);
    unsigned int v10 = IntOrFloatBitWidth;
    if (IntOrFloatBitWidth > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v9);
    }
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IntOrFloatBitWidth;
    if (!IntOrFloatBitWidth) {
      unint64_t v8 = 0;
    }
    unint64_t v9 = v8 & v7;
    uint64_t result = mlir::DenseElementsAttr::get(*v4, v4[1], (llvm::APInt *)&v9, 1);
    **(void **)a1 = result;
    if (v10 >= 0x41)
    {
      uint64_t result = v9;
      if (v9) {
        return MEMORY[0x21667D390](v9, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

void mlir::mps::getConstantAttr<int>(mlir::Type,int)::{lambda(mlir::ComplexType)#1}::operator()(uint64_t a1, uint64_t a2)
{
  v31[3] = *MEMORY[0x263EF8340];
  uint64_t v24 = a2;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v24);
  if (mlir::Type::isF32((mlir::Type *)&Value))
  {
    uint64_t v3 = *(void **)(a1 + 8);
    v27[0] = (float)**(int **)(a1 + 16);
    v27[1] = 0.0;
    **(void **)a1 = mlir::DenseElementsAttr::getFromRawBuffer(*v3, v3[1], v27, 8, 8, 0, 1);
    return;
  }
  BOOL isF16 = mlir::Type::isF16((mlir::Type *)&Value);
  uint64_t v5 = *(void *)(a1 + 8);
  _S0 = (float)**(int **)(a1 + 16);
  __asm { FCVT            H8, S0 }
  uint64_t v12 = llvm::APFloatBase::IEEEhalf((llvm::APFloatBase *)isF16);
  __asm { FCVT            S0, H8; __val }
  std::to_string(&v22, _S0);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &v22;
  }
  else {
    unint64_t v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  llvm::APFloat::APFloat((llvm::APFloatBase *)v27, v12, (unsigned __int8 *)v14, size);
  std::to_string(&v21, 0.0);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &v21;
  }
  else {
    uint64_t v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v21.__r_.__value_.__l.__size_;
  }
  uint64_t v18 = llvm::APFloat::APFloat((llvm::APFloatBase *)v25, v12, (unsigned __int8 *)v16, v17);
  uint64_t v19 = (void *)v28[0];
  uint64_t v20 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v20 == v19) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v30, (const llvm::detail::DoubleAPFloat *)v28);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v30, (const llvm::detail::IEEEFloat *)v28);
  }
  if (v20 == (void *)v26[0]) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v31, (const llvm::detail::DoubleAPFloat *)v26);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v31, (const llvm::detail::IEEEFloat *)v26);
  }
  **(void **)a1 = mlir::DenseElementsAttr::get(*(llvm::APFloatBase **)v5, *(void *)(v5 + 8), (uint64_t)v29, 1);
  if (v20 == (void *)v31[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v31);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v31);
  }
  if (v20 == (void *)v30[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v30);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v30);
  }
  if (v20 != (void *)v26[0])
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v26);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v26);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
LABEL_29:
  }
    operator delete(v21.__r_.__value_.__l.__data_);
LABEL_30:
  if (v20 != (void *)v28[0])
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v28);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_32;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v28);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
LABEL_32:
  }
    operator delete(v22.__r_.__value_.__l.__data_);
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldConjugateOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v4);
  if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    return 0;
  }
  else {
    return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v4) | 4;
  }
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldConjugateOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldNonZeroOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*a3
    && llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3))
  {
    mlir::mps::CPUNDArray::CPUNDArray(v20);
    mlir::mps::computeNonZeroIndices((mlir::mps *)v20, (uint64_t)&v23);
    if (!v26)
    {
      unint64_t v18 = 0;
LABEL_19:
      mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v20);
      return v18;
    }
    v22[0] = v24 / v21;
    v22[1] = v21;
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v5 = mlir::IntegerType::get(Context, 0x20u, 1u);
    uint64_t v6 = (void *)mlir::RankedTensorType::get((uint64_t)v22, 2, v5, 0);
    uint64_t v7 = v6;
    if (!v6) {
      goto LABEL_13;
    }
    uint64_t v8 = *v6;
    unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v10 = *(unsigned int *)(v8 + 16);
    if (!v10) {
      goto LABEL_13;
    }
    uint64_t v11 = *(void **)(v8 + 8);
    uint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      unint64_t v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      uint64_t v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        uint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
    {
      uint64_t v17 = v11[1];
      if (v26) {
        goto LABEL_14;
      }
    }
    else
    {
LABEL_13:
      uint64_t v17 = 0;
      if (v26)
      {
LABEL_14:
        unint64_t v18 = mlir::DenseElementsAttr::getFromRawBuffer(v7, v17, v23, 4 * v24, 4, 1, 1) & 0xFFFFFFFFFFFFFFFBLL;
        if (v26 && v23 != &v25) {
          free(v23);
        }
        goto LABEL_19;
      }
    }
    std::__throw_bad_optional_access[abi:nn180100]();
  }
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::anonymous namespace'::FoldNonZeroOp>::externalFoldMultipleResults()
{
  return 0;
}

void std::vector<long long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v13 = operator new(8 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    unint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      unint64_t v21 = &v13[8 * v9 - 16];
      std::string v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *unint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>(std::function<void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>)::Extension::~Extension(mlir::DialectExtensionBase *this)
{
  *(void *)this = &unk_26C38CAE8;
  int v2 = (char *)this + 72;
  uint64_t v3 = (char *)*((void *)this + 12);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  mlir::DialectExtensionBase::~DialectExtensionBase(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C38CAE8;
  int v2 = (char *)this + 72;
  uint64_t v3 = (char *)*((void *)this + 12);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  mlir::DialectExtensionBase::~DialectExtensionBase(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::DialectExtension<void mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>(std::function<void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>)::Extension,mlir::mps::MPSDialect>::apply(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, a2, *a3);
}

void mlir::DialectExtension<void mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>(std::function<void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>)::Extension,mlir::mps::MPSDialect>::clone()
{
}

void *mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>(std::function<void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>)::Extension::apply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v8, &v7);
  }
  uint64_t v5 = (void *)std::__throw_bad_function_call[abi:nn180100]();
  return mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>(std::function<void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>)::Extension::Extension(v5, v6);
}

void *mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>(std::function<void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>)::Extension::Extension(void *a1, uint64_t a2)
{
  *a1 = &unk_26C38C9A8;
  uint64_t v4 = a1 + 3;
  a1[1] = a1 + 3;
  uint64_t v5 = (void **)(a1 + 1);
  a1[2] = 0x300000000;
  if (a1 == (void *)a2) {
    goto LABEL_9;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  if (!v6) {
    goto LABEL_9;
  }
  if (v6 < 4)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 16);
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), v4, *(unsigned int *)(a2 + 16), 16);
  unsigned int v7 = *(_DWORD *)(a2 + 16);
  if (v7)
  {
    uint64_t v4 = *v5;
LABEL_7:
    memcpy(v4, *(const void **)(a2 + 8), 16 * v7);
  }
  *((_DWORD *)a1 + 4) = v6;
LABEL_9:
  *a1 = &unk_26C38CAE8;
  uint64_t v8 = a1 + 9;
  uint64_t v9 = *(void *)(a2 + 96);
  if (v9)
  {
    if (v9 == a2 + 72)
    {
      a1[12] = v8;
      (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
    }
    else
    {
      a1[12] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 16))(v9, v8);
    }
  }
  else
  {
    a1[12] = 0;
  }
  return a1;
}

void std::__function::__func<void (*)(mlir::MLIRContext *,mlir::mps::MPSDialect *),std::allocator<void (*)(mlir::MLIRContext *,mlir::mps::MPSDialect *)>,void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>::~__func()
{
}

void *std::__function::__func<void (*)(mlir::MLIRContext *,mlir::mps::MPSDialect *),std::allocator<void (*)(mlir::MLIRContext *,mlir::mps::MPSDialect *)>,void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C38CB20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(mlir::MLIRContext *,mlir::mps::MPSDialect *),std::allocator<void (*)(mlir::MLIRContext *,mlir::mps::MPSDialect *)>,void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C38CB20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(mlir::MLIRContext *,mlir::mps::MPSDialect *),std::allocator<void (*)(mlir::MLIRContext *,mlir::mps::MPSDialect *)>,void ()(mlir::MLIRContext *,mlir::mps::MPSDialect *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

unint64_t mlir::getANENextSupportedInterleaveValue(uint64_t this)
{
  uint64_t v1 = 4;
  if ((unint64_t)this > 4) {
    uint64_t v1 = 8;
  }
  unint64_t v2 = this & 0xFFFFFFFFFFFFFF00;
  if (this > 2) {
    unint64_t v2 = 0;
  }
  else {
    uint64_t v1 = this;
  }
  if (this <= 8)
  {
    unint64_t v3 = v2;
  }
  else
  {
    uint64_t v1 = 0;
    unint64_t v3 = 0;
  }
  return v3 | v1;
}

uint64_t mlir::legalizeA12(mlir::SymbolRefAttr *InterfaceFor, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  unsigned int v6 = InterfaceFor;
  v172[12] = *MEMORY[0x263EF8340];
  if (InterfaceFor) {
    uint64_t InterfaceFor = (mlir::SymbolRefAttr *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)InterfaceFor);
  }
  v153[0] = v6;
  v153[1] = InterfaceFor;
  uint64_t isPublic = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  uint64_t v8 = a4[1];
  unint64_t v170 = (char *)v172;
  uint64_t v171 = 0x400000000;
  unint64_t v167 = v169;
  uint64_t v168 = 0x400000000;
  *(void *)&long long v165 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v153);
  uint64_t Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v165);
  uint64_t v11 = *(void *)(isPublic + 48);
  uint64_t v12 = *(void *)(isPublic + 56) - v11;
  if (v10 && v12)
  {
    unint64_t v13 = (void *)Inputs;
    uint64_t v14 = 8 * (v12 >> 3) - 8;
    uint64_t v15 = 8 * v10 - 8;
    do
    {
      unint64_t v16 = *(void *)(*(void *)v11 + 8) & 0xFFFFFFFFFFFFFFF8;
      *(void *)&long long v165 = *(void *)v11;
      *((void *)&v165 + 1) = v16;
      v166[0] = *v13;
      if (v171 >= HIDWORD(v171))
      {
        if (!v15) {
          break;
        }
      }
      else
      {
        uint64_t v17 = &v170[24 * v171];
        *(_OWORD *)uint64_t v17 = v165;
        *((void *)v17 + 2) = v166[0];
        LODWORD(v171) = v171 + 1;
        if (!v15) {
          break;
        }
      }
      ++v13;
      v11 += 8;
      uint64_t v18 = v14;
      v14 -= 8;
      v15 -= 8;
    }
    while (v18);
  }
  *(void *)&long long v165 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v153);
  Results = (void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v165);
  uint64_t v21 = v20;
  mlir::Block::getTerminator((ZinIrHalH13g **)isPublic);
  if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
  {
    if (v21)
    {
      uint64_t v23 = *(unsigned int *)(v22 + 68);
      if (v23)
      {
        uint64_t v24 = *(void *)(v22 + 72) + 24;
        uint64_t v25 = v23 - 1;
        uint64_t v26 = 8 * v21 - 8;
        do
        {
          unint64_t v27 = *(void *)(*(void *)v24 + 8) & 0xFFFFFFFFFFFFFFF8;
          *(void *)&long long v165 = *(void *)v24;
          *((void *)&v165 + 1) = v27;
          v166[0] = *Results;
          if (v168 >= HIDWORD(v168))
          {
          }
          else
          {
            unint64_t v28 = (char *)v167 + 24 * v168;
            *(_OWORD *)unint64_t v28 = v165;
            *((void *)v28 + 2) = v166[0];
            LODWORD(v168) = v168 + 1;
          }
          BOOL v29 = v25-- != 0;
          char v30 = v29;
          if (!v26) {
            break;
          }
          ++Results;
          v24 += 32;
          v26 -= 8;
        }
        while ((v30 & 1) != 0);
      }
    }
  }
  if (!(_BYTE)v31)
  {
    unint64_t v34 = (llvm::raw_ostream *)llvm::errs(v31);
    unint64_t v35 = (void *)*((void *)v34 + 4);
    if (*((void *)v34 + 3) - (void)v35 <= 0x1DuLL)
    {
      uint64_t v36 = "checkAndCollectANEArgs failed\n";
      size_t v37 = 30;
LABEL_32:
      llvm::raw_ostream::write(v34, v36, v37);
      uint64_t v33 = 0;
      goto LABEL_152;
    }
    uint64_t v33 = 0;
    qmemcpy(v35, "checkAndCollectANEArgs failed\n", 30);
    uint64_t v137 = *((void *)v34 + 4) + 30;
LABEL_151:
    *((void *)v34 + 4) = v137;
    goto LABEL_152;
  }
  if (!(_BYTE)v32)
  {
    unint64_t v34 = (llvm::raw_ostream *)llvm::errs(v32);
    uint64_t v38 = (void *)*((void *)v34 + 4);
    if (*((void *)v34 + 3) - (void)v38 <= 0x20uLL)
    {
      uint64_t v36 = "checkAndCollectANEResults failed\n";
      size_t v37 = 33;
      goto LABEL_32;
    }
    uint64_t v33 = 0;
    qmemcpy(v38, "checkAndCollectANEResults failed\n", 33);
    uint64_t v137 = *((void *)v34 + 4) + 33;
    goto LABEL_151;
  }
  if (!(v171 | v168))
  {
    uint64_t v33 = mlir::minimalLegalize((uint64_t)v153[0], a2, a3, (uint64_t *)a5);
    goto LABEL_152;
  }
  if (v171)
  {
    uint64_t v39 = 0;
    uint64_t v40 = v170;
    uint64_t v142 = &v170[24 * v171];
    uint64_t v41 = (long long *)(v8 + 16);
    do
    {
      if (*((void *)v40 + 1) != *((void *)v40 + 2) && a3 != 0)
      {
        uint64_t v43 = a2;
        do
        {
          long long v146 = *v41;
          uint64_t v162 = *(void **)(*(void *)(*(void *)v43 + 72) + 32 * v39 + 24);
          *(void *)&long long v165 = v162;
          uint64_t DefiningOp = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v165);
          if (DefiningOp)
          {
            uint64_t v45 = *((void *)DefiningOp + 2);
            ZinIrHalH13g::~ZinIrHalH13g(DefiningOp);
            uint64_t v47 = (uint64_t *)(v46 + 8);
          }
          else
          {
            uint64_t v45 = *(void *)(v165 + 16);
            uint64_t v47 = (uint64_t *)(v45 + 40);
          }
          uint64_t v48 = *v47;
          *(void *)(v8 + 16) = v45;
          *(void *)(v8 + 24) = v48;
          uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v162);
          uint64_t v50 = v162;
          uint64_t v51 = (uint64_t *)*((void *)v40 + 1);
          if (!v51) {
            goto LABEL_55;
          }
          uint64_t v52 = *v51;
          unint64_t v53 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v54 = *(unsigned int *)(v52 + 16);
          if (!v54) {
            goto LABEL_55;
          }
          uint64_t v55 = *(void **)(v52 + 8);
          uint64_t v56 = &v55[2 * v54];
          do
          {
            unint64_t v57 = v54 >> 1;
            uint64_t v58 = &v55[2 * (v54 >> 1)];
            unint64_t v60 = *v58;
            uint64_t v59 = v58 + 2;
            v54 += ~(v54 >> 1);
            if (v60 < v53) {
              uint64_t v55 = v59;
            }
            else {
              unint64_t v54 = v57;
            }
          }
          while (v54);
          if (v55 != v56 && *v55 == v53) {
            uint64_t v61 = v55[1];
          }
          else {
LABEL_55:
          }
            uint64_t v61 = 0;
          (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t, uint64_t))(*a4 + 136))(a4, Loc, v50, v51, v61, a5);
          if (v8)
          {
            if ((void)v146)
            {
              *uint64_t v41 = v146;
            }
            else
            {
              *(void *)uint64_t v41 = 0;
              *(void *)(v8 + 24) = 0;
            }
          }
          v43 += 8;
        }
        while (v43 != a2 + 8 * a3);
      }
      ++v39;
      v40 += 24;
    }
    while (v40 != v142);
  }
  *(void *)&long long v165 = v166;
  *((void *)&v165 + 1) = 0x400000000;
  uint64_t v62 = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  uint64_t v63 = *(void *)(v62 + 48);
  uint64_t v64 = *(void *)(v62 + 56) - v63;
  if (v64)
  {
    uint64_t v65 = v64 >> 3;
    unsigned int v66 = DWORD2(v165);
    uint64_t v67 = 8 * v65;
    do
    {
      uint64_t v68 = *(void *)&v170[24 * *(unsigned int *)(*(void *)v63 + 24) + 8];
      if (v66 >= HIDWORD(v165))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, v166, v66 + 1, 8);
        unsigned int v66 = DWORD2(v165);
      }
      *(void *)(v165 + 8 * v66) = v68;
      unsigned int v66 = ++DWORD2(v165);
      v63 += 8;
      v67 -= 8;
    }
    while (v67);
  }
  uint64_t v162 = v164;
  uint64_t v163 = 0x400000000;
  uint64_t v69 = (ZinIrHalH13g **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  mlir::Block::getTerminator(v69);
  if ((*(unsigned char *)(v70 + 46) & 0x80) != 0)
  {
    uint64_t v71 = *(unsigned int *)(v70 + 68);
    if (v71)
    {
      uint64_t v72 = 0;
      unsigned int v73 = v163;
      uint64_t v74 = 24 * v71;
      do
      {
        uint64_t v75 = *(void *)((char *)v167 + v72 + 8);
        if (v73 >= HIDWORD(v163))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, v164, v73 + 1, 8);
          unsigned int v73 = v163;
        }
        *((void *)v162 + v73) = v75;
        unsigned int v73 = v163 + 1;
        LODWORD(v163) = v163 + 1;
        v72 += 24;
      }
      while (v74 != v72);
    }
  }
  uint64_t v159 = v161;
  uint64_t v160 = 0x400000000;
  uint64_t v143 = (ZinIrHalH13g **)(a2 + 8 * a3);
  if (a3)
  {
    uint64_t v76 = *(void *)(v8 + 16);
    uint64_t v144 = v76;
    uint64_t v147 = *(void *)(v8 + 24);
    for (uint64_t i = (ZinIrHalH13g **)a2; i != v143; ++i)
    {
      unint64_t v78 = *i;
      uint64_t v79 = *((void *)*i + 2);
      ZinIrHalH13g::~ZinIrHalH13g(*i);
      *(void *)(v8 + 16) = v79;
      *(void *)(v8 + 24) = v81;
      if ((*((unsigned char *)v78 + 46) & 0x80) != 0)
      {
        uint64_t v82 = *((void *)v78 + 9);
        unint64_t v83 = *((unsigned int *)v78 + 17);
        int v84 = v83;
        char v156 = v158;
        uint64_t v157 = 0x400000000;
        if (v83 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v83, 8);
          uint64_t v85 = v157;
          goto LABEL_80;
        }
        if (v83)
        {
          uint64_t v85 = 0;
LABEL_80:
          uint64_t v86 = (uint64_t *)((char *)v156 + 8 * v85);
          unint64_t v87 = (uint64_t *)(v82 + 24);
          do
          {
            uint64_t v88 = *v87;
            v150[0] = *v87;
            v151[0] = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v150, v151)&& v151[0] != *(void *)a5 + 16 * *(unsigned int *)(a5 + 16))
            {
              uint64_t v88 = *(void *)(v151[0] + 8);
            }
            *v86++ = v88;
            v87 += 4;
            --v83;
          }
          while (v83);
          int v89 = v157;
          uint64_t v76 = v144;
          goto LABEL_86;
        }
        int v89 = 0;
      }
      else
      {
        int v84 = 0;
        int v89 = 0;
        char v156 = v158;
        HIDWORD(v157) = 4;
      }
LABEL_86:
      LODWORD(v157) = v89 + v84;
      uint64_t v90 = *((void *)v78 + 3);
      v151[0] = mlir::SymbolRefAttr::get(v153[0], v80);
      v150[0] = mlir::placement::RegionTypeAttr::get(*(mlir::MLIRContext **)v8, 1u);
      unint64_t v91 = mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::SmallVector<mlir::Type,4u> &,mlir::FlatSymbolRefAttr,mlir::placement::RegionTypeAttr,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)v8, v90, (uint64_t)&v162, v151, v150, (uint64_t)&v156);
      uint64_t v152 = v91;
      uint64_t v92 = v160;
      if (v160 >= (unint64_t)HIDWORD(v160))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, v161, v160 + 1, 8);
        uint64_t v92 = v160;
      }
      *((void *)v159 + v92) = v91;
      LODWORD(v160) = v160 + 1;
      uint64_t v93 = *((unsigned int *)v78 + 9);
      uint64_t v94 = (uint64_t)v78 - 16;
      if (!v93) {
        uint64_t v94 = 0;
      }
      v151[0] = v94;
      v151[1] = v93;
      v150[0] = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v152);
      v150[1] = v95;
      mlir::IRMapping::map<mlir::ResultRange,mlir::ResultRange,(void *)0>(a5, v151, v150);
      if (v156 != v158) {
        free(v156);
      }
      if (v76)
      {
        *(void *)(v8 + 16) = v76;
        *(void *)(v8 + 24) = v147;
      }
      else
      {
        uint64_t v147 = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
      }
    }
  }
  if (v168)
  {
    unint64_t v145 = 0;
    uint64_t v96 = (char *)v167;
    uint64_t v139 = (char *)v167 + 24 * v168;
    unint64_t v97 = (long long *)(v8 + 16);
    do
    {
      if (*((void *)v96 + 1) != *((void *)v96 + 2) && a3 != 0)
      {
        unint64_t v99 = (ZinIrHalH13g **)a2;
        do
        {
          long long v148 = *v97;
          if (v145 >= 6) {
            uint64_t v100 = (uint64_t)*v99 - 24 * (v145 - 5) - 96;
          }
          else {
            uint64_t v100 = (uint64_t)*v99 + 16 * ~v145;
          }
          v151[0] = v100;
          char v156 = 0;
          int v101 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v151, &v156);
          unint64_t v102 = 0;
          if (v101 && v156 != (void *)(*(void *)a5 + 16 * *(unsigned int *)(a5 + 16))) {
            unint64_t v102 = (void *)*((void *)v156 + 1);
          }
          v150[0] = (uint64_t)v102;
          char v156 = v102;
          uint64_t v103 = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v156);
          if (v103)
          {
            uint64_t v104 = *((void *)v103 + 2);
            ZinIrHalH13g::~ZinIrHalH13g(v103);
            __int16 v106 = (uint64_t *)(v105 + 8);
          }
          else
          {
            uint64_t v104 = *((void *)v156 + 2);
            __int16 v106 = (uint64_t *)(v104 + 40);
          }
          uint64_t v107 = *v106;
          *(void *)(v8 + 16) = v104;
          *(void *)(v8 + 24) = v107;
          uint64_t v108 = mlir::Value::getLoc((mlir::Value *)v150);
          uint64_t v109 = v150[0];
          uint64_t v110 = (uint64_t *)*((void *)v96 + 2);
          if (!v110) {
            goto LABEL_124;
          }
          uint64_t v111 = *v110;
          unint64_t v112 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v113 = *(unsigned int *)(v111 + 16);
          if (!v113) {
            goto LABEL_124;
          }
          uint64_t v114 = *(void **)(v111 + 8);
          long long v115 = &v114[2 * v113];
          do
          {
            unint64_t v116 = v113 >> 1;
            BOOL v117 = &v114[2 * (v113 >> 1)];
            unint64_t v119 = *v117;
            uint64_t v118 = v117 + 2;
            v113 += ~(v113 >> 1);
            if (v119 < v112) {
              uint64_t v114 = v118;
            }
            else {
              unint64_t v113 = v116;
            }
          }
          while (v113);
          if (v114 != v115 && *v114 == v112) {
            uint64_t v120 = v114[1];
          }
          else {
LABEL_124:
          }
            uint64_t v120 = 0;
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 136))(a4, v108, v109, v110, v120, a5);
          uint64_t v121 = v150[0];
          v151[0] = v150[0];
          char v156 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v151, &v156)&& v156 != (void *)(*(void *)a5 + 16 * *(unsigned int *)(a5 + 16)))
          {
            uint64_t v121 = *((void *)v156 + 1);
          }
          v151[0] = v100;
          char v156 = 0;
          char v122 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v151, &v156);
          unsigned int v123 = v156;
          if ((v122 & 1) == 0)
          {
            unsigned int v123 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a5, (uint64_t)v151, (unint64_t *)v151, v156);
            *unsigned int v123 = v151[0];
            v123[1] = 0;
          }
          v123[1] = v121;
          if (v8)
          {
            if ((void)v148)
            {
              *unint64_t v97 = v148;
            }
            else
            {
              *(void *)unint64_t v97 = 0;
              *(void *)(v8 + 24) = 0;
            }
          }
          ++v99;
        }
        while (v99 != v143);
      }
      ++v145;
      v96 += 24;
    }
    while (v96 != v139);
  }
  unint64_t v124 = (ZinIrHalH13g **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  mlir::Block::getTerminator(v124);
  if ((*(unsigned char *)(v125 + 46) & 0x80) != 0)
  {
    uint64_t v126 = *(unsigned int *)(v125 + 68);
    if (v126 && v163 != 0)
    {
      uint64_t v128 = (uint64_t *)v162;
      uint64_t v129 = (uint64_t *)(*(void *)(v125 + 72) + 24);
      uint64_t v130 = v126 - 1;
      uint64_t v131 = 8 * v163 - 8;
      do
      {
        uint64_t v133 = *v129;
        v129 += 4;
        uint64_t v132 = v133;
        uint64_t v134 = *v128++;
        *(void *)(v132 + 8) = *(void *)(v132 + 8) & 7 | v134;
        BOOL v29 = v130-- != 0;
        if (!v29) {
          break;
        }
        uint64_t v135 = v131;
        v131 -= 8;
      }
      while (v135);
    }
  }
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::SymbolRefAttr *)((char *)v153[0] + 24));
  mlir::ValueRange::ValueRange(v155, v165, DWORD2(v165));
  mlir::ValueRange::ValueRange(v154, (uint64_t)v162, v163);
  uint64_t v33 = mlir::FunctionType::get(Context, v155[0], v155[1], v154[0], v154[1]);
  if (v159 != v161) {
    free(v159);
  }
  if (v162 != v164) {
    free(v162);
  }
  if ((void *)v165 != v166) {
    free((void *)v165);
  }
LABEL_152:
  if (v167 != v169) {
    free(v167);
  }
  if (v170 != (char *)v172) {
    free(v170);
  }
  return v33;
}

uint64_t mlir::anonymous namespace'::checkAndCollectANEArgs(uint64_t a1, uint64_t a2, void *a3)
{
  v33[19] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56) - (void)v3;
  if (!v4) {
    return 1;
  }
  uint64_t v7 = 8 * (v4 >> 3);
  while (1)
  {
    uint64_t v8 = *v3;
    if (*(_UNKNOWN **)(*(void *)(*(void *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      uint64_t v9 = (void *)(*(void *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF8);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v25 = v9;
    if (!v9)
    {
      v23[0] = (void **)"Argument was not memref: ";
      __int16 v24 = 259;
      mlir::Operation::emitOpError(a1, v23, (uint64_t)&v28);
      mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v28, (uint64_t *)&v25);
      if (v28) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v29);
      return 0;
    }
    if (v25 != CanonicalMemRefType) {
      break;
    }
LABEL_3:
    ++v3;
    v7 -= 8;
    if (!v7) {
      return 1;
    }
  }
  uint64_t v11 = CanonicalMemRefType;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v25);
  if (v12 == 4 || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v25), v13 == 5))
  {
      return 0;
      *(void *)(*a3 + 24 * *(unsigned int *)(v8 + 24) + 8) = v11;
    goto LABEL_3;
  }
  v23[0] = (void **)"Region input ";
  __int16 v24 = 259;
  mlir::Operation::emitOpError(a1, v23, (uint64_t)&v28);
  if (v28)
  {
    uint64_t v16 = *(unsigned int *)(v8 + 24);
    int v26 = 5;
    uint64_t v27 = v16;
    uint64_t v17 = &v26;
    unint64_t v18 = v30;
    if (v31 >= v32)
    {
      unint64_t v21 = v31 + 1;
      if (v30 <= (unint64_t)&v26 && v30 + 24 * v31 > (unint64_t)&v26)
      {
        uint64_t v22 = (char *)&v26 - v30;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v33, v21, 24);
        unint64_t v18 = v30;
        uint64_t v17 = (int *)&v22[v30];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v33, v21, 24);
        uint64_t v17 = &v26;
        unint64_t v18 = v30;
      }
    }
    unint64_t v19 = v18 + 24 * v31;
    long long v20 = *(_OWORD *)v17;
    *(void *)(v19 + 16) = *((void *)v17 + 2);
    *(_OWORD *)unint64_t v19 = v20;
    ++v31;
    if (v28) {
      mlir::Diagnostic::operator<<((uint64_t)v29, " was not rank-4 or rank-5");
    }
  }
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v29);
  return v14;
}

uint64_t mlir::anonymous namespace'::checkAndCollectANEResults(uint64_t a1, ZinIrHalH13g **this, void *a3)
{
  v22[23] = *MEMORY[0x263EF8340];
  mlir::Block::getTerminator(this);
  if ((*(unsigned char *)(v5 + 46) & 0x80) == 0) {
    return 1;
  }
  uint64_t v6 = *(unsigned int *)(v5 + 68);
  if (!v6) {
    return 1;
  }
  unint64_t v7 = *(void *)(v5 + 72);
  uint64_t v8 = 32 * v6;
  while (1)
  {
    if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      uint64_t v9 = (void *)(*(void *)(*(void *)(v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    }
    else {
      uint64_t v9 = 0;
    }
    long long v20 = v9;
    if (!v9)
    {
      v18[0] = (void **)"Result was not memref: ";
      __int16 v19 = 259;
      mlir::Operation::emitOpError(a1, v18, (uint64_t)&v21);
      unint64_t v17 = *(void *)(*(void *)(v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v21, (uint64_t *)&v17);
      if (v21) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v21);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v22);
      return 0;
    }
    if (v20 != CanonicalMemRefType) {
      break;
    }
LABEL_4:
    v7 += 32;
    v8 -= 32;
    if (!v8) {
      return 1;
    }
  }
  uint64_t v11 = CanonicalMemRefType;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20);
  if (v12 == 4 || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20), v13 == 5))
  {
      return 0;
      *(void *)(*a3 + 24 * mlir::OpOperand::getOperandNumber(v7) + 8) = v11;
    goto LABEL_4;
  }
  uint64_t v16 = *(void *)(v7 + 16);
  v18[0] = (void **)"Op output was not rank-4 or rank-5";
  __int16 v19 = 259;
  mlir::Operation::emitOpError(v16, v18, (uint64_t)&v21);
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v21);
  if (v21) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v21);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v22);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::SmallVector<mlir::Type,4u> &,mlir::FlatSymbolRefAttr,mlir::placement::RegionTypeAttr,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  v27[38] = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.region_call", (const unsigned __int8 *)0x15, Context);
  if (!v14)
  {
    __int16 v24 = 1283;
    void v23[2] = (uint64_t)"placement.region_call";
    v23[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v13);
  mlir::ValueRange::ValueRange(v26, *(void *)a3, *(unsigned int *)(a3 + 8));
  uint64_t v15 = *a4;
  uint64_t v16 = *a5;
  mlir::ValueRange::ValueRange(v25, *(void *)a6, *(unsigned int *)(a6 + 8));
  mlir::placement::RegionCall::build((uint64_t)a1, (uint64_t)v27, v26[0], v26[1], v15, v16, v25[0], v25[1]);
  unint64_t v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v18;
}

uint64_t mlir::IRMapping::map<mlir::ResultRange,mlir::ResultRange,(void *)0>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a3[1];
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = 0;
    uint64_t v8 = *a2;
    uint64_t v9 = *a3;
    uint64_t v10 = v3 - 1;
    uint64_t v11 = v4 - 1;
    do
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v7);
      uint64_t v13 = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v7);
      uint64_t v15 = NextResultAtOffset;
      uint64_t v16 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v6, (unint64_t *)&v15, &v16);
      char v14 = v16;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v6, (uint64_t)&v15, (unint64_t *)&v15, v16);
        char v14 = (void *)result;
        *(void *)uint64_t result = v15;
        *(void *)(result + 8) = 0;
      }
      v14[1] = v13;
      if (v10 == v7) {
        break;
      }
      BOOL v5 = v11 == v7++;
    }
    while (!v5);
  }
  return result;
}

uint64_t mlir::legalizeA12(mlir::SymbolRefAttr *InterfaceFor, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = InterfaceFor;
  v173[12] = *MEMORY[0x263EF8340];
  if (InterfaceFor) {
    uint64_t InterfaceFor = (mlir::SymbolRefAttr *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)InterfaceFor);
  }
  v154[0] = v8;
  v154[1] = InterfaceFor;
  uint64_t isPublic = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
  uint64_t v171 = (char *)v173;
  uint64_t v172 = 0x400000000;
  uint64_t v168 = v170;
  uint64_t v169 = 0x400000000;
  *(void *)&long long v166 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v154);
  uint64_t Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v166);
  uint64_t v12 = *(void *)(isPublic + 48);
  uint64_t v13 = *(void *)(isPublic + 56) - v12;
  if (v11 && v13)
  {
    char v14 = (void *)Inputs;
    uint64_t v15 = 8 * (v13 >> 3) - 8;
    uint64_t v16 = 8 * v11 - 8;
    do
    {
      unint64_t v17 = *(void *)(*(void *)v12 + 8) & 0xFFFFFFFFFFFFFFF8;
      *(void *)&long long v166 = *(void *)v12;
      *((void *)&v166 + 1) = v17;
      v167[0] = *v14;
      if (v172 >= HIDWORD(v172))
      {
        if (!v16) {
          break;
        }
      }
      else
      {
        unint64_t v18 = &v171[24 * v172];
        *(_OWORD *)unint64_t v18 = v166;
        *((void *)v18 + 2) = v167[0];
        LODWORD(v172) = v172 + 1;
        if (!v16) {
          break;
        }
      }
      ++v14;
      v12 += 8;
      uint64_t v19 = v15;
      v15 -= 8;
      v16 -= 8;
    }
    while (v19);
  }
  *(void *)&long long v166 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v154);
  Results = (void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v166);
  uint64_t v22 = v21;
  mlir::Block::getTerminator((ZinIrHalH13g **)isPublic);
  if ((*(unsigned char *)(v23 + 46) & 0x80) != 0)
  {
    if (v22)
    {
      uint64_t v24 = *(unsigned int *)(v23 + 68);
      if (v24)
      {
        uint64_t v25 = *(void *)(v23 + 72) + 24;
        uint64_t v26 = v24 - 1;
        uint64_t v27 = 8 * v22 - 8;
        do
        {
          unint64_t v28 = *(void *)(*(void *)v25 + 8) & 0xFFFFFFFFFFFFFFF8;
          *(void *)&long long v166 = *(void *)v25;
          *((void *)&v166 + 1) = v28;
          v167[0] = *Results;
          if (v169 >= HIDWORD(v169))
          {
          }
          else
          {
            BOOL v29 = (char *)v168 + 24 * v169;
            *(_OWORD *)BOOL v29 = v166;
            *((void *)v29 + 2) = v167[0];
            LODWORD(v169) = v169 + 1;
          }
          BOOL v30 = v26-- != 0;
          char v31 = v30;
          if (!v27) {
            break;
          }
          ++Results;
          v25 += 32;
          v27 -= 8;
        }
        while ((v31 & 1) != 0);
      }
    }
  }
  if (!(_BYTE)v32)
  {
    unint64_t v35 = (llvm::raw_ostream *)llvm::errs(v32);
    uint64_t v36 = (void *)*((void *)v35 + 4);
    if (*((void *)v35 + 3) - (void)v36 > 0x1DuLL)
    {
      uint64_t v34 = 0;
      qmemcpy(v36, "checkAndCollectANEArgs failed\n", 30);
      *((void *)v35 + 4) += 30;
    }
    else
    {
      llvm::raw_ostream::write(v35, "checkAndCollectANEArgs failed\n", 0x1EuLL);
      uint64_t v34 = 0;
    }
    goto LABEL_141;
  }
  if (!(_BYTE)v33)
  {
    size_t v37 = (llvm::raw_ostream *)llvm::errs(v33);
    uint64_t v38 = (void *)*((void *)v37 + 4);
    if (*((void *)v37 + 3) - (void)v38 > 0x20uLL)
    {
      uint64_t v34 = 0;
      qmemcpy(v38, "checkAndCollectANEResults failed\n", 33);
      *((void *)v37 + 4) += 33;
    }
    else
    {
      llvm::raw_ostream::write(v37, "checkAndCollectANEResults failed\n", 0x21uLL);
      uint64_t v34 = 0;
    }
    goto LABEL_141;
  }
  if (!(v172 | v169))
  {
    uint64_t v34 = mlir::minimalLegalize((uint64_t)v154[0], a3, a4, (uint64_t *)a6);
    goto LABEL_141;
  }
  if (!v172)
  {
LABEL_63:
    *(void *)&long long v166 = v167;
    *((void *)&v166 + 1) = 0x400000000;
    uint64_t v62 = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
    uint64_t v63 = *(void *)(v62 + 48);
    uint64_t v64 = *(void *)(v62 + 56) - v63;
    if (v64)
    {
      uint64_t v65 = v64 >> 3;
      unsigned int v66 = DWORD2(v166);
      uint64_t v67 = 8 * v65;
      do
      {
        uint64_t v68 = *(void *)&v171[24 * *(unsigned int *)(*(void *)v63 + 24) + 8];
        if (v66 >= HIDWORD(v166))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166, v167, v66 + 1, 8);
          unsigned int v66 = DWORD2(v166);
        }
        *(void *)(v166 + 8 * v66) = v68;
        unsigned int v66 = ++DWORD2(v166);
        v63 += 8;
        v67 -= 8;
      }
      while (v67);
    }
    uint64_t v163 = v165;
    uint64_t v164 = 0x400000000;
    uint64_t v69 = (ZinIrHalH13g **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
    mlir::Block::getTerminator(v69);
    if ((*(unsigned char *)(v70 + 46) & 0x80) != 0)
    {
      uint64_t v71 = *(unsigned int *)(v70 + 68);
      if (v71)
      {
        uint64_t v72 = 0;
        unsigned int v73 = v164;
        uint64_t v74 = 24 * v71;
        do
        {
          uint64_t v75 = *(void *)((char *)v168 + v72 + 8);
          if (v73 >= HIDWORD(v164))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, v165, v73 + 1, 8);
            unsigned int v73 = v164;
          }
          *((void *)v163 + v73) = v75;
          unsigned int v73 = v164 + 1;
          LODWORD(v164) = v164 + 1;
          v72 += 24;
        }
        while (v74 != v72);
      }
    }
    uint64_t v160 = v162;
    uint64_t v161 = 0x400000000;
    uint64_t v149 = (ZinIrHalH13g **)(a3 + 8 * a4);
    if (!a4)
    {
LABEL_99:
      if (v169)
      {
        unint64_t v147 = 0;
        uint64_t v96 = (char *)v168;
        uint64_t v139 = (char *)v168 + 24 * v169;
        do
        {
          if (*((void *)v96 + 1) != *((void *)v96 + 2) && a4 != 0)
          {
            uint64_t v98 = *(void *)(a2 + 16);
            uint64_t v140 = *(void *)(a2 + 24);
            for (uint64_t i = (ZinIrHalH13g **)a3; i != v149; ++i)
            {
              if (v147 >= 6) {
                uint64_t v100 = (uint64_t)*i - 24 * (v147 - 5) - 96;
              }
              else {
                uint64_t v100 = (uint64_t)*i + 16 * ~v147;
              }
              v152[0] = v100;
              uint64_t v157 = 0;
              int v101 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v152, &v157);
              unint64_t v102 = 0;
              if (v101 && v157 != (void *)(*(void *)a6 + 16 * *(unsigned int *)(a6 + 16))) {
                unint64_t v102 = (void *)*((void *)v157 + 1);
              }
              v151[0] = (uint64_t)v102;
              uint64_t v157 = v102;
              uint64_t DefiningOp = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v157);
              if (DefiningOp)
              {
                uint64_t v104 = *((void *)DefiningOp + 2);
                ZinIrHalH13g::~ZinIrHalH13g(DefiningOp);
                __int16 v106 = (uint64_t *)(v105 + 8);
              }
              else
              {
                uint64_t v104 = *((void *)v157 + 2);
                __int16 v106 = (uint64_t *)(v104 + 40);
              }
              uint64_t v107 = *v106;
              *(void *)(a2 + 16) = v104;
              *(void *)(a2 + 24) = v107;
              uint64_t Loc = mlir::Value::getLoc((mlir::Value *)v151);
              uint64_t v109 = v151[0];
              uint64_t v110 = (uint64_t *)*((void *)v96 + 2);
              if (!v110) {
                goto LABEL_127;
              }
              uint64_t v111 = *v110;
              unint64_t v112 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v113 = *(unsigned int *)(v111 + 16);
              if (!v113) {
                goto LABEL_127;
              }
              uint64_t v114 = *(void **)(v111 + 8);
              long long v115 = &v114[2 * v113];
              do
              {
                unint64_t v116 = v113 >> 1;
                BOOL v117 = &v114[2 * (v113 >> 1)];
                unint64_t v119 = *v117;
                uint64_t v118 = v117 + 2;
                v113 += ~(v113 >> 1);
                if (v119 < v112) {
                  uint64_t v114 = v118;
                }
                else {
                  unint64_t v113 = v116;
                }
              }
              while (v113);
              if (v114 != v115 && *v114 == v112) {
                uint64_t v120 = v114[1];
              }
              else {
LABEL_127:
              }
                uint64_t v120 = 0;
              char v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a5 + 24))(a5, a2, Loc, v109, v110, v120, a6);
              if (v121)
              {
                uint64_t v122 = v151[0];
                v152[0] = v151[0];
                uint64_t v157 = 0;
                if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v152, &v157)&& v157 != (void *)(*(void *)a6 + 16 * *(unsigned int *)(a6 + 16)))
                {
                  uint64_t v122 = *((void *)v157 + 1);
                }
                v152[0] = v100;
                uint64_t v157 = 0;
                char v123 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v152, &v157);
                unint64_t v124 = v157;
                if ((v123 & 1) == 0)
                {
                  unint64_t v124 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a6, (uint64_t)v152, (unint64_t *)v152, v157);
                  *unint64_t v124 = v152[0];
                  v124[1] = 0;
                }
                v124[1] = v122;
              }
              if (v98)
              {
                *(void *)(a2 + 16) = v98;
                *(void *)(a2 + 24) = v140;
                if (!v121)
                {
LABEL_139:
                  uint64_t v34 = 0;
                  goto LABEL_156;
                }
              }
              else
              {
                uint64_t v140 = 0;
                *(void *)(a2 + 16) = 0;
                *(void *)(a2 + 24) = 0;
                if (!v121) {
                  goto LABEL_139;
                }
              }
            }
          }
          ++v147;
          v96 += 24;
        }
        while (v96 != v139);
      }
      uint64_t v126 = (ZinIrHalH13g **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
      mlir::Block::getTerminator(v126);
      if ((*(unsigned char *)(v127 + 46) & 0x80) != 0)
      {
        uint64_t v128 = *(unsigned int *)(v127 + 68);
        if (v128 && v164 != 0)
        {
          uint64_t v130 = (uint64_t *)v163;
          uint64_t v131 = (uint64_t *)(*(void *)(v127 + 72) + 24);
          uint64_t v132 = v128 - 1;
          uint64_t v133 = 8 * v164 - 8;
          do
          {
            uint64_t v135 = *v131;
            v131 += 4;
            uint64_t v134 = v135;
            uint64_t v136 = *v130++;
            *(void *)(v134 + 8) = *(void *)(v134 + 8) & 7 | v136;
            BOOL v30 = v132-- != 0;
            if (!v30) {
              break;
            }
            uint64_t v137 = v133;
            v133 -= 8;
          }
          while (v137);
        }
      }
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::SymbolRefAttr *)((char *)v154[0] + 24));
      mlir::ValueRange::ValueRange(v156, v166, DWORD2(v166));
      mlir::ValueRange::ValueRange(v155, (uint64_t)v163, v164);
      uint64_t v34 = mlir::FunctionType::get(Context, v156[0], v156[1], v155[0], v155[1]);
LABEL_156:
      if (v160 != v162) {
        free(v160);
      }
      if (v163 != v165) {
        free(v163);
      }
      if ((void *)v166 != v167) {
        free((void *)v166);
      }
      goto LABEL_141;
    }
    uint64_t v76 = *(void *)(a2 + 16);
    uint64_t v143 = v76;
    uint64_t v146 = *(void *)(a2 + 24);
    unint64_t v77 = (ZinIrHalH13g **)a3;
    while (1)
    {
      unint64_t v78 = *v77;
      uint64_t v79 = *((void *)*v77 + 2);
      ZinIrHalH13g::~ZinIrHalH13g(*v77);
      *(void *)(a2 + 16) = v79;
      *(void *)(a2 + 24) = v81;
      if ((*((unsigned char *)v78 + 46) & 0x80) != 0)
      {
        uint64_t v82 = *((void *)v78 + 9);
        unint64_t v83 = *((unsigned int *)v78 + 17);
        int v84 = v83;
        uint64_t v157 = v159;
        uint64_t v158 = 0x400000000;
        if (v83 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v157, v159, v83, 8);
          uint64_t v85 = v158;
          goto LABEL_83;
        }
        if (v83)
        {
          uint64_t v85 = 0;
LABEL_83:
          uint64_t v86 = (uint64_t *)((char *)v157 + 8 * v85);
          unint64_t v87 = (uint64_t *)(v82 + 24);
          do
          {
            uint64_t v88 = *v87;
            v151[0] = *v87;
            v152[0] = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v151, v152)&& v152[0] != *(void *)a6 + 16 * *(unsigned int *)(a6 + 16))
            {
              uint64_t v88 = *(void *)(v152[0] + 8);
            }
            *v86++ = v88;
            v87 += 4;
            --v83;
          }
          while (v83);
          int v89 = v158;
          uint64_t v76 = v143;
          goto LABEL_89;
        }
        int v89 = 0;
      }
      else
      {
        int v84 = 0;
        int v89 = 0;
        uint64_t v157 = v159;
        HIDWORD(v158) = 4;
      }
LABEL_89:
      LODWORD(v158) = v89 + v84;
      uint64_t v90 = *((void *)v78 + 3);
      v152[0] = mlir::SymbolRefAttr::get(v154[0], v80);
      v151[0] = mlir::placement::RegionTypeAttr::get(*(mlir::MLIRContext **)a2, 1u);
      unint64_t v91 = mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::SmallVector<mlir::Type,4u> &,mlir::FlatSymbolRefAttr,mlir::placement::RegionTypeAttr,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)a2, v90, (uint64_t)&v163, v152, v151, (uint64_t)&v157);
      uint64_t v153 = v91;
      uint64_t v92 = v161;
      if (v161 >= (unint64_t)HIDWORD(v161))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160, v162, v161 + 1, 8);
        uint64_t v92 = v161;
      }
      *((void *)v160 + v92) = v91;
      LODWORD(v161) = v161 + 1;
      uint64_t v93 = *((unsigned int *)v78 + 9);
      uint64_t v94 = (uint64_t)v78 - 16;
      if (!v93) {
        uint64_t v94 = 0;
      }
      v152[0] = v94;
      v152[1] = v93;
      v151[0] = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v153);
      v151[1] = v95;
      mlir::IRMapping::map<mlir::ResultRange,mlir::ResultRange,(void *)0>(a6, v152, v151);
      if (v157 != v159) {
        free(v157);
      }
      if (v76)
      {
        *(void *)(a2 + 16) = v76;
        *(void *)(a2 + 24) = v146;
      }
      else
      {
        uint64_t v146 = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
      }
      if (++v77 == v149) {
        goto LABEL_99;
      }
    }
  }
  uint64_t v39 = 0;
  uint64_t v40 = v171;
  uint64_t v141 = &v171[24 * v172];
  uint64_t v142 = (void *)(a2 + 16);
  while (*((void *)v40 + 1) == *((void *)v40 + 2) || a4 == 0)
  {
LABEL_34:
    ++v39;
    v40 += 24;
    if (v40 == v141) {
      goto LABEL_63;
    }
  }
  uint64_t v42 = *(void *)(a2 + 16);
  uint64_t v148 = *(void *)(a2 + 24);
  uint64_t v43 = a3;
  while (1)
  {
    uint64_t v163 = *(void **)(*(void *)(*(void *)v43 + 72) + 32 * v39 + 24);
    *(void *)&long long v166 = v163;
    long long v44 = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v166);
    if (v44)
    {
      uint64_t v45 = *((void *)v44 + 2);
      ZinIrHalH13g::~ZinIrHalH13g(v44);
      uint64_t v47 = (uint64_t *)(v46 + 8);
    }
    else
    {
      uint64_t v45 = *(void *)(v166 + 16);
      uint64_t v47 = (uint64_t *)(v45 + 40);
    }
    uint64_t v48 = *v47;
    *(void *)(a2 + 16) = v45;
    *(void *)(a2 + 24) = v48;
    uint64_t v49 = mlir::Value::getLoc((mlir::Value *)&v163);
    uint64_t v50 = v163;
    uint64_t v51 = (uint64_t *)*((void *)v40 + 1);
    if (!v51) {
      goto LABEL_54;
    }
    uint64_t v52 = *v51;
    unint64_t v53 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v54 = *(unsigned int *)(v52 + 16);
    if (!v54) {
      goto LABEL_54;
    }
    uint64_t v55 = *(void **)(v52 + 8);
    uint64_t v56 = &v55[2 * v54];
    do
    {
      unint64_t v57 = v54 >> 1;
      uint64_t v58 = &v55[2 * (v54 >> 1)];
      unint64_t v60 = *v58;
      uint64_t v59 = v58 + 2;
      v54 += ~(v54 >> 1);
      if (v60 < v53) {
        uint64_t v55 = v59;
      }
      else {
        unint64_t v54 = v57;
      }
    }
    while (v54);
    if (v55 != v56 && *v55 == v53) {
      uint64_t v61 = v55[1];
    }
    else {
LABEL_54:
    }
      uint64_t v61 = 0;
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *, uint64_t, uint64_t))(*(void *)a5 + 24))(a5, a2, v49, v50, v51, v61, a6))break; {
    if (v42)
    }
    {
      *(void *)(a2 + 16) = v42;
      *(void *)(a2 + 24) = v148;
    }
    else
    {
      uint64_t v148 = 0;
      *uint64_t v142 = 0;
      *(void *)(a2 + 24) = 0;
    }
    v43 += 8;
    if (v43 == a3 + 8 * a4) {
      goto LABEL_34;
    }
  }
  uint64_t v34 = 0;
  if (v42)
  {
    *(void *)(a2 + 16) = v42;
    *(void *)(a2 + 24) = v148;
  }
  else
  {
    *uint64_t v142 = 0;
    *(void *)(a2 + 24) = 0;
  }
LABEL_141:
  if (v168 != v170) {
    free(v168);
  }
  if (v171 != (char *)v173) {
    free(v171);
  }
  return v34;
}

void *mlir::anonymous namespace'::makeCanonicalMemRefType(void *a1)
{
  v51[4] = *MEMORY[0x263EF8340];
  uint64_t v43 = a1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
  if (!v1) {
    return v43;
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
  unint64_t v3 = v2;
  uint64_t v45 = v48;
  int v47 = 4;
  if (v2 >= 5)
  {
    unsigned int v46 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v2, 8);
    uint64_t v4 = v45;
    size_t v5 = 8 * v3;
LABEL_7:
    memset_pattern16(v4, &unk_211ED5510, v5);
    goto LABEL_8;
  }
  if (v2)
  {
    size_t v5 = 8 * v2;
    uint64_t v4 = v48;
    goto LABEL_7;
  }
LABEL_8:
  unsigned int v46 = v3;
  RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v43);
  unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  *((void *)v45 + v46 - 1) = 0x40 / (IntOrFloatBitWidth >> 3);
  uint64_t v8 = v43;
  if (!v43) {
    goto LABEL_17;
  }
  uint64_t v9 = *v43;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_17:
  }
    uint64_t v18 = 0;
  uint64_t v19 = (char *)v45;
  uint64_t v20 = v46;
  v44[0] = v8;
  v44[1] = v18;
  RHS = v51;
  v51[0] = 1;
  uint64_t v50 = 0x400000001;
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v44);
  LODWORD(v22) = v50;
  uint64_t v24 = v23 - 1;
  if (v23 != 1)
  {
    uint64_t v38 = Shape;
    uint64_t v39 = &v19[8 * v20 - 8];
    do
    {
      uint64_t v22 = v22;
      uint64_t v41 = *(void *)v39;
      v39 -= 8;
      uint64_t v40 = v41;
      if (v41) {
        uint64_t v42 = (v40 + *((void *)RHS + v22 - 1) * *(void *)(v38 + 8 * v24) - 1) / v40 * v40;
      }
      else {
        uint64_t v42 = 0;
      }
      if (v22 >= HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&RHS, v51, v22 + 1, 8);
        uint64_t v22 = v50;
      }
      *((void *)RHS + v22) = v42;
      LODWORD(v22) = v50 + 1;
      LODWORD(v50) = v50 + 1;
      --v24;
    }
    while (v24);
  }
  uint64_t v25 = RHS;
  uint64_t v26 = v22;
  if (v22)
  {
    uint64_t v27 = (char *)RHS + 8 * v22 - 8;
    if (v27 > RHS)
    {
      unint64_t v28 = (char *)RHS + 8;
      do
      {
        uint64_t v29 = *((void *)v28 - 1);
        *((void *)v28 - 1) = *(void *)v27;
        *(void *)uint64_t v27 = v29;
        v27 -= 8;
        BOOL v30 = v28 >= v27;
        v28 += 8;
      }
      while (!v30);
    }
  }
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v44);
  unint64_t StridedLinearLayoutMap = mlir::makeStridedLinearLayoutMap((uint64_t)v25, v26, 0, Context);
  uint64_t v33 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v44);
  unint64_t v35 = v34;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v44);
  uint64_t v6 = mlir::MemRefType::get(v33, v35, OperandRange, StridedLinearLayoutMap, 0);
  if (RHS != v51) {
    free(RHS);
  }
  if (v45 != v48) {
    free(v45);
  }
  return (void *)v6;
}

uint64_t mlir::anonymous namespace'::checkStrideAndInterleave(uint64_t a1, uint64_t a2)
{
  v49[4] = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  uint64_t v38 = a2;
  int v47 = (char *)v49;
  uint64_t v48 = 0x400000000;
  if (!mlir::getStridesAndOffset(a2, (uint64_t)&v47, &v37))
  {
    unint64_t v3 = "Unable to get strides for type: ";
    goto LABEL_5;
  }
  if (v37)
  {
    unint64_t v3 = "Invalid offset for type: ";
    goto LABEL_5;
  }
  uint64_t v6 = &v47[8 * v48];
  if (v48 >= 2)
  {
    uint64_t v9 = v47 + 8;
    uint64_t v8 = *(void *)v47;
    uint64_t v10 = 8 * v48 - 8;
    uint64_t v7 = v47;
    unint64_t v11 = v47 + 8;
    do
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      uint64_t v12 = v13;
      if (v13 < v8)
      {
        uint64_t v8 = v12;
        uint64_t v7 = v9;
      }
      uint64_t v9 = v11;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    uint64_t v7 = v47;
  }
  BOOL v15 = v48 < 3 || v7 - v47 != 8;
  uint64_t v16 = v7 + 8;
  if (v7 + 8 != v6)
  {
    unint64_t v17 = v7 + 8;
    while (*(void *)v7 < *v17)
    {
      if (++v17 == (void *)v6) {
        goto LABEL_27;
      }
    }
    goto LABEL_35;
  }
LABEL_27:
  if (!v15 && *(void *)v7 == 1)
  {
    uint64_t v18 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    uint64_t v19 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    uint64_t v20 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    uint64_t v21 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38);
    uint64_t v4 = 1;
    if (v18 == 1 || v19 == 2 || v20 == 3 || v21 == 4 || *(void *)(Value + 8) == 8) {
      goto LABEL_8;
    }
    unint64_t v3 = "Disallowed interleave size, cannot legalize argument of type: ";
LABEL_5:
    v35[0] = (void **)v3;
    __int16 v36 = 259;
    mlir::Operation::emitOpError(a1, v35, (uint64_t)&v41);
    mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v41, &v38);
    if (v41) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
    }
LABEL_7:
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
    uint64_t v4 = 0;
    goto LABEL_8;
  }
LABEL_35:
  if (v16 != v6)
  {
    while (*(void *)v7 == *(void *)v16)
    {
      v16 += 8;
      if (v16 == v6) {
        goto LABEL_38;
      }
    }
    v35[0] = (void **)"Smallest stride was: ";
    __int16 v36 = 259;
    mlir::Operation::emitOpError(a1, v35, (uint64_t)&v41);
    if (v41)
    {
      int v39 = 2;
      uint64_t v40 = (v7 - v47) >> 3;
      uint64_t v23 = &v39;
      unint64_t v24 = v43;
      if (v44 >= v45)
      {
        unint64_t v31 = v44 + 1;
        if (v43 <= (unint64_t)&v39 && v43 + 24 * v44 > (unint64_t)&v39)
        {
          uint64_t v33 = (char *)&v39 - v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
          unint64_t v24 = v43;
          uint64_t v23 = (int *)&v33[v43];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
          uint64_t v23 = &v39;
          unint64_t v24 = v43;
        }
      }
      unint64_t v25 = v24 + 24 * v44;
      long long v26 = *(_OWORD *)v23;
      *(void *)(v25 + 16) = *((void *)v23 + 2);
      *(_OWORD *)unint64_t v25 = v26;
      ++v44;
      if (v41)
      {
        mlir::Diagnostic::operator<<((uint64_t)v42, " expected ");
        if (v41)
        {
          int v39 = 5;
          uint64_t v40 = v48 - 1;
          uint64_t v27 = &v39;
          unint64_t v28 = v43;
          if (v44 >= v45)
          {
            unint64_t v32 = v44 + 1;
            if (v43 <= (unint64_t)&v39 && v43 + 24 * v44 > (unint64_t)&v39)
            {
              uint64_t v34 = (char *)&v39 - v43;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              unint64_t v28 = v43;
              uint64_t v27 = (int *)&v34[v43];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              uint64_t v27 = &v39;
              unint64_t v28 = v43;
            }
          }
          unint64_t v29 = v28 + 24 * v44;
          long long v30 = *(_OWORD *)v27;
          *(void *)(v29 + 16) = *((void *)v27 + 2);
          *(_OWORD *)unint64_t v29 = v30;
          ++v44;
          if (v41) {
            mlir::Diagnostic::operator<<((uint64_t)v42, " for type ");
          }
        }
      }
    }
    mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v41, &v38);
    if (v41) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
    }
    goto LABEL_7;
  }
LABEL_38:
  uint64_t v4 = 1;
LABEL_8:
  if (v47 != (char *)v49) {
    free(v47);
  }
  return v4;
}

BOOL mlir::anonymous namespace'::isRowAligned(uint64_t a1, uint64_t a2)
{
  v26[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v21 = a2;
  unint64_t v24 = (char *)v26;
  uint64_t v25 = 0x400000000;
  if (mlir::getStridesAndOffset(a2, (uint64_t)&v24, &v20))
  {
    unint64_t v3 = v24;
    unint64_t v4 = v25;
    if (v25 > 1)
    {
      uint64_t v7 = *(void *)v24;
      uint64_t v8 = 8;
      uint64_t v9 = v24;
      do
      {
        if (*(void *)&v24[v8] < v7)
        {
          uint64_t v7 = *(void *)&v24[v8];
          uint64_t v9 = &v24[v8];
        }
        v8 += 8;
      }
      while (8 * v25 != v8);
      uint64_t v10 = 1;
      if (v25 != 2) {
        uint64_t v10 = 2;
      }
      if (v9 - v24 == 8) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = 1;
      }
      if (v25 >= 0x81)
      {
        unint64_t v11 = (const std::nothrow_t *)MEMORY[0x263F8C180];
        unint64_t v12 = v25;
        while (1)
        {
          uint64_t v13 = (char *)operator new(8 * v12, v11);
          if (v13) {
            break;
          }
          BOOL v14 = v12 > 1;
          v12 >>= 1;
          if (!v14) {
            goto LABEL_20;
          }
        }
        unint64_t v17 = v13;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v3, &v3[8 * v4], (uint64_t)&RHS, v4, v13, v12);
        operator delete(v17);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v5 = 1;
    }
LABEL_20:
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v3, &v3[8 * v4], (uint64_t)&RHS, v4, 0, 0);
LABEL_21:
    uint64_t v15 = *(void *)&v24[8 * v5];
    uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v21);
    BOOL v6 = ((v15 * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS) >> 3)) & 0x3FLL) == 0;
    goto LABEL_22;
  }
  uint64_t v18 = (void **)"Unable to get strides for type: ";
  __int16 v19 = 259;
  mlir::Operation::emitOpError(a1, &v18, (uint64_t)&RHS);
  mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&RHS, &v21);
  if (RHS) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RHS);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v23);
  BOOL v6 = 0;
LABEL_22:
  if (v24 != (char *)v26) {
    free(v24);
  }
  return v6;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = a1;
    if (a4 == 2)
    {
      uint64_t v8 = *((void *)a2 - 1);
      uint64_t v9 = *(void *)a1;
      if (v8 < *(void *)a1)
      {
        *(void *)a1 = v8;
        *((void *)a2 - 1) = v9;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      unint64_t v21 = a4 >> 1;
      uint64_t v22 = &a1[8 * (a4 >> 1)];
      unint64_t v23 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(a1, v22, a3, v23, a5);
        uint64_t v25 = &a5[8 * v21];
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(&v7[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v25).n128_u64[0];
        long long v26 = v7;
        uint64_t v27 = v25;
        unint64_t v28 = a5;
        unint64_t v29 = &a5[8 * a4];
        do
        {
          if (v27 == v29)
          {
            if (v28 == v25) {
              return result;
            }
            unint64_t v48 = &a5[8 * v21] - v28 - 8;
            if (v48 >= 0x38 && (unint64_t)(v26 - v28) >= 0x20)
            {
              uint64_t v52 = 0;
              uint64_t v53 = (v48 >> 3) + 1;
              uint64_t v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v49 = &v7[v54];
              uint64_t v50 = &v28[v54];
              uint64_t v55 = v53 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v56 = &v7[v52];
                __n128 result = *(__n128 *)&v28[v52];
                long long v57 = *(_OWORD *)&v28[v52 + 16];
                *(__n128 *)uint64_t v56 = result;
                *((_OWORD *)v56 + 1) = v57;
                v52 += 32;
                v55 -= 4;
              }
              while (v55);
              if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
            }
            else
            {
              uint64_t v49 = v7;
              uint64_t v50 = v28;
            }
            do
            {
              uint64_t v51 = *(void *)v50;
              v50 += 8;
              *(void *)uint64_t v49 = v51;
              v49 += 8;
            }
            while (v50 != v25);
            return result;
          }
          long long v30 = v27;
          uint64_t v31 = *(void *)v27;
          uint64_t v32 = *(void *)v28;
          BOOL v33 = *(void *)v27 < *(void *)v28;
          unsigned int v34 = !v33;
          if (v33) {
            uint64_t v35 = *(void *)v27;
          }
          else {
            uint64_t v35 = *(void *)v28;
          }
          v28 += 8 * v34;
          v27 += 8 * v33;
          *(void *)uint64_t v7 = v35;
          v7 += 8;
          v26 += 8;
        }
        while (v28 != v25);
        if (v27 != v29)
        {
          uint64_t v36 = -8;
          if (v31 >= v32) {
            uint64_t v36 = 0;
          }
          unint64_t v37 = &a5[8 * a4] - v30 + v36 - 8;
          if (v37 < 0x78 || (unint64_t)(v26 - &v30[8 * (v31 < v32)]) < 0x20) {
            goto LABEL_54;
          }
          uint64_t v38 = 0;
          uint64_t v39 = (v37 >> 3) + 1;
          BOOL v33 = v31 < v32;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v41 = &v7[v40];
          v27 += v40;
          char v42 = v33 ? 1 : 2;
          unint64_t v43 = &v30[8 * (v42 & 1)];
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            unsigned int v45 = &v7[v38];
            __n128 result = *(__n128 *)&v43[v38];
            long long v46 = *(_OWORD *)&v43[v38 + 16];
            *(__n128 *)unsigned int v45 = result;
            *((_OWORD *)v45 + 1) = v46;
            v38 += 32;
            v44 -= 4;
          }
          while (v44);
          uint64_t v7 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_54:
            do
            {
              uint64_t v47 = *(void *)v27;
              v27 += 8;
              *(void *)uint64_t v7 = v47;
              v7 += 8;
            }
            while (v27 != v29);
          }
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(a1, v22, a3, v23, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(&v7[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v7, &v7[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else if (a1 != a2)
    {
      unint64_t v11 = a1 + 8;
      if (a1 + 8 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a1;
        do
        {
          uint64_t v16 = *(void *)v13;
          uint64_t v15 = *((void *)v13 + 1);
          uint64_t v13 = v11;
          if (v15 < v16)
          {
            uint64_t v17 = v12;
            do
            {
              *(void *)&a1[v17 + 8] = v16;
              if (!v17)
              {
                BOOL v14 = a1;
                goto LABEL_10;
              }
              uint64_t v16 = *(void *)&a1[v17 - 8];
              v17 -= 8;
            }
            while (v15 < v16);
            BOOL v14 = &a1[v17 + 8];
LABEL_10:
            *(void *)BOOL v14 = v15;
          }
          unint64_t v11 = v13 + 8;
          v12 += 8;
        }
        while (v13 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v7 = a1;
    if (a4 == 1)
    {
LABEL_8:
      *(void *)uint64_t v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v9 = *((void *)a2 - 1);
      BOOL v10 = v9 < *(void *)a1;
      if (v9 >= *(void *)a1) {
        uint64_t v9 = *(void *)a1;
      }
      *(void *)a5 = v9;
      uint64_t v5 = a5 + 8;
      if (!v10) {
        uint64_t v7 = a2 - 8;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v21 = a4 >> 1;
      uint64_t v22 = 8 * (a4 >> 1);
      unint64_t v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(a1, &a1[v22], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(&v7[v22], a2, a3, a4 - v21, &v5[v22], a4 - v21);
      uint64_t v25 = v5;
      long long v26 = v7;
      uint64_t v27 = &v7[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23) {
            return result;
          }
          unint64_t v46 = &v7[8 * v21] - v26 - 8;
          if (v46 >= 0x38 && (unint64_t)(v25 - v26) >= 0x20)
          {
            uint64_t v50 = 0;
            uint64_t v51 = (v46 >> 3) + 1;
            uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v47 = &v5[v52];
            unint64_t v48 = &v26[v52];
            uint64_t v53 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v54 = &v5[v50];
              __n128 result = *(__n128 *)&v26[v50];
              long long v55 = *(_OWORD *)&v26[v50 + 16];
              *(__n128 *)uint64_t v54 = result;
              *((_OWORD *)v54 + 1) = v55;
              v50 += 32;
              v53 -= 4;
            }
            while (v53);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            uint64_t v47 = v5;
            unint64_t v48 = v26;
          }
          do
          {
            uint64_t v49 = *(void *)v48;
            v48 += 8;
            *(void *)uint64_t v47 = v49;
            v47 += 8;
          }
          while (v48 != v23);
          return result;
        }
        unint64_t v28 = v27;
        uint64_t v29 = *(void *)v27;
        uint64_t v30 = *(void *)v26;
        BOOL v31 = *(void *)v27 < *(void *)v26;
        BOOL v32 = *(void *)v27 >= *(void *)v26;
        if (v31) {
          uint64_t v33 = *(void *)v27;
        }
        else {
          uint64_t v33 = *(void *)v26;
        }
        v27 += 8 * v31;
        v26 += 8 * v32;
        *(void *)uint64_t v5 = v33;
        v5 += 8;
        v25 += 8;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        uint64_t v34 = -8;
        if (v29 >= v30) {
          uint64_t v34 = 0;
        }
        unint64_t v35 = a2 - v28 + v34 - 8;
        if (v35 < 0x68) {
          goto LABEL_50;
        }
        if ((unint64_t)(v25 - &v28[8 * (v29 < v30)]) < 0x20) {
          goto LABEL_50;
        }
        uint64_t v36 = 0;
        uint64_t v37 = (v35 >> 3) + 1;
        BOOL v38 = v29 < v30;
        uint64_t v39 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v40 = &v5[v39];
        v27 += v39;
        uint64_t v41 = &v28[8 * v38];
        uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v43 = &v5[v36];
          __n128 result = *(__n128 *)&v41[v36];
          long long v44 = *(_OWORD *)&v41[v36 + 16];
          *(__n128 *)unint64_t v43 = result;
          *((_OWORD *)v43 + 1) = v44;
          v36 += 32;
          v42 -= 4;
        }
        while (v42);
        uint64_t v5 = v40;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_50:
          do
          {
            uint64_t v45 = *(void *)v27;
            v27 += 8;
            *(void *)uint64_t v5 = v45;
            v5 += 8;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      unint64_t v11 = a1 + 8;
      *(void *)a5 = *(void *)a1;
      if (a1 + 8 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a5;
        BOOL v14 = (uint64_t *)a5;
        do
        {
          uint64_t v16 = *v14++;
          uint64_t v15 = v16;
          if (*(void *)v11 >= v16)
          {
            uint64_t *v14 = *(void *)v11;
          }
          else
          {
            *((void *)v13 + 1) = v15;
            uint64_t v17 = a5;
            if (v13 != a5)
            {
              uint64_t v18 = v12;
              while (1)
              {
                uint64_t v17 = &a5[v18];
                uint64_t v19 = *(void *)&a5[v18 - 8];
                if (*(void *)v11 >= v19) {
                  break;
                }
                *(void *)uint64_t v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  uint64_t v17 = a5;
                  break;
                }
              }
            }
            *(void *)uint64_t v17 = *(void *)v11;
          }
          v11 += 8;
          v12 += 8;
          uint64_t v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    uint64_t v12 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v13 = *(void *)a2;
      while (1)
      {
        uint64_t v14 = *(void *)v12;
        if (v13 < *(void *)v12) {
          break;
        }
        v12 += 8;
        if (!--a5) {
          return result;
        }
      }
      uint64_t v70 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          *(void *)uint64_t v12 = v13;
          *(void *)a2 = v14;
          return result;
        }
        if (a5 >= 0) {
          uint64_t v25 = a5;
        }
        else {
          uint64_t v25 = a5 + 1;
        }
        uint64_t v24 = v25 >> 1;
        uint64_t v18 = &v12[8 * (v25 >> 1)];
        uint64_t v17 = a3;
        if (a3 != a2)
        {
          unint64_t v26 = (a3 - a2) >> 3;
          uint64_t v17 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            unint64_t v28 = &v17[8 * (v26 >> 1)];
            uint64_t v30 = *(void *)v28;
            uint64_t v29 = v28 + 8;
            v26 += ~(v26 >> 1);
            if (v30 < *(void *)v18) {
              uint64_t v17 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
        }
        uint64_t v16 = (v17 - a2) >> 3;
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v15 = v10;
        }
        else {
          uint64_t v15 = v10 + 1;
        }
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = &a2[8 * (v15 >> 1)];
        uint64_t v18 = a2;
        if (v12 != a2)
        {
          unint64_t v19 = (a2 - v12) >> 3;
          uint64_t v18 = v12;
          do
          {
            unint64_t v20 = v19 >> 1;
            unint64_t v21 = &v18[8 * (v19 >> 1)];
            uint64_t v23 = *(void *)v21;
            uint64_t v22 = v21 + 8;
            v19 += ~(v19 >> 1);
            if (*(void *)v17 < v23) {
              unint64_t v19 = v20;
            }
            else {
              uint64_t v18 = v22;
            }
          }
          while (v19);
        }
        uint64_t v24 = (v18 - v12) >> 3;
      }
      a5 -= v24;
      v10 -= v16;
      BOOL v31 = std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,unsigned long long *,unsigned long long *>(v18, a2, v17);
      BOOL v32 = v31;
      if (v24 + v16 >= a5 + v10)
      {
        __n128 result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v31, v17, v70, a4, a5, v10, a7, a8);
        uint64_t v10 = v16;
        a5 = v24;
        a3 = v32;
        a2 = v18;
        if (!v16) {
          return result;
        }
      }
      else
      {
        __n128 result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v12, v18, v31, a4, v24, v16, a7, a8);
        uint64_t v12 = v32;
        a3 = v70;
        a2 = v17;
        if (!v10) {
          return result;
        }
      }
    }
    if (a5 <= v10)
    {
      if (v12 != a2)
      {
        unint64_t v47 = a2 - v12 - 8;
        unint64_t v48 = a7;
        uint64_t v49 = v12;
        if (v47 < 0x18) {
          goto LABEL_83;
        }
        unint64_t v48 = a7;
        uint64_t v49 = v12;
        if ((unint64_t)(a7 - v12) < 0x20) {
          goto LABEL_83;
        }
        uint64_t v50 = (v47 >> 3) + 1;
        uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v48 = &a7[v51];
        uint64_t v49 = &v12[v51];
        uint64_t v52 = (long long *)(v12 + 16);
        uint64_t v53 = a7 + 16;
        uint64_t v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v55 = *v52;
          *(v53 - 1) = *(v52 - 1);
          *uint64_t v53 = v55;
          v52 += 2;
          v53 += 2;
          v54 -= 4;
        }
        while (v54);
        if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_83:
          do
          {
            uint64_t v56 = *(void *)v49;
            v49 += 8;
            *(void *)unint64_t v48 = v56;
            v48 += 8;
          }
          while (v49 != a2);
        }
        if (v48 != a7)
        {
          while (a2 != a3)
          {
            uint64_t v57 = *(void *)a2;
            BOOL v58 = *(void *)a2 < *(void *)a7;
            if (*(void *)a2 >= *(void *)a7) {
              uint64_t v57 = *(void *)a7;
            }
            a7 += 8 * (*(void *)a2 >= *(void *)a7);
            a2 += 8 * v58;
            *(void *)uint64_t v12 = v57;
            v12 += 8;
            if (a7 == v48) {
              return result;
            }
          }
          return (char *)memmove(v12, a7, v48 - a7);
        }
      }
    }
    else if (a2 != a3)
    {
      unint64_t v33 = a3 - a2 - 8;
      uint64_t v34 = a7;
      unint64_t v35 = a2;
      if (v33 < 0x18) {
        goto LABEL_84;
      }
      uint64_t v34 = a7;
      unint64_t v35 = a2;
      if ((unint64_t)(a7 - a2) < 0x20) {
        goto LABEL_84;
      }
      uint64_t v36 = (v33 >> 3) + 1;
      uint64_t v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v34 = &a7[v37];
      unint64_t v35 = &a2[v37];
      BOOL v38 = (long long *)(a2 + 16);
      uint64_t v39 = a7 + 16;
      uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v41 = *v38;
        *(v39 - 1) = *(v38 - 1);
        *uint64_t v39 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_84:
        do
        {
          uint64_t v42 = *(void *)v35;
          v35 += 8;
          *(void *)uint64_t v34 = v42;
          v34 += 8;
        }
        while (v35 != a3);
      }
      if (v34 != a7)
      {
        unint64_t v43 = a3;
        while (a2 != v12)
        {
          uint64_t v44 = *((void *)v34 - 1);
          uint64_t v45 = *((void *)a2 - 1);
          BOOL v46 = v44 < v45;
          if (v44 <= v45) {
            uint64_t v44 = *((void *)a2 - 1);
          }
          if (v46) {
            a2 -= 8;
          }
          else {
            v34 -= 8;
          }
          *((void *)a3 - 1) = v44;
          a3 -= 8;
          v43 -= 8;
          if (v34 == a7) {
            return result;
          }
        }
        unint64_t v59 = v34 - a7 - 8;
        if (v59 < 0x58 || (unint64_t)(v34 - v43) < 0x20)
        {
          unint64_t v60 = v34;
          uint64_t v61 = a3;
LABEL_72:
          uint64_t v62 = v61 - 8;
          do
          {
            uint64_t v63 = *((void *)v60 - 1);
            v60 -= 8;
            *(void *)uint64_t v62 = v63;
            v62 -= 8;
          }
          while (v60 != a7);
          return result;
        }
        uint64_t v64 = 0;
        uint64_t v65 = (v59 >> 3) + 1;
        uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v60 = &v34[-v66];
        uint64_t v61 = &a3[-v66];
        uint64_t v67 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v68 = *(_OWORD *)&v34[v64 - 16];
          uint64_t v69 = &a3[v64];
          *((_OWORD *)v69 - 2) = *(_OWORD *)&v34[v64 - 32];
          *((_OWORD *)v69 - 1) = v68;
          v64 -= 32;
          v67 -= 4;
        }
        while (v67);
        if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_72;
        }
      }
    }
  }
  return result;
}

__n128 llvm::SmallVectorTemplateBase<mlir::anonymous namespace'::ArgPack,true>::growAndEmplaceBack<mlir::anonymous namespace'::ArgPack>(uint64_t a1, long long *a2)
{
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  unint64_t v4 = *(void *)a1;
  uint64_t v5 = (__n128 *)&v11;
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v8 = v3 + 1;
    BOOL v9 = v4 + 24 * v3 > (unint64_t)&v11;
    if (v4 <= (unint64_t)&v11 && v9)
    {
      uint64_t v10 = (char *)&v11 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      unint64_t v4 = *(void *)a1;
      uint64_t v5 = (__n128 *)&v10[*(void *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      unint64_t v4 = *(void *)a1;
      uint64_t v5 = (__n128 *)&v11;
    }
  }
  BOOL v6 = (__n128 *)(v4 + 24 * *(unsigned int *)(a1 + 8));
  __n128 result = *v5;
  v6[1].n128_u64[0] = v5[1].n128_u64[0];
  *BOOL v6 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL mlir::hasUniqueValues(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v30 = a1;
  unint64_t v33 = (llvm::APInt *)v35;
  uint64_t v34 = 0x400000000;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = (uint64_t *)&v37;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v27, a1, 0);
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v30);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v24, a1, NumElements);
  while (1)
  {
    BOOL v3 = v27 == v24 && v28 == v25;
    if (v3 && v29 == v26) {
      break;
    }
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v27, (llvm::APInt *)&v31);
    if (v38) {
      goto LABEL_10;
    }
    unint64_t v4 = v33;
    uint64_t v5 = v34;
    if (!v34) {
      goto LABEL_19;
    }
    LODWORD(v6) = v34;
    uint64_t v7 = v31;
    uint64_t v8 = 16 * v34;
    BOOL v9 = v33;
    while (*((_DWORD *)v9 + 2) > 0x40u)
    {
      if (llvm::APInt::equalSlowCase((const void **)v9, &v31)) {
        goto LABEL_17;
      }
LABEL_14:
      BOOL v9 = (llvm::APInt *)((char *)v9 + 16);
      v8 -= 16;
      if (!v8) {
        goto LABEL_18;
      }
    }
    if (*(const void **)v9 != v7) {
      goto LABEL_14;
    }
LABEL_17:
    if (v8) {
      goto LABEL_28;
    }
LABEL_18:
    if (v5 >= 4)
    {
      do
      {
        std::set<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::insert[abi:nn180100](&v36, (llvm::APInt *)((char *)v33 + 16 * v6 - 16));
        uint64_t v6 = (v34 - 1);
        LODWORD(v34) = v6;
        if (*((_DWORD *)v33 + 4 * v6 + 2) >= 0x41u)
        {
          uint64_t v13 = *((void *)v33 + 2 * v6);
          if (v13)
          {
            MEMORY[0x21667D390](v13, 0x1000C8000313F17);
            LODWORD(v6) = v34;
          }
        }
      }
      while (v6);
LABEL_10:
      std::set<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::insert[abi:nn180100](&v36, (llvm::APInt *)&v31);
      goto LABEL_28;
    }
LABEL_19:
    if (v5 >= HIDWORD(v34))
    {
      unint64_t v14 = v5 + 1;
      if (v4 <= (llvm::APInt *)&v31 && (char *)v4 + 16 * v5 > (char *)&v31)
      {
        uint64_t v15 = (char *)((char *)&v31 - (char *)v4);
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v33, v14);
        unint64_t v4 = v33;
        uint64_t v10 = (const void **)&v15[(void)v33];
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v33, v14);
        uint64_t v10 = &v31;
        unint64_t v4 = v33;
      }
    }
    else
    {
      uint64_t v10 = &v31;
    }
    long long v11 = (llvm::APInt *)((char *)v4 + 16 * v34);
    unsigned int v12 = *((_DWORD *)v10 + 2);
    *((_DWORD *)v11 + 2) = v12;
    if (v12 > 0x40) {
      llvm::APInt::initSlowCase(v11, (const llvm::APInt *)v10);
    }
    *(void *)long long v11 = *v10;
    LODWORD(v34) = v34 + 1;
LABEL_28:
    if (v32 >= 0x41)
    {
      if (v31) {
        MEMORY[0x21667D390](v31, 0x1000C8000313F17);
      }
    }
    ++v29;
  }
  uint64_t v16 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v30);
  uint64_t v17 = v34;
  uint64_t v18 = v38;
  std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(v37);
  unint64_t v19 = v33;
  if (v34)
  {
    uint64_t v20 = 16 * v34;
    do
    {
      if (*(_DWORD *)((char *)v19 + v20 - 8) >= 0x41u)
      {
        uint64_t v21 = *(void *)((char *)v19 + v20 - 16);
        if (v21) {
          MEMORY[0x21667D390](v21, 0x1000C8000313F17);
        }
      }
      v20 -= 16;
    }
    while (v20);
    unint64_t v19 = v33;
  }
  if (v19 != (llvm::APInt *)v35) {
    free(v19);
  }
  if (v18) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v22 = v17;
  }
  return v16 == v22;
}

void std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(*a1);
    std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(a1[1]);
    if (*((_DWORD *)a1 + 10) >= 0x41u)
    {
      uint64_t v2 = a1[4];
      if (v2) {
        MEMORY[0x21667D390](v2, 0x1000C8000313F17);
      }
    }
    operator delete(a1);
  }
}

uint64_t std::set<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::insert[abi:nn180100](uint64_t **a1, llvm::APInt *this)
{
  uint64_t v5 = (uint64_t *)(a1 + 1);
  unint64_t v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v4;
        uint64_t v7 = (llvm::APInt *)(v4 + 4);
        if ((llvm::APInt::compare(this, (const llvm::APInt *)(v4 + 4)) & 0x80000000) == 0) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t result = llvm::APInt::compare(v7, this);
      if ((result & 0x80000000) == 0) {
        break;
      }
      unint64_t v4 = (uint64_t *)v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 1);
LABEL_8:
    BOOL v9 = operator new(0x30uLL);
    uint64_t v10 = (llvm::APInt *)(v9 + 8);
    unsigned int v11 = *((_DWORD *)this + 2);
    void v9[10] = v11;
    if (v11 > 0x40) {
      llvm::APInt::initSlowCase(v10, this);
    }
    *(void *)uint64_t v10 = *(void *)this;
    *(void *)BOOL v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v6;
    uint64_t *v5 = (uint64_t)v9;
    unsigned int v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      BOOL v9 = (_DWORD *)*v5;
    }
    uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t mlir::writeConstantData(llvm::raw_ostream *a1)
{
  mlir::mps::CPUNDArray::CPUNDArray(v9);
  uint64_t v2 = (const char *)v9[5];
  if (v10)
  {
    if (mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v9) >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        size_t ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)v9);
        llvm::raw_ostream::write(a1, v2, ElementDataSize);
        ++v3;
      }
      while (v3 < mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v9));
    }
  }
  else
  {
    uint64_t v5 = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)v9);
    uint64_t NumElements = mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v9);
    llvm::raw_ostream::write(a1, v2, NumElements * v5);
  }
  if (*((void *)a1 + 4) != *((void *)a1 + 2)) {
    llvm::raw_ostream::flush_nonempty(a1);
  }
  uint64_t v7 = (*(uint64_t (**)(llvm::raw_ostream *))(*(void *)a1 + 80))(a1)
     + *((void *)a1 + 4)
     - *((void *)a1 + 2);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v9);
  return v7;
}

BOOL mlir::isConstantFPZero(unint64_t *a1)
{
  return mlir::detail::is_constant_fp_value<unsigned long long>(a1, 0);
}

BOOL mlir::detail::is_constant_fp_value<unsigned long long>(unint64_t *a1, unint64_t a2)
{
  void v27[3] = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(a1[1] & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  uint64_t v23 = 0;
  char v25 = (unint64_t *)&v23;
  uint64_t v26 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v26);
  if (DefiningOp
    && mlir::detail::constant_op_binder<mlir::DenseFPElementsAttr>::match(&v25, DefiningOp)
    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v23))
  {
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v23, (uint64_t)&v26);
    float v17 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v26);
    uint64_t v18 = (void *)v27[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v19) == v18) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v27);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v27);
    }
  }
  else
  {
    uint64_t v26 = 0;
    v27[0] = 0;
    uint64_t v24 = &v26;
    char v25 = a1;
    uint64_t v20 = mlir::Value::getDefiningOp((mlir::Value *)&v25);
    if (!v20) {
      return 0;
    }
    if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v24, v20)) {
      return 0;
    }
    uint64_t SingleFloat = mlir::getSingleFloatValue<float>((uint64_t)v26, v27[0]);
    if ((SingleFloat & 0xFF00000000) == 0) {
      return 0;
    }
    float v17 = *(float *)&SingleFloat;
  }
  return v17 == (float)a2;
}

uint64_t mlir::mps::CPUNDArray::CPUNDArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v33[0] = a2;
  v33[1] = a3;
  *(void *)a1 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)v33);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 49) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 24) = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(void *)(a1 + 32) = v4;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(void *)(a1 + 16) = v5;
  ElementsAttrRawData = (unsigned char *)mlir::getElementsAttrRawData(v33[0]);
  uint64_t v8 = v7;
  BOOL isInteger = 0;
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v33))
  {
    if (*(_UNKNOWN **)(*(void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && (uint64_t v32 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1),
          mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v32) <= 7))
    {
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
      BOOL isInteger = 1;
      if (!mlir::Type::isInteger((mlir::Type *)&RHS, 1))
      {
        uint64_t v30 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
        BOOL isInteger = mlir::Type::isInteger((mlir::Type *)&v30, 4);
      }
    }
    else
    {
      BOOL isInteger = 1;
    }
  }
  *(unsigned char *)(a1 + 50) = isInteger;
  mlir::mps::CPUNDArray::calculateStrides((mlir::mps::CPUNDArray *)a1);
  size_t ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)a1);
  if (*(unsigned char *)(a1 + 50))
  {
    size_t v11 = ElementDataSize;
    *(unsigned char *)(a1 + 48) = 1;
    *(void *)(a1 + 40) = malloc_type_malloc(ElementDataSize, 0x36250220uLL);
    uint64_t v32 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
    if (mlir::Type::isInteger((mlir::Type *)&v32, 1)) {
      **(unsigned char **)(a1 + 40) = *ElementsAttrRawData != 0;
    }
    else {
      memcpy(*(void **)(a1 + 40), ElementsAttrRawData, v11);
    }
    return a1;
  }
  uint64_t v32 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
  if (!mlir::Type::isInteger((mlir::Type *)&v32, 1))
  {
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 40) = ElementsAttrRawData;
    return a1;
  }
  *(unsigned char *)(a1 + 48) = 1;
  uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  size_t NumElements = mlir::ShapedType::getNumElements(Value, v13);
  uint64_t v15 = (char *)malloc_type_malloc(NumElements, 0xB8E97063uLL);
  *(void *)(a1 + 40) = v15;
  uint64_t v16 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  unint64_t v18 = mlir::ShapedType::getNumElements(v16, v17);
  if (v8)
  {
    unint64_t v19 = (BOOL *)(v15 + 3);
    do
    {
      if (v18 >= 8) {
        uint64_t v20 = 8;
      }
      else {
        uint64_t v20 = v18;
      }
      if (!v20) {
        goto LABEL_11;
      }
      if (v18 >= 8) {
        uint64_t v21 = 8;
      }
      else {
        uint64_t v21 = v18;
      }
      unsigned int v22 = *ElementsAttrRawData;
      uint64x2_t v23 = (uint64x2_t)vdupq_n_s64(v21 - 1);
      int32x2_t v24 = vmovn_s64((int64x2_t)vcgeq_u64(v23, (uint64x2_t)xmmword_211ED5A80));
      if (v24.i8[0]) {
        *(v19 - 3) = v22 & 1;
      }
      if (v24.i8[4]) {
        *(v19 - 2) = (v22 & 2) != 0;
      }
      uint64_t v25 = ((_BYTE)v21 + 1) & 0x1E;
      if (v25 == 2) {
        goto LABEL_11;
      }
      int32x2_t v26 = vmovn_s64((int64x2_t)vcgtq_u64(v23, (uint64x2_t)xmmword_211ED4670));
      if (v26.i8[0])
      {
        *(v19 - 1) = (v22 & 4) != 0;
        if (v26.i8[4]) {
          goto LABEL_29;
        }
      }
      else if (v26.i8[4])
      {
LABEL_29:
        *unint64_t v19 = (v22 & 8) != 0;
        if (v25 == 4) {
          goto LABEL_11;
        }
        goto LABEL_30;
      }
      if (v25 == 4) {
        goto LABEL_11;
      }
LABEL_30:
      int32x2_t v27 = vmovn_s64((int64x2_t)vcgtq_u64(v23, (uint64x2_t)xmmword_211F09590));
      if (v27.i8[0])
      {
        v19[1] = (v22 & 0x10) != 0;
        if ((v27.i8[4] & 1) == 0) {
          goto LABEL_32;
        }
      }
      else if ((v27.i8[4] & 1) == 0)
      {
LABEL_32:
        if (v25 != 6) {
          goto LABEL_36;
        }
        goto LABEL_11;
      }
      void v19[2] = (v22 & 0x20) != 0;
      if (v25 != 6)
      {
LABEL_36:
        int32x2_t v28 = vmovn_s64((int64x2_t)vcgtq_u64(v23, (uint64x2_t)xmmword_211F095A0));
        if (v28.i8[0]) {
          v19[3] = (v22 & 0x40) != 0;
        }
        if (v28.i8[4]) {
          void v19[4] = v22 >> 7;
        }
      }
LABEL_11:
      ++ElementsAttrRawData;
      v19 += 8;
      v18 -= 8;
      --v8;
    }
    while (v8);
  }
  return a1;
}

void mlir::mps::CPUNDArray::calculateStrides(mlir::mps::CPUNDArray *this)
{
  uint64_t ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize(this);
  uint64_t v3 = (uint64_t *)*((void *)this + 7);
  unint64_t v4 = *((void *)this + 2);
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  unint64_t v5 = (uint64_t)(*((void *)this + 8) - (void)v3) >> 3;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *((void *)this + 8) = &v3[v4];
    }
  }
  else
  {
    std::vector<long long>::__append((uint64_t)this + 56, v4 - v5);
    uint64_t v3 = (uint64_t *)*((void *)this + 7);
  }
  int v6 = *((unsigned __int8 *)this + 50);
  if (*((unsigned char *)this + 50)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ElementDataSize;
  }
  uint64_t *v3 = v7;
  uint64_t v8 = *((void *)this + 2);
  if (v8 >= 2)
  {
    uint64_t v9 = -1;
    for (uint64_t i = 1; i < v8; ++i)
    {
      if (v6) {
        uint64_t v7 = 0;
      }
      else {
        v7 *= *(void *)(*((void *)this + 3) + 8 * (v8 + v9));
      }
      v3[i] = v7;
      uint64_t v8 = *((void *)this + 2);
      --v9;
    }
  }
  size_t v11 = (uint64_t *)*((void *)this + 8);
  unsigned int v12 = v11 - 1;
  if (v3 != v11 && v12 > v3)
  {
    unint64_t v14 = v3 + 1;
    do
    {
      uint64_t v15 = *(v14 - 1);
      *(v14 - 1) = *v12;
      *v12-- = v15;
    }
    while (v14++ < v12);
  }
}

uint64_t mlir::mps::CPUNDArray::getElementDataSize(mlir::mps::CPUNDArray *this)
{
  if (*(_UNKNOWN **)(*(void *)mlir::AffineBinaryOpExpr::getRHS(this) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS(this);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&RHS);
    return ((mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value) + 7) >> 2) & 0x3FFFFFFE;
  }
  else
  {
    uint64_t Value = mlir::AffineBinaryOpExpr::getRHS(this);
    return (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value) + 7) >> 3;
  }
}

uint64_t mlir::mps::CPUNDArray::CPUNDArray(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v20[0] = a2;
  v20[1] = a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 47) = 0;
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v20);
  uint64_t v8 = v7;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v20);
  *(void *)a1 = mlir::RankedTensorType::get(Shape, v8, OperandRange, 0);
  *(void *)(a1 + 24) = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(void *)(a1 + 32) = v10;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(void *)(a1 + 16) = v11;
  uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  uint64_t NumElements = mlir::ShapedType::getNumElements(Value, v13);
  if (NumElements == 1) {
    char v15 = 1;
  }
  else {
    char v15 = a4;
  }
  *(unsigned char *)(a1 + 50) = v15;
  mlir::mps::CPUNDArray::calculateStrides((mlir::mps::CPUNDArray *)a1);
  *(unsigned char *)(a1 + 48) = 1;
  uint64_t ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)a1);
  if (NumElements < 1)
  {
    unint64_t v18 = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 50)) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = NumElements;
    }
    unint64_t v18 = malloc_type_malloc(v17 * ElementDataSize, 0xF02CD65BuLL);
  }
  *(void *)(a1 + 40) = v18;
  return a1;
}

void *std::vector<long long>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v5 < 0) {
      abort();
    }
    int v6 = (char *)operator new(v3 - *(void *)a2);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

uint64_t mlir::mps::CPUNDArray::getNumElements(mlir::mps::CPUNDArray *this)
{
  uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue(this);

  return mlir::ShapedType::getNumElements(Value, v2);
}

uint64_t mlir::mps::CPUNDArray::tryMakeAliasedArray@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v13);
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v13);
    uint64_t v8 = v7;
    uint64_t v9 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v13);
    uint64_t v10 = (void *)mlir::RankedTensorType::get(Shape, v8, v9, 0);
    mlir::tryCreateMutableElementsAttr(v10, (__n128 **)a3);
    if (*(void *)a3) {
      return mlir::mps::CPUNDArray::CPUNDArray(a4, *(void *)a3, *(void *)(a3 + 8));
    }
  }
  return mlir::mps::CPUNDArray::CPUNDArray(a4, v13, v14, 0);
}

void mlir::mps::CPUNDArray::~CPUNDArray(mlir::mps::CPUNDArray *this)
{
  if (*((unsigned char *)this + 48))
  {
    uint64_t v2 = (void *)*((void *)this + 5);
    if (v2) {
      free(v2);
    }
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
}

void *mlir::mps::CPUNDArray::getElementsAttr(mlir::mps::CPUNDArray *this, int a2, int a3)
{
  if (*((unsigned char *)this + 50))
  {
    unint64_t NumElements = 1;
  }
  else
  {
    uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue(this);
    unint64_t NumElements = mlir::ShapedType::getNumElements(Value, v8);
  }
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS(this);
  if (mlir::Type::isInteger((mlir::Type *)&RHS, 1))
  {
    uint64_t v9 = (unsigned char *)*((void *)this + 5);
    uint64_t v10 = *(uint64_t **)this;
    if (a2)
    {
      if (!v10) {
        goto LABEL_15;
      }
      uint64_t v11 = *v10;
      unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v13 = *(unsigned int *)(v11 + 16);
      if (!v13) {
        goto LABEL_15;
      }
      uint64_t v14 = *(void **)(v11 + 8);
      char v15 = &v14[2 * v13];
      do
      {
        unint64_t v16 = v13 >> 1;
        uint64_t v17 = &v14[2 * (v13 >> 1)];
        unint64_t v19 = *v17;
        unint64_t v18 = v17 + 2;
        v13 += ~(v13 >> 1);
        if (v19 < v12) {
          uint64_t v14 = v18;
        }
        else {
          unint64_t v13 = v16;
        }
      }
      while (v13);
      if (v14 != v15 && *v14 == v12) {
        uint64_t v20 = v14[1];
      }
      else {
LABEL_15:
      }
        uint64_t v20 = 0;
      uint64_t v21 = (void *)mlir::DenseElementsAttr::get((uint64_t)v10, v20, v9, NumElements);
      unsigned int v22 = v21;
      if (v21)
      {
        uint64_t v23 = *v21;
        unint64_t v24 = mlir::TypeID::get<mlir::ElementsAttr>();
        unint64_t v25 = *(unsigned int *)(v23 + 16);
        if (v25)
        {
          int32x2_t v26 = *(void **)(v23 + 8);
          do
          {
            unint64_t v27 = v25 >> 1;
            int32x2_t v28 = &v26[2 * (v25 >> 1)];
            unint64_t v30 = *v28;
            uint64_t v29 = v28 + 2;
            v25 += ~(v25 >> 1);
            if (v30 < v24) {
              int32x2_t v26 = v29;
            }
            else {
              unint64_t v25 = v27;
            }
          }
          while (v25);
        }
      }
      return v22;
    }
    return mlir::createElementsAttr<BOOL>(v10, v9, NumElements);
  }
  if (a3 && NumElements >= 2)
  {
    BOOL v31 = (unsigned __int8 *)*((void *)this + 5);
    uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS(this);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 8))
    {
      int v32 = *v31;
      if (v32 != v31[1]) {
        goto LABEL_77;
      }
      uint64_t v33 = 2;
      while (NumElements != v33)
      {
        int v34 = v31[v33++];
        if (v32 != v34) {
          goto LABEL_75;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 8))
    {
      int v36 = *v31;
      if (v36 != v31[1]) {
        goto LABEL_77;
      }
      uint64_t v33 = 2;
      while (NumElements != v33)
      {
        int v37 = v31[v33++];
        if (v36 != v37) {
          goto LABEL_75;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 16))
    {
      int v38 = *(unsigned __int16 *)v31;
      if (v38 != *((unsigned __int16 *)v31 + 1)) {
        goto LABEL_77;
      }
      uint64_t v33 = 2;
      while (NumElements != v33)
      {
        int v39 = *(unsigned __int16 *)&v31[2 * v33++];
        if (v38 != v39) {
          goto LABEL_75;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 16))
    {
      int v40 = *(unsigned __int16 *)v31;
      if (v40 != *((unsigned __int16 *)v31 + 1)) {
        goto LABEL_77;
      }
      uint64_t v33 = 2;
      while (NumElements != v33)
      {
        int v41 = *(unsigned __int16 *)&v31[2 * v33++];
        if (v40 != v41) {
          goto LABEL_75;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 32))
    {
      if (*(_DWORD *)v31 != *((_DWORD *)v31 + 1)) {
        goto LABEL_77;
      }
      uint64_t v33 = 2;
      while (NumElements != v33)
      {
        int v42 = *(_DWORD *)&v31[4 * v33++];
        if (*(_DWORD *)v31 != v42) {
          goto LABEL_75;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 32))
    {
      if (*(_DWORD *)v31 != *((_DWORD *)v31 + 1)) {
        goto LABEL_77;
      }
      uint64_t v33 = 2;
      while (NumElements != v33)
      {
        int v43 = *(_DWORD *)&v31[4 * v33++];
        if (*(_DWORD *)v31 != v43) {
          goto LABEL_75;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 64))
    {
      if (*(void *)v31 != *((void *)v31 + 1)) {
        goto LABEL_77;
      }
      uint64_t v33 = 2;
      while (NumElements != v33)
      {
        uint64_t v44 = *(void *)&v31[8 * v33++];
        if (*(void *)v31 != v44) {
          goto LABEL_75;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 64))
    {
      if (*(void *)v31 != *((void *)v31 + 1)) {
        goto LABEL_77;
      }
      uint64_t v33 = 2;
      while (NumElements != v33)
      {
        uint64_t v45 = *(void *)&v31[8 * v33++];
        if (*(void *)v31 != v45)
        {
LABEL_75:
          if (v33 - 1 < NumElements) {
            goto LABEL_77;
          }
          goto LABEL_76;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isF32((mlir::Type *)&RHS))
    {
      if (*(float *)v31 == *((float *)v31 + 1))
      {
        uint64_t v72 = 2;
        while (NumElements != v72)
        {
          float v73 = *(float *)&v31[4 * v72++];
          if (*(float *)v31 != v73) {
            goto LABEL_117;
          }
        }
LABEL_76:
        unint64_t NumElements = 1;
      }
    }
    else if (mlir::Type::isF16((mlir::Type *)&RHS))
    {
      if (*(short float *)v31 == *((short float *)v31 + 1))
      {
        uint64_t v72 = 2;
        while (NumElements != v72)
        {
          short float v74 = *(short float *)&v31[2 * v72++];
          if (*(short float *)v31 != v74) {
            goto LABEL_117;
          }
        }
        goto LABEL_76;
      }
    }
    else if (mlir::Type::isBF16((mlir::Type *)&RHS))
    {
      LODWORD(v75) = *(unsigned __int16 *)v31 << 16;
      if (v75 == COERCE_FLOAT(*((unsigned __int16 *)v31 + 1) << 16))
      {
        uint64_t v72 = 2;
        while (NumElements != v72)
        {
          LODWORD(v76) = *(unsigned __int16 *)&v31[2 * v72++] << 16;
          if (v75 != v76) {
            goto LABEL_117;
          }
        }
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v77 = RHS;
      unint64_t v78 = *(void **)(*(void *)RHS + 136);
      if (v78 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
        uint64_t v77 = 0;
      }
      uint64_t v90 = v77;
      if (v78 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v89 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v90);
        if (mlir::Type::isF32((mlir::Type *)&v89))
        {
          if (*(float *)v31 == *((float *)v31 + 2))
          {
            float v79 = *((float *)v31 + 1);
            if (v79 == *((float *)v31 + 3))
            {
              unint64_t v80 = (float *)(v31 + 20);
              uint64_t v72 = 2;
              while (NumElements != v72)
              {
                float v81 = *(v80 - 1);
                float v82 = *v80;
                ++v72;
                v80 += 2;
                if (*(float *)v31 != v81 || v79 != v82) {
                  goto LABEL_117;
                }
              }
              goto LABEL_76;
            }
          }
        }
        else
        {
          uint64_t v89 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v90);
          if (mlir::Type::isF32((mlir::Type *)&v89) && *(short float *)v31 == *((short float *)v31 + 2))
          {
            short float v84 = *((short float *)v31 + 1);
            if (v84 == *((short float *)v31 + 3))
            {
              uint64_t v85 = (short float *)(v31 + 10);
              uint64_t v72 = 2;
              while (NumElements != v72)
              {
                short float v86 = *(v85 - 1);
                short float v87 = *v85;
                ++v72;
                v85 += 2;
                if (*(short float *)v31 != v86 || v84 != v87)
                {
LABEL_117:
                  if (v72 - 1 >= NumElements) {
                    goto LABEL_76;
                  }
                  goto LABEL_77;
                }
              }
              goto LABEL_76;
            }
          }
        }
      }
    }
  }
LABEL_77:
  BOOL v46 = (const void *)*((void *)this + 5);
  uint64_t v50 = mlir::mps::CPUNDArray::getElementDataSize(this) * NumElements;
  uint64_t v51 = *(uint64_t **)this;
  if (!a2) {
    return mlir::createRawElementsAttr(v51, v46, (const void *)v50);
  }
  if (!v51) {
    goto LABEL_87;
  }
  uint64_t v52 = *v51;
  unint64_t v53 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v54 = *(unsigned int *)(v52 + 16);
  if (!v54) {
    goto LABEL_87;
  }
  long long v55 = *(void **)(v52 + 8);
  uint64_t v56 = &v55[2 * v54];
  do
  {
    unint64_t v57 = v54 >> 1;
    BOOL v58 = &v55[2 * (v54 >> 1)];
    unint64_t v60 = *v58;
    unint64_t v59 = v58 + 2;
    v54 += ~(v54 >> 1);
    if (v60 < v53) {
      long long v55 = v59;
    }
    else {
      unint64_t v54 = v57;
    }
  }
  while (v54);
  if (v55 != v56 && *v55 == v53) {
    uint64_t v61 = v55[1];
  }
  else {
LABEL_87:
  }
    uint64_t v61 = 0;
  uint64_t v62 = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v51, v61, v46, v50, v47, v48, v49);
  unsigned int v22 = v62;
  if (v62)
  {
    uint64_t v63 = *v62;
    unint64_t v64 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v65 = *(unsigned int *)(v63 + 16);
    if (v65)
    {
      uint64_t v66 = *(void **)(v63 + 8);
      do
      {
        unint64_t v67 = v65 >> 1;
        long long v68 = &v66[2 * (v65 >> 1)];
        unint64_t v70 = *v68;
        uint64_t v69 = v68 + 2;
        v65 += ~(v65 >> 1);
        if (v70 < v64) {
          uint64_t v66 = v69;
        }
        else {
          unint64_t v65 = v67;
        }
      }
      while (v65);
    }
  }
  return v22;
}

float mlir::mps::CPUNDArray::getSplatFloatValue(mlir::mps::CPUNDArray *this)
{
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS(this);
  uint64_t v3 = *(void **)(*(void *)RHS + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t RHS = 0;
  }
  uint64_t v21 = RHS;
  if (mlir::Type::isF32((mlir::Type *)&v21)) {
    return **((float **)this + 5);
  }
  if (mlir::Type::isF16((mlir::Type *)&v21))
  {
    _H0 = **((_WORD **)this + 5);
    __asm { FCVT            S0, H0 }
  }
  else
  {
    BOOL isBF16 = mlir::Type::isBF16((mlir::Type *)&v21);
    float result = 0.0;
    if (isBF16) {
      LODWORD(result) = **((unsigned __int16 **)this + 5) << 16;
    }
  }
  return result;
}

void mlir::mps::CPUNDArrayKernel::cpuTilingEngine(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12 = *(uint64_t **)a4;
  uint64_t v11 = *(void *)(a4 + 8);
  int64_t v13 = v11 - *(void *)a4;
  if (v11 == *(void *)a4)
  {
    uint64_t v14 = 0;
    short float v74 = 0;
  }
  else
  {
    if (v13 < 0) {
      goto LABEL_77;
    }
    uint64_t v14 = (char *)operator new(v11 - (void)v12);
    short float v74 = &v14[8 * (v13 >> 3)];
    memcpy(v14, v12, v13);
  }
  unint64_t v16 = *(uint64_t **)a5;
  uint64_t v15 = *(void *)(a5 + 8);
  int64_t v17 = v15 - *(void *)a5;
  if (v15 == *(void *)a5)
  {
    unint64_t v18 = 0;
    float v73 = 0;
  }
  else
  {
    if (v17 < 0) {
      goto LABEL_77;
    }
    unint64_t v18 = (char *)operator new(v15 - *(void *)a5);
    float v73 = &v18[8 * (v17 >> 3)];
    memcpy(v18, v16, v17);
  }
  uint64_t v64 = a7;
  if (*(void *)(a1 + 8) + a6 >= a7)
  {
    uint64_t v52 = *(void (**)(uint64_t *, uint64_t **, char **, char **, uint64_t, uint64_t, uint64_t))a1;
    uint64_t v85 = 0;
    short float v86 = 0;
    short float v84 = 0;
    int64_t v53 = v74 - v14;
    if (v74 != v14)
    {
      if (v53 < 0) {
        goto LABEL_77;
      }
      unint64_t v54 = (char *)operator new(v74 - v14);
      long long v55 = &v54[8 * (v53 >> 3)];
      short float v84 = v54;
      short float v86 = v55;
      memcpy(v54, v14, v53);
      uint64_t v85 = v55;
      a7 = v64;
    }
    float v81 = 0;
    float v82 = 0;
    unint64_t v83 = 0;
    int64_t v56 = v73 - v18;
    if (v73 == v18)
    {
LABEL_68:
      v52(a2, a3, &v84, &v81, a6, a7, a8);
      if (v81)
      {
        float v82 = v81;
        operator delete(v81);
      }
      if (v84)
      {
        uint64_t v85 = v84;
        operator delete(v84);
      }
      goto LABEL_72;
    }
    if ((v56 & 0x8000000000000000) == 0)
    {
      unint64_t v57 = (char *)operator new(v73 - v18);
      BOOL v58 = &v57[8 * (v56 >> 3)];
      float v81 = v57;
      unint64_t v83 = v58;
      memcpy(v57, v18, v56);
      float v82 = v58;
      a7 = v64;
      goto LABEL_68;
    }
LABEL_77:
    abort();
  }
  uint64_t v19 = **a3;
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v72 = 1;
  uint64_t v21 = (v20 & (a6 >> 63)) + a6;
  if (v21 < 0 || !v20 || (uint64_t v72 = *(void *)(*(void *)(v19 + 24) + 8 * v21), v72 >= 1))
  {
    uint64_t v22 = 0;
    uint64_t v71 = a7 - a6;
    size_t __sz = v74 - v14;
    unint64_t v23 = (v74 - v14) >> 3;
    int v24 = a6 - a7;
    uint64_t v25 = (int)a6 - (int)a7;
    size_t v26 = v73 - v18;
    unint64_t v27 = (v73 - v18) >> 3;
    uint64_t v66 = a6 + 1;
    unint64_t v59 = v27;
    unint64_t v60 = v23;
    if (v23 <= 1) {
      unint64_t v23 = 1;
    }
    if (v27 <= 1) {
      unint64_t v27 = 1;
    }
    unint64_t v61 = v27;
    unint64_t v62 = v23;
    do
    {
      if (v71 <= *(void *)(a1 + 8)) {
        goto LABEL_20;
      }
      if (v74 != v14)
      {
        unint64_t v28 = v62;
        uint64_t v29 = *(uint64_t **)a4;
        uint64_t v30 = *a2;
        BOOL v31 = v14;
        do
        {
          int v32 = *(void **)v30;
          if (*(unsigned char *)(*(void *)v30 + 50)
            || ((uint64_t v35 = v32[2], v24 < 0) ? (v36 = v32[2]) : (v36 = 0),
                (uint64_t v37 = v36 + v25, v37 < 0)
             || (v37 <= (int)v35 - 1 ? (BOOL v38 = v35 == 0) : (BOOL v38 = 1), v38 || *(void *)(v32[3] + 8 * v37) == 1)))
          {
            uint64_t v33 = 0;
          }
          else
          {
            uint64_t v33 = *(void *)(v32[7] + 8 * v37);
          }
          uint64_t v34 = *v29++;
          *v31++ = v34 + v33 * v22;
          v30 += 8;
          --v28;
        }
        while (v28);
      }
      if (v73 != v18)
      {
        int v39 = *(uint64_t **)a5;
        int v40 = *a3;
        int v41 = v18;
        unint64_t v42 = v61;
        do
        {
          int v43 = (void *)*v40;
          if (*(unsigned char *)(*v40 + 50)
            || ((v46 = v43[2], v24 < 0) ? (uint64_t v47 = v43[2]) : (uint64_t v47 = 0),
                (uint64_t v48 = v47 + v25, v48 < 0)
             || (v48 <= (int)v46 - 1 ? (BOOL v49 = v46 == 0) : (BOOL v49 = 1), v49 || *(void *)(v43[3] + 8 * v48) == 1)))
          {
            uint64_t v44 = 0;
          }
          else
          {
            uint64_t v44 = *(void *)(v43[7] + 8 * v48);
          }
          uint64_t v45 = *v39++;
          *v41++ = v45 + v44 * v22;
          ++v40;
          --v42;
        }
        while (v42);
      }
      unint64_t v78 = 0;
      float v79 = 0;
      unint64_t v80 = 0;
      if (v74 == v14)
      {
        uint64_t v50 = 0;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_77;
        }
        uint64_t v50 = (char *)operator new(__sz);
        unint64_t v78 = v50;
        unint64_t v80 = &v50[8 * v60];
        memcpy(v50, v14, __sz);
        float v79 = &v50[8 * v60];
      }
      float v75 = 0;
      float v76 = 0;
      uint64_t v77 = 0;
      if (v73 == v18)
      {
        mlir::mps::CPUNDArrayKernel::cpuTilingEngine(a1, a2, a3, &v78, &v75, v66, a7, a8);
        if (v50) {
          goto LABEL_19;
        }
      }
      else
      {
        if ((v26 & 0x8000000000000000) != 0) {
          goto LABEL_77;
        }
        uint64_t v51 = (char *)operator new(v26);
        float v75 = v51;
        uint64_t v77 = &v51[8 * v59];
        memcpy(v51, v18, v26);
        float v76 = &v51[8 * v59];
        a7 = v64;
        mlir::mps::CPUNDArrayKernel::cpuTilingEngine(a1, a2, a3, &v78, &v75, v66, v64, a8);
        float v76 = v51;
        operator delete(v51);
        if (v50)
        {
LABEL_19:
          float v79 = v50;
          operator delete(v50);
        }
      }
LABEL_20:
      ++v22;
    }
    while (v22 != v72);
  }
LABEL_72:
  if (v18) {
    operator delete(v18);
  }
  if (v14) {
    operator delete(v14);
  }
}

void mlir::mps::CPUNDArrayArithmeticBinaryKernel::arithmeticBinaryTileKernel(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  switch(*(_DWORD *)(a7 + 16))
  {
    case 0:
      uint64_t v128 = 0;
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v11 = *(const void **)a3;
      uint64_t v10 = *(void *)(a3 + 8);
      int64_t v12 = v10 - *(void *)a3;
      if (v10 == *(void *)a3) {
        goto LABEL_5;
      }
      if (v12 < 0) {
        goto LABEL_84;
      }
      int64_t v13 = (char *)operator new(v10 - *(void *)a3);
      uint64_t v14 = &v13[8 * (v12 >> 3)];
      uint64_t v128 = v13;
      uint64_t v130 = v14;
      memcpy(v13, v11, v12);
      uint64_t v129 = v14;
LABEL_5:
      uint64_t v125 = 0;
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v15 = *(const void **)a4;
      int64_t v16 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v16) {
        goto LABEL_8;
      }
      if (v16 < 0) {
        goto LABEL_84;
      }
      int64_t v17 = (char *)operator new(v16);
      unint64_t v18 = &v17[8 * (v16 >> 3)];
      uint64_t v125 = v17;
      uint64_t v127 = v18;
      memcpy(v17, v15, v16);
      uint64_t v126 = v18;
LABEL_8:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>(a1, a2, (const void **)&v128, (const void **)&v125);
      if (v125)
      {
        uint64_t v126 = v125;
        operator delete(v125);
      }
      uint64_t v19 = v128;
      if (!v128) {
        return;
      }
      uint64_t v129 = (char *)v128;
      break;
    case 1:
      uint64_t v122 = 0;
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v21 = *(const void **)a3;
      uint64_t v20 = *(void *)(a3 + 8);
      int64_t v22 = v20 - *(void *)a3;
      if (v20 == *(void *)a3) {
        goto LABEL_15;
      }
      if (v22 < 0) {
        goto LABEL_84;
      }
      unint64_t v23 = (char *)operator new(v20 - *(void *)a3);
      int v24 = &v23[8 * (v22 >> 3)];
      uint64_t v122 = v23;
      unint64_t v124 = v24;
      memcpy(v23, v21, v22);
      char v123 = v24;
LABEL_15:
      unint64_t v119 = 0;
      uint64_t v120 = 0;
      char v121 = 0;
      uint64_t v25 = *(const void **)a4;
      int64_t v26 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v26) {
        goto LABEL_18;
      }
      if (v26 < 0) {
        goto LABEL_84;
      }
      unint64_t v27 = (char *)operator new(v26);
      unint64_t v28 = &v27[8 * (v26 >> 3)];
      unint64_t v119 = v27;
      char v121 = v28;
      memcpy(v27, v25, v26);
      uint64_t v120 = v28;
LABEL_18:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)1>(a1, a2, (const void **)&v122, (const void **)&v119);
      if (v119)
      {
        uint64_t v120 = v119;
        operator delete(v119);
      }
      uint64_t v19 = v122;
      if (!v122) {
        return;
      }
      char v123 = (char *)v122;
      break;
    case 2:
      unint64_t v116 = 0;
      BOOL v117 = 0;
      uint64_t v118 = 0;
      uint64_t v30 = *(const void **)a3;
      uint64_t v29 = *(void *)(a3 + 8);
      int64_t v31 = v29 - *(void *)a3;
      if (v29 == *(void *)a3) {
        goto LABEL_25;
      }
      if (v31 < 0) {
        goto LABEL_84;
      }
      int v32 = (char *)operator new(v29 - *(void *)a3);
      uint64_t v33 = &v32[8 * (v31 >> 3)];
      unint64_t v116 = v32;
      uint64_t v118 = v33;
      memcpy(v32, v30, v31);
      BOOL v117 = v33;
LABEL_25:
      unint64_t v113 = 0;
      uint64_t v114 = 0;
      long long v115 = 0;
      uint64_t v34 = *(const void **)a4;
      int64_t v35 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v35) {
        goto LABEL_28;
      }
      if (v35 < 0) {
        goto LABEL_84;
      }
      uint64_t v36 = (char *)operator new(v35);
      uint64_t v37 = &v36[8 * (v35 >> 3)];
      unint64_t v113 = v36;
      long long v115 = v37;
      memcpy(v36, v34, v35);
      uint64_t v114 = v37;
LABEL_28:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)2>(a1, a2, (const void **)&v116, (const void **)&v113);
      if (v113)
      {
        uint64_t v114 = v113;
        operator delete(v113);
      }
      uint64_t v19 = v116;
      if (!v116) {
        return;
      }
      BOOL v117 = (char *)v116;
      break;
    case 3:
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      unint64_t v112 = 0;
      int v39 = *(const void **)a3;
      uint64_t v38 = *(void *)(a3 + 8);
      int64_t v40 = v38 - *(void *)a3;
      if (v38 == *(void *)a3) {
        goto LABEL_35;
      }
      if (v40 < 0) {
        goto LABEL_84;
      }
      int v41 = (char *)operator new(v38 - *(void *)a3);
      unint64_t v42 = &v41[8 * (v40 >> 3)];
      uint64_t v110 = v41;
      unint64_t v112 = v42;
      memcpy(v41, v39, v40);
      uint64_t v111 = v42;
LABEL_35:
      __p = 0;
      uint64_t v108 = 0;
      uint64_t v109 = 0;
      int v43 = *(const void **)a4;
      int64_t v44 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v44) {
        goto LABEL_38;
      }
      if (v44 < 0) {
        goto LABEL_84;
      }
      uint64_t v45 = (char *)operator new(v44);
      uint64_t v46 = &v45[8 * (v44 >> 3)];
      __p = v45;
      uint64_t v109 = v46;
      memcpy(v45, v43, v44);
      uint64_t v108 = v46;
LABEL_38:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)3>(a1, a2, (const void **)&v110, (const void **)&__p);
      if (__p)
      {
        uint64_t v108 = __p;
        operator delete(__p);
      }
      uint64_t v19 = v110;
      if (!v110) {
        return;
      }
      uint64_t v111 = (char *)v110;
      break;
    case 4:
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      __int16 v106 = 0;
      uint64_t v48 = *(const void **)a3;
      uint64_t v47 = *(void *)(a3 + 8);
      int64_t v49 = v47 - *(void *)a3;
      if (v47 == *(void *)a3) {
        goto LABEL_45;
      }
      if (v49 < 0) {
        goto LABEL_84;
      }
      uint64_t v50 = (char *)operator new(v47 - *(void *)a3);
      uint64_t v51 = &v50[8 * (v49 >> 3)];
      uint64_t v104 = v50;
      __int16 v106 = v51;
      memcpy(v50, v48, v49);
      uint64_t v105 = v51;
LABEL_45:
      int v101 = 0;
      unint64_t v102 = 0;
      uint64_t v103 = 0;
      uint64_t v52 = *(const void **)a4;
      int64_t v53 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v53) {
        goto LABEL_48;
      }
      if (v53 < 0) {
        goto LABEL_84;
      }
      unint64_t v54 = (char *)operator new(v53);
      long long v55 = &v54[8 * (v53 >> 3)];
      int v101 = v54;
      uint64_t v103 = v55;
      memcpy(v54, v52, v53);
      unint64_t v102 = v55;
LABEL_48:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)4>(a1, a2, (const void **)&v104, (const void **)&v101);
      if (v101)
      {
        unint64_t v102 = v101;
        operator delete(v101);
      }
      uint64_t v19 = v104;
      if (!v104) {
        return;
      }
      uint64_t v105 = (char *)v104;
      break;
    case 5:
      uint64_t v98 = 0;
      unint64_t v99 = 0;
      uint64_t v100 = 0;
      unint64_t v57 = *(const void **)a3;
      uint64_t v56 = *(void *)(a3 + 8);
      int64_t v58 = v56 - *(void *)a3;
      if (v56 == *(void *)a3) {
        goto LABEL_55;
      }
      if (v58 < 0) {
        goto LABEL_84;
      }
      unint64_t v59 = (char *)operator new(v56 - *(void *)a3);
      unint64_t v60 = &v59[8 * (v58 >> 3)];
      uint64_t v98 = v59;
      uint64_t v100 = v60;
      memcpy(v59, v57, v58);
      unint64_t v99 = v60;
LABEL_55:
      uint64_t v95 = 0;
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      unint64_t v61 = *(const void **)a4;
      int64_t v62 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v62) {
        goto LABEL_58;
      }
      if (v62 < 0) {
        goto LABEL_84;
      }
      uint64_t v63 = (char *)operator new(v62);
      uint64_t v64 = &v63[8 * (v62 >> 3)];
      uint64_t v95 = v63;
      unint64_t v97 = v64;
      memcpy(v63, v61, v62);
      uint64_t v96 = v64;
LABEL_58:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)5>(a1, a2, (const void **)&v98, (const void **)&v95);
      if (v95)
      {
        uint64_t v96 = v95;
        operator delete(v95);
      }
      uint64_t v19 = v98;
      if (!v98) {
        return;
      }
      unint64_t v99 = (char *)v98;
      break;
    case 0xF:
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      uint64_t v66 = *(const void **)a3;
      uint64_t v65 = *(void *)(a3 + 8);
      int64_t v67 = v65 - *(void *)a3;
      if (v65 == *(void *)a3) {
        goto LABEL_65;
      }
      if (v67 < 0) {
        goto LABEL_84;
      }
      long long v68 = (char *)operator new(v65 - *(void *)a3);
      uint64_t v69 = &v68[8 * (v67 >> 3)];
      uint64_t v92 = v68;
      uint64_t v94 = v69;
      memcpy(v68, v66, v67);
      uint64_t v93 = v69;
LABEL_65:
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      unint64_t v91 = 0;
      unint64_t v70 = *(const void **)a4;
      int64_t v71 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v71) {
        goto LABEL_68;
      }
      if (v71 < 0) {
        goto LABEL_84;
      }
      uint64_t v72 = (char *)operator new(v71);
      float v73 = &v72[8 * (v71 >> 3)];
      uint64_t v89 = v72;
      unint64_t v91 = v73;
      memcpy(v72, v70, v71);
      uint64_t v90 = v73;
LABEL_68:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)15>(a1, a2, (const void **)&v92, (const void **)&v89);
      if (v89)
      {
        uint64_t v90 = v89;
        operator delete(v89);
      }
      uint64_t v19 = v92;
      if (!v92) {
        return;
      }
      uint64_t v93 = (char *)v92;
      break;
    case 0x10:
      short float v86 = 0;
      short float v87 = 0;
      uint64_t v88 = 0;
      float v75 = *(const void **)a3;
      uint64_t v74 = *(void *)(a3 + 8);
      int64_t v76 = v74 - *(void *)a3;
      if (v74 == *(void *)a3) {
        goto LABEL_75;
      }
      if (v76 < 0) {
        goto LABEL_84;
      }
      uint64_t v77 = (char *)operator new(v74 - *(void *)a3);
      unint64_t v78 = &v77[8 * (v76 >> 3)];
      short float v86 = v77;
      uint64_t v88 = v78;
      memcpy(v77, v75, v76);
      short float v87 = v78;
LABEL_75:
      unint64_t v83 = 0;
      short float v84 = 0;
      uint64_t v85 = 0;
      float v79 = *(const void **)a4;
      int64_t v80 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v80) {
        goto LABEL_78;
      }
      if (v80 < 0) {
LABEL_84:
      }
        abort();
      float v81 = (char *)operator new(v80);
      float v82 = &v81[8 * (v80 >> 3)];
      unint64_t v83 = v81;
      uint64_t v85 = v82;
      memcpy(v81, v79, v80);
      short float v84 = v82;
LABEL_78:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)16>(a1, a2, (const void **)&v86, (const void **)&v83);
      if (v83)
      {
        short float v84 = v83;
        operator delete(v83);
      }
      uint64_t v19 = v86;
      if (!v86) {
        return;
      }
      short float v87 = v86;
      break;
    default:
      return;
  }
  operator delete(v19);
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t Value = *(void *)**a2;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v210[0] = ElementType;
  uint64_t v208 = *(void *)**a1;
  uint64_t v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v208);
  uint64_t Value = v9;
  uint64_t v207 = *(void *)(*a1)[1];
  uint64_t v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v207);
  uint64_t v207 = ElementType;
  uint64_t v208 = v10;
  uint64_t v11 = *(void **)(*(void *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v206 = ElementType;
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v205 = v12;
    if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v204 = v13;
    v210[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v205);
    uint64_t v208 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v204);
  }
  if (mlir::Type::isF32((mlir::Type *)v210)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v208))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v201 = 0;
      uint64_t v202 = 0;
      unint64_t v203 = 0;
      uint64_t v98 = *a3;
      int64_t v99 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v99)
      {
        if (v99 < 0) {
          goto LABEL_175;
        }
        uint64_t v100 = (char *)operator new(v99);
        int v101 = &v100[8 * (v99 >> 3)];
        uint64_t v201 = v100;
        unint64_t v203 = v101;
        memcpy(v100, v98, v99);
        uint64_t v202 = v101;
      }
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      unint64_t v102 = *a4;
      int64_t v103 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v103)
      {
        if (v103 < 0) {
          goto LABEL_175;
        }
        uint64_t v104 = operator new(v103);
        uint64_t v105 = &v104[v103 >> 3];
        long long v198 = v104;
        uint64_t v200 = v105;
        memcpy(v104, v102, v103);
        uint64_t v199 = v105;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v201, &v198);
      if (v198)
      {
        uint64_t v199 = v198;
        operator delete(v198);
      }
      int64_t v22 = v201;
      if (v201)
      {
        uint64_t v202 = v201;
        goto LABEL_173;
      }
      return;
    }
    unint64_t v195 = 0;
    uint64_t v196 = 0;
    uint64_t v197 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_175;
      }
      int64_t v16 = (char *)operator new(v15);
      int64_t v17 = &v16[8 * (v15 >> 3)];
      unint64_t v195 = v16;
      uint64_t v197 = v17;
      memcpy(v16, v14, v15);
      uint64_t v196 = v17;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_19;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      int64_t v192 = v20;
      uint64_t v194 = v21;
      memcpy(v20, v18, v19);
      uint64_t v193 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v195, &v192);
      if (v192)
      {
        uint64_t v193 = v192;
        operator delete(v192);
      }
      int64_t v22 = v195;
      if (v195)
      {
        uint64_t v196 = v195;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v210)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v208))
  {
    if (!mlir::Type::isF32((mlir::Type *)v210)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v208))
    {
      if (mlir::Type::isF32((mlir::Type *)v210)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v208))
      {
        long long v165 = 0;
        long long v166 = 0;
        unint64_t v167 = 0;
        unint64_t v42 = *a3;
        int64_t v43 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v43)
        {
          if (v43 < 0) {
            goto LABEL_175;
          }
          int64_t v44 = (char *)operator new(v43);
          uint64_t v45 = &v44[8 * (v43 >> 3)];
          long long v165 = v44;
          unint64_t v167 = v45;
          memcpy(v44, v42, v43);
          long long v166 = v45;
        }
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        uint64_t v46 = *a4;
        int64_t v47 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v47)
        {
          if (v47 < 0) {
            goto LABEL_175;
          }
          uint64_t v48 = (char *)operator new(v47);
          int64_t v49 = &v48[8 * (v47 >> 3)];
          uint64_t v162 = v48;
          uint64_t v164 = v49;
          memcpy(v48, v46, v47);
          uint64_t v163 = v49;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v165, (void **)&v162);
        if (v162)
        {
          uint64_t v163 = v162;
          operator delete(v162);
        }
        int64_t v22 = v165;
        if (v165)
        {
          long long v166 = v165;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v210)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v208))
      {
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        uint64_t v161 = 0;
        uint64_t v50 = *a3;
        int64_t v51 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v51)
        {
          if (v51 < 0) {
            goto LABEL_175;
          }
          uint64_t v52 = (char *)operator new(v51);
          int64_t v53 = &v52[8 * (v51 >> 3)];
          uint64_t v159 = v52;
          uint64_t v161 = v53;
          memcpy(v52, v50, v51);
          uint64_t v160 = v53;
        }
        char v156 = 0;
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        unint64_t v54 = *a4;
        int64_t v55 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v55)
        {
          if (v55 < 0) {
            goto LABEL_175;
          }
          uint64_t v56 = (char *)operator new(v55);
          unint64_t v57 = &v56[8 * (v55 >> 3)];
          char v156 = v56;
          uint64_t v158 = v57;
          memcpy(v56, v54, v55);
          uint64_t v157 = v57;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v159, (void **)&v156);
        if (v156)
        {
          uint64_t v157 = v156;
          operator delete(v156);
        }
        int64_t v22 = v159;
        if (v159)
        {
          uint64_t v160 = v159;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v210))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          unint64_t v147 = 0;
          uint64_t v148 = 0;
          uint64_t v149 = 0;
          int64_t v58 = *a3;
          int64_t v59 = (unsigned char *)a3[1] - (unsigned char *)*a3;
          if (v59)
          {
            if (v59 < 0) {
              goto LABEL_175;
            }
            unint64_t v60 = (char *)operator new(v59);
            unint64_t v61 = &v60[8 * (v59 >> 3)];
            unint64_t v147 = v60;
            uint64_t v149 = v61;
            memcpy(v60, v58, v59);
            uint64_t v148 = v61;
          }
          uint64_t v144 = 0;
          unint64_t v145 = 0;
          uint64_t v146 = 0;
          int64_t v62 = *a4;
          int64_t v63 = (unsigned char *)a4[1] - (unsigned char *)*a4;
          if (v63)
          {
            if (v63 < 0) {
              goto LABEL_175;
            }
            uint64_t v64 = (char *)operator new(v63);
            uint64_t v65 = &v64[8 * (v63 >> 3)];
            uint64_t v144 = v64;
            uint64_t v146 = v65;
            memcpy(v64, v62, v63);
            unint64_t v145 = v65;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v147, (void **)&v144);
          if (v144)
          {
            unint64_t v145 = v144;
            operator delete(v144);
          }
          int64_t v22 = v147;
          if (v147)
          {
            uint64_t v148 = v147;
            goto LABEL_173;
          }
          return;
        }
        uint64_t v153 = 0;
        unint64_t v154 = 0;
        uint64_t v155 = 0;
        float v82 = *a3;
        int64_t v83 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v83)
        {
          if (v83 < 0) {
            goto LABEL_175;
          }
          short float v84 = (char *)operator new(v83);
          uint64_t v85 = &v84[8 * (v83 >> 3)];
          uint64_t v153 = v84;
          uint64_t v155 = v85;
          memcpy(v84, v82, v83);
          unint64_t v154 = v85;
        }
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        short float v86 = *a4;
        int64_t v87 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v87)
        {
          if (v87 < 0) {
            goto LABEL_175;
          }
          uint64_t v88 = (char *)operator new(v87);
          uint64_t v89 = &v88[8 * (v87 >> 3)];
          uint64_t v150 = v88;
          uint64_t v152 = v89;
          memcpy(v88, v86, v87);
          uint64_t v151 = v89;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v153, (void **)&v150);
        if (v150)
        {
          uint64_t v151 = v150;
          operator delete(v150);
        }
        int64_t v22 = v153;
        if (v153)
        {
          unint64_t v154 = v153;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v210))
      {
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        uint64_t v66 = *a3;
        int64_t v67 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v67)
        {
          if (v67 < 0) {
            goto LABEL_175;
          }
          long long v68 = (char *)operator new(v67);
          uint64_t v69 = &v68[8 * (v67 >> 3)];
          uint64_t v141 = v68;
          uint64_t v143 = v69;
          memcpy(v68, v66, v67);
          uint64_t v142 = v69;
        }
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        unint64_t v70 = *a4;
        int64_t v71 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v71)
        {
          if (v71 < 0) {
            goto LABEL_175;
          }
          uint64_t v72 = (char *)operator new(v71);
          float v73 = &v72[8 * (v71 >> 3)];
          char v138 = v72;
          uint64_t v140 = v73;
          memcpy(v72, v70, v71);
          uint64_t v139 = v73;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v141, (void **)&v138);
        if (v138)
        {
          uint64_t v139 = v138;
          operator delete(v138);
        }
        int64_t v22 = v141;
        if (v141)
        {
          uint64_t v142 = v141;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v210, 64))
      {
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        uint64_t v74 = *a3;
        int64_t v75 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v75)
        {
          if (v75 < 0) {
            goto LABEL_175;
          }
          int64_t v76 = (char *)operator new(v75);
          uint64_t v77 = &v76[8 * (v75 >> 3)];
          uint64_t v135 = v76;
          uint64_t v137 = v77;
          memcpy(v76, v74, v75);
          uint64_t v136 = v77;
        }
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        unint64_t v78 = *a4;
        int64_t v79 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v79)
        {
          if (v79 < 0) {
            goto LABEL_175;
          }
          int64_t v80 = (char *)operator new(v79);
          float v81 = &v80[8 * (v79 >> 3)];
          uint64_t v132 = v80;
          uint64_t v134 = v81;
          memcpy(v80, v78, v79);
          uint64_t v133 = v81;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v135, (void **)&v132);
        if (v132)
        {
          uint64_t v133 = v132;
          operator delete(v132);
        }
        int64_t v22 = v135;
        if (v135)
        {
          uint64_t v136 = v135;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v210, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v210, 16))
        {
          std::vector<long long>::vector(v125, (uint64_t)a3);
          std::vector<long long>::vector(v124, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)v125, (void **)v124);
          if (v124[0])
          {
            v124[1] = v124[0];
            operator delete(v124[0]);
          }
          int64_t v22 = (void *)v125[0];
          if (v125[0])
          {
            v125[1] = v125[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v210, 8) && !mlir::Type::isInteger((mlir::Type *)v210, 1)) {
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>((mlir::Type *)&v207);
          }
          std::vector<long long>::vector(v123, (uint64_t)a3);
          std::vector<long long>::vector(v122, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)v123, (void **)v122);
          if (v122[0])
          {
            v122[1] = v122[0];
            operator delete(v122[0]);
          }
          int64_t v22 = v123[0];
          if (v123[0])
          {
            v123[1] = v123[0];
            goto LABEL_173;
          }
        }
        return;
      }
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v90 = *a3;
      int64_t v91 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v91)
      {
        if (v91 < 0) {
          goto LABEL_175;
        }
        uint64_t v92 = (char *)operator new(v91);
        uint64_t v93 = &v92[8 * (v91 >> 3)];
        uint64_t v129 = v92;
        uint64_t v131 = v93;
        memcpy(v92, v90, v91);
        uint64_t v130 = v93;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      uint64_t v94 = *a4;
      int64_t v95 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v95)
      {
        if (v95 < 0) {
          goto LABEL_175;
        }
        uint64_t v96 = (char *)operator new(v95);
        unint64_t v97 = &v96[8 * (v95 >> 3)];
        uint64_t v126 = v96;
        uint64_t v128 = v97;
        memcpy(v96, v94, v95);
        uint64_t v127 = v97;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v129, (void **)&v126);
      if (v126)
      {
        uint64_t v127 = v126;
        operator delete(v126);
      }
      int64_t v22 = v129;
      if (v129)
      {
        uint64_t v130 = v129;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      uint64_t v34 = *a3;
      int64_t v35 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v35)
      {
        if (v35 < 0) {
          goto LABEL_175;
        }
        uint64_t v36 = (char *)operator new(v35);
        uint64_t v37 = &v36[8 * (v35 >> 3)];
        uint64_t v171 = v36;
        unint64_t v173 = v37;
        memcpy(v36, v34, v35);
        uint64_t v172 = v37;
      }
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      unint64_t v170 = 0;
      uint64_t v38 = *a4;
      int64_t v39 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v39)
      {
        if (v39 < 0) {
          goto LABEL_175;
        }
        int64_t v40 = (char *)operator new(v39);
        int v41 = &v40[8 * (v39 >> 3)];
        uint64_t v168 = v40;
        unint64_t v170 = v41;
        memcpy(v40, v38, v39);
        uint64_t v169 = v41;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v171, (void **)&v168);
      if (v168)
      {
        uint64_t v169 = v168;
        operator delete(v168);
      }
      int64_t v22 = v171;
      if (v171)
      {
        uint64_t v172 = v171;
        goto LABEL_173;
      }
      return;
    }
    unsigned int v177 = 0;
    uint64_t v178 = 0;
    uint64_t v179 = 0;
    uint64_t v114 = *a3;
    int64_t v115 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v115)
    {
      if (v115 < 0) {
        goto LABEL_175;
      }
      unint64_t v116 = (char *)operator new(v115);
      BOOL v117 = &v116[8 * (v115 >> 3)];
      unsigned int v177 = v116;
      uint64_t v179 = v117;
      memcpy(v116, v114, v115);
      uint64_t v178 = v117;
    }
    int v174 = 0;
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    uint64_t v118 = *a4;
    int64_t v119 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v119)
    {
      if (v119 < 0) {
        goto LABEL_175;
      }
      uint64_t v120 = (char *)operator new(v119);
      char v121 = &v120[8 * (v119 >> 3)];
      int v174 = v120;
      uint64_t v176 = v121;
      memcpy(v120, v118, v119);
      uint64_t v175 = v121;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v177, (void **)&v174, v32, v33);
    if (v174)
    {
      uint64_t v175 = v174;
      operator delete(v174);
    }
    int64_t v22 = v177;
    if (v177)
    {
      uint64_t v178 = v177;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    unint64_t v190 = 0;
    unsigned int v189 = 0;
    uint64_t v191 = 0;
    __int16 v106 = *a3;
    int64_t v107 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v107)
    {
      if (v107 < 0) {
        goto LABEL_175;
      }
      uint64_t v108 = (char *)operator new(v107);
      uint64_t v109 = &v108[8 * (v107 >> 3)];
      unsigned int v189 = v108;
      uint64_t v191 = v109;
      memcpy(v108, v106, v107);
      unint64_t v190 = v109;
    }
    unint64_t v187 = 0;
    int v186 = 0;
    uint64_t v188 = 0;
    uint64_t v110 = *a4;
    int64_t v111 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v111)
    {
      if (v111 < 0) {
        goto LABEL_175;
      }
      unint64_t v112 = (char *)operator new(v111);
      unint64_t v113 = &v112[8 * (v111 >> 3)];
      int v186 = v112;
      uint64_t v188 = v113;
      memcpy(v112, v110, v111);
      unint64_t v187 = v113;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v189, (void **)&v186, v23);
    if (v186)
    {
      unint64_t v187 = v186;
      operator delete(v186);
    }
    int64_t v22 = v189;
    if (v189)
    {
      unint64_t v190 = v189;
      goto LABEL_173;
    }
    return;
  }
  unint64_t v184 = 0;
  uint64_t v183 = 0;
  uint64_t v185 = 0;
  int v24 = *a3;
  int64_t v25 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v25)
  {
    if (v25 < 0) {
      goto LABEL_175;
    }
    int64_t v26 = (char *)operator new(v25);
    unint64_t v27 = &v26[8 * (v25 >> 3)];
    uint64_t v183 = v26;
    uint64_t v185 = v27;
    memcpy(v26, v24, v25);
    unint64_t v184 = v27;
  }
  uint64_t v181 = 0;
  __p = 0;
  unsigned int v182 = 0;
  unint64_t v28 = *a4;
  int64_t v29 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v29)
  {
    if (v29 < 0) {
      goto LABEL_175;
    }
    uint64_t v30 = (char *)operator new(v29);
    int64_t v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    unsigned int v182 = v31;
    memcpy(v30, v28, v29);
    uint64_t v181 = v31;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v183, (void **)&__p);
  if (__p)
  {
    uint64_t v181 = __p;
    operator delete(__p);
  }
  int64_t v22 = v183;
  if (v183)
  {
    unint64_t v184 = v183;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t Value = *(void *)**a2;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v210[0] = ElementType;
  uint64_t v208 = *(void *)**a1;
  uint64_t v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v208);
  uint64_t Value = v9;
  uint64_t v207 = *(void *)(*a1)[1];
  uint64_t v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v207);
  uint64_t v207 = ElementType;
  uint64_t v208 = v10;
  uint64_t v11 = *(void **)(*(void *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v206 = ElementType;
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v205 = v12;
    if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v204 = v13;
    v210[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v205);
    uint64_t v208 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v204);
  }
  if (mlir::Type::isF32((mlir::Type *)v210)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v208))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v201 = 0;
      uint64_t v202 = 0;
      unint64_t v203 = 0;
      uint64_t v98 = *a3;
      int64_t v99 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v99)
      {
        if (v99 < 0) {
          goto LABEL_175;
        }
        uint64_t v100 = (char *)operator new(v99);
        int v101 = &v100[8 * (v99 >> 3)];
        uint64_t v201 = v100;
        unint64_t v203 = v101;
        memcpy(v100, v98, v99);
        uint64_t v202 = v101;
      }
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      unint64_t v102 = *a4;
      int64_t v103 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v103)
      {
        if (v103 < 0) {
          goto LABEL_175;
        }
        uint64_t v104 = operator new(v103);
        uint64_t v105 = &v104[v103 >> 3];
        long long v198 = v104;
        uint64_t v200 = v105;
        memcpy(v104, v102, v103);
        uint64_t v199 = v105;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v201, &v198);
      if (v198)
      {
        uint64_t v199 = v198;
        operator delete(v198);
      }
      int64_t v22 = v201;
      if (v201)
      {
        uint64_t v202 = v201;
        goto LABEL_173;
      }
      return;
    }
    unint64_t v195 = 0;
    uint64_t v196 = 0;
    uint64_t v197 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_175;
      }
      int64_t v16 = (char *)operator new(v15);
      int64_t v17 = &v16[8 * (v15 >> 3)];
      unint64_t v195 = v16;
      uint64_t v197 = v17;
      memcpy(v16, v14, v15);
      uint64_t v196 = v17;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_19;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      int64_t v192 = v20;
      uint64_t v194 = v21;
      memcpy(v20, v18, v19);
      uint64_t v193 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v195, &v192);
      if (v192)
      {
        uint64_t v193 = v192;
        operator delete(v192);
      }
      int64_t v22 = v195;
      if (v195)
      {
        uint64_t v196 = v195;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v210)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v208))
  {
    if (!mlir::Type::isF32((mlir::Type *)v210)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v208))
    {
      if (mlir::Type::isF32((mlir::Type *)v210)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v208))
      {
        long long v165 = 0;
        long long v166 = 0;
        unint64_t v167 = 0;
        unint64_t v42 = *a3;
        int64_t v43 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v43)
        {
          if (v43 < 0) {
            goto LABEL_175;
          }
          int64_t v44 = (char *)operator new(v43);
          uint64_t v45 = &v44[8 * (v43 >> 3)];
          long long v165 = v44;
          unint64_t v167 = v45;
          memcpy(v44, v42, v43);
          long long v166 = v45;
        }
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        uint64_t v46 = *a4;
        int64_t v47 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v47)
        {
          if (v47 < 0) {
            goto LABEL_175;
          }
          uint64_t v48 = (char *)operator new(v47);
          int64_t v49 = &v48[8 * (v47 >> 3)];
          uint64_t v162 = v48;
          uint64_t v164 = v49;
          memcpy(v48, v46, v47);
          uint64_t v163 = v49;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v165, (void **)&v162);
        if (v162)
        {
          uint64_t v163 = v162;
          operator delete(v162);
        }
        int64_t v22 = v165;
        if (v165)
        {
          long long v166 = v165;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v210)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v208))
      {
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        uint64_t v161 = 0;
        uint64_t v50 = *a3;
        int64_t v51 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v51)
        {
          if (v51 < 0) {
            goto LABEL_175;
          }
          uint64_t v52 = (char *)operator new(v51);
          int64_t v53 = &v52[8 * (v51 >> 3)];
          uint64_t v159 = v52;
          uint64_t v161 = v53;
          memcpy(v52, v50, v51);
          uint64_t v160 = v53;
        }
        char v156 = 0;
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        unint64_t v54 = *a4;
        int64_t v55 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v55)
        {
          if (v55 < 0) {
            goto LABEL_175;
          }
          uint64_t v56 = (char *)operator new(v55);
          unint64_t v57 = &v56[8 * (v55 >> 3)];
          char v156 = v56;
          uint64_t v158 = v57;
          memcpy(v56, v54, v55);
          uint64_t v157 = v57;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v159, (void **)&v156);
        if (v156)
        {
          uint64_t v157 = v156;
          operator delete(v156);
        }
        int64_t v22 = v159;
        if (v159)
        {
          uint64_t v160 = v159;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v210))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          unint64_t v147 = 0;
          uint64_t v148 = 0;
          uint64_t v149 = 0;
          int64_t v58 = *a3;
          int64_t v59 = (unsigned char *)a3[1] - (unsigned char *)*a3;
          if (v59)
          {
            if (v59 < 0) {
              goto LABEL_175;
            }
            unint64_t v60 = (char *)operator new(v59);
            unint64_t v61 = &v60[8 * (v59 >> 3)];
            unint64_t v147 = v60;
            uint64_t v149 = v61;
            memcpy(v60, v58, v59);
            uint64_t v148 = v61;
          }
          uint64_t v144 = 0;
          unint64_t v145 = 0;
          uint64_t v146 = 0;
          int64_t v62 = *a4;
          int64_t v63 = (unsigned char *)a4[1] - (unsigned char *)*a4;
          if (v63)
          {
            if (v63 < 0) {
              goto LABEL_175;
            }
            uint64_t v64 = (char *)operator new(v63);
            uint64_t v65 = &v64[8 * (v63 >> 3)];
            uint64_t v144 = v64;
            uint64_t v146 = v65;
            memcpy(v64, v62, v63);
            unint64_t v145 = v65;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v147, (void **)&v144);
          if (v144)
          {
            unint64_t v145 = v144;
            operator delete(v144);
          }
          int64_t v22 = v147;
          if (v147)
          {
            uint64_t v148 = v147;
            goto LABEL_173;
          }
          return;
        }
        uint64_t v153 = 0;
        unint64_t v154 = 0;
        uint64_t v155 = 0;
        float v82 = *a3;
        int64_t v83 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v83)
        {
          if (v83 < 0) {
            goto LABEL_175;
          }
          short float v84 = (char *)operator new(v83);
          uint64_t v85 = &v84[8 * (v83 >> 3)];
          uint64_t v153 = v84;
          uint64_t v155 = v85;
          memcpy(v84, v82, v83);
          unint64_t v154 = v85;
        }
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        short float v86 = *a4;
        int64_t v87 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v87)
        {
          if (v87 < 0) {
            goto LABEL_175;
          }
          uint64_t v88 = (char *)operator new(v87);
          uint64_t v89 = &v88[8 * (v87 >> 3)];
          uint64_t v150 = v88;
          uint64_t v152 = v89;
          memcpy(v88, v86, v87);
          uint64_t v151 = v89;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v153, (void **)&v150);
        if (v150)
        {
          uint64_t v151 = v150;
          operator delete(v150);
        }
        int64_t v22 = v153;
        if (v153)
        {
          unint64_t v154 = v153;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v210))
      {
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        uint64_t v66 = *a3;
        int64_t v67 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v67)
        {
          if (v67 < 0) {
            goto LABEL_175;
          }
          long long v68 = (char *)operator new(v67);
          uint64_t v69 = &v68[8 * (v67 >> 3)];
          uint64_t v141 = v68;
          uint64_t v143 = v69;
          memcpy(v68, v66, v67);
          uint64_t v142 = v69;
        }
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        unint64_t v70 = *a4;
        int64_t v71 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v71)
        {
          if (v71 < 0) {
            goto LABEL_175;
          }
          uint64_t v72 = (char *)operator new(v71);
          float v73 = &v72[8 * (v71 >> 3)];
          char v138 = v72;
          uint64_t v140 = v73;
          memcpy(v72, v70, v71);
          uint64_t v139 = v73;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v141, (void **)&v138);
        if (v138)
        {
          uint64_t v139 = v138;
          operator delete(v138);
        }
        int64_t v22 = v141;
        if (v141)
        {
          uint64_t v142 = v141;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v210, 64))
      {
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        uint64_t v74 = *a3;
        int64_t v75 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v75)
        {
          if (v75 < 0) {
            goto LABEL_175;
          }
          int64_t v76 = (char *)operator new(v75);
          uint64_t v77 = &v76[8 * (v75 >> 3)];
          uint64_t v135 = v76;
          uint64_t v137 = v77;
          memcpy(v76, v74, v75);
          uint64_t v136 = v77;
        }
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        unint64_t v78 = *a4;
        int64_t v79 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v79)
        {
          if (v79 < 0) {
            goto LABEL_175;
          }
          int64_t v80 = (char *)operator new(v79);
          float v81 = &v80[8 * (v79 >> 3)];
          uint64_t v132 = v80;
          uint64_t v134 = v81;
          memcpy(v80, v78, v79);
          uint64_t v133 = v81;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v135, (void **)&v132);
        if (v132)
        {
          uint64_t v133 = v132;
          operator delete(v132);
        }
        int64_t v22 = v135;
        if (v135)
        {
          uint64_t v136 = v135;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v210, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v210, 16))
        {
          std::vector<long long>::vector(v125, (uint64_t)a3);
          std::vector<long long>::vector(v124, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)v125, (void **)v124);
          if (v124[0])
          {
            v124[1] = v124[0];
            operator delete(v124[0]);
          }
          int64_t v22 = (void *)v125[0];
          if (v125[0])
          {
            v125[1] = v125[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v210, 8) && !mlir::Type::isInteger((mlir::Type *)v210, 1)) {
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>((mlir::Type *)&v207);
          }
          std::vector<long long>::vector(v123, (uint64_t)a3);
          std::vector<long long>::vector(v122, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)v123, (void **)v122);
          if (v122[0])
          {
            v122[1] = v122[0];
            operator delete(v122[0]);
          }
          int64_t v22 = v123[0];
          if (v123[0])
          {
            v123[1] = v123[0];
            goto LABEL_173;
          }
        }
        return;
      }
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v90 = *a3;
      int64_t v91 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v91)
      {
        if (v91 < 0) {
          goto LABEL_175;
        }
        uint64_t v92 = (char *)operator new(v91);
        uint64_t v93 = &v92[8 * (v91 >> 3)];
        uint64_t v129 = v92;
        uint64_t v131 = v93;
        memcpy(v92, v90, v91);
        uint64_t v130 = v93;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      uint64_t v94 = *a4;
      int64_t v95 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v95)
      {
        if (v95 < 0) {
          goto LABEL_175;
        }
        uint64_t v96 = (char *)operator new(v95);
        unint64_t v97 = &v96[8 * (v95 >> 3)];
        uint64_t v126 = v96;
        uint64_t v128 = v97;
        memcpy(v96, v94, v95);
        uint64_t v127 = v97;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v129, (void **)&v126);
      if (v126)
      {
        uint64_t v127 = v126;
        operator delete(v126);
      }
      int64_t v22 = v129;
      if (v129)
      {
        uint64_t v130 = v129;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      uint64_t v34 = *a3;
      int64_t v35 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v35)
      {
        if (v35 < 0) {
          goto LABEL_175;
        }
        uint64_t v36 = (char *)operator new(v35);
        uint64_t v37 = &v36[8 * (v35 >> 3)];
        uint64_t v171 = v36;
        unint64_t v173 = v37;
        memcpy(v36, v34, v35);
        uint64_t v172 = v37;
      }
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      unint64_t v170 = 0;
      uint64_t v38 = *a4;
      int64_t v39 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v39)
      {
        if (v39 < 0) {
          goto LABEL_175;
        }
        int64_t v40 = (char *)operator new(v39);
        int v41 = &v40[8 * (v39 >> 3)];
        uint64_t v168 = v40;
        unint64_t v170 = v41;
        memcpy(v40, v38, v39);
        uint64_t v169 = v41;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v171, (void **)&v168);
      if (v168)
      {
        uint64_t v169 = v168;
        operator delete(v168);
      }
      int64_t v22 = v171;
      if (v171)
      {
        uint64_t v172 = v171;
        goto LABEL_173;
      }
      return;
    }
    unsigned int v177 = 0;
    uint64_t v178 = 0;
    uint64_t v179 = 0;
    uint64_t v114 = *a3;
    int64_t v115 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v115)
    {
      if (v115 < 0) {
        goto LABEL_175;
      }
      unint64_t v116 = (char *)operator new(v115);
      BOOL v117 = &v116[8 * (v115 >> 3)];
      unsigned int v177 = v116;
      uint64_t v179 = v117;
      memcpy(v116, v114, v115);
      uint64_t v178 = v117;
    }
    int v174 = 0;
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    uint64_t v118 = *a4;
    int64_t v119 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v119)
    {
      if (v119 < 0) {
        goto LABEL_175;
      }
      uint64_t v120 = (char *)operator new(v119);
      char v121 = &v120[8 * (v119 >> 3)];
      int v174 = v120;
      uint64_t v176 = v121;
      memcpy(v120, v118, v119);
      uint64_t v175 = v121;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v177, (void **)&v174, v32, v33);
    if (v174)
    {
      uint64_t v175 = v174;
      operator delete(v174);
    }
    int64_t v22 = v177;
    if (v177)
    {
      uint64_t v178 = v177;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    unint64_t v190 = 0;
    unsigned int v189 = 0;
    uint64_t v191 = 0;
    __int16 v106 = *a3;
    int64_t v107 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v107)
    {
      if (v107 < 0) {
        goto LABEL_175;
      }
      uint64_t v108 = (char *)operator new(v107);
      uint64_t v109 = &v108[8 * (v107 >> 3)];
      unsigned int v189 = v108;
      uint64_t v191 = v109;
      memcpy(v108, v106, v107);
      unint64_t v190 = v109;
    }
    unint64_t v187 = 0;
    int v186 = 0;
    uint64_t v188 = 0;
    uint64_t v110 = *a4;
    int64_t v111 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v111)
    {
      if (v111 < 0) {
        goto LABEL_175;
      }
      unint64_t v112 = (char *)operator new(v111);
      unint64_t v113 = &v112[8 * (v111 >> 3)];
      int v186 = v112;
      uint64_t v188 = v113;
      memcpy(v112, v110, v111);
      unint64_t v187 = v113;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v189, (void **)&v186, v23);
    if (v186)
    {
      unint64_t v187 = v186;
      operator delete(v186);
    }
    int64_t v22 = v189;
    if (v189)
    {
      unint64_t v190 = v189;
      goto LABEL_173;
    }
    return;
  }
  unint64_t v184 = 0;
  uint64_t v183 = 0;
  uint64_t v185 = 0;
  int v24 = *a3;
  int64_t v25 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v25)
  {
    if (v25 < 0) {
      goto LABEL_175;
    }
    int64_t v26 = (char *)operator new(v25);
    unint64_t v27 = &v26[8 * (v25 >> 3)];
    uint64_t v183 = v26;
    uint64_t v185 = v27;
    memcpy(v26, v24, v25);
    unint64_t v184 = v27;
  }
  uint64_t v181 = 0;
  __p = 0;
  unsigned int v182 = 0;
  unint64_t v28 = *a4;
  int64_t v29 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v29)
  {
    if (v29 < 0) {
      goto LABEL_175;
    }
    uint64_t v30 = (char *)operator new(v29);
    int64_t v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    unsigned int v182 = v31;
    memcpy(v30, v28, v29);
    uint64_t v181 = v31;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v183, (void **)&__p);
  if (__p)
  {
    uint64_t v181 = __p;
    operator delete(__p);
  }
  int64_t v22 = v183;
  if (v183)
  {
    unint64_t v184 = v183;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t Value = *(void *)**a2;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v212[0] = ElementType;
  uint64_t v210 = *(void *)**a1;
  uint64_t v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v210);
  uint64_t Value = v9;
  uint64_t v209 = *(void *)(*a1)[1];
  uint64_t v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v209);
  uint64_t v209 = ElementType;
  uint64_t v210 = v10;
  uint64_t v11 = *(void **)(*(void *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v208 = ElementType;
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v207 = v12;
    if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v206 = v13;
    v212[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v208);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v207);
    uint64_t v210 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
  }
  if (mlir::Type::isF32((mlir::Type *)v212)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v210))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      unint64_t v203 = 0;
      uint64_t v204 = 0;
      uint64_t v205 = 0;
      uint64_t v100 = *a3;
      int64_t v101 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v101)
      {
        if (v101 < 0) {
          goto LABEL_175;
        }
        unint64_t v102 = (char *)operator new(v101);
        int64_t v103 = &v102[8 * (v101 >> 3)];
        unint64_t v203 = v102;
        uint64_t v205 = v103;
        memcpy(v102, v100, v101);
        uint64_t v204 = v103;
      }
      uint64_t v200 = 0;
      uint64_t v201 = 0;
      uint64_t v202 = 0;
      uint64_t v104 = *a4;
      int64_t v105 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v105)
      {
        if (v105 < 0) {
          goto LABEL_175;
        }
        __int16 v106 = operator new(v105);
        int64_t v107 = &v106[v105 >> 3];
        uint64_t v200 = v106;
        uint64_t v202 = v107;
        memcpy(v106, v104, v105);
        uint64_t v201 = v107;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v203, &v200);
      if (v200)
      {
        uint64_t v201 = v200;
        operator delete(v200);
      }
      int64_t v22 = v203;
      if (v203)
      {
        uint64_t v204 = v203;
        goto LABEL_173;
      }
      return;
    }
    uint64_t v197 = 0;
    long long v198 = 0;
    uint64_t v199 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_175;
      }
      int64_t v16 = (char *)operator new(v15);
      int64_t v17 = &v16[8 * (v15 >> 3)];
      uint64_t v197 = v16;
      uint64_t v199 = v17;
      memcpy(v16, v14, v15);
      long long v198 = v17;
    }
    uint64_t v194 = 0;
    unint64_t v195 = 0;
    uint64_t v196 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_19;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      uint64_t v194 = v20;
      uint64_t v196 = v21;
      memcpy(v20, v18, v19);
      unint64_t v195 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v197, &v194);
      if (v194)
      {
        unint64_t v195 = v194;
        operator delete(v194);
      }
      int64_t v22 = v197;
      if (v197)
      {
        long long v198 = v197;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v212)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v210))
  {
    if (!mlir::Type::isF32((mlir::Type *)v212)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v210))
    {
      if (mlir::Type::isF32((mlir::Type *)v212)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v210))
      {
        unint64_t v167 = 0;
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        unint64_t v42 = *a3;
        int64_t v43 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v43)
        {
          if (v43 < 0) {
            goto LABEL_175;
          }
          int64_t v44 = (char *)operator new(v43);
          uint64_t v45 = &v44[8 * (v43 >> 3)];
          unint64_t v167 = v44;
          uint64_t v169 = v45;
          memcpy(v44, v42, v43);
          uint64_t v168 = v45;
        }
        uint64_t v164 = 0;
        long long v165 = 0;
        long long v166 = 0;
        uint64_t v46 = *a4;
        int64_t v47 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v47)
        {
          if (v47 < 0) {
            goto LABEL_175;
          }
          uint64_t v48 = (char *)operator new(v47);
          int64_t v49 = &v48[8 * (v47 >> 3)];
          uint64_t v164 = v48;
          long long v166 = v49;
          memcpy(v48, v46, v47);
          long long v165 = v49;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v167, (void **)&v164);
        if (v164)
        {
          long long v165 = v164;
          operator delete(v164);
        }
        int64_t v22 = v167;
        if (v167)
        {
          uint64_t v168 = v167;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v212)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v210))
      {
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        uint64_t v50 = *a3;
        int64_t v51 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v51)
        {
          if (v51 < 0) {
            goto LABEL_175;
          }
          uint64_t v52 = (char *)operator new(v51);
          int64_t v53 = &v52[8 * (v51 >> 3)];
          uint64_t v161 = v52;
          uint64_t v163 = v53;
          memcpy(v52, v50, v51);
          uint64_t v162 = v53;
        }
        uint64_t v158 = 0;
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        unint64_t v54 = *a4;
        int64_t v55 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v55)
        {
          if (v55 < 0) {
            goto LABEL_175;
          }
          uint64_t v56 = (char *)operator new(v55);
          unint64_t v57 = &v56[8 * (v55 >> 3)];
          uint64_t v158 = v56;
          uint64_t v160 = v57;
          memcpy(v56, v54, v55);
          uint64_t v159 = v57;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v161, (void **)&v158);
        if (v158)
        {
          uint64_t v159 = v158;
          operator delete(v158);
        }
        int64_t v22 = v161;
        if (v161)
        {
          uint64_t v162 = v161;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v212))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          uint64_t v149 = 0;
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          unint64_t v60 = *a3;
          int64_t v61 = (unsigned char *)a3[1] - (unsigned char *)*a3;
          if (v61)
          {
            if (v61 < 0) {
              goto LABEL_175;
            }
            int64_t v62 = (char *)operator new(v61);
            int64_t v63 = &v62[8 * (v61 >> 3)];
            uint64_t v149 = v62;
            uint64_t v151 = v63;
            memcpy(v62, v60, v61);
            uint64_t v150 = v63;
          }
          uint64_t v146 = 0;
          unint64_t v147 = 0;
          uint64_t v148 = 0;
          uint64_t v64 = *a4;
          int64_t v65 = (unsigned char *)a4[1] - (unsigned char *)*a4;
          if (v65)
          {
            if (v65 < 0) {
              goto LABEL_175;
            }
            uint64_t v66 = (char *)operator new(v65);
            int64_t v67 = &v66[8 * (v65 >> 3)];
            uint64_t v146 = v66;
            uint64_t v148 = v67;
            memcpy(v66, v64, v65);
            unint64_t v147 = v67;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v149, (void **)&v146);
          if (v146)
          {
            unint64_t v147 = v146;
            operator delete(v146);
          }
          int64_t v22 = v149;
          if (v149)
          {
            uint64_t v150 = v149;
            goto LABEL_173;
          }
          return;
        }
        uint64_t v155 = 0;
        char v156 = 0;
        uint64_t v157 = 0;
        short float v84 = *a3;
        int64_t v85 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v85)
        {
          if (v85 < 0) {
            goto LABEL_175;
          }
          short float v86 = (char *)operator new(v85);
          int64_t v87 = &v86[8 * (v85 >> 3)];
          uint64_t v155 = v86;
          uint64_t v157 = v87;
          memcpy(v86, v84, v85);
          char v156 = v87;
        }
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        unint64_t v154 = 0;
        uint64_t v88 = *a4;
        int64_t v89 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v89)
        {
          if (v89 < 0) {
            goto LABEL_175;
          }
          uint64_t v90 = (char *)operator new(v89);
          int64_t v91 = &v90[8 * (v89 >> 3)];
          uint64_t v152 = v90;
          unint64_t v154 = v91;
          memcpy(v90, v88, v89);
          uint64_t v153 = v91;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v155, (void **)&v152, v58, v59);
        if (v152)
        {
          uint64_t v153 = v152;
          operator delete(v152);
        }
        int64_t v22 = v155;
        if (v155)
        {
          char v156 = v155;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v212))
      {
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        long long v68 = *a3;
        int64_t v69 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v69)
        {
          if (v69 < 0) {
            goto LABEL_175;
          }
          unint64_t v70 = (char *)operator new(v69);
          int64_t v71 = &v70[8 * (v69 >> 3)];
          uint64_t v143 = v70;
          unint64_t v145 = v71;
          memcpy(v70, v68, v69);
          uint64_t v144 = v71;
        }
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v72 = *a4;
        int64_t v73 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v73)
        {
          if (v73 < 0) {
            goto LABEL_175;
          }
          uint64_t v74 = (char *)operator new(v73);
          int64_t v75 = &v74[8 * (v73 >> 3)];
          uint64_t v140 = v74;
          uint64_t v142 = v75;
          memcpy(v74, v72, v73);
          uint64_t v141 = v75;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v143, (void **)&v140);
        if (v140)
        {
          uint64_t v141 = v140;
          operator delete(v140);
        }
        int64_t v22 = v143;
        if (v143)
        {
          uint64_t v144 = v143;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v212, 64))
      {
        uint64_t v137 = 0;
        char v138 = 0;
        uint64_t v139 = 0;
        int64_t v76 = *a3;
        int64_t v77 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v77)
        {
          if (v77 < 0) {
            goto LABEL_175;
          }
          unint64_t v78 = (char *)operator new(v77);
          int64_t v79 = &v78[8 * (v77 >> 3)];
          uint64_t v137 = v78;
          uint64_t v139 = v79;
          memcpy(v78, v76, v77);
          char v138 = v79;
        }
        uint64_t v134 = 0;
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        int64_t v80 = *a4;
        int64_t v81 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v81)
        {
          if (v81 < 0) {
            goto LABEL_175;
          }
          float v82 = (char *)operator new(v81);
          int64_t v83 = &v82[8 * (v81 >> 3)];
          uint64_t v134 = v82;
          uint64_t v136 = v83;
          memcpy(v82, v80, v81);
          uint64_t v135 = v83;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v137, (void **)&v134);
        if (v134)
        {
          uint64_t v135 = v134;
          operator delete(v134);
        }
        int64_t v22 = v137;
        if (v137)
        {
          char v138 = v137;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v212, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v212, 16))
        {
          std::vector<long long>::vector(v127, (uint64_t)a3);
          std::vector<long long>::vector(v126, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)v127, (void **)v126);
          if (v126[0])
          {
            v126[1] = v126[0];
            operator delete(v126[0]);
          }
          int64_t v22 = (void *)v127[0];
          if (v127[0])
          {
            v127[1] = v127[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v212, 8) && !mlir::Type::isInteger((mlir::Type *)v212, 1)) {
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>((mlir::Type *)&v209);
          }
          std::vector<long long>::vector(v125, (uint64_t)a3);
          std::vector<long long>::vector(v124, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)v125, (void **)v124);
          if (v124[0])
          {
            v124[1] = v124[0];
            operator delete(v124[0]);
          }
          int64_t v22 = v125[0];
          if (v125[0])
          {
            v125[1] = v125[0];
            goto LABEL_173;
          }
        }
        return;
      }
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      uint64_t v92 = *a3;
      int64_t v93 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v93)
      {
        if (v93 < 0) {
          goto LABEL_175;
        }
        uint64_t v94 = (char *)operator new(v93);
        int64_t v95 = &v94[8 * (v93 >> 3)];
        uint64_t v131 = v94;
        uint64_t v133 = v95;
        memcpy(v94, v92, v93);
        uint64_t v132 = v95;
      }
      uint64_t v128 = 0;
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v96 = *a4;
      int64_t v97 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v97)
      {
        if (v97 < 0) {
          goto LABEL_175;
        }
        uint64_t v98 = (char *)operator new(v97);
        int64_t v99 = &v98[8 * (v97 >> 3)];
        uint64_t v128 = v98;
        uint64_t v130 = v99;
        memcpy(v98, v96, v97);
        uint64_t v129 = v99;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v131, (void **)&v128);
      if (v128)
      {
        uint64_t v129 = v128;
        operator delete(v128);
      }
      int64_t v22 = v131;
      if (v131)
      {
        uint64_t v132 = v131;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      unint64_t v173 = 0;
      int v174 = 0;
      uint64_t v175 = 0;
      uint64_t v34 = *a3;
      int64_t v35 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v35)
      {
        if (v35 < 0) {
          goto LABEL_175;
        }
        uint64_t v36 = (char *)operator new(v35);
        uint64_t v37 = &v36[8 * (v35 >> 3)];
        unint64_t v173 = v36;
        uint64_t v175 = v37;
        memcpy(v36, v34, v35);
        int v174 = v37;
      }
      unint64_t v170 = 0;
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      uint64_t v38 = *a4;
      int64_t v39 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v39)
      {
        if (v39 < 0) {
          goto LABEL_175;
        }
        int64_t v40 = (char *)operator new(v39);
        int v41 = &v40[8 * (v39 >> 3)];
        unint64_t v170 = v40;
        uint64_t v172 = v41;
        memcpy(v40, v38, v39);
        uint64_t v171 = v41;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v173, (void **)&v170);
      if (v170)
      {
        uint64_t v171 = v170;
        operator delete(v170);
      }
      int64_t v22 = v173;
      if (v173)
      {
        int v174 = v173;
        goto LABEL_173;
      }
      return;
    }
    uint64_t v179 = 0;
    unint64_t v180 = 0;
    uint64_t v181 = 0;
    unint64_t v116 = *a3;
    int64_t v117 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v117)
    {
      if (v117 < 0) {
        goto LABEL_175;
      }
      uint64_t v118 = (char *)operator new(v117);
      int64_t v119 = &v118[8 * (v117 >> 3)];
      uint64_t v179 = v118;
      uint64_t v181 = v119;
      memcpy(v118, v116, v117);
      unint64_t v180 = v119;
    }
    uint64_t v176 = 0;
    unsigned int v177 = 0;
    uint64_t v178 = 0;
    uint64_t v120 = *a4;
    int64_t v121 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v121)
    {
      if (v121 < 0) {
        goto LABEL_175;
      }
      uint64_t v122 = (char *)operator new(v121);
      char v123 = &v122[8 * (v121 >> 3)];
      uint64_t v176 = v122;
      uint64_t v178 = v123;
      memcpy(v122, v120, v121);
      unsigned int v177 = v123;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v179, (void **)&v176, v32, v33);
    if (v176)
    {
      unsigned int v177 = v176;
      operator delete(v176);
    }
    int64_t v22 = v179;
    if (v179)
    {
      unint64_t v180 = v179;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    int64_t v192 = 0;
    uint64_t v191 = 0;
    uint64_t v193 = 0;
    uint64_t v108 = *a3;
    int64_t v109 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v109)
    {
      if (v109 < 0) {
        goto LABEL_175;
      }
      uint64_t v110 = (char *)operator new(v109);
      int64_t v111 = &v110[8 * (v109 >> 3)];
      uint64_t v191 = v110;
      uint64_t v193 = v111;
      memcpy(v110, v108, v109);
      int64_t v192 = v111;
    }
    unsigned int v189 = 0;
    uint64_t v188 = 0;
    unint64_t v190 = 0;
    unint64_t v112 = *a4;
    int64_t v113 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v113)
    {
      if (v113 < 0) {
        goto LABEL_175;
      }
      uint64_t v114 = (char *)operator new(v113);
      int64_t v115 = &v114[8 * (v113 >> 3)];
      uint64_t v188 = v114;
      unint64_t v190 = v115;
      memcpy(v114, v112, v113);
      unsigned int v189 = v115;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v191, (void **)&v188, v23);
    if (v188)
    {
      unsigned int v189 = v188;
      operator delete(v188);
    }
    int64_t v22 = v191;
    if (v191)
    {
      int64_t v192 = v191;
      goto LABEL_173;
    }
    return;
  }
  int v186 = 0;
  uint64_t v185 = 0;
  unint64_t v187 = 0;
  int v24 = *a3;
  int64_t v25 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v25)
  {
    if (v25 < 0) {
      goto LABEL_175;
    }
    int64_t v26 = (char *)operator new(v25);
    unint64_t v27 = &v26[8 * (v25 >> 3)];
    uint64_t v185 = v26;
    unint64_t v187 = v27;
    memcpy(v26, v24, v25);
    int v186 = v27;
  }
  uint64_t v183 = 0;
  __p = 0;
  unint64_t v184 = 0;
  unint64_t v28 = *a4;
  int64_t v29 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v29)
  {
    if (v29 < 0) {
      goto LABEL_175;
    }
    uint64_t v30 = (char *)operator new(v29);
    int64_t v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    unint64_t v184 = v31;
    memcpy(v30, v28, v29);
    uint64_t v183 = v31;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v185, (void **)&__p);
  if (__p)
  {
    uint64_t v183 = __p;
    operator delete(__p);
  }
  int64_t v22 = v185;
  if (v185)
  {
    int v186 = v185;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t Value = *(void *)**a2;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v212[0] = ElementType;
  uint64_t v210 = *(void *)**a1;
  uint64_t v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v210);
  uint64_t Value = v9;
  uint64_t v209 = *(void *)(*a1)[1];
  uint64_t v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v209);
  uint64_t v209 = ElementType;
  uint64_t v210 = v10;
  uint64_t v11 = *(void **)(*(void *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v208 = ElementType;
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v207 = v12;
    if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v206 = v13;
    v212[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v208);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v207);
    uint64_t v210 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
  }
  if (mlir::Type::isF32((mlir::Type *)v212)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v210))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      unint64_t v203 = 0;
      uint64_t v204 = 0;
      uint64_t v205 = 0;
      uint64_t v100 = *a3;
      int64_t v101 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v101)
      {
        if (v101 < 0) {
          goto LABEL_175;
        }
        unint64_t v102 = (char *)operator new(v101);
        int64_t v103 = &v102[8 * (v101 >> 3)];
        unint64_t v203 = v102;
        uint64_t v205 = v103;
        memcpy(v102, v100, v101);
        uint64_t v204 = v103;
      }
      uint64_t v200 = 0;
      uint64_t v201 = 0;
      uint64_t v202 = 0;
      uint64_t v104 = *a4;
      int64_t v105 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v105)
      {
        if (v105 < 0) {
          goto LABEL_175;
        }
        __int16 v106 = operator new(v105);
        int64_t v107 = &v106[v105 >> 3];
        uint64_t v200 = v106;
        uint64_t v202 = v107;
        memcpy(v106, v104, v105);
        uint64_t v201 = v107;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v203, &v200);
      if (v200)
      {
        uint64_t v201 = v200;
        operator delete(v200);
      }
      int64_t v22 = v203;
      if (v203)
      {
        uint64_t v204 = v203;
        goto LABEL_173;
      }
      return;
    }
    uint64_t v197 = 0;
    long long v198 = 0;
    uint64_t v199 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_175;
      }
      int64_t v16 = (char *)operator new(v15);
      int64_t v17 = &v16[8 * (v15 >> 3)];
      uint64_t v197 = v16;
      uint64_t v199 = v17;
      memcpy(v16, v14, v15);
      long long v198 = v17;
    }
    uint64_t v194 = 0;
    unint64_t v195 = 0;
    uint64_t v196 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_19;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      uint64_t v194 = v20;
      uint64_t v196 = v21;
      memcpy(v20, v18, v19);
      unint64_t v195 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v197, &v194);
      if (v194)
      {
        unint64_t v195 = v194;
        operator delete(v194);
      }
      int64_t v22 = v197;
      if (v197)
      {
        long long v198 = v197;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v212)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v210))
  {
    if (!mlir::Type::isF32((mlir::Type *)v212)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v210))
    {
      if (mlir::Type::isF32((mlir::Type *)v212)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v210))
      {
        unint64_t v167 = 0;
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        unint64_t v42 = *a3;
        int64_t v43 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v43)
        {
          if (v43 < 0) {
            goto LABEL_175;
          }
          int64_t v44 = (char *)operator new(v43);
          uint64_t v45 = &v44[8 * (v43 >> 3)];
          unint64_t v167 = v44;
          uint64_t v169 = v45;
          memcpy(v44, v42, v43);
          uint64_t v168 = v45;
        }
        uint64_t v164 = 0;
        long long v165 = 0;
        long long v166 = 0;
        uint64_t v46 = *a4;
        int64_t v47 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v47)
        {
          if (v47 < 0) {
            goto LABEL_175;
          }
          uint64_t v48 = (char *)operator new(v47);
          int64_t v49 = &v48[8 * (v47 >> 3)];
          uint64_t v164 = v48;
          long long v166 = v49;
          memcpy(v48, v46, v47);
          long long v165 = v49;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v167, (void **)&v164);
        if (v164)
        {
          long long v165 = v164;
          operator delete(v164);
        }
        int64_t v22 = v167;
        if (v167)
        {
          uint64_t v168 = v167;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v212)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v210))
      {
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        uint64_t v50 = *a3;
        int64_t v51 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v51)
        {
          if (v51 < 0) {
            goto LABEL_175;
          }
          uint64_t v52 = (char *)operator new(v51);
          int64_t v53 = &v52[8 * (v51 >> 3)];
          uint64_t v161 = v52;
          uint64_t v163 = v53;
          memcpy(v52, v50, v51);
          uint64_t v162 = v53;
        }
        uint64_t v158 = 0;
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        unint64_t v54 = *a4;
        int64_t v55 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v55)
        {
          if (v55 < 0) {
            goto LABEL_175;
          }
          uint64_t v56 = (char *)operator new(v55);
          unint64_t v57 = &v56[8 * (v55 >> 3)];
          uint64_t v158 = v56;
          uint64_t v160 = v57;
          memcpy(v56, v54, v55);
          uint64_t v159 = v57;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v161, (void **)&v158);
        if (v158)
        {
          uint64_t v159 = v158;
          operator delete(v158);
        }
        int64_t v22 = v161;
        if (v161)
        {
          uint64_t v162 = v161;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v212))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          uint64_t v149 = 0;
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          unint64_t v60 = *a3;
          int64_t v61 = (unsigned char *)a3[1] - (unsigned char *)*a3;
          if (v61)
          {
            if (v61 < 0) {
              goto LABEL_175;
            }
            int64_t v62 = (char *)operator new(v61);
            int64_t v63 = &v62[8 * (v61 >> 3)];
            uint64_t v149 = v62;
            uint64_t v151 = v63;
            memcpy(v62, v60, v61);
            uint64_t v150 = v63;
          }
          uint64_t v146 = 0;
          unint64_t v147 = 0;
          uint64_t v148 = 0;
          uint64_t v64 = *a4;
          int64_t v65 = (unsigned char *)a4[1] - (unsigned char *)*a4;
          if (v65)
          {
            if (v65 < 0) {
              goto LABEL_175;
            }
            uint64_t v66 = (char *)operator new(v65);
            int64_t v67 = &v66[8 * (v65 >> 3)];
            uint64_t v146 = v66;
            uint64_t v148 = v67;
            memcpy(v66, v64, v65);
            unint64_t v147 = v67;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v149, (void **)&v146);
          if (v146)
          {
            unint64_t v147 = v146;
            operator delete(v146);
          }
          int64_t v22 = v149;
          if (v149)
          {
            uint64_t v150 = v149;
            goto LABEL_173;
          }
          return;
        }
        uint64_t v155 = 0;
        char v156 = 0;
        uint64_t v157 = 0;
        short float v84 = *a3;
        int64_t v85 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v85)
        {
          if (v85 < 0) {
            goto LABEL_175;
          }
          short float v86 = (char *)operator new(v85);
          int64_t v87 = &v86[8 * (v85 >> 3)];
          uint64_t v155 = v86;
          uint64_t v157 = v87;
          memcpy(v86, v84, v85);
          char v156 = v87;
        }
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        unint64_t v154 = 0;
        uint64_t v88 = *a4;
        int64_t v89 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v89)
        {
          if (v89 < 0) {
            goto LABEL_175;
          }
          uint64_t v90 = (char *)operator new(v89);
          int64_t v91 = &v90[8 * (v89 >> 3)];
          uint64_t v152 = v90;
          unint64_t v154 = v91;
          memcpy(v90, v88, v89);
          uint64_t v153 = v91;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v155, (void **)&v152, v58, v59);
        if (v152)
        {
          uint64_t v153 = v152;
          operator delete(v152);
        }
        int64_t v22 = v155;
        if (v155)
        {
          char v156 = v155;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v212))
      {
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        long long v68 = *a3;
        int64_t v69 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v69)
        {
          if (v69 < 0) {
            goto LABEL_175;
          }
          unint64_t v70 = (char *)operator new(v69);
          int64_t v71 = &v70[8 * (v69 >> 3)];
          uint64_t v143 = v70;
          unint64_t v145 = v71;
          memcpy(v70, v68, v69);
          uint64_t v144 = v71;
        }
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v72 = *a4;
        int64_t v73 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v73)
        {
          if (v73 < 0) {
            goto LABEL_175;
          }
          uint64_t v74 = (char *)operator new(v73);
          int64_t v75 = &v74[8 * (v73 >> 3)];
          uint64_t v140 = v74;
          uint64_t v142 = v75;
          memcpy(v74, v72, v73);
          uint64_t v141 = v75;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v143, (void **)&v140);
        if (v140)
        {
          uint64_t v141 = v140;
          operator delete(v140);
        }
        int64_t v22 = v143;
        if (v143)
        {
          uint64_t v144 = v143;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v212, 64))
      {
        uint64_t v137 = 0;
        char v138 = 0;
        uint64_t v139 = 0;
        int64_t v76 = *a3;
        int64_t v77 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v77)
        {
          if (v77 < 0) {
            goto LABEL_175;
          }
          unint64_t v78 = (char *)operator new(v77);
          int64_t v79 = &v78[8 * (v77 >> 3)];
          uint64_t v137 = v78;
          uint64_t v139 = v79;
          memcpy(v78, v76, v77);
          char v138 = v79;
        }
        uint64_t v134 = 0;
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        int64_t v80 = *a4;
        int64_t v81 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v81)
        {
          if (v81 < 0) {
            goto LABEL_175;
          }
          float v82 = (char *)operator new(v81);
          int64_t v83 = &v82[8 * (v81 >> 3)];
          uint64_t v134 = v82;
          uint64_t v136 = v83;
          memcpy(v82, v80, v81);
          uint64_t v135 = v83;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v137, (void **)&v134);
        if (v134)
        {
          uint64_t v135 = v134;
          operator delete(v134);
        }
        int64_t v22 = v137;
        if (v137)
        {
          char v138 = v137;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v212, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v212, 16))
        {
          std::vector<long long>::vector(v127, (uint64_t)a3);
          std::vector<long long>::vector(v126, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)v127, (void **)v126);
          if (v126[0])
          {
            v126[1] = v126[0];
            operator delete(v126[0]);
          }
          int64_t v22 = (void *)v127[0];
          if (v127[0])
          {
            v127[1] = v127[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v212, 8) && !mlir::Type::isInteger((mlir::Type *)v212, 1)) {
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>((mlir::Type *)&v209);
          }
          std::vector<long long>::vector(v125, (uint64_t)a3);
          std::vector<long long>::vector(v124, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)v125, (void **)v124);
          if (v124[0])
          {
            v124[1] = v124[0];
            operator delete(v124[0]);
          }
          int64_t v22 = v125[0];
          if (v125[0])
          {
            v125[1] = v125[0];
            goto LABEL_173;
          }
        }
        return;
      }
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      uint64_t v92 = *a3;
      int64_t v93 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v93)
      {
        if (v93 < 0) {
          goto LABEL_175;
        }
        uint64_t v94 = (char *)operator new(v93);
        int64_t v95 = &v94[8 * (v93 >> 3)];
        uint64_t v131 = v94;
        uint64_t v133 = v95;
        memcpy(v94, v92, v93);
        uint64_t v132 = v95;
      }
      uint64_t v128 = 0;
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v96 = *a4;
      int64_t v97 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v97)
      {
        if (v97 < 0) {
          goto LABEL_175;
        }
        uint64_t v98 = (char *)operator new(v97);
        int64_t v99 = &v98[8 * (v97 >> 3)];
        uint64_t v128 = v98;
        uint64_t v130 = v99;
        memcpy(v98, v96, v97);
        uint64_t v129 = v99;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v131, (void **)&v128);
      if (v128)
      {
        uint64_t v129 = v128;
        operator delete(v128);
      }
      int64_t v22 = v131;
      if (v131)
      {
        uint64_t v132 = v131;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      unint64_t v173 = 0;
      int v174 = 0;
      uint64_t v175 = 0;
      uint64_t v34 = *a3;
      int64_t v35 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v35)
      {
        if (v35 < 0) {
          goto LABEL_175;
        }
        uint64_t v36 = (char *)operator new(v35);
        uint64_t v37 = &v36[8 * (v35 >> 3)];
        unint64_t v173 = v36;
        uint64_t v175 = v37;
        memcpy(v36, v34, v35);
        int v174 = v37;
      }
      unint64_t v170 = 0;
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      uint64_t v38 = *a4;
      int64_t v39 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v39)
      {
        if (v39 < 0) {
          goto LABEL_175;
        }
        int64_t v40 = (char *)operator new(v39);
        int v41 = &v40[8 * (v39 >> 3)];
        unint64_t v170 = v40;
        uint64_t v172 = v41;
        memcpy(v40, v38, v39);
        uint64_t v171 = v41;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v173, (void **)&v170);
      if (v170)
      {
        uint64_t v171 = v170;
        operator delete(v170);
      }
      int64_t v22 = v173;
      if (v173)
      {
        int v174 = v173;
        goto LABEL_173;
      }
      return;
    }
    uint64_t v179 = 0;
    unint64_t v180 = 0;
    uint64_t v181 = 0;
    unint64_t v116 = *a3;
    int64_t v117 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v117)
    {
      if (v117 < 0) {
        goto LABEL_175;
      }
      uint64_t v118 = (char *)operator new(v117);
      int64_t v119 = &v118[8 * (v117 >> 3)];
      uint64_t v179 = v118;
      uint64_t v181 = v119;
      memcpy(v118, v116, v117);
      unint64_t v180 = v119;
    }
    uint64_t v176 = 0;
    unsigned int v177 = 0;
    uint64_t v178 = 0;
    uint64_t v120 = *a4;
    int64_t v121 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v121)
    {
      if (v121 < 0) {
        goto LABEL_175;
      }
      uint64_t v122 = (char *)operator new(v121);
      char v123 = &v122[8 * (v121 >> 3)];
      uint64_t v176 = v122;
      uint64_t v178 = v123;
      memcpy(v122, v120, v121);
      unsigned int v177 = v123;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v179, (void **)&v176, v32, v33);
    if (v176)
    {
      unsigned int v177 = v176;
      operator delete(v176);
    }
    int64_t v22 = v179;
    if (v179)
    {
      unint64_t v180 = v179;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    int64_t v192 = 0;
    uint64_t v191 = 0;
    uint64_t v193 = 0;
    uint64_t v108 = *a3;
    int64_t v109 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v109)
    {
      if (v109 < 0) {
        goto LABEL_175;
      }
      uint64_t v110 = (char *)operator new(v109);
      int64_t v111 = &v110[8 * (v109 >> 3)];
      uint64_t v191 = v110;
      uint64_t v193 = v111;
      memcpy(v110, v108, v109);
      int64_t v192 = v111;
    }
    unsigned int v189 = 0;
    uint64_t v188 = 0;
    unint64_t v190 = 0;
    unint64_t v112 = *a4;
    int64_t v113 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v113)
    {
      if (v113 < 0) {
        goto LABEL_175;
      }
      uint64_t v114 = (char *)operator new(v113);
      int64_t v115 = &v114[8 * (v113 >> 3)];
      uint64_t v188 = v114;
      unint64_t v190 = v115;
      memcpy(v114, v112, v113);
      unsigned int v189 = v115;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v191, (void **)&v188, v23);
    if (v188)
    {
      unsigned int v189 = v188;
      operator delete(v188);
    }
    int64_t v22 = v191;
    if (v191)
    {
      int64_t v192 = v191;
      goto LABEL_173;
    }
    return;
  }
  int v186 = 0;
  uint64_t v185 = 0;
  unint64_t v187 = 0;
  int v24 = *a3;
  int64_t v25 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v25)
  {
    if (v25 < 0) {
      goto LABEL_175;
    }
    int64_t v26 = (char *)operator new(v25);
    unint64_t v27 = &v26[8 * (v25 >> 3)];
    uint64_t v185 = v26;
    unint64_t v187 = v27;
    memcpy(v26, v24, v25);
    int v186 = v27;
  }
  uint64_t v183 = 0;
  __p = 0;
  unint64_t v184 = 0;
  unint64_t v28 = *a4;
  int64_t v29 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v29)
  {
    if (v29 < 0) {
      goto LABEL_175;
    }
    uint64_t v30 = (char *)operator new(v29);
    int64_t v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    unint64_t v184 = v31;
    memcpy(v30, v28, v29);
    uint64_t v183 = v31;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v185, (void **)&__p);
  if (__p)
  {
    uint64_t v183 = __p;
    operator delete(__p);
  }
  int64_t v22 = v185;
  if (v185)
  {
    int v186 = v185;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t Value = *(void *)**a2;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v211[0] = ElementType;
  uint64_t v209 = *(void *)**a1;
  uint64_t v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v209);
  uint64_t Value = v9;
  uint64_t v208 = *(void *)(*a1)[1];
  uint64_t v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v208);
  uint64_t v208 = ElementType;
  uint64_t v209 = v10;
  uint64_t v11 = *(void **)(*(void *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v207 = ElementType;
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v206 = v12;
    if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v205 = v13;
    v211[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v207);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
    uint64_t v209 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v205);
  }
  if (mlir::Type::isF32((mlir::Type *)v211)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v209))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v202 = 0;
      unint64_t v203 = 0;
      uint64_t v204 = 0;
      int64_t v97 = *a3;
      int64_t v98 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v98)
      {
        if (v98 < 0) {
          goto LABEL_175;
        }
        int64_t v99 = (char *)operator new(v98);
        uint64_t v100 = &v99[8 * (v98 >> 3)];
        uint64_t v202 = v99;
        uint64_t v204 = v100;
        memcpy(v99, v97, v98);
        unint64_t v203 = v100;
      }
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      uint64_t v201 = 0;
      int64_t v101 = *a4;
      int64_t v102 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v102)
      {
        if (v102 < 0) {
          goto LABEL_175;
        }
        int64_t v103 = operator new(v102);
        uint64_t v104 = &v103[v102 >> 3];
        uint64_t v199 = v103;
        uint64_t v201 = v104;
        memcpy(v103, v101, v102);
        uint64_t v200 = v104;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v202, &v199);
      if (v199)
      {
        uint64_t v200 = v199;
        operator delete(v199);
      }
      int64_t v22 = v202;
      if (v202)
      {
        unint64_t v203 = v202;
        goto LABEL_173;
      }
      return;
    }
    uint64_t v196 = 0;
    uint64_t v197 = 0;
    long long v198 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_175;
      }
      int64_t v16 = (char *)operator new(v15);
      int64_t v17 = &v16[8 * (v15 >> 3)];
      uint64_t v196 = v16;
      long long v198 = v17;
      memcpy(v16, v14, v15);
      uint64_t v197 = v17;
    }
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    unint64_t v195 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_19;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      uint64_t v193 = v20;
      unint64_t v195 = v21;
      memcpy(v20, v18, v19);
      uint64_t v194 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v196, &v193);
      if (v193)
      {
        uint64_t v194 = v193;
        operator delete(v193);
      }
      int64_t v22 = v196;
      if (v196)
      {
        uint64_t v197 = v196;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v211)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v209))
  {
    if (!mlir::Type::isF32((mlir::Type *)v211)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v209))
    {
      if (mlir::Type::isF32((mlir::Type *)v211)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v209))
      {
        long long v166 = 0;
        unint64_t v167 = 0;
        uint64_t v168 = 0;
        int64_t v40 = *a3;
        int64_t v41 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v41)
        {
          if (v41 < 0) {
            goto LABEL_175;
          }
          unint64_t v42 = (char *)operator new(v41);
          int64_t v43 = &v42[8 * (v41 >> 3)];
          long long v166 = v42;
          uint64_t v168 = v43;
          memcpy(v42, v40, v41);
          unint64_t v167 = v43;
        }
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        long long v165 = 0;
        int64_t v44 = *a4;
        int64_t v45 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v45)
        {
          if (v45 < 0) {
            goto LABEL_175;
          }
          uint64_t v46 = (char *)operator new(v45);
          int64_t v47 = &v46[8 * (v45 >> 3)];
          uint64_t v163 = v46;
          long long v165 = v47;
          memcpy(v46, v44, v45);
          uint64_t v164 = v47;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v166, (void **)&v163);
        if (v163)
        {
          uint64_t v164 = v163;
          operator delete(v163);
        }
        int64_t v22 = v166;
        if (v166)
        {
          unint64_t v167 = v166;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v211)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v209))
      {
        uint64_t v160 = 0;
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        uint64_t v48 = *a3;
        int64_t v49 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v49)
        {
          if (v49 < 0) {
            goto LABEL_175;
          }
          uint64_t v50 = (char *)operator new(v49);
          int64_t v51 = &v50[8 * (v49 >> 3)];
          uint64_t v160 = v50;
          uint64_t v162 = v51;
          memcpy(v50, v48, v49);
          uint64_t v161 = v51;
        }
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        uint64_t v159 = 0;
        uint64_t v52 = *a4;
        int64_t v53 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v53)
        {
          if (v53 < 0) {
            goto LABEL_175;
          }
          unint64_t v54 = (char *)operator new(v53);
          int64_t v55 = &v54[8 * (v53 >> 3)];
          uint64_t v157 = v54;
          uint64_t v159 = v55;
          memcpy(v54, v52, v53);
          uint64_t v158 = v55;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v160, (void **)&v157);
        if (v157)
        {
          uint64_t v158 = v157;
          operator delete(v157);
        }
        int64_t v22 = v160;
        if (v160)
        {
          uint64_t v161 = v160;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v211))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          uint64_t v148 = 0;
          uint64_t v149 = 0;
          uint64_t v150 = 0;
          unint64_t v57 = *a3;
          int64_t v58 = (unsigned char *)a3[1] - (unsigned char *)*a3;
          if (v58)
          {
            if (v58 < 0) {
              goto LABEL_175;
            }
            float16x4_t v59 = (char *)operator new(v58);
            unint64_t v60 = &v59[8 * (v58 >> 3)];
            uint64_t v148 = v59;
            uint64_t v150 = v60;
            memcpy(v59, v57, v58);
            uint64_t v149 = v60;
          }
          unint64_t v145 = 0;
          uint64_t v146 = 0;
          unint64_t v147 = 0;
          int64_t v61 = *a4;
          int64_t v62 = (unsigned char *)a4[1] - (unsigned char *)*a4;
          if (v62)
          {
            if (v62 < 0) {
              goto LABEL_175;
            }
            int64_t v63 = (char *)operator new(v62);
            uint64_t v64 = &v63[8 * (v62 >> 3)];
            unint64_t v145 = v63;
            unint64_t v147 = v64;
            memcpy(v63, v61, v62);
            uint64_t v146 = v64;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v148, (void **)&v145);
          if (v145)
          {
            uint64_t v146 = v145;
            operator delete(v145);
          }
          int64_t v22 = v148;
          if (v148)
          {
            uint64_t v149 = v148;
            goto LABEL_173;
          }
          return;
        }
        unint64_t v154 = 0;
        uint64_t v155 = 0;
        char v156 = 0;
        int64_t v81 = *a3;
        int64_t v82 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v82)
        {
          if (v82 < 0) {
            goto LABEL_175;
          }
          int64_t v83 = (char *)operator new(v82);
          short float v84 = &v83[8 * (v82 >> 3)];
          unint64_t v154 = v83;
          char v156 = v84;
          memcpy(v83, v81, v82);
          uint64_t v155 = v84;
        }
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        int64_t v85 = *a4;
        int64_t v86 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v86)
        {
          if (v86 < 0) {
            goto LABEL_175;
          }
          int64_t v87 = (char *)operator new(v86);
          uint64_t v88 = &v87[8 * (v86 >> 3)];
          uint64_t v151 = v87;
          uint64_t v153 = v88;
          memcpy(v87, v85, v86);
          uint64_t v152 = v88;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v154, (void **)&v151, v56);
        if (v151)
        {
          uint64_t v152 = v151;
          operator delete(v151);
        }
        int64_t v22 = v154;
        if (v154)
        {
          uint64_t v155 = v154;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v211))
      {
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        int64_t v65 = *a3;
        int64_t v66 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v66)
        {
          if (v66 < 0) {
            goto LABEL_175;
          }
          int64_t v67 = (char *)operator new(v66);
          long long v68 = &v67[8 * (v66 >> 3)];
          uint64_t v142 = v67;
          uint64_t v144 = v68;
          memcpy(v67, v65, v66);
          uint64_t v143 = v68;
        }
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        int64_t v69 = *a4;
        int64_t v70 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v70)
        {
          if (v70 < 0) {
            goto LABEL_175;
          }
          int64_t v71 = (char *)operator new(v70);
          uint64_t v72 = &v71[8 * (v70 >> 3)];
          uint64_t v139 = v71;
          uint64_t v141 = v72;
          memcpy(v71, v69, v70);
          uint64_t v140 = v72;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v142, (void **)&v139);
        if (v139)
        {
          uint64_t v140 = v139;
          operator delete(v139);
        }
        int64_t v22 = v142;
        if (v142)
        {
          uint64_t v143 = v142;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v211, 64))
      {
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        char v138 = 0;
        int64_t v73 = *a3;
        int64_t v74 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v74)
        {
          if (v74 < 0) {
            goto LABEL_175;
          }
          int64_t v75 = (char *)operator new(v74);
          int64_t v76 = &v75[8 * (v74 >> 3)];
          uint64_t v136 = v75;
          char v138 = v76;
          memcpy(v75, v73, v74);
          uint64_t v137 = v76;
        }
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        uint64_t v135 = 0;
        int64_t v77 = *a4;
        int64_t v78 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v78)
        {
          if (v78 < 0) {
            goto LABEL_175;
          }
          int64_t v79 = (char *)operator new(v78);
          int64_t v80 = &v79[8 * (v78 >> 3)];
          uint64_t v133 = v79;
          uint64_t v135 = v80;
          memcpy(v79, v77, v78);
          uint64_t v134 = v80;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v136, (void **)&v133);
        if (v133)
        {
          uint64_t v134 = v133;
          operator delete(v133);
        }
        int64_t v22 = v136;
        if (v136)
        {
          uint64_t v137 = v136;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v211, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v211, 16))
        {
          std::vector<long long>::vector(v126, (uint64_t)a3);
          std::vector<long long>::vector(v125, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)v126, (void **)v125, v121, v122);
          if (v125[0])
          {
            v125[1] = v125[0];
            operator delete(v125[0]);
          }
          int64_t v22 = (void *)v126[0];
          if (v126[0])
          {
            v126[1] = v126[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v211, 8) && !mlir::Type::isInteger((mlir::Type *)v211, 1)) {
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>((mlir::Type *)&v208);
          }
          std::vector<long long>::vector(v124, (uint64_t)a3);
          std::vector<long long>::vector(v123, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)v124, (void **)v123);
          if (v123[0])
          {
            v123[1] = v123[0];
            operator delete(v123[0]);
          }
          int64_t v22 = v124[0];
          if (v124[0])
          {
            v124[1] = v124[0];
            goto LABEL_173;
          }
        }
        return;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      int64_t v89 = *a3;
      int64_t v90 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v90)
      {
        if (v90 < 0) {
          goto LABEL_175;
        }
        int64_t v91 = (char *)operator new(v90);
        uint64_t v92 = &v91[8 * (v90 >> 3)];
        uint64_t v130 = v91;
        uint64_t v132 = v92;
        memcpy(v91, v89, v90);
        uint64_t v131 = v92;
      }
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      uint64_t v129 = 0;
      int64_t v93 = *a4;
      int64_t v94 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v94)
      {
        if (v94 < 0) {
          goto LABEL_175;
        }
        int64_t v95 = (char *)operator new(v94);
        uint64_t v96 = &v95[8 * (v94 >> 3)];
        uint64_t v127 = v95;
        uint64_t v129 = v96;
        memcpy(v95, v93, v94);
        uint64_t v128 = v96;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v130, (void **)&v127);
      if (v127)
      {
        uint64_t v128 = v127;
        operator delete(v127);
      }
      int64_t v22 = v130;
      if (v130)
      {
        uint64_t v131 = v130;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int v174 = 0;
      double v32 = *a3;
      int64_t v33 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v33)
      {
        if (v33 < 0) {
          goto LABEL_175;
        }
        uint64_t v34 = (char *)operator new(v33);
        int64_t v35 = &v34[8 * (v33 >> 3)];
        uint64_t v172 = v34;
        int v174 = v35;
        memcpy(v34, v32, v33);
        unint64_t v173 = v35;
      }
      uint64_t v169 = 0;
      unint64_t v170 = 0;
      uint64_t v171 = 0;
      uint64_t v36 = *a4;
      int64_t v37 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v37)
      {
        if (v37 < 0) {
          goto LABEL_175;
        }
        uint64_t v38 = (char *)operator new(v37);
        int64_t v39 = &v38[8 * (v37 >> 3)];
        uint64_t v169 = v38;
        uint64_t v171 = v39;
        memcpy(v38, v36, v37);
        unint64_t v170 = v39;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v172, (void **)&v169);
      if (v169)
      {
        unint64_t v170 = v169;
        operator delete(v169);
      }
      int64_t v22 = v172;
      if (v172)
      {
        unint64_t v173 = v172;
        goto LABEL_173;
      }
      return;
    }
    uint64_t v178 = 0;
    uint64_t v179 = 0;
    unint64_t v180 = 0;
    int64_t v113 = *a3;
    int64_t v114 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v114)
    {
      if (v114 < 0) {
        goto LABEL_175;
      }
      int64_t v115 = (char *)operator new(v114);
      unint64_t v116 = &v115[8 * (v114 >> 3)];
      uint64_t v178 = v115;
      unint64_t v180 = v116;
      memcpy(v115, v113, v114);
      uint64_t v179 = v116;
    }
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    unsigned int v177 = 0;
    int64_t v117 = *a4;
    int64_t v118 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v118)
    {
      if (v118 < 0) {
        goto LABEL_175;
      }
      int64_t v119 = (char *)operator new(v118);
      uint64_t v120 = &v119[8 * (v118 >> 3)];
      uint64_t v175 = v119;
      unsigned int v177 = v120;
      memcpy(v119, v117, v118);
      uint64_t v176 = v120;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v178, (void **)&v175, v31);
    if (v175)
    {
      uint64_t v176 = v175;
      operator delete(v175);
    }
    int64_t v22 = v178;
    if (v178)
    {
      uint64_t v179 = v178;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v191 = 0;
    unint64_t v190 = 0;
    int64_t v192 = 0;
    int64_t v105 = *a3;
    int64_t v106 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v106)
    {
      if (v106 < 0) {
        goto LABEL_175;
      }
      int64_t v107 = (char *)operator new(v106);
      uint64_t v108 = &v107[8 * (v106 >> 3)];
      unint64_t v190 = v107;
      int64_t v192 = v108;
      memcpy(v107, v105, v106);
      uint64_t v191 = v108;
    }
    uint64_t v188 = 0;
    unint64_t v187 = 0;
    unsigned int v189 = 0;
    int64_t v109 = *a4;
    int64_t v110 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v110)
    {
      if (v110 < 0) {
        goto LABEL_175;
      }
      int64_t v111 = (char *)operator new(v110);
      unint64_t v112 = &v111[8 * (v110 >> 3)];
      unint64_t v187 = v111;
      unsigned int v189 = v112;
      memcpy(v111, v109, v110);
      uint64_t v188 = v112;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v190, (void **)&v187);
    if (v187)
    {
      uint64_t v188 = v187;
      operator delete(v187);
    }
    int64_t v22 = v190;
    if (v190)
    {
      uint64_t v191 = v190;
      goto LABEL_173;
    }
    return;
  }
  uint64_t v185 = 0;
  unint64_t v184 = 0;
  int v186 = 0;
  float16x4_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_175;
    }
    int64_t v25 = (char *)operator new(v24);
    int64_t v26 = &v25[8 * (v24 >> 3)];
    unint64_t v184 = v25;
    int v186 = v26;
    memcpy(v25, v23, v24);
    uint64_t v185 = v26;
  }
  unsigned int v182 = 0;
  __p = 0;
  uint64_t v183 = 0;
  unint64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_175;
    }
    int64_t v29 = (char *)operator new(v28);
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v183 = v30;
    memcpy(v29, v27, v28);
    unsigned int v182 = v30;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v184, (void **)&__p);
  if (__p)
  {
    unsigned int v182 = __p;
    operator delete(__p);
  }
  int64_t v22 = v184;
  if (v184)
  {
    uint64_t v185 = v184;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t Value = *(void *)**a2;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v207[0] = ElementType;
  uint64_t v205 = *(void *)**a1;
  uint64_t v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v205);
  uint64_t Value = v9;
  uint64_t v204 = *(void *)(*a1)[1];
  uint64_t v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v204);
  uint64_t v204 = ElementType;
  uint64_t v205 = v10;
  uint64_t v11 = *(void **)(*(void *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v203 = ElementType;
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v202 = v12;
    if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    v207[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)v207)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_175;
        }
        int64_t v97 = (char *)operator new(v96);
        int64_t v98 = &v97[8 * (v96 >> 3)];
        long long v198 = v97;
        uint64_t v200 = v98;
        memcpy(v97, v95, v96);
        uint64_t v199 = v98;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_175;
        }
        int64_t v101 = operator new(v100);
        int64_t v102 = &v101[v100 >> 3];
        unint64_t v195 = v101;
        uint64_t v197 = v102;
        memcpy(v101, v99, v100);
        uint64_t v196 = v102;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v198, &v195);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_173;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_175;
      }
      int64_t v16 = (char *)operator new(v15);
      int64_t v17 = &v16[8 * (v15 >> 3)];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_19;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v192, &v189);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v207)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (!mlir::Type::isF32((mlir::Type *)v207)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)v207)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v205))
      {
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        int64_t v39 = *a3;
        int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v40)
        {
          if (v40 < 0) {
            goto LABEL_175;
          }
          int64_t v41 = (char *)operator new(v40);
          unint64_t v42 = &v41[8 * (v40 >> 3)];
          uint64_t v162 = v41;
          uint64_t v164 = v42;
          memcpy(v41, v39, v40);
          uint64_t v163 = v42;
        }
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        uint64_t v161 = 0;
        int64_t v43 = *a4;
        int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v44)
        {
          if (v44 < 0) {
            goto LABEL_175;
          }
          int64_t v45 = (char *)operator new(v44);
          uint64_t v46 = &v45[8 * (v44 >> 3)];
          uint64_t v159 = v45;
          uint64_t v161 = v46;
          memcpy(v45, v43, v44);
          uint64_t v160 = v46;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v162, (void **)&v159);
        if (v159)
        {
          uint64_t v160 = v159;
          operator delete(v159);
        }
        int64_t v22 = v162;
        if (v162)
        {
          uint64_t v163 = v162;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v207)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        char v156 = 0;
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_175;
          }
          int64_t v49 = (char *)operator new(v48);
          uint64_t v50 = &v49[8 * (v48 >> 3)];
          char v156 = v49;
          uint64_t v158 = v50;
          memcpy(v49, v47, v48);
          uint64_t v157 = v50;
        }
        uint64_t v153 = 0;
        unint64_t v154 = 0;
        uint64_t v155 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_175;
          }
          int64_t v53 = (char *)operator new(v52);
          unint64_t v54 = &v53[8 * (v52 >> 3)];
          uint64_t v153 = v53;
          uint64_t v155 = v54;
          memcpy(v53, v51, v52);
          unint64_t v154 = v54;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v156, (void **)&v153);
        if (v153)
        {
          unint64_t v154 = v153;
          operator delete(v153);
        }
        int64_t v22 = v156;
        if (v156)
        {
          uint64_t v157 = v156;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v207))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          uint64_t v144 = 0;
          unint64_t v145 = 0;
          uint64_t v146 = 0;
          int64_t v55 = *a3;
          int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
          if (v56)
          {
            if (v56 < 0) {
              goto LABEL_175;
            }
            unint64_t v57 = (char *)operator new(v56);
            int64_t v58 = &v57[8 * (v56 >> 3)];
            uint64_t v144 = v57;
            uint64_t v146 = v58;
            memcpy(v57, v55, v56);
            unint64_t v145 = v58;
          }
          uint64_t v141 = 0;
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          float16x4_t v59 = *a4;
          int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
          if (v60)
          {
            if (v60 < 0) {
              goto LABEL_175;
            }
            int64_t v61 = (char *)operator new(v60);
            int64_t v62 = &v61[8 * (v60 >> 3)];
            uint64_t v141 = v61;
            uint64_t v143 = v62;
            memcpy(v61, v59, v60);
            uint64_t v142 = v62;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v144, (void **)&v141);
          if (v141)
          {
            uint64_t v142 = v141;
            operator delete(v141);
          }
          int64_t v22 = v144;
          if (v144)
          {
            unint64_t v145 = v144;
            goto LABEL_173;
          }
          return;
        }
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v79 = *a3;
        int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v80)
        {
          if (v80 < 0) {
            goto LABEL_175;
          }
          int64_t v81 = (char *)operator new(v80);
          int64_t v82 = &v81[8 * (v80 >> 3)];
          uint64_t v150 = v81;
          uint64_t v152 = v82;
          memcpy(v81, v79, v80);
          uint64_t v151 = v82;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v83 = *a4;
        int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v84)
        {
          if (v84 < 0) {
            goto LABEL_175;
          }
          int64_t v85 = (char *)operator new(v84);
          int64_t v86 = &v85[8 * (v84 >> 3)];
          unint64_t v147 = v85;
          uint64_t v149 = v86;
          memcpy(v85, v83, v84);
          uint64_t v148 = v86;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v150, (void **)&v147);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v207))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_175;
          }
          int64_t v65 = (char *)operator new(v64);
          int64_t v66 = &v65[8 * (v64 >> 3)];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_175;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v138, (void **)&v135);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v207, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_175;
          }
          int64_t v73 = (char *)operator new(v72);
          int64_t v74 = &v73[8 * (v72 >> 3)];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        int64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_175;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)5>((uint64_t)a1, a2, (uint64_t)&v132, (void **)&v129);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v207, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v207, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)5>((unint64_t)a1, a2, (uint64_t)v122, (void **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = (void *)v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v207, 8) && !mlir::Type::isInteger((mlir::Type *)v207, 1)) {
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>((mlir::Type *)&v204);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)5>((unint64_t)a1, a2, (uint64_t)v120, (void **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_173;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v87 = *a3;
      int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v88)
      {
        if (v88 < 0) {
          goto LABEL_175;
        }
        int64_t v89 = (char *)operator new(v88);
        int64_t v90 = &v89[8 * (v88 >> 3)];
        uint64_t v126 = v89;
        uint64_t v128 = v90;
        memcpy(v89, v87, v88);
        uint64_t v127 = v90;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v91 = *a4;
      int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v92)
      {
        if (v92 < 0) {
          goto LABEL_175;
        }
        int64_t v93 = (char *)operator new(v92);
        int64_t v94 = &v93[8 * (v92 >> 3)];
        char v123 = v93;
        uint64_t v125 = v94;
        memcpy(v93, v91, v92);
        unint64_t v124 = v94;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)5>((unint64_t)a1, a2, (uint64_t)&v126, (void **)&v123);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      unint64_t v170 = 0;
      double v31 = *a3;
      int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v32)
      {
        if (v32 < 0) {
          goto LABEL_175;
        }
        int64_t v33 = (char *)operator new(v32);
        uint64_t v34 = &v33[8 * (v32 >> 3)];
        uint64_t v168 = v33;
        unint64_t v170 = v34;
        memcpy(v33, v31, v32);
        uint64_t v169 = v34;
      }
      long long v165 = 0;
      long long v166 = 0;
      unint64_t v167 = 0;
      int64_t v35 = *a4;
      int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v36)
      {
        if (v36 < 0) {
          goto LABEL_175;
        }
        int64_t v37 = (char *)operator new(v36);
        uint64_t v38 = &v37[8 * (v36 >> 3)];
        long long v165 = v37;
        unint64_t v167 = v38;
        memcpy(v37, v35, v36);
        long long v166 = v38;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v168, (void **)&v165);
      if (v165)
      {
        long long v166 = v165;
        operator delete(v165);
      }
      int64_t v22 = v168;
      if (v168)
      {
        uint64_t v169 = v168;
        goto LABEL_173;
      }
      return;
    }
    int v174 = 0;
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_175;
      }
      int64_t v113 = (char *)operator new(v112);
      int64_t v114 = &v113[8 * (v112 >> 3)];
      int v174 = v113;
      uint64_t v176 = v114;
      memcpy(v113, v111, v112);
      uint64_t v175 = v114;
    }
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    unint64_t v173 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_175;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v171 = v117;
      unint64_t v173 = v118;
      memcpy(v117, v115, v116);
      uint64_t v172 = v118;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v174, (void **)&v171);
    if (v171)
    {
      uint64_t v172 = v171;
      operator delete(v171);
    }
    int64_t v22 = v174;
    if (v174)
    {
      uint64_t v175 = v174;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    unint64_t v187 = 0;
    int v186 = 0;
    uint64_t v188 = 0;
    int64_t v103 = *a3;
    int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v104)
    {
      if (v104 < 0) {
        goto LABEL_175;
      }
      int64_t v105 = (char *)operator new(v104);
      int64_t v106 = &v105[8 * (v104 >> 3)];
      int v186 = v105;
      uint64_t v188 = v106;
      memcpy(v105, v103, v104);
      unint64_t v187 = v106;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v107 = *a4;
    int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v108)
    {
      if (v108 < 0) {
        goto LABEL_175;
      }
      int64_t v109 = (char *)operator new(v108);
      int64_t v110 = &v109[8 * (v108 >> 3)];
      uint64_t v183 = v109;
      uint64_t v185 = v110;
      memcpy(v109, v107, v108);
      unint64_t v184 = v110;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v186, (void **)&v183);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_173;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  float16x4_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_175;
    }
    int64_t v25 = (char *)operator new(v24);
    int64_t v26 = &v25[8 * (v24 >> 3)];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  unint64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_175;
    }
    int64_t v29 = (char *)operator new(v28);
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v180, (void **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t Value = *(void *)**a2;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v207[0] = ElementType;
  uint64_t v205 = *(void *)**a1;
  uint64_t v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v205);
  uint64_t Value = v9;
  uint64_t v204 = *(void *)(*a1)[1];
  uint64_t v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v204);
  uint64_t v204 = ElementType;
  uint64_t v205 = v10;
  uint64_t v11 = *(void **)(*(void *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v203 = ElementType;
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v202 = v12;
    if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    v207[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)v207)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_175;
        }
        int64_t v97 = (char *)operator new(v96);
        int64_t v98 = &v97[8 * (v96 >> 3)];
        long long v198 = v97;
        uint64_t v200 = v98;
        memcpy(v97, v95, v96);
        uint64_t v199 = v98;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_175;
        }
        int64_t v101 = operator new(v100);
        int64_t v102 = &v101[v100 >> 3];
        unint64_t v195 = v101;
        uint64_t v197 = v102;
        memcpy(v101, v99, v100);
        uint64_t v196 = v102;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v198, &v195);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_173;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_175;
      }
      int64_t v16 = (char *)operator new(v15);
      int64_t v17 = &v16[8 * (v15 >> 3)];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_19;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v192, &v189);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v207)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (!mlir::Type::isF32((mlir::Type *)v207)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)v207)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v205))
      {
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        int64_t v39 = *a3;
        int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v40)
        {
          if (v40 < 0) {
            goto LABEL_175;
          }
          int64_t v41 = (char *)operator new(v40);
          unint64_t v42 = &v41[8 * (v40 >> 3)];
          uint64_t v162 = v41;
          uint64_t v164 = v42;
          memcpy(v41, v39, v40);
          uint64_t v163 = v42;
        }
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        uint64_t v161 = 0;
        int64_t v43 = *a4;
        int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v44)
        {
          if (v44 < 0) {
            goto LABEL_175;
          }
          int64_t v45 = (char *)operator new(v44);
          uint64_t v46 = &v45[8 * (v44 >> 3)];
          uint64_t v159 = v45;
          uint64_t v161 = v46;
          memcpy(v45, v43, v44);
          uint64_t v160 = v46;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v162, (void **)&v159);
        if (v159)
        {
          uint64_t v160 = v159;
          operator delete(v159);
        }
        int64_t v22 = v162;
        if (v162)
        {
          uint64_t v163 = v162;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v207)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        char v156 = 0;
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_175;
          }
          int64_t v49 = (char *)operator new(v48);
          uint64_t v50 = &v49[8 * (v48 >> 3)];
          char v156 = v49;
          uint64_t v158 = v50;
          memcpy(v49, v47, v48);
          uint64_t v157 = v50;
        }
        uint64_t v153 = 0;
        unint64_t v154 = 0;
        uint64_t v155 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_175;
          }
          int64_t v53 = (char *)operator new(v52);
          unint64_t v54 = &v53[8 * (v52 >> 3)];
          uint64_t v153 = v53;
          uint64_t v155 = v54;
          memcpy(v53, v51, v52);
          unint64_t v154 = v54;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v156, (void **)&v153);
        if (v153)
        {
          unint64_t v154 = v153;
          operator delete(v153);
        }
        int64_t v22 = v156;
        if (v156)
        {
          uint64_t v157 = v156;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v207))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          uint64_t v144 = 0;
          unint64_t v145 = 0;
          uint64_t v146 = 0;
          int64_t v55 = *a3;
          int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
          if (v56)
          {
            if (v56 < 0) {
              goto LABEL_175;
            }
            unint64_t v57 = (char *)operator new(v56);
            int64_t v58 = &v57[8 * (v56 >> 3)];
            uint64_t v144 = v57;
            uint64_t v146 = v58;
            memcpy(v57, v55, v56);
            unint64_t v145 = v58;
          }
          uint64_t v141 = 0;
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          float16x4_t v59 = *a4;
          int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
          if (v60)
          {
            if (v60 < 0) {
              goto LABEL_175;
            }
            int64_t v61 = (char *)operator new(v60);
            int64_t v62 = &v61[8 * (v60 >> 3)];
            uint64_t v141 = v61;
            uint64_t v143 = v62;
            memcpy(v61, v59, v60);
            uint64_t v142 = v62;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v144, (void **)&v141);
          if (v141)
          {
            uint64_t v142 = v141;
            operator delete(v141);
          }
          int64_t v22 = v144;
          if (v144)
          {
            unint64_t v145 = v144;
            goto LABEL_173;
          }
          return;
        }
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v79 = *a3;
        int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v80)
        {
          if (v80 < 0) {
            goto LABEL_175;
          }
          int64_t v81 = (char *)operator new(v80);
          int64_t v82 = &v81[8 * (v80 >> 3)];
          uint64_t v150 = v81;
          uint64_t v152 = v82;
          memcpy(v81, v79, v80);
          uint64_t v151 = v82;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v83 = *a4;
        int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v84)
        {
          if (v84 < 0) {
            goto LABEL_175;
          }
          int64_t v85 = (char *)operator new(v84);
          int64_t v86 = &v85[8 * (v84 >> 3)];
          unint64_t v147 = v85;
          uint64_t v149 = v86;
          memcpy(v85, v83, v84);
          uint64_t v148 = v86;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v150, (void **)&v147);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v207))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_175;
          }
          int64_t v65 = (char *)operator new(v64);
          int64_t v66 = &v65[8 * (v64 >> 3)];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_175;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)15>((unint64_t)a1, a2, (uint64_t)&v138, (void **)&v135);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v207, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_175;
          }
          int64_t v73 = (char *)operator new(v72);
          int64_t v74 = &v73[8 * (v72 >> 3)];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        int64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_175;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v132, (void **)&v129);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v207, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v207, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)v122, (void **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = (void *)v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v207, 8) && !mlir::Type::isInteger((mlir::Type *)v207, 1)) {
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>((mlir::Type *)&v204);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)v120, (void **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_173;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v87 = *a3;
      int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v88)
      {
        if (v88 < 0) {
          goto LABEL_175;
        }
        int64_t v89 = (char *)operator new(v88);
        int64_t v90 = &v89[8 * (v88 >> 3)];
        uint64_t v126 = v89;
        uint64_t v128 = v90;
        memcpy(v89, v87, v88);
        uint64_t v127 = v90;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v91 = *a4;
      int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v92)
      {
        if (v92 < 0) {
          goto LABEL_175;
        }
        int64_t v93 = (char *)operator new(v92);
        int64_t v94 = &v93[8 * (v92 >> 3)];
        char v123 = v93;
        uint64_t v125 = v94;
        memcpy(v93, v91, v92);
        unint64_t v124 = v94;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v126, (void **)&v123);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      unint64_t v170 = 0;
      double v31 = *a3;
      int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v32)
      {
        if (v32 < 0) {
          goto LABEL_175;
        }
        int64_t v33 = (char *)operator new(v32);
        uint64_t v34 = &v33[8 * (v32 >> 3)];
        uint64_t v168 = v33;
        unint64_t v170 = v34;
        memcpy(v33, v31, v32);
        uint64_t v169 = v34;
      }
      long long v165 = 0;
      long long v166 = 0;
      unint64_t v167 = 0;
      int64_t v35 = *a4;
      int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v36)
      {
        if (v36 < 0) {
          goto LABEL_175;
        }
        int64_t v37 = (char *)operator new(v36);
        uint64_t v38 = &v37[8 * (v36 >> 3)];
        long long v165 = v37;
        unint64_t v167 = v38;
        memcpy(v37, v35, v36);
        long long v166 = v38;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v168, (void **)&v165);
      if (v165)
      {
        long long v166 = v165;
        operator delete(v165);
      }
      int64_t v22 = v168;
      if (v168)
      {
        uint64_t v169 = v168;
        goto LABEL_173;
      }
      return;
    }
    int v174 = 0;
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_175;
      }
      int64_t v113 = (char *)operator new(v112);
      int64_t v114 = &v113[8 * (v112 >> 3)];
      int v174 = v113;
      uint64_t v176 = v114;
      memcpy(v113, v111, v112);
      uint64_t v175 = v114;
    }
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    unint64_t v173 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_175;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v171 = v117;
      unint64_t v173 = v118;
      memcpy(v117, v115, v116);
      uint64_t v172 = v118;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v174, (void **)&v171);
    if (v171)
    {
      uint64_t v172 = v171;
      operator delete(v171);
    }
    int64_t v22 = v174;
    if (v174)
    {
      uint64_t v175 = v174;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    unint64_t v187 = 0;
    int v186 = 0;
    uint64_t v188 = 0;
    int64_t v103 = *a3;
    int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v104)
    {
      if (v104 < 0) {
        goto LABEL_175;
      }
      int64_t v105 = (char *)operator new(v104);
      int64_t v106 = &v105[8 * (v104 >> 3)];
      int v186 = v105;
      uint64_t v188 = v106;
      memcpy(v105, v103, v104);
      unint64_t v187 = v106;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v107 = *a4;
    int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v108)
    {
      if (v108 < 0) {
        goto LABEL_175;
      }
      int64_t v109 = (char *)operator new(v108);
      int64_t v110 = &v109[8 * (v108 >> 3)];
      uint64_t v183 = v109;
      uint64_t v185 = v110;
      memcpy(v109, v107, v108);
      unint64_t v184 = v110;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v186, (void **)&v183);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_173;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  float16x4_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_175;
    }
    int64_t v25 = (char *)operator new(v24);
    int64_t v26 = &v25[8 * (v24 >> 3)];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  unint64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_175;
    }
    int64_t v29 = (char *)operator new(v28);
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v180, (void **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t Value = *(void *)**a2;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v207[0] = ElementType;
  uint64_t v205 = *(void *)**a1;
  uint64_t v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v205);
  uint64_t Value = v9;
  uint64_t v204 = *(void *)(*a1)[1];
  uint64_t v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v204);
  uint64_t v204 = ElementType;
  uint64_t v205 = v10;
  uint64_t v11 = *(void **)(*(void *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v203 = ElementType;
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v202 = v12;
    if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    v207[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)v207)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_175;
        }
        int64_t v97 = (char *)operator new(v96);
        int64_t v98 = &v97[8 * (v96 >> 3)];
        long long v198 = v97;
        uint64_t v200 = v98;
        memcpy(v97, v95, v96);
        uint64_t v199 = v98;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_175;
        }
        int64_t v101 = operator new(v100);
        int64_t v102 = &v101[v100 >> 3];
        unint64_t v195 = v101;
        uint64_t v197 = v102;
        memcpy(v101, v99, v100);
        uint64_t v196 = v102;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v198, &v195);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_173;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_175;
      }
      int64_t v16 = (char *)operator new(v15);
      int64_t v17 = &v16[8 * (v15 >> 3)];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_19;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v192, &v189);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v207)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (!mlir::Type::isF32((mlir::Type *)v207)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)v207)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v205))
      {
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        int64_t v39 = *a3;
        int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v40)
        {
          if (v40 < 0) {
            goto LABEL_175;
          }
          int64_t v41 = (char *)operator new(v40);
          unint64_t v42 = &v41[8 * (v40 >> 3)];
          uint64_t v162 = v41;
          uint64_t v164 = v42;
          memcpy(v41, v39, v40);
          uint64_t v163 = v42;
        }
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        uint64_t v161 = 0;
        int64_t v43 = *a4;
        int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v44)
        {
          if (v44 < 0) {
            goto LABEL_175;
          }
          int64_t v45 = (char *)operator new(v44);
          uint64_t v46 = &v45[8 * (v44 >> 3)];
          uint64_t v159 = v45;
          uint64_t v161 = v46;
          memcpy(v45, v43, v44);
          uint64_t v160 = v46;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v162, (void **)&v159);
        if (v159)
        {
          uint64_t v160 = v159;
          operator delete(v159);
        }
        int64_t v22 = v162;
        if (v162)
        {
          uint64_t v163 = v162;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v207)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        char v156 = 0;
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_175;
          }
          int64_t v49 = (char *)operator new(v48);
          uint64_t v50 = &v49[8 * (v48 >> 3)];
          char v156 = v49;
          uint64_t v158 = v50;
          memcpy(v49, v47, v48);
          uint64_t v157 = v50;
        }
        uint64_t v153 = 0;
        unint64_t v154 = 0;
        uint64_t v155 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_175;
          }
          int64_t v53 = (char *)operator new(v52);
          unint64_t v54 = &v53[8 * (v52 >> 3)];
          uint64_t v153 = v53;
          uint64_t v155 = v54;
          memcpy(v53, v51, v52);
          unint64_t v154 = v54;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v156, (void **)&v153);
        if (v153)
        {
          unint64_t v154 = v153;
          operator delete(v153);
        }
        int64_t v22 = v156;
        if (v156)
        {
          uint64_t v157 = v156;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v207))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          uint64_t v144 = 0;
          unint64_t v145 = 0;
          uint64_t v146 = 0;
          int64_t v55 = *a3;
          int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
          if (v56)
          {
            if (v56 < 0) {
              goto LABEL_175;
            }
            unint64_t v57 = (char *)operator new(v56);
            int64_t v58 = &v57[8 * (v56 >> 3)];
            uint64_t v144 = v57;
            uint64_t v146 = v58;
            memcpy(v57, v55, v56);
            unint64_t v145 = v58;
          }
          uint64_t v141 = 0;
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          float16x4_t v59 = *a4;
          int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
          if (v60)
          {
            if (v60 < 0) {
              goto LABEL_175;
            }
            int64_t v61 = (char *)operator new(v60);
            int64_t v62 = &v61[8 * (v60 >> 3)];
            uint64_t v141 = v61;
            uint64_t v143 = v62;
            memcpy(v61, v59, v60);
            uint64_t v142 = v62;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v144, (void **)&v141);
          if (v141)
          {
            uint64_t v142 = v141;
            operator delete(v141);
          }
          int64_t v22 = v144;
          if (v144)
          {
            unint64_t v145 = v144;
            goto LABEL_173;
          }
          return;
        }
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v79 = *a3;
        int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v80)
        {
          if (v80 < 0) {
            goto LABEL_175;
          }
          int64_t v81 = (char *)operator new(v80);
          int64_t v82 = &v81[8 * (v80 >> 3)];
          uint64_t v150 = v81;
          uint64_t v152 = v82;
          memcpy(v81, v79, v80);
          uint64_t v151 = v82;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v83 = *a4;
        int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v84)
        {
          if (v84 < 0) {
            goto LABEL_175;
          }
          int64_t v85 = (char *)operator new(v84);
          int64_t v86 = &v85[8 * (v84 >> 3)];
          unint64_t v147 = v85;
          uint64_t v149 = v86;
          memcpy(v85, v83, v84);
          uint64_t v148 = v86;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v150, (void **)&v147);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v207))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_175;
          }
          int64_t v65 = (char *)operator new(v64);
          int64_t v66 = &v65[8 * (v64 >> 3)];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_175;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)16>((unint64_t)a1, a2, (uint64_t)&v138, (void **)&v135);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v207, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_175;
          }
          int64_t v73 = (char *)operator new(v72);
          int64_t v74 = &v73[8 * (v72 >> 3)];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        int64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_175;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v132, (void **)&v129);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v207, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v207, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)v122, (void **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = (void *)v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v207, 8) && !mlir::Type::isInteger((mlir::Type *)v207, 1)) {
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>((mlir::Type *)&v204);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)v120, (void **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_173;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v87 = *a3;
      int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v88)
      {
        if (v88 < 0) {
          goto LABEL_175;
        }
        int64_t v89 = (char *)operator new(v88);
        int64_t v90 = &v89[8 * (v88 >> 3)];
        uint64_t v126 = v89;
        uint64_t v128 = v90;
        memcpy(v89, v87, v88);
        uint64_t v127 = v90;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v91 = *a4;
      int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v92)
      {
        if (v92 < 0) {
          goto LABEL_175;
        }
        int64_t v93 = (char *)operator new(v92);
        int64_t v94 = &v93[8 * (v92 >> 3)];
        char v123 = v93;
        uint64_t v125 = v94;
        memcpy(v93, v91, v92);
        unint64_t v124 = v94;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v126, (void **)&v123);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      unint64_t v170 = 0;
      double v31 = *a3;
      int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v32)
      {
        if (v32 < 0) {
          goto LABEL_175;
        }
        int64_t v33 = (char *)operator new(v32);
        uint64_t v34 = &v33[8 * (v32 >> 3)];
        uint64_t v168 = v33;
        unint64_t v170 = v34;
        memcpy(v33, v31, v32);
        uint64_t v169 = v34;
      }
      long long v165 = 0;
      long long v166 = 0;
      unint64_t v167 = 0;
      int64_t v35 = *a4;
      int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v36)
      {
        if (v36 < 0) {
          goto LABEL_175;
        }
        int64_t v37 = (char *)operator new(v36);
        uint64_t v38 = &v37[8 * (v36 >> 3)];
        long long v165 = v37;
        unint64_t v167 = v38;
        memcpy(v37, v35, v36);
        long long v166 = v38;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v168, (void **)&v165);
      if (v165)
      {
        long long v166 = v165;
        operator delete(v165);
      }
      int64_t v22 = v168;
      if (v168)
      {
        uint64_t v169 = v168;
        goto LABEL_173;
      }
      return;
    }
    int v174 = 0;
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_175;
      }
      int64_t v113 = (char *)operator new(v112);
      int64_t v114 = &v113[8 * (v112 >> 3)];
      int v174 = v113;
      uint64_t v176 = v114;
      memcpy(v113, v111, v112);
      uint64_t v175 = v114;
    }
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    unint64_t v173 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_175;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v171 = v117;
      unint64_t v173 = v118;
      memcpy(v117, v115, v116);
      uint64_t v172 = v118;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v174, (void **)&v171);
    if (v171)
    {
      uint64_t v172 = v171;
      operator delete(v171);
    }
    int64_t v22 = v174;
    if (v174)
    {
      uint64_t v175 = v174;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    unint64_t v187 = 0;
    int v186 = 0;
    uint64_t v188 = 0;
    int64_t v103 = *a3;
    int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v104)
    {
      if (v104 < 0) {
        goto LABEL_175;
      }
      int64_t v105 = (char *)operator new(v104);
      int64_t v106 = &v105[8 * (v104 >> 3)];
      int v186 = v105;
      uint64_t v188 = v106;
      memcpy(v105, v103, v104);
      unint64_t v187 = v106;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v107 = *a4;
    int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v108)
    {
      if (v108 < 0) {
        goto LABEL_175;
      }
      int64_t v109 = (char *)operator new(v108);
      int64_t v110 = &v109[8 * (v108 >> 3)];
      uint64_t v183 = v109;
      uint64_t v185 = v110;
      memcpy(v109, v107, v108);
      unint64_t v184 = v110;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v186, (void **)&v183);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_173;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  float16x4_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_175;
    }
    int64_t v25 = (char *)operator new(v24);
    int64_t v26 = &v25[8 * (v24 >> 3)];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  unint64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_175;
    }
    int64_t v29 = (char *)operator new(v28);
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v180, (void **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_173;
  }
}

uint64_t mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel(uint64_t result, int a2)
{
  *(void *)float result = mlir::mps::CPUNDArrayArithmeticBinaryKernel::arithmeticBinaryTileKernel;
  *(void *)(result + 8) = 4;
  *(_DWORD *)(result + 16) = a2;
  return result;
}

void mlir::mps::CPUNDArrayArithmeticUnaryKernel::arithmeticUnaryTileKernel(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  switch(*(_DWORD *)(a7 + 16))
  {
    case 6:
      double v10 = *(double *)(a7 + 24);
      unint64_t v145 = 0;
      uint64_t v146 = 0;
      uint64_t v144 = 0;
      uint64_t v12 = *(const void **)a3;
      uint64_t v11 = *(void *)(a3 + 8);
      int64_t v13 = v11 - *(void *)a3;
      if (v11 == *(void *)a3) {
        goto LABEL_5;
      }
      if (v13 < 0) {
        goto LABEL_94;
      }
      uint64_t v14 = (char *)operator new(v11 - *(void *)a3);
      int64_t v15 = &v14[8 * (v13 >> 3)];
      uint64_t v144 = v14;
      uint64_t v146 = v15;
      memcpy(v14, v12, v13);
      unint64_t v145 = v15;
LABEL_5:
      uint64_t v141 = 0;
      uint64_t v142 = 0;
      uint64_t v143 = 0;
      int64_t v16 = *(const void **)a4;
      int64_t v17 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v17) {
        goto LABEL_8;
      }
      if (v17 < 0) {
        goto LABEL_94;
      }
      unint64_t v18 = (char *)operator new(v17);
      int64_t v19 = &v18[8 * (v17 >> 3)];
      uint64_t v141 = v18;
      uint64_t v143 = v19;
      memcpy(v18, v16, v17);
      uint64_t v142 = v19;
LABEL_8:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>(a1, a2, (const void **)&v144, (const void **)&v141, v10);
      if (v141)
      {
        uint64_t v142 = v141;
        operator delete(v141);
      }
      uint64_t v20 = v144;
      if (!v144) {
        return;
      }
      unint64_t v145 = (char *)v144;
      break;
    case 7:
      char v138 = 0;
      uint64_t v139 = 0;
      uint64_t v140 = 0;
      int64_t v22 = *(const void **)a3;
      uint64_t v21 = *(void *)(a3 + 8);
      int64_t v23 = v21 - *(void *)a3;
      if (v21 == *(void *)a3) {
        goto LABEL_15;
      }
      if (v23 < 0) {
        goto LABEL_94;
      }
      int64_t v24 = (char *)operator new(v21 - *(void *)a3);
      int64_t v25 = &v24[8 * (v23 >> 3)];
      char v138 = v24;
      uint64_t v140 = v25;
      memcpy(v24, v22, v23);
      uint64_t v139 = v25;
LABEL_15:
      uint64_t v135 = 0;
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      int64_t v26 = *(const void **)a4;
      int64_t v27 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v27) {
        goto LABEL_18;
      }
      if (v27 < 0) {
        goto LABEL_94;
      }
      int64_t v28 = (char *)operator new(v27);
      int64_t v29 = &v28[8 * (v27 >> 3)];
      uint64_t v135 = v28;
      uint64_t v137 = v29;
      memcpy(v28, v26, v27);
      uint64_t v136 = v29;
LABEL_18:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)7>(a1, a2, (const void **)&v138, (const void **)&v135, 0);
      if (v135)
      {
        uint64_t v136 = v135;
        operator delete(v135);
      }
      uint64_t v20 = v138;
      if (!v138) {
        return;
      }
      uint64_t v139 = (char *)v138;
      break;
    case 8:
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      double v31 = *(const void **)a3;
      uint64_t v30 = *(void *)(a3 + 8);
      int64_t v32 = v30 - *(void *)a3;
      if (v30 == *(void *)a3) {
        goto LABEL_25;
      }
      if (v32 < 0) {
        goto LABEL_94;
      }
      int64_t v33 = (char *)operator new(v30 - *(void *)a3);
      uint64_t v34 = &v33[8 * (v32 >> 3)];
      uint64_t v132 = v33;
      uint64_t v134 = v34;
      memcpy(v33, v31, v32);
      uint64_t v133 = v34;
LABEL_25:
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      int64_t v35 = *(const void **)a4;
      int64_t v36 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v36) {
        goto LABEL_28;
      }
      if (v36 < 0) {
        goto LABEL_94;
      }
      int64_t v37 = (char *)operator new(v36);
      uint64_t v38 = &v37[8 * (v36 >> 3)];
      uint64_t v129 = v37;
      uint64_t v131 = v38;
      memcpy(v37, v35, v36);
      uint64_t v130 = v38;
LABEL_28:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)8>(a1, a2, (const void **)&v132, (const void **)&v129, 0);
      if (v129)
      {
        uint64_t v130 = v129;
        operator delete(v129);
      }
      uint64_t v20 = v132;
      if (!v132) {
        return;
      }
      uint64_t v133 = (char *)v132;
      break;
    case 9:
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v40 = *(const void **)a3;
      uint64_t v39 = *(void *)(a3 + 8);
      int64_t v41 = v39 - *(void *)a3;
      if (v39 == *(void *)a3) {
        goto LABEL_35;
      }
      if (v41 < 0) {
        goto LABEL_94;
      }
      unint64_t v42 = (char *)operator new(v39 - *(void *)a3);
      int64_t v43 = &v42[8 * (v41 >> 3)];
      uint64_t v126 = v42;
      uint64_t v128 = v43;
      memcpy(v42, v40, v41);
      uint64_t v127 = v43;
LABEL_35:
      __p = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v44 = *(const void **)a4;
      int64_t v45 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v45) {
        goto LABEL_38;
      }
      if (v45 < 0) {
        goto LABEL_94;
      }
      uint64_t v46 = (char *)operator new(v45);
      int64_t v47 = &v46[8 * (v45 >> 3)];
      __p = v46;
      uint64_t v125 = v47;
      memcpy(v46, v44, v45);
      unint64_t v124 = v47;
LABEL_38:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)9>(a1, a2, (const void **)&v126, (const void **)&__p, 0);
      if (__p)
      {
        unint64_t v124 = __p;
        operator delete(__p);
      }
      uint64_t v20 = v126;
      if (!v126) {
        return;
      }
      uint64_t v127 = (char *)v126;
      break;
    case 0xA:
      uint64_t v120 = 0;
      long double v121 = 0;
      int16x4_t v122 = 0;
      int64_t v49 = *(const void **)a3;
      uint64_t v48 = *(void *)(a3 + 8);
      int64_t v50 = v48 - *(void *)a3;
      if (v48 == *(void *)a3) {
        goto LABEL_45;
      }
      if (v50 < 0) {
        goto LABEL_94;
      }
      int64_t v51 = (char *)operator new(v48 - *(void *)a3);
      int64_t v52 = &v51[8 * (v50 >> 3)];
      uint64_t v120 = v51;
      int16x4_t v122 = v52;
      memcpy(v51, v49, v50);
      long double v121 = v52;
LABEL_45:
      int64_t v117 = 0;
      int64_t v118 = 0;
      int64_t v119 = 0;
      int64_t v53 = *(const void **)a4;
      int64_t v54 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v54) {
        goto LABEL_48;
      }
      if (v54 < 0) {
        goto LABEL_94;
      }
      int64_t v55 = (char *)operator new(v54);
      int64_t v56 = &v55[8 * (v54 >> 3)];
      int64_t v117 = v55;
      int64_t v119 = v56;
      memcpy(v55, v53, v54);
      int64_t v118 = v56;
LABEL_48:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)10>(a1, a2, (const void **)&v120, (const void **)&v117);
      if (v117)
      {
        int64_t v118 = v117;
        operator delete(v117);
      }
      uint64_t v20 = v120;
      if (!v120) {
        return;
      }
      long double v121 = (char *)v120;
      break;
    case 0xB:
      int64_t v114 = 0;
      int64_t v115 = 0;
      int64_t v116 = 0;
      int64_t v58 = *(const void **)a3;
      uint64_t v57 = *(void *)(a3 + 8);
      int64_t v59 = v57 - *(void *)a3;
      if (v57 == *(void *)a3) {
        goto LABEL_55;
      }
      if (v59 < 0) {
        goto LABEL_94;
      }
      int64_t v60 = (char *)operator new(v57 - *(void *)a3);
      int64_t v61 = &v60[8 * (v59 >> 3)];
      int64_t v114 = v60;
      int64_t v116 = v61;
      memcpy(v60, v58, v59);
      int64_t v115 = v61;
LABEL_55:
      int64_t v111 = 0;
      int64_t v112 = 0;
      int64_t v113 = 0;
      int64_t v62 = *(const void **)a4;
      int64_t v63 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v63) {
        goto LABEL_58;
      }
      if (v63 < 0) {
        goto LABEL_94;
      }
      int64_t v64 = (char *)operator new(v63);
      int64_t v65 = &v64[8 * (v63 >> 3)];
      int64_t v111 = v64;
      int64_t v113 = v65;
      memcpy(v64, v62, v63);
      int64_t v112 = v65;
LABEL_58:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)11>(a1, a2, (const void **)&v114, (const void **)&v111, 0);
      if (v111)
      {
        int64_t v112 = v111;
        operator delete(v111);
      }
      uint64_t v20 = v114;
      if (!v114) {
        return;
      }
      int64_t v115 = (char *)v114;
      break;
    case 0xC:
      int64_t v108 = 0;
      int64_t v109 = 0;
      int64_t v110 = 0;
      int64_t v67 = *(const void **)a3;
      uint64_t v66 = *(void *)(a3 + 8);
      int64_t v68 = v66 - *(void *)a3;
      if (v66 == *(void *)a3) {
        goto LABEL_65;
      }
      if (v68 < 0) {
        goto LABEL_94;
      }
      int64_t v69 = (char *)operator new(v66 - *(void *)a3);
      int64_t v70 = &v69[8 * (v68 >> 3)];
      int64_t v108 = v69;
      int64_t v110 = v70;
      memcpy(v69, v67, v68);
      int64_t v109 = v70;
LABEL_65:
      int64_t v105 = 0;
      int64_t v106 = 0;
      int64_t v107 = 0;
      int64_t v71 = *(const void **)a4;
      int64_t v72 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v72) {
        goto LABEL_68;
      }
      if (v72 < 0) {
        goto LABEL_94;
      }
      int64_t v73 = (char *)operator new(v72);
      int64_t v74 = &v73[8 * (v72 >> 3)];
      int64_t v105 = v73;
      int64_t v107 = v74;
      memcpy(v73, v71, v72);
      int64_t v106 = v74;
LABEL_68:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)12>(a1, a2, (const void **)&v108, (const void **)&v105, 0.0);
      if (v105)
      {
        int64_t v106 = v105;
        operator delete(v105);
      }
      uint64_t v20 = v108;
      if (!v108) {
        return;
      }
      int64_t v109 = (char *)v108;
      break;
    case 0xD:
      int64_t v102 = 0;
      int64_t v103 = 0;
      int64_t v104 = 0;
      int64_t v76 = *(const void **)a3;
      uint64_t v75 = *(void *)(a3 + 8);
      int64_t v77 = v75 - *(void *)a3;
      if (v75 == *(void *)a3) {
        goto LABEL_75;
      }
      if (v77 < 0) {
        goto LABEL_94;
      }
      int64_t v78 = (char *)operator new(v75 - *(void *)a3);
      int64_t v79 = &v78[8 * (v77 >> 3)];
      int64_t v102 = v78;
      int64_t v104 = v79;
      memcpy(v78, v76, v77);
      int64_t v103 = v79;
LABEL_75:
      int64_t v99 = 0;
      int64_t v100 = 0;
      int64_t v101 = 0;
      int64_t v80 = *(const void **)a4;
      int64_t v81 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v81) {
        goto LABEL_78;
      }
      if (v81 < 0) {
        goto LABEL_94;
      }
      int64_t v82 = (char *)operator new(v81);
      int64_t v83 = &v82[8 * (v81 >> 3)];
      int64_t v99 = v82;
      int64_t v101 = v83;
      memcpy(v82, v80, v81);
      int64_t v100 = v83;
LABEL_78:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)13>(a1, a2, (const void **)&v102, (const void **)&v99, 0);
      if (v99)
      {
        int64_t v100 = v99;
        operator delete(v99);
      }
      uint64_t v20 = v102;
      if (!v102) {
        return;
      }
      int64_t v103 = (char *)v102;
      break;
    case 0xE:
      int64_t v96 = 0;
      int64_t v97 = 0;
      int64_t v98 = 0;
      int64_t v85 = *(const void **)a3;
      uint64_t v84 = *(void *)(a3 + 8);
      int64_t v86 = v84 - *(void *)a3;
      if (v84 == *(void *)a3) {
        goto LABEL_85;
      }
      if (v86 < 0) {
        goto LABEL_94;
      }
      int64_t v87 = (char *)operator new(v84 - *(void *)a3);
      int64_t v88 = &v87[8 * (v86 >> 3)];
      int64_t v96 = v87;
      int64_t v98 = v88;
      memcpy(v87, v85, v86);
      int64_t v97 = v88;
LABEL_85:
      int64_t v93 = 0;
      int64_t v94 = 0;
      int64_t v95 = 0;
      int64_t v89 = *(const void **)a4;
      int64_t v90 = *(void *)(a4 + 8) - *(void *)a4;
      if (!v90) {
        goto LABEL_88;
      }
      if (v90 < 0) {
LABEL_94:
      }
        abort();
      int64_t v91 = (char *)operator new(v90);
      int64_t v92 = &v91[8 * (v90 >> 3)];
      int64_t v93 = v91;
      int64_t v95 = v92;
      memcpy(v91, v89, v90);
      int64_t v94 = v92;
LABEL_88:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)14>(a1, a2, (const void **)&v96, (const void **)&v93, 0.0);
      if (v93)
      {
        int64_t v94 = v93;
        operator delete(v93);
      }
      uint64_t v20 = v96;
      if (!v96) {
        return;
      }
      int64_t v97 = v96;
      break;
    default:
      return;
  }
  operator delete(v20);
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t Value = *(void *)**a1;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  uint64_t v205 = ElementType;
  uint64_t v203 = *(void *)**a2;
  uint64_t v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  uint64_t v203 = v11;
  uint64_t Value = v11;
  uint64_t v12 = *(void **)(*(void *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v202 = v11;
    if (*(_UNKNOWN **)(*(void *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = ElementType;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v79 = *a3;
      int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v80)
      {
        if (v80 < 0) {
          goto LABEL_169;
        }
        int64_t v81 = (uint64_t *)operator new(v80);
        int64_t v82 = &v81[v80 >> 3];
        long long v198 = v81;
        uint64_t v200 = v82;
        memcpy(v81, v79, v80);
        uint64_t v199 = v82;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v83 = *a4;
      int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v84)
      {
        if (v84 < 0) {
          goto LABEL_169;
        }
        int64_t v85 = (uint64_t *)operator new(v84);
        int64_t v86 = &v85[v84 >> 3];
        unint64_t v195 = v85;
        uint64_t v197 = v86;
        memcpy(v85, v83, v84);
        uint64_t v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v198, &v195, a5);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_169;
      }
      int64_t v16 = (uint64_t *)operator new(v15);
      int64_t v17 = &v16[v15 >> 3];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_15;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = (uint64_t *)operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)6>(a1, a2, &v192, &v189, a5);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        unint64_t v170 = 0;
        double v31 = *a3;
        int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v32)
        {
          if (v32 < 0) {
            goto LABEL_169;
          }
          int64_t v33 = (uint64_t *)operator new(v32);
          uint64_t v34 = &v33[v32 >> 3];
          uint64_t v168 = v33;
          unint64_t v170 = v34;
          memcpy(v33, v31, v32);
          uint64_t v169 = v34;
        }
        long long v165 = 0;
        long long v166 = 0;
        unint64_t v167 = 0;
        int64_t v35 = *a4;
        int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v36)
        {
          if (v36 < 0) {
            goto LABEL_169;
          }
          int64_t v37 = (char *)operator new(v36);
          uint64_t v38 = &v37[8 * (v36 >> 3)];
          long long v165 = v37;
          unint64_t v167 = v38;
          memcpy(v37, v35, v36);
          long long v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)6>(a1, a2, &v168, (uint64_t **)&v165, a5);
        if (v165)
        {
          long long v166 = v165;
          operator delete(v165);
        }
        int64_t v22 = v168;
        if (v168)
        {
          uint64_t v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      uint64_t v175 = 0;
      int v174 = 0;
      uint64_t v176 = 0;
      int64_t v103 = *a3;
      int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v104)
      {
        if (v104 < 0) {
          goto LABEL_169;
        }
        int64_t v105 = (uint64_t *)operator new(v104);
        int64_t v106 = &v105[v104 >> 3];
        int v174 = v105;
        uint64_t v176 = v106;
        memcpy(v105, v103, v104);
        uint64_t v175 = v106;
      }
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int64_t v107 = *a4;
      int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v108)
      {
        if (v108 < 0) {
          goto LABEL_169;
        }
        int64_t v109 = (char *)operator new(v108);
        int64_t v110 = &v109[8 * (v108 >> 3)];
        uint64_t v171 = v109;
        unint64_t v173 = v110;
        memcpy(v109, v107, v108);
        uint64_t v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v174, (uint64_t **)&v171, a5);
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      int64_t v22 = v174;
      if (v174)
      {
        uint64_t v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_169;
          }
          int64_t v49 = (uint64_t *)operator new(v48);
          int64_t v50 = &v49[v48 >> 3];
          uint64_t v150 = v49;
          uint64_t v152 = v50;
          memcpy(v49, v47, v48);
          uint64_t v151 = v50;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_169;
          }
          int64_t v53 = (char *)operator new(v52);
          int64_t v54 = &v53[8 * (v52 >> 3)];
          unint64_t v147 = v53;
          uint64_t v149 = v54;
          memcpy(v53, v51, v52);
          uint64_t v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)6>(a1, a2, &v150, (uint64_t **)&v147, a5);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        uint64_t v146 = 0;
        int64_t v55 = *a3;
        int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v56)
        {
          if (v56 < 0) {
            goto LABEL_169;
          }
          uint64_t v57 = (uint64_t *)operator new(v56);
          int64_t v58 = &v57[v56 >> 3];
          uint64_t v144 = v57;
          uint64_t v146 = v58;
          memcpy(v57, v55, v56);
          unint64_t v145 = v58;
        }
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        int64_t v59 = *a4;
        int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v60)
        {
          if (v60 < 0) {
            goto LABEL_169;
          }
          int64_t v61 = (char *)operator new(v60);
          int64_t v62 = &v61[8 * (v60 >> 3)];
          uint64_t v141 = v61;
          uint64_t v143 = v62;
          memcpy(v61, v59, v60);
          uint64_t v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)6>(a1, a2, &v144, (uint64_t **)&v141, a5);
        if (v141)
        {
          uint64_t v142 = v141;
          operator delete(v141);
        }
        int64_t v22 = v144;
        if (v144)
        {
          unint64_t v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_169;
          }
          int64_t v65 = (uint64_t *)operator new(v64);
          uint64_t v66 = &v65[v64 >> 3];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_169;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)6>(a1, a2, &v138, (uint64_t **)&v135, a5);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_169;
          }
          int64_t v73 = (uint64_t *)operator new(v72);
          int64_t v74 = &v73[v72 >> 3];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_169;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)6>(a1, a2, &v132, (uint64_t **)&v129, a5);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)6>(a1, a2, v122, (uint64_t **)v121, a5);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>((mlir::Type *)&v203);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)6>((uint64_t)a1, a2, (uint64_t **)v120, (uint64_t **)v119, a5);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_169;
        }
        int64_t v97 = (uint64_t *)operator new(v96);
        int64_t v98 = &v97[v96 >> 3];
        uint64_t v126 = v97;
        uint64_t v128 = v98;
        memcpy(v97, v95, v96);
        uint64_t v127 = v98;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_169;
        }
        int64_t v101 = (char *)operator new(v100);
        int64_t v102 = &v101[8 * (v100 >> 3)];
        char v123 = v101;
        uint64_t v125 = v102;
        memcpy(v101, v99, v100);
        unint64_t v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)6>(a1, a2, &v126, (uint64_t **)&v123, a5);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      char v156 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v39 = *a3;
      int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v40)
      {
        if (v40 < 0) {
          goto LABEL_169;
        }
        int64_t v41 = (uint64_t *)operator new(v40);
        unint64_t v42 = &v41[v40 >> 3];
        char v156 = v41;
        uint64_t v158 = v42;
        memcpy(v41, v39, v40);
        uint64_t v157 = v42;
      }
      uint64_t v153 = 0;
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      int64_t v43 = *a4;
      int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v44)
      {
        if (v44 < 0) {
          goto LABEL_169;
        }
        int64_t v45 = (char *)operator new(v44);
        uint64_t v46 = &v45[8 * (v44 >> 3)];
        uint64_t v153 = v45;
        uint64_t v155 = v46;
        memcpy(v45, v43, v44);
        unint64_t v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)6>(a1, a2, &v156, (uint64_t **)&v153, a5);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      int64_t v22 = v156;
      if (v156)
      {
        uint64_t v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v162 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_169;
      }
      int64_t v113 = (uint64_t *)operator new(v112);
      int64_t v114 = &v113[v112 >> 3];
      uint64_t v162 = v113;
      uint64_t v164 = v114;
      memcpy(v113, v111, v112);
      uint64_t v163 = v114;
    }
    uint64_t v159 = 0;
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_169;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v159 = v117;
      uint64_t v161 = v118;
      memcpy(v117, v115, v116);
      uint64_t v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v162, (uint64_t **)&v159, a5);
    if (v159)
    {
      uint64_t v160 = v159;
      operator delete(v159);
    }
    int64_t v22 = v162;
    if (v162)
    {
      uint64_t v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    int v186 = 0;
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    int64_t v87 = *a3;
    int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v88)
    {
      if (v88 < 0) {
        goto LABEL_169;
      }
      int64_t v89 = (uint64_t *)operator new(v88);
      int64_t v90 = &v89[v88 >> 3];
      int v186 = v89;
      uint64_t v188 = v90;
      memcpy(v89, v87, v88);
      unint64_t v187 = v90;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v91 = *a4;
    int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v92)
    {
      if (v92 < 0) {
        goto LABEL_169;
      }
      int64_t v93 = (char *)operator new(v92);
      int64_t v94 = &v93[8 * (v92 >> 3)];
      uint64_t v183 = v93;
      uint64_t v185 = v94;
      memcpy(v93, v91, v92);
      unint64_t v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  int64_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_169;
    }
    int64_t v25 = (uint64_t *)operator new(v24);
    int64_t v26 = &v25[v24 >> 3];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  int64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_169;
    }
    int64_t v29 = (char *)operator new(v28);
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)6>(a1, a2, &v180, (uint64_t **)&__p, a5);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, float16x4_t a5)
{
  uint64_t Value = *(void *)**a1;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  uint64_t v205 = ElementType;
  uint64_t v203 = *(void *)**a2;
  uint64_t v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  uint64_t v203 = v11;
  uint64_t Value = v11;
  uint64_t v12 = *(void **)(*(void *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v202 = v11;
    if (*(_UNKNOWN **)(*(void *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = ElementType;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v79 = *a3;
      int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v80)
      {
        if (v80 < 0) {
          goto LABEL_169;
        }
        int64_t v81 = (uint64_t *)operator new(v80);
        int64_t v82 = &v81[v80 >> 3];
        long long v198 = v81;
        uint64_t v200 = v82;
        memcpy(v81, v79, v80);
        uint64_t v199 = v82;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v83 = *a4;
      int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v84)
      {
        if (v84 < 0) {
          goto LABEL_169;
        }
        int64_t v85 = (uint64_t *)operator new(v84);
        int64_t v86 = &v85[v84 >> 3];
        unint64_t v195 = v85;
        uint64_t v197 = v86;
        memcpy(v85, v83, v84);
        uint64_t v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v198, &v195);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_169;
      }
      int64_t v16 = (uint64_t *)operator new(v15);
      int64_t v17 = &v16[v15 >> 3];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_15;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = (uint64_t *)operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)7>(a1, a2, &v192, &v189);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        unint64_t v170 = 0;
        double v31 = *a3;
        int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v32)
        {
          if (v32 < 0) {
            goto LABEL_169;
          }
          int64_t v33 = (uint64_t *)operator new(v32);
          uint64_t v34 = &v33[v32 >> 3];
          uint64_t v168 = v33;
          unint64_t v170 = v34;
          memcpy(v33, v31, v32);
          uint64_t v169 = v34;
        }
        long long v165 = 0;
        long long v166 = 0;
        unint64_t v167 = 0;
        int64_t v35 = *a4;
        int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v36)
        {
          if (v36 < 0) {
            goto LABEL_169;
          }
          int64_t v37 = (char *)operator new(v36);
          uint64_t v38 = &v37[8 * (v36 >> 3)];
          long long v165 = v37;
          unint64_t v167 = v38;
          memcpy(v37, v35, v36);
          long long v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)7>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          long long v166 = v165;
          operator delete(v165);
        }
        int64_t v22 = v168;
        if (v168)
        {
          uint64_t v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      uint64_t v175 = 0;
      int v174 = 0;
      uint64_t v176 = 0;
      int64_t v103 = *a3;
      int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v104)
      {
        if (v104 < 0) {
          goto LABEL_169;
        }
        int64_t v105 = (uint64_t *)operator new(v104);
        int64_t v106 = &v105[v104 >> 3];
        int v174 = v105;
        uint64_t v176 = v106;
        memcpy(v105, v103, v104);
        uint64_t v175 = v106;
      }
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int64_t v107 = *a4;
      int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v108)
      {
        if (v108 < 0) {
          goto LABEL_169;
        }
        int64_t v109 = (char *)operator new(v108);
        int64_t v110 = &v109[8 * (v108 >> 3)];
        uint64_t v171 = v109;
        unint64_t v173 = v110;
        memcpy(v109, v107, v108);
        uint64_t v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v174, (uint64_t **)&v171);
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      int64_t v22 = v174;
      if (v174)
      {
        uint64_t v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_169;
          }
          int64_t v49 = (uint64_t *)operator new(v48);
          int64_t v50 = &v49[v48 >> 3];
          uint64_t v150 = v49;
          uint64_t v152 = v50;
          memcpy(v49, v47, v48);
          uint64_t v151 = v50;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_169;
          }
          int64_t v53 = (char *)operator new(v52);
          int64_t v54 = &v53[8 * (v52 >> 3)];
          unint64_t v147 = v53;
          uint64_t v149 = v54;
          memcpy(v53, v51, v52);
          uint64_t v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)7>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        uint64_t v146 = 0;
        int64_t v55 = *a3;
        int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v56)
        {
          if (v56 < 0) {
            goto LABEL_169;
          }
          uint64_t v57 = (uint64_t *)operator new(v56);
          int64_t v58 = &v57[v56 >> 3];
          uint64_t v144 = v57;
          uint64_t v146 = v58;
          memcpy(v57, v55, v56);
          unint64_t v145 = v58;
        }
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        int64_t v59 = *a4;
        int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v60)
        {
          if (v60 < 0) {
            goto LABEL_169;
          }
          int64_t v61 = (char *)operator new(v60);
          int64_t v62 = &v61[8 * (v60 >> 3)];
          uint64_t v141 = v61;
          uint64_t v143 = v62;
          memcpy(v61, v59, v60);
          uint64_t v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)7>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          uint64_t v142 = v141;
          operator delete(v141);
        }
        int64_t v22 = v144;
        if (v144)
        {
          unint64_t v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_169;
          }
          int64_t v65 = (uint64_t *)operator new(v64);
          uint64_t v66 = &v65[v64 >> 3];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_169;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)7>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_169;
          }
          int64_t v73 = (uint64_t *)operator new(v72);
          int64_t v74 = &v73[v72 >> 3];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_169;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>((mlir::Type *)&v203);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_169;
        }
        int64_t v97 = (uint64_t *)operator new(v96);
        int64_t v98 = &v97[v96 >> 3];
        uint64_t v126 = v97;
        uint64_t v128 = v98;
        memcpy(v97, v95, v96);
        uint64_t v127 = v98;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_169;
        }
        int64_t v101 = (char *)operator new(v100);
        int64_t v102 = &v101[8 * (v100 >> 3)];
        char v123 = v101;
        uint64_t v125 = v102;
        memcpy(v101, v99, v100);
        unint64_t v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      char v156 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v39 = *a3;
      int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v40)
      {
        if (v40 < 0) {
          goto LABEL_169;
        }
        int64_t v41 = (uint64_t *)operator new(v40);
        unint64_t v42 = &v41[v40 >> 3];
        char v156 = v41;
        uint64_t v158 = v42;
        memcpy(v41, v39, v40);
        uint64_t v157 = v42;
      }
      uint64_t v153 = 0;
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      int64_t v43 = *a4;
      int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v44)
      {
        if (v44 < 0) {
          goto LABEL_169;
        }
        int64_t v45 = (char *)operator new(v44);
        uint64_t v46 = &v45[8 * (v44 >> 3)];
        uint64_t v153 = v45;
        uint64_t v155 = v46;
        memcpy(v45, v43, v44);
        unint64_t v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)7>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      int64_t v22 = v156;
      if (v156)
      {
        uint64_t v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v162 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_169;
      }
      int64_t v113 = (uint64_t *)operator new(v112);
      int64_t v114 = &v113[v112 >> 3];
      uint64_t v162 = v113;
      uint64_t v164 = v114;
      memcpy(v113, v111, v112);
      uint64_t v163 = v114;
    }
    uint64_t v159 = 0;
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_169;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v159 = v117;
      uint64_t v161 = v118;
      memcpy(v117, v115, v116);
      uint64_t v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      uint64_t v160 = v159;
      operator delete(v159);
    }
    int64_t v22 = v162;
    if (v162)
    {
      uint64_t v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    int v186 = 0;
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    int64_t v87 = *a3;
    int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v88)
    {
      if (v88 < 0) {
        goto LABEL_169;
      }
      int64_t v89 = (uint64_t *)operator new(v88);
      int64_t v90 = &v89[v88 >> 3];
      int v186 = v89;
      uint64_t v188 = v90;
      memcpy(v89, v87, v88);
      unint64_t v187 = v90;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v91 = *a4;
    int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v92)
    {
      if (v92 < 0) {
        goto LABEL_169;
      }
      int64_t v93 = (char *)operator new(v92);
      int64_t v94 = &v93[8 * (v92 >> 3)];
      uint64_t v183 = v93;
      uint64_t v185 = v94;
      memcpy(v93, v91, v92);
      unint64_t v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  int64_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_169;
    }
    int64_t v25 = (uint64_t *)operator new(v24);
    int64_t v26 = &v25[v24 >> 3];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  int64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_169;
    }
    int64_t v29 = (char *)operator new(v28);
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)7>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, float16x4_t a5)
{
  uint64_t Value = *(void *)**a1;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  uint64_t v205 = ElementType;
  uint64_t v203 = *(void *)**a2;
  uint64_t v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  uint64_t v203 = v11;
  uint64_t Value = v11;
  uint64_t v12 = *(void **)(*(void *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v202 = v11;
    if (*(_UNKNOWN **)(*(void *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = ElementType;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v79 = *a3;
      int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v80)
      {
        if (v80 < 0) {
          goto LABEL_169;
        }
        int64_t v81 = (uint64_t *)operator new(v80);
        int64_t v82 = &v81[v80 >> 3];
        long long v198 = v81;
        uint64_t v200 = v82;
        memcpy(v81, v79, v80);
        uint64_t v199 = v82;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v83 = *a4;
      int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v84)
      {
        if (v84 < 0) {
          goto LABEL_169;
        }
        int64_t v85 = (uint64_t *)operator new(v84);
        int64_t v86 = &v85[v84 >> 3];
        unint64_t v195 = v85;
        uint64_t v197 = v86;
        memcpy(v85, v83, v84);
        uint64_t v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v198, &v195);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_169;
      }
      int64_t v16 = (uint64_t *)operator new(v15);
      int64_t v17 = &v16[v15 >> 3];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_15;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = (uint64_t *)operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)8>(a1, a2, &v192, &v189);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        unint64_t v170 = 0;
        double v31 = *a3;
        int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v32)
        {
          if (v32 < 0) {
            goto LABEL_169;
          }
          int64_t v33 = (uint64_t *)operator new(v32);
          uint64_t v34 = &v33[v32 >> 3];
          uint64_t v168 = v33;
          unint64_t v170 = v34;
          memcpy(v33, v31, v32);
          uint64_t v169 = v34;
        }
        long long v165 = 0;
        long long v166 = 0;
        unint64_t v167 = 0;
        int64_t v35 = *a4;
        int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v36)
        {
          if (v36 < 0) {
            goto LABEL_169;
          }
          int64_t v37 = (char *)operator new(v36);
          uint64_t v38 = &v37[8 * (v36 >> 3)];
          long long v165 = v37;
          unint64_t v167 = v38;
          memcpy(v37, v35, v36);
          long long v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)8>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          long long v166 = v165;
          operator delete(v165);
        }
        int64_t v22 = v168;
        if (v168)
        {
          uint64_t v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      uint64_t v175 = 0;
      int v174 = 0;
      uint64_t v176 = 0;
      int64_t v103 = *a3;
      int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v104)
      {
        if (v104 < 0) {
          goto LABEL_169;
        }
        int64_t v105 = (uint64_t *)operator new(v104);
        int64_t v106 = &v105[v104 >> 3];
        int v174 = v105;
        uint64_t v176 = v106;
        memcpy(v105, v103, v104);
        uint64_t v175 = v106;
      }
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int64_t v107 = *a4;
      int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v108)
      {
        if (v108 < 0) {
          goto LABEL_169;
        }
        int64_t v109 = (char *)operator new(v108);
        int64_t v110 = &v109[8 * (v108 >> 3)];
        uint64_t v171 = v109;
        unint64_t v173 = v110;
        memcpy(v109, v107, v108);
        uint64_t v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v174, (uint64_t **)&v171);
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      int64_t v22 = v174;
      if (v174)
      {
        uint64_t v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_169;
          }
          int64_t v49 = (uint64_t *)operator new(v48);
          int64_t v50 = &v49[v48 >> 3];
          uint64_t v150 = v49;
          uint64_t v152 = v50;
          memcpy(v49, v47, v48);
          uint64_t v151 = v50;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_169;
          }
          int64_t v53 = (char *)operator new(v52);
          int64_t v54 = &v53[8 * (v52 >> 3)];
          unint64_t v147 = v53;
          uint64_t v149 = v54;
          memcpy(v53, v51, v52);
          uint64_t v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)8>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        uint64_t v146 = 0;
        int64_t v55 = *a3;
        int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v56)
        {
          if (v56 < 0) {
            goto LABEL_169;
          }
          uint64_t v57 = (uint64_t *)operator new(v56);
          int64_t v58 = &v57[v56 >> 3];
          uint64_t v144 = v57;
          uint64_t v146 = v58;
          memcpy(v57, v55, v56);
          unint64_t v145 = v58;
        }
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        int64_t v59 = *a4;
        int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v60)
        {
          if (v60 < 0) {
            goto LABEL_169;
          }
          int64_t v61 = (char *)operator new(v60);
          int64_t v62 = &v61[8 * (v60 >> 3)];
          uint64_t v141 = v61;
          uint64_t v143 = v62;
          memcpy(v61, v59, v60);
          uint64_t v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)8>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          uint64_t v142 = v141;
          operator delete(v141);
        }
        int64_t v22 = v144;
        if (v144)
        {
          unint64_t v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_169;
          }
          int64_t v65 = (uint64_t *)operator new(v64);
          uint64_t v66 = &v65[v64 >> 3];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_169;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)8>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_169;
          }
          int64_t v73 = (uint64_t *)operator new(v72);
          int64_t v74 = &v73[v72 >> 3];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_169;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>((mlir::Type *)&v203);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_169;
        }
        int64_t v97 = (uint64_t *)operator new(v96);
        int64_t v98 = &v97[v96 >> 3];
        uint64_t v126 = v97;
        uint64_t v128 = v98;
        memcpy(v97, v95, v96);
        uint64_t v127 = v98;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_169;
        }
        int64_t v101 = (char *)operator new(v100);
        int64_t v102 = &v101[8 * (v100 >> 3)];
        char v123 = v101;
        uint64_t v125 = v102;
        memcpy(v101, v99, v100);
        unint64_t v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      char v156 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v39 = *a3;
      int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v40)
      {
        if (v40 < 0) {
          goto LABEL_169;
        }
        int64_t v41 = (uint64_t *)operator new(v40);
        unint64_t v42 = &v41[v40 >> 3];
        char v156 = v41;
        uint64_t v158 = v42;
        memcpy(v41, v39, v40);
        uint64_t v157 = v42;
      }
      uint64_t v153 = 0;
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      int64_t v43 = *a4;
      int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v44)
      {
        if (v44 < 0) {
          goto LABEL_169;
        }
        int64_t v45 = (char *)operator new(v44);
        uint64_t v46 = &v45[8 * (v44 >> 3)];
        uint64_t v153 = v45;
        uint64_t v155 = v46;
        memcpy(v45, v43, v44);
        unint64_t v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)8>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      int64_t v22 = v156;
      if (v156)
      {
        uint64_t v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v162 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_169;
      }
      int64_t v113 = (uint64_t *)operator new(v112);
      int64_t v114 = &v113[v112 >> 3];
      uint64_t v162 = v113;
      uint64_t v164 = v114;
      memcpy(v113, v111, v112);
      uint64_t v163 = v114;
    }
    uint64_t v159 = 0;
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_169;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v159 = v117;
      uint64_t v161 = v118;
      memcpy(v117, v115, v116);
      uint64_t v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      uint64_t v160 = v159;
      operator delete(v159);
    }
    int64_t v22 = v162;
    if (v162)
    {
      uint64_t v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    int v186 = 0;
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    int64_t v87 = *a3;
    int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v88)
    {
      if (v88 < 0) {
        goto LABEL_169;
      }
      int64_t v89 = (uint64_t *)operator new(v88);
      int64_t v90 = &v89[v88 >> 3];
      int v186 = v89;
      uint64_t v188 = v90;
      memcpy(v89, v87, v88);
      unint64_t v187 = v90;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v91 = *a4;
    int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v92)
    {
      if (v92 < 0) {
        goto LABEL_169;
      }
      int64_t v93 = (char *)operator new(v92);
      int64_t v94 = &v93[8 * (v92 >> 3)];
      uint64_t v183 = v93;
      uint64_t v185 = v94;
      memcpy(v93, v91, v92);
      unint64_t v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  int64_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_169;
    }
    int64_t v25 = (uint64_t *)operator new(v24);
    int64_t v26 = &v25[v24 >> 3];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  int64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_169;
    }
    int64_t v29 = (char *)operator new(v28);
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)8>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, float16x4_t a5)
{
  uint64_t Value = *(void *)**a1;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  uint64_t v205 = ElementType;
  uint64_t v203 = *(void *)**a2;
  uint64_t v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  uint64_t v203 = v11;
  uint64_t Value = v11;
  uint64_t v12 = *(void **)(*(void *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v202 = v11;
    if (*(_UNKNOWN **)(*(void *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = ElementType;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v79 = *a3;
      int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v80)
      {
        if (v80 < 0) {
          goto LABEL_169;
        }
        int64_t v81 = (uint64_t *)operator new(v80);
        int64_t v82 = &v81[v80 >> 3];
        long long v198 = v81;
        uint64_t v200 = v82;
        memcpy(v81, v79, v80);
        uint64_t v199 = v82;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v83 = *a4;
      int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v84)
      {
        if (v84 < 0) {
          goto LABEL_169;
        }
        int64_t v85 = (uint64_t *)operator new(v84);
        int64_t v86 = &v85[v84 >> 3];
        unint64_t v195 = v85;
        uint64_t v197 = v86;
        memcpy(v85, v83, v84);
        uint64_t v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v198, &v195);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_169;
      }
      int64_t v16 = (uint64_t *)operator new(v15);
      int64_t v17 = &v16[v15 >> 3];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_15;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = (uint64_t *)operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)9>(a1, a2, &v192, &v189);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        unint64_t v170 = 0;
        double v31 = *a3;
        int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v32)
        {
          if (v32 < 0) {
            goto LABEL_169;
          }
          int64_t v33 = (uint64_t *)operator new(v32);
          uint64_t v34 = &v33[v32 >> 3];
          uint64_t v168 = v33;
          unint64_t v170 = v34;
          memcpy(v33, v31, v32);
          uint64_t v169 = v34;
        }
        long long v165 = 0;
        long long v166 = 0;
        unint64_t v167 = 0;
        int64_t v35 = *a4;
        int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v36)
        {
          if (v36 < 0) {
            goto LABEL_169;
          }
          int64_t v37 = (char *)operator new(v36);
          uint64_t v38 = &v37[8 * (v36 >> 3)];
          long long v165 = v37;
          unint64_t v167 = v38;
          memcpy(v37, v35, v36);
          long long v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)9>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          long long v166 = v165;
          operator delete(v165);
        }
        int64_t v22 = v168;
        if (v168)
        {
          uint64_t v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      uint64_t v175 = 0;
      int v174 = 0;
      uint64_t v176 = 0;
      int64_t v103 = *a3;
      int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v104)
      {
        if (v104 < 0) {
          goto LABEL_169;
        }
        int64_t v105 = (uint64_t *)operator new(v104);
        int64_t v106 = &v105[v104 >> 3];
        int v174 = v105;
        uint64_t v176 = v106;
        memcpy(v105, v103, v104);
        uint64_t v175 = v106;
      }
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int64_t v107 = *a4;
      int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v108)
      {
        if (v108 < 0) {
          goto LABEL_169;
        }
        int64_t v109 = (char *)operator new(v108);
        int64_t v110 = &v109[8 * (v108 >> 3)];
        uint64_t v171 = v109;
        unint64_t v173 = v110;
        memcpy(v109, v107, v108);
        uint64_t v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v174, (uint64_t **)&v171);
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      int64_t v22 = v174;
      if (v174)
      {
        uint64_t v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_169;
          }
          int64_t v49 = (uint64_t *)operator new(v48);
          int64_t v50 = &v49[v48 >> 3];
          uint64_t v150 = v49;
          uint64_t v152 = v50;
          memcpy(v49, v47, v48);
          uint64_t v151 = v50;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_169;
          }
          int64_t v53 = (char *)operator new(v52);
          int64_t v54 = &v53[8 * (v52 >> 3)];
          unint64_t v147 = v53;
          uint64_t v149 = v54;
          memcpy(v53, v51, v52);
          uint64_t v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)9>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        uint64_t v146 = 0;
        int64_t v55 = *a3;
        int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v56)
        {
          if (v56 < 0) {
            goto LABEL_169;
          }
          uint64_t v57 = (uint64_t *)operator new(v56);
          int64_t v58 = &v57[v56 >> 3];
          uint64_t v144 = v57;
          uint64_t v146 = v58;
          memcpy(v57, v55, v56);
          unint64_t v145 = v58;
        }
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        int64_t v59 = *a4;
        int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v60)
        {
          if (v60 < 0) {
            goto LABEL_169;
          }
          int64_t v61 = (char *)operator new(v60);
          int64_t v62 = &v61[8 * (v60 >> 3)];
          uint64_t v141 = v61;
          uint64_t v143 = v62;
          memcpy(v61, v59, v60);
          uint64_t v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)9>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          uint64_t v142 = v141;
          operator delete(v141);
        }
        int64_t v22 = v144;
        if (v144)
        {
          unint64_t v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_169;
          }
          int64_t v65 = (uint64_t *)operator new(v64);
          uint64_t v66 = &v65[v64 >> 3];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_169;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)9>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_169;
          }
          int64_t v73 = (uint64_t *)operator new(v72);
          int64_t v74 = &v73[v72 >> 3];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_169;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)9>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)9>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>((mlir::Type *)&v203);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)9>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_169;
        }
        int64_t v97 = (uint64_t *)operator new(v96);
        int64_t v98 = &v97[v96 >> 3];
        uint64_t v126 = v97;
        uint64_t v128 = v98;
        memcpy(v97, v95, v96);
        uint64_t v127 = v98;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_169;
        }
        int64_t v101 = (char *)operator new(v100);
        int64_t v102 = &v101[8 * (v100 >> 3)];
        char v123 = v101;
        uint64_t v125 = v102;
        memcpy(v101, v99, v100);
        unint64_t v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)9>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      char v156 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v39 = *a3;
      int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v40)
      {
        if (v40 < 0) {
          goto LABEL_169;
        }
        int64_t v41 = (uint64_t *)operator new(v40);
        unint64_t v42 = &v41[v40 >> 3];
        char v156 = v41;
        uint64_t v158 = v42;
        memcpy(v41, v39, v40);
        uint64_t v157 = v42;
      }
      uint64_t v153 = 0;
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      int64_t v43 = *a4;
      int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v44)
      {
        if (v44 < 0) {
          goto LABEL_169;
        }
        int64_t v45 = (char *)operator new(v44);
        uint64_t v46 = &v45[8 * (v44 >> 3)];
        uint64_t v153 = v45;
        uint64_t v155 = v46;
        memcpy(v45, v43, v44);
        unint64_t v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)9>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      int64_t v22 = v156;
      if (v156)
      {
        uint64_t v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v162 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_169;
      }
      int64_t v113 = (uint64_t *)operator new(v112);
      int64_t v114 = &v113[v112 >> 3];
      uint64_t v162 = v113;
      uint64_t v164 = v114;
      memcpy(v113, v111, v112);
      uint64_t v163 = v114;
    }
    uint64_t v159 = 0;
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_169;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v159 = v117;
      uint64_t v161 = v118;
      memcpy(v117, v115, v116);
      uint64_t v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      uint64_t v160 = v159;
      operator delete(v159);
    }
    int64_t v22 = v162;
    if (v162)
    {
      uint64_t v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    int v186 = 0;
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    int64_t v87 = *a3;
    int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v88)
    {
      if (v88 < 0) {
        goto LABEL_169;
      }
      int64_t v89 = (uint64_t *)operator new(v88);
      int64_t v90 = &v89[v88 >> 3];
      int v186 = v89;
      uint64_t v188 = v90;
      memcpy(v89, v87, v88);
      unint64_t v187 = v90;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v91 = *a4;
    int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v92)
    {
      if (v92 < 0) {
        goto LABEL_169;
      }
      int64_t v93 = (char *)operator new(v92);
      int64_t v94 = &v93[8 * (v92 >> 3)];
      uint64_t v183 = v93;
      uint64_t v185 = v94;
      memcpy(v93, v91, v92);
      unint64_t v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  int64_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_169;
    }
    int64_t v25 = (uint64_t *)operator new(v24);
    int64_t v26 = &v25[v24 >> 3];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  int64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_169;
    }
    int64_t v29 = (char *)operator new(v28);
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)9>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t Value = *(void *)**a1;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  uint64_t v203 = ElementType;
  uint64_t v201 = *(void *)**a2;
  uint64_t v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v201);
  uint64_t v201 = v9;
  uint64_t Value = v9;
  double v10 = *(void **)(*(void *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v200 = v9;
    if (*(_UNKNOWN **)(*(void *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v11 = ElementType;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v199 = v11;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v200);
    uint64_t v203 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v199);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
  {
    if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      long long v198 = 0;
      int64_t v77 = *a3;
      int64_t v78 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v78)
      {
        if (v78 < 0) {
          goto LABEL_169;
        }
        int64_t v79 = (uint64_t *)operator new(v78);
        int64_t v80 = &v79[v78 >> 3];
        uint64_t v196 = v79;
        long long v198 = v80;
        memcpy(v79, v77, v78);
        uint64_t v197 = v80;
      }
      uint64_t v193 = 0;
      uint64_t v194 = 0;
      unint64_t v195 = 0;
      int64_t v81 = *a4;
      int64_t v82 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v82)
      {
        if (v82 < 0) {
          goto LABEL_169;
        }
        int64_t v83 = (uint64_t *)operator new(v82);
        int64_t v84 = &v83[v82 >> 3];
        uint64_t v193 = v83;
        unint64_t v195 = v84;
        memcpy(v83, v81, v82);
        uint64_t v194 = v84;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v196, &v193);
      if (v193)
      {
        uint64_t v194 = v193;
        operator delete(v193);
      }
      uint64_t v20 = v196;
      if (v196)
      {
        uint64_t v197 = v196;
        goto LABEL_167;
      }
      return;
    }
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    int64_t v192 = 0;
    uint64_t v12 = *a3;
    int64_t v13 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v13)
    {
      if (v13 < 0) {
        goto LABEL_169;
      }
      uint64_t v14 = (uint64_t *)operator new(v13);
      int64_t v15 = &v14[v13 >> 3];
      unint64_t v190 = v14;
      int64_t v192 = v15;
      memcpy(v14, v12, v13);
      uint64_t v191 = v15;
    }
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    unsigned int v189 = 0;
    int64_t v16 = *a4;
    int64_t v17 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v17) {
      goto LABEL_15;
    }
    if ((v17 & 0x8000000000000000) == 0)
    {
      unint64_t v18 = (uint64_t *)operator new(v17);
      int64_t v19 = &v18[v17 >> 3];
      unint64_t v187 = v18;
      unsigned int v189 = v19;
      memcpy(v18, v16, v17);
      uint64_t v188 = v19;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)10>(a1, a2, &v190, &v187);
      if (v187)
      {
        uint64_t v188 = v187;
        operator delete(v187);
      }
      uint64_t v20 = v190;
      if (v190)
      {
        uint64_t v191 = v190;
LABEL_167:
        operator delete(v20);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v203))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v203))
    {
      if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        long long v166 = 0;
        unint64_t v167 = 0;
        uint64_t v168 = 0;
        int64_t v29 = *a3;
        int64_t v30 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v30)
        {
          if (v30 < 0) {
            goto LABEL_169;
          }
          double v31 = (uint64_t *)operator new(v30);
          int64_t v32 = (char *)&v31[v30 >> 3];
          long long v166 = v31;
          uint64_t v168 = v32;
          memcpy(v31, v29, v30);
          unint64_t v167 = (uint64_t *)v32;
        }
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        long long v165 = 0;
        int64_t v33 = *a4;
        int64_t v34 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v34)
        {
          if (v34 < 0) {
            goto LABEL_169;
          }
          int64_t v35 = (char *)operator new(v34);
          int64_t v36 = &v35[8 * (v34 >> 3)];
          uint64_t v163 = v35;
          long long v165 = v36;
          memcpy(v35, v33, v34);
          uint64_t v164 = v36;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)10>(a1, a2, (uint64_t)&v166, (uint64_t **)&v163);
        if (v163)
        {
          uint64_t v164 = v163;
          operator delete(v163);
        }
        uint64_t v20 = v166;
        if (v166)
        {
          unint64_t v167 = v166;
          goto LABEL_167;
        }
        return;
      }
      unint64_t v173 = 0;
      uint64_t v172 = 0;
      int v174 = 0;
      int64_t v101 = *a3;
      int64_t v102 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v102)
      {
        if (v102 < 0) {
          goto LABEL_169;
        }
        int64_t v103 = (uint64_t *)operator new(v102);
        int64_t v104 = &v103[v102 >> 3];
        uint64_t v172 = v103;
        int v174 = v104;
        memcpy(v103, v101, v102);
        unint64_t v173 = v104;
      }
      uint64_t v169 = 0;
      unint64_t v170 = 0;
      uint64_t v171 = 0;
      int64_t v105 = *a4;
      int64_t v106 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v106)
      {
        if (v106 < 0) {
          goto LABEL_169;
        }
        int64_t v107 = (char *)operator new(v106);
        int64_t v108 = &v107[8 * (v106 >> 3)];
        uint64_t v169 = v107;
        uint64_t v171 = v108;
        memcpy(v107, v105, v106);
        unint64_t v170 = v108;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v172, (uint64_t **)&v169);
      if (v169)
      {
        unint64_t v170 = v169;
        operator delete(v169);
      }
      uint64_t v20 = v172;
      if (v172)
      {
        unint64_t v173 = v172;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v203))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        uint64_t v150 = 0;
        int64_t v45 = *a3;
        int64_t v46 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v46)
        {
          if (v46 < 0) {
            goto LABEL_169;
          }
          int64_t v47 = (uint64_t *)operator new(v46);
          int64_t v48 = &v47[v46 >> 3];
          uint64_t v148 = v47;
          uint64_t v150 = v48;
          memcpy(v47, v45, v46);
          uint64_t v149 = v48;
        }
        unint64_t v145 = 0;
        uint64_t v146 = 0;
        unint64_t v147 = 0;
        int64_t v49 = *a4;
        int64_t v50 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v50)
        {
          if (v50 < 0) {
            goto LABEL_169;
          }
          int64_t v51 = (char *)operator new(v50);
          int64_t v52 = &v51[8 * (v50 >> 3)];
          unint64_t v145 = v51;
          unint64_t v147 = v52;
          memcpy(v51, v49, v50);
          uint64_t v146 = v52;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)10>(a1, a2, &v148, (uint64_t **)&v145);
        if (v145)
        {
          uint64_t v146 = v145;
          operator delete(v145);
        }
        uint64_t v20 = v148;
        if (v148)
        {
          uint64_t v149 = v148;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        int64_t v53 = *a3;
        int64_t v54 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v54)
        {
          if (v54 < 0) {
            goto LABEL_169;
          }
          int64_t v55 = (uint64_t *)operator new(v54);
          int64_t v56 = &v55[v54 >> 3];
          uint64_t v142 = v55;
          uint64_t v144 = v56;
          memcpy(v55, v53, v54);
          uint64_t v143 = v56;
        }
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        uint64_t v57 = *a4;
        int64_t v58 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v58)
        {
          if (v58 < 0) {
            goto LABEL_169;
          }
          int64_t v59 = (char *)operator new(v58);
          int64_t v60 = &v59[8 * (v58 >> 3)];
          uint64_t v139 = v59;
          uint64_t v141 = v60;
          memcpy(v59, v57, v58);
          uint64_t v140 = v60;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)10>(a1, a2, &v142, (uint64_t **)&v139);
        if (v139)
        {
          uint64_t v140 = v139;
          operator delete(v139);
        }
        uint64_t v20 = v142;
        if (v142)
        {
          uint64_t v143 = v142;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
      {
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        char v138 = 0;
        int64_t v61 = *a3;
        int64_t v62 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v62)
        {
          if (v62 < 0) {
            goto LABEL_169;
          }
          int64_t v63 = (uint64_t *)operator new(v62);
          int64_t v64 = &v63[v62 >> 3];
          uint64_t v136 = v63;
          char v138 = v64;
          memcpy(v63, v61, v62);
          uint64_t v137 = v64;
        }
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        uint64_t v135 = 0;
        int64_t v65 = *a4;
        int64_t v66 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v66)
        {
          if (v66 < 0) {
            goto LABEL_169;
          }
          int64_t v67 = (char *)operator new(v66);
          int64_t v68 = &v67[8 * (v66 >> 3)];
          uint64_t v133 = v67;
          uint64_t v135 = v68;
          memcpy(v67, v65, v66);
          uint64_t v134 = v68;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)10>(a1, a2, &v136, (uint64_t **)&v133);
        if (v133)
        {
          uint64_t v134 = v133;
          operator delete(v133);
        }
        uint64_t v20 = v136;
        if (v136)
        {
          uint64_t v137 = v136;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v132 = 0;
        int64_t v69 = *a3;
        int64_t v70 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v70)
        {
          if (v70 < 0) {
            goto LABEL_169;
          }
          int64_t v71 = (uint64_t *)operator new(v70);
          int64_t v72 = &v71[v70 >> 3];
          uint64_t v130 = v71;
          uint64_t v132 = v72;
          memcpy(v71, v69, v70);
          uint64_t v131 = v72;
        }
        uint64_t v127 = 0;
        uint64_t v128 = 0;
        uint64_t v129 = 0;
        int64_t v73 = *a4;
        int64_t v74 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v74)
        {
          if (v74 < 0) {
            goto LABEL_169;
          }
          uint64_t v75 = (char *)operator new(v74);
          int64_t v76 = &v75[8 * (v74 >> 3)];
          uint64_t v127 = v75;
          uint64_t v129 = v76;
          memcpy(v75, v73, v74);
          uint64_t v128 = v76;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)10>(a1, a2, &v130, (uint64_t **)&v127);
        if (v127)
        {
          uint64_t v128 = v127;
          operator delete(v127);
        }
        uint64_t v20 = v130;
        if (v130)
        {
          uint64_t v131 = v130;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)10>(a1, a2, v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          uint64_t v20 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>((mlir::Type *)&v201);
          }
          std::vector<long long>::vector(v118, (uint64_t)a3);
          std::vector<long long>::vector(v117, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)10>(a1, a2, (uint64_t **)v118, (uint64_t **)v117);
          if (v117[0])
          {
            v117[1] = v117[0];
            operator delete(v117[0]);
          }
          uint64_t v20 = (uint64_t *)v118[0];
          if (v118[0])
          {
            v118[1] = v118[0];
            goto LABEL_167;
          }
        }
        return;
      }
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      uint64_t v126 = 0;
      int64_t v93 = *a3;
      int64_t v94 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v94)
      {
        if (v94 < 0) {
          goto LABEL_169;
        }
        int64_t v95 = (uint64_t *)operator new(v94);
        int64_t v96 = &v95[v94 >> 3];
        unint64_t v124 = v95;
        uint64_t v126 = v96;
        memcpy(v95, v93, v94);
        uint64_t v125 = v96;
      }
      long double v121 = 0;
      int16x4_t v122 = 0;
      char v123 = 0;
      int64_t v97 = *a4;
      int64_t v98 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v98)
      {
        if (v98 < 0) {
          goto LABEL_169;
        }
        int64_t v99 = (char *)operator new(v98);
        int64_t v100 = &v99[8 * (v98 >> 3)];
        long double v121 = v99;
        char v123 = v100;
        memcpy(v99, v97, v98);
        int16x4_t v122 = v100;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)10>(a1, a2, &v124, (uint64_t **)&v121);
      if (v121)
      {
        int16x4_t v122 = v121;
        operator delete(v121);
      }
      uint64_t v20 = v124;
      if (v124)
      {
        uint64_t v125 = v124;
        goto LABEL_167;
      }
      return;
    }
    if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      char v156 = 0;
      int64_t v37 = *a3;
      int64_t v38 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v38)
      {
        if (v38 < 0) {
          goto LABEL_169;
        }
        uint64_t v39 = (uint64_t *)operator new(v38);
        int64_t v40 = &v39[v38 >> 3];
        unint64_t v154 = v39;
        char v156 = v40;
        memcpy(v39, v37, v38);
        uint64_t v155 = v40;
      }
      uint64_t v151 = 0;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      int64_t v41 = *a4;
      int64_t v42 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v42)
      {
        if (v42 < 0) {
          goto LABEL_169;
        }
        int64_t v43 = (char *)operator new(v42);
        int64_t v44 = &v43[8 * (v42 >> 3)];
        uint64_t v151 = v43;
        uint64_t v153 = v44;
        memcpy(v43, v41, v42);
        uint64_t v152 = v44;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)10>(a1, a2, &v154, (uint64_t **)&v151);
      if (v151)
      {
        uint64_t v152 = v151;
        operator delete(v151);
      }
      uint64_t v20 = v154;
      if (v154)
      {
        uint64_t v155 = v154;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    uint64_t v162 = 0;
    int64_t v109 = *a3;
    int64_t v110 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v110)
    {
      if (v110 < 0) {
        goto LABEL_169;
      }
      int64_t v111 = (uint64_t *)operator new(v110);
      int64_t v112 = &v111[v110 >> 3];
      uint64_t v160 = v111;
      uint64_t v162 = v112;
      memcpy(v111, v109, v110);
      uint64_t v161 = v112;
    }
    uint64_t v157 = 0;
    uint64_t v158 = 0;
    uint64_t v159 = 0;
    int64_t v113 = *a4;
    int64_t v114 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v114)
    {
      if (v114 < 0) {
        goto LABEL_169;
      }
      int64_t v115 = (char *)operator new(v114);
      int64_t v116 = &v115[8 * (v114 >> 3)];
      uint64_t v157 = v115;
      uint64_t v159 = v116;
      memcpy(v115, v113, v114);
      uint64_t v158 = v116;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v160, (uint64_t **)&v157);
    if (v157)
    {
      uint64_t v158 = v157;
      operator delete(v157);
    }
    uint64_t v20 = v160;
    if (v160)
    {
      uint64_t v161 = v160;
      goto LABEL_167;
    }
    return;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    unint64_t v184 = 0;
    uint64_t v185 = 0;
    int v186 = 0;
    int64_t v85 = *a3;
    int64_t v86 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v86)
    {
      if (v86 < 0) {
        goto LABEL_169;
      }
      int64_t v87 = (uint64_t *)operator new(v86);
      int64_t v88 = &v87[v86 >> 3];
      unint64_t v184 = v87;
      int v186 = v88;
      memcpy(v87, v85, v86);
      uint64_t v185 = v88;
    }
    unsigned int v182 = 0;
    uint64_t v181 = 0;
    uint64_t v183 = 0;
    int64_t v89 = *a4;
    int64_t v90 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v90)
    {
      if (v90 < 0) {
        goto LABEL_169;
      }
      int64_t v91 = (char *)operator new(v90);
      int64_t v92 = &v91[8 * (v90 >> 3)];
      uint64_t v181 = v91;
      uint64_t v183 = v92;
      memcpy(v91, v89, v90);
      unsigned int v182 = v92;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v184, (uint64_t **)&v181);
    if (v181)
    {
      unsigned int v182 = v181;
      operator delete(v181);
    }
    uint64_t v20 = v184;
    if (v184)
    {
      uint64_t v185 = v184;
      goto LABEL_167;
    }
    return;
  }
  uint64_t v179 = 0;
  uint64_t v178 = 0;
  unint64_t v180 = 0;
  uint64_t v21 = *a3;
  int64_t v22 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v22)
  {
    if (v22 < 0) {
      goto LABEL_169;
    }
    int64_t v23 = (uint64_t *)operator new(v22);
    int64_t v24 = (char *)&v23[v22 >> 3];
    uint64_t v178 = v23;
    unint64_t v180 = v24;
    memcpy(v23, v21, v22);
    uint64_t v179 = (uint64_t *)v24;
  }
  uint64_t v176 = 0;
  __p = 0;
  unsigned int v177 = 0;
  int64_t v25 = *a4;
  int64_t v26 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v26)
  {
    if (v26 < 0) {
      goto LABEL_169;
    }
    int64_t v27 = (char *)operator new(v26);
    int64_t v28 = &v27[8 * (v26 >> 3)];
    __p = v27;
    unsigned int v177 = v28;
    memcpy(v27, v25, v26);
    uint64_t v176 = v28;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)10>(a1, a2, (uint64_t)&v178, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v176 = __p;
    operator delete(__p);
  }
  uint64_t v20 = v178;
  if (v178)
  {
    uint64_t v179 = v178;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, float16x4_t a5)
{
  uint64_t Value = *(void *)**a1;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  uint64_t v205 = ElementType;
  uint64_t v203 = *(void *)**a2;
  uint64_t v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  uint64_t v203 = v11;
  uint64_t Value = v11;
  uint64_t v12 = *(void **)(*(void *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v202 = v11;
    if (*(_UNKNOWN **)(*(void *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = ElementType;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v79 = *a3;
      int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v80)
      {
        if (v80 < 0) {
          goto LABEL_169;
        }
        int64_t v81 = (uint64_t *)operator new(v80);
        int64_t v82 = &v81[v80 >> 3];
        long long v198 = v81;
        uint64_t v200 = v82;
        memcpy(v81, v79, v80);
        uint64_t v199 = v82;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v83 = *a4;
      int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v84)
      {
        if (v84 < 0) {
          goto LABEL_169;
        }
        int64_t v85 = (uint64_t *)operator new(v84);
        int64_t v86 = &v85[v84 >> 3];
        unint64_t v195 = v85;
        uint64_t v197 = v86;
        memcpy(v85, v83, v84);
        uint64_t v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v198, &v195);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_169;
      }
      int64_t v16 = (uint64_t *)operator new(v15);
      int64_t v17 = &v16[v15 >> 3];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_15;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = (uint64_t *)operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)11>(a1, a2, &v192, &v189);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        unint64_t v170 = 0;
        double v31 = *a3;
        int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v32)
        {
          if (v32 < 0) {
            goto LABEL_169;
          }
          int64_t v33 = (uint64_t *)operator new(v32);
          int64_t v34 = &v33[v32 >> 3];
          uint64_t v168 = v33;
          unint64_t v170 = v34;
          memcpy(v33, v31, v32);
          uint64_t v169 = v34;
        }
        long long v165 = 0;
        long long v166 = 0;
        unint64_t v167 = 0;
        int64_t v35 = *a4;
        int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v36)
        {
          if (v36 < 0) {
            goto LABEL_169;
          }
          int64_t v37 = (char *)operator new(v36);
          int64_t v38 = &v37[8 * (v36 >> 3)];
          long long v165 = v37;
          unint64_t v167 = v38;
          memcpy(v37, v35, v36);
          long long v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)11>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          long long v166 = v165;
          operator delete(v165);
        }
        int64_t v22 = v168;
        if (v168)
        {
          uint64_t v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      uint64_t v175 = 0;
      int v174 = 0;
      uint64_t v176 = 0;
      int64_t v103 = *a3;
      int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v104)
      {
        if (v104 < 0) {
          goto LABEL_169;
        }
        int64_t v105 = (uint64_t *)operator new(v104);
        int64_t v106 = &v105[v104 >> 3];
        int v174 = v105;
        uint64_t v176 = v106;
        memcpy(v105, v103, v104);
        uint64_t v175 = v106;
      }
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int64_t v107 = *a4;
      int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v108)
      {
        if (v108 < 0) {
          goto LABEL_169;
        }
        int64_t v109 = (char *)operator new(v108);
        int64_t v110 = &v109[8 * (v108 >> 3)];
        uint64_t v171 = v109;
        unint64_t v173 = v110;
        memcpy(v109, v107, v108);
        uint64_t v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v174, (uint64_t **)&v171);
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      int64_t v22 = v174;
      if (v174)
      {
        uint64_t v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_169;
          }
          int64_t v49 = (uint64_t *)operator new(v48);
          int64_t v50 = &v49[v48 >> 3];
          uint64_t v150 = v49;
          uint64_t v152 = v50;
          memcpy(v49, v47, v48);
          uint64_t v151 = v50;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_169;
          }
          int64_t v53 = (char *)operator new(v52);
          int64_t v54 = &v53[8 * (v52 >> 3)];
          unint64_t v147 = v53;
          uint64_t v149 = v54;
          memcpy(v53, v51, v52);
          uint64_t v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)11>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        uint64_t v146 = 0;
        int64_t v55 = *a3;
        int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v56)
        {
          if (v56 < 0) {
            goto LABEL_169;
          }
          uint64_t v57 = (uint64_t *)operator new(v56);
          int64_t v58 = &v57[v56 >> 3];
          uint64_t v144 = v57;
          uint64_t v146 = v58;
          memcpy(v57, v55, v56);
          unint64_t v145 = v58;
        }
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        int64_t v59 = *a4;
        int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v60)
        {
          if (v60 < 0) {
            goto LABEL_169;
          }
          int64_t v61 = (char *)operator new(v60);
          int64_t v62 = &v61[8 * (v60 >> 3)];
          uint64_t v141 = v61;
          uint64_t v143 = v62;
          memcpy(v61, v59, v60);
          uint64_t v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)11>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          uint64_t v142 = v141;
          operator delete(v141);
        }
        int64_t v22 = v144;
        if (v144)
        {
          unint64_t v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_169;
          }
          int64_t v65 = (uint64_t *)operator new(v64);
          int64_t v66 = &v65[v64 >> 3];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_169;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)11>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_169;
          }
          int64_t v73 = (uint64_t *)operator new(v72);
          int64_t v74 = &v73[v72 >> 3];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_169;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>((mlir::Type *)&v203);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_169;
        }
        int64_t v97 = (uint64_t *)operator new(v96);
        int64_t v98 = &v97[v96 >> 3];
        uint64_t v126 = v97;
        uint64_t v128 = v98;
        memcpy(v97, v95, v96);
        uint64_t v127 = v98;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_169;
        }
        int64_t v101 = (char *)operator new(v100);
        int64_t v102 = &v101[8 * (v100 >> 3)];
        char v123 = v101;
        uint64_t v125 = v102;
        memcpy(v101, v99, v100);
        unint64_t v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      char v156 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v39 = *a3;
      int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v40)
      {
        if (v40 < 0) {
          goto LABEL_169;
        }
        int64_t v41 = (uint64_t *)operator new(v40);
        int64_t v42 = &v41[v40 >> 3];
        char v156 = v41;
        uint64_t v158 = v42;
        memcpy(v41, v39, v40);
        uint64_t v157 = v42;
      }
      uint64_t v153 = 0;
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      int64_t v43 = *a4;
      int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v44)
      {
        if (v44 < 0) {
          goto LABEL_169;
        }
        int64_t v45 = (char *)operator new(v44);
        int64_t v46 = &v45[8 * (v44 >> 3)];
        uint64_t v153 = v45;
        uint64_t v155 = v46;
        memcpy(v45, v43, v44);
        unint64_t v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)11>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      int64_t v22 = v156;
      if (v156)
      {
        uint64_t v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v162 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_169;
      }
      int64_t v113 = (uint64_t *)operator new(v112);
      int64_t v114 = &v113[v112 >> 3];
      uint64_t v162 = v113;
      uint64_t v164 = v114;
      memcpy(v113, v111, v112);
      uint64_t v163 = v114;
    }
    uint64_t v159 = 0;
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_169;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v159 = v117;
      uint64_t v161 = v118;
      memcpy(v117, v115, v116);
      uint64_t v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      uint64_t v160 = v159;
      operator delete(v159);
    }
    int64_t v22 = v162;
    if (v162)
    {
      uint64_t v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    int v186 = 0;
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    int64_t v87 = *a3;
    int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v88)
    {
      if (v88 < 0) {
        goto LABEL_169;
      }
      int64_t v89 = (uint64_t *)operator new(v88);
      int64_t v90 = &v89[v88 >> 3];
      int v186 = v89;
      uint64_t v188 = v90;
      memcpy(v89, v87, v88);
      unint64_t v187 = v90;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v91 = *a4;
    int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v92)
    {
      if (v92 < 0) {
        goto LABEL_169;
      }
      int64_t v93 = (char *)operator new(v92);
      int64_t v94 = &v93[8 * (v92 >> 3)];
      uint64_t v183 = v93;
      uint64_t v185 = v94;
      memcpy(v93, v91, v92);
      unint64_t v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  int64_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_169;
    }
    int64_t v25 = (uint64_t *)operator new(v24);
    int64_t v26 = &v25[v24 >> 3];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  int64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_169;
    }
    int64_t v29 = (char *)operator new(v28);
    int64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)11>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t Value = *(void *)**a1;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  uint64_t v205 = ElementType;
  uint64_t v203 = *(void *)**a2;
  uint64_t v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  uint64_t v203 = v11;
  uint64_t Value = v11;
  uint64_t v12 = *(void **)(*(void *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v202 = v11;
    if (*(_UNKNOWN **)(*(void *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = ElementType;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v79 = *a3;
      int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v80)
      {
        if (v80 < 0) {
          goto LABEL_169;
        }
        int64_t v81 = (uint64_t *)operator new(v80);
        int64_t v82 = &v81[v80 >> 3];
        long long v198 = v81;
        uint64_t v200 = v82;
        memcpy(v81, v79, v80);
        uint64_t v199 = v82;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v83 = *a4;
      int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v84)
      {
        if (v84 < 0) {
          goto LABEL_169;
        }
        int64_t v85 = (uint64_t *)operator new(v84);
        int64_t v86 = &v85[v84 >> 3];
        unint64_t v195 = v85;
        uint64_t v197 = v86;
        memcpy(v85, v83, v84);
        uint64_t v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v198, &v195);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_169;
      }
      int64_t v16 = (uint64_t *)operator new(v15);
      int64_t v17 = &v16[v15 >> 3];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_15;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = (uint64_t *)operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)12>(a1, a2, &v192, &v189);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        unint64_t v170 = 0;
        double v31 = *a3;
        int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v32)
        {
          if (v32 < 0) {
            goto LABEL_169;
          }
          int64_t v33 = (uint64_t *)operator new(v32);
          int64_t v34 = &v33[v32 >> 3];
          uint64_t v168 = v33;
          unint64_t v170 = v34;
          memcpy(v33, v31, v32);
          uint64_t v169 = v34;
        }
        long long v165 = 0;
        long long v166 = 0;
        unint64_t v167 = 0;
        int64_t v35 = *a4;
        int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v36)
        {
          if (v36 < 0) {
            goto LABEL_169;
          }
          int64_t v37 = (char *)operator new(v36);
          int64_t v38 = &v37[8 * (v36 >> 3)];
          long long v165 = v37;
          unint64_t v167 = v38;
          memcpy(v37, v35, v36);
          long long v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)12>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          long long v166 = v165;
          operator delete(v165);
        }
        int64_t v22 = v168;
        if (v168)
        {
          uint64_t v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      uint64_t v175 = 0;
      int v174 = 0;
      uint64_t v176 = 0;
      int64_t v103 = *a3;
      int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v104)
      {
        if (v104 < 0) {
          goto LABEL_169;
        }
        int64_t v105 = (uint64_t *)operator new(v104);
        int64_t v106 = &v105[v104 >> 3];
        int v174 = v105;
        uint64_t v176 = v106;
        memcpy(v105, v103, v104);
        uint64_t v175 = v106;
      }
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int64_t v107 = *a4;
      int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v108)
      {
        if (v108 < 0) {
          goto LABEL_169;
        }
        int64_t v109 = (char *)operator new(v108);
        int64_t v110 = &v109[8 * (v108 >> 3)];
        uint64_t v171 = v109;
        unint64_t v173 = v110;
        memcpy(v109, v107, v108);
        uint64_t v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v174, (uint64_t **)&v171, a5);
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      int64_t v22 = v174;
      if (v174)
      {
        uint64_t v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_169;
          }
          int64_t v49 = (uint64_t *)operator new(v48);
          int64_t v50 = &v49[v48 >> 3];
          uint64_t v150 = v49;
          uint64_t v152 = v50;
          memcpy(v49, v47, v48);
          uint64_t v151 = v50;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_169;
          }
          int64_t v53 = (char *)operator new(v52);
          int64_t v54 = &v53[8 * (v52 >> 3)];
          unint64_t v147 = v53;
          uint64_t v149 = v54;
          memcpy(v53, v51, v52);
          uint64_t v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)12>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        uint64_t v146 = 0;
        int64_t v55 = *a3;
        int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v56)
        {
          if (v56 < 0) {
            goto LABEL_169;
          }
          uint64_t v57 = (uint64_t *)operator new(v56);
          int64_t v58 = &v57[v56 >> 3];
          uint64_t v144 = v57;
          uint64_t v146 = v58;
          memcpy(v57, v55, v56);
          unint64_t v145 = v58;
        }
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        int64_t v59 = *a4;
        int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v60)
        {
          if (v60 < 0) {
            goto LABEL_169;
          }
          int64_t v61 = (char *)operator new(v60);
          int64_t v62 = &v61[8 * (v60 >> 3)];
          uint64_t v141 = v61;
          uint64_t v143 = v62;
          memcpy(v61, v59, v60);
          uint64_t v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)12>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          uint64_t v142 = v141;
          operator delete(v141);
        }
        int64_t v22 = v144;
        if (v144)
        {
          unint64_t v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_169;
          }
          int64_t v65 = (uint64_t *)operator new(v64);
          int64_t v66 = &v65[v64 >> 3];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_169;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)12>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_169;
          }
          int64_t v73 = (uint64_t *)operator new(v72);
          int64_t v74 = &v73[v72 >> 3];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_169;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)12>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)12>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>((mlir::Type *)&v203);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)12>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_169;
        }
        int64_t v97 = (uint64_t *)operator new(v96);
        int64_t v98 = &v97[v96 >> 3];
        uint64_t v126 = v97;
        uint64_t v128 = v98;
        memcpy(v97, v95, v96);
        uint64_t v127 = v98;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_169;
        }
        int64_t v101 = (char *)operator new(v100);
        int64_t v102 = &v101[8 * (v100 >> 3)];
        char v123 = v101;
        uint64_t v125 = v102;
        memcpy(v101, v99, v100);
        unint64_t v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)12>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      char v156 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v39 = *a3;
      int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v40)
      {
        if (v40 < 0) {
          goto LABEL_169;
        }
        int64_t v41 = (uint64_t *)operator new(v40);
        int64_t v42 = &v41[v40 >> 3];
        char v156 = v41;
        uint64_t v158 = v42;
        memcpy(v41, v39, v40);
        uint64_t v157 = v42;
      }
      uint64_t v153 = 0;
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      int64_t v43 = *a4;
      int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v44)
      {
        if (v44 < 0) {
          goto LABEL_169;
        }
        int64_t v45 = (char *)operator new(v44);
        int64_t v46 = &v45[8 * (v44 >> 3)];
        uint64_t v153 = v45;
        uint64_t v155 = v46;
        memcpy(v45, v43, v44);
        unint64_t v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)12>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      int64_t v22 = v156;
      if (v156)
      {
        uint64_t v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v162 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_169;
      }
      int64_t v113 = (uint64_t *)operator new(v112);
      int64_t v114 = &v113[v112 >> 3];
      uint64_t v162 = v113;
      uint64_t v164 = v114;
      memcpy(v113, v111, v112);
      uint64_t v163 = v114;
    }
    uint64_t v159 = 0;
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_169;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v159 = v117;
      uint64_t v161 = v118;
      memcpy(v117, v115, v116);
      uint64_t v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      uint64_t v160 = v159;
      operator delete(v159);
    }
    int64_t v22 = v162;
    if (v162)
    {
      uint64_t v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    int v186 = 0;
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    int64_t v87 = *a3;
    int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v88)
    {
      if (v88 < 0) {
        goto LABEL_169;
      }
      int64_t v89 = (uint64_t *)operator new(v88);
      int64_t v90 = &v89[v88 >> 3];
      int v186 = v89;
      uint64_t v188 = v90;
      memcpy(v89, v87, v88);
      unint64_t v187 = v90;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v91 = *a4;
    int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v92)
    {
      if (v92 < 0) {
        goto LABEL_169;
      }
      int64_t v93 = (char *)operator new(v92);
      int64_t v94 = &v93[8 * (v92 >> 3)];
      uint64_t v183 = v93;
      uint64_t v185 = v94;
      memcpy(v93, v91, v92);
      unint64_t v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  int64_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_169;
    }
    int64_t v25 = (uint64_t *)operator new(v24);
    int64_t v26 = &v25[v24 >> 3];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  int64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_169;
    }
    int64_t v29 = (char *)operator new(v28);
    int64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)12>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, float16x4_t a5)
{
  uint64_t Value = *(void *)**a1;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  uint64_t v205 = ElementType;
  uint64_t v203 = *(void *)**a2;
  uint64_t v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  uint64_t v203 = v11;
  uint64_t Value = v11;
  uint64_t v12 = *(void **)(*(void *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v202 = v11;
    if (*(_UNKNOWN **)(*(void *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = ElementType;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v201 = v13;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    uint64_t v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      long long v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int64_t v79 = *a3;
      int64_t v80 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v80)
      {
        if (v80 < 0) {
          goto LABEL_169;
        }
        int64_t v81 = (uint64_t *)operator new(v80);
        int64_t v82 = &v81[v80 >> 3];
        long long v198 = v81;
        uint64_t v200 = v82;
        memcpy(v81, v79, v80);
        uint64_t v199 = v82;
      }
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int64_t v83 = *a4;
      int64_t v84 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v84)
      {
        if (v84 < 0) {
          goto LABEL_169;
        }
        int64_t v85 = (uint64_t *)operator new(v84);
        int64_t v86 = &v85[v84 >> 3];
        unint64_t v195 = v85;
        uint64_t v197 = v86;
        memcpy(v85, v83, v84);
        uint64_t v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v198, &v195);
      if (v195)
      {
        uint64_t v196 = v195;
        operator delete(v195);
      }
      int64_t v22 = v198;
      if (v198)
      {
        uint64_t v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    int64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_169;
      }
      int64_t v16 = (uint64_t *)operator new(v15);
      int64_t v17 = &v16[v15 >> 3];
      int64_t v192 = v16;
      uint64_t v194 = v17;
      memcpy(v16, v14, v15);
      uint64_t v193 = v17;
    }
    unsigned int v189 = 0;
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_15;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = (uint64_t *)operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unsigned int v189 = v20;
      uint64_t v191 = v21;
      memcpy(v20, v18, v19);
      unint64_t v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)13>(a1, a2, &v192, &v189);
      if (v189)
      {
        unint64_t v190 = v189;
        operator delete(v189);
      }
      int64_t v22 = v192;
      if (v192)
      {
        uint64_t v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        unint64_t v170 = 0;
        double v31 = *a3;
        int64_t v32 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v32)
        {
          if (v32 < 0) {
            goto LABEL_169;
          }
          int64_t v33 = (uint64_t *)operator new(v32);
          int64_t v34 = &v33[v32 >> 3];
          uint64_t v168 = v33;
          unint64_t v170 = v34;
          memcpy(v33, v31, v32);
          uint64_t v169 = v34;
        }
        long long v165 = 0;
        long long v166 = 0;
        unint64_t v167 = 0;
        int64_t v35 = *a4;
        int64_t v36 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v36)
        {
          if (v36 < 0) {
            goto LABEL_169;
          }
          int64_t v37 = (char *)operator new(v36);
          int64_t v38 = &v37[8 * (v36 >> 3)];
          long long v165 = v37;
          unint64_t v167 = v38;
          memcpy(v37, v35, v36);
          long long v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)13>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          long long v166 = v165;
          operator delete(v165);
        }
        int64_t v22 = v168;
        if (v168)
        {
          uint64_t v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      uint64_t v175 = 0;
      int v174 = 0;
      uint64_t v176 = 0;
      int64_t v103 = *a3;
      int64_t v104 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v104)
      {
        if (v104 < 0) {
          goto LABEL_169;
        }
        int64_t v105 = (uint64_t *)operator new(v104);
        int64_t v106 = &v105[v104 >> 3];
        int v174 = v105;
        uint64_t v176 = v106;
        memcpy(v105, v103, v104);
        uint64_t v175 = v106;
      }
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int64_t v107 = *a4;
      int64_t v108 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v108)
      {
        if (v108 < 0) {
          goto LABEL_169;
        }
        int64_t v109 = (char *)operator new(v108);
        int64_t v110 = &v109[8 * (v108 >> 3)];
        uint64_t v171 = v109;
        unint64_t v173 = v110;
        memcpy(v109, v107, v108);
        uint64_t v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v174, (uint64_t **)&v171);
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      int64_t v22 = v174;
      if (v174)
      {
        uint64_t v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        int64_t v47 = *a3;
        int64_t v48 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v48)
        {
          if (v48 < 0) {
            goto LABEL_169;
          }
          int64_t v49 = (uint64_t *)operator new(v48);
          int64_t v50 = &v49[v48 >> 3];
          uint64_t v150 = v49;
          uint64_t v152 = v50;
          memcpy(v49, v47, v48);
          uint64_t v151 = v50;
        }
        unint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        int64_t v51 = *a4;
        int64_t v52 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v52)
        {
          if (v52 < 0) {
            goto LABEL_169;
          }
          int64_t v53 = (char *)operator new(v52);
          int64_t v54 = &v53[8 * (v52 >> 3)];
          unint64_t v147 = v53;
          uint64_t v149 = v54;
          memcpy(v53, v51, v52);
          uint64_t v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)13>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          uint64_t v148 = v147;
          operator delete(v147);
        }
        int64_t v22 = v150;
        if (v150)
        {
          uint64_t v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        uint64_t v146 = 0;
        int64_t v55 = *a3;
        int64_t v56 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v56)
        {
          if (v56 < 0) {
            goto LABEL_169;
          }
          uint64_t v57 = (uint64_t *)operator new(v56);
          int64_t v58 = &v57[v56 >> 3];
          uint64_t v144 = v57;
          uint64_t v146 = v58;
          memcpy(v57, v55, v56);
          unint64_t v145 = v58;
        }
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        int64_t v59 = *a4;
        int64_t v60 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v60)
        {
          if (v60 < 0) {
            goto LABEL_169;
          }
          int64_t v61 = (char *)operator new(v60);
          int64_t v62 = &v61[8 * (v60 >> 3)];
          uint64_t v141 = v61;
          uint64_t v143 = v62;
          memcpy(v61, v59, v60);
          uint64_t v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          uint64_t v142 = v141;
          operator delete(v141);
        }
        int64_t v22 = v144;
        if (v144)
        {
          unint64_t v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        char v138 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        int64_t v63 = *a3;
        int64_t v64 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v64)
        {
          if (v64 < 0) {
            goto LABEL_169;
          }
          int64_t v65 = (uint64_t *)operator new(v64);
          int64_t v66 = &v65[v64 >> 3];
          char v138 = v65;
          uint64_t v140 = v66;
          memcpy(v65, v63, v64);
          uint64_t v139 = v66;
        }
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        int64_t v67 = *a4;
        int64_t v68 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v68)
        {
          if (v68 < 0) {
            goto LABEL_169;
          }
          int64_t v69 = (char *)operator new(v68);
          int64_t v70 = &v69[8 * (v68 >> 3)];
          uint64_t v135 = v69;
          uint64_t v137 = v70;
          memcpy(v69, v67, v68);
          uint64_t v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)13>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          uint64_t v136 = v135;
          operator delete(v135);
        }
        int64_t v22 = v138;
        if (v138)
        {
          uint64_t v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        int64_t v71 = *a3;
        int64_t v72 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v72)
        {
          if (v72 < 0) {
            goto LABEL_169;
          }
          int64_t v73 = (uint64_t *)operator new(v72);
          int64_t v74 = &v73[v72 >> 3];
          uint64_t v132 = v73;
          uint64_t v134 = v74;
          memcpy(v73, v71, v72);
          uint64_t v133 = v74;
        }
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v75 = *a4;
        int64_t v76 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v76)
        {
          if (v76 < 0) {
            goto LABEL_169;
          }
          int64_t v77 = (char *)operator new(v76);
          int64_t v78 = &v77[8 * (v76 >> 3)];
          uint64_t v129 = v77;
          uint64_t v131 = v78;
          memcpy(v77, v75, v76);
          uint64_t v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)13>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          uint64_t v130 = v129;
          operator delete(v129);
        }
        int64_t v22 = v132;
        if (v132)
        {
          uint64_t v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          int64_t v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>((mlir::Type *)&v203);
          }
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          int64_t v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      int64_t v95 = *a3;
      int64_t v96 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v96)
      {
        if (v96 < 0) {
          goto LABEL_169;
        }
        int64_t v97 = (uint64_t *)operator new(v96);
        int64_t v98 = &v97[v96 >> 3];
        uint64_t v126 = v97;
        uint64_t v128 = v98;
        memcpy(v97, v95, v96);
        uint64_t v127 = v98;
      }
      char v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v99 = *a4;
      int64_t v100 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v100)
      {
        if (v100 < 0) {
          goto LABEL_169;
        }
        int64_t v101 = (char *)operator new(v100);
        int64_t v102 = &v101[8 * (v100 >> 3)];
        char v123 = v101;
        uint64_t v125 = v102;
        memcpy(v101, v99, v100);
        unint64_t v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        unint64_t v124 = v123;
        operator delete(v123);
      }
      int64_t v22 = v126;
      if (v126)
      {
        uint64_t v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      char v156 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v39 = *a3;
      int64_t v40 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v40)
      {
        if (v40 < 0) {
          goto LABEL_169;
        }
        int64_t v41 = (uint64_t *)operator new(v40);
        int64_t v42 = &v41[v40 >> 3];
        char v156 = v41;
        uint64_t v158 = v42;
        memcpy(v41, v39, v40);
        uint64_t v157 = v42;
      }
      uint64_t v153 = 0;
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      int64_t v43 = *a4;
      int64_t v44 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v44)
      {
        if (v44 < 0) {
          goto LABEL_169;
        }
        int64_t v45 = (char *)operator new(v44);
        int64_t v46 = &v45[8 * (v44 >> 3)];
        uint64_t v153 = v45;
        uint64_t v155 = v46;
        memcpy(v45, v43, v44);
        unint64_t v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)13>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      int64_t v22 = v156;
      if (v156)
      {
        uint64_t v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v162 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    int64_t v111 = *a3;
    int64_t v112 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v112)
    {
      if (v112 < 0) {
        goto LABEL_169;
      }
      int64_t v113 = (uint64_t *)operator new(v112);
      int64_t v114 = &v113[v112 >> 3];
      uint64_t v162 = v113;
      uint64_t v164 = v114;
      memcpy(v113, v111, v112);
      uint64_t v163 = v114;
    }
    uint64_t v159 = 0;
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    int64_t v115 = *a4;
    int64_t v116 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v116)
    {
      if (v116 < 0) {
        goto LABEL_169;
      }
      int64_t v117 = (char *)operator new(v116);
      int64_t v118 = &v117[8 * (v116 >> 3)];
      uint64_t v159 = v117;
      uint64_t v161 = v118;
      memcpy(v117, v115, v116);
      uint64_t v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      uint64_t v160 = v159;
      operator delete(v159);
    }
    int64_t v22 = v162;
    if (v162)
    {
      uint64_t v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    int v186 = 0;
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    int64_t v87 = *a3;
    int64_t v88 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v88)
    {
      if (v88 < 0) {
        goto LABEL_169;
      }
      int64_t v89 = (uint64_t *)operator new(v88);
      int64_t v90 = &v89[v88 >> 3];
      int v186 = v89;
      uint64_t v188 = v90;
      memcpy(v89, v87, v88);
      unint64_t v187 = v90;
    }
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0;
    int64_t v91 = *a4;
    int64_t v92 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v92)
    {
      if (v92 < 0) {
        goto LABEL_169;
      }
      int64_t v93 = (char *)operator new(v92);
      int64_t v94 = &v93[8 * (v92 >> 3)];
      uint64_t v183 = v93;
      uint64_t v185 = v94;
      memcpy(v93, v91, v92);
      unint64_t v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      unint64_t v184 = v183;
      operator delete(v183);
    }
    int64_t v22 = v186;
    if (v186)
    {
      unint64_t v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  uint64_t v181 = 0;
  unint64_t v180 = 0;
  unsigned int v182 = 0;
  int64_t v23 = *a3;
  int64_t v24 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v24)
  {
    if (v24 < 0) {
      goto LABEL_169;
    }
    int64_t v25 = (uint64_t *)operator new(v24);
    int64_t v26 = &v25[v24 >> 3];
    unint64_t v180 = v25;
    unsigned int v182 = v26;
    memcpy(v25, v23, v24);
    uint64_t v181 = v26;
  }
  uint64_t v178 = 0;
  __p = 0;
  uint64_t v179 = 0;
  int64_t v27 = *a4;
  int64_t v28 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v28)
  {
    if (v28 < 0) {
      goto LABEL_169;
    }
    int64_t v29 = (char *)operator new(v28);
    int64_t v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    uint64_t v179 = v30;
    memcpy(v29, v27, v28);
    uint64_t v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)13>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  int64_t v22 = v180;
  if (v180)
  {
    uint64_t v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)14>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t Value = *(void *)**a1;
  uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  uint64_t v206 = ElementType;
  uint64_t v204 = *(void *)**a2;
  uint64_t v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v204);
  uint64_t v204 = v11;
  uint64_t Value = v11;
  uint64_t v12 = *(void **)(*(void *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v203 = v11;
    if (*(_UNKNOWN **)(*(void *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v13 = ElementType;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v202 = v13;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
    uint64_t v206 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v206))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      uint64_t v201 = 0;
      int64_t v80 = *a3;
      int64_t v81 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v81)
      {
        if (v81 < 0) {
          goto LABEL_169;
        }
        int64_t v82 = (uint64_t *)operator new(v81);
        int64_t v83 = &v82[v81 >> 3];
        uint64_t v199 = v82;
        uint64_t v201 = v83;
        memcpy(v82, v80, v81);
        uint64_t v200 = v83;
      }
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      long long v198 = 0;
      int64_t v84 = *a4;
      int64_t v85 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v85)
      {
        if (v85 < 0) {
          goto LABEL_169;
        }
        int64_t v86 = (uint64_t *)operator new(v85);
        int64_t v87 = &v86[v85 >> 3];
        uint64_t v196 = v86;
        long long v198 = v87;
        memcpy(v86, v84, v85);
        uint64_t v197 = v87;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>(a1, a2, &v199, &v196);
      if (v196)
      {
        uint64_t v197 = v196;
        operator delete(v196);
      }
      int64_t v22 = v199;
      if (v199)
      {
        uint64_t v200 = v199;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    unint64_t v195 = 0;
    uint64_t v14 = *a3;
    int64_t v15 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v15)
    {
      if (v15 < 0) {
        goto LABEL_169;
      }
      int64_t v16 = (uint64_t *)operator new(v15);
      int64_t v17 = &v16[v15 >> 3];
      uint64_t v193 = v16;
      unint64_t v195 = v17;
      memcpy(v16, v14, v15);
      uint64_t v194 = v17;
    }
    unint64_t v190 = 0;
    uint64_t v191 = 0;
    int64_t v192 = 0;
    unint64_t v18 = *a4;
    int64_t v19 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (!v19) {
      goto LABEL_15;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = (uint64_t *)operator new(v19);
      uint64_t v21 = &v20[v19 >> 3];
      unint64_t v190 = v20;
      int64_t v192 = v21;
      memcpy(v20, v18, v19);
      uint64_t v191 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v193, &v190);
      if (v190)
      {
        uint64_t v191 = v190;
        operator delete(v190);
      }
      int64_t v22 = v193;
      if (v193)
      {
        uint64_t v194 = v193;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v206))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v206))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v169 = 0;
        unint64_t v170 = 0;
        uint64_t v171 = 0;
        int64_t v32 = *a3;
        int64_t v33 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v33)
        {
          if (v33 < 0) {
            goto LABEL_169;
          }
          int64_t v34 = (uint64_t *)operator new(v33);
          int64_t v35 = &v34[v33 >> 3];
          uint64_t v169 = v34;
          uint64_t v171 = v35;
          memcpy(v34, v32, v33);
          unint64_t v170 = v35;
        }
        long long v166 = 0;
        unint64_t v167 = 0;
        uint64_t v168 = 0;
        int64_t v36 = *a4;
        int64_t v37 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v37)
        {
          if (v37 < 0) {
            goto LABEL_169;
          }
          int64_t v38 = (char *)operator new(v37);
          uint64_t v39 = &v38[8 * (v37 >> 3)];
          long long v166 = v38;
          uint64_t v168 = v39;
          memcpy(v38, v36, v37);
          unint64_t v167 = v39;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)14>(a1, a2, &v169, (uint64_t **)&v166);
        if (v166)
        {
          unint64_t v167 = v166;
          operator delete(v166);
        }
        int64_t v22 = v169;
        if (v169)
        {
          unint64_t v170 = v169;
          goto LABEL_167;
        }
        return;
      }
      uint64_t v176 = 0;
      uint64_t v175 = 0;
      unsigned int v177 = 0;
      int64_t v104 = *a3;
      int64_t v105 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v105)
      {
        if (v105 < 0) {
          goto LABEL_169;
        }
        int64_t v106 = (uint64_t *)operator new(v105);
        int64_t v107 = &v106[v105 >> 3];
        uint64_t v175 = v106;
        unsigned int v177 = v107;
        memcpy(v106, v104, v105);
        uint64_t v176 = v107;
      }
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int v174 = 0;
      int64_t v108 = *a4;
      int64_t v109 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v109)
      {
        if (v109 < 0) {
          goto LABEL_169;
        }
        int64_t v110 = (char *)operator new(v109);
        int64_t v111 = &v110[8 * (v109 >> 3)];
        uint64_t v172 = v110;
        int v174 = v111;
        memcpy(v110, v108, v109);
        unint64_t v173 = v111;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>(a1, a2, &v175, (uint64_t **)&v172);
      if (v172)
      {
        unint64_t v173 = v172;
        operator delete(v172);
      }
      int64_t v22 = v175;
      if (v175)
      {
        uint64_t v176 = v175;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v206))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v206))
      {
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        int64_t v48 = *a3;
        int64_t v49 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v49)
        {
          if (v49 < 0) {
            goto LABEL_169;
          }
          int64_t v50 = (uint64_t *)operator new(v49);
          int64_t v51 = &v50[v49 >> 3];
          uint64_t v151 = v50;
          uint64_t v153 = v51;
          memcpy(v50, v48, v49);
          uint64_t v152 = v51;
        }
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        uint64_t v150 = 0;
        int64_t v52 = *a4;
        int64_t v53 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v53)
        {
          if (v53 < 0) {
            goto LABEL_169;
          }
          int64_t v54 = (char *)operator new(v53);
          int64_t v55 = &v54[8 * (v53 >> 3)];
          uint64_t v148 = v54;
          uint64_t v150 = v55;
          memcpy(v54, v52, v53);
          uint64_t v149 = v55;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)14>(a1, a2, &v151, (uint64_t **)&v148);
        if (v148)
        {
          uint64_t v149 = v148;
          operator delete(v148);
        }
        int64_t v22 = v151;
        if (v151)
        {
          uint64_t v152 = v151;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v206))
      {
        unint64_t v145 = 0;
        uint64_t v146 = 0;
        unint64_t v147 = 0;
        int64_t v56 = *a3;
        int64_t v57 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v57)
        {
          if (v57 < 0) {
            goto LABEL_169;
          }
          int64_t v58 = (uint64_t *)operator new(v57);
          int64_t v59 = &v58[v57 >> 3];
          unint64_t v145 = v58;
          unint64_t v147 = v59;
          memcpy(v58, v56, v57);
          uint64_t v146 = v59;
        }
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        int64_t v60 = *a4;
        int64_t v61 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v61)
        {
          if (v61 < 0) {
            goto LABEL_169;
          }
          int64_t v62 = (char *)operator new(v61);
          int64_t v63 = &v62[8 * (v61 >> 3)];
          uint64_t v142 = v62;
          uint64_t v144 = v63;
          memcpy(v62, v60, v61);
          uint64_t v143 = v63;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)14>(a1, a2, &v145, (uint64_t **)&v142);
        if (v142)
        {
          uint64_t v143 = v142;
          operator delete(v142);
        }
        int64_t v22 = v145;
        if (v145)
        {
          uint64_t v146 = v145;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v206))
      {
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        int64_t v64 = *a3;
        int64_t v65 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v65)
        {
          if (v65 < 0) {
            goto LABEL_169;
          }
          int64_t v66 = (uint64_t *)operator new(v65);
          int64_t v67 = (char *)&v66[v65 >> 3];
          uint64_t v139 = v66;
          uint64_t v141 = v67;
          memcpy(v66, v64, v65);
          uint64_t v140 = (uint64_t *)v67;
        }
        uint64_t v136 = 0;
        uint64_t v137 = 0;
        char v138 = 0;
        int64_t v68 = *a4;
        int64_t v69 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v69)
        {
          if (v69 < 0) {
            goto LABEL_169;
          }
          int64_t v70 = (char *)operator new(v69);
          int64_t v71 = &v70[8 * (v69 >> 3)];
          uint64_t v136 = v70;
          char v138 = v71;
          memcpy(v70, v68, v69);
          uint64_t v137 = v71;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, (uint64_t)&v139, (uint64_t **)&v136);
        if (v136)
        {
          uint64_t v137 = v136;
          operator delete(v136);
        }
        int64_t v22 = v139;
        if (v139)
        {
          uint64_t v140 = v139;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        uint64_t v135 = 0;
        int64_t v72 = *a3;
        int64_t v73 = (unsigned char *)a3[1] - (unsigned char *)*a3;
        if (v73)
        {
          if (v73 < 0) {
            goto LABEL_169;
          }
          int64_t v74 = (uint64_t *)operator new(v73);
          uint64_t v75 = &v74[v73 >> 3];
          uint64_t v133 = v74;
          uint64_t v135 = v75;
          memcpy(v74, v72, v73);
          uint64_t v134 = v75;
        }
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v132 = 0;
        int64_t v76 = *a4;
        int64_t v77 = (unsigned char *)a4[1] - (unsigned char *)*a4;
        if (v77)
        {
          if (v77 < 0) {
            goto LABEL_169;
          }
          int64_t v78 = (char *)operator new(v77);
          int64_t v79 = &v78[8 * (v77 >> 3)];
          uint64_t v130 = v78;
          uint64_t v132 = v79;
          memcpy(v78, v76, v77);
          uint64_t v131 = v79;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)13>(a1, a2, &v133, (uint64_t **)&v130);
        if (v130)
        {
          uint64_t v131 = v130;
          operator delete(v130);
        }
        int64_t v22 = v133;
        if (v133)
        {
          uint64_t v134 = v133;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v123, (uint64_t)a3);
          std::vector<long long>::vector(v122, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v123, (uint64_t **)v122);
          if (v122[0])
          {
            v122[1] = v122[0];
            operator delete(v122[0]);
          }
          int64_t v22 = v123[0];
          if (v123[0])
          {
            v123[1] = v123[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>((mlir::Type *)&v204);
          }
          std::vector<long long>::vector(v121, (uint64_t)a3);
          std::vector<long long>::vector(v120, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v121, (uint64_t **)v120);
          if (v120[0])
          {
            v120[1] = v120[0];
            operator delete(v120[0]);
          }
          int64_t v22 = (uint64_t *)v121[0];
          if (v121[0])
          {
            v121[1] = v121[0];
            goto LABEL_167;
          }
        }
        return;
      }
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      uint64_t v129 = 0;
      int64_t v96 = *a3;
      int64_t v97 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v97)
      {
        if (v97 < 0) {
          goto LABEL_169;
        }
        int64_t v98 = (uint64_t *)operator new(v97);
        int64_t v99 = &v98[v97 >> 3];
        uint64_t v127 = v98;
        uint64_t v129 = v99;
        memcpy(v98, v96, v97);
        uint64_t v128 = v99;
      }
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      uint64_t v126 = 0;
      int64_t v100 = *a4;
      int64_t v101 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v101)
      {
        if (v101 < 0) {
          goto LABEL_169;
        }
        int64_t v102 = (char *)operator new(v101);
        int64_t v103 = &v102[8 * (v101 >> 3)];
        unint64_t v124 = v102;
        uint64_t v126 = v103;
        memcpy(v102, v100, v101);
        uint64_t v125 = v103;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v127, (uint64_t **)&v124);
      if (v124)
      {
        uint64_t v125 = v124;
        operator delete(v124);
      }
      int64_t v22 = v127;
      if (v127)
      {
        uint64_t v128 = v127;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v159 = 0;
      int64_t v40 = *a3;
      int64_t v41 = (unsigned char *)a3[1] - (unsigned char *)*a3;
      if (v41)
      {
        if (v41 < 0) {
          goto LABEL_169;
        }
        int64_t v42 = (uint64_t *)operator new(v41);
        int64_t v43 = &v42[v41 >> 3];
        uint64_t v157 = v42;
        uint64_t v159 = v43;
        memcpy(v42, v40, v41);
        uint64_t v158 = v43;
      }
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      char v156 = 0;
      int64_t v44 = *a4;
      int64_t v45 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v45)
      {
        if (v45 < 0) {
          goto LABEL_169;
        }
        int64_t v46 = (char *)operator new(v45);
        int64_t v47 = &v46[8 * (v45 >> 3)];
        unint64_t v154 = v46;
        char v156 = v47;
        memcpy(v46, v44, v45);
        uint64_t v155 = v47;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v157, (uint64_t **)&v154);
      if (v154)
      {
        uint64_t v155 = v154;
        operator delete(v154);
      }
      int64_t v22 = v157;
      if (v157)
      {
        uint64_t v158 = v157;
        goto LABEL_167;
      }
      return;
    }
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    long long v165 = 0;
    int64_t v112 = *a3;
    int64_t v113 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v113)
    {
      if (v113 < 0) {
        goto LABEL_169;
      }
      int64_t v114 = (uint64_t *)operator new(v113);
      int64_t v115 = &v114[v113 >> 3];
      uint64_t v163 = v114;
      long long v165 = v115;
      memcpy(v114, v112, v113);
      uint64_t v164 = v115;
    }
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    uint64_t v162 = 0;
    int64_t v116 = *a4;
    int64_t v117 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v117)
    {
      if (v117 < 0) {
        goto LABEL_169;
      }
      int64_t v118 = (char *)operator new(v117);
      int64_t v119 = &v118[8 * (v117 >> 3)];
      uint64_t v160 = v118;
      uint64_t v162 = v119;
      memcpy(v118, v116, v117);
      uint64_t v161 = v119;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v163, (uint64_t **)&v160);
    if (v160)
    {
      uint64_t v161 = v160;
      operator delete(v160);
    }
    int64_t v22 = v163;
    if (v163)
    {
      uint64_t v164 = v163;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    unsigned int v189 = 0;
    int64_t v88 = *a3;
    int64_t v89 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v89)
    {
      if (v89 < 0) {
        goto LABEL_169;
      }
      int64_t v90 = (uint64_t *)operator new(v89);
      int64_t v91 = &v90[v89 >> 3];
      unint64_t v187 = v90;
      unsigned int v189 = v91;
      memcpy(v90, v88, v89);
      uint64_t v188 = v91;
    }
    uint64_t v185 = 0;
    unint64_t v184 = 0;
    int v186 = 0;
    int64_t v92 = *a4;
    int64_t v93 = (unsigned char *)a4[1] - (unsigned char *)*a4;
    if (v93)
    {
      if (v93 < 0) {
        goto LABEL_169;
      }
      int64_t v94 = (char *)operator new(v93);
      int64_t v95 = &v94[8 * (v93 >> 3)];
      unint64_t v184 = v94;
      int v186 = v95;
      memcpy(v94, v92, v93);
      uint64_t v185 = v95;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>(a1, a2, &v187, (uint64_t **)&v184, a5, v23);
    if (v184)
    {
      uint64_t v185 = v184;
      operator delete(v184);
    }
    int64_t v22 = v187;
    if (v187)
    {
      uint64_t v188 = v187;
      goto LABEL_167;
    }
    return;
  }
  unsigned int v182 = 0;
  uint64_t v181 = 0;
  uint64_t v183 = 0;
  int64_t v24 = *a3;
  int64_t v25 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v25)
  {
    if (v25 < 0) {
      goto LABEL_169;
    }
    int64_t v26 = (uint64_t *)operator new(v25);
    int64_t v27 = &v26[v25 >> 3];
    uint64_t v181 = v26;
    uint64_t v183 = v27;
    memcpy(v26, v24, v25);
    unsigned int v182 = v27;
  }
  uint64_t v179 = 0;
  __p = 0;
  unint64_t v180 = 0;
  int64_t v28 = *a4;
  int64_t v29 = (unsigned char *)a4[1] - (unsigned char *)*a4;
  if (v29)
  {
    if (v29 < 0) {
      goto LABEL_169;
    }
    int64_t v30 = (char *)operator new(v29);
    double v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    unint64_t v180 = v31;
    memcpy(v30, v28, v29);
    uint64_t v179 = v31;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)14>(a1, a2, &v181, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v179 = __p;
    operator delete(__p);
  }
  int64_t v22 = v181;
  if (v181)
  {
    unsigned int v182 = v181;
    goto LABEL_167;
  }
}

uint64_t mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel(uint64_t result, int a2, double a3)
{
  *(_DWORD *)(result + 16) = a2;
  *(double *)(result + 24) = a3;
  *(void *)float result = mlir::mps::CPUNDArrayArithmeticUnaryKernel::arithmeticUnaryTileKernel;
  *(void *)(result + 8) = 4;
  return result;
}

void *mlir::mps::recurseTransposeImpl(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, size_t a16)
{
  unsigned int v25 = result;
  uint64_t v16 = *(unsigned int *)(a4 + 8 * a11);
  if (*(_DWORD *)(a4 + 8 * a11))
  {
    uint64_t v17 = *(void *)(a9 + 8 * *(void *)(a6 + 8 * a11));
    uint64_t v18 = a12;
    size_t v19 = a16 * a12;
    do
    {
      if ((int)(v25 - 1) <= a11)
      {
        float result = memcpy(*a15, (const void *)(*(void *)(a13 + 40) + v19), a16);
        *a15 = (char *)*a15 + a16;
      }
      else
      {
        float result = (void *)mlir::mps::recurseTransposeImpl(v25, a2, a3, a4, a5, a6, a7);
      }
      v19 += v17 * a16;
      v18 += v17;
      --v16;
    }
    while (v16);
  }
  return result;
}

void mlir::mps::transpose(mlir::AffineBinaryOpExpr *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v9 = *((void *)this + 3);
    uint64_t v18 = *((void *)this + 4);
    uint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 32);
    if (!(*((unsigned __int8 *)this + 50) | *(unsigned __int8 *)(a2 + 50))
      && *(_UNKNOWN **)(*(void *)mlir::AffineBinaryOpExpr::getRHS(this) + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a2);
    }
    __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    std::vector<long long>::__append((uint64_t)&__p, v4);
    uint64_t v12 = __p;
    if (v4 >= 1)
    {
      uint64_t v13 = 1;
      int64_t v14 = v4;
      do
      {
        v12[v14 - 1] = v13;
        v13 *= *(void *)(v9 - 8 + 8 * v14--);
      }
      while (v14);
    }
    size_t v19 = *(void **)(a2 + 40);
    uint64_t v15 = (v21 - (unsigned char *)v12) >> 3;
    size_t ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize(this);
    mlir::mps::recurseTransposeImpl((void *)v4, v9, v18, v10, v11, a3, a4, v17, (uint64_t)v12, v15, 0, 0, (uint64_t)this, a2, &v19, ElementDataSize);
    if (__p)
    {
      uint64_t v21 = __p;
      operator delete(__p);
    }
  }
}

void mlir::mps::recurseNonZeroImpl(mlir::mps::CPUNDArray *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = a2 + 1;
  uint64_t v10 = (void *)(a4 + 16);
  while (1)
  {
    uint64_t v11 = *((void *)a1 + 2);
    uint64_t v12 = 1;
    uint64_t v13 = (v11 & (a2 >> 63)) + a2;
    if (v13 >= 0 && v11) {
      uint64_t v12 = *(void *)(*((void *)a1 + 3) + 8 * v13);
    }
    if (v8 >= v12) {
      break;
    }
    int64_t v14 = *(int **)a3;
    *(void *)(*(void *)a3 + 8 * a2) = v8;
    if (*((void *)a1 + 2) - 1 == a2)
    {
      uint64_t __dst = 0;
      uint64_t v15 = *(unsigned int *)(a3 + 8);
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = *((void *)a1 + 7);
        if (v15 == 1) {
          goto LABEL_14;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v16 = v15 & 0xFFFFFFFE;
        uint64_t v21 = v14 + 2;
        uint64_t v22 = (void *)(v18 + 8);
        uint64_t v23 = v16;
        do
        {
          v19 += *(v22 - 1) * *(v21 - 1);
          v20 += *v22 * *v21;
          v21 += 2;
          v22 += 2;
          v23 -= 2;
        }
        while (v23);
        uint64_t v17 = v20 + v19;
        if (v16 != v15)
        {
LABEL_14:
          uint64_t v24 = v15 - v16;
          uint64_t v25 = 2 * v16;
          int64_t v26 = (uint64_t *)(v18 + v25 * 4);
          int64_t v27 = (uint64_t *)&v14[v25];
          do
          {
            uint64_t v29 = *v27++;
            uint64_t v28 = v29;
            uint64_t v30 = *v26++;
            v17 += v30 * v28;
            --v24;
          }
          while (v24);
        }
      }
      else
      {
        uint64_t v17 = *(unsigned int *)(a3 + 8);
      }
      double v31 = (const void *)(*((void *)a1 + 5) + v17);
      size_t ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize(a1);
      memcpy(&__dst, v31, ElementDataSize);
      if (__dst)
      {
        uint64_t v33 = *(unsigned int *)(a3 + 8);
        if (v33)
        {
          int64_t v34 = *(int **)a3;
          unsigned int v35 = *(_DWORD *)(a4 + 8);
          uint64_t v36 = 8 * v33;
          do
          {
            int v37 = *v34;
            if (v35 >= *(_DWORD *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v10, v35 + 1, 4);
              unsigned int v35 = *(_DWORD *)(a4 + 8);
            }
            *(_DWORD *)(*(void *)a4 + 4 * v35) = v37;
            unsigned int v35 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v35;
            v34 += 2;
            v36 -= 8;
          }
          while (v36);
        }
      }
    }
    else
    {
      mlir::mps::recurseNonZeroImpl(a1, v9, a3, a4);
    }
    ++v8;
  }
}

void mlir::mps::computeNonZeroIndices(mlir::mps *this@<X0>, uint64_t a2@<X8>)
{
  v17[32] = *MEMORY[0x263EF8340];
  if ((unint64_t)mlir::mps::CPUNDArray::getElementDataSize(this) >= 9)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 272) = 0;
    return;
  }
  __src = v17;
  uint64_t v16 = 0x4000000000;
  unint64_t v5 = *((void *)this + 2);
  uint64_t v11 = v14;
  int v13 = 4;
  if (v5 < 5)
  {
    if (!v5) {
      goto LABEL_8;
    }
    size_t v7 = 8 * v5;
    int v6 = v14;
  }
  else
  {
    int v12 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v14, v5, 8);
    int v6 = v11;
    size_t v7 = 8 * v5;
  }
  bzero(v6, v7);
LABEL_8:
  int v12 = v5;
  mlir::mps::recurseNonZeroImpl(this, 0, (uint64_t)&v11, (uint64_t)&__src);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x4000000000;
  int v8 = v16;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v17)
    {
      unsigned int v10 = v16;
      if (v16 < 0x41
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 4),
            (unsigned int v10 = v16) != 0))
      {
        memcpy(*(void **)a2, __src, 4 * v10);
      }
      *(_DWORD *)(a2 + 8) = v8;
    }
    else
    {
      *(void *)a2 = __src;
      int v9 = HIDWORD(v16);
      *(_DWORD *)(a2 + 8) = v8;
      *(_DWORD *)(a2 + 12) = v9;
      __src = v17;
      HIDWORD(v16) = 0;
    }
    LODWORD(v16) = 0;
  }
  *(unsigned char *)(a2 + 272) = 1;
  if (v11 != v14) {
    free(v11);
  }
  if (__src != v17) {
    free(__src);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v40 = 0;
    int64_t v41 = (float32x2_t *)(**(void **)a3 + *(void *)(v4 + 40));
    int64_t v42 = (float32x2_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    int64_t v43 = (float32x2_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        int64_t v45 = v41;
        int64_t v46 = v42;
        int64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            int64_t v49 = v45;
            int64_t v50 = v46;
            int64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              int64_t v53 = v49;
              int64_t v54 = v50;
              int64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  *int64_t v55 = vadd_f32(*v53, *v54);
                  int64_t v55 = (float32x2_t *)((char *)v55 + v39);
                  int64_t v54 = (float32x2_t *)((char *)v54 + v34);
                  int64_t v53 = (float32x2_t *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              int64_t v51 = (float32x2_t *)((char *)v51 + v38);
              int64_t v50 = (float32x2_t *)((char *)v50 + v31);
              int64_t v49 = (float32x2_t *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          int64_t v47 = (float32x2_t *)((char *)v47 + v37);
          int64_t v46 = (float32x2_t *)((char *)v46 + v32);
          int64_t v45 = (float32x2_t *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      int64_t v43 = (float32x2_t *)((char *)v43 + v36);
      int64_t v42 = (float32x2_t *)((char *)v42 + v56);
      int64_t v41 = (float32x2_t *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}